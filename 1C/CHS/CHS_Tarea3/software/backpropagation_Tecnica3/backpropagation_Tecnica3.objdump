
backpropagation_Tecnica3.elf:     file format elf32-littlenios2
backpropagation_Tecnica3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011a14 memsz 0x00011a14 flags r-x
    LOAD off    0x00012a34 vaddr 0x00011a34 paddr 0x00013534 align 2**12
         filesz 0x00001b00 memsz 0x00001b00 flags rw-
    LOAD off    0x00015034 vaddr 0x00015034 paddr 0x00015034 align 2**12
         filesz 0x00000000 memsz 0x0000290c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011338  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b8  0001157c  0001157c  0001257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b00  00011a34  00013534  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000290c  00015034  00015034  00015034  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00017940  00017940  00014534  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08800000  08800000  00014534  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014534  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001110  00000000  00000000  00014558  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028b5f  00000000  00000000  00015668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a7c5  00000000  00000000  0003e1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ced1  00000000  00000000  0004898c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026d8  00000000  00000000  00055860  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042a0  00000000  00000000  00057f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001898f  00000000  00000000  0005c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00074b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a68  00000000  00000000  00074b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007a066  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007a069  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007a06c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007a06d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007a06e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007a072  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007a076  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007a07a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007a083  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007a08c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  0007a095  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000029  00000000  00000000  0007a0a3  2**0
                  CONTENTS, READONLY
 30 .jdi          00003a07  00000000  00000000  0007a0cc  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00052b2d  00000000  00000000  0007dad3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001157c l    d  .rodata	00000000 .rodata
00011a34 l    d  .rwdata	00000000 .rwdata
00015034 l    d  .bss	00000000 .bss
00017940 l    d  .sdram	00000000 .sdram
08800000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../backpropagation_Tecnica3_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00011a34 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011786 l     O .rodata	00000010 zeroes.4404
0000651c l     F .text	000000bc __sbprintf
00011796 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000672c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000825c l     F .text	00000008 __fp_unlock
00008270 l     F .text	0000019c __sinit.part.1
0000840c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011e78 l     O .rwdata	00000020 lc_ctype_charset
00011e58 l     O .rwdata	00000020 lc_message_charset
00011e98 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000117c4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000b958 l     F .text	000000fc __sprint_r.part.0
000118f8 l     O .rodata	00000010 blanks.4348
000118e8 l     O .rodata	00000010 zeroes.4349
0000cee4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e74c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e858 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e884 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000eb64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ec44 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ed30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ef04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013524 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f2f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f428 l     F .text	00000034 alt_dev_reg
00012480 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f72c l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f938 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ff70 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010458 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000108cc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010a0c l     F .text	0000003c alt_get_errno
00010a48 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015094 g     O .bss	00000004 alt_instruction_exception_handler
00004058 g     F .text	00000018 putchar
0000aea8 g     F .text	00000074 _mprec_log10
0000af94 g     F .text	0000008c __any_on
0000d5d8 g     F .text	00000054 _isatty_r
000117d0 g     O .rodata	00000028 __mprec_tinytens
0000ee40 g     F .text	0000007c alt_main
00004070 g     F .text	000000c0 _puts_r
00017840 g     O .bss	00000100 alt_irq
0000d62c g     F .text	00000060 _lseek_r
00001434 g     F .text	00000130 sqrt
00013534 g       *ABS*	00000000 __flash_rwdata_start
0000e3e4 g     F .text	00000088 .hidden __eqdf2
00009074 g     F .text	0000005c _gettimeofday_r
00017940 g       *ABS*	00000000 __alt_heap_start
00004014 g     F .text	0000003c printf
0000d6ec g     F .text	0000009c _wcrtomb_r
0000b818 g     F .text	0000005c __sseek
000085ac g     F .text	00000010 __sinit
00010dec g     F .text	00000024 alt_get_cpu_freq
0000cfa0 g     F .text	00000140 __swbuf_r
000090d0 g     F .text	0000007c _setlocale_r
00008414 g     F .text	00000068 __sfmoreglue
0000eee0 g     F .text	00000024 __malloc_unlock
00009da0 g     F .text	0000015c memmove
00010064 g     F .text	00000280 perf_print_formatted_report
00008594 g     F .text	00000018 _cleanup
00015034 g     O .bss	00000004 patNum
0000a024 g     F .text	000000a8 _Balloc
0000e46c g     F .text	000000dc .hidden __gtdf2
00010c60 g     F .text	00000024 altera_nios2_gen2_irq_init
00003fd4 g     F .text	00000010 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000d57c g     F .text	0000005c _fstat_r
00015050 g     O .bss	00000004 errno
0000b794 g     F .text	00000008 __seofread
00015080 g     O .bss	00000004 alt_argv
0001b4e0 g       *ABS*	00000000 _gp
00015038 g     O .bss	00000004 errThisPat
00015040 g     O .bss	00000004 RMSerror
00012300 g     O .rwdata	00000180 alt_fd_list
000006ac g     F .text	00000034 WeightChangesH2O
000007d0 g     F .text	000000a8 WeightChangesH1H2
00004050 g     F .text	00000008 _putchar_r
00010e10 g     F .text	00000090 alt_find_dev
00009c58 g     F .text	00000148 memcpy
00008264 g     F .text	0000000c _cleanup_r
0000e5c8 g     F .text	000000dc .hidden __floatsidf
00010990 g     F .text	0000007c alt_io_redirect
000029fc g     F .text	000000f4 .hidden __ltdf2
0001157c g       *ABS*	00000000 __DTOR_END__
00004130 g     F .text	00000014 puts
000110dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
000017ec g     F .text	00000074 __fpclassifyd
0000ae04 g     F .text	000000a4 __ratio
00004288 g     F .text	00000030 system
0000cec8 g     F .text	0000001c __vfiprintf_internal
0000fb30 g     F .text	0000021c altera_avalon_jtag_uart_read
00003fe4 g     F .text	00000030 _printf_r
00003f18 g     F .text	00000064 .hidden __udivsi3
0000eba0 g     F .text	000000a4 isatty
00011820 g     O .rodata	000000c8 __mprec_tens
0000914c g     F .text	0000000c __locale_charset
0001506c g     O .bss	00000008 alt_timezone
0001104c g     F .text	00000090 alt_icache_flush
00015068 g     O .bss	00000004 __malloc_top_pad
00010d8c g     F .text	00000040 perf_get_num_starts
000134fc g     O .rwdata	00000004 __mb_cur_max
0000917c g     F .text	0000000c _localeconv_r
000134e8 g     O .rwdata	00000004 LR_H2O
0000a430 g     F .text	0000003c __i2b
00008a30 g     F .text	000004bc __sfvwrite_r
0000b6ec g     F .text	00000054 _sbrk_r
000009d4 g     F .text	00000104 WeightChangesIH1
00000ad8 g     F .text	00000120 WeightUpdatesIH1
0000d68c g     F .text	00000060 _read_r
0001351c g     O .rwdata	00000004 alt_max_fd
0000d270 g     F .text	000000f0 _fclose_r
0000822c g     F .text	00000030 fflush
00015064 g     O .bss	00000004 __malloc_max_sbrked_mem
00003b04 g     F .text	00000110 .hidden __extendsfdf2
00004258 g     F .text	00000030 _system_r
00001868 g     F .text	000008ac .hidden __adddf3
00001048 g     F .text	000000d8 displayResults
000134e4 g     O .rwdata	00000004 LR_IH1
0000abac g     F .text	0000010c __b2d
0000deac g     F .text	00000538 .hidden __umoddi3
0000ed6c g     F .text	000000d4 lseek
000134f0 g     O .rwdata	00000004 __fdlib_version
000150c0 g     O .bss	00000050 hiddenVal2
000134f4 g     O .rwdata	00000004 _global_impure_ptr
0000034c g     F .text	00000360 calcNet
0000b188 g     F .text	00000564 _realloc_r
00017940 g       *ABS*	00000000 __bss_end
000107dc g     F .text	000000f0 alt_iic_isr_register
0000f1ec g     F .text	00000108 alt_tick
0000d934 g     F .text	00000578 .hidden __udivdi3
0000d4d8 g     F .text	00000024 _fputwc_r
000117f8 g     O .rodata	00000028 __mprec_bigtens
0000a214 g     F .text	00000104 __s2b
0000e6a4 g     F .text	000000a8 .hidden __floatunsidf
0000a8ec g     F .text	00000060 __mcmp
000085cc g     F .text	00000018 __fp_lock_all
00010790 g     F .text	0000004c alt_ic_irq_enabled
0000f150 g     F .text	0000009c alt_alarm_stop
00001120 g     F .text	000000c0 calcOverallError
00015090 g     O .bss	00000004 alt_irq_active
000134ec g     O .rwdata	00000004 LR_H1H2
000000fc g     F .exceptions	000000d4 alt_irq_handler
000122d8 g     O .rwdata	00000028 alt_dev_null
00010410 g     F .text	00000048 alt_dcache_flush_all
0000a318 g     F .text	00000068 __hi0bits
0000e548 g     F .text	00000080 .hidden __fixdfsi
00013534 g       *ABS*	00000000 __ram_rwdata_end
00015110 g     O .bss	00000050 delta_h2
08800000 g       *ABS*	00000000 __alt_mem_onchip_memory
00013514 g     O .rwdata	00000008 alt_dev_list
0000f330 g     F .text	000000f8 write
0000b020 g     F .text	000000a0 _putc_r
00015160 g     O .bss	00000054 weightsH2O
00011a34 g       *ABS*	00000000 __ram_rodata_end
0000e8c0 g     F .text	000000b0 fstat
000029fc g     F .text	000000f4 .hidden __ledf2
00000878 g     F .text	0000015c WeightUpdatesH1H2
0000a664 g     F .text	00000140 __pow5mult
0000ba6c g     F .text	0000145c ___vfiprintf_internal_r
0001505c g     O .bss	00000004 __nlocale_changed
00003f7c g     F .text	00000058 .hidden __umodsi3
00017940 g       *ABS*	00000000 end
0000f66c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001157c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000ffe8 g     F .text	0000007c alt_avalon_timer_sc_init
00003dbc g     F .text	00000064 .hidden __clzsi2
0000fd4c g     F .text	00000224 altera_avalon_jtag_uart_write
000085bc g     F .text	00000004 __sfp_lock_acquire
00000ec4 g     F .text	00000184 initData
00009b74 g     F .text	000000e4 memchr
00004308 g     F .text	000021f8 ___vfprintf_internal_r
000006e0 g     F .text	000000f0 WeightUpdatesH2O
00008720 g     F .text	00000310 _free_r
00000290 g     F .text	000000bc print_array
00009158 g     F .text	00000010 __locale_mb_cur_max
00011358 g     F .text	00000180 __call_exitprocs
00015058 g     O .bss	00000004 __mlocale_changed
00013500 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015088 g     O .bss	00000004 _alt_tick_rate
000134e0 g     O .rwdata	00000004 numEpochs
000151b4 g     O .bss	000000c8 ponderacion1
000114d8 g     F .text	00000070 .hidden __floatundidf
0000415c g     F .text	00000064 rand
0000a7a4 g     F .text	00000148 __lshift
0001508c g     O .bss	00000004 _alt_nticks
0000ef40 g     F .text	000000fc read
0000f494 g     F .text	00000074 alt_sys_init
00011240 g     F .text	00000118 __register_exitproc
0000a46c g     F .text	000001f8 __multiply
0000f9d8 g     F .text	00000068 altera_avalon_jtag_uart_close
00011a34 g       *ABS*	00000000 __ram_rwdata_start
0001157c g       *ABS*	00000000 __ram_rodata_start
00015098 g     O .bss	00000028 __malloc_current_mallinfo
0001527c g     O .bss	000000c8 der_hiddenVal1
0000acb8 g     F .text	0000014c __d2b
00015044 g     O .bss	00000004 outPred
0000f508 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010fa8 g     F .text	000000a4 alt_get_fd
00000bf8 g     F .text	0000003c getRand
0000d158 g     F .text	00000054 _close_r
00010c84 g     F .text	000000bc perf_get_section_time
00015048 g     O .bss	00000004 ponderacion3
000111c4 g     F .text	0000007c memcmp
0000f5c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00017940 g       *ABS*	00000000 __alt_stack_base
0000f618 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000065d8 g     F .text	00000154 __swsetup_r
00002114 g     F .text	000008e8 .hidden __divdf3
0000847c g     F .text	00000118 __sfp
0000af1c g     F .text	00000078 __copybits
00010d40 g     F .text	0000004c perf_get_total_time
00015344 g     O .bss	00000ff0 weightsH1H2_old
00011ed0 g     O .rwdata	00000408 __malloc_av_
000085c8 g     F .text	00000004 __sinit_lock_release
00002af0 g     F .text	00000718 .hidden __muldf3
0000b740 g     F .text	00000054 __sread
00010ea0 g     F .text	00000108 alt_find_file
00010494 g     F .text	000000a4 alt_dev_llist_insert
0000eebc g     F .text	00000024 __malloc_lock
0000f0a0 g     F .text	000000b0 sbrk
000081d0 g     F .text	0000005c _fflush_r
0000d1ac g     F .text	000000c4 _calloc_r
0000e970 g     F .text	000001f4 gettimeofday
00015034 g       *ABS*	00000000 __bss_start
00009efc g     F .text	00000128 memset
00000c34 g     F .text	00000290 initWeights
000011e0 g     F .text	00000254 main
00015084 g     O .bss	00000004 alt_envp
00015060 g     O .bss	00000004 __malloc_max_total_mem
0000f568 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d0e0 g     F .text	00000018 __swbuf
00004144 g     F .text	00000018 srand
0000b874 g     F .text	00000008 __sclose
00001860 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0000d360 g     F .text	00000014 fclose
00003c14 g     F .text	000001a8 .hidden __truncdfsf2
0000692c g     F .text	00001688 _dtoa_r
00009368 g     F .text	0000080c _malloc_r
0000d848 g     F .text	00000030 __ascii_wctomb
000042b8 g     F .text	00000050 time
00013520 g     O .rwdata	00000004 alt_errno
00008eec g     F .text	000000c4 _fwalk
0000b0c0 g     F .text	000000c8 putc
00003e20 g     F .text	00000084 .hidden __divsi3
000085fc g     F .text	00000124 _malloc_trim_r
0001157c g       *ABS*	00000000 __CTOR_END__
0000b87c g     F .text	000000dc strcmp
0001157c g       *ABS*	00000000 __flash_rodata_start
00016334 g     O .bss	000000c8 hiddenVal1
0001157c g       *ABS*	00000000 __DTOR_LIST__
0000e3e4 g     F .text	00000088 .hidden __nedf2
0000f45c g     F .text	00000038 alt_irq_init
0000f03c g     F .text	00000064 alt_release_fd
00011639 g     O .rodata	00000100 .hidden __clz_tab
00015054 g     O .bss	00000004 _PathLocale
00011178 g     F .text	00000014 atexit
0000d0f8 g     F .text	00000060 _write_r
00009188 g     F .text	00000018 setlocale
000134f8 g     O .rwdata	00000004 _impure_ptr
0001507c g     O .bss	00000004 alt_argc
00007fb4 g     F .text	0000021c __sflush_r
00010598 g     F .text	00000060 _do_dtors
00009174 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000ab48 g     F .text	00000064 __ulp
000085e4 g     F .text	00000018 __fp_unlock_all
0001350c g     O .rwdata	00000008 alt_fs_list
000163fc g     O .bss	00000258 weightsIH1
00016654 g     O .bss	00000054 weightsH2O_old
0001504c g     O .bss	00000004 der_outPred
00015074 g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
000091a0 g     F .text	0000000c localeconv
00001564 g     F .text	00000288 __ieee754_sqrt
0001062c g     F .text	00000050 alt_ic_isr_register
00013534 g       *ABS*	00000000 _edata
00017940 g       *ABS*	00000000 _end
0000d374 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fa40 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010704 g     F .text	0000008c alt_ic_irq_disable
000166a8 g     O .bss	00000030 trainInputs
0000b79c g     F .text	0000007c __swrite
00013504 g     O .rwdata	00000004 __malloc_trim_threshold
00010dcc g     F .text	00000020 alt_get_performance_counter_base
00009168 g     F .text	0000000c __locale_msgcharset
0001118c g     F .text	00000038 exit
00008fb0 g     F .text	000000c4 _fwalk_reent
0000a94c g     F .text	000001fc __mdiff
00003ea4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000085c0 g     F .text	00000004 __sfp_lock_release
000166d8 g     O .bss	00000010 trainOutput
00000000 g       *ABS*	00000000 __alt_mem_sdram
000166e8 g     O .bss	00000050 ponderacion2
00016738 g     O .bss	00000ff0 weightsH1H2
00011548 g     F .text	00000034 _exit
000102e4 g     F .text	0000012c alt_alarm_start
0001503c g     O .bss	00000004 delta_o
0000d8d4 g     F .text	00000060 .hidden __muldi3
000091ac g     F .text	000001bc __smakebuf_r
000041c0 g     F .text	00000098 strlen
00010b0c g     F .text	00000154 open
0000e46c g     F .text	000000dc .hidden __gedf2
00017728 g     O .bss	00000050 der_hiddenVal2
00013508 g     O .rwdata	00000004 __wctomb
0000ba54 g     F .text	00000018 __sprint_r
000105f8 g     F .text	00000034 alt_icache_flush_all
00013530 g     O .rwdata	00000004 alt_priority_mask
00017778 g     O .bss	000000c8 delta_h1
0001067c g     F .text	00000088 alt_ic_irq_enable
00006500 g     F .text	0000001c __vfprintf_internal
0000d878 g     F .text	0000005c _wctomb_r
00003208 g     F .text	000008fc .hidden __subdf3
0000a380 g     F .text	000000b0 __lo0bits
00013528 g     O .rwdata	00000008 alt_alarm_list
00010538 g     F .text	00000060 _do_ctors
0000d788 g     F .text	000000c0 wcrtomb
0000e788 g     F .text	000000d0 close
0000ecac g     F .text	00000084 alt_load
0000d4fc g     F .text	00000080 fputwc
000085c4 g     F .text	00000004 __sinit_lock_acquire
0000a0f4 g     F .text	00000120 __multadd
0000a0cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory+0xf7800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109e1004 	addi	r2,r2,30784
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109e1004 	addi	r2,r2,30784
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory+0xf780012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory+0xf7800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6ed17 	ldw	r2,-25676(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6ed17 	ldw	r2,-25676(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_onchip_memory+0xf7800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ad3814 	ori	gp,gp,46304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10940d14 	ori	r2,r2,20532

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18de5014 	ori	r3,r3,31040

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_onchip_memory+0xf7800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000ecac0 	call	ecac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000ee400 	call	ee40 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_onchip_memory+0xf780028c>

00000290 <print_array>:

//==============================================================
//************** function definitions **************************
//==============================================================
void print_array(float data[], int n)
{
     290:	defffb04 	addi	sp,sp,-20
     294:	dfc00415 	stw	ra,16(sp)
     298:	df000315 	stw	fp,12(sp)
     29c:	df000304 	addi	fp,sp,12
     2a0:	e13ffe15 	stw	r4,-8(fp)
     2a4:	e17fff15 	stw	r5,-4(fp)
    int i;

    printf("[");
     2a8:	010016c4 	movi	r4,91
     2ac:	00040580 	call	4058 <putchar>
    for (i = 0; i < n; i++)
     2b0:	e03ffd15 	stw	zero,-12(fp)
     2b4:	00001906 	br	31c <print_array+0x8c>
    {

        printf("%f",data[i]);
     2b8:	e0bffd17 	ldw	r2,-12(fp)
     2bc:	1085883a 	add	r2,r2,r2
     2c0:	1085883a 	add	r2,r2,r2
     2c4:	1007883a 	mov	r3,r2
     2c8:	e0bffe17 	ldw	r2,-8(fp)
     2cc:	10c5883a 	add	r2,r2,r3
     2d0:	10c00017 	ldw	r3,0(r2)
     2d4:	1809883a 	mov	r4,r3
     2d8:	0003b040 	call	3b04 <__extendsfdf2>
     2dc:	100d883a 	mov	r6,r2
     2e0:	180f883a 	mov	r7,r3
     2e4:	300b883a 	mov	r5,r6
     2e8:	380d883a 	mov	r6,r7
     2ec:	01000074 	movhi	r4,1
     2f0:	21055f04 	addi	r4,r4,5500
     2f4:	00040140 	call	4014 <printf>
        if (i != n-1)
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	10ffffc4 	addi	r3,r2,-1
     300:	e0bffd17 	ldw	r2,-12(fp)
     304:	18800226 	beq	r3,r2,310 <print_array+0x80>
        {
            printf(",");
     308:	01000b04 	movi	r4,44
     30c:	00040580 	call	4058 <putchar>
void print_array(float data[], int n)
{
    int i;

    printf("[");
    for (i = 0; i < n; i++)
     310:	e0bffd17 	ldw	r2,-12(fp)
     314:	10800044 	addi	r2,r2,1
     318:	e0bffd15 	stw	r2,-12(fp)
     31c:	e0fffd17 	ldw	r3,-12(fp)
     320:	e0bfff17 	ldw	r2,-4(fp)
     324:	18bfe416 	blt	r3,r2,2b8 <__alt_mem_onchip_memory+0xf78002b8>
        if (i != n-1)
        {
            printf(",");
        }
    }
    printf("]\n");
     328:	01000074 	movhi	r4,1
     32c:	21056004 	addi	r4,r4,5504
     330:	00041300 	call	4130 <puts>
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <calcNet>:

//***********************************
// calculates the network output
void calcNet(void)
{
     34c:	defffd04 	addi	sp,sp,-12
     350:	df000215 	stw	fp,8(sp)
     354:	df000204 	addi	fp,sp,8
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh_component
    int i = 0;
     358:	e03ffe15 	stw	zero,-8(fp)
    int j =0;
     35c:	e03fff15 	stw	zero,-4(fp)

    for(i = 0;i<numHidden1;i++)
     360:	e03ffe15 	stw	zero,-8(fp)
     364:	00004f06 	br	4a4 <calcNet+0x158>
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];
     368:	00800074 	movhi	r2,1
     36c:	1098ff04 	addi	r2,r2,25596
     370:	e0fffe17 	ldw	r3,-8(fp)
     374:	18c01904 	addi	r3,r3,100
     378:	18c7883a 	add	r3,r3,r3
     37c:	18c7883a 	add	r3,r3,r3
     380:	10c5883a 	add	r2,r2,r3
     384:	11000017 	ldw	r4,0(r2)
     388:	00800074 	movhi	r2,1
     38c:	10946d04 	addi	r2,r2,20916
     390:	e0fffe17 	ldw	r3,-8(fp)
     394:	18c7883a 	add	r3,r3,r3
     398:	18c7883a 	add	r3,r3,r3
     39c:	10c5883a 	add	r2,r2,r3
     3a0:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numInputs;j++)
     3a4:	e03fff15 	stw	zero,-4(fp)
     3a8:	00002906 	br	450 <calcNet+0x104>
        {

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);
     3ac:	00800074 	movhi	r2,1
     3b0:	10946d04 	addi	r2,r2,20916
     3b4:	e0fffe17 	ldw	r3,-8(fp)
     3b8:	18c7883a 	add	r3,r3,r3
     3bc:	18c7883a 	add	r3,r3,r3
     3c0:	10c5883a 	add	r2,r2,r3
     3c4:	11400017 	ldw	r5,0(r2)
     3c8:	d126d517 	ldw	r4,-25772(gp)
     3cc:	00c00074 	movhi	r3,1
     3d0:	18d9aa04 	addi	r3,r3,26280
     3d4:	2005883a 	mov	r2,r4
     3d8:	1085883a 	add	r2,r2,r2
     3dc:	1105883a 	add	r2,r2,r4
     3e0:	e13fff17 	ldw	r4,-4(fp)
     3e4:	1105883a 	add	r2,r2,r4
     3e8:	1085883a 	add	r2,r2,r2
     3ec:	1085883a 	add	r2,r2,r2
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	11000017 	ldw	r4,0(r2)
     3f8:	00800074 	movhi	r2,1
     3fc:	1098ff04 	addi	r2,r2,25596
     400:	e0ffff17 	ldw	r3,-4(fp)
     404:	19800ca4 	muli	r6,r3,50
     408:	e0fffe17 	ldw	r3,-8(fp)
     40c:	30c7883a 	add	r3,r6,r3
     410:	18c7883a 	add	r3,r3,r3
     414:	18c7883a 	add	r3,r3,r3
     418:	10c7883a 	add	r3,r2,r3
     41c:	18800017 	ldw	r2,0(r3)
     420:	2085ff32 	custom	252,r2,r4,r2
     424:	2889ff72 	custom	253,r4,r5,r2
     428:	00800074 	movhi	r2,1
     42c:	10946d04 	addi	r2,r2,20916
     430:	e0fffe17 	ldw	r3,-8(fp)
     434:	18c7883a 	add	r3,r3,r3
     438:	18c7883a 	add	r3,r3,r3
     43c:	10c5883a 	add	r2,r2,r3
     440:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden1;i++)
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];

        for(j = 0;j<numInputs;j++)
     444:	e0bfff17 	ldw	r2,-4(fp)
     448:	10800044 	addi	r2,r2,1
     44c:	e0bfff15 	stw	r2,-4(fp)
     450:	e0bfff17 	ldw	r2,-4(fp)
     454:	10800090 	cmplti	r2,r2,2
     458:	103fd41e 	bne	r2,zero,3ac <__alt_mem_onchip_memory+0xf78003ac>

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);

        }

			hiddenVal1[i] = ALT_CI_TANHCUSTOM_0(0,ponderacion1[i]);
     45c:	00800074 	movhi	r2,1
     460:	10946d04 	addi	r2,r2,20916
     464:	e0fffe17 	ldw	r3,-8(fp)
     468:	18c7883a 	add	r3,r3,r3
     46c:	18c7883a 	add	r3,r3,r3
     470:	10c7883a 	add	r3,r2,r3
     474:	18800017 	ldw	r2,0(r3)
     478:	1009c032 	custom	0,r4,r2,zero
     47c:	00800074 	movhi	r2,1
     480:	1098cd04 	addi	r2,r2,25396
     484:	e0fffe17 	ldw	r3,-8(fp)
     488:	18c7883a 	add	r3,r3,r3
     48c:	18c7883a 	add	r3,r3,r3
     490:	10c5883a 	add	r2,r2,r3
     494:	11000015 	stw	r4,0(r2)
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh_component
    int i = 0;
    int j =0;

    for(i = 0;i<numHidden1;i++)
     498:	e0bffe17 	ldw	r2,-8(fp)
     49c:	10800044 	addi	r2,r2,1
     4a0:	e0bffe15 	stw	r2,-8(fp)
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	10800c90 	cmplti	r2,r2,50
     4ac:	103fae1e 	bne	r2,zero,368 <__alt_mem_onchip_memory+0xf7800368>
			hiddenVal1[i] = ALT_CI_TANHCUSTOM_0(0,ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     4b0:	e03ffe15 	stw	zero,-8(fp)
     4b4:	00004a06 	br	5e0 <calcNet+0x294>
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];
     4b8:	00800074 	movhi	r2,1
     4bc:	1099ce04 	addi	r2,r2,26424
     4c0:	e0fffe17 	ldw	r3,-8(fp)
     4c4:	18c0fa04 	addi	r3,r3,1000
     4c8:	18c7883a 	add	r3,r3,r3
     4cc:	18c7883a 	add	r3,r3,r3
     4d0:	10c5883a 	add	r2,r2,r3
     4d4:	11000017 	ldw	r4,0(r2)
     4d8:	00800074 	movhi	r2,1
     4dc:	1099ba04 	addi	r2,r2,26344
     4e0:	e0fffe17 	ldw	r3,-8(fp)
     4e4:	18c7883a 	add	r3,r3,r3
     4e8:	18c7883a 	add	r3,r3,r3
     4ec:	10c5883a 	add	r2,r2,r3
     4f0:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numHidden1;j++)
     4f4:	e03fff15 	stw	zero,-4(fp)
     4f8:	00002406 	br	58c <calcNet+0x240>
        {

        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);
     4fc:	00800074 	movhi	r2,1
     500:	1099ba04 	addi	r2,r2,26344
     504:	e0fffe17 	ldw	r3,-8(fp)
     508:	18c7883a 	add	r3,r3,r3
     50c:	18c7883a 	add	r3,r3,r3
     510:	10c5883a 	add	r2,r2,r3
     514:	11000017 	ldw	r4,0(r2)
     518:	00800074 	movhi	r2,1
     51c:	1098cd04 	addi	r2,r2,25396
     520:	e0ffff17 	ldw	r3,-4(fp)
     524:	18c7883a 	add	r3,r3,r3
     528:	18c7883a 	add	r3,r3,r3
     52c:	10c5883a 	add	r2,r2,r3
     530:	11400017 	ldw	r5,0(r2)
     534:	00800074 	movhi	r2,1
     538:	1099ce04 	addi	r2,r2,26424
     53c:	e0ffff17 	ldw	r3,-4(fp)
     540:	19800524 	muli	r6,r3,20
     544:	e0fffe17 	ldw	r3,-8(fp)
     548:	30c7883a 	add	r3,r6,r3
     54c:	18c7883a 	add	r3,r3,r3
     550:	18c7883a 	add	r3,r3,r3
     554:	10c7883a 	add	r3,r2,r3
     558:	18800017 	ldw	r2,0(r3)
     55c:	2885ff32 	custom	252,r2,r5,r2
     560:	2089ff72 	custom	253,r4,r4,r2
     564:	00800074 	movhi	r2,1
     568:	1099ba04 	addi	r2,r2,26344
     56c:	e0fffe17 	ldw	r3,-8(fp)
     570:	18c7883a 	add	r3,r3,r3
     574:	18c7883a 	add	r3,r3,r3
     578:	10c5883a 	add	r2,r2,r3
     57c:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden2;i++)
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];

        for(j = 0;j<numHidden1;j++)
     580:	e0bfff17 	ldw	r2,-4(fp)
     584:	10800044 	addi	r2,r2,1
     588:	e0bfff15 	stw	r2,-4(fp)
     58c:	e0bfff17 	ldw	r2,-4(fp)
     590:	10800c90 	cmplti	r2,r2,50
     594:	103fd91e 	bne	r2,zero,4fc <__alt_mem_onchip_memory+0xf78004fc>
        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);

        }


			hiddenVal2[i] = ALT_CI_TANHCUSTOM_0(0,ponderacion2[i]);
     598:	00800074 	movhi	r2,1
     59c:	1099ba04 	addi	r2,r2,26344
     5a0:	e0fffe17 	ldw	r3,-8(fp)
     5a4:	18c7883a 	add	r3,r3,r3
     5a8:	18c7883a 	add	r3,r3,r3
     5ac:	10c7883a 	add	r3,r2,r3
     5b0:	18800017 	ldw	r2,0(r3)
     5b4:	1009c032 	custom	0,r4,r2,zero
     5b8:	00800074 	movhi	r2,1
     5bc:	10943004 	addi	r2,r2,20672
     5c0:	e0fffe17 	ldw	r3,-8(fp)
     5c4:	18c7883a 	add	r3,r3,r3
     5c8:	18c7883a 	add	r3,r3,r3
     5cc:	10c5883a 	add	r2,r2,r3
     5d0:	11000015 	stw	r4,0(r2)
			hiddenVal1[i] = ALT_CI_TANHCUSTOM_0(0,ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     5d4:	e0bffe17 	ldw	r2,-8(fp)
     5d8:	10800044 	addi	r2,r2,1
     5dc:	e0bffe15 	stw	r2,-8(fp)
     5e0:	e0bffe17 	ldw	r2,-8(fp)
     5e4:	10800510 	cmplti	r2,r2,20
     5e8:	103fb31e 	bne	r2,zero,4b8 <__alt_mem_onchip_memory+0xf78004b8>

    }
   //calculate the output of the network
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];
     5ec:	00800074 	movhi	r2,1
     5f0:	10945804 	addi	r2,r2,20832
     5f4:	10c01417 	ldw	r3,80(r2)
     5f8:	d0e6da15 	stw	r3,-25752(gp)


   for(i = 0;i<numHidden2;i++)
     5fc:	e03ffe15 	stw	zero,-8(fp)
     600:	00001506 	br	658 <calcNet+0x30c>
   {

    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];
     604:	00800074 	movhi	r2,1
     608:	10943004 	addi	r2,r2,20672
     60c:	e0fffe17 	ldw	r3,-8(fp)
     610:	18c7883a 	add	r3,r3,r3
     614:	18c7883a 	add	r3,r3,r3
     618:	10c5883a 	add	r2,r2,r3
     61c:	11000017 	ldw	r4,0(r2)
     620:	00800074 	movhi	r2,1
     624:	10945804 	addi	r2,r2,20832
     628:	e0fffe17 	ldw	r3,-8(fp)
     62c:	18c7883a 	add	r3,r3,r3
     630:	18c7883a 	add	r3,r3,r3
     634:	10c7883a 	add	r3,r2,r3
     638:	18800017 	ldw	r2,0(r3)
     63c:	2087ff32 	custom	252,r3,r4,r2
     640:	d0a6da17 	ldw	r2,-25752(gp)
     644:	1885ff72 	custom	253,r2,r3,r2
     648:	d0a6da15 	stw	r2,-25752(gp)
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];


   for(i = 0;i<numHidden2;i++)
     64c:	e0bffe17 	ldw	r2,-8(fp)
     650:	10800044 	addi	r2,r2,1
     654:	e0bffe15 	stw	r2,-8(fp)
     658:	e0bffe17 	ldw	r2,-8(fp)
     65c:	10800510 	cmplti	r2,r2,20
     660:	103fe81e 	bne	r2,zero,604 <__alt_mem_onchip_memory+0xf7800604>
    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];

   }


        outPred  = ALT_CI_TANHCUSTOM_0(0,ponderacion3);
     664:	d0a6da17 	ldw	r2,-25752(gp)
     668:	1005c032 	custom	0,r2,r2,zero
     66c:	d0a6d915 	stw	r2,-25756(gp)

    //calculate the error
    errThisPat = trainOutput[patNum]-outPred;
     670:	d0e6d517 	ldw	r3,-25772(gp)
     674:	00800074 	movhi	r2,1
     678:	1099b604 	addi	r2,r2,26328
     67c:	18c7883a 	add	r3,r3,r3
     680:	18c7883a 	add	r3,r3,r3
     684:	10c5883a 	add	r2,r2,r3
     688:	10c00017 	ldw	r3,0(r2)
     68c:	d0a6d917 	ldw	r2,-25756(gp)
     690:	1885ffb2 	custom	254,r2,r3,r2
     694:	d0a6d615 	stw	r2,-25768(gp)

}
     698:	0001883a 	nop
     69c:	e037883a 	mov	sp,fp
     6a0:	df000017 	ldw	fp,0(sp)
     6a4:	dec00104 	addi	sp,sp,4
     6a8:	f800283a 	ret

000006ac <WeightChangesH2O>:


//************************************
//adjust the weights hidden-output
void WeightChangesH2O(void)
{
     6ac:	deffff04 	addi	sp,sp,-4
     6b0:	df000015 	stw	fp,0(sp)
     6b4:	d839883a 	mov	fp,sp


		delta_o = ALT_CI_TANHCUSTOM_0(1,outPred)* errThisPat;
     6b8:	d0a6d917 	ldw	r2,-25756(gp)
     6bc:	1007c072 	custom	1,r3,r2,zero
     6c0:	d0a6d617 	ldw	r2,-25768(gp)
     6c4:	1885ff32 	custom	252,r2,r3,r2
     6c8:	d0a6d715 	stw	r2,-25764(gp)


 }
     6cc:	0001883a 	nop
     6d0:	e037883a 	mov	sp,fp
     6d4:	df000017 	ldw	fp,0(sp)
     6d8:	dec00104 	addi	sp,sp,4
     6dc:	f800283a 	ret

000006e0 <WeightUpdatesH2O>:

//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
     6e0:	defffd04 	addi	sp,sp,-12
     6e4:	df000215 	stw	fp,8(sp)
     6e8:	df000204 	addi	fp,sp,8
    int k=0;
     6ec:	e03ffe15 	stw	zero,-8(fp)
   for(k = 0;k<numHidden2+1;k++)
     6f0:	e03ffe15 	stw	zero,-8(fp)
     6f4:	00002e06 	br	7b0 <WeightUpdatesH2O+0xd0>
   {
    float weightChange =delta_o * LR_H2O * hiddenVal2[k];
     6f8:	d0e6d717 	ldw	r3,-25764(gp)
     6fc:	008f7374 	movhi	r2,15821
     700:	10b33344 	addi	r2,r2,-13107
     704:	1889ff32 	custom	252,r4,r3,r2
     708:	00800074 	movhi	r2,1
     70c:	10943004 	addi	r2,r2,20672
     710:	e0fffe17 	ldw	r3,-8(fp)
     714:	18c7883a 	add	r3,r3,r3
     718:	18c7883a 	add	r3,r3,r3
     71c:	10c7883a 	add	r3,r2,r3
     720:	18800017 	ldw	r2,0(r3)
     724:	2085ff32 	custom	252,r2,r4,r2
     728:	e0bfff15 	stw	r2,-4(fp)

    weightsH2O_old[k] = weightsH2O[k] ;
     72c:	00800074 	movhi	r2,1
     730:	10945804 	addi	r2,r2,20832
     734:	e0fffe17 	ldw	r3,-8(fp)
     738:	18c7883a 	add	r3,r3,r3
     73c:	18c7883a 	add	r3,r3,r3
     740:	10c5883a 	add	r2,r2,r3
     744:	11000017 	ldw	r4,0(r2)
     748:	00800074 	movhi	r2,1
     74c:	10999504 	addi	r2,r2,26196
     750:	e0fffe17 	ldw	r3,-8(fp)
     754:	18c7883a 	add	r3,r3,r3
     758:	18c7883a 	add	r3,r3,r3
     75c:	10c5883a 	add	r2,r2,r3
     760:	11000015 	stw	r4,0(r2)
    weightsH2O[k] = weightsH2O[k] + weightChange;
     764:	00800074 	movhi	r2,1
     768:	10945804 	addi	r2,r2,20832
     76c:	e0fffe17 	ldw	r3,-8(fp)
     770:	18c7883a 	add	r3,r3,r3
     774:	18c7883a 	add	r3,r3,r3
     778:	10c5883a 	add	r2,r2,r3
     77c:	10c00017 	ldw	r3,0(r2)
     780:	e0bfff17 	ldw	r2,-4(fp)
     784:	1889ff72 	custom	253,r4,r3,r2
     788:	00800074 	movhi	r2,1
     78c:	10945804 	addi	r2,r2,20832
     790:	e0fffe17 	ldw	r3,-8(fp)
     794:	18c7883a 	add	r3,r3,r3
     798:	18c7883a 	add	r3,r3,r3
     79c:	10c5883a 	add	r2,r2,r3
     7a0:	11000015 	stw	r4,0(r2)
//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
    int k=0;
   for(k = 0;k<numHidden2+1;k++)
     7a4:	e0bffe17 	ldw	r2,-8(fp)
     7a8:	10800044 	addi	r2,r2,1
     7ac:	e0bffe15 	stw	r2,-8(fp)
     7b0:	e0bffe17 	ldw	r2,-8(fp)
     7b4:	10800550 	cmplti	r2,r2,21
     7b8:	103fcf1e 	bne	r2,zero,6f8 <__alt_mem_onchip_memory+0xf78006f8>
    weightsH2O_old[k] = weightsH2O[k] ;
    weightsH2O[k] = weightsH2O[k] + weightChange;

   }

 }
     7bc:	0001883a 	nop
     7c0:	e037883a 	mov	sp,fp
     7c4:	df000017 	ldw	fp,0(sp)
     7c8:	dec00104 	addi	sp,sp,4
     7cc:	f800283a 	ret

000007d0 <WeightChangesH1H2>:

//************************************
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{
     7d0:	defffe04 	addi	sp,sp,-8
     7d4:	df000115 	stw	fp,4(sp)
     7d8:	df000104 	addi	fp,sp,4

  int i=0;
     7dc:	e03fff15 	stw	zero,-4(fp)
  for(i = 0;i<numHidden2;i++)
     7e0:	e03fff15 	stw	zero,-4(fp)
     7e4:	00001c06 	br	858 <WeightChangesH1H2+0x88>
  {

		delta_h2[i] = ALT_CI_TANHCUSTOM_0(1, hiddenVal2[i]) * delta_o* weightsH2O_old[i];
     7e8:	00800074 	movhi	r2,1
     7ec:	10943004 	addi	r2,r2,20672
     7f0:	e0ffff17 	ldw	r3,-4(fp)
     7f4:	18c7883a 	add	r3,r3,r3
     7f8:	18c7883a 	add	r3,r3,r3
     7fc:	10c7883a 	add	r3,r2,r3
     800:	18800017 	ldw	r2,0(r3)
     804:	1007c072 	custom	1,r3,r2,zero
     808:	d0a6d717 	ldw	r2,-25764(gp)
     80c:	1889ff32 	custom	252,r4,r3,r2
     810:	00800074 	movhi	r2,1
     814:	10999504 	addi	r2,r2,26196
     818:	e0ffff17 	ldw	r3,-4(fp)
     81c:	18c7883a 	add	r3,r3,r3
     820:	18c7883a 	add	r3,r3,r3
     824:	10c7883a 	add	r3,r2,r3
     828:	18800017 	ldw	r2,0(r3)
     82c:	2089ff32 	custom	252,r4,r4,r2
     830:	00800074 	movhi	r2,1
     834:	10944404 	addi	r2,r2,20752
     838:	e0ffff17 	ldw	r3,-4(fp)
     83c:	18c7883a 	add	r3,r3,r3
     840:	18c7883a 	add	r3,r3,r3
     844:	10c5883a 	add	r2,r2,r3
     848:	11000015 	stw	r4,0(r2)
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     84c:	e0bfff17 	ldw	r2,-4(fp)
     850:	10800044 	addi	r2,r2,1
     854:	e0bfff15 	stw	r2,-4(fp)
     858:	e0bfff17 	ldw	r2,-4(fp)
     85c:	10800510 	cmplti	r2,r2,20
     860:	103fe11e 	bne	r2,zero,7e8 <__alt_mem_onchip_memory+0xf78007e8>



  }

}
     864:	0001883a 	nop
     868:	e037883a 	mov	sp,fp
     86c:	df000017 	ldw	fp,0(sp)
     870:	dec00104 	addi	sp,sp,4
     874:	f800283a 	ret

00000878 <WeightUpdatesH1H2>:

//************************************
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{
     878:	defffc04 	addi	sp,sp,-16
     87c:	df000315 	stw	fp,12(sp)
     880:	df000304 	addi	fp,sp,12

  int i=0;
     884:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden2;i++)
     888:	e03ffd15 	stw	zero,-12(fp)
     88c:	00004906 	br	9b4 <WeightUpdatesH1H2+0x13c>
  {
   int k=0;
     890:	e03ffe15 	stw	zero,-8(fp)
   for( k = 0;k<numHidden1+1;k++)
     894:	e03ffe15 	stw	zero,-8(fp)
     898:	00004006 	br	99c <WeightUpdatesH1H2+0x124>
   {
    float weightChange = delta_h2[i] * LR_H1H2 * hiddenVal1[k];
     89c:	00800074 	movhi	r2,1
     8a0:	10944404 	addi	r2,r2,20752
     8a4:	e0fffd17 	ldw	r3,-12(fp)
     8a8:	18c7883a 	add	r3,r3,r3
     8ac:	18c7883a 	add	r3,r3,r3
     8b0:	10c5883a 	add	r2,r2,r3
     8b4:	10c00017 	ldw	r3,0(r2)
     8b8:	008f7374 	movhi	r2,15821
     8bc:	10b33344 	addi	r2,r2,-13107
     8c0:	1889ff32 	custom	252,r4,r3,r2
     8c4:	00800074 	movhi	r2,1
     8c8:	1098cd04 	addi	r2,r2,25396
     8cc:	e0fffe17 	ldw	r3,-8(fp)
     8d0:	18c7883a 	add	r3,r3,r3
     8d4:	18c7883a 	add	r3,r3,r3
     8d8:	10c7883a 	add	r3,r2,r3
     8dc:	18800017 	ldw	r2,0(r3)
     8e0:	2085ff32 	custom	252,r2,r4,r2
     8e4:	e0bfff15 	stw	r2,-4(fp)

   weightsH1H2_old[k][i] = weightsH1H2[k][i];
     8e8:	00800074 	movhi	r2,1
     8ec:	1099ce04 	addi	r2,r2,26424
     8f0:	e0fffe17 	ldw	r3,-8(fp)
     8f4:	19000524 	muli	r4,r3,20
     8f8:	e0fffd17 	ldw	r3,-12(fp)
     8fc:	20c7883a 	add	r3,r4,r3
     900:	18c7883a 	add	r3,r3,r3
     904:	18c7883a 	add	r3,r3,r3
     908:	10c5883a 	add	r2,r2,r3
     90c:	11000017 	ldw	r4,0(r2)
     910:	00800074 	movhi	r2,1
     914:	1094d104 	addi	r2,r2,21316
     918:	e0fffe17 	ldw	r3,-8(fp)
     91c:	19400524 	muli	r5,r3,20
     920:	e0fffd17 	ldw	r3,-12(fp)
     924:	28c7883a 	add	r3,r5,r3
     928:	18c7883a 	add	r3,r3,r3
     92c:	18c7883a 	add	r3,r3,r3
     930:	10c5883a 	add	r2,r2,r3
     934:	11000015 	stw	r4,0(r2)
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;
     938:	00800074 	movhi	r2,1
     93c:	1099ce04 	addi	r2,r2,26424
     940:	e0fffe17 	ldw	r3,-8(fp)
     944:	19000524 	muli	r4,r3,20
     948:	e0fffd17 	ldw	r3,-12(fp)
     94c:	20c7883a 	add	r3,r4,r3
     950:	18c7883a 	add	r3,r3,r3
     954:	18c7883a 	add	r3,r3,r3
     958:	10c5883a 	add	r2,r2,r3
     95c:	10c00017 	ldw	r3,0(r2)
     960:	e0bfff17 	ldw	r2,-4(fp)
     964:	1889ff72 	custom	253,r4,r3,r2
     968:	00800074 	movhi	r2,1
     96c:	1099ce04 	addi	r2,r2,26424
     970:	e0fffe17 	ldw	r3,-8(fp)
     974:	19400524 	muli	r5,r3,20
     978:	e0fffd17 	ldw	r3,-12(fp)
     97c:	28c7883a 	add	r3,r5,r3
     980:	18c7883a 	add	r3,r3,r3
     984:	18c7883a 	add	r3,r3,r3
     988:	10c5883a 	add	r2,r2,r3
     98c:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden2;i++)
  {
   int k=0;
   for( k = 0;k<numHidden1+1;k++)
     990:	e0bffe17 	ldw	r2,-8(fp)
     994:	10800044 	addi	r2,r2,1
     998:	e0bffe15 	stw	r2,-8(fp)
     99c:	e0bffe17 	ldw	r2,-8(fp)
     9a0:	10800cd0 	cmplti	r2,r2,51
     9a4:	103fbd1e 	bne	r2,zero,89c <__alt_mem_onchip_memory+0xf780089c>
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     9a8:	e0bffd17 	ldw	r2,-12(fp)
     9ac:	10800044 	addi	r2,r2,1
     9b0:	e0bffd15 	stw	r2,-12(fp)
     9b4:	e0bffd17 	ldw	r2,-12(fp)
     9b8:	10800510 	cmplti	r2,r2,20
     9bc:	103fb41e 	bne	r2,zero,890 <__alt_mem_onchip_memory+0xf7800890>
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;

   }
  }

}
     9c0:	0001883a 	nop
     9c4:	e037883a 	mov	sp,fp
     9c8:	df000017 	ldw	fp,0(sp)
     9cc:	dec00104 	addi	sp,sp,4
     9d0:	f800283a 	ret

000009d4 <WeightChangesIH1>:
//************************************
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{
     9d4:	defffc04 	addi	sp,sp,-16
     9d8:	df000315 	stw	fp,12(sp)
     9dc:	df000304 	addi	fp,sp,12

  int i=0;
     9e0:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     9e4:	e03ffd15 	stw	zero,-12(fp)
     9e8:	00003306 	br	ab8 <WeightChangesIH1+0xe4>
  {

    int j=0;
     9ec:	e03ffe15 	stw	zero,-8(fp)
    float sum_delta=0.0;
     9f0:	e03fff15 	stw	zero,-4(fp)
    for ( j = 0;j<numHidden2;j++)
     9f4:	e03ffe15 	stw	zero,-8(fp)
     9f8:	00001806 	br	a5c <WeightChangesIH1+0x88>
    {

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];
     9fc:	00800074 	movhi	r2,1
     a00:	10944404 	addi	r2,r2,20752
     a04:	e0fffe17 	ldw	r3,-8(fp)
     a08:	18c7883a 	add	r3,r3,r3
     a0c:	18c7883a 	add	r3,r3,r3
     a10:	10c5883a 	add	r2,r2,r3
     a14:	11000017 	ldw	r4,0(r2)
     a18:	00800074 	movhi	r2,1
     a1c:	1094d104 	addi	r2,r2,21316
     a20:	e0fffd17 	ldw	r3,-12(fp)
     a24:	19400524 	muli	r5,r3,20
     a28:	e0fffe17 	ldw	r3,-8(fp)
     a2c:	28c7883a 	add	r3,r5,r3
     a30:	18c7883a 	add	r3,r3,r3
     a34:	18c7883a 	add	r3,r3,r3
     a38:	10c7883a 	add	r3,r2,r3
     a3c:	18800017 	ldw	r2,0(r3)
     a40:	2085ff32 	custom	252,r2,r4,r2
     a44:	e0ffff17 	ldw	r3,-4(fp)
     a48:	1885ff72 	custom	253,r2,r3,r2
     a4c:	e0bfff15 	stw	r2,-4(fp)
  for(i = 0;i<numHidden1;i++)
  {

    int j=0;
    float sum_delta=0.0;
    for ( j = 0;j<numHidden2;j++)
     a50:	e0bffe17 	ldw	r2,-8(fp)
     a54:	10800044 	addi	r2,r2,1
     a58:	e0bffe15 	stw	r2,-8(fp)
     a5c:	e0bffe17 	ldw	r2,-8(fp)
     a60:	10800510 	cmplti	r2,r2,20
     a64:	103fe51e 	bne	r2,zero,9fc <__alt_mem_onchip_memory+0xf78009fc>

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];

    }

		delta_h1[i]= ALT_CI_TANHCUSTOM_0(1,hiddenVal1[i])* sum_delta;
     a68:	00800074 	movhi	r2,1
     a6c:	1098cd04 	addi	r2,r2,25396
     a70:	e0fffd17 	ldw	r3,-12(fp)
     a74:	18c7883a 	add	r3,r3,r3
     a78:	18c7883a 	add	r3,r3,r3
     a7c:	10c7883a 	add	r3,r2,r3
     a80:	18800017 	ldw	r2,0(r3)
     a84:	1007c072 	custom	1,r3,r2,zero
     a88:	e0bfff17 	ldw	r2,-4(fp)
     a8c:	1889ff32 	custom	252,r4,r3,r2
     a90:	00800074 	movhi	r2,1
     a94:	109dde04 	addi	r2,r2,30584
     a98:	e0fffd17 	ldw	r3,-12(fp)
     a9c:	18c7883a 	add	r3,r3,r3
     aa0:	18c7883a 	add	r3,r3,r3
     aa4:	10c5883a 	add	r2,r2,r3
     aa8:	11000015 	stw	r4,0(r2)
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     aac:	e0bffd17 	ldw	r2,-12(fp)
     ab0:	10800044 	addi	r2,r2,1
     ab4:	e0bffd15 	stw	r2,-12(fp)
     ab8:	e0bffd17 	ldw	r2,-12(fp)
     abc:	10800c90 	cmplti	r2,r2,50
     ac0:	103fca1e 	bne	r2,zero,9ec <__alt_mem_onchip_memory+0xf78009ec>

		delta_h1[i]= ALT_CI_TANHCUSTOM_0(1,hiddenVal1[i])* sum_delta;

  }

}
     ac4:	0001883a 	nop
     ac8:	e037883a 	mov	sp,fp
     acc:	df000017 	ldw	fp,0(sp)
     ad0:	dec00104 	addi	sp,sp,4
     ad4:	f800283a 	ret

00000ad8 <WeightUpdatesIH1>:

//************************************
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{
     ad8:	defffc04 	addi	sp,sp,-16
     adc:	df000315 	stw	fp,12(sp)
     ae0:	df000304 	addi	fp,sp,12

  int i=0;
     ae4:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     ae8:	e03ffd15 	stw	zero,-12(fp)
     aec:	00003a06 	br	bd8 <WeightUpdatesIH1+0x100>
  {
    int k=0;
     af0:	e03ffe15 	stw	zero,-8(fp)
	for( k = 0;k<numInputs+1;k++)
     af4:	e03ffe15 	stw	zero,-8(fp)
     af8:	00003106 	br	bc0 <WeightUpdatesIH1+0xe8>
	{
    float weightChange = delta_h1[i] * LR_IH1 * trainInputs[patNum][k];
     afc:	00800074 	movhi	r2,1
     b00:	109dde04 	addi	r2,r2,30584
     b04:	e0fffd17 	ldw	r3,-12(fp)
     b08:	18c7883a 	add	r3,r3,r3
     b0c:	18c7883a 	add	r3,r3,r3
     b10:	10c5883a 	add	r2,r2,r3
     b14:	10c00017 	ldw	r3,0(r2)
     b18:	008f7374 	movhi	r2,15821
     b1c:	10b33344 	addi	r2,r2,-13107
     b20:	188bff32 	custom	252,r5,r3,r2
     b24:	d126d517 	ldw	r4,-25772(gp)
     b28:	00c00074 	movhi	r3,1
     b2c:	18d9aa04 	addi	r3,r3,26280
     b30:	2005883a 	mov	r2,r4
     b34:	1085883a 	add	r2,r2,r2
     b38:	1105883a 	add	r2,r2,r4
     b3c:	e13ffe17 	ldw	r4,-8(fp)
     b40:	1105883a 	add	r2,r2,r4
     b44:	1085883a 	add	r2,r2,r2
     b48:	1085883a 	add	r2,r2,r2
     b4c:	1887883a 	add	r3,r3,r2
     b50:	18800017 	ldw	r2,0(r3)
     b54:	2885ff32 	custom	252,r2,r5,r2
     b58:	e0bfff15 	stw	r2,-4(fp)

     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;
     b5c:	00800074 	movhi	r2,1
     b60:	1098ff04 	addi	r2,r2,25596
     b64:	e0fffe17 	ldw	r3,-8(fp)
     b68:	19000ca4 	muli	r4,r3,50
     b6c:	e0fffd17 	ldw	r3,-12(fp)
     b70:	20c7883a 	add	r3,r4,r3
     b74:	18c7883a 	add	r3,r3,r3
     b78:	18c7883a 	add	r3,r3,r3
     b7c:	10c5883a 	add	r2,r2,r3
     b80:	10c00017 	ldw	r3,0(r2)
     b84:	e0bfff17 	ldw	r2,-4(fp)
     b88:	1889ff72 	custom	253,r4,r3,r2
     b8c:	00800074 	movhi	r2,1
     b90:	1098ff04 	addi	r2,r2,25596
     b94:	e0fffe17 	ldw	r3,-8(fp)
     b98:	19400ca4 	muli	r5,r3,50
     b9c:	e0fffd17 	ldw	r3,-12(fp)
     ba0:	28c7883a 	add	r3,r5,r3
     ba4:	18c7883a 	add	r3,r3,r3
     ba8:	18c7883a 	add	r3,r3,r3
     bac:	10c5883a 	add	r2,r2,r3
     bb0:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden1;i++)
  {
    int k=0;
	for( k = 0;k<numInputs+1;k++)
     bb4:	e0bffe17 	ldw	r2,-8(fp)
     bb8:	10800044 	addi	r2,r2,1
     bbc:	e0bffe15 	stw	r2,-8(fp)
     bc0:	e0bffe17 	ldw	r2,-8(fp)
     bc4:	108000d0 	cmplti	r2,r2,3
     bc8:	103fcc1e 	bne	r2,zero,afc <__alt_mem_onchip_memory+0xf7800afc>
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     bcc:	e0bffd17 	ldw	r2,-12(fp)
     bd0:	10800044 	addi	r2,r2,1
     bd4:	e0bffd15 	stw	r2,-12(fp)
     bd8:	e0bffd17 	ldw	r2,-12(fp)
     bdc:	10800c90 	cmplti	r2,r2,50
     be0:	103fc31e 	bne	r2,zero,af0 <__alt_mem_onchip_memory+0xf7800af0>
     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;

   }
  }

}
     be4:	0001883a 	nop
     be8:	e037883a 	mov	sp,fp
     bec:	df000017 	ldw	fp,0(sp)
     bf0:	dec00104 	addi	sp,sp,4
     bf4:	f800283a 	ret

00000bf8 <getRand>:

//************************************
// generates a random number
float getRand(void)
{
     bf8:	defffe04 	addi	sp,sp,-8
     bfc:	dfc00115 	stw	ra,4(sp)
     c00:	df000015 	stw	fp,0(sp)
     c04:	d839883a 	mov	fp,sp
 return ((float)rand())/(float)RAND_MAX;
     c08:	000415c0 	call	415c <rand>
     c0c:	1007feb2 	custom	250,r3,r2,zero
     c10:	0093c034 	movhi	r2,20224
     c14:	1885fff2 	custom	255,r2,r3,r2
     c18:	1007883a 	mov	r3,r2
}
     c1c:	1805883a 	mov	r2,r3
     c20:	e037883a 	mov	sp,fp
     c24:	dfc00117 	ldw	ra,4(sp)
     c28:	df000017 	ldw	fp,0(sp)
     c2c:	dec00204 	addi	sp,sp,8
     c30:	f800283a 	ret

00000c34 <initWeights>:


//************************************
// set weights to random numbers
void initWeights(void)
{
     c34:	defffb04 	addi	sp,sp,-20
     c38:	dfc00415 	stw	ra,16(sp)
     c3c:	df000315 	stw	fp,12(sp)
     c40:	df000304 	addi	fp,sp,12
 int j=0;
     c44:	e03ffd15 	stw	zero,-12(fp)
 int i=0;
     c48:	e03ffe15 	stw	zero,-8(fp)
 int k=0;
     c4c:	e03fff15 	stw	zero,-4(fp)

 for( j = 0;j<numHidden2+1;j++)
     c50:	e03ffd15 	stw	zero,-12(fp)
     c54:	00002606 	br	cf0 <initWeights+0xbc>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
     c58:	0000bf80 	call	bf8 <getRand>
     c5c:	1007883a 	mov	r3,r2
     c60:	1809883a 	mov	r4,r3
     c64:	0003b040 	call	3b04 <__extendsfdf2>
     c68:	1011883a 	mov	r8,r2
     c6c:	1813883a 	mov	r9,r3
     c70:	000d883a 	mov	r6,zero
     c74:	01cff834 	movhi	r7,16352
     c78:	4009883a 	mov	r4,r8
     c7c:	480b883a 	mov	r5,r9
     c80:	00032080 	call	3208 <__subdf3>
     c84:	1009883a 	mov	r4,r2
     c88:	180b883a 	mov	r5,r3
     c8c:	2005883a 	mov	r2,r4
     c90:	2807883a 	mov	r3,r5
     c94:	000d883a 	mov	r6,zero
     c98:	01d00034 	movhi	r7,16384
     c9c:	1009883a 	mov	r4,r2
     ca0:	180b883a 	mov	r5,r3
     ca4:	00021140 	call	2114 <__divdf3>
     ca8:	1009883a 	mov	r4,r2
     cac:	180b883a 	mov	r5,r3
     cb0:	2005883a 	mov	r2,r4
     cb4:	2807883a 	mov	r3,r5
     cb8:	1009883a 	mov	r4,r2
     cbc:	180b883a 	mov	r5,r3
     cc0:	0003c140 	call	3c14 <__truncdfsf2>
     cc4:	1009883a 	mov	r4,r2
     cc8:	00800074 	movhi	r2,1
     ccc:	10945804 	addi	r2,r2,20832
     cd0:	e0fffd17 	ldw	r3,-12(fp)
     cd4:	18c7883a 	add	r3,r3,r3
     cd8:	18c7883a 	add	r3,r3,r3
     cdc:	10c5883a 	add	r2,r2,r3
     ce0:	11000015 	stw	r4,0(r2)
{
 int j=0;
 int i=0;
 int k=0;

 for( j = 0;j<numHidden2+1;j++)
     ce4:	e0bffd17 	ldw	r2,-12(fp)
     ce8:	10800044 	addi	r2,r2,1
     cec:	e0bffd15 	stw	r2,-12(fp)
     cf0:	e0bffd17 	ldw	r2,-12(fp)
     cf4:	10800550 	cmplti	r2,r2,21
     cf8:	103fd71e 	bne	r2,zero,c58 <__alt_mem_onchip_memory+0xf7800c58>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
     cfc:	e03fff15 	stw	zero,-4(fp)
     d00:	00003106 	br	dc8 <initWeights+0x194>
   {
    for( i = 0;i<numHidden1+1;i++)
     d04:	e03ffe15 	stw	zero,-8(fp)
     d08:	00002906 	br	db0 <initWeights+0x17c>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     d0c:	0000bf80 	call	bf8 <getRand>
     d10:	1007883a 	mov	r3,r2
     d14:	1809883a 	mov	r4,r3
     d18:	0003b040 	call	3b04 <__extendsfdf2>
     d1c:	1011883a 	mov	r8,r2
     d20:	1813883a 	mov	r9,r3
     d24:	000d883a 	mov	r6,zero
     d28:	01cff834 	movhi	r7,16352
     d2c:	4009883a 	mov	r4,r8
     d30:	480b883a 	mov	r5,r9
     d34:	00032080 	call	3208 <__subdf3>
     d38:	1009883a 	mov	r4,r2
     d3c:	180b883a 	mov	r5,r3
     d40:	2005883a 	mov	r2,r4
     d44:	2807883a 	mov	r3,r5
     d48:	000d883a 	mov	r6,zero
     d4c:	01d00034 	movhi	r7,16384
     d50:	1009883a 	mov	r4,r2
     d54:	180b883a 	mov	r5,r3
     d58:	00021140 	call	2114 <__divdf3>
     d5c:	1009883a 	mov	r4,r2
     d60:	180b883a 	mov	r5,r3
     d64:	2005883a 	mov	r2,r4
     d68:	2807883a 	mov	r3,r5
     d6c:	1009883a 	mov	r4,r2
     d70:	180b883a 	mov	r5,r3
     d74:	0003c140 	call	3c14 <__truncdfsf2>
     d78:	100b883a 	mov	r5,r2
     d7c:	00800074 	movhi	r2,1
     d80:	1099ce04 	addi	r2,r2,26424
     d84:	e0fffe17 	ldw	r3,-8(fp)
     d88:	19000524 	muli	r4,r3,20
     d8c:	e0ffff17 	ldw	r3,-4(fp)
     d90:	20c7883a 	add	r3,r4,r3
     d94:	18c7883a 	add	r3,r3,r3
     d98:	18c7883a 	add	r3,r3,r3
     d9c:	10c5883a 	add	r2,r2,r3
     da0:	11400015 	stw	r5,0(r2)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
   {
    for( i = 0;i<numHidden1+1;i++)
     da4:	e0bffe17 	ldw	r2,-8(fp)
     da8:	10800044 	addi	r2,r2,1
     dac:	e0bffe15 	stw	r2,-8(fp)
     db0:	e0bffe17 	ldw	r2,-8(fp)
     db4:	10800cd0 	cmplti	r2,r2,51
     db8:	103fd41e 	bne	r2,zero,d0c <__alt_mem_onchip_memory+0xf7800d0c>

 for( j = 0;j<numHidden2+1;j++)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
     dbc:	e0bfff17 	ldw	r2,-4(fp)
     dc0:	10800044 	addi	r2,r2,1
     dc4:	e0bfff15 	stw	r2,-4(fp)
     dc8:	e0bfff17 	ldw	r2,-4(fp)
     dcc:	10800510 	cmplti	r2,r2,20
     dd0:	103fcc1e 	bne	r2,zero,d04 <__alt_mem_onchip_memory+0xf7800d04>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
     dd4:	e03fff15 	stw	zero,-4(fp)
     dd8:	00003106 	br	ea0 <initWeights+0x26c>
   {
    for( i = 0;i<numInputs+1;i++)
     ddc:	e03ffe15 	stw	zero,-8(fp)
     de0:	00002906 	br	e88 <initWeights+0x254>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     de4:	0000bf80 	call	bf8 <getRand>
     de8:	1007883a 	mov	r3,r2
     dec:	1809883a 	mov	r4,r3
     df0:	0003b040 	call	3b04 <__extendsfdf2>
     df4:	1011883a 	mov	r8,r2
     df8:	1813883a 	mov	r9,r3
     dfc:	000d883a 	mov	r6,zero
     e00:	01cff834 	movhi	r7,16352
     e04:	4009883a 	mov	r4,r8
     e08:	480b883a 	mov	r5,r9
     e0c:	00032080 	call	3208 <__subdf3>
     e10:	1009883a 	mov	r4,r2
     e14:	180b883a 	mov	r5,r3
     e18:	2005883a 	mov	r2,r4
     e1c:	2807883a 	mov	r3,r5
     e20:	000d883a 	mov	r6,zero
     e24:	01d00034 	movhi	r7,16384
     e28:	1009883a 	mov	r4,r2
     e2c:	180b883a 	mov	r5,r3
     e30:	00021140 	call	2114 <__divdf3>
     e34:	1009883a 	mov	r4,r2
     e38:	180b883a 	mov	r5,r3
     e3c:	2005883a 	mov	r2,r4
     e40:	2807883a 	mov	r3,r5
     e44:	1009883a 	mov	r4,r2
     e48:	180b883a 	mov	r5,r3
     e4c:	0003c140 	call	3c14 <__truncdfsf2>
     e50:	100b883a 	mov	r5,r2
     e54:	00800074 	movhi	r2,1
     e58:	1098ff04 	addi	r2,r2,25596
     e5c:	e0fffe17 	ldw	r3,-8(fp)
     e60:	19000ca4 	muli	r4,r3,50
     e64:	e0ffff17 	ldw	r3,-4(fp)
     e68:	20c7883a 	add	r3,r4,r3
     e6c:	18c7883a 	add	r3,r3,r3
     e70:	18c7883a 	add	r3,r3,r3
     e74:	10c5883a 	add	r2,r2,r3
     e78:	11400015 	stw	r5,0(r2)
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
   {
    for( i = 0;i<numInputs+1;i++)
     e7c:	e0bffe17 	ldw	r2,-8(fp)
     e80:	10800044 	addi	r2,r2,1
     e84:	e0bffe15 	stw	r2,-8(fp)
     e88:	e0bffe17 	ldw	r2,-8(fp)
     e8c:	108000d0 	cmplti	r2,r2,3
     e90:	103fd41e 	bne	r2,zero,de4 <__alt_mem_onchip_memory+0xf7800de4>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
     e94:	e0bfff17 	ldw	r2,-4(fp)
     e98:	10800044 	addi	r2,r2,1
     e9c:	e0bfff15 	stw	r2,-4(fp)
     ea0:	e0bfff17 	ldw	r2,-4(fp)
     ea4:	10800c90 	cmplti	r2,r2,50
     ea8:	103fcc1e 	bne	r2,zero,ddc <__alt_mem_onchip_memory+0xf7800ddc>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsIH1[i][k]);
    }
   }
}
     eac:	0001883a 	nop
     eb0:	e037883a 	mov	sp,fp
     eb4:	dfc00117 	ldw	ra,4(sp)
     eb8:	df000017 	ldw	fp,0(sp)
     ebc:	dec00204 	addi	sp,sp,8
     ec0:	f800283a 	ret

00000ec4 <initData>:


//************************************
// read in the data
void initData(void)
{
     ec4:	defffe04 	addi	sp,sp,-8
     ec8:	dfc00115 	stw	ra,4(sp)
     ecc:	df000015 	stw	fp,0(sp)
     ed0:	d839883a 	mov	fp,sp
    printf("initialising data\n");
     ed4:	01000074 	movhi	r4,1
     ed8:	21056104 	addi	r4,r4,5508
     edc:	00041300 	call	4130 <puts>
    // [-1][1]
    // an extra input valued 1 is also added
    // to act as the bias
    // the output must lie in the range -1 to 1

    trainInputs[0][0]  = 0.95;
     ee0:	00800074 	movhi	r2,1
     ee4:	1099aa04 	addi	r2,r2,26280
     ee8:	00cfdcf4 	movhi	r3,16243
     eec:	18ccccc4 	addi	r3,r3,13107
     ef0:	10c00015 	stw	r3,0(r2)
    trainInputs[0][1]  = -0.95;
     ef4:	00800074 	movhi	r2,1
     ef8:	1099aa04 	addi	r2,r2,26280
     efc:	00efdcf4 	movhi	r3,49011
     f00:	18ccccc4 	addi	r3,r3,13107
     f04:	10c00115 	stw	r3,4(r2)
    trainInputs[0][2]  = 1;    //bias
     f08:	00800074 	movhi	r2,1
     f0c:	1099aa04 	addi	r2,r2,26280
     f10:	00cfe034 	movhi	r3,16256
     f14:	10c00215 	stw	r3,8(r2)
    trainOutput[0] = 0.95;
     f18:	00800074 	movhi	r2,1
     f1c:	1099b604 	addi	r2,r2,26328
     f20:	00cfdcf4 	movhi	r3,16243
     f24:	18ccccc4 	addi	r3,r3,13107
     f28:	10c00015 	stw	r3,0(r2)

    trainInputs[1][0]  = -0.95;
     f2c:	00800074 	movhi	r2,1
     f30:	1099aa04 	addi	r2,r2,26280
     f34:	00efdcf4 	movhi	r3,49011
     f38:	18ccccc4 	addi	r3,r3,13107
     f3c:	10c00315 	stw	r3,12(r2)
    trainInputs[1][1]  = 0.95;
     f40:	00800074 	movhi	r2,1
     f44:	1099aa04 	addi	r2,r2,26280
     f48:	00cfdcf4 	movhi	r3,16243
     f4c:	18ccccc4 	addi	r3,r3,13107
     f50:	10c00415 	stw	r3,16(r2)
    trainInputs[1][2]  = 1;       //bias
     f54:	00800074 	movhi	r2,1
     f58:	1099aa04 	addi	r2,r2,26280
     f5c:	00cfe034 	movhi	r3,16256
     f60:	10c00515 	stw	r3,20(r2)
    trainOutput[1] = 0.95;
     f64:	00800074 	movhi	r2,1
     f68:	1099b604 	addi	r2,r2,26328
     f6c:	00cfdcf4 	movhi	r3,16243
     f70:	18ccccc4 	addi	r3,r3,13107
     f74:	10c00115 	stw	r3,4(r2)

    trainInputs[2][0]  = 0.95;
     f78:	00800074 	movhi	r2,1
     f7c:	1099aa04 	addi	r2,r2,26280
     f80:	00cfdcf4 	movhi	r3,16243
     f84:	18ccccc4 	addi	r3,r3,13107
     f88:	10c00615 	stw	r3,24(r2)
    trainInputs[2][1]  = 0.95;
     f8c:	00800074 	movhi	r2,1
     f90:	1099aa04 	addi	r2,r2,26280
     f94:	00cfdcf4 	movhi	r3,16243
     f98:	18ccccc4 	addi	r3,r3,13107
     f9c:	10c00715 	stw	r3,28(r2)
   trainInputs[2][2]  = 1;        //bias
     fa0:	00800074 	movhi	r2,1
     fa4:	1099aa04 	addi	r2,r2,26280
     fa8:	00cfe034 	movhi	r3,16256
     fac:	10c00815 	stw	r3,32(r2)
    trainOutput[2] = -0.95;
     fb0:	00800074 	movhi	r2,1
     fb4:	1099b604 	addi	r2,r2,26328
     fb8:	00efdcf4 	movhi	r3,49011
     fbc:	18ccccc4 	addi	r3,r3,13107
     fc0:	10c00215 	stw	r3,8(r2)

    trainInputs[3][0]  = -0.95;
     fc4:	00800074 	movhi	r2,1
     fc8:	1099aa04 	addi	r2,r2,26280
     fcc:	00efdcf4 	movhi	r3,49011
     fd0:	18ccccc4 	addi	r3,r3,13107
     fd4:	10c00915 	stw	r3,36(r2)
    trainInputs[3][1]  = -0.95;
     fd8:	00800074 	movhi	r2,1
     fdc:	1099aa04 	addi	r2,r2,26280
     fe0:	00efdcf4 	movhi	r3,49011
     fe4:	18ccccc4 	addi	r3,r3,13107
     fe8:	10c00a15 	stw	r3,40(r2)
    trainInputs[3][2]  = 1;     //bias
     fec:	00800074 	movhi	r2,1
     ff0:	1099aa04 	addi	r2,r2,26280
     ff4:	00cfe034 	movhi	r3,16256
     ff8:	10c00b15 	stw	r3,44(r2)
    trainOutput[3] = -0.95;
     ffc:	00800074 	movhi	r2,1
    1000:	1099b604 	addi	r2,r2,26328
    1004:	00efdcf4 	movhi	r3,49011
    1008:	18ccccc4 	addi	r3,r3,13107
    100c:	10c00315 	stw	r3,12(r2)
hiddenVal1[numHidden1]=1;//bias capa oculta1
    1010:	00800074 	movhi	r2,1
    1014:	1098cd04 	addi	r2,r2,25396
    1018:	00cfe034 	movhi	r3,16256
    101c:	10c03215 	stw	r3,200(r2)
hiddenVal2[numHidden2]=1;//bias capa oculta2
    1020:	00800074 	movhi	r2,1
    1024:	10943004 	addi	r2,r2,20672
    1028:	00cfe034 	movhi	r3,16256
    102c:	10c01415 	stw	r3,80(r2)
}
    1030:	0001883a 	nop
    1034:	e037883a 	mov	sp,fp
    1038:	dfc00117 	ldw	ra,4(sp)
    103c:	df000017 	ldw	fp,0(sp)
    1040:	dec00204 	addi	sp,sp,8
    1044:	f800283a 	ret

00001048 <displayResults>:


//************************************
// display results
void displayResults(void)
{
    1048:	defff804 	addi	sp,sp,-32
    104c:	dfc00715 	stw	ra,28(sp)
    1050:	df000615 	stw	fp,24(sp)
    1054:	dc800515 	stw	r18,20(sp)
    1058:	dc400415 	stw	r17,16(sp)
    105c:	dc000315 	stw	r16,12(sp)
    1060:	df000604 	addi	fp,sp,24
 int i=0;
    1064:	e03ffc15 	stw	zero,-16(fp)
 for( i = 0;i<numPatterns;i++)
    1068:	e03ffc15 	stw	zero,-16(fp)
    106c:	00002006 	br	10f0 <displayResults+0xa8>
 {
  patNum = i;
    1070:	e0bffc17 	ldw	r2,-16(fp)
    1074:	d0a6d515 	stw	r2,-25772(gp)
  calcNet();
    1078:	000034c0 	call	34c <calcNet>
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
    107c:	d0a6d517 	ldw	r2,-25772(gp)
    1080:	14800044 	addi	r18,r2,1
    1084:	d0e6d517 	ldw	r3,-25772(gp)
    1088:	00800074 	movhi	r2,1
    108c:	1099b604 	addi	r2,r2,26328
    1090:	18c7883a 	add	r3,r3,r3
    1094:	18c7883a 	add	r3,r3,r3
    1098:	10c5883a 	add	r2,r2,r3
    109c:	10c00017 	ldw	r3,0(r2)
    10a0:	1809883a 	mov	r4,r3
    10a4:	0003b040 	call	3b04 <__extendsfdf2>
    10a8:	1021883a 	mov	r16,r2
    10ac:	1823883a 	mov	r17,r3
    10b0:	d0a6d917 	ldw	r2,-25756(gp)
    10b4:	1009883a 	mov	r4,r2
    10b8:	0003b040 	call	3b04 <__extendsfdf2>
    10bc:	1009883a 	mov	r4,r2
    10c0:	180b883a 	mov	r5,r3
    10c4:	d9000015 	stw	r4,0(sp)
    10c8:	d9400115 	stw	r5,4(sp)
    10cc:	800d883a 	mov	r6,r16
    10d0:	880f883a 	mov	r7,r17
    10d4:	900b883a 	mov	r5,r18
    10d8:	01000074 	movhi	r4,1
    10dc:	21056604 	addi	r4,r4,5528
    10e0:	00040140 	call	4014 <printf>
//************************************
// display results
void displayResults(void)
{
 int i=0;
 for( i = 0;i<numPatterns;i++)
    10e4:	e0bffc17 	ldw	r2,-16(fp)
    10e8:	10800044 	addi	r2,r2,1
    10ec:	e0bffc15 	stw	r2,-16(fp)
    10f0:	e0bffc17 	ldw	r2,-16(fp)
    10f4:	10800110 	cmplti	r2,r2,4
    10f8:	103fdd1e 	bne	r2,zero,1070 <__alt_mem_onchip_memory+0xf7801070>
 {
  patNum = i;
  calcNet();
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 }
}
    10fc:	0001883a 	nop
    1100:	e6fffd04 	addi	sp,fp,-12
    1104:	dfc00417 	ldw	ra,16(sp)
    1108:	df000317 	ldw	fp,12(sp)
    110c:	dc800217 	ldw	r18,8(sp)
    1110:	dc400117 	ldw	r17,4(sp)
    1114:	dc000017 	ldw	r16,0(sp)
    1118:	dec00504 	addi	sp,sp,20
    111c:	f800283a 	ret

00001120 <calcOverallError>:


//************************************
// calculate the overall error
void calcOverallError(void)
{
    1120:	defffd04 	addi	sp,sp,-12
    1124:	dfc00215 	stw	ra,8(sp)
    1128:	df000115 	stw	fp,4(sp)
    112c:	df000104 	addi	fp,sp,4
     int i=0;
    1130:	e03fff15 	stw	zero,-4(fp)
     RMSerror = 0.0;
    1134:	d026d815 	stw	zero,-25760(gp)
     for(i = 0;i<numPatterns;i++)
    1138:	e03fff15 	stw	zero,-4(fp)
    113c:	00000c06 	br	1170 <calcOverallError+0x50>
        {
         patNum = i;
    1140:	e0bfff17 	ldw	r2,-4(fp)
    1144:	d0a6d515 	stw	r2,-25772(gp)
         calcNet();
    1148:	000034c0 	call	34c <calcNet>
         RMSerror = RMSerror + (errThisPat * errThisPat);
    114c:	d0e6d617 	ldw	r3,-25768(gp)
    1150:	d0a6d617 	ldw	r2,-25768(gp)
    1154:	1887ff32 	custom	252,r3,r3,r2
    1158:	d0a6d817 	ldw	r2,-25760(gp)
    115c:	1885ff72 	custom	253,r2,r3,r2
    1160:	d0a6d815 	stw	r2,-25760(gp)
// calculate the overall error
void calcOverallError(void)
{
     int i=0;
     RMSerror = 0.0;
     for(i = 0;i<numPatterns;i++)
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	10800044 	addi	r2,r2,1
    116c:	e0bfff15 	stw	r2,-4(fp)
    1170:	e0bfff17 	ldw	r2,-4(fp)
    1174:	10800110 	cmplti	r2,r2,4
    1178:	103ff11e 	bne	r2,zero,1140 <__alt_mem_onchip_memory+0xf7801140>
        {
         patNum = i;
         calcNet();
         RMSerror = RMSerror + (errThisPat * errThisPat);
        }
     RMSerror = RMSerror/numPatterns;
    117c:	d0e6d817 	ldw	r3,-25760(gp)
    1180:	00902034 	movhi	r2,16512
    1184:	1885fff2 	custom	255,r2,r3,r2
    1188:	d0a6d815 	stw	r2,-25760(gp)
     RMSerror = sqrt(RMSerror);
    118c:	d0a6d817 	ldw	r2,-25760(gp)
    1190:	1009883a 	mov	r4,r2
    1194:	0003b040 	call	3b04 <__extendsfdf2>
    1198:	100b883a 	mov	r5,r2
    119c:	180d883a 	mov	r6,r3
    11a0:	2809883a 	mov	r4,r5
    11a4:	300b883a 	mov	r5,r6
    11a8:	00014340 	call	1434 <sqrt>
    11ac:	100b883a 	mov	r5,r2
    11b0:	180d883a 	mov	r6,r3
    11b4:	2809883a 	mov	r4,r5
    11b8:	300b883a 	mov	r5,r6
    11bc:	0003c140 	call	3c14 <__truncdfsf2>
    11c0:	1007883a 	mov	r3,r2
    11c4:	d0e6d815 	stw	r3,-25760(gp)
}
    11c8:	0001883a 	nop
    11cc:	e037883a 	mov	sp,fp
    11d0:	dfc00117 	ldw	ra,4(sp)
    11d4:	df000017 	ldw	fp,0(sp)
    11d8:	dec00204 	addi	sp,sp,8
    11dc:	f800283a 	ret

000011e0 <main>:
//********** THIS IS THE MAIN PROGRAM **************************
//==============================================================


int main(void)
{
    11e0:	defff704 	addi	sp,sp,-36
    11e4:	dfc00815 	stw	ra,32(sp)
    11e8:	df000715 	stw	fp,28(sp)
    11ec:	df000704 	addi	fp,sp,28
 // seed random number function
 srand ( time(NULL) );
    11f0:	0009883a 	mov	r4,zero
    11f4:	00042b80 	call	42b8 <time>
    11f8:	1009883a 	mov	r4,r2
    11fc:	00041440 	call	4144 <srand>
  PERF_RESET(PERFORMANCE_COUNTER_BASE);
    1200:	00c00044 	movi	r3,1
    1204:	00840034 	movhi	r2,4096
    1208:	10842004 	addi	r2,r2,4224
    120c:	10c00035 	stwio	r3,0(r2)
  PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
    1210:	0007883a 	mov	r3,zero
    1214:	00840034 	movhi	r2,4096
    1218:	10842104 	addi	r2,r2,4228
    121c:	10c00035 	stwio	r3,0(r2)
 // initiate the weights
  PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 1);
    1220:	0007883a 	mov	r3,zero
    1224:	00840034 	movhi	r2,4096
    1228:	10842504 	addi	r2,r2,4244
    122c:	10c00035 	stwio	r3,0(r2)
 initWeights();
    1230:	0000c340 	call	c34 <initWeights>
 // load in the data
 initData();
    1234:	0000ec40 	call	ec4 <initData>
   PERF_END (PERFORMANCE_COUNTER_BASE, 1);
    1238:	0007883a 	mov	r3,zero
    123c:	00840034 	movhi	r2,4096
    1240:	10842404 	addi	r2,r2,4240
    1244:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    1248:	e03ffe15 	stw	zero,-8(fp)
    124c:	00004906 	br	1374 <main+0x194>
    {
        for(i = 0;i<numPatterns;i++)
    1250:	e03fff15 	stw	zero,-4(fp)
    1254:	00002d06 	br	130c <main+0x12c>
        {
          //select a pattern at random
          patNum = rand()%numPatterns;
    1258:	000415c0 	call	415c <rand>
    125c:	1007883a 	mov	r3,r2
    1260:	00a00034 	movhi	r2,32768
    1264:	108000c4 	addi	r2,r2,3
    1268:	1884703a 	and	r2,r3,r2
    126c:	1000040e 	bge	r2,zero,1280 <main+0xa0>
    1270:	10bfffc4 	addi	r2,r2,-1
    1274:	00ffff04 	movi	r3,-4
    1278:	10c4b03a 	or	r2,r2,r3
    127c:	10800044 	addi	r2,r2,1
    1280:	d0a6d515 	stw	r2,-25772(gp)

          //calculate the current network output
          //and error for this pattern
          //phase forward

          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 2);
    1284:	0007883a 	mov	r3,zero
    1288:	00840034 	movhi	r2,4096
    128c:	10842904 	addi	r2,r2,4260
    1290:	10c00035 	stwio	r3,0(r2)
          calcNet();
    1294:	000034c0 	call	34c <calcNet>
          PERF_END (PERFORMANCE_COUNTER_BASE, 2);
    1298:	0007883a 	mov	r3,zero
    129c:	00840034 	movhi	r2,4096
    12a0:	10842804 	addi	r2,r2,4256
    12a4:	10c00035 	stwio	r3,0(r2)
          //change network weights
          //phase backward and update weights
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 3);
    12a8:	0007883a 	mov	r3,zero
    12ac:	00840034 	movhi	r2,4096
    12b0:	10842d04 	addi	r2,r2,4276
    12b4:	10c00035 	stwio	r3,0(r2)
          WeightChangesH2O();
    12b8:	00006ac0 	call	6ac <WeightChangesH2O>
          WeightChangesH1H2();
    12bc:	00007d00 	call	7d0 <WeightChangesH1H2>
          WeightChangesIH1();
    12c0:	00009d40 	call	9d4 <WeightChangesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 3);
    12c4:	0007883a 	mov	r3,zero
    12c8:	00840034 	movhi	r2,4096
    12cc:	10842c04 	addi	r2,r2,4272
    12d0:	10c00035 	stwio	r3,0(r2)
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 4);
    12d4:	0007883a 	mov	r3,zero
    12d8:	00840034 	movhi	r2,4096
    12dc:	10843104 	addi	r2,r2,4292
    12e0:	10c00035 	stwio	r3,0(r2)
          WeightUpdatesH2O();
    12e4:	00006e00 	call	6e0 <WeightUpdatesH2O>
          WeightUpdatesH1H2();
    12e8:	00008780 	call	878 <WeightUpdatesH1H2>
          WeightUpdatesIH1();
    12ec:	0000ad80 	call	ad8 <WeightUpdatesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
    12f0:	0007883a 	mov	r3,zero
    12f4:	00840034 	movhi	r2,4096
    12f8:	10843004 	addi	r2,r2,4288
    12fc:	10c00035 	stwio	r3,0(r2)


 // train the network
    for(j = 0;j <= numEpochs;j++)
    {
        for(i = 0;i<numPatterns;i++)
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	10800044 	addi	r2,r2,1
    1308:	e0bfff15 	stw	r2,-4(fp)
    130c:	e0bfff17 	ldw	r2,-4(fp)
    1310:	10800110 	cmplti	r2,r2,4
    1314:	103fd01e 	bne	r2,zero,1258 <__alt_mem_onchip_memory+0xf7801258>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
        }

        //display the overall network error
        //after each epoch
        PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 5);
    1318:	0007883a 	mov	r3,zero
    131c:	00840034 	movhi	r2,4096
    1320:	10843504 	addi	r2,r2,4308
    1324:	10c00035 	stwio	r3,0(r2)
        calcOverallError();
    1328:	00011200 	call	1120 <calcOverallError>
        printf("epoch = %d RMS Error = %f\n",j,RMSerror);
    132c:	d0a6d817 	ldw	r2,-25760(gp)
    1330:	1009883a 	mov	r4,r2
    1334:	0003b040 	call	3b04 <__extendsfdf2>
    1338:	1009883a 	mov	r4,r2
    133c:	180b883a 	mov	r5,r3
    1340:	200d883a 	mov	r6,r4
    1344:	280f883a 	mov	r7,r5
    1348:	e17ffe17 	ldw	r5,-8(fp)
    134c:	01000074 	movhi	r4,1
    1350:	21057004 	addi	r4,r4,5568
    1354:	00040140 	call	4014 <printf>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    1358:	0007883a 	mov	r3,zero
    135c:	00840034 	movhi	r2,4096
    1360:	10843404 	addi	r2,r2,4304
    1364:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    1368:	e0bffe17 	ldw	r2,-8(fp)
    136c:	10800044 	addi	r2,r2,1
    1370:	e0bffe15 	stw	r2,-8(fp)
    1374:	00c03204 	movi	r3,200
    1378:	e0bffe17 	ldw	r2,-8(fp)
    137c:	18bfb40e 	bge	r3,r2,1250 <__alt_mem_onchip_memory+0xf7801250>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    }

 //training has finished
 //display the results
 PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 6);
    1380:	0007883a 	mov	r3,zero
    1384:	00840034 	movhi	r2,4096
    1388:	10843904 	addi	r2,r2,4324
    138c:	10c00035 	stwio	r3,0(r2)
 displayResults();
    1390:	00010480 	call	1048 <displayResults>
 PERF_END (PERFORMANCE_COUNTER_BASE, 6);
    1394:	0007883a 	mov	r3,zero
    1398:	00840034 	movhi	r2,4096
    139c:	10843804 	addi	r2,r2,4320
    13a0:	10c00035 	stwio	r3,0(r2)

 PERF_STOP_MEASURING(PERFORMANCE_COUNTER_BASE);
    13a4:	0007883a 	mov	r3,zero
    13a8:	00840034 	movhi	r2,4096
    13ac:	10842004 	addi	r2,r2,4224
    13b0:	10c00035 	stwio	r3,0(r2)

  perf_print_formatted_report((void *)PERFORMANCE_COUNTER_BASE,
    13b4:	00800074 	movhi	r2,1
    13b8:	10857904 	addi	r2,r2,5604
    13bc:	d8800415 	stw	r2,16(sp)
    13c0:	00800074 	movhi	r2,1
    13c4:	10857c04 	addi	r2,r2,5616
    13c8:	d8800315 	stw	r2,12(sp)
    13cc:	00800074 	movhi	r2,1
    13d0:	10858004 	addi	r2,r2,5632
    13d4:	d8800215 	stw	r2,8(sp)
    13d8:	00800074 	movhi	r2,1
    13dc:	10858304 	addi	r2,r2,5644
    13e0:	d8800115 	stw	r2,4(sp)
    13e4:	00800074 	movhi	r2,1
    13e8:	10858704 	addi	r2,r2,5660
    13ec:	d8800015 	stw	r2,0(sp)
    13f0:	01c00074 	movhi	r7,1
    13f4:	39c57704 	addi	r7,r7,5596
    13f8:	01800184 	movi	r6,6
    13fc:	0140bef4 	movhi	r5,763
    1400:	297c2004 	addi	r5,r5,-3968
    1404:	01040034 	movhi	r4,4096
    1408:	21042004 	addi	r4,r4,4224
    140c:	00100640 	call	10064 <perf_print_formatted_report>
							  "FASE UPDATE",
                              "CALCULO ERROR",
                              "TEST FINAL"
                              );

 system("PAUSE");
    1410:	01000074 	movhi	r4,1
    1414:	21058b04 	addi	r4,r4,5676
    1418:	00042880 	call	4288 <system>
 return 0;
    141c:	0005883a 	mov	r2,zero
}
    1420:	e037883a 	mov	sp,fp
    1424:	dfc00117 	ldw	ra,4(sp)
    1428:	df000017 	ldw	fp,0(sp)
    142c:	dec00204 	addi	sp,sp,8
    1430:	f800283a 	ret

00001434 <sqrt>:
    1434:	defff104 	addi	sp,sp,-60
    1438:	dd000d15 	stw	r20,52(sp)
    143c:	05000074 	movhi	r20,1
    1440:	dcc00c15 	stw	r19,48(sp)
    1444:	dc800b15 	stw	r18,44(sp)
    1448:	dc400a15 	stw	r17,40(sp)
    144c:	dc000915 	stw	r16,36(sp)
    1450:	dfc00e15 	stw	ra,56(sp)
    1454:	a50d3c04 	addi	r20,r20,13552
    1458:	2027883a 	mov	r19,r4
    145c:	2825883a 	mov	r18,r5
    1460:	00015640 	call	1564 <__ieee754_sqrt>
    1464:	1821883a 	mov	r16,r3
    1468:	a0c00017 	ldw	r3,0(r20)
    146c:	1023883a 	mov	r17,r2
    1470:	00bfffc4 	movi	r2,-1
    1474:	18800a26 	beq	r3,r2,14a0 <sqrt+0x6c>
    1478:	9809883a 	mov	r4,r19
    147c:	900b883a 	mov	r5,r18
    1480:	00017ec0 	call	17ec <__fpclassifyd>
    1484:	10000626 	beq	r2,zero,14a0 <sqrt+0x6c>
    1488:	000d883a 	mov	r6,zero
    148c:	000f883a 	mov	r7,zero
    1490:	9809883a 	mov	r4,r19
    1494:	900b883a 	mov	r5,r18
    1498:	00029fc0 	call	29fc <__ledf2>
    149c:	10000a16 	blt	r2,zero,14c8 <sqrt+0x94>
    14a0:	8805883a 	mov	r2,r17
    14a4:	8007883a 	mov	r3,r16
    14a8:	dfc00e17 	ldw	ra,56(sp)
    14ac:	dd000d17 	ldw	r20,52(sp)
    14b0:	dcc00c17 	ldw	r19,48(sp)
    14b4:	dc800b17 	ldw	r18,44(sp)
    14b8:	dc400a17 	ldw	r17,40(sp)
    14bc:	dc000917 	ldw	r16,36(sp)
    14c0:	dec00f04 	addi	sp,sp,60
    14c4:	f800283a 	ret
    14c8:	00800044 	movi	r2,1
    14cc:	d8800015 	stw	r2,0(sp)
    14d0:	a4000017 	ldw	r16,0(r20)
    14d4:	00800074 	movhi	r2,1
    14d8:	10858d04 	addi	r2,r2,5684
    14dc:	d8800115 	stw	r2,4(sp)
    14e0:	d8000815 	stw	zero,32(sp)
    14e4:	dcc00415 	stw	r19,16(sp)
    14e8:	dc800515 	stw	r18,20(sp)
    14ec:	dcc00215 	stw	r19,8(sp)
    14f0:	dc800315 	stw	r18,12(sp)
    14f4:	80000a1e 	bne	r16,zero,1520 <sqrt+0xec>
    14f8:	d8000615 	stw	zero,24(sp)
    14fc:	d8000715 	stw	zero,28(sp)
    1500:	d809883a 	mov	r4,sp
    1504:	00018600 	call	1860 <matherr>
    1508:	10000e26 	beq	r2,zero,1544 <sqrt+0x110>
    150c:	d8800817 	ldw	r2,32(sp)
    1510:	1000101e 	bne	r2,zero,1554 <sqrt+0x120>
    1514:	d8800617 	ldw	r2,24(sp)
    1518:	d8c00717 	ldw	r3,28(sp)
    151c:	003fe206 	br	14a8 <__alt_mem_onchip_memory+0xf78014a8>
    1520:	000d883a 	mov	r6,zero
    1524:	000f883a 	mov	r7,zero
    1528:	0009883a 	mov	r4,zero
    152c:	000b883a 	mov	r5,zero
    1530:	00021140 	call	2114 <__divdf3>
    1534:	d8800615 	stw	r2,24(sp)
    1538:	d8c00715 	stw	r3,28(sp)
    153c:	00800084 	movi	r2,2
    1540:	80bfef1e 	bne	r16,r2,1500 <__alt_mem_onchip_memory+0xf7801500>
    1544:	0003fd40 	call	3fd4 <__errno>
    1548:	00c00844 	movi	r3,33
    154c:	10c00015 	stw	r3,0(r2)
    1550:	003fee06 	br	150c <__alt_mem_onchip_memory+0xf780150c>
    1554:	0003fd40 	call	3fd4 <__errno>
    1558:	d8c00817 	ldw	r3,32(sp)
    155c:	10c00015 	stw	r3,0(r2)
    1560:	003fec06 	br	1514 <__alt_mem_onchip_memory+0xf7801514>

00001564 <__ieee754_sqrt>:
    1564:	defffd04 	addi	sp,sp,-12
    1568:	dc400115 	stw	r17,4(sp)
    156c:	dc000015 	stw	r16,0(sp)
    1570:	dfc00215 	stw	ra,8(sp)
    1574:	28dffc2c 	andhi	r3,r5,32752
    1578:	009ffc34 	movhi	r2,32752
    157c:	2821883a 	mov	r16,r5
    1580:	2023883a 	mov	r17,r4
    1584:	200d883a 	mov	r6,r4
    1588:	18807b26 	beq	r3,r2,1778 <__ieee754_sqrt+0x214>
    158c:	01405f0e 	bge	zero,r5,170c <__ieee754_sqrt+0x1a8>
    1590:	2815d53a 	srai	r10,r5,20
    1594:	50006a26 	beq	r10,zero,1740 <__ieee754_sqrt+0x1dc>
    1598:	00c00434 	movhi	r3,16
    159c:	52bf0044 	addi	r10,r10,-1023
    15a0:	18ffffc4 	addi	r3,r3,-1
    15a4:	80c6703a 	and	r3,r16,r3
    15a8:	5080004c 	andi	r2,r10,1
    15ac:	18c00434 	orhi	r3,r3,16
    15b0:	1000511e 	bne	r2,zero,16f8 <__ieee754_sqrt+0x194>
    15b4:	3004d7fa 	srli	r2,r6,31
    15b8:	5015d07a 	srai	r10,r10,1
    15bc:	18c7883a 	add	r3,r3,r3
    15c0:	10c5883a 	add	r2,r2,r3
    15c4:	01400584 	movi	r5,22
    15c8:	3187883a 	add	r3,r6,r6
    15cc:	0013883a 	mov	r9,zero
    15d0:	000f883a 	mov	r7,zero
    15d4:	01000834 	movhi	r4,32
    15d8:	390d883a 	add	r6,r7,r4
    15dc:	1810d7fa 	srli	r8,r3,31
    15e0:	297fffc4 	addi	r5,r5,-1
    15e4:	11800316 	blt	r2,r6,15f4 <__ieee754_sqrt+0x90>
    15e8:	1185c83a 	sub	r2,r2,r6
    15ec:	310f883a 	add	r7,r6,r4
    15f0:	4913883a 	add	r9,r9,r4
    15f4:	1085883a 	add	r2,r2,r2
    15f8:	4085883a 	add	r2,r8,r2
    15fc:	18c7883a 	add	r3,r3,r3
    1600:	2008d07a 	srli	r4,r4,1
    1604:	283ff41e 	bne	r5,zero,15d8 <__alt_mem_onchip_memory+0xf78015d8>
    1608:	01200034 	movhi	r4,32768
    160c:	01800804 	movi	r6,32
    1610:	0011883a 	mov	r8,zero
    1614:	0019883a 	mov	r12,zero
    1618:	201b883a 	mov	r13,r4
    161c:	00000806 	br	1640 <__ieee754_sqrt+0xdc>
    1620:	38801726 	beq	r7,r2,1680 <__ieee754_sqrt+0x11c>
    1624:	180ad7fa 	srli	r5,r3,31
    1628:	1085883a 	add	r2,r2,r2
    162c:	31bfffc4 	addi	r6,r6,-1
    1630:	2885883a 	add	r2,r5,r2
    1634:	18c7883a 	add	r3,r3,r3
    1638:	2008d07a 	srli	r4,r4,1
    163c:	30001726 	beq	r6,zero,169c <__ieee754_sqrt+0x138>
    1640:	230b883a 	add	r5,r4,r12
    1644:	38bff60e 	bge	r7,r2,1620 <__alt_mem_onchip_memory+0xf7801620>
    1648:	2ae0002c 	andhi	r11,r5,32768
    164c:	2919883a 	add	r12,r5,r4
    1650:	5b400826 	beq	r11,r13,1674 <__ieee754_sqrt+0x110>
    1654:	3817883a 	mov	r11,r7
    1658:	11c5c83a 	sub	r2,r2,r7
    165c:	1940012e 	bgeu	r3,r5,1664 <__ieee754_sqrt+0x100>
    1660:	10bfffc4 	addi	r2,r2,-1
    1664:	1947c83a 	sub	r3,r3,r5
    1668:	4111883a 	add	r8,r8,r4
    166c:	580f883a 	mov	r7,r11
    1670:	003fec06 	br	1624 <__alt_mem_onchip_memory+0xf7801624>
    1674:	603ff716 	blt	r12,zero,1654 <__alt_mem_onchip_memory+0xf7801654>
    1678:	3ac00044 	addi	r11,r7,1
    167c:	003ff606 	br	1658 <__alt_mem_onchip_memory+0xf7801658>
    1680:	19401936 	bltu	r3,r5,16e8 <__ieee754_sqrt+0x184>
    1684:	2ae0002c 	andhi	r11,r5,32768
    1688:	2919883a 	add	r12,r5,r4
    168c:	5b404526 	beq	r11,r13,17a4 <__ieee754_sqrt+0x240>
    1690:	1017883a 	mov	r11,r2
    1694:	0005883a 	mov	r2,zero
    1698:	003ff206 	br	1664 <__alt_mem_onchip_memory+0xf7801664>
    169c:	10c4b03a 	or	r2,r2,r3
    16a0:	10000426 	beq	r2,zero,16b4 <__ieee754_sqrt+0x150>
    16a4:	00bfffc4 	movi	r2,-1
    16a8:	40804026 	beq	r8,r2,17ac <__ieee754_sqrt+0x248>
    16ac:	4080004c 	andi	r2,r8,1
    16b0:	4091883a 	add	r8,r8,r2
    16b4:	4004d07a 	srli	r2,r8,1
    16b8:	4807d07a 	srai	r3,r9,1
    16bc:	010ff834 	movhi	r4,16352
    16c0:	4a40004c 	andi	r9,r9,1
    16c4:	1909883a 	add	r4,r3,r4
    16c8:	4800091e 	bne	r9,zero,16f0 <__ieee754_sqrt+0x18c>
    16cc:	5006953a 	slli	r3,r10,20
    16d0:	1907883a 	add	r3,r3,r4
    16d4:	dfc00217 	ldw	ra,8(sp)
    16d8:	dc400117 	ldw	r17,4(sp)
    16dc:	dc000017 	ldw	r16,0(sp)
    16e0:	dec00304 	addi	sp,sp,12
    16e4:	f800283a 	ret
    16e8:	3805883a 	mov	r2,r7
    16ec:	003fcd06 	br	1624 <__alt_mem_onchip_memory+0xf7801624>
    16f0:	10a00034 	orhi	r2,r2,32768
    16f4:	003ff506 	br	16cc <__alt_mem_onchip_memory+0xf78016cc>
    16f8:	3004d7fa 	srli	r2,r6,31
    16fc:	18c7883a 	add	r3,r3,r3
    1700:	318d883a 	add	r6,r6,r6
    1704:	10c7883a 	add	r3,r2,r3
    1708:	003faa06 	br	15b4 <__alt_mem_onchip_memory+0xf78015b4>
    170c:	00a00034 	movhi	r2,32768
    1710:	10bfffc4 	addi	r2,r2,-1
    1714:	2884703a 	and	r2,r5,r2
    1718:	1104b03a 	or	r2,r2,r4
    171c:	10001e26 	beq	r2,zero,1798 <__ieee754_sqrt+0x234>
    1720:	2800291e 	bne	r5,zero,17c8 <__ieee754_sqrt+0x264>
    1724:	0015883a 	mov	r10,zero
    1728:	3020d2fa 	srli	r16,r6,11
    172c:	52bffac4 	addi	r10,r10,-21
    1730:	300c957a 	slli	r6,r6,21
    1734:	803ffc26 	beq	r16,zero,1728 <__alt_mem_onchip_memory+0xf7801728>
    1738:	8080042c 	andhi	r2,r16,16
    173c:	10001e1e 	bne	r2,zero,17b8 <__ieee754_sqrt+0x254>
    1740:	0005883a 	mov	r2,zero
    1744:	00000106 	br	174c <__ieee754_sqrt+0x1e8>
    1748:	1805883a 	mov	r2,r3
    174c:	8421883a 	add	r16,r16,r16
    1750:	8100042c 	andhi	r4,r16,16
    1754:	10c00044 	addi	r3,r2,1
    1758:	203ffb26 	beq	r4,zero,1748 <__alt_mem_onchip_memory+0xf7801748>
    175c:	01000804 	movi	r4,32
    1760:	20c9c83a 	sub	r4,r4,r3
    1764:	3108d83a 	srl	r4,r6,r4
    1768:	5095c83a 	sub	r10,r10,r2
    176c:	30cc983a 	sll	r6,r6,r3
    1770:	2420b03a 	or	r16,r4,r16
    1774:	003f8806 	br	1598 <__alt_mem_onchip_memory+0xf7801598>
    1778:	280f883a 	mov	r7,r5
    177c:	0002af00 	call	2af0 <__muldf3>
    1780:	880d883a 	mov	r6,r17
    1784:	800f883a 	mov	r7,r16
    1788:	1009883a 	mov	r4,r2
    178c:	180b883a 	mov	r5,r3
    1790:	00018680 	call	1868 <__adddf3>
    1794:	003fcf06 	br	16d4 <__alt_mem_onchip_memory+0xf78016d4>
    1798:	2005883a 	mov	r2,r4
    179c:	2807883a 	mov	r3,r5
    17a0:	003fcc06 	br	16d4 <__alt_mem_onchip_memory+0xf78016d4>
    17a4:	603fba16 	blt	r12,zero,1690 <__alt_mem_onchip_memory+0xf7801690>
    17a8:	003fb306 	br	1678 <__alt_mem_onchip_memory+0xf7801678>
    17ac:	4a400044 	addi	r9,r9,1
    17b0:	0005883a 	mov	r2,zero
    17b4:	003fc006 	br	16b8 <__alt_mem_onchip_memory+0xf78016b8>
    17b8:	01000804 	movi	r4,32
    17bc:	00bfffc4 	movi	r2,-1
    17c0:	0007883a 	mov	r3,zero
    17c4:	003fe706 	br	1764 <__alt_mem_onchip_memory+0xf7801764>
    17c8:	200d883a 	mov	r6,r4
    17cc:	280f883a 	mov	r7,r5
    17d0:	00032080 	call	3208 <__subdf3>
    17d4:	100d883a 	mov	r6,r2
    17d8:	180f883a 	mov	r7,r3
    17dc:	1009883a 	mov	r4,r2
    17e0:	180b883a 	mov	r5,r3
    17e4:	00021140 	call	2114 <__divdf3>
    17e8:	003fba06 	br	16d4 <__alt_mem_onchip_memory+0xf78016d4>

000017ec <__fpclassifyd>:
    17ec:	00a00034 	movhi	r2,32768
    17f0:	10bfffc4 	addi	r2,r2,-1
    17f4:	2884703a 	and	r2,r5,r2
    17f8:	10000726 	beq	r2,zero,1818 <__fpclassifyd+0x2c>
    17fc:	00fffc34 	movhi	r3,65520
    1800:	019ff834 	movhi	r6,32736
    1804:	28c7883a 	add	r3,r5,r3
    1808:	31bfffc4 	addi	r6,r6,-1
    180c:	30c00536 	bltu	r6,r3,1824 <__fpclassifyd+0x38>
    1810:	00800104 	movi	r2,4
    1814:	f800283a 	ret
    1818:	2000021e 	bne	r4,zero,1824 <__fpclassifyd+0x38>
    181c:	00800084 	movi	r2,2
    1820:	f800283a 	ret
    1824:	00dffc34 	movhi	r3,32752
    1828:	019ff834 	movhi	r6,32736
    182c:	28cb883a 	add	r5,r5,r3
    1830:	31bfffc4 	addi	r6,r6,-1
    1834:	317ff62e 	bgeu	r6,r5,1810 <__alt_mem_onchip_memory+0xf7801810>
    1838:	01400434 	movhi	r5,16
    183c:	297fffc4 	addi	r5,r5,-1
    1840:	28800236 	bltu	r5,r2,184c <__fpclassifyd+0x60>
    1844:	008000c4 	movi	r2,3
    1848:	f800283a 	ret
    184c:	10c00226 	beq	r2,r3,1858 <__fpclassifyd+0x6c>
    1850:	0005883a 	mov	r2,zero
    1854:	f800283a 	ret
    1858:	2005003a 	cmpeq	r2,r4,zero
    185c:	f800283a 	ret

00001860 <matherr>:
    1860:	0005883a 	mov	r2,zero
    1864:	f800283a 	ret

00001868 <__adddf3>:
    1868:	02c00434 	movhi	r11,16
    186c:	5affffc4 	addi	r11,r11,-1
    1870:	2806d7fa 	srli	r3,r5,31
    1874:	2ad4703a 	and	r10,r5,r11
    1878:	3ad2703a 	and	r9,r7,r11
    187c:	3804d53a 	srli	r2,r7,20
    1880:	3018d77a 	srli	r12,r6,29
    1884:	280ad53a 	srli	r5,r5,20
    1888:	501490fa 	slli	r10,r10,3
    188c:	2010d77a 	srli	r8,r4,29
    1890:	481290fa 	slli	r9,r9,3
    1894:	380ed7fa 	srli	r7,r7,31
    1898:	defffb04 	addi	sp,sp,-20
    189c:	dc800215 	stw	r18,8(sp)
    18a0:	dc400115 	stw	r17,4(sp)
    18a4:	dc000015 	stw	r16,0(sp)
    18a8:	dfc00415 	stw	ra,16(sp)
    18ac:	dcc00315 	stw	r19,12(sp)
    18b0:	1c803fcc 	andi	r18,r3,255
    18b4:	2c01ffcc 	andi	r16,r5,2047
    18b8:	5210b03a 	or	r8,r10,r8
    18bc:	202290fa 	slli	r17,r4,3
    18c0:	1081ffcc 	andi	r2,r2,2047
    18c4:	4b12b03a 	or	r9,r9,r12
    18c8:	300c90fa 	slli	r6,r6,3
    18cc:	91c07526 	beq	r18,r7,1aa4 <__adddf3+0x23c>
    18d0:	8087c83a 	sub	r3,r16,r2
    18d4:	00c0ab0e 	bge	zero,r3,1b84 <__adddf3+0x31c>
    18d8:	10002a1e 	bne	r2,zero,1984 <__adddf3+0x11c>
    18dc:	4984b03a 	or	r2,r9,r6
    18e0:	1000961e 	bne	r2,zero,1b3c <__adddf3+0x2d4>
    18e4:	888001cc 	andi	r2,r17,7
    18e8:	10000726 	beq	r2,zero,1908 <__adddf3+0xa0>
    18ec:	888003cc 	andi	r2,r17,15
    18f0:	00c00104 	movi	r3,4
    18f4:	10c00426 	beq	r2,r3,1908 <__adddf3+0xa0>
    18f8:	88c7883a 	add	r3,r17,r3
    18fc:	1c63803a 	cmpltu	r17,r3,r17
    1900:	4451883a 	add	r8,r8,r17
    1904:	1823883a 	mov	r17,r3
    1908:	4080202c 	andhi	r2,r8,128
    190c:	10005926 	beq	r2,zero,1a74 <__adddf3+0x20c>
    1910:	84000044 	addi	r16,r16,1
    1914:	0081ffc4 	movi	r2,2047
    1918:	8080ba26 	beq	r16,r2,1c04 <__adddf3+0x39c>
    191c:	00bfe034 	movhi	r2,65408
    1920:	10bfffc4 	addi	r2,r2,-1
    1924:	4090703a 	and	r8,r8,r2
    1928:	4004977a 	slli	r2,r8,29
    192c:	4010927a 	slli	r8,r8,9
    1930:	8822d0fa 	srli	r17,r17,3
    1934:	8401ffcc 	andi	r16,r16,2047
    1938:	4010d33a 	srli	r8,r8,12
    193c:	9007883a 	mov	r3,r18
    1940:	1444b03a 	or	r2,r2,r17
    1944:	8401ffcc 	andi	r16,r16,2047
    1948:	8020953a 	slli	r16,r16,20
    194c:	18c03fcc 	andi	r3,r3,255
    1950:	01000434 	movhi	r4,16
    1954:	213fffc4 	addi	r4,r4,-1
    1958:	180697fa 	slli	r3,r3,31
    195c:	4110703a 	and	r8,r8,r4
    1960:	4410b03a 	or	r8,r8,r16
    1964:	40c6b03a 	or	r3,r8,r3
    1968:	dfc00417 	ldw	ra,16(sp)
    196c:	dcc00317 	ldw	r19,12(sp)
    1970:	dc800217 	ldw	r18,8(sp)
    1974:	dc400117 	ldw	r17,4(sp)
    1978:	dc000017 	ldw	r16,0(sp)
    197c:	dec00504 	addi	sp,sp,20
    1980:	f800283a 	ret
    1984:	0081ffc4 	movi	r2,2047
    1988:	80bfd626 	beq	r16,r2,18e4 <__alt_mem_onchip_memory+0xf78018e4>
    198c:	4a402034 	orhi	r9,r9,128
    1990:	00800e04 	movi	r2,56
    1994:	10c09f16 	blt	r2,r3,1c14 <__adddf3+0x3ac>
    1998:	008007c4 	movi	r2,31
    199c:	10c0c216 	blt	r2,r3,1ca8 <__adddf3+0x440>
    19a0:	00800804 	movi	r2,32
    19a4:	10c5c83a 	sub	r2,r2,r3
    19a8:	488a983a 	sll	r5,r9,r2
    19ac:	30c8d83a 	srl	r4,r6,r3
    19b0:	3084983a 	sll	r2,r6,r2
    19b4:	48c6d83a 	srl	r3,r9,r3
    19b8:	290cb03a 	or	r6,r5,r4
    19bc:	1004c03a 	cmpne	r2,r2,zero
    19c0:	308cb03a 	or	r6,r6,r2
    19c4:	898dc83a 	sub	r6,r17,r6
    19c8:	89a3803a 	cmpltu	r17,r17,r6
    19cc:	40d1c83a 	sub	r8,r8,r3
    19d0:	4451c83a 	sub	r8,r8,r17
    19d4:	3023883a 	mov	r17,r6
    19d8:	4080202c 	andhi	r2,r8,128
    19dc:	10002326 	beq	r2,zero,1a6c <__adddf3+0x204>
    19e0:	04c02034 	movhi	r19,128
    19e4:	9cffffc4 	addi	r19,r19,-1
    19e8:	44e6703a 	and	r19,r8,r19
    19ec:	98007626 	beq	r19,zero,1bc8 <__adddf3+0x360>
    19f0:	9809883a 	mov	r4,r19
    19f4:	0003dbc0 	call	3dbc <__clzsi2>
    19f8:	10fffe04 	addi	r3,r2,-8
    19fc:	010007c4 	movi	r4,31
    1a00:	20c07716 	blt	r4,r3,1be0 <__adddf3+0x378>
    1a04:	00800804 	movi	r2,32
    1a08:	10c5c83a 	sub	r2,r2,r3
    1a0c:	8884d83a 	srl	r2,r17,r2
    1a10:	98d0983a 	sll	r8,r19,r3
    1a14:	88e2983a 	sll	r17,r17,r3
    1a18:	1204b03a 	or	r2,r2,r8
    1a1c:	1c007416 	blt	r3,r16,1bf0 <__adddf3+0x388>
    1a20:	1c21c83a 	sub	r16,r3,r16
    1a24:	82000044 	addi	r8,r16,1
    1a28:	00c007c4 	movi	r3,31
    1a2c:	1a009116 	blt	r3,r8,1c74 <__adddf3+0x40c>
    1a30:	00c00804 	movi	r3,32
    1a34:	1a07c83a 	sub	r3,r3,r8
    1a38:	8a08d83a 	srl	r4,r17,r8
    1a3c:	88e2983a 	sll	r17,r17,r3
    1a40:	10c6983a 	sll	r3,r2,r3
    1a44:	1210d83a 	srl	r8,r2,r8
    1a48:	8804c03a 	cmpne	r2,r17,zero
    1a4c:	1906b03a 	or	r3,r3,r4
    1a50:	18a2b03a 	or	r17,r3,r2
    1a54:	0021883a 	mov	r16,zero
    1a58:	003fa206 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1a5c:	1890b03a 	or	r8,r3,r2
    1a60:	40017d26 	beq	r8,zero,2058 <__adddf3+0x7f0>
    1a64:	1011883a 	mov	r8,r2
    1a68:	1823883a 	mov	r17,r3
    1a6c:	888001cc 	andi	r2,r17,7
    1a70:	103f9e1e 	bne	r2,zero,18ec <__alt_mem_onchip_memory+0xf78018ec>
    1a74:	4004977a 	slli	r2,r8,29
    1a78:	8822d0fa 	srli	r17,r17,3
    1a7c:	4010d0fa 	srli	r8,r8,3
    1a80:	9007883a 	mov	r3,r18
    1a84:	1444b03a 	or	r2,r2,r17
    1a88:	0101ffc4 	movi	r4,2047
    1a8c:	81002426 	beq	r16,r4,1b20 <__adddf3+0x2b8>
    1a90:	8120703a 	and	r16,r16,r4
    1a94:	01000434 	movhi	r4,16
    1a98:	213fffc4 	addi	r4,r4,-1
    1a9c:	4110703a 	and	r8,r8,r4
    1aa0:	003fa806 	br	1944 <__alt_mem_onchip_memory+0xf7801944>
    1aa4:	8089c83a 	sub	r4,r16,r2
    1aa8:	01005e0e 	bge	zero,r4,1c24 <__adddf3+0x3bc>
    1aac:	10002b26 	beq	r2,zero,1b5c <__adddf3+0x2f4>
    1ab0:	0081ffc4 	movi	r2,2047
    1ab4:	80bf8b26 	beq	r16,r2,18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1ab8:	4a402034 	orhi	r9,r9,128
    1abc:	00800e04 	movi	r2,56
    1ac0:	1100a40e 	bge	r2,r4,1d54 <__adddf3+0x4ec>
    1ac4:	498cb03a 	or	r6,r9,r6
    1ac8:	300ac03a 	cmpne	r5,r6,zero
    1acc:	0013883a 	mov	r9,zero
    1ad0:	2c4b883a 	add	r5,r5,r17
    1ad4:	2c63803a 	cmpltu	r17,r5,r17
    1ad8:	4a11883a 	add	r8,r9,r8
    1adc:	8a11883a 	add	r8,r17,r8
    1ae0:	2823883a 	mov	r17,r5
    1ae4:	4080202c 	andhi	r2,r8,128
    1ae8:	103fe026 	beq	r2,zero,1a6c <__alt_mem_onchip_memory+0xf7801a6c>
    1aec:	84000044 	addi	r16,r16,1
    1af0:	0081ffc4 	movi	r2,2047
    1af4:	8080d226 	beq	r16,r2,1e40 <__adddf3+0x5d8>
    1af8:	00bfe034 	movhi	r2,65408
    1afc:	10bfffc4 	addi	r2,r2,-1
    1b00:	4090703a 	and	r8,r8,r2
    1b04:	880ad07a 	srli	r5,r17,1
    1b08:	400897fa 	slli	r4,r8,31
    1b0c:	88c0004c 	andi	r3,r17,1
    1b10:	28e2b03a 	or	r17,r5,r3
    1b14:	4010d07a 	srli	r8,r8,1
    1b18:	2462b03a 	or	r17,r4,r17
    1b1c:	003f7106 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1b20:	4088b03a 	or	r4,r8,r2
    1b24:	20014526 	beq	r4,zero,203c <__adddf3+0x7d4>
    1b28:	01000434 	movhi	r4,16
    1b2c:	42000234 	orhi	r8,r8,8
    1b30:	213fffc4 	addi	r4,r4,-1
    1b34:	4110703a 	and	r8,r8,r4
    1b38:	003f8206 	br	1944 <__alt_mem_onchip_memory+0xf7801944>
    1b3c:	18ffffc4 	addi	r3,r3,-1
    1b40:	1800491e 	bne	r3,zero,1c68 <__adddf3+0x400>
    1b44:	898bc83a 	sub	r5,r17,r6
    1b48:	8963803a 	cmpltu	r17,r17,r5
    1b4c:	4251c83a 	sub	r8,r8,r9
    1b50:	4451c83a 	sub	r8,r8,r17
    1b54:	2823883a 	mov	r17,r5
    1b58:	003f9f06 	br	19d8 <__alt_mem_onchip_memory+0xf78019d8>
    1b5c:	4984b03a 	or	r2,r9,r6
    1b60:	103f6026 	beq	r2,zero,18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1b64:	213fffc4 	addi	r4,r4,-1
    1b68:	2000931e 	bne	r4,zero,1db8 <__adddf3+0x550>
    1b6c:	898d883a 	add	r6,r17,r6
    1b70:	3463803a 	cmpltu	r17,r6,r17
    1b74:	4251883a 	add	r8,r8,r9
    1b78:	8a11883a 	add	r8,r17,r8
    1b7c:	3023883a 	mov	r17,r6
    1b80:	003fd806 	br	1ae4 <__alt_mem_onchip_memory+0xf7801ae4>
    1b84:	1800541e 	bne	r3,zero,1cd8 <__adddf3+0x470>
    1b88:	80800044 	addi	r2,r16,1
    1b8c:	1081ffcc 	andi	r2,r2,2047
    1b90:	00c00044 	movi	r3,1
    1b94:	1880a00e 	bge	r3,r2,1e18 <__adddf3+0x5b0>
    1b98:	8989c83a 	sub	r4,r17,r6
    1b9c:	8905803a 	cmpltu	r2,r17,r4
    1ba0:	4267c83a 	sub	r19,r8,r9
    1ba4:	98a7c83a 	sub	r19,r19,r2
    1ba8:	9880202c 	andhi	r2,r19,128
    1bac:	10006326 	beq	r2,zero,1d3c <__adddf3+0x4d4>
    1bb0:	3463c83a 	sub	r17,r6,r17
    1bb4:	4a07c83a 	sub	r3,r9,r8
    1bb8:	344d803a 	cmpltu	r6,r6,r17
    1bbc:	19a7c83a 	sub	r19,r3,r6
    1bc0:	3825883a 	mov	r18,r7
    1bc4:	983f8a1e 	bne	r19,zero,19f0 <__alt_mem_onchip_memory+0xf78019f0>
    1bc8:	8809883a 	mov	r4,r17
    1bcc:	0003dbc0 	call	3dbc <__clzsi2>
    1bd0:	10800804 	addi	r2,r2,32
    1bd4:	10fffe04 	addi	r3,r2,-8
    1bd8:	010007c4 	movi	r4,31
    1bdc:	20ff890e 	bge	r4,r3,1a04 <__alt_mem_onchip_memory+0xf7801a04>
    1be0:	10bff604 	addi	r2,r2,-40
    1be4:	8884983a 	sll	r2,r17,r2
    1be8:	0023883a 	mov	r17,zero
    1bec:	1c3f8c0e 	bge	r3,r16,1a20 <__alt_mem_onchip_memory+0xf7801a20>
    1bf0:	023fe034 	movhi	r8,65408
    1bf4:	423fffc4 	addi	r8,r8,-1
    1bf8:	80e1c83a 	sub	r16,r16,r3
    1bfc:	1210703a 	and	r8,r2,r8
    1c00:	003f3806 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1c04:	9007883a 	mov	r3,r18
    1c08:	0011883a 	mov	r8,zero
    1c0c:	0005883a 	mov	r2,zero
    1c10:	003f4c06 	br	1944 <__alt_mem_onchip_memory+0xf7801944>
    1c14:	498cb03a 	or	r6,r9,r6
    1c18:	300cc03a 	cmpne	r6,r6,zero
    1c1c:	0007883a 	mov	r3,zero
    1c20:	003f6806 	br	19c4 <__alt_mem_onchip_memory+0xf78019c4>
    1c24:	20009c1e 	bne	r4,zero,1e98 <__adddf3+0x630>
    1c28:	80800044 	addi	r2,r16,1
    1c2c:	1141ffcc 	andi	r5,r2,2047
    1c30:	01000044 	movi	r4,1
    1c34:	2140670e 	bge	r4,r5,1dd4 <__adddf3+0x56c>
    1c38:	0101ffc4 	movi	r4,2047
    1c3c:	11007f26 	beq	r2,r4,1e3c <__adddf3+0x5d4>
    1c40:	898d883a 	add	r6,r17,r6
    1c44:	4247883a 	add	r3,r8,r9
    1c48:	3451803a 	cmpltu	r8,r6,r17
    1c4c:	40d1883a 	add	r8,r8,r3
    1c50:	402297fa 	slli	r17,r8,31
    1c54:	300cd07a 	srli	r6,r6,1
    1c58:	4010d07a 	srli	r8,r8,1
    1c5c:	1021883a 	mov	r16,r2
    1c60:	89a2b03a 	or	r17,r17,r6
    1c64:	003f1f06 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1c68:	0081ffc4 	movi	r2,2047
    1c6c:	80bf481e 	bne	r16,r2,1990 <__alt_mem_onchip_memory+0xf7801990>
    1c70:	003f1c06 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1c74:	843ff844 	addi	r16,r16,-31
    1c78:	01000804 	movi	r4,32
    1c7c:	1406d83a 	srl	r3,r2,r16
    1c80:	41005026 	beq	r8,r4,1dc4 <__adddf3+0x55c>
    1c84:	01001004 	movi	r4,64
    1c88:	2211c83a 	sub	r8,r4,r8
    1c8c:	1204983a 	sll	r2,r2,r8
    1c90:	88a2b03a 	or	r17,r17,r2
    1c94:	8822c03a 	cmpne	r17,r17,zero
    1c98:	1c62b03a 	or	r17,r3,r17
    1c9c:	0011883a 	mov	r8,zero
    1ca0:	0021883a 	mov	r16,zero
    1ca4:	003f7106 	br	1a6c <__alt_mem_onchip_memory+0xf7801a6c>
    1ca8:	193ff804 	addi	r4,r3,-32
    1cac:	00800804 	movi	r2,32
    1cb0:	4908d83a 	srl	r4,r9,r4
    1cb4:	18804526 	beq	r3,r2,1dcc <__adddf3+0x564>
    1cb8:	00801004 	movi	r2,64
    1cbc:	10c5c83a 	sub	r2,r2,r3
    1cc0:	4886983a 	sll	r3,r9,r2
    1cc4:	198cb03a 	or	r6,r3,r6
    1cc8:	300cc03a 	cmpne	r6,r6,zero
    1ccc:	218cb03a 	or	r6,r4,r6
    1cd0:	0007883a 	mov	r3,zero
    1cd4:	003f3b06 	br	19c4 <__alt_mem_onchip_memory+0xf78019c4>
    1cd8:	80002a26 	beq	r16,zero,1d84 <__adddf3+0x51c>
    1cdc:	0101ffc4 	movi	r4,2047
    1ce0:	11006826 	beq	r2,r4,1e84 <__adddf3+0x61c>
    1ce4:	00c7c83a 	sub	r3,zero,r3
    1ce8:	42002034 	orhi	r8,r8,128
    1cec:	01000e04 	movi	r4,56
    1cf0:	20c07c16 	blt	r4,r3,1ee4 <__adddf3+0x67c>
    1cf4:	010007c4 	movi	r4,31
    1cf8:	20c0da16 	blt	r4,r3,2064 <__adddf3+0x7fc>
    1cfc:	01000804 	movi	r4,32
    1d00:	20c9c83a 	sub	r4,r4,r3
    1d04:	4114983a 	sll	r10,r8,r4
    1d08:	88cad83a 	srl	r5,r17,r3
    1d0c:	8908983a 	sll	r4,r17,r4
    1d10:	40c6d83a 	srl	r3,r8,r3
    1d14:	5162b03a 	or	r17,r10,r5
    1d18:	2008c03a 	cmpne	r4,r4,zero
    1d1c:	8922b03a 	or	r17,r17,r4
    1d20:	3463c83a 	sub	r17,r6,r17
    1d24:	48c7c83a 	sub	r3,r9,r3
    1d28:	344d803a 	cmpltu	r6,r6,r17
    1d2c:	1991c83a 	sub	r8,r3,r6
    1d30:	1021883a 	mov	r16,r2
    1d34:	3825883a 	mov	r18,r7
    1d38:	003f2706 	br	19d8 <__alt_mem_onchip_memory+0xf78019d8>
    1d3c:	24d0b03a 	or	r8,r4,r19
    1d40:	40001b1e 	bne	r8,zero,1db0 <__adddf3+0x548>
    1d44:	0005883a 	mov	r2,zero
    1d48:	0007883a 	mov	r3,zero
    1d4c:	0021883a 	mov	r16,zero
    1d50:	003f4d06 	br	1a88 <__alt_mem_onchip_memory+0xf7801a88>
    1d54:	008007c4 	movi	r2,31
    1d58:	11003c16 	blt	r2,r4,1e4c <__adddf3+0x5e4>
    1d5c:	00800804 	movi	r2,32
    1d60:	1105c83a 	sub	r2,r2,r4
    1d64:	488e983a 	sll	r7,r9,r2
    1d68:	310ad83a 	srl	r5,r6,r4
    1d6c:	3084983a 	sll	r2,r6,r2
    1d70:	4912d83a 	srl	r9,r9,r4
    1d74:	394ab03a 	or	r5,r7,r5
    1d78:	1004c03a 	cmpne	r2,r2,zero
    1d7c:	288ab03a 	or	r5,r5,r2
    1d80:	003f5306 	br	1ad0 <__alt_mem_onchip_memory+0xf7801ad0>
    1d84:	4448b03a 	or	r4,r8,r17
    1d88:	20003e26 	beq	r4,zero,1e84 <__adddf3+0x61c>
    1d8c:	00c6303a 	nor	r3,zero,r3
    1d90:	18003a1e 	bne	r3,zero,1e7c <__adddf3+0x614>
    1d94:	3463c83a 	sub	r17,r6,r17
    1d98:	4a07c83a 	sub	r3,r9,r8
    1d9c:	344d803a 	cmpltu	r6,r6,r17
    1da0:	1991c83a 	sub	r8,r3,r6
    1da4:	1021883a 	mov	r16,r2
    1da8:	3825883a 	mov	r18,r7
    1dac:	003f0a06 	br	19d8 <__alt_mem_onchip_memory+0xf78019d8>
    1db0:	2023883a 	mov	r17,r4
    1db4:	003f0d06 	br	19ec <__alt_mem_onchip_memory+0xf78019ec>
    1db8:	0081ffc4 	movi	r2,2047
    1dbc:	80bf3f1e 	bne	r16,r2,1abc <__alt_mem_onchip_memory+0xf7801abc>
    1dc0:	003ec806 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1dc4:	0005883a 	mov	r2,zero
    1dc8:	003fb106 	br	1c90 <__alt_mem_onchip_memory+0xf7801c90>
    1dcc:	0007883a 	mov	r3,zero
    1dd0:	003fbc06 	br	1cc4 <__alt_mem_onchip_memory+0xf7801cc4>
    1dd4:	4444b03a 	or	r2,r8,r17
    1dd8:	8000871e 	bne	r16,zero,1ff8 <__adddf3+0x790>
    1ddc:	1000ba26 	beq	r2,zero,20c8 <__adddf3+0x860>
    1de0:	4984b03a 	or	r2,r9,r6
    1de4:	103ebf26 	beq	r2,zero,18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1de8:	8985883a 	add	r2,r17,r6
    1dec:	4247883a 	add	r3,r8,r9
    1df0:	1451803a 	cmpltu	r8,r2,r17
    1df4:	40d1883a 	add	r8,r8,r3
    1df8:	40c0202c 	andhi	r3,r8,128
    1dfc:	1023883a 	mov	r17,r2
    1e00:	183f1a26 	beq	r3,zero,1a6c <__alt_mem_onchip_memory+0xf7801a6c>
    1e04:	00bfe034 	movhi	r2,65408
    1e08:	10bfffc4 	addi	r2,r2,-1
    1e0c:	2021883a 	mov	r16,r4
    1e10:	4090703a 	and	r8,r8,r2
    1e14:	003eb306 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1e18:	4444b03a 	or	r2,r8,r17
    1e1c:	8000291e 	bne	r16,zero,1ec4 <__adddf3+0x65c>
    1e20:	10004b1e 	bne	r2,zero,1f50 <__adddf3+0x6e8>
    1e24:	4990b03a 	or	r8,r9,r6
    1e28:	40008b26 	beq	r8,zero,2058 <__adddf3+0x7f0>
    1e2c:	4811883a 	mov	r8,r9
    1e30:	3023883a 	mov	r17,r6
    1e34:	3825883a 	mov	r18,r7
    1e38:	003eaa06 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1e3c:	1021883a 	mov	r16,r2
    1e40:	0011883a 	mov	r8,zero
    1e44:	0005883a 	mov	r2,zero
    1e48:	003f0f06 	br	1a88 <__alt_mem_onchip_memory+0xf7801a88>
    1e4c:	217ff804 	addi	r5,r4,-32
    1e50:	00800804 	movi	r2,32
    1e54:	494ad83a 	srl	r5,r9,r5
    1e58:	20807d26 	beq	r4,r2,2050 <__adddf3+0x7e8>
    1e5c:	00801004 	movi	r2,64
    1e60:	1109c83a 	sub	r4,r2,r4
    1e64:	4912983a 	sll	r9,r9,r4
    1e68:	498cb03a 	or	r6,r9,r6
    1e6c:	300cc03a 	cmpne	r6,r6,zero
    1e70:	298ab03a 	or	r5,r5,r6
    1e74:	0013883a 	mov	r9,zero
    1e78:	003f1506 	br	1ad0 <__alt_mem_onchip_memory+0xf7801ad0>
    1e7c:	0101ffc4 	movi	r4,2047
    1e80:	113f9a1e 	bne	r2,r4,1cec <__alt_mem_onchip_memory+0xf7801cec>
    1e84:	4811883a 	mov	r8,r9
    1e88:	3023883a 	mov	r17,r6
    1e8c:	1021883a 	mov	r16,r2
    1e90:	3825883a 	mov	r18,r7
    1e94:	003e9306 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1e98:	8000161e 	bne	r16,zero,1ef4 <__adddf3+0x68c>
    1e9c:	444ab03a 	or	r5,r8,r17
    1ea0:	28005126 	beq	r5,zero,1fe8 <__adddf3+0x780>
    1ea4:	0108303a 	nor	r4,zero,r4
    1ea8:	20004d1e 	bne	r4,zero,1fe0 <__adddf3+0x778>
    1eac:	89a3883a 	add	r17,r17,r6
    1eb0:	4253883a 	add	r9,r8,r9
    1eb4:	898d803a 	cmpltu	r6,r17,r6
    1eb8:	3251883a 	add	r8,r6,r9
    1ebc:	1021883a 	mov	r16,r2
    1ec0:	003f0806 	br	1ae4 <__alt_mem_onchip_memory+0xf7801ae4>
    1ec4:	1000301e 	bne	r2,zero,1f88 <__adddf3+0x720>
    1ec8:	4984b03a 	or	r2,r9,r6
    1ecc:	10007126 	beq	r2,zero,2094 <__adddf3+0x82c>
    1ed0:	4811883a 	mov	r8,r9
    1ed4:	3023883a 	mov	r17,r6
    1ed8:	3825883a 	mov	r18,r7
    1edc:	0401ffc4 	movi	r16,2047
    1ee0:	003e8006 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1ee4:	4462b03a 	or	r17,r8,r17
    1ee8:	8822c03a 	cmpne	r17,r17,zero
    1eec:	0007883a 	mov	r3,zero
    1ef0:	003f8b06 	br	1d20 <__alt_mem_onchip_memory+0xf7801d20>
    1ef4:	0141ffc4 	movi	r5,2047
    1ef8:	11403b26 	beq	r2,r5,1fe8 <__adddf3+0x780>
    1efc:	0109c83a 	sub	r4,zero,r4
    1f00:	42002034 	orhi	r8,r8,128
    1f04:	01400e04 	movi	r5,56
    1f08:	29006716 	blt	r5,r4,20a8 <__adddf3+0x840>
    1f0c:	014007c4 	movi	r5,31
    1f10:	29007016 	blt	r5,r4,20d4 <__adddf3+0x86c>
    1f14:	01400804 	movi	r5,32
    1f18:	290bc83a 	sub	r5,r5,r4
    1f1c:	4154983a 	sll	r10,r8,r5
    1f20:	890ed83a 	srl	r7,r17,r4
    1f24:	894a983a 	sll	r5,r17,r5
    1f28:	4108d83a 	srl	r4,r8,r4
    1f2c:	51e2b03a 	or	r17,r10,r7
    1f30:	280ac03a 	cmpne	r5,r5,zero
    1f34:	8962b03a 	or	r17,r17,r5
    1f38:	89a3883a 	add	r17,r17,r6
    1f3c:	2253883a 	add	r9,r4,r9
    1f40:	898d803a 	cmpltu	r6,r17,r6
    1f44:	3251883a 	add	r8,r6,r9
    1f48:	1021883a 	mov	r16,r2
    1f4c:	003ee506 	br	1ae4 <__alt_mem_onchip_memory+0xf7801ae4>
    1f50:	4984b03a 	or	r2,r9,r6
    1f54:	103e6326 	beq	r2,zero,18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1f58:	8987c83a 	sub	r3,r17,r6
    1f5c:	88c9803a 	cmpltu	r4,r17,r3
    1f60:	4245c83a 	sub	r2,r8,r9
    1f64:	1105c83a 	sub	r2,r2,r4
    1f68:	1100202c 	andhi	r4,r2,128
    1f6c:	203ebb26 	beq	r4,zero,1a5c <__alt_mem_onchip_memory+0xf7801a5c>
    1f70:	3463c83a 	sub	r17,r6,r17
    1f74:	4a07c83a 	sub	r3,r9,r8
    1f78:	344d803a 	cmpltu	r6,r6,r17
    1f7c:	1991c83a 	sub	r8,r3,r6
    1f80:	3825883a 	mov	r18,r7
    1f84:	003e5706 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1f88:	4984b03a 	or	r2,r9,r6
    1f8c:	10002e26 	beq	r2,zero,2048 <__adddf3+0x7e0>
    1f90:	4004d0fa 	srli	r2,r8,3
    1f94:	8822d0fa 	srli	r17,r17,3
    1f98:	4010977a 	slli	r8,r8,29
    1f9c:	10c0022c 	andhi	r3,r2,8
    1fa0:	4462b03a 	or	r17,r8,r17
    1fa4:	18000826 	beq	r3,zero,1fc8 <__adddf3+0x760>
    1fa8:	4808d0fa 	srli	r4,r9,3
    1fac:	20c0022c 	andhi	r3,r4,8
    1fb0:	1800051e 	bne	r3,zero,1fc8 <__adddf3+0x760>
    1fb4:	300cd0fa 	srli	r6,r6,3
    1fb8:	4806977a 	slli	r3,r9,29
    1fbc:	2005883a 	mov	r2,r4
    1fc0:	3825883a 	mov	r18,r7
    1fc4:	19a2b03a 	or	r17,r3,r6
    1fc8:	8810d77a 	srli	r8,r17,29
    1fcc:	100490fa 	slli	r2,r2,3
    1fd0:	882290fa 	slli	r17,r17,3
    1fd4:	0401ffc4 	movi	r16,2047
    1fd8:	4090b03a 	or	r8,r8,r2
    1fdc:	003e4106 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1fe0:	0141ffc4 	movi	r5,2047
    1fe4:	117fc71e 	bne	r2,r5,1f04 <__alt_mem_onchip_memory+0xf7801f04>
    1fe8:	4811883a 	mov	r8,r9
    1fec:	3023883a 	mov	r17,r6
    1ff0:	1021883a 	mov	r16,r2
    1ff4:	003e3b06 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    1ff8:	10002f26 	beq	r2,zero,20b8 <__adddf3+0x850>
    1ffc:	4984b03a 	or	r2,r9,r6
    2000:	10001126 	beq	r2,zero,2048 <__adddf3+0x7e0>
    2004:	4004d0fa 	srli	r2,r8,3
    2008:	8822d0fa 	srli	r17,r17,3
    200c:	4010977a 	slli	r8,r8,29
    2010:	10c0022c 	andhi	r3,r2,8
    2014:	4462b03a 	or	r17,r8,r17
    2018:	183feb26 	beq	r3,zero,1fc8 <__alt_mem_onchip_memory+0xf7801fc8>
    201c:	4808d0fa 	srli	r4,r9,3
    2020:	20c0022c 	andhi	r3,r4,8
    2024:	183fe81e 	bne	r3,zero,1fc8 <__alt_mem_onchip_memory+0xf7801fc8>
    2028:	300cd0fa 	srli	r6,r6,3
    202c:	4806977a 	slli	r3,r9,29
    2030:	2005883a 	mov	r2,r4
    2034:	19a2b03a 	or	r17,r3,r6
    2038:	003fe306 	br	1fc8 <__alt_mem_onchip_memory+0xf7801fc8>
    203c:	0011883a 	mov	r8,zero
    2040:	0005883a 	mov	r2,zero
    2044:	003e3f06 	br	1944 <__alt_mem_onchip_memory+0xf7801944>
    2048:	0401ffc4 	movi	r16,2047
    204c:	003e2506 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    2050:	0013883a 	mov	r9,zero
    2054:	003f8406 	br	1e68 <__alt_mem_onchip_memory+0xf7801e68>
    2058:	0005883a 	mov	r2,zero
    205c:	0007883a 	mov	r3,zero
    2060:	003e8906 	br	1a88 <__alt_mem_onchip_memory+0xf7801a88>
    2064:	197ff804 	addi	r5,r3,-32
    2068:	01000804 	movi	r4,32
    206c:	414ad83a 	srl	r5,r8,r5
    2070:	19002426 	beq	r3,r4,2104 <__adddf3+0x89c>
    2074:	01001004 	movi	r4,64
    2078:	20c7c83a 	sub	r3,r4,r3
    207c:	40c6983a 	sll	r3,r8,r3
    2080:	1c46b03a 	or	r3,r3,r17
    2084:	1806c03a 	cmpne	r3,r3,zero
    2088:	28e2b03a 	or	r17,r5,r3
    208c:	0007883a 	mov	r3,zero
    2090:	003f2306 	br	1d20 <__alt_mem_onchip_memory+0xf7801d20>
    2094:	0007883a 	mov	r3,zero
    2098:	5811883a 	mov	r8,r11
    209c:	00bfffc4 	movi	r2,-1
    20a0:	0401ffc4 	movi	r16,2047
    20a4:	003e7806 	br	1a88 <__alt_mem_onchip_memory+0xf7801a88>
    20a8:	4462b03a 	or	r17,r8,r17
    20ac:	8822c03a 	cmpne	r17,r17,zero
    20b0:	0009883a 	mov	r4,zero
    20b4:	003fa006 	br	1f38 <__alt_mem_onchip_memory+0xf7801f38>
    20b8:	4811883a 	mov	r8,r9
    20bc:	3023883a 	mov	r17,r6
    20c0:	0401ffc4 	movi	r16,2047
    20c4:	003e0706 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    20c8:	4811883a 	mov	r8,r9
    20cc:	3023883a 	mov	r17,r6
    20d0:	003e0406 	br	18e4 <__alt_mem_onchip_memory+0xf78018e4>
    20d4:	21fff804 	addi	r7,r4,-32
    20d8:	01400804 	movi	r5,32
    20dc:	41ced83a 	srl	r7,r8,r7
    20e0:	21400a26 	beq	r4,r5,210c <__adddf3+0x8a4>
    20e4:	01401004 	movi	r5,64
    20e8:	2909c83a 	sub	r4,r5,r4
    20ec:	4108983a 	sll	r4,r8,r4
    20f0:	2448b03a 	or	r4,r4,r17
    20f4:	2008c03a 	cmpne	r4,r4,zero
    20f8:	3922b03a 	or	r17,r7,r4
    20fc:	0009883a 	mov	r4,zero
    2100:	003f8d06 	br	1f38 <__alt_mem_onchip_memory+0xf7801f38>
    2104:	0007883a 	mov	r3,zero
    2108:	003fdd06 	br	2080 <__alt_mem_onchip_memory+0xf7802080>
    210c:	0009883a 	mov	r4,zero
    2110:	003ff706 	br	20f0 <__alt_mem_onchip_memory+0xf78020f0>

00002114 <__divdf3>:
    2114:	defff204 	addi	sp,sp,-56
    2118:	dd400915 	stw	r21,36(sp)
    211c:	282ad53a 	srli	r21,r5,20
    2120:	dd000815 	stw	r20,32(sp)
    2124:	2828d7fa 	srli	r20,r5,31
    2128:	dc000415 	stw	r16,16(sp)
    212c:	04000434 	movhi	r16,16
    2130:	df000c15 	stw	fp,48(sp)
    2134:	843fffc4 	addi	r16,r16,-1
    2138:	dfc00d15 	stw	ra,52(sp)
    213c:	ddc00b15 	stw	r23,44(sp)
    2140:	dd800a15 	stw	r22,40(sp)
    2144:	dcc00715 	stw	r19,28(sp)
    2148:	dc800615 	stw	r18,24(sp)
    214c:	dc400515 	stw	r17,20(sp)
    2150:	ad41ffcc 	andi	r21,r21,2047
    2154:	2c20703a 	and	r16,r5,r16
    2158:	a7003fcc 	andi	fp,r20,255
    215c:	a8006126 	beq	r21,zero,22e4 <__divdf3+0x1d0>
    2160:	0081ffc4 	movi	r2,2047
    2164:	2025883a 	mov	r18,r4
    2168:	a8803726 	beq	r21,r2,2248 <__divdf3+0x134>
    216c:	80800434 	orhi	r2,r16,16
    2170:	100490fa 	slli	r2,r2,3
    2174:	2020d77a 	srli	r16,r4,29
    2178:	202490fa 	slli	r18,r4,3
    217c:	ad7f0044 	addi	r21,r21,-1023
    2180:	80a0b03a 	or	r16,r16,r2
    2184:	0027883a 	mov	r19,zero
    2188:	0013883a 	mov	r9,zero
    218c:	3804d53a 	srli	r2,r7,20
    2190:	382cd7fa 	srli	r22,r7,31
    2194:	04400434 	movhi	r17,16
    2198:	8c7fffc4 	addi	r17,r17,-1
    219c:	1081ffcc 	andi	r2,r2,2047
    21a0:	3011883a 	mov	r8,r6
    21a4:	3c62703a 	and	r17,r7,r17
    21a8:	b5c03fcc 	andi	r23,r22,255
    21ac:	10006c26 	beq	r2,zero,2360 <__divdf3+0x24c>
    21b0:	00c1ffc4 	movi	r3,2047
    21b4:	10c06426 	beq	r2,r3,2348 <__divdf3+0x234>
    21b8:	88c00434 	orhi	r3,r17,16
    21bc:	180690fa 	slli	r3,r3,3
    21c0:	3022d77a 	srli	r17,r6,29
    21c4:	301090fa 	slli	r8,r6,3
    21c8:	10bf0044 	addi	r2,r2,-1023
    21cc:	88e2b03a 	or	r17,r17,r3
    21d0:	000f883a 	mov	r7,zero
    21d4:	a58cf03a 	xor	r6,r20,r22
    21d8:	3cc8b03a 	or	r4,r7,r19
    21dc:	a8abc83a 	sub	r21,r21,r2
    21e0:	008003c4 	movi	r2,15
    21e4:	3007883a 	mov	r3,r6
    21e8:	34c03fcc 	andi	r19,r6,255
    21ec:	11009036 	bltu	r2,r4,2430 <__divdf3+0x31c>
    21f0:	200890ba 	slli	r4,r4,2
    21f4:	00800034 	movhi	r2,0
    21f8:	10888204 	addi	r2,r2,8712
    21fc:	2089883a 	add	r4,r4,r2
    2200:	20800017 	ldw	r2,0(r4)
    2204:	1000683a 	jmp	r2
    2208:	00002430 	cmpltui	zero,zero,144
    220c:	00002280 	call	228 <alt_instruction_exception_entry+0x58>
    2210:	00002420 	cmpeqi	zero,zero,144
    2214:	00002274 	movhi	zero,137
    2218:	00002420 	cmpeqi	zero,zero,144
    221c:	000023f4 	movhi	zero,143
    2220:	00002420 	cmpeqi	zero,zero,144
    2224:	00002274 	movhi	zero,137
    2228:	00002280 	call	228 <alt_instruction_exception_entry+0x58>
    222c:	00002280 	call	228 <alt_instruction_exception_entry+0x58>
    2230:	000023f4 	movhi	zero,143
    2234:	00002274 	movhi	zero,137
    2238:	00002264 	muli	zero,zero,137
    223c:	00002264 	muli	zero,zero,137
    2240:	00002264 	muli	zero,zero,137
    2244:	00002714 	movui	zero,156
    2248:	2404b03a 	or	r2,r4,r16
    224c:	1000661e 	bne	r2,zero,23e8 <__divdf3+0x2d4>
    2250:	04c00204 	movi	r19,8
    2254:	0021883a 	mov	r16,zero
    2258:	0025883a 	mov	r18,zero
    225c:	02400084 	movi	r9,2
    2260:	003fca06 	br	218c <__alt_mem_onchip_memory+0xf780218c>
    2264:	8023883a 	mov	r17,r16
    2268:	9011883a 	mov	r8,r18
    226c:	e02f883a 	mov	r23,fp
    2270:	480f883a 	mov	r7,r9
    2274:	00800084 	movi	r2,2
    2278:	3881311e 	bne	r7,r2,2740 <__divdf3+0x62c>
    227c:	b827883a 	mov	r19,r23
    2280:	98c0004c 	andi	r3,r19,1
    2284:	0081ffc4 	movi	r2,2047
    2288:	000b883a 	mov	r5,zero
    228c:	0025883a 	mov	r18,zero
    2290:	1004953a 	slli	r2,r2,20
    2294:	18c03fcc 	andi	r3,r3,255
    2298:	04400434 	movhi	r17,16
    229c:	8c7fffc4 	addi	r17,r17,-1
    22a0:	180697fa 	slli	r3,r3,31
    22a4:	2c4a703a 	and	r5,r5,r17
    22a8:	288ab03a 	or	r5,r5,r2
    22ac:	28c6b03a 	or	r3,r5,r3
    22b0:	9005883a 	mov	r2,r18
    22b4:	dfc00d17 	ldw	ra,52(sp)
    22b8:	df000c17 	ldw	fp,48(sp)
    22bc:	ddc00b17 	ldw	r23,44(sp)
    22c0:	dd800a17 	ldw	r22,40(sp)
    22c4:	dd400917 	ldw	r21,36(sp)
    22c8:	dd000817 	ldw	r20,32(sp)
    22cc:	dcc00717 	ldw	r19,28(sp)
    22d0:	dc800617 	ldw	r18,24(sp)
    22d4:	dc400517 	ldw	r17,20(sp)
    22d8:	dc000417 	ldw	r16,16(sp)
    22dc:	dec00e04 	addi	sp,sp,56
    22e0:	f800283a 	ret
    22e4:	2404b03a 	or	r2,r4,r16
    22e8:	2027883a 	mov	r19,r4
    22ec:	10003926 	beq	r2,zero,23d4 <__divdf3+0x2c0>
    22f0:	80012e26 	beq	r16,zero,27ac <__divdf3+0x698>
    22f4:	8009883a 	mov	r4,r16
    22f8:	d9800315 	stw	r6,12(sp)
    22fc:	d9c00215 	stw	r7,8(sp)
    2300:	0003dbc0 	call	3dbc <__clzsi2>
    2304:	d9800317 	ldw	r6,12(sp)
    2308:	d9c00217 	ldw	r7,8(sp)
    230c:	113ffd44 	addi	r4,r2,-11
    2310:	00c00704 	movi	r3,28
    2314:	19012116 	blt	r3,r4,279c <__divdf3+0x688>
    2318:	00c00744 	movi	r3,29
    231c:	147ffe04 	addi	r17,r2,-8
    2320:	1907c83a 	sub	r3,r3,r4
    2324:	8460983a 	sll	r16,r16,r17
    2328:	98c6d83a 	srl	r3,r19,r3
    232c:	9c64983a 	sll	r18,r19,r17
    2330:	1c20b03a 	or	r16,r3,r16
    2334:	1080fcc4 	addi	r2,r2,1011
    2338:	00abc83a 	sub	r21,zero,r2
    233c:	0027883a 	mov	r19,zero
    2340:	0013883a 	mov	r9,zero
    2344:	003f9106 	br	218c <__alt_mem_onchip_memory+0xf780218c>
    2348:	3446b03a 	or	r3,r6,r17
    234c:	18001f1e 	bne	r3,zero,23cc <__divdf3+0x2b8>
    2350:	0023883a 	mov	r17,zero
    2354:	0011883a 	mov	r8,zero
    2358:	01c00084 	movi	r7,2
    235c:	003f9d06 	br	21d4 <__alt_mem_onchip_memory+0xf78021d4>
    2360:	3446b03a 	or	r3,r6,r17
    2364:	18001526 	beq	r3,zero,23bc <__divdf3+0x2a8>
    2368:	88011b26 	beq	r17,zero,27d8 <__divdf3+0x6c4>
    236c:	8809883a 	mov	r4,r17
    2370:	d9800315 	stw	r6,12(sp)
    2374:	da400115 	stw	r9,4(sp)
    2378:	0003dbc0 	call	3dbc <__clzsi2>
    237c:	d9800317 	ldw	r6,12(sp)
    2380:	da400117 	ldw	r9,4(sp)
    2384:	113ffd44 	addi	r4,r2,-11
    2388:	00c00704 	movi	r3,28
    238c:	19010e16 	blt	r3,r4,27c8 <__divdf3+0x6b4>
    2390:	00c00744 	movi	r3,29
    2394:	123ffe04 	addi	r8,r2,-8
    2398:	1907c83a 	sub	r3,r3,r4
    239c:	8a22983a 	sll	r17,r17,r8
    23a0:	30c6d83a 	srl	r3,r6,r3
    23a4:	3210983a 	sll	r8,r6,r8
    23a8:	1c62b03a 	or	r17,r3,r17
    23ac:	1080fcc4 	addi	r2,r2,1011
    23b0:	0085c83a 	sub	r2,zero,r2
    23b4:	000f883a 	mov	r7,zero
    23b8:	003f8606 	br	21d4 <__alt_mem_onchip_memory+0xf78021d4>
    23bc:	0023883a 	mov	r17,zero
    23c0:	0011883a 	mov	r8,zero
    23c4:	01c00044 	movi	r7,1
    23c8:	003f8206 	br	21d4 <__alt_mem_onchip_memory+0xf78021d4>
    23cc:	01c000c4 	movi	r7,3
    23d0:	003f8006 	br	21d4 <__alt_mem_onchip_memory+0xf78021d4>
    23d4:	04c00104 	movi	r19,4
    23d8:	0021883a 	mov	r16,zero
    23dc:	0025883a 	mov	r18,zero
    23e0:	02400044 	movi	r9,1
    23e4:	003f6906 	br	218c <__alt_mem_onchip_memory+0xf780218c>
    23e8:	04c00304 	movi	r19,12
    23ec:	024000c4 	movi	r9,3
    23f0:	003f6606 	br	218c <__alt_mem_onchip_memory+0xf780218c>
    23f4:	01400434 	movhi	r5,16
    23f8:	0007883a 	mov	r3,zero
    23fc:	297fffc4 	addi	r5,r5,-1
    2400:	04bfffc4 	movi	r18,-1
    2404:	0081ffc4 	movi	r2,2047
    2408:	003fa106 	br	2290 <__alt_mem_onchip_memory+0xf7802290>
    240c:	00c00044 	movi	r3,1
    2410:	1887c83a 	sub	r3,r3,r2
    2414:	01000e04 	movi	r4,56
    2418:	20c1210e 	bge	r4,r3,28a0 <__divdf3+0x78c>
    241c:	98c0004c 	andi	r3,r19,1
    2420:	0005883a 	mov	r2,zero
    2424:	000b883a 	mov	r5,zero
    2428:	0025883a 	mov	r18,zero
    242c:	003f9806 	br	2290 <__alt_mem_onchip_memory+0xf7802290>
    2430:	8c00fd36 	bltu	r17,r16,2828 <__divdf3+0x714>
    2434:	8440fb26 	beq	r16,r17,2824 <__divdf3+0x710>
    2438:	8007883a 	mov	r3,r16
    243c:	ad7fffc4 	addi	r21,r21,-1
    2440:	0021883a 	mov	r16,zero
    2444:	4004d63a 	srli	r2,r8,24
    2448:	8822923a 	slli	r17,r17,8
    244c:	1809883a 	mov	r4,r3
    2450:	402c923a 	slli	r22,r8,8
    2454:	88b8b03a 	or	fp,r17,r2
    2458:	e028d43a 	srli	r20,fp,16
    245c:	d8c00015 	stw	r3,0(sp)
    2460:	e5ffffcc 	andi	r23,fp,65535
    2464:	a00b883a 	mov	r5,r20
    2468:	0003f180 	call	3f18 <__udivsi3>
    246c:	d8c00017 	ldw	r3,0(sp)
    2470:	a00b883a 	mov	r5,r20
    2474:	d8800315 	stw	r2,12(sp)
    2478:	1809883a 	mov	r4,r3
    247c:	0003f7c0 	call	3f7c <__umodsi3>
    2480:	d9800317 	ldw	r6,12(sp)
    2484:	1006943a 	slli	r3,r2,16
    2488:	9004d43a 	srli	r2,r18,16
    248c:	b9a3383a 	mul	r17,r23,r6
    2490:	10c4b03a 	or	r2,r2,r3
    2494:	1440062e 	bgeu	r2,r17,24b0 <__divdf3+0x39c>
    2498:	1705883a 	add	r2,r2,fp
    249c:	30ffffc4 	addi	r3,r6,-1
    24a0:	1700ee36 	bltu	r2,fp,285c <__divdf3+0x748>
    24a4:	1440ed2e 	bgeu	r2,r17,285c <__divdf3+0x748>
    24a8:	31bfff84 	addi	r6,r6,-2
    24ac:	1705883a 	add	r2,r2,fp
    24b0:	1463c83a 	sub	r17,r2,r17
    24b4:	a00b883a 	mov	r5,r20
    24b8:	8809883a 	mov	r4,r17
    24bc:	d9800315 	stw	r6,12(sp)
    24c0:	0003f180 	call	3f18 <__udivsi3>
    24c4:	a00b883a 	mov	r5,r20
    24c8:	8809883a 	mov	r4,r17
    24cc:	d8800215 	stw	r2,8(sp)
    24d0:	0003f7c0 	call	3f7c <__umodsi3>
    24d4:	d9c00217 	ldw	r7,8(sp)
    24d8:	1004943a 	slli	r2,r2,16
    24dc:	94bfffcc 	andi	r18,r18,65535
    24e0:	b9d1383a 	mul	r8,r23,r7
    24e4:	90a4b03a 	or	r18,r18,r2
    24e8:	d9800317 	ldw	r6,12(sp)
    24ec:	9200062e 	bgeu	r18,r8,2508 <__divdf3+0x3f4>
    24f0:	9725883a 	add	r18,r18,fp
    24f4:	38bfffc4 	addi	r2,r7,-1
    24f8:	9700d636 	bltu	r18,fp,2854 <__divdf3+0x740>
    24fc:	9200d52e 	bgeu	r18,r8,2854 <__divdf3+0x740>
    2500:	39ffff84 	addi	r7,r7,-2
    2504:	9725883a 	add	r18,r18,fp
    2508:	3004943a 	slli	r2,r6,16
    250c:	b012d43a 	srli	r9,r22,16
    2510:	b1bfffcc 	andi	r6,r22,65535
    2514:	11e2b03a 	or	r17,r2,r7
    2518:	8806d43a 	srli	r3,r17,16
    251c:	893fffcc 	andi	r4,r17,65535
    2520:	218b383a 	mul	r5,r4,r6
    2524:	30c5383a 	mul	r2,r6,r3
    2528:	2249383a 	mul	r4,r4,r9
    252c:	280ed43a 	srli	r7,r5,16
    2530:	9225c83a 	sub	r18,r18,r8
    2534:	2089883a 	add	r4,r4,r2
    2538:	3909883a 	add	r4,r7,r4
    253c:	1a47383a 	mul	r3,r3,r9
    2540:	2080022e 	bgeu	r4,r2,254c <__divdf3+0x438>
    2544:	00800074 	movhi	r2,1
    2548:	1887883a 	add	r3,r3,r2
    254c:	2004d43a 	srli	r2,r4,16
    2550:	2008943a 	slli	r4,r4,16
    2554:	297fffcc 	andi	r5,r5,65535
    2558:	10c7883a 	add	r3,r2,r3
    255c:	2149883a 	add	r4,r4,r5
    2560:	90c0a536 	bltu	r18,r3,27f8 <__divdf3+0x6e4>
    2564:	90c0bf26 	beq	r18,r3,2864 <__divdf3+0x750>
    2568:	90c7c83a 	sub	r3,r18,r3
    256c:	810fc83a 	sub	r7,r16,r4
    2570:	81e5803a 	cmpltu	r18,r16,r7
    2574:	1ca5c83a 	sub	r18,r3,r18
    2578:	e480c126 	beq	fp,r18,2880 <__divdf3+0x76c>
    257c:	a00b883a 	mov	r5,r20
    2580:	9009883a 	mov	r4,r18
    2584:	d9800315 	stw	r6,12(sp)
    2588:	d9c00215 	stw	r7,8(sp)
    258c:	da400115 	stw	r9,4(sp)
    2590:	0003f180 	call	3f18 <__udivsi3>
    2594:	a00b883a 	mov	r5,r20
    2598:	9009883a 	mov	r4,r18
    259c:	d8800015 	stw	r2,0(sp)
    25a0:	0003f7c0 	call	3f7c <__umodsi3>
    25a4:	d9c00217 	ldw	r7,8(sp)
    25a8:	da000017 	ldw	r8,0(sp)
    25ac:	1006943a 	slli	r3,r2,16
    25b0:	3804d43a 	srli	r2,r7,16
    25b4:	ba21383a 	mul	r16,r23,r8
    25b8:	d9800317 	ldw	r6,12(sp)
    25bc:	10c4b03a 	or	r2,r2,r3
    25c0:	da400117 	ldw	r9,4(sp)
    25c4:	1400062e 	bgeu	r2,r16,25e0 <__divdf3+0x4cc>
    25c8:	1705883a 	add	r2,r2,fp
    25cc:	40ffffc4 	addi	r3,r8,-1
    25d0:	1700ad36 	bltu	r2,fp,2888 <__divdf3+0x774>
    25d4:	1400ac2e 	bgeu	r2,r16,2888 <__divdf3+0x774>
    25d8:	423fff84 	addi	r8,r8,-2
    25dc:	1705883a 	add	r2,r2,fp
    25e0:	1421c83a 	sub	r16,r2,r16
    25e4:	a00b883a 	mov	r5,r20
    25e8:	8009883a 	mov	r4,r16
    25ec:	d9800315 	stw	r6,12(sp)
    25f0:	d9c00215 	stw	r7,8(sp)
    25f4:	da000015 	stw	r8,0(sp)
    25f8:	da400115 	stw	r9,4(sp)
    25fc:	0003f180 	call	3f18 <__udivsi3>
    2600:	8009883a 	mov	r4,r16
    2604:	a00b883a 	mov	r5,r20
    2608:	1025883a 	mov	r18,r2
    260c:	0003f7c0 	call	3f7c <__umodsi3>
    2610:	d9c00217 	ldw	r7,8(sp)
    2614:	1004943a 	slli	r2,r2,16
    2618:	bcaf383a 	mul	r23,r23,r18
    261c:	393fffcc 	andi	r4,r7,65535
    2620:	2088b03a 	or	r4,r4,r2
    2624:	d9800317 	ldw	r6,12(sp)
    2628:	da000017 	ldw	r8,0(sp)
    262c:	da400117 	ldw	r9,4(sp)
    2630:	25c0062e 	bgeu	r4,r23,264c <__divdf3+0x538>
    2634:	2709883a 	add	r4,r4,fp
    2638:	90bfffc4 	addi	r2,r18,-1
    263c:	27009436 	bltu	r4,fp,2890 <__divdf3+0x77c>
    2640:	25c0932e 	bgeu	r4,r23,2890 <__divdf3+0x77c>
    2644:	94bfff84 	addi	r18,r18,-2
    2648:	2709883a 	add	r4,r4,fp
    264c:	4004943a 	slli	r2,r8,16
    2650:	25efc83a 	sub	r23,r4,r23
    2654:	1490b03a 	or	r8,r2,r18
    2658:	4008d43a 	srli	r4,r8,16
    265c:	40ffffcc 	andi	r3,r8,65535
    2660:	30c5383a 	mul	r2,r6,r3
    2664:	1a47383a 	mul	r3,r3,r9
    2668:	310d383a 	mul	r6,r6,r4
    266c:	100ad43a 	srli	r5,r2,16
    2670:	4913383a 	mul	r9,r9,r4
    2674:	1987883a 	add	r3,r3,r6
    2678:	28c7883a 	add	r3,r5,r3
    267c:	1980022e 	bgeu	r3,r6,2688 <__divdf3+0x574>
    2680:	01000074 	movhi	r4,1
    2684:	4913883a 	add	r9,r9,r4
    2688:	1808d43a 	srli	r4,r3,16
    268c:	1806943a 	slli	r3,r3,16
    2690:	10bfffcc 	andi	r2,r2,65535
    2694:	2253883a 	add	r9,r4,r9
    2698:	1887883a 	add	r3,r3,r2
    269c:	ba403836 	bltu	r23,r9,2780 <__divdf3+0x66c>
    26a0:	ba403626 	beq	r23,r9,277c <__divdf3+0x668>
    26a4:	42000054 	ori	r8,r8,1
    26a8:	a880ffc4 	addi	r2,r21,1023
    26ac:	00bf570e 	bge	zero,r2,240c <__alt_mem_onchip_memory+0xf780240c>
    26b0:	40c001cc 	andi	r3,r8,7
    26b4:	18000726 	beq	r3,zero,26d4 <__divdf3+0x5c0>
    26b8:	40c003cc 	andi	r3,r8,15
    26bc:	01000104 	movi	r4,4
    26c0:	19000426 	beq	r3,r4,26d4 <__divdf3+0x5c0>
    26c4:	4107883a 	add	r3,r8,r4
    26c8:	1a11803a 	cmpltu	r8,r3,r8
    26cc:	8a23883a 	add	r17,r17,r8
    26d0:	1811883a 	mov	r8,r3
    26d4:	88c0402c 	andhi	r3,r17,256
    26d8:	18000426 	beq	r3,zero,26ec <__divdf3+0x5d8>
    26dc:	00ffc034 	movhi	r3,65280
    26e0:	18ffffc4 	addi	r3,r3,-1
    26e4:	a8810004 	addi	r2,r21,1024
    26e8:	88e2703a 	and	r17,r17,r3
    26ec:	00c1ff84 	movi	r3,2046
    26f0:	18bee316 	blt	r3,r2,2280 <__alt_mem_onchip_memory+0xf7802280>
    26f4:	8824977a 	slli	r18,r17,29
    26f8:	4010d0fa 	srli	r8,r8,3
    26fc:	8822927a 	slli	r17,r17,9
    2700:	1081ffcc 	andi	r2,r2,2047
    2704:	9224b03a 	or	r18,r18,r8
    2708:	880ad33a 	srli	r5,r17,12
    270c:	98c0004c 	andi	r3,r19,1
    2710:	003edf06 	br	2290 <__alt_mem_onchip_memory+0xf7802290>
    2714:	8080022c 	andhi	r2,r16,8
    2718:	10001226 	beq	r2,zero,2764 <__divdf3+0x650>
    271c:	8880022c 	andhi	r2,r17,8
    2720:	1000101e 	bne	r2,zero,2764 <__divdf3+0x650>
    2724:	00800434 	movhi	r2,16
    2728:	89400234 	orhi	r5,r17,8
    272c:	10bfffc4 	addi	r2,r2,-1
    2730:	b007883a 	mov	r3,r22
    2734:	288a703a 	and	r5,r5,r2
    2738:	4025883a 	mov	r18,r8
    273c:	003f3106 	br	2404 <__alt_mem_onchip_memory+0xf7802404>
    2740:	008000c4 	movi	r2,3
    2744:	3880a626 	beq	r7,r2,29e0 <__divdf3+0x8cc>
    2748:	00800044 	movi	r2,1
    274c:	3880521e 	bne	r7,r2,2898 <__divdf3+0x784>
    2750:	b807883a 	mov	r3,r23
    2754:	0005883a 	mov	r2,zero
    2758:	000b883a 	mov	r5,zero
    275c:	0025883a 	mov	r18,zero
    2760:	003ecb06 	br	2290 <__alt_mem_onchip_memory+0xf7802290>
    2764:	00800434 	movhi	r2,16
    2768:	81400234 	orhi	r5,r16,8
    276c:	10bfffc4 	addi	r2,r2,-1
    2770:	a007883a 	mov	r3,r20
    2774:	288a703a 	and	r5,r5,r2
    2778:	003f2206 	br	2404 <__alt_mem_onchip_memory+0xf7802404>
    277c:	183fca26 	beq	r3,zero,26a8 <__alt_mem_onchip_memory+0xf78026a8>
    2780:	e5ef883a 	add	r23,fp,r23
    2784:	40bfffc4 	addi	r2,r8,-1
    2788:	bf00392e 	bgeu	r23,fp,2870 <__divdf3+0x75c>
    278c:	1011883a 	mov	r8,r2
    2790:	ba7fc41e 	bne	r23,r9,26a4 <__alt_mem_onchip_memory+0xf78026a4>
    2794:	b0ffc31e 	bne	r22,r3,26a4 <__alt_mem_onchip_memory+0xf78026a4>
    2798:	003fc306 	br	26a8 <__alt_mem_onchip_memory+0xf78026a8>
    279c:	143ff604 	addi	r16,r2,-40
    27a0:	9c20983a 	sll	r16,r19,r16
    27a4:	0025883a 	mov	r18,zero
    27a8:	003ee206 	br	2334 <__alt_mem_onchip_memory+0xf7802334>
    27ac:	d9800315 	stw	r6,12(sp)
    27b0:	d9c00215 	stw	r7,8(sp)
    27b4:	0003dbc0 	call	3dbc <__clzsi2>
    27b8:	10800804 	addi	r2,r2,32
    27bc:	d9c00217 	ldw	r7,8(sp)
    27c0:	d9800317 	ldw	r6,12(sp)
    27c4:	003ed106 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    27c8:	147ff604 	addi	r17,r2,-40
    27cc:	3462983a 	sll	r17,r6,r17
    27d0:	0011883a 	mov	r8,zero
    27d4:	003ef506 	br	23ac <__alt_mem_onchip_memory+0xf78023ac>
    27d8:	3009883a 	mov	r4,r6
    27dc:	d9800315 	stw	r6,12(sp)
    27e0:	da400115 	stw	r9,4(sp)
    27e4:	0003dbc0 	call	3dbc <__clzsi2>
    27e8:	10800804 	addi	r2,r2,32
    27ec:	da400117 	ldw	r9,4(sp)
    27f0:	d9800317 	ldw	r6,12(sp)
    27f4:	003ee306 	br	2384 <__alt_mem_onchip_memory+0xf7802384>
    27f8:	85a1883a 	add	r16,r16,r22
    27fc:	8585803a 	cmpltu	r2,r16,r22
    2800:	1705883a 	add	r2,r2,fp
    2804:	14a5883a 	add	r18,r2,r18
    2808:	88bfffc4 	addi	r2,r17,-1
    280c:	e4800c2e 	bgeu	fp,r18,2840 <__divdf3+0x72c>
    2810:	90c03e36 	bltu	r18,r3,290c <__divdf3+0x7f8>
    2814:	1c806926 	beq	r3,r18,29bc <__divdf3+0x8a8>
    2818:	90c7c83a 	sub	r3,r18,r3
    281c:	1023883a 	mov	r17,r2
    2820:	003f5206 	br	256c <__alt_mem_onchip_memory+0xf780256c>
    2824:	923f0436 	bltu	r18,r8,2438 <__alt_mem_onchip_memory+0xf7802438>
    2828:	800897fa 	slli	r4,r16,31
    282c:	9004d07a 	srli	r2,r18,1
    2830:	8006d07a 	srli	r3,r16,1
    2834:	902097fa 	slli	r16,r18,31
    2838:	20a4b03a 	or	r18,r4,r2
    283c:	003f0106 	br	2444 <__alt_mem_onchip_memory+0xf7802444>
    2840:	e4bff51e 	bne	fp,r18,2818 <__alt_mem_onchip_memory+0xf7802818>
    2844:	85bff22e 	bgeu	r16,r22,2810 <__alt_mem_onchip_memory+0xf7802810>
    2848:	e0c7c83a 	sub	r3,fp,r3
    284c:	1023883a 	mov	r17,r2
    2850:	003f4606 	br	256c <__alt_mem_onchip_memory+0xf780256c>
    2854:	100f883a 	mov	r7,r2
    2858:	003f2b06 	br	2508 <__alt_mem_onchip_memory+0xf7802508>
    285c:	180d883a 	mov	r6,r3
    2860:	003f1306 	br	24b0 <__alt_mem_onchip_memory+0xf78024b0>
    2864:	813fe436 	bltu	r16,r4,27f8 <__alt_mem_onchip_memory+0xf78027f8>
    2868:	0007883a 	mov	r3,zero
    286c:	003f3f06 	br	256c <__alt_mem_onchip_memory+0xf780256c>
    2870:	ba402c36 	bltu	r23,r9,2924 <__divdf3+0x810>
    2874:	4dc05426 	beq	r9,r23,29c8 <__divdf3+0x8b4>
    2878:	1011883a 	mov	r8,r2
    287c:	003f8906 	br	26a4 <__alt_mem_onchip_memory+0xf78026a4>
    2880:	023fffc4 	movi	r8,-1
    2884:	003f8806 	br	26a8 <__alt_mem_onchip_memory+0xf78026a8>
    2888:	1811883a 	mov	r8,r3
    288c:	003f5406 	br	25e0 <__alt_mem_onchip_memory+0xf78025e0>
    2890:	1025883a 	mov	r18,r2
    2894:	003f6d06 	br	264c <__alt_mem_onchip_memory+0xf780264c>
    2898:	b827883a 	mov	r19,r23
    289c:	003f8206 	br	26a8 <__alt_mem_onchip_memory+0xf78026a8>
    28a0:	010007c4 	movi	r4,31
    28a4:	20c02616 	blt	r4,r3,2940 <__divdf3+0x82c>
    28a8:	00800804 	movi	r2,32
    28ac:	10c5c83a 	sub	r2,r2,r3
    28b0:	888a983a 	sll	r5,r17,r2
    28b4:	40c8d83a 	srl	r4,r8,r3
    28b8:	4084983a 	sll	r2,r8,r2
    28bc:	88e2d83a 	srl	r17,r17,r3
    28c0:	2906b03a 	or	r3,r5,r4
    28c4:	1004c03a 	cmpne	r2,r2,zero
    28c8:	1886b03a 	or	r3,r3,r2
    28cc:	188001cc 	andi	r2,r3,7
    28d0:	10000726 	beq	r2,zero,28f0 <__divdf3+0x7dc>
    28d4:	188003cc 	andi	r2,r3,15
    28d8:	01000104 	movi	r4,4
    28dc:	11000426 	beq	r2,r4,28f0 <__divdf3+0x7dc>
    28e0:	1805883a 	mov	r2,r3
    28e4:	10c00104 	addi	r3,r2,4
    28e8:	1885803a 	cmpltu	r2,r3,r2
    28ec:	88a3883a 	add	r17,r17,r2
    28f0:	8880202c 	andhi	r2,r17,128
    28f4:	10002726 	beq	r2,zero,2994 <__divdf3+0x880>
    28f8:	98c0004c 	andi	r3,r19,1
    28fc:	00800044 	movi	r2,1
    2900:	000b883a 	mov	r5,zero
    2904:	0025883a 	mov	r18,zero
    2908:	003e6106 	br	2290 <__alt_mem_onchip_memory+0xf7802290>
    290c:	85a1883a 	add	r16,r16,r22
    2910:	8585803a 	cmpltu	r2,r16,r22
    2914:	1705883a 	add	r2,r2,fp
    2918:	14a5883a 	add	r18,r2,r18
    291c:	8c7fff84 	addi	r17,r17,-2
    2920:	003f1106 	br	2568 <__alt_mem_onchip_memory+0xf7802568>
    2924:	b589883a 	add	r4,r22,r22
    2928:	25ad803a 	cmpltu	r22,r4,r22
    292c:	b739883a 	add	fp,r22,fp
    2930:	40bfff84 	addi	r2,r8,-2
    2934:	bf2f883a 	add	r23,r23,fp
    2938:	202d883a 	mov	r22,r4
    293c:	003f9306 	br	278c <__alt_mem_onchip_memory+0xf780278c>
    2940:	013ff844 	movi	r4,-31
    2944:	2085c83a 	sub	r2,r4,r2
    2948:	8888d83a 	srl	r4,r17,r2
    294c:	00800804 	movi	r2,32
    2950:	18802126 	beq	r3,r2,29d8 <__divdf3+0x8c4>
    2954:	00801004 	movi	r2,64
    2958:	10c5c83a 	sub	r2,r2,r3
    295c:	8884983a 	sll	r2,r17,r2
    2960:	1204b03a 	or	r2,r2,r8
    2964:	1004c03a 	cmpne	r2,r2,zero
    2968:	2084b03a 	or	r2,r4,r2
    296c:	144001cc 	andi	r17,r2,7
    2970:	88000d1e 	bne	r17,zero,29a8 <__divdf3+0x894>
    2974:	000b883a 	mov	r5,zero
    2978:	1024d0fa 	srli	r18,r2,3
    297c:	98c0004c 	andi	r3,r19,1
    2980:	0005883a 	mov	r2,zero
    2984:	9464b03a 	or	r18,r18,r17
    2988:	003e4106 	br	2290 <__alt_mem_onchip_memory+0xf7802290>
    298c:	1007883a 	mov	r3,r2
    2990:	0023883a 	mov	r17,zero
    2994:	880a927a 	slli	r5,r17,9
    2998:	1805883a 	mov	r2,r3
    299c:	8822977a 	slli	r17,r17,29
    29a0:	280ad33a 	srli	r5,r5,12
    29a4:	003ff406 	br	2978 <__alt_mem_onchip_memory+0xf7802978>
    29a8:	10c003cc 	andi	r3,r2,15
    29ac:	01000104 	movi	r4,4
    29b0:	193ff626 	beq	r3,r4,298c <__alt_mem_onchip_memory+0xf780298c>
    29b4:	0023883a 	mov	r17,zero
    29b8:	003fca06 	br	28e4 <__alt_mem_onchip_memory+0xf78028e4>
    29bc:	813fd336 	bltu	r16,r4,290c <__alt_mem_onchip_memory+0xf780290c>
    29c0:	1023883a 	mov	r17,r2
    29c4:	003fa806 	br	2868 <__alt_mem_onchip_memory+0xf7802868>
    29c8:	b0ffd636 	bltu	r22,r3,2924 <__alt_mem_onchip_memory+0xf7802924>
    29cc:	1011883a 	mov	r8,r2
    29d0:	b0ff341e 	bne	r22,r3,26a4 <__alt_mem_onchip_memory+0xf78026a4>
    29d4:	003f3406 	br	26a8 <__alt_mem_onchip_memory+0xf78026a8>
    29d8:	0005883a 	mov	r2,zero
    29dc:	003fe006 	br	2960 <__alt_mem_onchip_memory+0xf7802960>
    29e0:	00800434 	movhi	r2,16
    29e4:	89400234 	orhi	r5,r17,8
    29e8:	10bfffc4 	addi	r2,r2,-1
    29ec:	b807883a 	mov	r3,r23
    29f0:	288a703a 	and	r5,r5,r2
    29f4:	4025883a 	mov	r18,r8
    29f8:	003e8206 	br	2404 <__alt_mem_onchip_memory+0xf7802404>

000029fc <__ledf2>:
    29fc:	2804d53a 	srli	r2,r5,20
    2a00:	3810d53a 	srli	r8,r7,20
    2a04:	00c00434 	movhi	r3,16
    2a08:	18ffffc4 	addi	r3,r3,-1
    2a0c:	1081ffcc 	andi	r2,r2,2047
    2a10:	0241ffc4 	movi	r9,2047
    2a14:	28d4703a 	and	r10,r5,r3
    2a18:	4201ffcc 	andi	r8,r8,2047
    2a1c:	38c6703a 	and	r3,r7,r3
    2a20:	280ad7fa 	srli	r5,r5,31
    2a24:	380ed7fa 	srli	r7,r7,31
    2a28:	12401f26 	beq	r2,r9,2aa8 <__ledf2+0xac>
    2a2c:	0241ffc4 	movi	r9,2047
    2a30:	42401426 	beq	r8,r9,2a84 <__ledf2+0x88>
    2a34:	1000091e 	bne	r2,zero,2a5c <__ledf2+0x60>
    2a38:	2296b03a 	or	r11,r4,r10
    2a3c:	5813003a 	cmpeq	r9,r11,zero
    2a40:	29403fcc 	andi	r5,r5,255
    2a44:	40000a1e 	bne	r8,zero,2a70 <__ledf2+0x74>
    2a48:	30d8b03a 	or	r12,r6,r3
    2a4c:	6000081e 	bne	r12,zero,2a70 <__ledf2+0x74>
    2a50:	0005883a 	mov	r2,zero
    2a54:	5800111e 	bne	r11,zero,2a9c <__ledf2+0xa0>
    2a58:	f800283a 	ret
    2a5c:	29403fcc 	andi	r5,r5,255
    2a60:	40000c1e 	bne	r8,zero,2a94 <__ledf2+0x98>
    2a64:	30d2b03a 	or	r9,r6,r3
    2a68:	48000c26 	beq	r9,zero,2a9c <__ledf2+0xa0>
    2a6c:	0013883a 	mov	r9,zero
    2a70:	39c03fcc 	andi	r7,r7,255
    2a74:	48000826 	beq	r9,zero,2a98 <__ledf2+0x9c>
    2a78:	38001126 	beq	r7,zero,2ac0 <__ledf2+0xc4>
    2a7c:	00800044 	movi	r2,1
    2a80:	f800283a 	ret
    2a84:	30d2b03a 	or	r9,r6,r3
    2a88:	483fea26 	beq	r9,zero,2a34 <__alt_mem_onchip_memory+0xf7802a34>
    2a8c:	00800084 	movi	r2,2
    2a90:	f800283a 	ret
    2a94:	39c03fcc 	andi	r7,r7,255
    2a98:	39400726 	beq	r7,r5,2ab8 <__ledf2+0xbc>
    2a9c:	2800081e 	bne	r5,zero,2ac0 <__ledf2+0xc4>
    2aa0:	00800044 	movi	r2,1
    2aa4:	f800283a 	ret
    2aa8:	2292b03a 	or	r9,r4,r10
    2aac:	483fdf26 	beq	r9,zero,2a2c <__alt_mem_onchip_memory+0xf7802a2c>
    2ab0:	00800084 	movi	r2,2
    2ab4:	f800283a 	ret
    2ab8:	4080030e 	bge	r8,r2,2ac8 <__ledf2+0xcc>
    2abc:	383fef26 	beq	r7,zero,2a7c <__alt_mem_onchip_memory+0xf7802a7c>
    2ac0:	00bfffc4 	movi	r2,-1
    2ac4:	f800283a 	ret
    2ac8:	123feb16 	blt	r2,r8,2a78 <__alt_mem_onchip_memory+0xf7802a78>
    2acc:	1abff336 	bltu	r3,r10,2a9c <__alt_mem_onchip_memory+0xf7802a9c>
    2ad0:	50c00326 	beq	r10,r3,2ae0 <__ledf2+0xe4>
    2ad4:	50c0042e 	bgeu	r10,r3,2ae8 <__ledf2+0xec>
    2ad8:	283fe81e 	bne	r5,zero,2a7c <__alt_mem_onchip_memory+0xf7802a7c>
    2adc:	003ff806 	br	2ac0 <__alt_mem_onchip_memory+0xf7802ac0>
    2ae0:	313fee36 	bltu	r6,r4,2a9c <__alt_mem_onchip_memory+0xf7802a9c>
    2ae4:	21bffc36 	bltu	r4,r6,2ad8 <__alt_mem_onchip_memory+0xf7802ad8>
    2ae8:	0005883a 	mov	r2,zero
    2aec:	f800283a 	ret

00002af0 <__muldf3>:
    2af0:	defff304 	addi	sp,sp,-52
    2af4:	2804d53a 	srli	r2,r5,20
    2af8:	dd800915 	stw	r22,36(sp)
    2afc:	282cd7fa 	srli	r22,r5,31
    2b00:	dc000315 	stw	r16,12(sp)
    2b04:	04000434 	movhi	r16,16
    2b08:	dd400815 	stw	r21,32(sp)
    2b0c:	dc800515 	stw	r18,20(sp)
    2b10:	843fffc4 	addi	r16,r16,-1
    2b14:	dfc00c15 	stw	ra,48(sp)
    2b18:	df000b15 	stw	fp,44(sp)
    2b1c:	ddc00a15 	stw	r23,40(sp)
    2b20:	dd000715 	stw	r20,28(sp)
    2b24:	dcc00615 	stw	r19,24(sp)
    2b28:	dc400415 	stw	r17,16(sp)
    2b2c:	1481ffcc 	andi	r18,r2,2047
    2b30:	2c20703a 	and	r16,r5,r16
    2b34:	b02b883a 	mov	r21,r22
    2b38:	b2403fcc 	andi	r9,r22,255
    2b3c:	90006026 	beq	r18,zero,2cc0 <__muldf3+0x1d0>
    2b40:	0081ffc4 	movi	r2,2047
    2b44:	2029883a 	mov	r20,r4
    2b48:	90803626 	beq	r18,r2,2c24 <__muldf3+0x134>
    2b4c:	80800434 	orhi	r2,r16,16
    2b50:	100490fa 	slli	r2,r2,3
    2b54:	2020d77a 	srli	r16,r4,29
    2b58:	202890fa 	slli	r20,r4,3
    2b5c:	94bf0044 	addi	r18,r18,-1023
    2b60:	80a0b03a 	or	r16,r16,r2
    2b64:	0027883a 	mov	r19,zero
    2b68:	0039883a 	mov	fp,zero
    2b6c:	3804d53a 	srli	r2,r7,20
    2b70:	382ed7fa 	srli	r23,r7,31
    2b74:	04400434 	movhi	r17,16
    2b78:	8c7fffc4 	addi	r17,r17,-1
    2b7c:	1081ffcc 	andi	r2,r2,2047
    2b80:	3011883a 	mov	r8,r6
    2b84:	3c62703a 	and	r17,r7,r17
    2b88:	ba803fcc 	andi	r10,r23,255
    2b8c:	10006d26 	beq	r2,zero,2d44 <__muldf3+0x254>
    2b90:	00c1ffc4 	movi	r3,2047
    2b94:	10c06526 	beq	r2,r3,2d2c <__muldf3+0x23c>
    2b98:	88c00434 	orhi	r3,r17,16
    2b9c:	180690fa 	slli	r3,r3,3
    2ba0:	3022d77a 	srli	r17,r6,29
    2ba4:	301090fa 	slli	r8,r6,3
    2ba8:	10bf0044 	addi	r2,r2,-1023
    2bac:	88e2b03a 	or	r17,r17,r3
    2bb0:	000b883a 	mov	r5,zero
    2bb4:	9085883a 	add	r2,r18,r2
    2bb8:	2cc8b03a 	or	r4,r5,r19
    2bbc:	00c003c4 	movi	r3,15
    2bc0:	bdacf03a 	xor	r22,r23,r22
    2bc4:	12c00044 	addi	r11,r2,1
    2bc8:	19009936 	bltu	r3,r4,2e30 <__muldf3+0x340>
    2bcc:	200890ba 	slli	r4,r4,2
    2bd0:	00c00034 	movhi	r3,0
    2bd4:	18caf904 	addi	r3,r3,11236
    2bd8:	20c9883a 	add	r4,r4,r3
    2bdc:	20c00017 	ldw	r3,0(r4)
    2be0:	1800683a 	jmp	r3
    2be4:	00002e30 	cmpltui	zero,zero,184
    2be8:	00002c44 	movi	zero,177
    2bec:	00002c44 	movi	zero,177
    2bf0:	00002c40 	call	2c4 <print_array+0x34>
    2bf4:	00002e0c 	andi	zero,zero,184
    2bf8:	00002e0c 	andi	zero,zero,184
    2bfc:	00002df4 	movhi	zero,183
    2c00:	00002c40 	call	2c4 <print_array+0x34>
    2c04:	00002e0c 	andi	zero,zero,184
    2c08:	00002df4 	movhi	zero,183
    2c0c:	00002e0c 	andi	zero,zero,184
    2c10:	00002c40 	call	2c4 <print_array+0x34>
    2c14:	00002e1c 	xori	zero,zero,184
    2c18:	00002e1c 	xori	zero,zero,184
    2c1c:	00002e1c 	xori	zero,zero,184
    2c20:	00003038 	rdprs	zero,zero,192
    2c24:	2404b03a 	or	r2,r4,r16
    2c28:	10006f1e 	bne	r2,zero,2de8 <__muldf3+0x2f8>
    2c2c:	04c00204 	movi	r19,8
    2c30:	0021883a 	mov	r16,zero
    2c34:	0029883a 	mov	r20,zero
    2c38:	07000084 	movi	fp,2
    2c3c:	003fcb06 	br	2b6c <__alt_mem_onchip_memory+0xf7802b6c>
    2c40:	502d883a 	mov	r22,r10
    2c44:	00800084 	movi	r2,2
    2c48:	28805726 	beq	r5,r2,2da8 <__muldf3+0x2b8>
    2c4c:	008000c4 	movi	r2,3
    2c50:	28816626 	beq	r5,r2,31ec <__muldf3+0x6fc>
    2c54:	00800044 	movi	r2,1
    2c58:	2881411e 	bne	r5,r2,3160 <__muldf3+0x670>
    2c5c:	b02b883a 	mov	r21,r22
    2c60:	0005883a 	mov	r2,zero
    2c64:	000b883a 	mov	r5,zero
    2c68:	0029883a 	mov	r20,zero
    2c6c:	1004953a 	slli	r2,r2,20
    2c70:	a8c03fcc 	andi	r3,r21,255
    2c74:	04400434 	movhi	r17,16
    2c78:	8c7fffc4 	addi	r17,r17,-1
    2c7c:	180697fa 	slli	r3,r3,31
    2c80:	2c4a703a 	and	r5,r5,r17
    2c84:	288ab03a 	or	r5,r5,r2
    2c88:	28c6b03a 	or	r3,r5,r3
    2c8c:	a005883a 	mov	r2,r20
    2c90:	dfc00c17 	ldw	ra,48(sp)
    2c94:	df000b17 	ldw	fp,44(sp)
    2c98:	ddc00a17 	ldw	r23,40(sp)
    2c9c:	dd800917 	ldw	r22,36(sp)
    2ca0:	dd400817 	ldw	r21,32(sp)
    2ca4:	dd000717 	ldw	r20,28(sp)
    2ca8:	dcc00617 	ldw	r19,24(sp)
    2cac:	dc800517 	ldw	r18,20(sp)
    2cb0:	dc400417 	ldw	r17,16(sp)
    2cb4:	dc000317 	ldw	r16,12(sp)
    2cb8:	dec00d04 	addi	sp,sp,52
    2cbc:	f800283a 	ret
    2cc0:	2404b03a 	or	r2,r4,r16
    2cc4:	2027883a 	mov	r19,r4
    2cc8:	10004226 	beq	r2,zero,2dd4 <__muldf3+0x2e4>
    2ccc:	8000fc26 	beq	r16,zero,30c0 <__muldf3+0x5d0>
    2cd0:	8009883a 	mov	r4,r16
    2cd4:	d9800215 	stw	r6,8(sp)
    2cd8:	d9c00015 	stw	r7,0(sp)
    2cdc:	da400115 	stw	r9,4(sp)
    2ce0:	0003dbc0 	call	3dbc <__clzsi2>
    2ce4:	d9800217 	ldw	r6,8(sp)
    2ce8:	d9c00017 	ldw	r7,0(sp)
    2cec:	da400117 	ldw	r9,4(sp)
    2cf0:	113ffd44 	addi	r4,r2,-11
    2cf4:	00c00704 	movi	r3,28
    2cf8:	1900ed16 	blt	r3,r4,30b0 <__muldf3+0x5c0>
    2cfc:	00c00744 	movi	r3,29
    2d00:	147ffe04 	addi	r17,r2,-8
    2d04:	1907c83a 	sub	r3,r3,r4
    2d08:	8460983a 	sll	r16,r16,r17
    2d0c:	98c6d83a 	srl	r3,r19,r3
    2d10:	9c68983a 	sll	r20,r19,r17
    2d14:	1c20b03a 	or	r16,r3,r16
    2d18:	1080fcc4 	addi	r2,r2,1011
    2d1c:	00a5c83a 	sub	r18,zero,r2
    2d20:	0027883a 	mov	r19,zero
    2d24:	0039883a 	mov	fp,zero
    2d28:	003f9006 	br	2b6c <__alt_mem_onchip_memory+0xf7802b6c>
    2d2c:	3446b03a 	or	r3,r6,r17
    2d30:	1800261e 	bne	r3,zero,2dcc <__muldf3+0x2dc>
    2d34:	0023883a 	mov	r17,zero
    2d38:	0011883a 	mov	r8,zero
    2d3c:	01400084 	movi	r5,2
    2d40:	003f9c06 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2d44:	3446b03a 	or	r3,r6,r17
    2d48:	18001c26 	beq	r3,zero,2dbc <__muldf3+0x2cc>
    2d4c:	8800ce26 	beq	r17,zero,3088 <__muldf3+0x598>
    2d50:	8809883a 	mov	r4,r17
    2d54:	d9800215 	stw	r6,8(sp)
    2d58:	da400115 	stw	r9,4(sp)
    2d5c:	da800015 	stw	r10,0(sp)
    2d60:	0003dbc0 	call	3dbc <__clzsi2>
    2d64:	d9800217 	ldw	r6,8(sp)
    2d68:	da400117 	ldw	r9,4(sp)
    2d6c:	da800017 	ldw	r10,0(sp)
    2d70:	113ffd44 	addi	r4,r2,-11
    2d74:	00c00704 	movi	r3,28
    2d78:	1900bf16 	blt	r3,r4,3078 <__muldf3+0x588>
    2d7c:	00c00744 	movi	r3,29
    2d80:	123ffe04 	addi	r8,r2,-8
    2d84:	1907c83a 	sub	r3,r3,r4
    2d88:	8a22983a 	sll	r17,r17,r8
    2d8c:	30c6d83a 	srl	r3,r6,r3
    2d90:	3210983a 	sll	r8,r6,r8
    2d94:	1c62b03a 	or	r17,r3,r17
    2d98:	1080fcc4 	addi	r2,r2,1011
    2d9c:	0085c83a 	sub	r2,zero,r2
    2da0:	000b883a 	mov	r5,zero
    2da4:	003f8306 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2da8:	b02b883a 	mov	r21,r22
    2dac:	0081ffc4 	movi	r2,2047
    2db0:	000b883a 	mov	r5,zero
    2db4:	0029883a 	mov	r20,zero
    2db8:	003fac06 	br	2c6c <__alt_mem_onchip_memory+0xf7802c6c>
    2dbc:	0023883a 	mov	r17,zero
    2dc0:	0011883a 	mov	r8,zero
    2dc4:	01400044 	movi	r5,1
    2dc8:	003f7a06 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2dcc:	014000c4 	movi	r5,3
    2dd0:	003f7806 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2dd4:	04c00104 	movi	r19,4
    2dd8:	0021883a 	mov	r16,zero
    2ddc:	0029883a 	mov	r20,zero
    2de0:	07000044 	movi	fp,1
    2de4:	003f6106 	br	2b6c <__alt_mem_onchip_memory+0xf7802b6c>
    2de8:	04c00304 	movi	r19,12
    2dec:	070000c4 	movi	fp,3
    2df0:	003f5e06 	br	2b6c <__alt_mem_onchip_memory+0xf7802b6c>
    2df4:	01400434 	movhi	r5,16
    2df8:	002b883a 	mov	r21,zero
    2dfc:	297fffc4 	addi	r5,r5,-1
    2e00:	053fffc4 	movi	r20,-1
    2e04:	0081ffc4 	movi	r2,2047
    2e08:	003f9806 	br	2c6c <__alt_mem_onchip_memory+0xf7802c6c>
    2e0c:	8023883a 	mov	r17,r16
    2e10:	a011883a 	mov	r8,r20
    2e14:	e00b883a 	mov	r5,fp
    2e18:	003f8a06 	br	2c44 <__alt_mem_onchip_memory+0xf7802c44>
    2e1c:	8023883a 	mov	r17,r16
    2e20:	a011883a 	mov	r8,r20
    2e24:	482d883a 	mov	r22,r9
    2e28:	e00b883a 	mov	r5,fp
    2e2c:	003f8506 	br	2c44 <__alt_mem_onchip_memory+0xf7802c44>
    2e30:	a00ad43a 	srli	r5,r20,16
    2e34:	401ad43a 	srli	r13,r8,16
    2e38:	a53fffcc 	andi	r20,r20,65535
    2e3c:	423fffcc 	andi	r8,r8,65535
    2e40:	4519383a 	mul	r12,r8,r20
    2e44:	4147383a 	mul	r3,r8,r5
    2e48:	6d09383a 	mul	r4,r13,r20
    2e4c:	600cd43a 	srli	r6,r12,16
    2e50:	2b5d383a 	mul	r14,r5,r13
    2e54:	20c9883a 	add	r4,r4,r3
    2e58:	310d883a 	add	r6,r6,r4
    2e5c:	30c0022e 	bgeu	r6,r3,2e68 <__muldf3+0x378>
    2e60:	00c00074 	movhi	r3,1
    2e64:	70dd883a 	add	r14,r14,r3
    2e68:	8826d43a 	srli	r19,r17,16
    2e6c:	8bffffcc 	andi	r15,r17,65535
    2e70:	7d23383a 	mul	r17,r15,r20
    2e74:	7949383a 	mul	r4,r15,r5
    2e78:	9d29383a 	mul	r20,r19,r20
    2e7c:	8814d43a 	srli	r10,r17,16
    2e80:	3012943a 	slli	r9,r6,16
    2e84:	a129883a 	add	r20,r20,r4
    2e88:	633fffcc 	andi	r12,r12,65535
    2e8c:	5515883a 	add	r10,r10,r20
    2e90:	3006d43a 	srli	r3,r6,16
    2e94:	4b13883a 	add	r9,r9,r12
    2e98:	2ccb383a 	mul	r5,r5,r19
    2e9c:	5100022e 	bgeu	r10,r4,2ea8 <__muldf3+0x3b8>
    2ea0:	01000074 	movhi	r4,1
    2ea4:	290b883a 	add	r5,r5,r4
    2ea8:	802ad43a 	srli	r21,r16,16
    2eac:	843fffcc 	andi	r16,r16,65535
    2eb0:	440d383a 	mul	r6,r8,r16
    2eb4:	4565383a 	mul	r18,r8,r21
    2eb8:	8349383a 	mul	r4,r16,r13
    2ebc:	500e943a 	slli	r7,r10,16
    2ec0:	3010d43a 	srli	r8,r6,16
    2ec4:	5028d43a 	srli	r20,r10,16
    2ec8:	2489883a 	add	r4,r4,r18
    2ecc:	8abfffcc 	andi	r10,r17,65535
    2ed0:	3a95883a 	add	r10,r7,r10
    2ed4:	4119883a 	add	r12,r8,r4
    2ed8:	a169883a 	add	r20,r20,r5
    2edc:	1a87883a 	add	r3,r3,r10
    2ee0:	6d5b383a 	mul	r13,r13,r21
    2ee4:	6480022e 	bgeu	r12,r18,2ef0 <__muldf3+0x400>
    2ee8:	01000074 	movhi	r4,1
    2eec:	691b883a 	add	r13,r13,r4
    2ef0:	7c25383a 	mul	r18,r15,r16
    2ef4:	7d4b383a 	mul	r5,r15,r21
    2ef8:	84cf383a 	mul	r7,r16,r19
    2efc:	901ed43a 	srli	r15,r18,16
    2f00:	6008d43a 	srli	r4,r12,16
    2f04:	6010943a 	slli	r8,r12,16
    2f08:	394f883a 	add	r7,r7,r5
    2f0c:	333fffcc 	andi	r12,r6,65535
    2f10:	79df883a 	add	r15,r15,r7
    2f14:	235b883a 	add	r13,r4,r13
    2f18:	9d63383a 	mul	r17,r19,r21
    2f1c:	4309883a 	add	r4,r8,r12
    2f20:	7940022e 	bgeu	r15,r5,2f2c <__muldf3+0x43c>
    2f24:	01400074 	movhi	r5,1
    2f28:	8963883a 	add	r17,r17,r5
    2f2c:	780a943a 	slli	r5,r15,16
    2f30:	91bfffcc 	andi	r6,r18,65535
    2f34:	70c7883a 	add	r3,r14,r3
    2f38:	298d883a 	add	r6,r5,r6
    2f3c:	1a8f803a 	cmpltu	r7,r3,r10
    2f40:	350b883a 	add	r5,r6,r20
    2f44:	20c7883a 	add	r3,r4,r3
    2f48:	3955883a 	add	r10,r7,r5
    2f4c:	1909803a 	cmpltu	r4,r3,r4
    2f50:	6a91883a 	add	r8,r13,r10
    2f54:	780cd43a 	srli	r6,r15,16
    2f58:	2219883a 	add	r12,r4,r8
    2f5c:	2d0b803a 	cmpltu	r5,r5,r20
    2f60:	51cf803a 	cmpltu	r7,r10,r7
    2f64:	29ceb03a 	or	r7,r5,r7
    2f68:	4351803a 	cmpltu	r8,r8,r13
    2f6c:	610b803a 	cmpltu	r5,r12,r4
    2f70:	4148b03a 	or	r4,r8,r5
    2f74:	398f883a 	add	r7,r7,r6
    2f78:	3909883a 	add	r4,r7,r4
    2f7c:	1810927a 	slli	r8,r3,9
    2f80:	2449883a 	add	r4,r4,r17
    2f84:	2008927a 	slli	r4,r4,9
    2f88:	6022d5fa 	srli	r17,r12,23
    2f8c:	1806d5fa 	srli	r3,r3,23
    2f90:	4252b03a 	or	r9,r8,r9
    2f94:	600a927a 	slli	r5,r12,9
    2f98:	4810c03a 	cmpne	r8,r9,zero
    2f9c:	2462b03a 	or	r17,r4,r17
    2fa0:	40c6b03a 	or	r3,r8,r3
    2fa4:	8900402c 	andhi	r4,r17,256
    2fa8:	1950b03a 	or	r8,r3,r5
    2fac:	20000726 	beq	r4,zero,2fcc <__muldf3+0x4dc>
    2fb0:	4006d07a 	srli	r3,r8,1
    2fb4:	880497fa 	slli	r2,r17,31
    2fb8:	4200004c 	andi	r8,r8,1
    2fbc:	8822d07a 	srli	r17,r17,1
    2fc0:	1a10b03a 	or	r8,r3,r8
    2fc4:	1210b03a 	or	r8,r2,r8
    2fc8:	5805883a 	mov	r2,r11
    2fcc:	1140ffc4 	addi	r5,r2,1023
    2fd0:	0140440e 	bge	zero,r5,30e4 <__muldf3+0x5f4>
    2fd4:	40c001cc 	andi	r3,r8,7
    2fd8:	18000726 	beq	r3,zero,2ff8 <__muldf3+0x508>
    2fdc:	40c003cc 	andi	r3,r8,15
    2fe0:	01000104 	movi	r4,4
    2fe4:	19000426 	beq	r3,r4,2ff8 <__muldf3+0x508>
    2fe8:	4107883a 	add	r3,r8,r4
    2fec:	1a11803a 	cmpltu	r8,r3,r8
    2ff0:	8a23883a 	add	r17,r17,r8
    2ff4:	1811883a 	mov	r8,r3
    2ff8:	88c0402c 	andhi	r3,r17,256
    2ffc:	18000426 	beq	r3,zero,3010 <__muldf3+0x520>
    3000:	11410004 	addi	r5,r2,1024
    3004:	00bfc034 	movhi	r2,65280
    3008:	10bfffc4 	addi	r2,r2,-1
    300c:	88a2703a 	and	r17,r17,r2
    3010:	0081ff84 	movi	r2,2046
    3014:	117f6416 	blt	r2,r5,2da8 <__alt_mem_onchip_memory+0xf7802da8>
    3018:	8828977a 	slli	r20,r17,29
    301c:	4010d0fa 	srli	r8,r8,3
    3020:	8822927a 	slli	r17,r17,9
    3024:	2881ffcc 	andi	r2,r5,2047
    3028:	a228b03a 	or	r20,r20,r8
    302c:	880ad33a 	srli	r5,r17,12
    3030:	b02b883a 	mov	r21,r22
    3034:	003f0d06 	br	2c6c <__alt_mem_onchip_memory+0xf7802c6c>
    3038:	8080022c 	andhi	r2,r16,8
    303c:	10000926 	beq	r2,zero,3064 <__muldf3+0x574>
    3040:	8880022c 	andhi	r2,r17,8
    3044:	1000071e 	bne	r2,zero,3064 <__muldf3+0x574>
    3048:	00800434 	movhi	r2,16
    304c:	89400234 	orhi	r5,r17,8
    3050:	10bfffc4 	addi	r2,r2,-1
    3054:	b82b883a 	mov	r21,r23
    3058:	288a703a 	and	r5,r5,r2
    305c:	4029883a 	mov	r20,r8
    3060:	003f6806 	br	2e04 <__alt_mem_onchip_memory+0xf7802e04>
    3064:	00800434 	movhi	r2,16
    3068:	81400234 	orhi	r5,r16,8
    306c:	10bfffc4 	addi	r2,r2,-1
    3070:	288a703a 	and	r5,r5,r2
    3074:	003f6306 	br	2e04 <__alt_mem_onchip_memory+0xf7802e04>
    3078:	147ff604 	addi	r17,r2,-40
    307c:	3462983a 	sll	r17,r6,r17
    3080:	0011883a 	mov	r8,zero
    3084:	003f4406 	br	2d98 <__alt_mem_onchip_memory+0xf7802d98>
    3088:	3009883a 	mov	r4,r6
    308c:	d9800215 	stw	r6,8(sp)
    3090:	da400115 	stw	r9,4(sp)
    3094:	da800015 	stw	r10,0(sp)
    3098:	0003dbc0 	call	3dbc <__clzsi2>
    309c:	10800804 	addi	r2,r2,32
    30a0:	da800017 	ldw	r10,0(sp)
    30a4:	da400117 	ldw	r9,4(sp)
    30a8:	d9800217 	ldw	r6,8(sp)
    30ac:	003f3006 	br	2d70 <__alt_mem_onchip_memory+0xf7802d70>
    30b0:	143ff604 	addi	r16,r2,-40
    30b4:	9c20983a 	sll	r16,r19,r16
    30b8:	0029883a 	mov	r20,zero
    30bc:	003f1606 	br	2d18 <__alt_mem_onchip_memory+0xf7802d18>
    30c0:	d9800215 	stw	r6,8(sp)
    30c4:	d9c00015 	stw	r7,0(sp)
    30c8:	da400115 	stw	r9,4(sp)
    30cc:	0003dbc0 	call	3dbc <__clzsi2>
    30d0:	10800804 	addi	r2,r2,32
    30d4:	da400117 	ldw	r9,4(sp)
    30d8:	d9c00017 	ldw	r7,0(sp)
    30dc:	d9800217 	ldw	r6,8(sp)
    30e0:	003f0306 	br	2cf0 <__alt_mem_onchip_memory+0xf7802cf0>
    30e4:	00c00044 	movi	r3,1
    30e8:	1947c83a 	sub	r3,r3,r5
    30ec:	00800e04 	movi	r2,56
    30f0:	10feda16 	blt	r2,r3,2c5c <__alt_mem_onchip_memory+0xf7802c5c>
    30f4:	008007c4 	movi	r2,31
    30f8:	10c01b16 	blt	r2,r3,3168 <__muldf3+0x678>
    30fc:	00800804 	movi	r2,32
    3100:	10c5c83a 	sub	r2,r2,r3
    3104:	888a983a 	sll	r5,r17,r2
    3108:	40c8d83a 	srl	r4,r8,r3
    310c:	4084983a 	sll	r2,r8,r2
    3110:	88e2d83a 	srl	r17,r17,r3
    3114:	2906b03a 	or	r3,r5,r4
    3118:	1004c03a 	cmpne	r2,r2,zero
    311c:	1886b03a 	or	r3,r3,r2
    3120:	188001cc 	andi	r2,r3,7
    3124:	10000726 	beq	r2,zero,3144 <__muldf3+0x654>
    3128:	188003cc 	andi	r2,r3,15
    312c:	01000104 	movi	r4,4
    3130:	11000426 	beq	r2,r4,3144 <__muldf3+0x654>
    3134:	1805883a 	mov	r2,r3
    3138:	10c00104 	addi	r3,r2,4
    313c:	1885803a 	cmpltu	r2,r3,r2
    3140:	88a3883a 	add	r17,r17,r2
    3144:	8880202c 	andhi	r2,r17,128
    3148:	10001c26 	beq	r2,zero,31bc <__muldf3+0x6cc>
    314c:	b02b883a 	mov	r21,r22
    3150:	00800044 	movi	r2,1
    3154:	000b883a 	mov	r5,zero
    3158:	0029883a 	mov	r20,zero
    315c:	003ec306 	br	2c6c <__alt_mem_onchip_memory+0xf7802c6c>
    3160:	5805883a 	mov	r2,r11
    3164:	003f9906 	br	2fcc <__alt_mem_onchip_memory+0xf7802fcc>
    3168:	00bff844 	movi	r2,-31
    316c:	1145c83a 	sub	r2,r2,r5
    3170:	8888d83a 	srl	r4,r17,r2
    3174:	00800804 	movi	r2,32
    3178:	18801a26 	beq	r3,r2,31e4 <__muldf3+0x6f4>
    317c:	00801004 	movi	r2,64
    3180:	10c5c83a 	sub	r2,r2,r3
    3184:	8884983a 	sll	r2,r17,r2
    3188:	1204b03a 	or	r2,r2,r8
    318c:	1004c03a 	cmpne	r2,r2,zero
    3190:	2084b03a 	or	r2,r4,r2
    3194:	144001cc 	andi	r17,r2,7
    3198:	88000d1e 	bne	r17,zero,31d0 <__muldf3+0x6e0>
    319c:	000b883a 	mov	r5,zero
    31a0:	1028d0fa 	srli	r20,r2,3
    31a4:	b02b883a 	mov	r21,r22
    31a8:	0005883a 	mov	r2,zero
    31ac:	a468b03a 	or	r20,r20,r17
    31b0:	003eae06 	br	2c6c <__alt_mem_onchip_memory+0xf7802c6c>
    31b4:	1007883a 	mov	r3,r2
    31b8:	0023883a 	mov	r17,zero
    31bc:	880a927a 	slli	r5,r17,9
    31c0:	1805883a 	mov	r2,r3
    31c4:	8822977a 	slli	r17,r17,29
    31c8:	280ad33a 	srli	r5,r5,12
    31cc:	003ff406 	br	31a0 <__alt_mem_onchip_memory+0xf78031a0>
    31d0:	10c003cc 	andi	r3,r2,15
    31d4:	01000104 	movi	r4,4
    31d8:	193ff626 	beq	r3,r4,31b4 <__alt_mem_onchip_memory+0xf78031b4>
    31dc:	0023883a 	mov	r17,zero
    31e0:	003fd506 	br	3138 <__alt_mem_onchip_memory+0xf7803138>
    31e4:	0005883a 	mov	r2,zero
    31e8:	003fe706 	br	3188 <__alt_mem_onchip_memory+0xf7803188>
    31ec:	00800434 	movhi	r2,16
    31f0:	89400234 	orhi	r5,r17,8
    31f4:	10bfffc4 	addi	r2,r2,-1
    31f8:	b02b883a 	mov	r21,r22
    31fc:	288a703a 	and	r5,r5,r2
    3200:	4029883a 	mov	r20,r8
    3204:	003eff06 	br	2e04 <__alt_mem_onchip_memory+0xf7802e04>

00003208 <__subdf3>:
    3208:	02000434 	movhi	r8,16
    320c:	423fffc4 	addi	r8,r8,-1
    3210:	defffb04 	addi	sp,sp,-20
    3214:	2a14703a 	and	r10,r5,r8
    3218:	3812d53a 	srli	r9,r7,20
    321c:	3a10703a 	and	r8,r7,r8
    3220:	2006d77a 	srli	r3,r4,29
    3224:	3004d77a 	srli	r2,r6,29
    3228:	dc000015 	stw	r16,0(sp)
    322c:	501490fa 	slli	r10,r10,3
    3230:	2820d53a 	srli	r16,r5,20
    3234:	401090fa 	slli	r8,r8,3
    3238:	dc800215 	stw	r18,8(sp)
    323c:	dc400115 	stw	r17,4(sp)
    3240:	dfc00415 	stw	ra,16(sp)
    3244:	202290fa 	slli	r17,r4,3
    3248:	dcc00315 	stw	r19,12(sp)
    324c:	4a41ffcc 	andi	r9,r9,2047
    3250:	0101ffc4 	movi	r4,2047
    3254:	2824d7fa 	srli	r18,r5,31
    3258:	8401ffcc 	andi	r16,r16,2047
    325c:	50c6b03a 	or	r3,r10,r3
    3260:	380ed7fa 	srli	r7,r7,31
    3264:	408ab03a 	or	r5,r8,r2
    3268:	300c90fa 	slli	r6,r6,3
    326c:	49009626 	beq	r9,r4,34c8 <__subdf3+0x2c0>
    3270:	39c0005c 	xori	r7,r7,1
    3274:	8245c83a 	sub	r2,r16,r9
    3278:	3c807426 	beq	r7,r18,344c <__subdf3+0x244>
    327c:	0080af0e 	bge	zero,r2,353c <__subdf3+0x334>
    3280:	48002a1e 	bne	r9,zero,332c <__subdf3+0x124>
    3284:	2988b03a 	or	r4,r5,r6
    3288:	20009a1e 	bne	r4,zero,34f4 <__subdf3+0x2ec>
    328c:	888001cc 	andi	r2,r17,7
    3290:	10000726 	beq	r2,zero,32b0 <__subdf3+0xa8>
    3294:	888003cc 	andi	r2,r17,15
    3298:	01000104 	movi	r4,4
    329c:	11000426 	beq	r2,r4,32b0 <__subdf3+0xa8>
    32a0:	890b883a 	add	r5,r17,r4
    32a4:	2c63803a 	cmpltu	r17,r5,r17
    32a8:	1c47883a 	add	r3,r3,r17
    32ac:	2823883a 	mov	r17,r5
    32b0:	1880202c 	andhi	r2,r3,128
    32b4:	10005926 	beq	r2,zero,341c <__subdf3+0x214>
    32b8:	84000044 	addi	r16,r16,1
    32bc:	0081ffc4 	movi	r2,2047
    32c0:	8080be26 	beq	r16,r2,35bc <__subdf3+0x3b4>
    32c4:	017fe034 	movhi	r5,65408
    32c8:	297fffc4 	addi	r5,r5,-1
    32cc:	1946703a 	and	r3,r3,r5
    32d0:	1804977a 	slli	r2,r3,29
    32d4:	1806927a 	slli	r3,r3,9
    32d8:	8822d0fa 	srli	r17,r17,3
    32dc:	8401ffcc 	andi	r16,r16,2047
    32e0:	180ad33a 	srli	r5,r3,12
    32e4:	9100004c 	andi	r4,r18,1
    32e8:	1444b03a 	or	r2,r2,r17
    32ec:	80c1ffcc 	andi	r3,r16,2047
    32f0:	1820953a 	slli	r16,r3,20
    32f4:	20c03fcc 	andi	r3,r4,255
    32f8:	180897fa 	slli	r4,r3,31
    32fc:	00c00434 	movhi	r3,16
    3300:	18ffffc4 	addi	r3,r3,-1
    3304:	28c6703a 	and	r3,r5,r3
    3308:	1c06b03a 	or	r3,r3,r16
    330c:	1906b03a 	or	r3,r3,r4
    3310:	dfc00417 	ldw	ra,16(sp)
    3314:	dcc00317 	ldw	r19,12(sp)
    3318:	dc800217 	ldw	r18,8(sp)
    331c:	dc400117 	ldw	r17,4(sp)
    3320:	dc000017 	ldw	r16,0(sp)
    3324:	dec00504 	addi	sp,sp,20
    3328:	f800283a 	ret
    332c:	0101ffc4 	movi	r4,2047
    3330:	813fd626 	beq	r16,r4,328c <__alt_mem_onchip_memory+0xf780328c>
    3334:	29402034 	orhi	r5,r5,128
    3338:	01000e04 	movi	r4,56
    333c:	2080a316 	blt	r4,r2,35cc <__subdf3+0x3c4>
    3340:	010007c4 	movi	r4,31
    3344:	2080c616 	blt	r4,r2,3660 <__subdf3+0x458>
    3348:	01000804 	movi	r4,32
    334c:	2089c83a 	sub	r4,r4,r2
    3350:	2910983a 	sll	r8,r5,r4
    3354:	308ed83a 	srl	r7,r6,r2
    3358:	3108983a 	sll	r4,r6,r4
    335c:	2884d83a 	srl	r2,r5,r2
    3360:	41ccb03a 	or	r6,r8,r7
    3364:	2008c03a 	cmpne	r4,r4,zero
    3368:	310cb03a 	or	r6,r6,r4
    336c:	898dc83a 	sub	r6,r17,r6
    3370:	89a3803a 	cmpltu	r17,r17,r6
    3374:	1887c83a 	sub	r3,r3,r2
    3378:	1c47c83a 	sub	r3,r3,r17
    337c:	3023883a 	mov	r17,r6
    3380:	1880202c 	andhi	r2,r3,128
    3384:	10002326 	beq	r2,zero,3414 <__subdf3+0x20c>
    3388:	04c02034 	movhi	r19,128
    338c:	9cffffc4 	addi	r19,r19,-1
    3390:	1ce6703a 	and	r19,r3,r19
    3394:	98007a26 	beq	r19,zero,3580 <__subdf3+0x378>
    3398:	9809883a 	mov	r4,r19
    339c:	0003dbc0 	call	3dbc <__clzsi2>
    33a0:	113ffe04 	addi	r4,r2,-8
    33a4:	00c007c4 	movi	r3,31
    33a8:	19007b16 	blt	r3,r4,3598 <__subdf3+0x390>
    33ac:	00800804 	movi	r2,32
    33b0:	1105c83a 	sub	r2,r2,r4
    33b4:	8884d83a 	srl	r2,r17,r2
    33b8:	9906983a 	sll	r3,r19,r4
    33bc:	8922983a 	sll	r17,r17,r4
    33c0:	10c4b03a 	or	r2,r2,r3
    33c4:	24007816 	blt	r4,r16,35a8 <__subdf3+0x3a0>
    33c8:	2421c83a 	sub	r16,r4,r16
    33cc:	80c00044 	addi	r3,r16,1
    33d0:	010007c4 	movi	r4,31
    33d4:	20c09516 	blt	r4,r3,362c <__subdf3+0x424>
    33d8:	01400804 	movi	r5,32
    33dc:	28cbc83a 	sub	r5,r5,r3
    33e0:	88c8d83a 	srl	r4,r17,r3
    33e4:	8962983a 	sll	r17,r17,r5
    33e8:	114a983a 	sll	r5,r2,r5
    33ec:	10c6d83a 	srl	r3,r2,r3
    33f0:	8804c03a 	cmpne	r2,r17,zero
    33f4:	290ab03a 	or	r5,r5,r4
    33f8:	28a2b03a 	or	r17,r5,r2
    33fc:	0021883a 	mov	r16,zero
    3400:	003fa206 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3404:	2090b03a 	or	r8,r4,r2
    3408:	40018e26 	beq	r8,zero,3a44 <__subdf3+0x83c>
    340c:	1007883a 	mov	r3,r2
    3410:	2023883a 	mov	r17,r4
    3414:	888001cc 	andi	r2,r17,7
    3418:	103f9e1e 	bne	r2,zero,3294 <__alt_mem_onchip_memory+0xf7803294>
    341c:	1804977a 	slli	r2,r3,29
    3420:	8822d0fa 	srli	r17,r17,3
    3424:	1810d0fa 	srli	r8,r3,3
    3428:	9100004c 	andi	r4,r18,1
    342c:	1444b03a 	or	r2,r2,r17
    3430:	00c1ffc4 	movi	r3,2047
    3434:	80c02826 	beq	r16,r3,34d8 <__subdf3+0x2d0>
    3438:	01400434 	movhi	r5,16
    343c:	297fffc4 	addi	r5,r5,-1
    3440:	80e0703a 	and	r16,r16,r3
    3444:	414a703a 	and	r5,r8,r5
    3448:	003fa806 	br	32ec <__alt_mem_onchip_memory+0xf78032ec>
    344c:	0080630e 	bge	zero,r2,35dc <__subdf3+0x3d4>
    3450:	48003026 	beq	r9,zero,3514 <__subdf3+0x30c>
    3454:	0101ffc4 	movi	r4,2047
    3458:	813f8c26 	beq	r16,r4,328c <__alt_mem_onchip_memory+0xf780328c>
    345c:	29402034 	orhi	r5,r5,128
    3460:	01000e04 	movi	r4,56
    3464:	2080a90e 	bge	r4,r2,370c <__subdf3+0x504>
    3468:	298cb03a 	or	r6,r5,r6
    346c:	3012c03a 	cmpne	r9,r6,zero
    3470:	0005883a 	mov	r2,zero
    3474:	4c53883a 	add	r9,r9,r17
    3478:	4c63803a 	cmpltu	r17,r9,r17
    347c:	10c7883a 	add	r3,r2,r3
    3480:	88c7883a 	add	r3,r17,r3
    3484:	4823883a 	mov	r17,r9
    3488:	1880202c 	andhi	r2,r3,128
    348c:	1000d026 	beq	r2,zero,37d0 <__subdf3+0x5c8>
    3490:	84000044 	addi	r16,r16,1
    3494:	0081ffc4 	movi	r2,2047
    3498:	8080fe26 	beq	r16,r2,3894 <__subdf3+0x68c>
    349c:	00bfe034 	movhi	r2,65408
    34a0:	10bfffc4 	addi	r2,r2,-1
    34a4:	1886703a 	and	r3,r3,r2
    34a8:	880ad07a 	srli	r5,r17,1
    34ac:	180497fa 	slli	r2,r3,31
    34b0:	8900004c 	andi	r4,r17,1
    34b4:	2922b03a 	or	r17,r5,r4
    34b8:	1806d07a 	srli	r3,r3,1
    34bc:	1462b03a 	or	r17,r2,r17
    34c0:	3825883a 	mov	r18,r7
    34c4:	003f7106 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    34c8:	2984b03a 	or	r2,r5,r6
    34cc:	103f6826 	beq	r2,zero,3270 <__alt_mem_onchip_memory+0xf7803270>
    34d0:	39c03fcc 	andi	r7,r7,255
    34d4:	003f6706 	br	3274 <__alt_mem_onchip_memory+0xf7803274>
    34d8:	4086b03a 	or	r3,r8,r2
    34dc:	18015226 	beq	r3,zero,3a28 <__subdf3+0x820>
    34e0:	00c00434 	movhi	r3,16
    34e4:	41400234 	orhi	r5,r8,8
    34e8:	18ffffc4 	addi	r3,r3,-1
    34ec:	28ca703a 	and	r5,r5,r3
    34f0:	003f7e06 	br	32ec <__alt_mem_onchip_memory+0xf78032ec>
    34f4:	10bfffc4 	addi	r2,r2,-1
    34f8:	1000491e 	bne	r2,zero,3620 <__subdf3+0x418>
    34fc:	898fc83a 	sub	r7,r17,r6
    3500:	89e3803a 	cmpltu	r17,r17,r7
    3504:	1947c83a 	sub	r3,r3,r5
    3508:	1c47c83a 	sub	r3,r3,r17
    350c:	3823883a 	mov	r17,r7
    3510:	003f9b06 	br	3380 <__alt_mem_onchip_memory+0xf7803380>
    3514:	2988b03a 	or	r4,r5,r6
    3518:	203f5c26 	beq	r4,zero,328c <__alt_mem_onchip_memory+0xf780328c>
    351c:	10bfffc4 	addi	r2,r2,-1
    3520:	1000931e 	bne	r2,zero,3770 <__subdf3+0x568>
    3524:	898d883a 	add	r6,r17,r6
    3528:	3463803a 	cmpltu	r17,r6,r17
    352c:	1947883a 	add	r3,r3,r5
    3530:	88c7883a 	add	r3,r17,r3
    3534:	3023883a 	mov	r17,r6
    3538:	003fd306 	br	3488 <__alt_mem_onchip_memory+0xf7803488>
    353c:	1000541e 	bne	r2,zero,3690 <__subdf3+0x488>
    3540:	80800044 	addi	r2,r16,1
    3544:	1081ffcc 	andi	r2,r2,2047
    3548:	01000044 	movi	r4,1
    354c:	2080a20e 	bge	r4,r2,37d8 <__subdf3+0x5d0>
    3550:	8989c83a 	sub	r4,r17,r6
    3554:	8905803a 	cmpltu	r2,r17,r4
    3558:	1967c83a 	sub	r19,r3,r5
    355c:	98a7c83a 	sub	r19,r19,r2
    3560:	9880202c 	andhi	r2,r19,128
    3564:	10006326 	beq	r2,zero,36f4 <__subdf3+0x4ec>
    3568:	3463c83a 	sub	r17,r6,r17
    356c:	28c7c83a 	sub	r3,r5,r3
    3570:	344d803a 	cmpltu	r6,r6,r17
    3574:	19a7c83a 	sub	r19,r3,r6
    3578:	3825883a 	mov	r18,r7
    357c:	983f861e 	bne	r19,zero,3398 <__alt_mem_onchip_memory+0xf7803398>
    3580:	8809883a 	mov	r4,r17
    3584:	0003dbc0 	call	3dbc <__clzsi2>
    3588:	10800804 	addi	r2,r2,32
    358c:	113ffe04 	addi	r4,r2,-8
    3590:	00c007c4 	movi	r3,31
    3594:	193f850e 	bge	r3,r4,33ac <__alt_mem_onchip_memory+0xf78033ac>
    3598:	10bff604 	addi	r2,r2,-40
    359c:	8884983a 	sll	r2,r17,r2
    35a0:	0023883a 	mov	r17,zero
    35a4:	243f880e 	bge	r4,r16,33c8 <__alt_mem_onchip_memory+0xf78033c8>
    35a8:	00ffe034 	movhi	r3,65408
    35ac:	18ffffc4 	addi	r3,r3,-1
    35b0:	8121c83a 	sub	r16,r16,r4
    35b4:	10c6703a 	and	r3,r2,r3
    35b8:	003f3406 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    35bc:	9100004c 	andi	r4,r18,1
    35c0:	000b883a 	mov	r5,zero
    35c4:	0005883a 	mov	r2,zero
    35c8:	003f4806 	br	32ec <__alt_mem_onchip_memory+0xf78032ec>
    35cc:	298cb03a 	or	r6,r5,r6
    35d0:	300cc03a 	cmpne	r6,r6,zero
    35d4:	0005883a 	mov	r2,zero
    35d8:	003f6406 	br	336c <__alt_mem_onchip_memory+0xf780336c>
    35dc:	10009a1e 	bne	r2,zero,3848 <__subdf3+0x640>
    35e0:	82400044 	addi	r9,r16,1
    35e4:	4881ffcc 	andi	r2,r9,2047
    35e8:	02800044 	movi	r10,1
    35ec:	5080670e 	bge	r10,r2,378c <__subdf3+0x584>
    35f0:	0081ffc4 	movi	r2,2047
    35f4:	4880af26 	beq	r9,r2,38b4 <__subdf3+0x6ac>
    35f8:	898d883a 	add	r6,r17,r6
    35fc:	1945883a 	add	r2,r3,r5
    3600:	3447803a 	cmpltu	r3,r6,r17
    3604:	1887883a 	add	r3,r3,r2
    3608:	182297fa 	slli	r17,r3,31
    360c:	300cd07a 	srli	r6,r6,1
    3610:	1806d07a 	srli	r3,r3,1
    3614:	4821883a 	mov	r16,r9
    3618:	89a2b03a 	or	r17,r17,r6
    361c:	003f1b06 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3620:	0101ffc4 	movi	r4,2047
    3624:	813f441e 	bne	r16,r4,3338 <__alt_mem_onchip_memory+0xf7803338>
    3628:	003f1806 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    362c:	843ff844 	addi	r16,r16,-31
    3630:	01400804 	movi	r5,32
    3634:	1408d83a 	srl	r4,r2,r16
    3638:	19405026 	beq	r3,r5,377c <__subdf3+0x574>
    363c:	01401004 	movi	r5,64
    3640:	28c7c83a 	sub	r3,r5,r3
    3644:	10c4983a 	sll	r2,r2,r3
    3648:	88a2b03a 	or	r17,r17,r2
    364c:	8822c03a 	cmpne	r17,r17,zero
    3650:	2462b03a 	or	r17,r4,r17
    3654:	0007883a 	mov	r3,zero
    3658:	0021883a 	mov	r16,zero
    365c:	003f6d06 	br	3414 <__alt_mem_onchip_memory+0xf7803414>
    3660:	11fff804 	addi	r7,r2,-32
    3664:	01000804 	movi	r4,32
    3668:	29ced83a 	srl	r7,r5,r7
    366c:	11004526 	beq	r2,r4,3784 <__subdf3+0x57c>
    3670:	01001004 	movi	r4,64
    3674:	2089c83a 	sub	r4,r4,r2
    3678:	2904983a 	sll	r2,r5,r4
    367c:	118cb03a 	or	r6,r2,r6
    3680:	300cc03a 	cmpne	r6,r6,zero
    3684:	398cb03a 	or	r6,r7,r6
    3688:	0005883a 	mov	r2,zero
    368c:	003f3706 	br	336c <__alt_mem_onchip_memory+0xf780336c>
    3690:	80002a26 	beq	r16,zero,373c <__subdf3+0x534>
    3694:	0101ffc4 	movi	r4,2047
    3698:	49006626 	beq	r9,r4,3834 <__subdf3+0x62c>
    369c:	0085c83a 	sub	r2,zero,r2
    36a0:	18c02034 	orhi	r3,r3,128
    36a4:	01000e04 	movi	r4,56
    36a8:	20807e16 	blt	r4,r2,38a4 <__subdf3+0x69c>
    36ac:	010007c4 	movi	r4,31
    36b0:	2080e716 	blt	r4,r2,3a50 <__subdf3+0x848>
    36b4:	01000804 	movi	r4,32
    36b8:	2089c83a 	sub	r4,r4,r2
    36bc:	1914983a 	sll	r10,r3,r4
    36c0:	8890d83a 	srl	r8,r17,r2
    36c4:	8908983a 	sll	r4,r17,r4
    36c8:	1884d83a 	srl	r2,r3,r2
    36cc:	5222b03a 	or	r17,r10,r8
    36d0:	2006c03a 	cmpne	r3,r4,zero
    36d4:	88e2b03a 	or	r17,r17,r3
    36d8:	3463c83a 	sub	r17,r6,r17
    36dc:	2885c83a 	sub	r2,r5,r2
    36e0:	344d803a 	cmpltu	r6,r6,r17
    36e4:	1187c83a 	sub	r3,r2,r6
    36e8:	4821883a 	mov	r16,r9
    36ec:	3825883a 	mov	r18,r7
    36f0:	003f2306 	br	3380 <__alt_mem_onchip_memory+0xf7803380>
    36f4:	24d0b03a 	or	r8,r4,r19
    36f8:	40001b1e 	bne	r8,zero,3768 <__subdf3+0x560>
    36fc:	0005883a 	mov	r2,zero
    3700:	0009883a 	mov	r4,zero
    3704:	0021883a 	mov	r16,zero
    3708:	003f4906 	br	3430 <__alt_mem_onchip_memory+0xf7803430>
    370c:	010007c4 	movi	r4,31
    3710:	20803a16 	blt	r4,r2,37fc <__subdf3+0x5f4>
    3714:	01000804 	movi	r4,32
    3718:	2089c83a 	sub	r4,r4,r2
    371c:	2912983a 	sll	r9,r5,r4
    3720:	3090d83a 	srl	r8,r6,r2
    3724:	3108983a 	sll	r4,r6,r4
    3728:	2884d83a 	srl	r2,r5,r2
    372c:	4a12b03a 	or	r9,r9,r8
    3730:	2008c03a 	cmpne	r4,r4,zero
    3734:	4912b03a 	or	r9,r9,r4
    3738:	003f4e06 	br	3474 <__alt_mem_onchip_memory+0xf7803474>
    373c:	1c48b03a 	or	r4,r3,r17
    3740:	20003c26 	beq	r4,zero,3834 <__subdf3+0x62c>
    3744:	0084303a 	nor	r2,zero,r2
    3748:	1000381e 	bne	r2,zero,382c <__subdf3+0x624>
    374c:	3463c83a 	sub	r17,r6,r17
    3750:	28c5c83a 	sub	r2,r5,r3
    3754:	344d803a 	cmpltu	r6,r6,r17
    3758:	1187c83a 	sub	r3,r2,r6
    375c:	4821883a 	mov	r16,r9
    3760:	3825883a 	mov	r18,r7
    3764:	003f0606 	br	3380 <__alt_mem_onchip_memory+0xf7803380>
    3768:	2023883a 	mov	r17,r4
    376c:	003f0906 	br	3394 <__alt_mem_onchip_memory+0xf7803394>
    3770:	0101ffc4 	movi	r4,2047
    3774:	813f3a1e 	bne	r16,r4,3460 <__alt_mem_onchip_memory+0xf7803460>
    3778:	003ec406 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    377c:	0005883a 	mov	r2,zero
    3780:	003fb106 	br	3648 <__alt_mem_onchip_memory+0xf7803648>
    3784:	0005883a 	mov	r2,zero
    3788:	003fbc06 	br	367c <__alt_mem_onchip_memory+0xf780367c>
    378c:	1c44b03a 	or	r2,r3,r17
    3790:	80008e1e 	bne	r16,zero,39cc <__subdf3+0x7c4>
    3794:	1000c826 	beq	r2,zero,3ab8 <__subdf3+0x8b0>
    3798:	2984b03a 	or	r2,r5,r6
    379c:	103ebb26 	beq	r2,zero,328c <__alt_mem_onchip_memory+0xf780328c>
    37a0:	8989883a 	add	r4,r17,r6
    37a4:	1945883a 	add	r2,r3,r5
    37a8:	2447803a 	cmpltu	r3,r4,r17
    37ac:	1887883a 	add	r3,r3,r2
    37b0:	1880202c 	andhi	r2,r3,128
    37b4:	2023883a 	mov	r17,r4
    37b8:	103f1626 	beq	r2,zero,3414 <__alt_mem_onchip_memory+0xf7803414>
    37bc:	00bfe034 	movhi	r2,65408
    37c0:	10bfffc4 	addi	r2,r2,-1
    37c4:	5021883a 	mov	r16,r10
    37c8:	1886703a 	and	r3,r3,r2
    37cc:	003eaf06 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    37d0:	3825883a 	mov	r18,r7
    37d4:	003f0f06 	br	3414 <__alt_mem_onchip_memory+0xf7803414>
    37d8:	1c44b03a 	or	r2,r3,r17
    37dc:	8000251e 	bne	r16,zero,3874 <__subdf3+0x66c>
    37e0:	1000661e 	bne	r2,zero,397c <__subdf3+0x774>
    37e4:	2990b03a 	or	r8,r5,r6
    37e8:	40009626 	beq	r8,zero,3a44 <__subdf3+0x83c>
    37ec:	2807883a 	mov	r3,r5
    37f0:	3023883a 	mov	r17,r6
    37f4:	3825883a 	mov	r18,r7
    37f8:	003ea406 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    37fc:	127ff804 	addi	r9,r2,-32
    3800:	01000804 	movi	r4,32
    3804:	2a52d83a 	srl	r9,r5,r9
    3808:	11008c26 	beq	r2,r4,3a3c <__subdf3+0x834>
    380c:	01001004 	movi	r4,64
    3810:	2085c83a 	sub	r2,r4,r2
    3814:	2884983a 	sll	r2,r5,r2
    3818:	118cb03a 	or	r6,r2,r6
    381c:	300cc03a 	cmpne	r6,r6,zero
    3820:	4992b03a 	or	r9,r9,r6
    3824:	0005883a 	mov	r2,zero
    3828:	003f1206 	br	3474 <__alt_mem_onchip_memory+0xf7803474>
    382c:	0101ffc4 	movi	r4,2047
    3830:	493f9c1e 	bne	r9,r4,36a4 <__alt_mem_onchip_memory+0xf78036a4>
    3834:	2807883a 	mov	r3,r5
    3838:	3023883a 	mov	r17,r6
    383c:	4821883a 	mov	r16,r9
    3840:	3825883a 	mov	r18,r7
    3844:	003e9106 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3848:	80001f1e 	bne	r16,zero,38c8 <__subdf3+0x6c0>
    384c:	1c48b03a 	or	r4,r3,r17
    3850:	20005a26 	beq	r4,zero,39bc <__subdf3+0x7b4>
    3854:	0084303a 	nor	r2,zero,r2
    3858:	1000561e 	bne	r2,zero,39b4 <__subdf3+0x7ac>
    385c:	89a3883a 	add	r17,r17,r6
    3860:	1945883a 	add	r2,r3,r5
    3864:	898d803a 	cmpltu	r6,r17,r6
    3868:	3087883a 	add	r3,r6,r2
    386c:	4821883a 	mov	r16,r9
    3870:	003f0506 	br	3488 <__alt_mem_onchip_memory+0xf7803488>
    3874:	10002b1e 	bne	r2,zero,3924 <__subdf3+0x71c>
    3878:	2984b03a 	or	r2,r5,r6
    387c:	10008026 	beq	r2,zero,3a80 <__subdf3+0x878>
    3880:	2807883a 	mov	r3,r5
    3884:	3023883a 	mov	r17,r6
    3888:	3825883a 	mov	r18,r7
    388c:	0401ffc4 	movi	r16,2047
    3890:	003e7e06 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3894:	3809883a 	mov	r4,r7
    3898:	0011883a 	mov	r8,zero
    389c:	0005883a 	mov	r2,zero
    38a0:	003ee306 	br	3430 <__alt_mem_onchip_memory+0xf7803430>
    38a4:	1c62b03a 	or	r17,r3,r17
    38a8:	8822c03a 	cmpne	r17,r17,zero
    38ac:	0005883a 	mov	r2,zero
    38b0:	003f8906 	br	36d8 <__alt_mem_onchip_memory+0xf78036d8>
    38b4:	3809883a 	mov	r4,r7
    38b8:	4821883a 	mov	r16,r9
    38bc:	0011883a 	mov	r8,zero
    38c0:	0005883a 	mov	r2,zero
    38c4:	003eda06 	br	3430 <__alt_mem_onchip_memory+0xf7803430>
    38c8:	0101ffc4 	movi	r4,2047
    38cc:	49003b26 	beq	r9,r4,39bc <__subdf3+0x7b4>
    38d0:	0085c83a 	sub	r2,zero,r2
    38d4:	18c02034 	orhi	r3,r3,128
    38d8:	01000e04 	movi	r4,56
    38dc:	20806e16 	blt	r4,r2,3a98 <__subdf3+0x890>
    38e0:	010007c4 	movi	r4,31
    38e4:	20807716 	blt	r4,r2,3ac4 <__subdf3+0x8bc>
    38e8:	01000804 	movi	r4,32
    38ec:	2089c83a 	sub	r4,r4,r2
    38f0:	1914983a 	sll	r10,r3,r4
    38f4:	8890d83a 	srl	r8,r17,r2
    38f8:	8908983a 	sll	r4,r17,r4
    38fc:	1884d83a 	srl	r2,r3,r2
    3900:	5222b03a 	or	r17,r10,r8
    3904:	2006c03a 	cmpne	r3,r4,zero
    3908:	88e2b03a 	or	r17,r17,r3
    390c:	89a3883a 	add	r17,r17,r6
    3910:	1145883a 	add	r2,r2,r5
    3914:	898d803a 	cmpltu	r6,r17,r6
    3918:	3087883a 	add	r3,r6,r2
    391c:	4821883a 	mov	r16,r9
    3920:	003ed906 	br	3488 <__alt_mem_onchip_memory+0xf7803488>
    3924:	2984b03a 	or	r2,r5,r6
    3928:	10004226 	beq	r2,zero,3a34 <__subdf3+0x82c>
    392c:	1808d0fa 	srli	r4,r3,3
    3930:	8822d0fa 	srli	r17,r17,3
    3934:	1806977a 	slli	r3,r3,29
    3938:	2080022c 	andhi	r2,r4,8
    393c:	1c62b03a 	or	r17,r3,r17
    3940:	10000826 	beq	r2,zero,3964 <__subdf3+0x75c>
    3944:	2812d0fa 	srli	r9,r5,3
    3948:	4880022c 	andhi	r2,r9,8
    394c:	1000051e 	bne	r2,zero,3964 <__subdf3+0x75c>
    3950:	300cd0fa 	srli	r6,r6,3
    3954:	2804977a 	slli	r2,r5,29
    3958:	4809883a 	mov	r4,r9
    395c:	3825883a 	mov	r18,r7
    3960:	11a2b03a 	or	r17,r2,r6
    3964:	8806d77a 	srli	r3,r17,29
    3968:	200890fa 	slli	r4,r4,3
    396c:	882290fa 	slli	r17,r17,3
    3970:	0401ffc4 	movi	r16,2047
    3974:	1906b03a 	or	r3,r3,r4
    3978:	003e4406 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    397c:	2984b03a 	or	r2,r5,r6
    3980:	103e4226 	beq	r2,zero,328c <__alt_mem_onchip_memory+0xf780328c>
    3984:	8989c83a 	sub	r4,r17,r6
    3988:	8911803a 	cmpltu	r8,r17,r4
    398c:	1945c83a 	sub	r2,r3,r5
    3990:	1205c83a 	sub	r2,r2,r8
    3994:	1200202c 	andhi	r8,r2,128
    3998:	403e9a26 	beq	r8,zero,3404 <__alt_mem_onchip_memory+0xf7803404>
    399c:	3463c83a 	sub	r17,r6,r17
    39a0:	28c5c83a 	sub	r2,r5,r3
    39a4:	344d803a 	cmpltu	r6,r6,r17
    39a8:	1187c83a 	sub	r3,r2,r6
    39ac:	3825883a 	mov	r18,r7
    39b0:	003e3606 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    39b4:	0101ffc4 	movi	r4,2047
    39b8:	493fc71e 	bne	r9,r4,38d8 <__alt_mem_onchip_memory+0xf78038d8>
    39bc:	2807883a 	mov	r3,r5
    39c0:	3023883a 	mov	r17,r6
    39c4:	4821883a 	mov	r16,r9
    39c8:	003e3006 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    39cc:	10003626 	beq	r2,zero,3aa8 <__subdf3+0x8a0>
    39d0:	2984b03a 	or	r2,r5,r6
    39d4:	10001726 	beq	r2,zero,3a34 <__subdf3+0x82c>
    39d8:	1808d0fa 	srli	r4,r3,3
    39dc:	8822d0fa 	srli	r17,r17,3
    39e0:	1806977a 	slli	r3,r3,29
    39e4:	2080022c 	andhi	r2,r4,8
    39e8:	1c62b03a 	or	r17,r3,r17
    39ec:	10000726 	beq	r2,zero,3a0c <__subdf3+0x804>
    39f0:	2812d0fa 	srli	r9,r5,3
    39f4:	4880022c 	andhi	r2,r9,8
    39f8:	1000041e 	bne	r2,zero,3a0c <__subdf3+0x804>
    39fc:	300cd0fa 	srli	r6,r6,3
    3a00:	2804977a 	slli	r2,r5,29
    3a04:	4809883a 	mov	r4,r9
    3a08:	11a2b03a 	or	r17,r2,r6
    3a0c:	8806d77a 	srli	r3,r17,29
    3a10:	200890fa 	slli	r4,r4,3
    3a14:	882290fa 	slli	r17,r17,3
    3a18:	3825883a 	mov	r18,r7
    3a1c:	1906b03a 	or	r3,r3,r4
    3a20:	0401ffc4 	movi	r16,2047
    3a24:	003e1906 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3a28:	000b883a 	mov	r5,zero
    3a2c:	0005883a 	mov	r2,zero
    3a30:	003e2e06 	br	32ec <__alt_mem_onchip_memory+0xf78032ec>
    3a34:	0401ffc4 	movi	r16,2047
    3a38:	003e1406 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3a3c:	0005883a 	mov	r2,zero
    3a40:	003f7506 	br	3818 <__alt_mem_onchip_memory+0xf7803818>
    3a44:	0005883a 	mov	r2,zero
    3a48:	0009883a 	mov	r4,zero
    3a4c:	003e7806 	br	3430 <__alt_mem_onchip_memory+0xf7803430>
    3a50:	123ff804 	addi	r8,r2,-32
    3a54:	01000804 	movi	r4,32
    3a58:	1a10d83a 	srl	r8,r3,r8
    3a5c:	11002526 	beq	r2,r4,3af4 <__subdf3+0x8ec>
    3a60:	01001004 	movi	r4,64
    3a64:	2085c83a 	sub	r2,r4,r2
    3a68:	1884983a 	sll	r2,r3,r2
    3a6c:	1444b03a 	or	r2,r2,r17
    3a70:	1004c03a 	cmpne	r2,r2,zero
    3a74:	40a2b03a 	or	r17,r8,r2
    3a78:	0005883a 	mov	r2,zero
    3a7c:	003f1606 	br	36d8 <__alt_mem_onchip_memory+0xf78036d8>
    3a80:	02000434 	movhi	r8,16
    3a84:	0009883a 	mov	r4,zero
    3a88:	423fffc4 	addi	r8,r8,-1
    3a8c:	00bfffc4 	movi	r2,-1
    3a90:	0401ffc4 	movi	r16,2047
    3a94:	003e6606 	br	3430 <__alt_mem_onchip_memory+0xf7803430>
    3a98:	1c62b03a 	or	r17,r3,r17
    3a9c:	8822c03a 	cmpne	r17,r17,zero
    3aa0:	0005883a 	mov	r2,zero
    3aa4:	003f9906 	br	390c <__alt_mem_onchip_memory+0xf780390c>
    3aa8:	2807883a 	mov	r3,r5
    3aac:	3023883a 	mov	r17,r6
    3ab0:	0401ffc4 	movi	r16,2047
    3ab4:	003df506 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3ab8:	2807883a 	mov	r3,r5
    3abc:	3023883a 	mov	r17,r6
    3ac0:	003df206 	br	328c <__alt_mem_onchip_memory+0xf780328c>
    3ac4:	123ff804 	addi	r8,r2,-32
    3ac8:	01000804 	movi	r4,32
    3acc:	1a10d83a 	srl	r8,r3,r8
    3ad0:	11000a26 	beq	r2,r4,3afc <__subdf3+0x8f4>
    3ad4:	01001004 	movi	r4,64
    3ad8:	2085c83a 	sub	r2,r4,r2
    3adc:	1884983a 	sll	r2,r3,r2
    3ae0:	1444b03a 	or	r2,r2,r17
    3ae4:	1004c03a 	cmpne	r2,r2,zero
    3ae8:	40a2b03a 	or	r17,r8,r2
    3aec:	0005883a 	mov	r2,zero
    3af0:	003f8606 	br	390c <__alt_mem_onchip_memory+0xf780390c>
    3af4:	0005883a 	mov	r2,zero
    3af8:	003fdc06 	br	3a6c <__alt_mem_onchip_memory+0xf7803a6c>
    3afc:	0005883a 	mov	r2,zero
    3b00:	003ff706 	br	3ae0 <__alt_mem_onchip_memory+0xf7803ae0>

00003b04 <__extendsfdf2>:
    3b04:	200ad5fa 	srli	r5,r4,23
    3b08:	defffd04 	addi	sp,sp,-12
    3b0c:	dc400115 	stw	r17,4(sp)
    3b10:	29403fcc 	andi	r5,r5,255
    3b14:	29800044 	addi	r6,r5,1
    3b18:	04402034 	movhi	r17,128
    3b1c:	dc000015 	stw	r16,0(sp)
    3b20:	8c7fffc4 	addi	r17,r17,-1
    3b24:	dfc00215 	stw	ra,8(sp)
    3b28:	31803fcc 	andi	r6,r6,255
    3b2c:	00800044 	movi	r2,1
    3b30:	8922703a 	and	r17,r17,r4
    3b34:	2020d7fa 	srli	r16,r4,31
    3b38:	1180110e 	bge	r2,r6,3b80 <__extendsfdf2+0x7c>
    3b3c:	880cd0fa 	srli	r6,r17,3
    3b40:	8822977a 	slli	r17,r17,29
    3b44:	2940e004 	addi	r5,r5,896
    3b48:	2941ffcc 	andi	r5,r5,2047
    3b4c:	2804953a 	slli	r2,r5,20
    3b50:	01400434 	movhi	r5,16
    3b54:	800697fa 	slli	r3,r16,31
    3b58:	297fffc4 	addi	r5,r5,-1
    3b5c:	314a703a 	and	r5,r6,r5
    3b60:	288ab03a 	or	r5,r5,r2
    3b64:	28c6b03a 	or	r3,r5,r3
    3b68:	8805883a 	mov	r2,r17
    3b6c:	dfc00217 	ldw	ra,8(sp)
    3b70:	dc400117 	ldw	r17,4(sp)
    3b74:	dc000017 	ldw	r16,0(sp)
    3b78:	dec00304 	addi	sp,sp,12
    3b7c:	f800283a 	ret
    3b80:	2800111e 	bne	r5,zero,3bc8 <__extendsfdf2+0xc4>
    3b84:	88001c26 	beq	r17,zero,3bf8 <__extendsfdf2+0xf4>
    3b88:	8809883a 	mov	r4,r17
    3b8c:	0003dbc0 	call	3dbc <__clzsi2>
    3b90:	00c00284 	movi	r3,10
    3b94:	18801b16 	blt	r3,r2,3c04 <__extendsfdf2+0x100>
    3b98:	018002c4 	movi	r6,11
    3b9c:	308dc83a 	sub	r6,r6,r2
    3ba0:	11000544 	addi	r4,r2,21
    3ba4:	8986d83a 	srl	r3,r17,r6
    3ba8:	8922983a 	sll	r17,r17,r4
    3bac:	0180e244 	movi	r6,905
    3bb0:	01400434 	movhi	r5,16
    3bb4:	3085c83a 	sub	r2,r6,r2
    3bb8:	297fffc4 	addi	r5,r5,-1
    3bbc:	194c703a 	and	r6,r3,r5
    3bc0:	1141ffcc 	andi	r5,r2,2047
    3bc4:	003fe006 	br	3b48 <__alt_mem_onchip_memory+0xf7803b48>
    3bc8:	88000826 	beq	r17,zero,3bec <__extendsfdf2+0xe8>
    3bcc:	880cd0fa 	srli	r6,r17,3
    3bd0:	00800434 	movhi	r2,16
    3bd4:	10bfffc4 	addi	r2,r2,-1
    3bd8:	31800234 	orhi	r6,r6,8
    3bdc:	8822977a 	slli	r17,r17,29
    3be0:	308c703a 	and	r6,r6,r2
    3be4:	0141ffc4 	movi	r5,2047
    3be8:	003fd706 	br	3b48 <__alt_mem_onchip_memory+0xf7803b48>
    3bec:	0141ffc4 	movi	r5,2047
    3bf0:	000d883a 	mov	r6,zero
    3bf4:	003fd406 	br	3b48 <__alt_mem_onchip_memory+0xf7803b48>
    3bf8:	000b883a 	mov	r5,zero
    3bfc:	000d883a 	mov	r6,zero
    3c00:	003fd106 	br	3b48 <__alt_mem_onchip_memory+0xf7803b48>
    3c04:	11bffd44 	addi	r6,r2,-11
    3c08:	8986983a 	sll	r3,r17,r6
    3c0c:	0023883a 	mov	r17,zero
    3c10:	003fe606 	br	3bac <__alt_mem_onchip_memory+0xf7803bac>

00003c14 <__truncdfsf2>:
    3c14:	2810d53a 	srli	r8,r5,20
    3c18:	01c00434 	movhi	r7,16
    3c1c:	39ffffc4 	addi	r7,r7,-1
    3c20:	29ce703a 	and	r7,r5,r7
    3c24:	4201ffcc 	andi	r8,r8,2047
    3c28:	380e90fa 	slli	r7,r7,3
    3c2c:	200cd77a 	srli	r6,r4,29
    3c30:	42400044 	addi	r9,r8,1
    3c34:	4a41ffcc 	andi	r9,r9,2047
    3c38:	00c00044 	movi	r3,1
    3c3c:	280ad7fa 	srli	r5,r5,31
    3c40:	31ceb03a 	or	r7,r6,r7
    3c44:	200490fa 	slli	r2,r4,3
    3c48:	1a40230e 	bge	r3,r9,3cd8 <__truncdfsf2+0xc4>
    3c4c:	40ff2004 	addi	r3,r8,-896
    3c50:	01803f84 	movi	r6,254
    3c54:	30c01516 	blt	r6,r3,3cac <__truncdfsf2+0x98>
    3c58:	00c0380e 	bge	zero,r3,3d3c <__truncdfsf2+0x128>
    3c5c:	200c91ba 	slli	r6,r4,6
    3c60:	380e90fa 	slli	r7,r7,3
    3c64:	1004d77a 	srli	r2,r2,29
    3c68:	300cc03a 	cmpne	r6,r6,zero
    3c6c:	31ccb03a 	or	r6,r6,r7
    3c70:	308cb03a 	or	r6,r6,r2
    3c74:	308001cc 	andi	r2,r6,7
    3c78:	10000426 	beq	r2,zero,3c8c <__truncdfsf2+0x78>
    3c7c:	308003cc 	andi	r2,r6,15
    3c80:	01000104 	movi	r4,4
    3c84:	11000126 	beq	r2,r4,3c8c <__truncdfsf2+0x78>
    3c88:	31800104 	addi	r6,r6,4
    3c8c:	3081002c 	andhi	r2,r6,1024
    3c90:	10001626 	beq	r2,zero,3cec <__truncdfsf2+0xd8>
    3c94:	18c00044 	addi	r3,r3,1
    3c98:	00803fc4 	movi	r2,255
    3c9c:	18800326 	beq	r3,r2,3cac <__truncdfsf2+0x98>
    3ca0:	300c91ba 	slli	r6,r6,6
    3ca4:	300cd27a 	srli	r6,r6,9
    3ca8:	00000206 	br	3cb4 <__truncdfsf2+0xa0>
    3cac:	00ffffc4 	movi	r3,-1
    3cb0:	000d883a 	mov	r6,zero
    3cb4:	18c03fcc 	andi	r3,r3,255
    3cb8:	180895fa 	slli	r4,r3,23
    3cbc:	00c02034 	movhi	r3,128
    3cc0:	280a97fa 	slli	r5,r5,31
    3cc4:	18ffffc4 	addi	r3,r3,-1
    3cc8:	30c6703a 	and	r3,r6,r3
    3ccc:	1906b03a 	or	r3,r3,r4
    3cd0:	1944b03a 	or	r2,r3,r5
    3cd4:	f800283a 	ret
    3cd8:	40000b1e 	bne	r8,zero,3d08 <__truncdfsf2+0xf4>
    3cdc:	388cb03a 	or	r6,r7,r2
    3ce0:	0007883a 	mov	r3,zero
    3ce4:	30000426 	beq	r6,zero,3cf8 <__truncdfsf2+0xe4>
    3ce8:	01800144 	movi	r6,5
    3cec:	00803fc4 	movi	r2,255
    3cf0:	300cd0fa 	srli	r6,r6,3
    3cf4:	18800a26 	beq	r3,r2,3d20 <__truncdfsf2+0x10c>
    3cf8:	00802034 	movhi	r2,128
    3cfc:	10bfffc4 	addi	r2,r2,-1
    3d00:	308c703a 	and	r6,r6,r2
    3d04:	003feb06 	br	3cb4 <__alt_mem_onchip_memory+0xf7803cb4>
    3d08:	3888b03a 	or	r4,r7,r2
    3d0c:	203fe726 	beq	r4,zero,3cac <__alt_mem_onchip_memory+0xf7803cac>
    3d10:	380c90fa 	slli	r6,r7,3
    3d14:	00c03fc4 	movi	r3,255
    3d18:	31808034 	orhi	r6,r6,512
    3d1c:	003fd506 	br	3c74 <__alt_mem_onchip_memory+0xf7803c74>
    3d20:	303fe226 	beq	r6,zero,3cac <__alt_mem_onchip_memory+0xf7803cac>
    3d24:	00802034 	movhi	r2,128
    3d28:	31801034 	orhi	r6,r6,64
    3d2c:	10bfffc4 	addi	r2,r2,-1
    3d30:	00ffffc4 	movi	r3,-1
    3d34:	308c703a 	and	r6,r6,r2
    3d38:	003fde06 	br	3cb4 <__alt_mem_onchip_memory+0xf7803cb4>
    3d3c:	013ffa44 	movi	r4,-23
    3d40:	19000e16 	blt	r3,r4,3d7c <__truncdfsf2+0x168>
    3d44:	01000784 	movi	r4,30
    3d48:	20c9c83a 	sub	r4,r4,r3
    3d4c:	018007c4 	movi	r6,31
    3d50:	39c02034 	orhi	r7,r7,128
    3d54:	31000b16 	blt	r6,r4,3d84 <__truncdfsf2+0x170>
    3d58:	423f2084 	addi	r8,r8,-894
    3d5c:	120c983a 	sll	r6,r2,r8
    3d60:	3a0e983a 	sll	r7,r7,r8
    3d64:	1104d83a 	srl	r2,r2,r4
    3d68:	300cc03a 	cmpne	r6,r6,zero
    3d6c:	31ceb03a 	or	r7,r6,r7
    3d70:	388cb03a 	or	r6,r7,r2
    3d74:	0007883a 	mov	r3,zero
    3d78:	003fbe06 	br	3c74 <__alt_mem_onchip_memory+0xf7803c74>
    3d7c:	0007883a 	mov	r3,zero
    3d80:	003fd906 	br	3ce8 <__alt_mem_onchip_memory+0xf7803ce8>
    3d84:	01bfff84 	movi	r6,-2
    3d88:	30cdc83a 	sub	r6,r6,r3
    3d8c:	00c00804 	movi	r3,32
    3d90:	398cd83a 	srl	r6,r7,r6
    3d94:	20c00726 	beq	r4,r3,3db4 <__truncdfsf2+0x1a0>
    3d98:	423f2884 	addi	r8,r8,-862
    3d9c:	3a0e983a 	sll	r7,r7,r8
    3da0:	3884b03a 	or	r2,r7,r2
    3da4:	1004c03a 	cmpne	r2,r2,zero
    3da8:	118cb03a 	or	r6,r2,r6
    3dac:	0007883a 	mov	r3,zero
    3db0:	003fb006 	br	3c74 <__alt_mem_onchip_memory+0xf7803c74>
    3db4:	000f883a 	mov	r7,zero
    3db8:	003ff906 	br	3da0 <__alt_mem_onchip_memory+0xf7803da0>

00003dbc <__clzsi2>:
    3dbc:	00bfffd4 	movui	r2,65535
    3dc0:	11000536 	bltu	r2,r4,3dd8 <__clzsi2+0x1c>
    3dc4:	00803fc4 	movi	r2,255
    3dc8:	11000f36 	bltu	r2,r4,3e08 <__clzsi2+0x4c>
    3dcc:	00800804 	movi	r2,32
    3dd0:	0007883a 	mov	r3,zero
    3dd4:	00000506 	br	3dec <__clzsi2+0x30>
    3dd8:	00804034 	movhi	r2,256
    3ddc:	10bfffc4 	addi	r2,r2,-1
    3de0:	11000c2e 	bgeu	r2,r4,3e14 <__clzsi2+0x58>
    3de4:	00800204 	movi	r2,8
    3de8:	00c00604 	movi	r3,24
    3dec:	20c8d83a 	srl	r4,r4,r3
    3df0:	00c00074 	movhi	r3,1
    3df4:	18c58e44 	addi	r3,r3,5689
    3df8:	1909883a 	add	r4,r3,r4
    3dfc:	20c00003 	ldbu	r3,0(r4)
    3e00:	10c5c83a 	sub	r2,r2,r3
    3e04:	f800283a 	ret
    3e08:	00800604 	movi	r2,24
    3e0c:	00c00204 	movi	r3,8
    3e10:	003ff606 	br	3dec <__alt_mem_onchip_memory+0xf7803dec>
    3e14:	00800404 	movi	r2,16
    3e18:	1007883a 	mov	r3,r2
    3e1c:	003ff306 	br	3dec <__alt_mem_onchip_memory+0xf7803dec>

00003e20 <__divsi3>:
    3e20:	20001b16 	blt	r4,zero,3e90 <__divsi3+0x70>
    3e24:	000f883a 	mov	r7,zero
    3e28:	28001616 	blt	r5,zero,3e84 <__divsi3+0x64>
    3e2c:	200d883a 	mov	r6,r4
    3e30:	29001a2e 	bgeu	r5,r4,3e9c <__divsi3+0x7c>
    3e34:	00800804 	movi	r2,32
    3e38:	00c00044 	movi	r3,1
    3e3c:	00000106 	br	3e44 <__divsi3+0x24>
    3e40:	10000d26 	beq	r2,zero,3e78 <__divsi3+0x58>
    3e44:	294b883a 	add	r5,r5,r5
    3e48:	10bfffc4 	addi	r2,r2,-1
    3e4c:	18c7883a 	add	r3,r3,r3
    3e50:	293ffb36 	bltu	r5,r4,3e40 <__alt_mem_onchip_memory+0xf7803e40>
    3e54:	0005883a 	mov	r2,zero
    3e58:	18000726 	beq	r3,zero,3e78 <__divsi3+0x58>
    3e5c:	0005883a 	mov	r2,zero
    3e60:	31400236 	bltu	r6,r5,3e6c <__divsi3+0x4c>
    3e64:	314dc83a 	sub	r6,r6,r5
    3e68:	10c4b03a 	or	r2,r2,r3
    3e6c:	1806d07a 	srli	r3,r3,1
    3e70:	280ad07a 	srli	r5,r5,1
    3e74:	183ffa1e 	bne	r3,zero,3e60 <__alt_mem_onchip_memory+0xf7803e60>
    3e78:	38000126 	beq	r7,zero,3e80 <__divsi3+0x60>
    3e7c:	0085c83a 	sub	r2,zero,r2
    3e80:	f800283a 	ret
    3e84:	014bc83a 	sub	r5,zero,r5
    3e88:	39c0005c 	xori	r7,r7,1
    3e8c:	003fe706 	br	3e2c <__alt_mem_onchip_memory+0xf7803e2c>
    3e90:	0109c83a 	sub	r4,zero,r4
    3e94:	01c00044 	movi	r7,1
    3e98:	003fe306 	br	3e28 <__alt_mem_onchip_memory+0xf7803e28>
    3e9c:	00c00044 	movi	r3,1
    3ea0:	003fee06 	br	3e5c <__alt_mem_onchip_memory+0xf7803e5c>

00003ea4 <__modsi3>:
    3ea4:	20001716 	blt	r4,zero,3f04 <__modsi3+0x60>
    3ea8:	000f883a 	mov	r7,zero
    3eac:	2005883a 	mov	r2,r4
    3eb0:	28001216 	blt	r5,zero,3efc <__modsi3+0x58>
    3eb4:	2900162e 	bgeu	r5,r4,3f10 <__modsi3+0x6c>
    3eb8:	01800804 	movi	r6,32
    3ebc:	00c00044 	movi	r3,1
    3ec0:	00000106 	br	3ec8 <__modsi3+0x24>
    3ec4:	30000a26 	beq	r6,zero,3ef0 <__modsi3+0x4c>
    3ec8:	294b883a 	add	r5,r5,r5
    3ecc:	31bfffc4 	addi	r6,r6,-1
    3ed0:	18c7883a 	add	r3,r3,r3
    3ed4:	293ffb36 	bltu	r5,r4,3ec4 <__alt_mem_onchip_memory+0xf7803ec4>
    3ed8:	18000526 	beq	r3,zero,3ef0 <__modsi3+0x4c>
    3edc:	1806d07a 	srli	r3,r3,1
    3ee0:	11400136 	bltu	r2,r5,3ee8 <__modsi3+0x44>
    3ee4:	1145c83a 	sub	r2,r2,r5
    3ee8:	280ad07a 	srli	r5,r5,1
    3eec:	183ffb1e 	bne	r3,zero,3edc <__alt_mem_onchip_memory+0xf7803edc>
    3ef0:	38000126 	beq	r7,zero,3ef8 <__modsi3+0x54>
    3ef4:	0085c83a 	sub	r2,zero,r2
    3ef8:	f800283a 	ret
    3efc:	014bc83a 	sub	r5,zero,r5
    3f00:	003fec06 	br	3eb4 <__alt_mem_onchip_memory+0xf7803eb4>
    3f04:	0109c83a 	sub	r4,zero,r4
    3f08:	01c00044 	movi	r7,1
    3f0c:	003fe706 	br	3eac <__alt_mem_onchip_memory+0xf7803eac>
    3f10:	00c00044 	movi	r3,1
    3f14:	003ff106 	br	3edc <__alt_mem_onchip_memory+0xf7803edc>

00003f18 <__udivsi3>:
    3f18:	200d883a 	mov	r6,r4
    3f1c:	2900152e 	bgeu	r5,r4,3f74 <__udivsi3+0x5c>
    3f20:	28001416 	blt	r5,zero,3f74 <__udivsi3+0x5c>
    3f24:	00800804 	movi	r2,32
    3f28:	00c00044 	movi	r3,1
    3f2c:	00000206 	br	3f38 <__udivsi3+0x20>
    3f30:	10000e26 	beq	r2,zero,3f6c <__udivsi3+0x54>
    3f34:	28000516 	blt	r5,zero,3f4c <__udivsi3+0x34>
    3f38:	294b883a 	add	r5,r5,r5
    3f3c:	10bfffc4 	addi	r2,r2,-1
    3f40:	18c7883a 	add	r3,r3,r3
    3f44:	293ffa36 	bltu	r5,r4,3f30 <__alt_mem_onchip_memory+0xf7803f30>
    3f48:	18000826 	beq	r3,zero,3f6c <__udivsi3+0x54>
    3f4c:	0005883a 	mov	r2,zero
    3f50:	31400236 	bltu	r6,r5,3f5c <__udivsi3+0x44>
    3f54:	314dc83a 	sub	r6,r6,r5
    3f58:	10c4b03a 	or	r2,r2,r3
    3f5c:	1806d07a 	srli	r3,r3,1
    3f60:	280ad07a 	srli	r5,r5,1
    3f64:	183ffa1e 	bne	r3,zero,3f50 <__alt_mem_onchip_memory+0xf7803f50>
    3f68:	f800283a 	ret
    3f6c:	0005883a 	mov	r2,zero
    3f70:	f800283a 	ret
    3f74:	00c00044 	movi	r3,1
    3f78:	003ff406 	br	3f4c <__alt_mem_onchip_memory+0xf7803f4c>

00003f7c <__umodsi3>:
    3f7c:	2005883a 	mov	r2,r4
    3f80:	2900122e 	bgeu	r5,r4,3fcc <__umodsi3+0x50>
    3f84:	28001116 	blt	r5,zero,3fcc <__umodsi3+0x50>
    3f88:	01800804 	movi	r6,32
    3f8c:	00c00044 	movi	r3,1
    3f90:	00000206 	br	3f9c <__umodsi3+0x20>
    3f94:	30000c26 	beq	r6,zero,3fc8 <__umodsi3+0x4c>
    3f98:	28000516 	blt	r5,zero,3fb0 <__umodsi3+0x34>
    3f9c:	294b883a 	add	r5,r5,r5
    3fa0:	31bfffc4 	addi	r6,r6,-1
    3fa4:	18c7883a 	add	r3,r3,r3
    3fa8:	293ffa36 	bltu	r5,r4,3f94 <__alt_mem_onchip_memory+0xf7803f94>
    3fac:	18000626 	beq	r3,zero,3fc8 <__umodsi3+0x4c>
    3fb0:	1806d07a 	srli	r3,r3,1
    3fb4:	11400136 	bltu	r2,r5,3fbc <__umodsi3+0x40>
    3fb8:	1145c83a 	sub	r2,r2,r5
    3fbc:	280ad07a 	srli	r5,r5,1
    3fc0:	183ffb1e 	bne	r3,zero,3fb0 <__alt_mem_onchip_memory+0xf7803fb0>
    3fc4:	f800283a 	ret
    3fc8:	f800283a 	ret
    3fcc:	00c00044 	movi	r3,1
    3fd0:	003ff706 	br	3fb0 <__alt_mem_onchip_memory+0xf7803fb0>

00003fd4 <__errno>:
    3fd4:	00800074 	movhi	r2,1
    3fd8:	108d3e04 	addi	r2,r2,13560
    3fdc:	10800017 	ldw	r2,0(r2)
    3fe0:	f800283a 	ret

00003fe4 <_printf_r>:
    3fe4:	defffd04 	addi	sp,sp,-12
    3fe8:	2805883a 	mov	r2,r5
    3fec:	dfc00015 	stw	ra,0(sp)
    3ff0:	d9800115 	stw	r6,4(sp)
    3ff4:	d9c00215 	stw	r7,8(sp)
    3ff8:	21400217 	ldw	r5,8(r4)
    3ffc:	d9c00104 	addi	r7,sp,4
    4000:	100d883a 	mov	r6,r2
    4004:	00043080 	call	4308 <___vfprintf_internal_r>
    4008:	dfc00017 	ldw	ra,0(sp)
    400c:	dec00304 	addi	sp,sp,12
    4010:	f800283a 	ret

00004014 <printf>:
    4014:	defffc04 	addi	sp,sp,-16
    4018:	dfc00015 	stw	ra,0(sp)
    401c:	d9400115 	stw	r5,4(sp)
    4020:	d9800215 	stw	r6,8(sp)
    4024:	d9c00315 	stw	r7,12(sp)
    4028:	00800074 	movhi	r2,1
    402c:	108d3e04 	addi	r2,r2,13560
    4030:	10800017 	ldw	r2,0(r2)
    4034:	200b883a 	mov	r5,r4
    4038:	d9800104 	addi	r6,sp,4
    403c:	11000217 	ldw	r4,8(r2)
    4040:	00065000 	call	6500 <__vfprintf_internal>
    4044:	dfc00017 	ldw	ra,0(sp)
    4048:	dec00404 	addi	sp,sp,16
    404c:	f800283a 	ret

00004050 <_putchar_r>:
    4050:	21800217 	ldw	r6,8(r4)
    4054:	000b0201 	jmpi	b020 <_putc_r>

00004058 <putchar>:
    4058:	00800074 	movhi	r2,1
    405c:	108d3e04 	addi	r2,r2,13560
    4060:	200b883a 	mov	r5,r4
    4064:	11000017 	ldw	r4,0(r2)
    4068:	21800217 	ldw	r6,8(r4)
    406c:	000b0201 	jmpi	b020 <_putc_r>

00004070 <_puts_r>:
    4070:	defff604 	addi	sp,sp,-40
    4074:	dc000715 	stw	r16,28(sp)
    4078:	2021883a 	mov	r16,r4
    407c:	2809883a 	mov	r4,r5
    4080:	dc400815 	stw	r17,32(sp)
    4084:	dfc00915 	stw	ra,36(sp)
    4088:	2823883a 	mov	r17,r5
    408c:	00041c00 	call	41c0 <strlen>
    4090:	10c00044 	addi	r3,r2,1
    4094:	d8800115 	stw	r2,4(sp)
    4098:	00800074 	movhi	r2,1
    409c:	1085d004 	addi	r2,r2,5952
    40a0:	d8800215 	stw	r2,8(sp)
    40a4:	00800044 	movi	r2,1
    40a8:	d8800315 	stw	r2,12(sp)
    40ac:	00800084 	movi	r2,2
    40b0:	dc400015 	stw	r17,0(sp)
    40b4:	d8c00615 	stw	r3,24(sp)
    40b8:	dec00415 	stw	sp,16(sp)
    40bc:	d8800515 	stw	r2,20(sp)
    40c0:	80000226 	beq	r16,zero,40cc <_puts_r+0x5c>
    40c4:	80800e17 	ldw	r2,56(r16)
    40c8:	10001426 	beq	r2,zero,411c <_puts_r+0xac>
    40cc:	81400217 	ldw	r5,8(r16)
    40d0:	2880030b 	ldhu	r2,12(r5)
    40d4:	10c8000c 	andi	r3,r2,8192
    40d8:	1800061e 	bne	r3,zero,40f4 <_puts_r+0x84>
    40dc:	29001917 	ldw	r4,100(r5)
    40e0:	00f7ffc4 	movi	r3,-8193
    40e4:	10880014 	ori	r2,r2,8192
    40e8:	20c6703a 	and	r3,r4,r3
    40ec:	2880030d 	sth	r2,12(r5)
    40f0:	28c01915 	stw	r3,100(r5)
    40f4:	d9800404 	addi	r6,sp,16
    40f8:	8009883a 	mov	r4,r16
    40fc:	0008a300 	call	8a30 <__sfvwrite_r>
    4100:	1000091e 	bne	r2,zero,4128 <_puts_r+0xb8>
    4104:	00800284 	movi	r2,10
    4108:	dfc00917 	ldw	ra,36(sp)
    410c:	dc400817 	ldw	r17,32(sp)
    4110:	dc000717 	ldw	r16,28(sp)
    4114:	dec00a04 	addi	sp,sp,40
    4118:	f800283a 	ret
    411c:	8009883a 	mov	r4,r16
    4120:	00085ac0 	call	85ac <__sinit>
    4124:	003fe906 	br	40cc <__alt_mem_onchip_memory+0xf78040cc>
    4128:	00bfffc4 	movi	r2,-1
    412c:	003ff606 	br	4108 <__alt_mem_onchip_memory+0xf7804108>

00004130 <puts>:
    4130:	00800074 	movhi	r2,1
    4134:	108d3e04 	addi	r2,r2,13560
    4138:	200b883a 	mov	r5,r4
    413c:	11000017 	ldw	r4,0(r2)
    4140:	00040701 	jmpi	4070 <_puts_r>

00004144 <srand>:
    4144:	00800074 	movhi	r2,1
    4148:	108d3e04 	addi	r2,r2,13560
    414c:	10800017 	ldw	r2,0(r2)
    4150:	11002915 	stw	r4,164(r2)
    4154:	10002a15 	stw	zero,168(r2)
    4158:	f800283a 	ret

0000415c <rand>:
    415c:	00800074 	movhi	r2,1
    4160:	defffe04 	addi	sp,sp,-8
    4164:	108d3e04 	addi	r2,r2,13560
    4168:	dc000015 	stw	r16,0(sp)
    416c:	14000017 	ldw	r16,0(r2)
    4170:	dfc00115 	stw	ra,4(sp)
    4174:	01932574 	movhi	r6,19605
    4178:	81002917 	ldw	r4,164(r16)
    417c:	81402a17 	ldw	r5,168(r16)
    4180:	01d614b4 	movhi	r7,22610
    4184:	319fcb44 	addi	r6,r6,32557
    4188:	39fd0b44 	addi	r7,r7,-3027
    418c:	000d8d40 	call	d8d4 <__muldi3>
    4190:	11000044 	addi	r4,r2,1
    4194:	2085803a 	cmpltu	r2,r4,r2
    4198:	10c7883a 	add	r3,r2,r3
    419c:	00a00034 	movhi	r2,32768
    41a0:	10bfffc4 	addi	r2,r2,-1
    41a4:	1884703a 	and	r2,r3,r2
    41a8:	81002915 	stw	r4,164(r16)
    41ac:	80c02a15 	stw	r3,168(r16)
    41b0:	dfc00117 	ldw	ra,4(sp)
    41b4:	dc000017 	ldw	r16,0(sp)
    41b8:	dec00204 	addi	sp,sp,8
    41bc:	f800283a 	ret

000041c0 <strlen>:
    41c0:	208000cc 	andi	r2,r4,3
    41c4:	10002026 	beq	r2,zero,4248 <strlen+0x88>
    41c8:	20800007 	ldb	r2,0(r4)
    41cc:	10002026 	beq	r2,zero,4250 <strlen+0x90>
    41d0:	2005883a 	mov	r2,r4
    41d4:	00000206 	br	41e0 <strlen+0x20>
    41d8:	10c00007 	ldb	r3,0(r2)
    41dc:	18001826 	beq	r3,zero,4240 <strlen+0x80>
    41e0:	10800044 	addi	r2,r2,1
    41e4:	10c000cc 	andi	r3,r2,3
    41e8:	183ffb1e 	bne	r3,zero,41d8 <__alt_mem_onchip_memory+0xf78041d8>
    41ec:	10c00017 	ldw	r3,0(r2)
    41f0:	01ffbff4 	movhi	r7,65279
    41f4:	39ffbfc4 	addi	r7,r7,-257
    41f8:	00ca303a 	nor	r5,zero,r3
    41fc:	01a02074 	movhi	r6,32897
    4200:	19c7883a 	add	r3,r3,r7
    4204:	31a02004 	addi	r6,r6,-32640
    4208:	1946703a 	and	r3,r3,r5
    420c:	1986703a 	and	r3,r3,r6
    4210:	1800091e 	bne	r3,zero,4238 <strlen+0x78>
    4214:	10800104 	addi	r2,r2,4
    4218:	10c00017 	ldw	r3,0(r2)
    421c:	19cb883a 	add	r5,r3,r7
    4220:	00c6303a 	nor	r3,zero,r3
    4224:	28c6703a 	and	r3,r5,r3
    4228:	1986703a 	and	r3,r3,r6
    422c:	183ff926 	beq	r3,zero,4214 <__alt_mem_onchip_memory+0xf7804214>
    4230:	00000106 	br	4238 <strlen+0x78>
    4234:	10800044 	addi	r2,r2,1
    4238:	10c00007 	ldb	r3,0(r2)
    423c:	183ffd1e 	bne	r3,zero,4234 <__alt_mem_onchip_memory+0xf7804234>
    4240:	1105c83a 	sub	r2,r2,r4
    4244:	f800283a 	ret
    4248:	2005883a 	mov	r2,r4
    424c:	003fe706 	br	41ec <__alt_mem_onchip_memory+0xf78041ec>
    4250:	0005883a 	mov	r2,zero
    4254:	f800283a 	ret

00004258 <_system_r>:
    4258:	2800021e 	bne	r5,zero,4264 <_system_r+0xc>
    425c:	0005883a 	mov	r2,zero
    4260:	f800283a 	ret
    4264:	deffff04 	addi	sp,sp,-4
    4268:	dfc00015 	stw	ra,0(sp)
    426c:	0003fd40 	call	3fd4 <__errno>
    4270:	00c01604 	movi	r3,88
    4274:	10c00015 	stw	r3,0(r2)
    4278:	00bfffc4 	movi	r2,-1
    427c:	dfc00017 	ldw	ra,0(sp)
    4280:	dec00104 	addi	sp,sp,4
    4284:	f800283a 	ret

00004288 <system>:
    4288:	20000926 	beq	r4,zero,42b0 <system+0x28>
    428c:	deffff04 	addi	sp,sp,-4
    4290:	dfc00015 	stw	ra,0(sp)
    4294:	0003fd40 	call	3fd4 <__errno>
    4298:	00c01604 	movi	r3,88
    429c:	10c00015 	stw	r3,0(r2)
    42a0:	00bfffc4 	movi	r2,-1
    42a4:	dfc00017 	ldw	ra,0(sp)
    42a8:	dec00104 	addi	sp,sp,4
    42ac:	f800283a 	ret
    42b0:	0005883a 	mov	r2,zero
    42b4:	f800283a 	ret

000042b8 <time>:
    42b8:	00800074 	movhi	r2,1
    42bc:	defffc04 	addi	sp,sp,-16
    42c0:	108d3e04 	addi	r2,r2,13560
    42c4:	dc000215 	stw	r16,8(sp)
    42c8:	2021883a 	mov	r16,r4
    42cc:	11000017 	ldw	r4,0(r2)
    42d0:	000d883a 	mov	r6,zero
    42d4:	d80b883a 	mov	r5,sp
    42d8:	dfc00315 	stw	ra,12(sp)
    42dc:	00090740 	call	9074 <_gettimeofday_r>
    42e0:	10000716 	blt	r2,zero,4300 <time+0x48>
    42e4:	d8800017 	ldw	r2,0(sp)
    42e8:	80000126 	beq	r16,zero,42f0 <time+0x38>
    42ec:	80800015 	stw	r2,0(r16)
    42f0:	dfc00317 	ldw	ra,12(sp)
    42f4:	dc000217 	ldw	r16,8(sp)
    42f8:	dec00404 	addi	sp,sp,16
    42fc:	f800283a 	ret
    4300:	00bfffc4 	movi	r2,-1
    4304:	003ffa06 	br	42f0 <__alt_mem_onchip_memory+0xf78042f0>

00004308 <___vfprintf_internal_r>:
    4308:	deffb804 	addi	sp,sp,-288
    430c:	dfc04715 	stw	ra,284(sp)
    4310:	ddc04515 	stw	r23,276(sp)
    4314:	dd404315 	stw	r21,268(sp)
    4318:	d9002c15 	stw	r4,176(sp)
    431c:	282f883a 	mov	r23,r5
    4320:	302b883a 	mov	r21,r6
    4324:	d9c02d15 	stw	r7,180(sp)
    4328:	df004615 	stw	fp,280(sp)
    432c:	dd804415 	stw	r22,272(sp)
    4330:	dd004215 	stw	r20,264(sp)
    4334:	dcc04115 	stw	r19,260(sp)
    4338:	dc804015 	stw	r18,256(sp)
    433c:	dc403f15 	stw	r17,252(sp)
    4340:	dc003e15 	stw	r16,248(sp)
    4344:	000917c0 	call	917c <_localeconv_r>
    4348:	10800017 	ldw	r2,0(r2)
    434c:	1009883a 	mov	r4,r2
    4350:	d8803415 	stw	r2,208(sp)
    4354:	00041c00 	call	41c0 <strlen>
    4358:	d8803715 	stw	r2,220(sp)
    435c:	d8802c17 	ldw	r2,176(sp)
    4360:	10000226 	beq	r2,zero,436c <___vfprintf_internal_r+0x64>
    4364:	10800e17 	ldw	r2,56(r2)
    4368:	1000f926 	beq	r2,zero,4750 <___vfprintf_internal_r+0x448>
    436c:	b880030b 	ldhu	r2,12(r23)
    4370:	10c8000c 	andi	r3,r2,8192
    4374:	1800061e 	bne	r3,zero,4390 <___vfprintf_internal_r+0x88>
    4378:	b9001917 	ldw	r4,100(r23)
    437c:	00f7ffc4 	movi	r3,-8193
    4380:	10880014 	ori	r2,r2,8192
    4384:	20c6703a 	and	r3,r4,r3
    4388:	b880030d 	sth	r2,12(r23)
    438c:	b8c01915 	stw	r3,100(r23)
    4390:	10c0020c 	andi	r3,r2,8
    4394:	1800c126 	beq	r3,zero,469c <___vfprintf_internal_r+0x394>
    4398:	b8c00417 	ldw	r3,16(r23)
    439c:	1800bf26 	beq	r3,zero,469c <___vfprintf_internal_r+0x394>
    43a0:	1080068c 	andi	r2,r2,26
    43a4:	00c00284 	movi	r3,10
    43a8:	10c0c426 	beq	r2,r3,46bc <___vfprintf_internal_r+0x3b4>
    43ac:	d8c00404 	addi	r3,sp,16
    43b0:	05000074 	movhi	r20,1
    43b4:	d9001e04 	addi	r4,sp,120
    43b8:	a505e184 	addi	r20,r20,6022
    43bc:	d8c01e15 	stw	r3,120(sp)
    43c0:	d8002015 	stw	zero,128(sp)
    43c4:	d8001f15 	stw	zero,124(sp)
    43c8:	d8003315 	stw	zero,204(sp)
    43cc:	d8003615 	stw	zero,216(sp)
    43d0:	d8003815 	stw	zero,224(sp)
    43d4:	1811883a 	mov	r8,r3
    43d8:	d8003915 	stw	zero,228(sp)
    43dc:	d8003a15 	stw	zero,232(sp)
    43e0:	d8002f15 	stw	zero,188(sp)
    43e4:	d9002815 	stw	r4,160(sp)
    43e8:	a8800007 	ldb	r2,0(r21)
    43ec:	10027b26 	beq	r2,zero,4ddc <___vfprintf_internal_r+0xad4>
    43f0:	00c00944 	movi	r3,37
    43f4:	a821883a 	mov	r16,r21
    43f8:	10c0021e 	bne	r2,r3,4404 <___vfprintf_internal_r+0xfc>
    43fc:	00001406 	br	4450 <___vfprintf_internal_r+0x148>
    4400:	10c00326 	beq	r2,r3,4410 <___vfprintf_internal_r+0x108>
    4404:	84000044 	addi	r16,r16,1
    4408:	80800007 	ldb	r2,0(r16)
    440c:	103ffc1e 	bne	r2,zero,4400 <__alt_mem_onchip_memory+0xf7804400>
    4410:	8563c83a 	sub	r17,r16,r21
    4414:	88000e26 	beq	r17,zero,4450 <___vfprintf_internal_r+0x148>
    4418:	d8c02017 	ldw	r3,128(sp)
    441c:	d8801f17 	ldw	r2,124(sp)
    4420:	45400015 	stw	r21,0(r8)
    4424:	1c47883a 	add	r3,r3,r17
    4428:	10800044 	addi	r2,r2,1
    442c:	d8c02015 	stw	r3,128(sp)
    4430:	44400115 	stw	r17,4(r8)
    4434:	d8801f15 	stw	r2,124(sp)
    4438:	00c001c4 	movi	r3,7
    443c:	1880a716 	blt	r3,r2,46dc <___vfprintf_internal_r+0x3d4>
    4440:	42000204 	addi	r8,r8,8
    4444:	d9402f17 	ldw	r5,188(sp)
    4448:	2c4b883a 	add	r5,r5,r17
    444c:	d9402f15 	stw	r5,188(sp)
    4450:	80800007 	ldb	r2,0(r16)
    4454:	1000a826 	beq	r2,zero,46f8 <___vfprintf_internal_r+0x3f0>
    4458:	84400047 	ldb	r17,1(r16)
    445c:	00bfffc4 	movi	r2,-1
    4460:	85400044 	addi	r21,r16,1
    4464:	d8002785 	stb	zero,158(sp)
    4468:	0007883a 	mov	r3,zero
    446c:	000f883a 	mov	r7,zero
    4470:	d8802915 	stw	r2,164(sp)
    4474:	d8003115 	stw	zero,196(sp)
    4478:	0025883a 	mov	r18,zero
    447c:	01401604 	movi	r5,88
    4480:	01800244 	movi	r6,9
    4484:	02800a84 	movi	r10,42
    4488:	02401b04 	movi	r9,108
    448c:	ad400044 	addi	r21,r21,1
    4490:	88bff804 	addi	r2,r17,-32
    4494:	28830436 	bltu	r5,r2,50a8 <___vfprintf_internal_r+0xda0>
    4498:	100490ba 	slli	r2,r2,2
    449c:	01000034 	movhi	r4,0
    44a0:	21112c04 	addi	r4,r4,17584
    44a4:	1105883a 	add	r2,r2,r4
    44a8:	10800017 	ldw	r2,0(r2)
    44ac:	1000683a 	jmp	r2
    44b0:	00004fc8 	cmpgei	zero,zero,319
    44b4:	000050a8 	cmpgeui	zero,zero,322
    44b8:	000050a8 	cmpgeui	zero,zero,322
    44bc:	00004fe8 	cmpgeui	zero,zero,319
    44c0:	000050a8 	cmpgeui	zero,zero,322
    44c4:	000050a8 	cmpgeui	zero,zero,322
    44c8:	000050a8 	cmpgeui	zero,zero,322
    44cc:	000050a8 	cmpgeui	zero,zero,322
    44d0:	000050a8 	cmpgeui	zero,zero,322
    44d4:	000050a8 	cmpgeui	zero,zero,322
    44d8:	0000475c 	xori	zero,zero,285
    44dc:	00004f04 	movi	zero,316
    44e0:	000050a8 	cmpgeui	zero,zero,322
    44e4:	00004624 	muli	zero,zero,280
    44e8:	00004784 	movi	zero,286
    44ec:	000050a8 	cmpgeui	zero,zero,322
    44f0:	000047c4 	movi	zero,287
    44f4:	000047d0 	cmplti	zero,zero,287
    44f8:	000047d0 	cmplti	zero,zero,287
    44fc:	000047d0 	cmplti	zero,zero,287
    4500:	000047d0 	cmplti	zero,zero,287
    4504:	000047d0 	cmplti	zero,zero,287
    4508:	000047d0 	cmplti	zero,zero,287
    450c:	000047d0 	cmplti	zero,zero,287
    4510:	000047d0 	cmplti	zero,zero,287
    4514:	000047d0 	cmplti	zero,zero,287
    4518:	000050a8 	cmpgeui	zero,zero,322
    451c:	000050a8 	cmpgeui	zero,zero,322
    4520:	000050a8 	cmpgeui	zero,zero,322
    4524:	000050a8 	cmpgeui	zero,zero,322
    4528:	000050a8 	cmpgeui	zero,zero,322
    452c:	000050a8 	cmpgeui	zero,zero,322
    4530:	000050a8 	cmpgeui	zero,zero,322
    4534:	000050a8 	cmpgeui	zero,zero,322
    4538:	000050a8 	cmpgeui	zero,zero,322
    453c:	000050a8 	cmpgeui	zero,zero,322
    4540:	00004804 	movi	zero,288
    4544:	000048c0 	call	48c <calcNet+0x140>
    4548:	000050a8 	cmpgeui	zero,zero,322
    454c:	000048c0 	call	48c <calcNet+0x140>
    4550:	000050a8 	cmpgeui	zero,zero,322
    4554:	000050a8 	cmpgeui	zero,zero,322
    4558:	000050a8 	cmpgeui	zero,zero,322
    455c:	000050a8 	cmpgeui	zero,zero,322
    4560:	00004960 	cmpeqi	zero,zero,293
    4564:	000050a8 	cmpgeui	zero,zero,322
    4568:	000050a8 	cmpgeui	zero,zero,322
    456c:	0000496c 	andhi	zero,zero,293
    4570:	000050a8 	cmpgeui	zero,zero,322
    4574:	000050a8 	cmpgeui	zero,zero,322
    4578:	000050a8 	cmpgeui	zero,zero,322
    457c:	000050a8 	cmpgeui	zero,zero,322
    4580:	000050a8 	cmpgeui	zero,zero,322
    4584:	00004de4 	muli	zero,zero,311
    4588:	000050a8 	cmpgeui	zero,zero,322
    458c:	000050a8 	cmpgeui	zero,zero,322
    4590:	00004e44 	movi	zero,313
    4594:	000050a8 	cmpgeui	zero,zero,322
    4598:	000050a8 	cmpgeui	zero,zero,322
    459c:	000050a8 	cmpgeui	zero,zero,322
    45a0:	000050a8 	cmpgeui	zero,zero,322
    45a4:	000050a8 	cmpgeui	zero,zero,322
    45a8:	000050a8 	cmpgeui	zero,zero,322
    45ac:	000050a8 	cmpgeui	zero,zero,322
    45b0:	000050a8 	cmpgeui	zero,zero,322
    45b4:	000050a8 	cmpgeui	zero,zero,322
    45b8:	000050a8 	cmpgeui	zero,zero,322
    45bc:	00005054 	movui	zero,321
    45c0:	00004ff4 	movhi	zero,319
    45c4:	000048c0 	call	48c <calcNet+0x140>
    45c8:	000048c0 	call	48c <calcNet+0x140>
    45cc:	000048c0 	call	48c <calcNet+0x140>
    45d0:	00005004 	movi	zero,320
    45d4:	00004ff4 	movhi	zero,319
    45d8:	000050a8 	cmpgeui	zero,zero,322
    45dc:	000050a8 	cmpgeui	zero,zero,322
    45e0:	00005010 	cmplti	zero,zero,320
    45e4:	000050a8 	cmpgeui	zero,zero,322
    45e8:	00005020 	cmpeqi	zero,zero,320
    45ec:	00004ef4 	movhi	zero,315
    45f0:	00004630 	cmpltui	zero,zero,280
    45f4:	00004f14 	movui	zero,316
    45f8:	000050a8 	cmpgeui	zero,zero,322
    45fc:	00004f20 	cmpeqi	zero,zero,316
    4600:	000050a8 	cmpgeui	zero,zero,322
    4604:	00004f7c 	xorhi	zero,zero,317
    4608:	000050a8 	cmpgeui	zero,zero,322
    460c:	000050a8 	cmpgeui	zero,zero,322
    4610:	00004f8c 	andi	zero,zero,318
    4614:	d9003117 	ldw	r4,196(sp)
    4618:	d8802d15 	stw	r2,180(sp)
    461c:	0109c83a 	sub	r4,zero,r4
    4620:	d9003115 	stw	r4,196(sp)
    4624:	94800114 	ori	r18,r18,4
    4628:	ac400007 	ldb	r17,0(r21)
    462c:	003f9706 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4630:	00800c04 	movi	r2,48
    4634:	d9002d17 	ldw	r4,180(sp)
    4638:	d9402917 	ldw	r5,164(sp)
    463c:	d8802705 	stb	r2,156(sp)
    4640:	00801e04 	movi	r2,120
    4644:	d8802745 	stb	r2,157(sp)
    4648:	d8002785 	stb	zero,158(sp)
    464c:	20c00104 	addi	r3,r4,4
    4650:	24c00017 	ldw	r19,0(r4)
    4654:	002d883a 	mov	r22,zero
    4658:	90800094 	ori	r2,r18,2
    465c:	28029a16 	blt	r5,zero,50c8 <___vfprintf_internal_r+0xdc0>
    4660:	00bfdfc4 	movi	r2,-129
    4664:	90a4703a 	and	r18,r18,r2
    4668:	d8c02d15 	stw	r3,180(sp)
    466c:	94800094 	ori	r18,r18,2
    4670:	9802871e 	bne	r19,zero,5090 <___vfprintf_internal_r+0xd88>
    4674:	00800074 	movhi	r2,1
    4678:	1085da04 	addi	r2,r2,5992
    467c:	d8803915 	stw	r2,228(sp)
    4680:	04401e04 	movi	r17,120
    4684:	d8802917 	ldw	r2,164(sp)
    4688:	0039883a 	mov	fp,zero
    468c:	1001e926 	beq	r2,zero,4e34 <___vfprintf_internal_r+0xb2c>
    4690:	0027883a 	mov	r19,zero
    4694:	002d883a 	mov	r22,zero
    4698:	00020506 	br	4eb0 <___vfprintf_internal_r+0xba8>
    469c:	d9002c17 	ldw	r4,176(sp)
    46a0:	b80b883a 	mov	r5,r23
    46a4:	00065d80 	call	65d8 <__swsetup_r>
    46a8:	1005ac1e 	bne	r2,zero,5d5c <___vfprintf_internal_r+0x1a54>
    46ac:	b880030b 	ldhu	r2,12(r23)
    46b0:	00c00284 	movi	r3,10
    46b4:	1080068c 	andi	r2,r2,26
    46b8:	10ff3c1e 	bne	r2,r3,43ac <__alt_mem_onchip_memory+0xf78043ac>
    46bc:	b880038f 	ldh	r2,14(r23)
    46c0:	103f3a16 	blt	r2,zero,43ac <__alt_mem_onchip_memory+0xf78043ac>
    46c4:	d9c02d17 	ldw	r7,180(sp)
    46c8:	d9002c17 	ldw	r4,176(sp)
    46cc:	a80d883a 	mov	r6,r21
    46d0:	b80b883a 	mov	r5,r23
    46d4:	000651c0 	call	651c <__sbprintf>
    46d8:	00001106 	br	4720 <___vfprintf_internal_r+0x418>
    46dc:	d9002c17 	ldw	r4,176(sp)
    46e0:	d9801e04 	addi	r6,sp,120
    46e4:	b80b883a 	mov	r5,r23
    46e8:	000ba540 	call	ba54 <__sprint_r>
    46ec:	1000081e 	bne	r2,zero,4710 <___vfprintf_internal_r+0x408>
    46f0:	da000404 	addi	r8,sp,16
    46f4:	003f5306 	br	4444 <__alt_mem_onchip_memory+0xf7804444>
    46f8:	d8802017 	ldw	r2,128(sp)
    46fc:	10000426 	beq	r2,zero,4710 <___vfprintf_internal_r+0x408>
    4700:	d9002c17 	ldw	r4,176(sp)
    4704:	d9801e04 	addi	r6,sp,120
    4708:	b80b883a 	mov	r5,r23
    470c:	000ba540 	call	ba54 <__sprint_r>
    4710:	b880030b 	ldhu	r2,12(r23)
    4714:	1080100c 	andi	r2,r2,64
    4718:	1005901e 	bne	r2,zero,5d5c <___vfprintf_internal_r+0x1a54>
    471c:	d8802f17 	ldw	r2,188(sp)
    4720:	dfc04717 	ldw	ra,284(sp)
    4724:	df004617 	ldw	fp,280(sp)
    4728:	ddc04517 	ldw	r23,276(sp)
    472c:	dd804417 	ldw	r22,272(sp)
    4730:	dd404317 	ldw	r21,268(sp)
    4734:	dd004217 	ldw	r20,264(sp)
    4738:	dcc04117 	ldw	r19,260(sp)
    473c:	dc804017 	ldw	r18,256(sp)
    4740:	dc403f17 	ldw	r17,252(sp)
    4744:	dc003e17 	ldw	r16,248(sp)
    4748:	dec04804 	addi	sp,sp,288
    474c:	f800283a 	ret
    4750:	d9002c17 	ldw	r4,176(sp)
    4754:	00085ac0 	call	85ac <__sinit>
    4758:	003f0406 	br	436c <__alt_mem_onchip_memory+0xf780436c>
    475c:	d8802d17 	ldw	r2,180(sp)
    4760:	d9002d17 	ldw	r4,180(sp)
    4764:	10800017 	ldw	r2,0(r2)
    4768:	d8803115 	stw	r2,196(sp)
    476c:	20800104 	addi	r2,r4,4
    4770:	d9003117 	ldw	r4,196(sp)
    4774:	203fa716 	blt	r4,zero,4614 <__alt_mem_onchip_memory+0xf7804614>
    4778:	d8802d15 	stw	r2,180(sp)
    477c:	ac400007 	ldb	r17,0(r21)
    4780:	003f4206 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4784:	ac400007 	ldb	r17,0(r21)
    4788:	aac00044 	addi	r11,r21,1
    478c:	8a872826 	beq	r17,r10,6430 <___vfprintf_internal_r+0x2128>
    4790:	88bff404 	addi	r2,r17,-48
    4794:	0009883a 	mov	r4,zero
    4798:	30867d36 	bltu	r6,r2,6190 <___vfprintf_internal_r+0x1e88>
    479c:	5c400007 	ldb	r17,0(r11)
    47a0:	210002a4 	muli	r4,r4,10
    47a4:	5d400044 	addi	r21,r11,1
    47a8:	a817883a 	mov	r11,r21
    47ac:	2089883a 	add	r4,r4,r2
    47b0:	88bff404 	addi	r2,r17,-48
    47b4:	30bff92e 	bgeu	r6,r2,479c <__alt_mem_onchip_memory+0xf780479c>
    47b8:	2005c916 	blt	r4,zero,5ee0 <___vfprintf_internal_r+0x1bd8>
    47bc:	d9002915 	stw	r4,164(sp)
    47c0:	003f3306 	br	4490 <__alt_mem_onchip_memory+0xf7804490>
    47c4:	94802014 	ori	r18,r18,128
    47c8:	ac400007 	ldb	r17,0(r21)
    47cc:	003f2f06 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    47d0:	a809883a 	mov	r4,r21
    47d4:	d8003115 	stw	zero,196(sp)
    47d8:	88bff404 	addi	r2,r17,-48
    47dc:	0017883a 	mov	r11,zero
    47e0:	24400007 	ldb	r17,0(r4)
    47e4:	5ac002a4 	muli	r11,r11,10
    47e8:	ad400044 	addi	r21,r21,1
    47ec:	a809883a 	mov	r4,r21
    47f0:	12d7883a 	add	r11,r2,r11
    47f4:	88bff404 	addi	r2,r17,-48
    47f8:	30bff92e 	bgeu	r6,r2,47e0 <__alt_mem_onchip_memory+0xf78047e0>
    47fc:	dac03115 	stw	r11,196(sp)
    4800:	003f2306 	br	4490 <__alt_mem_onchip_memory+0xf7804490>
    4804:	18c03fcc 	andi	r3,r3,255
    4808:	18072b1e 	bne	r3,zero,64b8 <___vfprintf_internal_r+0x21b0>
    480c:	94800414 	ori	r18,r18,16
    4810:	9080080c 	andi	r2,r18,32
    4814:	10037b26 	beq	r2,zero,5604 <___vfprintf_internal_r+0x12fc>
    4818:	d9402d17 	ldw	r5,180(sp)
    481c:	28800117 	ldw	r2,4(r5)
    4820:	2cc00017 	ldw	r19,0(r5)
    4824:	29400204 	addi	r5,r5,8
    4828:	d9402d15 	stw	r5,180(sp)
    482c:	102d883a 	mov	r22,r2
    4830:	10044b16 	blt	r2,zero,5960 <___vfprintf_internal_r+0x1658>
    4834:	d9402917 	ldw	r5,164(sp)
    4838:	df002783 	ldbu	fp,158(sp)
    483c:	2803bc16 	blt	r5,zero,5730 <___vfprintf_internal_r+0x1428>
    4840:	00ffdfc4 	movi	r3,-129
    4844:	9d84b03a 	or	r2,r19,r22
    4848:	90e4703a 	and	r18,r18,r3
    484c:	10017726 	beq	r2,zero,4e2c <___vfprintf_internal_r+0xb24>
    4850:	b0038326 	beq	r22,zero,5660 <___vfprintf_internal_r+0x1358>
    4854:	dc402a15 	stw	r17,168(sp)
    4858:	dc001e04 	addi	r16,sp,120
    485c:	b023883a 	mov	r17,r22
    4860:	402d883a 	mov	r22,r8
    4864:	9809883a 	mov	r4,r19
    4868:	880b883a 	mov	r5,r17
    486c:	01800284 	movi	r6,10
    4870:	000f883a 	mov	r7,zero
    4874:	000deac0 	call	deac <__umoddi3>
    4878:	10800c04 	addi	r2,r2,48
    487c:	843fffc4 	addi	r16,r16,-1
    4880:	9809883a 	mov	r4,r19
    4884:	880b883a 	mov	r5,r17
    4888:	80800005 	stb	r2,0(r16)
    488c:	01800284 	movi	r6,10
    4890:	000f883a 	mov	r7,zero
    4894:	000d9340 	call	d934 <__udivdi3>
    4898:	1027883a 	mov	r19,r2
    489c:	10c4b03a 	or	r2,r2,r3
    48a0:	1823883a 	mov	r17,r3
    48a4:	103fef1e 	bne	r2,zero,4864 <__alt_mem_onchip_memory+0xf7804864>
    48a8:	d8c02817 	ldw	r3,160(sp)
    48ac:	dc402a17 	ldw	r17,168(sp)
    48b0:	b011883a 	mov	r8,r22
    48b4:	1c07c83a 	sub	r3,r3,r16
    48b8:	d8c02e15 	stw	r3,184(sp)
    48bc:	00005906 	br	4a24 <___vfprintf_internal_r+0x71c>
    48c0:	18c03fcc 	andi	r3,r3,255
    48c4:	1806fa1e 	bne	r3,zero,64b0 <___vfprintf_internal_r+0x21a8>
    48c8:	9080020c 	andi	r2,r18,8
    48cc:	10048a26 	beq	r2,zero,5af8 <___vfprintf_internal_r+0x17f0>
    48d0:	d8c02d17 	ldw	r3,180(sp)
    48d4:	d9002d17 	ldw	r4,180(sp)
    48d8:	d9402d17 	ldw	r5,180(sp)
    48dc:	18c00017 	ldw	r3,0(r3)
    48e0:	21000117 	ldw	r4,4(r4)
    48e4:	29400204 	addi	r5,r5,8
    48e8:	d8c03615 	stw	r3,216(sp)
    48ec:	d9003815 	stw	r4,224(sp)
    48f0:	d9402d15 	stw	r5,180(sp)
    48f4:	d9003617 	ldw	r4,216(sp)
    48f8:	d9403817 	ldw	r5,224(sp)
    48fc:	da003d15 	stw	r8,244(sp)
    4900:	04000044 	movi	r16,1
    4904:	00017ec0 	call	17ec <__fpclassifyd>
    4908:	da003d17 	ldw	r8,244(sp)
    490c:	14041f1e 	bne	r2,r16,598c <___vfprintf_internal_r+0x1684>
    4910:	d9003617 	ldw	r4,216(sp)
    4914:	d9403817 	ldw	r5,224(sp)
    4918:	000d883a 	mov	r6,zero
    491c:	000f883a 	mov	r7,zero
    4920:	00029fc0 	call	29fc <__ledf2>
    4924:	da003d17 	ldw	r8,244(sp)
    4928:	1005be16 	blt	r2,zero,6024 <___vfprintf_internal_r+0x1d1c>
    492c:	df002783 	ldbu	fp,158(sp)
    4930:	008011c4 	movi	r2,71
    4934:	1445330e 	bge	r2,r17,5e04 <___vfprintf_internal_r+0x1afc>
    4938:	04000074 	movhi	r16,1
    493c:	8405d204 	addi	r16,r16,5960
    4940:	00c000c4 	movi	r3,3
    4944:	00bfdfc4 	movi	r2,-129
    4948:	d8c02a15 	stw	r3,168(sp)
    494c:	90a4703a 	and	r18,r18,r2
    4950:	d8c02e15 	stw	r3,184(sp)
    4954:	d8002915 	stw	zero,164(sp)
    4958:	d8003215 	stw	zero,200(sp)
    495c:	00003706 	br	4a3c <___vfprintf_internal_r+0x734>
    4960:	94800214 	ori	r18,r18,8
    4964:	ac400007 	ldb	r17,0(r21)
    4968:	003ec806 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    496c:	18c03fcc 	andi	r3,r3,255
    4970:	1806db1e 	bne	r3,zero,64e0 <___vfprintf_internal_r+0x21d8>
    4974:	94800414 	ori	r18,r18,16
    4978:	9080080c 	andi	r2,r18,32
    497c:	1002d826 	beq	r2,zero,54e0 <___vfprintf_internal_r+0x11d8>
    4980:	d9402d17 	ldw	r5,180(sp)
    4984:	d8c02917 	ldw	r3,164(sp)
    4988:	d8002785 	stb	zero,158(sp)
    498c:	28800204 	addi	r2,r5,8
    4990:	2cc00017 	ldw	r19,0(r5)
    4994:	2d800117 	ldw	r22,4(r5)
    4998:	18048f16 	blt	r3,zero,5bd8 <___vfprintf_internal_r+0x18d0>
    499c:	013fdfc4 	movi	r4,-129
    49a0:	9d86b03a 	or	r3,r19,r22
    49a4:	d8802d15 	stw	r2,180(sp)
    49a8:	9124703a 	and	r18,r18,r4
    49ac:	1802d91e 	bne	r3,zero,5514 <___vfprintf_internal_r+0x120c>
    49b0:	d8c02917 	ldw	r3,164(sp)
    49b4:	0039883a 	mov	fp,zero
    49b8:	1805c326 	beq	r3,zero,60c8 <___vfprintf_internal_r+0x1dc0>
    49bc:	0027883a 	mov	r19,zero
    49c0:	002d883a 	mov	r22,zero
    49c4:	dc001e04 	addi	r16,sp,120
    49c8:	9806d0fa 	srli	r3,r19,3
    49cc:	b008977a 	slli	r4,r22,29
    49d0:	b02cd0fa 	srli	r22,r22,3
    49d4:	9cc001cc 	andi	r19,r19,7
    49d8:	98800c04 	addi	r2,r19,48
    49dc:	843fffc4 	addi	r16,r16,-1
    49e0:	20e6b03a 	or	r19,r4,r3
    49e4:	80800005 	stb	r2,0(r16)
    49e8:	9d86b03a 	or	r3,r19,r22
    49ec:	183ff61e 	bne	r3,zero,49c8 <__alt_mem_onchip_memory+0xf78049c8>
    49f0:	90c0004c 	andi	r3,r18,1
    49f4:	18013b26 	beq	r3,zero,4ee4 <___vfprintf_internal_r+0xbdc>
    49f8:	10803fcc 	andi	r2,r2,255
    49fc:	1080201c 	xori	r2,r2,128
    4a00:	10bfe004 	addi	r2,r2,-128
    4a04:	00c00c04 	movi	r3,48
    4a08:	10c13626 	beq	r2,r3,4ee4 <___vfprintf_internal_r+0xbdc>
    4a0c:	80ffffc5 	stb	r3,-1(r16)
    4a10:	d8c02817 	ldw	r3,160(sp)
    4a14:	80bfffc4 	addi	r2,r16,-1
    4a18:	1021883a 	mov	r16,r2
    4a1c:	1887c83a 	sub	r3,r3,r2
    4a20:	d8c02e15 	stw	r3,184(sp)
    4a24:	d8802e17 	ldw	r2,184(sp)
    4a28:	d9002917 	ldw	r4,164(sp)
    4a2c:	1100010e 	bge	r2,r4,4a34 <___vfprintf_internal_r+0x72c>
    4a30:	2005883a 	mov	r2,r4
    4a34:	d8802a15 	stw	r2,168(sp)
    4a38:	d8003215 	stw	zero,200(sp)
    4a3c:	e7003fcc 	andi	fp,fp,255
    4a40:	e700201c 	xori	fp,fp,128
    4a44:	e73fe004 	addi	fp,fp,-128
    4a48:	e0000326 	beq	fp,zero,4a58 <___vfprintf_internal_r+0x750>
    4a4c:	d8c02a17 	ldw	r3,168(sp)
    4a50:	18c00044 	addi	r3,r3,1
    4a54:	d8c02a15 	stw	r3,168(sp)
    4a58:	90c0008c 	andi	r3,r18,2
    4a5c:	d8c02b15 	stw	r3,172(sp)
    4a60:	18000326 	beq	r3,zero,4a70 <___vfprintf_internal_r+0x768>
    4a64:	d8c02a17 	ldw	r3,168(sp)
    4a68:	18c00084 	addi	r3,r3,2
    4a6c:	d8c02a15 	stw	r3,168(sp)
    4a70:	90c0210c 	andi	r3,r18,132
    4a74:	d8c03015 	stw	r3,192(sp)
    4a78:	1801a31e 	bne	r3,zero,5108 <___vfprintf_internal_r+0xe00>
    4a7c:	d9003117 	ldw	r4,196(sp)
    4a80:	d8c02a17 	ldw	r3,168(sp)
    4a84:	20e7c83a 	sub	r19,r4,r3
    4a88:	04c19f0e 	bge	zero,r19,5108 <___vfprintf_internal_r+0xe00>
    4a8c:	02400404 	movi	r9,16
    4a90:	d8c02017 	ldw	r3,128(sp)
    4a94:	d8801f17 	ldw	r2,124(sp)
    4a98:	4cc50d0e 	bge	r9,r19,5ed0 <___vfprintf_internal_r+0x1bc8>
    4a9c:	01400074 	movhi	r5,1
    4aa0:	2945e584 	addi	r5,r5,6038
    4aa4:	dc403b15 	stw	r17,236(sp)
    4aa8:	d9403515 	stw	r5,212(sp)
    4aac:	9823883a 	mov	r17,r19
    4ab0:	482d883a 	mov	r22,r9
    4ab4:	9027883a 	mov	r19,r18
    4ab8:	070001c4 	movi	fp,7
    4abc:	8025883a 	mov	r18,r16
    4ac0:	dc002c17 	ldw	r16,176(sp)
    4ac4:	00000306 	br	4ad4 <___vfprintf_internal_r+0x7cc>
    4ac8:	8c7ffc04 	addi	r17,r17,-16
    4acc:	42000204 	addi	r8,r8,8
    4ad0:	b440130e 	bge	r22,r17,4b20 <___vfprintf_internal_r+0x818>
    4ad4:	01000074 	movhi	r4,1
    4ad8:	18c00404 	addi	r3,r3,16
    4adc:	10800044 	addi	r2,r2,1
    4ae0:	2105e584 	addi	r4,r4,6038
    4ae4:	41000015 	stw	r4,0(r8)
    4ae8:	45800115 	stw	r22,4(r8)
    4aec:	d8c02015 	stw	r3,128(sp)
    4af0:	d8801f15 	stw	r2,124(sp)
    4af4:	e0bff40e 	bge	fp,r2,4ac8 <__alt_mem_onchip_memory+0xf7804ac8>
    4af8:	d9801e04 	addi	r6,sp,120
    4afc:	b80b883a 	mov	r5,r23
    4b00:	8009883a 	mov	r4,r16
    4b04:	000ba540 	call	ba54 <__sprint_r>
    4b08:	103f011e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    4b0c:	8c7ffc04 	addi	r17,r17,-16
    4b10:	d8c02017 	ldw	r3,128(sp)
    4b14:	d8801f17 	ldw	r2,124(sp)
    4b18:	da000404 	addi	r8,sp,16
    4b1c:	b47fed16 	blt	r22,r17,4ad4 <__alt_mem_onchip_memory+0xf7804ad4>
    4b20:	9021883a 	mov	r16,r18
    4b24:	9825883a 	mov	r18,r19
    4b28:	8827883a 	mov	r19,r17
    4b2c:	dc403b17 	ldw	r17,236(sp)
    4b30:	d9403517 	ldw	r5,212(sp)
    4b34:	98c7883a 	add	r3,r19,r3
    4b38:	10800044 	addi	r2,r2,1
    4b3c:	41400015 	stw	r5,0(r8)
    4b40:	44c00115 	stw	r19,4(r8)
    4b44:	d8c02015 	stw	r3,128(sp)
    4b48:	d8801f15 	stw	r2,124(sp)
    4b4c:	010001c4 	movi	r4,7
    4b50:	2082a316 	blt	r4,r2,55e0 <___vfprintf_internal_r+0x12d8>
    4b54:	df002787 	ldb	fp,158(sp)
    4b58:	42000204 	addi	r8,r8,8
    4b5c:	e0000c26 	beq	fp,zero,4b90 <___vfprintf_internal_r+0x888>
    4b60:	d8801f17 	ldw	r2,124(sp)
    4b64:	d9002784 	addi	r4,sp,158
    4b68:	18c00044 	addi	r3,r3,1
    4b6c:	10800044 	addi	r2,r2,1
    4b70:	41000015 	stw	r4,0(r8)
    4b74:	01000044 	movi	r4,1
    4b78:	41000115 	stw	r4,4(r8)
    4b7c:	d8c02015 	stw	r3,128(sp)
    4b80:	d8801f15 	stw	r2,124(sp)
    4b84:	010001c4 	movi	r4,7
    4b88:	20823c16 	blt	r4,r2,547c <___vfprintf_internal_r+0x1174>
    4b8c:	42000204 	addi	r8,r8,8
    4b90:	d8802b17 	ldw	r2,172(sp)
    4b94:	10000c26 	beq	r2,zero,4bc8 <___vfprintf_internal_r+0x8c0>
    4b98:	d8801f17 	ldw	r2,124(sp)
    4b9c:	d9002704 	addi	r4,sp,156
    4ba0:	18c00084 	addi	r3,r3,2
    4ba4:	10800044 	addi	r2,r2,1
    4ba8:	41000015 	stw	r4,0(r8)
    4bac:	01000084 	movi	r4,2
    4bb0:	41000115 	stw	r4,4(r8)
    4bb4:	d8c02015 	stw	r3,128(sp)
    4bb8:	d8801f15 	stw	r2,124(sp)
    4bbc:	010001c4 	movi	r4,7
    4bc0:	20823616 	blt	r4,r2,549c <___vfprintf_internal_r+0x1194>
    4bc4:	42000204 	addi	r8,r8,8
    4bc8:	d9003017 	ldw	r4,192(sp)
    4bcc:	00802004 	movi	r2,128
    4bd0:	20819926 	beq	r4,r2,5238 <___vfprintf_internal_r+0xf30>
    4bd4:	d9402917 	ldw	r5,164(sp)
    4bd8:	d8802e17 	ldw	r2,184(sp)
    4bdc:	28adc83a 	sub	r22,r5,r2
    4be0:	0580310e 	bge	zero,r22,4ca8 <___vfprintf_internal_r+0x9a0>
    4be4:	07000404 	movi	fp,16
    4be8:	d8801f17 	ldw	r2,124(sp)
    4bec:	e584140e 	bge	fp,r22,5c40 <___vfprintf_internal_r+0x1938>
    4bf0:	01400074 	movhi	r5,1
    4bf4:	2945e184 	addi	r5,r5,6022
    4bf8:	dc402915 	stw	r17,164(sp)
    4bfc:	d9402b15 	stw	r5,172(sp)
    4c00:	b023883a 	mov	r17,r22
    4c04:	04c001c4 	movi	r19,7
    4c08:	a82d883a 	mov	r22,r21
    4c0c:	902b883a 	mov	r21,r18
    4c10:	8025883a 	mov	r18,r16
    4c14:	dc002c17 	ldw	r16,176(sp)
    4c18:	00000306 	br	4c28 <___vfprintf_internal_r+0x920>
    4c1c:	8c7ffc04 	addi	r17,r17,-16
    4c20:	42000204 	addi	r8,r8,8
    4c24:	e440110e 	bge	fp,r17,4c6c <___vfprintf_internal_r+0x964>
    4c28:	18c00404 	addi	r3,r3,16
    4c2c:	10800044 	addi	r2,r2,1
    4c30:	45000015 	stw	r20,0(r8)
    4c34:	47000115 	stw	fp,4(r8)
    4c38:	d8c02015 	stw	r3,128(sp)
    4c3c:	d8801f15 	stw	r2,124(sp)
    4c40:	98bff60e 	bge	r19,r2,4c1c <__alt_mem_onchip_memory+0xf7804c1c>
    4c44:	d9801e04 	addi	r6,sp,120
    4c48:	b80b883a 	mov	r5,r23
    4c4c:	8009883a 	mov	r4,r16
    4c50:	000ba540 	call	ba54 <__sprint_r>
    4c54:	103eae1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    4c58:	8c7ffc04 	addi	r17,r17,-16
    4c5c:	d8c02017 	ldw	r3,128(sp)
    4c60:	d8801f17 	ldw	r2,124(sp)
    4c64:	da000404 	addi	r8,sp,16
    4c68:	e47fef16 	blt	fp,r17,4c28 <__alt_mem_onchip_memory+0xf7804c28>
    4c6c:	9021883a 	mov	r16,r18
    4c70:	a825883a 	mov	r18,r21
    4c74:	b02b883a 	mov	r21,r22
    4c78:	882d883a 	mov	r22,r17
    4c7c:	dc402917 	ldw	r17,164(sp)
    4c80:	d9002b17 	ldw	r4,172(sp)
    4c84:	1d87883a 	add	r3,r3,r22
    4c88:	10800044 	addi	r2,r2,1
    4c8c:	41000015 	stw	r4,0(r8)
    4c90:	45800115 	stw	r22,4(r8)
    4c94:	d8c02015 	stw	r3,128(sp)
    4c98:	d8801f15 	stw	r2,124(sp)
    4c9c:	010001c4 	movi	r4,7
    4ca0:	2081ee16 	blt	r4,r2,545c <___vfprintf_internal_r+0x1154>
    4ca4:	42000204 	addi	r8,r8,8
    4ca8:	9080400c 	andi	r2,r18,256
    4cac:	1001181e 	bne	r2,zero,5110 <___vfprintf_internal_r+0xe08>
    4cb0:	d9402e17 	ldw	r5,184(sp)
    4cb4:	d8801f17 	ldw	r2,124(sp)
    4cb8:	44000015 	stw	r16,0(r8)
    4cbc:	1947883a 	add	r3,r3,r5
    4cc0:	10800044 	addi	r2,r2,1
    4cc4:	41400115 	stw	r5,4(r8)
    4cc8:	d8c02015 	stw	r3,128(sp)
    4ccc:	d8801f15 	stw	r2,124(sp)
    4cd0:	010001c4 	movi	r4,7
    4cd4:	2081d316 	blt	r4,r2,5424 <___vfprintf_internal_r+0x111c>
    4cd8:	42000204 	addi	r8,r8,8
    4cdc:	9480010c 	andi	r18,r18,4
    4ce0:	90003226 	beq	r18,zero,4dac <___vfprintf_internal_r+0xaa4>
    4ce4:	d9403117 	ldw	r5,196(sp)
    4ce8:	d8802a17 	ldw	r2,168(sp)
    4cec:	28a1c83a 	sub	r16,r5,r2
    4cf0:	04002e0e 	bge	zero,r16,4dac <___vfprintf_internal_r+0xaa4>
    4cf4:	04400404 	movi	r17,16
    4cf8:	d8801f17 	ldw	r2,124(sp)
    4cfc:	8c04a20e 	bge	r17,r16,5f88 <___vfprintf_internal_r+0x1c80>
    4d00:	01400074 	movhi	r5,1
    4d04:	2945e584 	addi	r5,r5,6038
    4d08:	d9403515 	stw	r5,212(sp)
    4d0c:	048001c4 	movi	r18,7
    4d10:	dcc02c17 	ldw	r19,176(sp)
    4d14:	00000306 	br	4d24 <___vfprintf_internal_r+0xa1c>
    4d18:	843ffc04 	addi	r16,r16,-16
    4d1c:	42000204 	addi	r8,r8,8
    4d20:	8c00130e 	bge	r17,r16,4d70 <___vfprintf_internal_r+0xa68>
    4d24:	01000074 	movhi	r4,1
    4d28:	18c00404 	addi	r3,r3,16
    4d2c:	10800044 	addi	r2,r2,1
    4d30:	2105e584 	addi	r4,r4,6038
    4d34:	41000015 	stw	r4,0(r8)
    4d38:	44400115 	stw	r17,4(r8)
    4d3c:	d8c02015 	stw	r3,128(sp)
    4d40:	d8801f15 	stw	r2,124(sp)
    4d44:	90bff40e 	bge	r18,r2,4d18 <__alt_mem_onchip_memory+0xf7804d18>
    4d48:	d9801e04 	addi	r6,sp,120
    4d4c:	b80b883a 	mov	r5,r23
    4d50:	9809883a 	mov	r4,r19
    4d54:	000ba540 	call	ba54 <__sprint_r>
    4d58:	103e6d1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    4d5c:	843ffc04 	addi	r16,r16,-16
    4d60:	d8c02017 	ldw	r3,128(sp)
    4d64:	d8801f17 	ldw	r2,124(sp)
    4d68:	da000404 	addi	r8,sp,16
    4d6c:	8c3fed16 	blt	r17,r16,4d24 <__alt_mem_onchip_memory+0xf7804d24>
    4d70:	d9403517 	ldw	r5,212(sp)
    4d74:	1c07883a 	add	r3,r3,r16
    4d78:	10800044 	addi	r2,r2,1
    4d7c:	41400015 	stw	r5,0(r8)
    4d80:	44000115 	stw	r16,4(r8)
    4d84:	d8c02015 	stw	r3,128(sp)
    4d88:	d8801f15 	stw	r2,124(sp)
    4d8c:	010001c4 	movi	r4,7
    4d90:	2080060e 	bge	r4,r2,4dac <___vfprintf_internal_r+0xaa4>
    4d94:	d9002c17 	ldw	r4,176(sp)
    4d98:	d9801e04 	addi	r6,sp,120
    4d9c:	b80b883a 	mov	r5,r23
    4da0:	000ba540 	call	ba54 <__sprint_r>
    4da4:	103e5a1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    4da8:	d8c02017 	ldw	r3,128(sp)
    4dac:	d8803117 	ldw	r2,196(sp)
    4db0:	d9002a17 	ldw	r4,168(sp)
    4db4:	1100010e 	bge	r2,r4,4dbc <___vfprintf_internal_r+0xab4>
    4db8:	2005883a 	mov	r2,r4
    4dbc:	d9402f17 	ldw	r5,188(sp)
    4dc0:	288b883a 	add	r5,r5,r2
    4dc4:	d9402f15 	stw	r5,188(sp)
    4dc8:	18019e1e 	bne	r3,zero,5444 <___vfprintf_internal_r+0x113c>
    4dcc:	a8800007 	ldb	r2,0(r21)
    4dd0:	d8001f15 	stw	zero,124(sp)
    4dd4:	da000404 	addi	r8,sp,16
    4dd8:	103d851e 	bne	r2,zero,43f0 <__alt_mem_onchip_memory+0xf78043f0>
    4ddc:	a821883a 	mov	r16,r21
    4de0:	003d9b06 	br	4450 <__alt_mem_onchip_memory+0xf7804450>
    4de4:	18c03fcc 	andi	r3,r3,255
    4de8:	1805c11e 	bne	r3,zero,64f0 <___vfprintf_internal_r+0x21e8>
    4dec:	94800414 	ori	r18,r18,16
    4df0:	9080080c 	andi	r2,r18,32
    4df4:	10020c26 	beq	r2,zero,5628 <___vfprintf_internal_r+0x1320>
    4df8:	d8802d17 	ldw	r2,180(sp)
    4dfc:	d9002917 	ldw	r4,164(sp)
    4e00:	d8002785 	stb	zero,158(sp)
    4e04:	10c00204 	addi	r3,r2,8
    4e08:	14c00017 	ldw	r19,0(r2)
    4e0c:	15800117 	ldw	r22,4(r2)
    4e10:	20040f16 	blt	r4,zero,5e50 <___vfprintf_internal_r+0x1b48>
    4e14:	013fdfc4 	movi	r4,-129
    4e18:	9d84b03a 	or	r2,r19,r22
    4e1c:	d8c02d15 	stw	r3,180(sp)
    4e20:	9124703a 	and	r18,r18,r4
    4e24:	0039883a 	mov	fp,zero
    4e28:	103e891e 	bne	r2,zero,4850 <__alt_mem_onchip_memory+0xf7804850>
    4e2c:	d9002917 	ldw	r4,164(sp)
    4e30:	2002c11e 	bne	r4,zero,5938 <___vfprintf_internal_r+0x1630>
    4e34:	d8002915 	stw	zero,164(sp)
    4e38:	d8002e15 	stw	zero,184(sp)
    4e3c:	dc001e04 	addi	r16,sp,120
    4e40:	003ef806 	br	4a24 <__alt_mem_onchip_memory+0xf7804a24>
    4e44:	18c03fcc 	andi	r3,r3,255
    4e48:	18059d1e 	bne	r3,zero,64c0 <___vfprintf_internal_r+0x21b8>
    4e4c:	01400074 	movhi	r5,1
    4e50:	2945d504 	addi	r5,r5,5972
    4e54:	d9403915 	stw	r5,228(sp)
    4e58:	9080080c 	andi	r2,r18,32
    4e5c:	10005226 	beq	r2,zero,4fa8 <___vfprintf_internal_r+0xca0>
    4e60:	d8802d17 	ldw	r2,180(sp)
    4e64:	14c00017 	ldw	r19,0(r2)
    4e68:	15800117 	ldw	r22,4(r2)
    4e6c:	10800204 	addi	r2,r2,8
    4e70:	d8802d15 	stw	r2,180(sp)
    4e74:	9080004c 	andi	r2,r18,1
    4e78:	10019026 	beq	r2,zero,54bc <___vfprintf_internal_r+0x11b4>
    4e7c:	9d84b03a 	or	r2,r19,r22
    4e80:	10036926 	beq	r2,zero,5c28 <___vfprintf_internal_r+0x1920>
    4e84:	d8c02917 	ldw	r3,164(sp)
    4e88:	00800c04 	movi	r2,48
    4e8c:	d8802705 	stb	r2,156(sp)
    4e90:	dc402745 	stb	r17,157(sp)
    4e94:	d8002785 	stb	zero,158(sp)
    4e98:	90800094 	ori	r2,r18,2
    4e9c:	18045d16 	blt	r3,zero,6014 <___vfprintf_internal_r+0x1d0c>
    4ea0:	00bfdfc4 	movi	r2,-129
    4ea4:	90a4703a 	and	r18,r18,r2
    4ea8:	94800094 	ori	r18,r18,2
    4eac:	0039883a 	mov	fp,zero
    4eb0:	d9003917 	ldw	r4,228(sp)
    4eb4:	dc001e04 	addi	r16,sp,120
    4eb8:	988003cc 	andi	r2,r19,15
    4ebc:	b006973a 	slli	r3,r22,28
    4ec0:	2085883a 	add	r2,r4,r2
    4ec4:	9826d13a 	srli	r19,r19,4
    4ec8:	10800003 	ldbu	r2,0(r2)
    4ecc:	b02cd13a 	srli	r22,r22,4
    4ed0:	843fffc4 	addi	r16,r16,-1
    4ed4:	1ce6b03a 	or	r19,r3,r19
    4ed8:	80800005 	stb	r2,0(r16)
    4edc:	9d84b03a 	or	r2,r19,r22
    4ee0:	103ff51e 	bne	r2,zero,4eb8 <__alt_mem_onchip_memory+0xf7804eb8>
    4ee4:	d8c02817 	ldw	r3,160(sp)
    4ee8:	1c07c83a 	sub	r3,r3,r16
    4eec:	d8c02e15 	stw	r3,184(sp)
    4ef0:	003ecc06 	br	4a24 <__alt_mem_onchip_memory+0xf7804a24>
    4ef4:	18c03fcc 	andi	r3,r3,255
    4ef8:	183e9f26 	beq	r3,zero,4978 <__alt_mem_onchip_memory+0xf7804978>
    4efc:	d9c02785 	stb	r7,158(sp)
    4f00:	003e9d06 	br	4978 <__alt_mem_onchip_memory+0xf7804978>
    4f04:	00c00044 	movi	r3,1
    4f08:	01c00ac4 	movi	r7,43
    4f0c:	ac400007 	ldb	r17,0(r21)
    4f10:	003d5e06 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4f14:	94800814 	ori	r18,r18,32
    4f18:	ac400007 	ldb	r17,0(r21)
    4f1c:	003d5b06 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4f20:	d8c02d17 	ldw	r3,180(sp)
    4f24:	d8002785 	stb	zero,158(sp)
    4f28:	1c000017 	ldw	r16,0(r3)
    4f2c:	1cc00104 	addi	r19,r3,4
    4f30:	80041926 	beq	r16,zero,5f98 <___vfprintf_internal_r+0x1c90>
    4f34:	d9002917 	ldw	r4,164(sp)
    4f38:	2003d016 	blt	r4,zero,5e7c <___vfprintf_internal_r+0x1b74>
    4f3c:	200d883a 	mov	r6,r4
    4f40:	000b883a 	mov	r5,zero
    4f44:	8009883a 	mov	r4,r16
    4f48:	da003d15 	stw	r8,244(sp)
    4f4c:	0009b740 	call	9b74 <memchr>
    4f50:	da003d17 	ldw	r8,244(sp)
    4f54:	10045426 	beq	r2,zero,60a8 <___vfprintf_internal_r+0x1da0>
    4f58:	1405c83a 	sub	r2,r2,r16
    4f5c:	d8802e15 	stw	r2,184(sp)
    4f60:	1003cc16 	blt	r2,zero,5e94 <___vfprintf_internal_r+0x1b8c>
    4f64:	df002783 	ldbu	fp,158(sp)
    4f68:	d8802a15 	stw	r2,168(sp)
    4f6c:	dcc02d15 	stw	r19,180(sp)
    4f70:	d8002915 	stw	zero,164(sp)
    4f74:	d8003215 	stw	zero,200(sp)
    4f78:	003eb006 	br	4a3c <__alt_mem_onchip_memory+0xf7804a3c>
    4f7c:	18c03fcc 	andi	r3,r3,255
    4f80:	183f9b26 	beq	r3,zero,4df0 <__alt_mem_onchip_memory+0xf7804df0>
    4f84:	d9c02785 	stb	r7,158(sp)
    4f88:	003f9906 	br	4df0 <__alt_mem_onchip_memory+0xf7804df0>
    4f8c:	18c03fcc 	andi	r3,r3,255
    4f90:	1805551e 	bne	r3,zero,64e8 <___vfprintf_internal_r+0x21e0>
    4f94:	01400074 	movhi	r5,1
    4f98:	2945da04 	addi	r5,r5,5992
    4f9c:	d9403915 	stw	r5,228(sp)
    4fa0:	9080080c 	andi	r2,r18,32
    4fa4:	103fae1e 	bne	r2,zero,4e60 <__alt_mem_onchip_memory+0xf7804e60>
    4fa8:	9080040c 	andi	r2,r18,16
    4fac:	1002de26 	beq	r2,zero,5b28 <___vfprintf_internal_r+0x1820>
    4fb0:	d8c02d17 	ldw	r3,180(sp)
    4fb4:	002d883a 	mov	r22,zero
    4fb8:	1cc00017 	ldw	r19,0(r3)
    4fbc:	18c00104 	addi	r3,r3,4
    4fc0:	d8c02d15 	stw	r3,180(sp)
    4fc4:	003fab06 	br	4e74 <__alt_mem_onchip_memory+0xf7804e74>
    4fc8:	38803fcc 	andi	r2,r7,255
    4fcc:	1080201c 	xori	r2,r2,128
    4fd0:	10bfe004 	addi	r2,r2,-128
    4fd4:	1002d21e 	bne	r2,zero,5b20 <___vfprintf_internal_r+0x1818>
    4fd8:	00c00044 	movi	r3,1
    4fdc:	01c00804 	movi	r7,32
    4fe0:	ac400007 	ldb	r17,0(r21)
    4fe4:	003d2906 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4fe8:	94800054 	ori	r18,r18,1
    4fec:	ac400007 	ldb	r17,0(r21)
    4ff0:	003d2606 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4ff4:	18c03fcc 	andi	r3,r3,255
    4ff8:	183e0526 	beq	r3,zero,4810 <__alt_mem_onchip_memory+0xf7804810>
    4ffc:	d9c02785 	stb	r7,158(sp)
    5000:	003e0306 	br	4810 <__alt_mem_onchip_memory+0xf7804810>
    5004:	94801014 	ori	r18,r18,64
    5008:	ac400007 	ldb	r17,0(r21)
    500c:	003d1f06 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    5010:	ac400007 	ldb	r17,0(r21)
    5014:	8a438726 	beq	r17,r9,5e34 <___vfprintf_internal_r+0x1b2c>
    5018:	94800414 	ori	r18,r18,16
    501c:	003d1b06 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    5020:	18c03fcc 	andi	r3,r3,255
    5024:	1805341e 	bne	r3,zero,64f8 <___vfprintf_internal_r+0x21f0>
    5028:	9080080c 	andi	r2,r18,32
    502c:	1002cd26 	beq	r2,zero,5b64 <___vfprintf_internal_r+0x185c>
    5030:	d9402d17 	ldw	r5,180(sp)
    5034:	d9002f17 	ldw	r4,188(sp)
    5038:	28800017 	ldw	r2,0(r5)
    503c:	2007d7fa 	srai	r3,r4,31
    5040:	29400104 	addi	r5,r5,4
    5044:	d9402d15 	stw	r5,180(sp)
    5048:	11000015 	stw	r4,0(r2)
    504c:	10c00115 	stw	r3,4(r2)
    5050:	003ce506 	br	43e8 <__alt_mem_onchip_memory+0xf78043e8>
    5054:	d8c02d17 	ldw	r3,180(sp)
    5058:	d9002d17 	ldw	r4,180(sp)
    505c:	d8002785 	stb	zero,158(sp)
    5060:	18800017 	ldw	r2,0(r3)
    5064:	21000104 	addi	r4,r4,4
    5068:	00c00044 	movi	r3,1
    506c:	d8c02a15 	stw	r3,168(sp)
    5070:	d8801405 	stb	r2,80(sp)
    5074:	d9002d15 	stw	r4,180(sp)
    5078:	d8c02e15 	stw	r3,184(sp)
    507c:	d8002915 	stw	zero,164(sp)
    5080:	d8003215 	stw	zero,200(sp)
    5084:	dc001404 	addi	r16,sp,80
    5088:	0039883a 	mov	fp,zero
    508c:	003e7206 	br	4a58 <__alt_mem_onchip_memory+0xf7804a58>
    5090:	01000074 	movhi	r4,1
    5094:	2105da04 	addi	r4,r4,5992
    5098:	0039883a 	mov	fp,zero
    509c:	d9003915 	stw	r4,228(sp)
    50a0:	04401e04 	movi	r17,120
    50a4:	003f8206 	br	4eb0 <__alt_mem_onchip_memory+0xf7804eb0>
    50a8:	18c03fcc 	andi	r3,r3,255
    50ac:	1805061e 	bne	r3,zero,64c8 <___vfprintf_internal_r+0x21c0>
    50b0:	883d9126 	beq	r17,zero,46f8 <__alt_mem_onchip_memory+0xf78046f8>
    50b4:	00c00044 	movi	r3,1
    50b8:	d8c02a15 	stw	r3,168(sp)
    50bc:	dc401405 	stb	r17,80(sp)
    50c0:	d8002785 	stb	zero,158(sp)
    50c4:	003fec06 	br	5078 <__alt_mem_onchip_memory+0xf7805078>
    50c8:	01400074 	movhi	r5,1
    50cc:	2945da04 	addi	r5,r5,5992
    50d0:	d9403915 	stw	r5,228(sp)
    50d4:	d8c02d15 	stw	r3,180(sp)
    50d8:	1025883a 	mov	r18,r2
    50dc:	04401e04 	movi	r17,120
    50e0:	9d84b03a 	or	r2,r19,r22
    50e4:	1000fc1e 	bne	r2,zero,54d8 <___vfprintf_internal_r+0x11d0>
    50e8:	0039883a 	mov	fp,zero
    50ec:	00800084 	movi	r2,2
    50f0:	10803fcc 	andi	r2,r2,255
    50f4:	00c00044 	movi	r3,1
    50f8:	10c20f26 	beq	r2,r3,5938 <___vfprintf_internal_r+0x1630>
    50fc:	00c00084 	movi	r3,2
    5100:	10fd6326 	beq	r2,r3,4690 <__alt_mem_onchip_memory+0xf7804690>
    5104:	003e2d06 	br	49bc <__alt_mem_onchip_memory+0xf78049bc>
    5108:	d8c02017 	ldw	r3,128(sp)
    510c:	003e9306 	br	4b5c <__alt_mem_onchip_memory+0xf7804b5c>
    5110:	00801944 	movi	r2,101
    5114:	14407e0e 	bge	r2,r17,5310 <___vfprintf_internal_r+0x1008>
    5118:	d9003617 	ldw	r4,216(sp)
    511c:	d9403817 	ldw	r5,224(sp)
    5120:	000d883a 	mov	r6,zero
    5124:	000f883a 	mov	r7,zero
    5128:	d8c03c15 	stw	r3,240(sp)
    512c:	da003d15 	stw	r8,244(sp)
    5130:	000e3e40 	call	e3e4 <__eqdf2>
    5134:	d8c03c17 	ldw	r3,240(sp)
    5138:	da003d17 	ldw	r8,244(sp)
    513c:	1000f71e 	bne	r2,zero,551c <___vfprintf_internal_r+0x1214>
    5140:	d8801f17 	ldw	r2,124(sp)
    5144:	01000074 	movhi	r4,1
    5148:	2105e104 	addi	r4,r4,6020
    514c:	18c00044 	addi	r3,r3,1
    5150:	10800044 	addi	r2,r2,1
    5154:	41000015 	stw	r4,0(r8)
    5158:	01000044 	movi	r4,1
    515c:	41000115 	stw	r4,4(r8)
    5160:	d8c02015 	stw	r3,128(sp)
    5164:	d8801f15 	stw	r2,124(sp)
    5168:	010001c4 	movi	r4,7
    516c:	2082b816 	blt	r4,r2,5c50 <___vfprintf_internal_r+0x1948>
    5170:	42000204 	addi	r8,r8,8
    5174:	d8802617 	ldw	r2,152(sp)
    5178:	d9403317 	ldw	r5,204(sp)
    517c:	11400216 	blt	r2,r5,5188 <___vfprintf_internal_r+0xe80>
    5180:	9080004c 	andi	r2,r18,1
    5184:	103ed526 	beq	r2,zero,4cdc <__alt_mem_onchip_memory+0xf7804cdc>
    5188:	d8803717 	ldw	r2,220(sp)
    518c:	d9003417 	ldw	r4,208(sp)
    5190:	d9403717 	ldw	r5,220(sp)
    5194:	1887883a 	add	r3,r3,r2
    5198:	d8801f17 	ldw	r2,124(sp)
    519c:	41000015 	stw	r4,0(r8)
    51a0:	41400115 	stw	r5,4(r8)
    51a4:	10800044 	addi	r2,r2,1
    51a8:	d8c02015 	stw	r3,128(sp)
    51ac:	d8801f15 	stw	r2,124(sp)
    51b0:	010001c4 	movi	r4,7
    51b4:	20832916 	blt	r4,r2,5e5c <___vfprintf_internal_r+0x1b54>
    51b8:	42000204 	addi	r8,r8,8
    51bc:	d8803317 	ldw	r2,204(sp)
    51c0:	143fffc4 	addi	r16,r2,-1
    51c4:	043ec50e 	bge	zero,r16,4cdc <__alt_mem_onchip_memory+0xf7804cdc>
    51c8:	04400404 	movi	r17,16
    51cc:	d8801f17 	ldw	r2,124(sp)
    51d0:	8c00880e 	bge	r17,r16,53f4 <___vfprintf_internal_r+0x10ec>
    51d4:	01400074 	movhi	r5,1
    51d8:	2945e184 	addi	r5,r5,6022
    51dc:	d9402b15 	stw	r5,172(sp)
    51e0:	058001c4 	movi	r22,7
    51e4:	dcc02c17 	ldw	r19,176(sp)
    51e8:	00000306 	br	51f8 <___vfprintf_internal_r+0xef0>
    51ec:	42000204 	addi	r8,r8,8
    51f0:	843ffc04 	addi	r16,r16,-16
    51f4:	8c00820e 	bge	r17,r16,5400 <___vfprintf_internal_r+0x10f8>
    51f8:	18c00404 	addi	r3,r3,16
    51fc:	10800044 	addi	r2,r2,1
    5200:	45000015 	stw	r20,0(r8)
    5204:	44400115 	stw	r17,4(r8)
    5208:	d8c02015 	stw	r3,128(sp)
    520c:	d8801f15 	stw	r2,124(sp)
    5210:	b0bff60e 	bge	r22,r2,51ec <__alt_mem_onchip_memory+0xf78051ec>
    5214:	d9801e04 	addi	r6,sp,120
    5218:	b80b883a 	mov	r5,r23
    521c:	9809883a 	mov	r4,r19
    5220:	000ba540 	call	ba54 <__sprint_r>
    5224:	103d3a1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5228:	d8c02017 	ldw	r3,128(sp)
    522c:	d8801f17 	ldw	r2,124(sp)
    5230:	da000404 	addi	r8,sp,16
    5234:	003fee06 	br	51f0 <__alt_mem_onchip_memory+0xf78051f0>
    5238:	d9403117 	ldw	r5,196(sp)
    523c:	d8802a17 	ldw	r2,168(sp)
    5240:	28adc83a 	sub	r22,r5,r2
    5244:	05be630e 	bge	zero,r22,4bd4 <__alt_mem_onchip_memory+0xf7804bd4>
    5248:	07000404 	movi	fp,16
    524c:	d8801f17 	ldw	r2,124(sp)
    5250:	e5838f0e 	bge	fp,r22,6090 <___vfprintf_internal_r+0x1d88>
    5254:	01400074 	movhi	r5,1
    5258:	2945e184 	addi	r5,r5,6022
    525c:	dc403015 	stw	r17,192(sp)
    5260:	d9402b15 	stw	r5,172(sp)
    5264:	b023883a 	mov	r17,r22
    5268:	04c001c4 	movi	r19,7
    526c:	a82d883a 	mov	r22,r21
    5270:	902b883a 	mov	r21,r18
    5274:	8025883a 	mov	r18,r16
    5278:	dc002c17 	ldw	r16,176(sp)
    527c:	00000306 	br	528c <___vfprintf_internal_r+0xf84>
    5280:	8c7ffc04 	addi	r17,r17,-16
    5284:	42000204 	addi	r8,r8,8
    5288:	e440110e 	bge	fp,r17,52d0 <___vfprintf_internal_r+0xfc8>
    528c:	18c00404 	addi	r3,r3,16
    5290:	10800044 	addi	r2,r2,1
    5294:	45000015 	stw	r20,0(r8)
    5298:	47000115 	stw	fp,4(r8)
    529c:	d8c02015 	stw	r3,128(sp)
    52a0:	d8801f15 	stw	r2,124(sp)
    52a4:	98bff60e 	bge	r19,r2,5280 <__alt_mem_onchip_memory+0xf7805280>
    52a8:	d9801e04 	addi	r6,sp,120
    52ac:	b80b883a 	mov	r5,r23
    52b0:	8009883a 	mov	r4,r16
    52b4:	000ba540 	call	ba54 <__sprint_r>
    52b8:	103d151e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    52bc:	8c7ffc04 	addi	r17,r17,-16
    52c0:	d8c02017 	ldw	r3,128(sp)
    52c4:	d8801f17 	ldw	r2,124(sp)
    52c8:	da000404 	addi	r8,sp,16
    52cc:	e47fef16 	blt	fp,r17,528c <__alt_mem_onchip_memory+0xf780528c>
    52d0:	9021883a 	mov	r16,r18
    52d4:	a825883a 	mov	r18,r21
    52d8:	b02b883a 	mov	r21,r22
    52dc:	882d883a 	mov	r22,r17
    52e0:	dc403017 	ldw	r17,192(sp)
    52e4:	d9002b17 	ldw	r4,172(sp)
    52e8:	1d87883a 	add	r3,r3,r22
    52ec:	10800044 	addi	r2,r2,1
    52f0:	41000015 	stw	r4,0(r8)
    52f4:	45800115 	stw	r22,4(r8)
    52f8:	d8c02015 	stw	r3,128(sp)
    52fc:	d8801f15 	stw	r2,124(sp)
    5300:	010001c4 	movi	r4,7
    5304:	20818e16 	blt	r4,r2,5940 <___vfprintf_internal_r+0x1638>
    5308:	42000204 	addi	r8,r8,8
    530c:	003e3106 	br	4bd4 <__alt_mem_onchip_memory+0xf7804bd4>
    5310:	d9403317 	ldw	r5,204(sp)
    5314:	00800044 	movi	r2,1
    5318:	18c00044 	addi	r3,r3,1
    531c:	1141530e 	bge	r2,r5,586c <___vfprintf_internal_r+0x1564>
    5320:	dc401f17 	ldw	r17,124(sp)
    5324:	00800044 	movi	r2,1
    5328:	40800115 	stw	r2,4(r8)
    532c:	8c400044 	addi	r17,r17,1
    5330:	44000015 	stw	r16,0(r8)
    5334:	d8c02015 	stw	r3,128(sp)
    5338:	dc401f15 	stw	r17,124(sp)
    533c:	008001c4 	movi	r2,7
    5340:	14416b16 	blt	r2,r17,58f0 <___vfprintf_internal_r+0x15e8>
    5344:	42000204 	addi	r8,r8,8
    5348:	d8803717 	ldw	r2,220(sp)
    534c:	d9003417 	ldw	r4,208(sp)
    5350:	8c400044 	addi	r17,r17,1
    5354:	10c7883a 	add	r3,r2,r3
    5358:	40800115 	stw	r2,4(r8)
    535c:	41000015 	stw	r4,0(r8)
    5360:	d8c02015 	stw	r3,128(sp)
    5364:	dc401f15 	stw	r17,124(sp)
    5368:	008001c4 	movi	r2,7
    536c:	14416916 	blt	r2,r17,5914 <___vfprintf_internal_r+0x160c>
    5370:	45800204 	addi	r22,r8,8
    5374:	d9003617 	ldw	r4,216(sp)
    5378:	d9403817 	ldw	r5,224(sp)
    537c:	000d883a 	mov	r6,zero
    5380:	000f883a 	mov	r7,zero
    5384:	d8c03c15 	stw	r3,240(sp)
    5388:	000e3e40 	call	e3e4 <__eqdf2>
    538c:	d8c03c17 	ldw	r3,240(sp)
    5390:	1000bc26 	beq	r2,zero,5684 <___vfprintf_internal_r+0x137c>
    5394:	d9403317 	ldw	r5,204(sp)
    5398:	84000044 	addi	r16,r16,1
    539c:	8c400044 	addi	r17,r17,1
    53a0:	28bfffc4 	addi	r2,r5,-1
    53a4:	1887883a 	add	r3,r3,r2
    53a8:	b0800115 	stw	r2,4(r22)
    53ac:	b4000015 	stw	r16,0(r22)
    53b0:	d8c02015 	stw	r3,128(sp)
    53b4:	dc401f15 	stw	r17,124(sp)
    53b8:	008001c4 	movi	r2,7
    53bc:	14414316 	blt	r2,r17,58cc <___vfprintf_internal_r+0x15c4>
    53c0:	b5800204 	addi	r22,r22,8
    53c4:	d9003a17 	ldw	r4,232(sp)
    53c8:	df0022c4 	addi	fp,sp,139
    53cc:	8c400044 	addi	r17,r17,1
    53d0:	20c7883a 	add	r3,r4,r3
    53d4:	b7000015 	stw	fp,0(r22)
    53d8:	b1000115 	stw	r4,4(r22)
    53dc:	d8c02015 	stw	r3,128(sp)
    53e0:	dc401f15 	stw	r17,124(sp)
    53e4:	008001c4 	movi	r2,7
    53e8:	14400e16 	blt	r2,r17,5424 <___vfprintf_internal_r+0x111c>
    53ec:	b2000204 	addi	r8,r22,8
    53f0:	003e3a06 	br	4cdc <__alt_mem_onchip_memory+0xf7804cdc>
    53f4:	01000074 	movhi	r4,1
    53f8:	2105e184 	addi	r4,r4,6022
    53fc:	d9002b15 	stw	r4,172(sp)
    5400:	d9002b17 	ldw	r4,172(sp)
    5404:	1c07883a 	add	r3,r3,r16
    5408:	44000115 	stw	r16,4(r8)
    540c:	41000015 	stw	r4,0(r8)
    5410:	10800044 	addi	r2,r2,1
    5414:	d8c02015 	stw	r3,128(sp)
    5418:	d8801f15 	stw	r2,124(sp)
    541c:	010001c4 	movi	r4,7
    5420:	20be2d0e 	bge	r4,r2,4cd8 <__alt_mem_onchip_memory+0xf7804cd8>
    5424:	d9002c17 	ldw	r4,176(sp)
    5428:	d9801e04 	addi	r6,sp,120
    542c:	b80b883a 	mov	r5,r23
    5430:	000ba540 	call	ba54 <__sprint_r>
    5434:	103cb61e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5438:	d8c02017 	ldw	r3,128(sp)
    543c:	da000404 	addi	r8,sp,16
    5440:	003e2606 	br	4cdc <__alt_mem_onchip_memory+0xf7804cdc>
    5444:	d9002c17 	ldw	r4,176(sp)
    5448:	d9801e04 	addi	r6,sp,120
    544c:	b80b883a 	mov	r5,r23
    5450:	000ba540 	call	ba54 <__sprint_r>
    5454:	103e5d26 	beq	r2,zero,4dcc <__alt_mem_onchip_memory+0xf7804dcc>
    5458:	003cad06 	br	4710 <__alt_mem_onchip_memory+0xf7804710>
    545c:	d9002c17 	ldw	r4,176(sp)
    5460:	d9801e04 	addi	r6,sp,120
    5464:	b80b883a 	mov	r5,r23
    5468:	000ba540 	call	ba54 <__sprint_r>
    546c:	103ca81e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5470:	d8c02017 	ldw	r3,128(sp)
    5474:	da000404 	addi	r8,sp,16
    5478:	003e0b06 	br	4ca8 <__alt_mem_onchip_memory+0xf7804ca8>
    547c:	d9002c17 	ldw	r4,176(sp)
    5480:	d9801e04 	addi	r6,sp,120
    5484:	b80b883a 	mov	r5,r23
    5488:	000ba540 	call	ba54 <__sprint_r>
    548c:	103ca01e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5490:	d8c02017 	ldw	r3,128(sp)
    5494:	da000404 	addi	r8,sp,16
    5498:	003dbd06 	br	4b90 <__alt_mem_onchip_memory+0xf7804b90>
    549c:	d9002c17 	ldw	r4,176(sp)
    54a0:	d9801e04 	addi	r6,sp,120
    54a4:	b80b883a 	mov	r5,r23
    54a8:	000ba540 	call	ba54 <__sprint_r>
    54ac:	103c981e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    54b0:	d8c02017 	ldw	r3,128(sp)
    54b4:	da000404 	addi	r8,sp,16
    54b8:	003dc306 	br	4bc8 <__alt_mem_onchip_memory+0xf7804bc8>
    54bc:	d8802917 	ldw	r2,164(sp)
    54c0:	d8002785 	stb	zero,158(sp)
    54c4:	103f0616 	blt	r2,zero,50e0 <__alt_mem_onchip_memory+0xf78050e0>
    54c8:	00ffdfc4 	movi	r3,-129
    54cc:	9d84b03a 	or	r2,r19,r22
    54d0:	90e4703a 	and	r18,r18,r3
    54d4:	103c6b26 	beq	r2,zero,4684 <__alt_mem_onchip_memory+0xf7804684>
    54d8:	0039883a 	mov	fp,zero
    54dc:	003e7406 	br	4eb0 <__alt_mem_onchip_memory+0xf7804eb0>
    54e0:	9080040c 	andi	r2,r18,16
    54e4:	1001b326 	beq	r2,zero,5bb4 <___vfprintf_internal_r+0x18ac>
    54e8:	d9002d17 	ldw	r4,180(sp)
    54ec:	d9402917 	ldw	r5,164(sp)
    54f0:	d8002785 	stb	zero,158(sp)
    54f4:	20800104 	addi	r2,r4,4
    54f8:	24c00017 	ldw	r19,0(r4)
    54fc:	002d883a 	mov	r22,zero
    5500:	2801b516 	blt	r5,zero,5bd8 <___vfprintf_internal_r+0x18d0>
    5504:	00ffdfc4 	movi	r3,-129
    5508:	d8802d15 	stw	r2,180(sp)
    550c:	90e4703a 	and	r18,r18,r3
    5510:	983d2726 	beq	r19,zero,49b0 <__alt_mem_onchip_memory+0xf78049b0>
    5514:	0039883a 	mov	fp,zero
    5518:	003d2a06 	br	49c4 <__alt_mem_onchip_memory+0xf78049c4>
    551c:	dc402617 	ldw	r17,152(sp)
    5520:	0441d30e 	bge	zero,r17,5c70 <___vfprintf_internal_r+0x1968>
    5524:	dc403217 	ldw	r17,200(sp)
    5528:	d8803317 	ldw	r2,204(sp)
    552c:	1440010e 	bge	r2,r17,5534 <___vfprintf_internal_r+0x122c>
    5530:	1023883a 	mov	r17,r2
    5534:	04400a0e 	bge	zero,r17,5560 <___vfprintf_internal_r+0x1258>
    5538:	d8801f17 	ldw	r2,124(sp)
    553c:	1c47883a 	add	r3,r3,r17
    5540:	44000015 	stw	r16,0(r8)
    5544:	10800044 	addi	r2,r2,1
    5548:	44400115 	stw	r17,4(r8)
    554c:	d8c02015 	stw	r3,128(sp)
    5550:	d8801f15 	stw	r2,124(sp)
    5554:	010001c4 	movi	r4,7
    5558:	20826516 	blt	r4,r2,5ef0 <___vfprintf_internal_r+0x1be8>
    555c:	42000204 	addi	r8,r8,8
    5560:	88026116 	blt	r17,zero,5ee8 <___vfprintf_internal_r+0x1be0>
    5564:	d9003217 	ldw	r4,200(sp)
    5568:	2463c83a 	sub	r17,r4,r17
    556c:	04407b0e 	bge	zero,r17,575c <___vfprintf_internal_r+0x1454>
    5570:	05800404 	movi	r22,16
    5574:	d8801f17 	ldw	r2,124(sp)
    5578:	b4419d0e 	bge	r22,r17,5bf0 <___vfprintf_internal_r+0x18e8>
    557c:	01000074 	movhi	r4,1
    5580:	2105e184 	addi	r4,r4,6022
    5584:	d9002b15 	stw	r4,172(sp)
    5588:	070001c4 	movi	fp,7
    558c:	dcc02c17 	ldw	r19,176(sp)
    5590:	00000306 	br	55a0 <___vfprintf_internal_r+0x1298>
    5594:	42000204 	addi	r8,r8,8
    5598:	8c7ffc04 	addi	r17,r17,-16
    559c:	b441970e 	bge	r22,r17,5bfc <___vfprintf_internal_r+0x18f4>
    55a0:	18c00404 	addi	r3,r3,16
    55a4:	10800044 	addi	r2,r2,1
    55a8:	45000015 	stw	r20,0(r8)
    55ac:	45800115 	stw	r22,4(r8)
    55b0:	d8c02015 	stw	r3,128(sp)
    55b4:	d8801f15 	stw	r2,124(sp)
    55b8:	e0bff60e 	bge	fp,r2,5594 <__alt_mem_onchip_memory+0xf7805594>
    55bc:	d9801e04 	addi	r6,sp,120
    55c0:	b80b883a 	mov	r5,r23
    55c4:	9809883a 	mov	r4,r19
    55c8:	000ba540 	call	ba54 <__sprint_r>
    55cc:	103c501e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    55d0:	d8c02017 	ldw	r3,128(sp)
    55d4:	d8801f17 	ldw	r2,124(sp)
    55d8:	da000404 	addi	r8,sp,16
    55dc:	003fee06 	br	5598 <__alt_mem_onchip_memory+0xf7805598>
    55e0:	d9002c17 	ldw	r4,176(sp)
    55e4:	d9801e04 	addi	r6,sp,120
    55e8:	b80b883a 	mov	r5,r23
    55ec:	000ba540 	call	ba54 <__sprint_r>
    55f0:	103c471e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    55f4:	d8c02017 	ldw	r3,128(sp)
    55f8:	df002787 	ldb	fp,158(sp)
    55fc:	da000404 	addi	r8,sp,16
    5600:	003d5606 	br	4b5c <__alt_mem_onchip_memory+0xf7804b5c>
    5604:	9080040c 	andi	r2,r18,16
    5608:	10016126 	beq	r2,zero,5b90 <___vfprintf_internal_r+0x1888>
    560c:	d8802d17 	ldw	r2,180(sp)
    5610:	14c00017 	ldw	r19,0(r2)
    5614:	10800104 	addi	r2,r2,4
    5618:	d8802d15 	stw	r2,180(sp)
    561c:	982dd7fa 	srai	r22,r19,31
    5620:	b005883a 	mov	r2,r22
    5624:	003c8206 	br	4830 <__alt_mem_onchip_memory+0xf7804830>
    5628:	9080040c 	andi	r2,r18,16
    562c:	10003526 	beq	r2,zero,5704 <___vfprintf_internal_r+0x13fc>
    5630:	d9402d17 	ldw	r5,180(sp)
    5634:	d8c02917 	ldw	r3,164(sp)
    5638:	d8002785 	stb	zero,158(sp)
    563c:	28800104 	addi	r2,r5,4
    5640:	2cc00017 	ldw	r19,0(r5)
    5644:	002d883a 	mov	r22,zero
    5648:	18003716 	blt	r3,zero,5728 <___vfprintf_internal_r+0x1420>
    564c:	00ffdfc4 	movi	r3,-129
    5650:	d8802d15 	stw	r2,180(sp)
    5654:	90e4703a 	and	r18,r18,r3
    5658:	0039883a 	mov	fp,zero
    565c:	983df326 	beq	r19,zero,4e2c <__alt_mem_onchip_memory+0xf7804e2c>
    5660:	00800244 	movi	r2,9
    5664:	14fc7b36 	bltu	r2,r19,4854 <__alt_mem_onchip_memory+0xf7804854>
    5668:	d8c02817 	ldw	r3,160(sp)
    566c:	dc001dc4 	addi	r16,sp,119
    5670:	9cc00c04 	addi	r19,r19,48
    5674:	1c07c83a 	sub	r3,r3,r16
    5678:	dcc01dc5 	stb	r19,119(sp)
    567c:	d8c02e15 	stw	r3,184(sp)
    5680:	003ce806 	br	4a24 <__alt_mem_onchip_memory+0xf7804a24>
    5684:	d8803317 	ldw	r2,204(sp)
    5688:	143fffc4 	addi	r16,r2,-1
    568c:	043f4d0e 	bge	zero,r16,53c4 <__alt_mem_onchip_memory+0xf78053c4>
    5690:	07000404 	movi	fp,16
    5694:	e400810e 	bge	fp,r16,589c <___vfprintf_internal_r+0x1594>
    5698:	01400074 	movhi	r5,1
    569c:	2945e184 	addi	r5,r5,6022
    56a0:	d9402b15 	stw	r5,172(sp)
    56a4:	01c001c4 	movi	r7,7
    56a8:	dcc02c17 	ldw	r19,176(sp)
    56ac:	00000306 	br	56bc <___vfprintf_internal_r+0x13b4>
    56b0:	b5800204 	addi	r22,r22,8
    56b4:	843ffc04 	addi	r16,r16,-16
    56b8:	e4007b0e 	bge	fp,r16,58a8 <___vfprintf_internal_r+0x15a0>
    56bc:	18c00404 	addi	r3,r3,16
    56c0:	8c400044 	addi	r17,r17,1
    56c4:	b5000015 	stw	r20,0(r22)
    56c8:	b7000115 	stw	fp,4(r22)
    56cc:	d8c02015 	stw	r3,128(sp)
    56d0:	dc401f15 	stw	r17,124(sp)
    56d4:	3c7ff60e 	bge	r7,r17,56b0 <__alt_mem_onchip_memory+0xf78056b0>
    56d8:	d9801e04 	addi	r6,sp,120
    56dc:	b80b883a 	mov	r5,r23
    56e0:	9809883a 	mov	r4,r19
    56e4:	d9c03c15 	stw	r7,240(sp)
    56e8:	000ba540 	call	ba54 <__sprint_r>
    56ec:	d9c03c17 	ldw	r7,240(sp)
    56f0:	103c071e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    56f4:	d8c02017 	ldw	r3,128(sp)
    56f8:	dc401f17 	ldw	r17,124(sp)
    56fc:	dd800404 	addi	r22,sp,16
    5700:	003fec06 	br	56b4 <__alt_mem_onchip_memory+0xf78056b4>
    5704:	9080100c 	andi	r2,r18,64
    5708:	d8002785 	stb	zero,158(sp)
    570c:	10010e26 	beq	r2,zero,5b48 <___vfprintf_internal_r+0x1840>
    5710:	d9002d17 	ldw	r4,180(sp)
    5714:	d9402917 	ldw	r5,164(sp)
    5718:	002d883a 	mov	r22,zero
    571c:	20800104 	addi	r2,r4,4
    5720:	24c0000b 	ldhu	r19,0(r4)
    5724:	283fc90e 	bge	r5,zero,564c <__alt_mem_onchip_memory+0xf780564c>
    5728:	d8802d15 	stw	r2,180(sp)
    572c:	0039883a 	mov	fp,zero
    5730:	9d84b03a 	or	r2,r19,r22
    5734:	103c461e 	bne	r2,zero,4850 <__alt_mem_onchip_memory+0xf7804850>
    5738:	00800044 	movi	r2,1
    573c:	003e6c06 	br	50f0 <__alt_mem_onchip_memory+0xf78050f0>
    5740:	d9002c17 	ldw	r4,176(sp)
    5744:	d9801e04 	addi	r6,sp,120
    5748:	b80b883a 	mov	r5,r23
    574c:	000ba540 	call	ba54 <__sprint_r>
    5750:	103bef1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5754:	d8c02017 	ldw	r3,128(sp)
    5758:	da000404 	addi	r8,sp,16
    575c:	d9003217 	ldw	r4,200(sp)
    5760:	d8802617 	ldw	r2,152(sp)
    5764:	d9403317 	ldw	r5,204(sp)
    5768:	8123883a 	add	r17,r16,r4
    576c:	11400216 	blt	r2,r5,5778 <___vfprintf_internal_r+0x1470>
    5770:	9100004c 	andi	r4,r18,1
    5774:	20000d26 	beq	r4,zero,57ac <___vfprintf_internal_r+0x14a4>
    5778:	d9003717 	ldw	r4,220(sp)
    577c:	d9403417 	ldw	r5,208(sp)
    5780:	1907883a 	add	r3,r3,r4
    5784:	d9001f17 	ldw	r4,124(sp)
    5788:	41400015 	stw	r5,0(r8)
    578c:	d9403717 	ldw	r5,220(sp)
    5790:	21000044 	addi	r4,r4,1
    5794:	d8c02015 	stw	r3,128(sp)
    5798:	41400115 	stw	r5,4(r8)
    579c:	d9001f15 	stw	r4,124(sp)
    57a0:	014001c4 	movi	r5,7
    57a4:	2901e816 	blt	r5,r4,5f48 <___vfprintf_internal_r+0x1c40>
    57a8:	42000204 	addi	r8,r8,8
    57ac:	d9003317 	ldw	r4,204(sp)
    57b0:	8121883a 	add	r16,r16,r4
    57b4:	2085c83a 	sub	r2,r4,r2
    57b8:	8461c83a 	sub	r16,r16,r17
    57bc:	1400010e 	bge	r2,r16,57c4 <___vfprintf_internal_r+0x14bc>
    57c0:	1021883a 	mov	r16,r2
    57c4:	04000a0e 	bge	zero,r16,57f0 <___vfprintf_internal_r+0x14e8>
    57c8:	d9001f17 	ldw	r4,124(sp)
    57cc:	1c07883a 	add	r3,r3,r16
    57d0:	44400015 	stw	r17,0(r8)
    57d4:	21000044 	addi	r4,r4,1
    57d8:	44000115 	stw	r16,4(r8)
    57dc:	d8c02015 	stw	r3,128(sp)
    57e0:	d9001f15 	stw	r4,124(sp)
    57e4:	014001c4 	movi	r5,7
    57e8:	2901fb16 	blt	r5,r4,5fd8 <___vfprintf_internal_r+0x1cd0>
    57ec:	42000204 	addi	r8,r8,8
    57f0:	8001f716 	blt	r16,zero,5fd0 <___vfprintf_internal_r+0x1cc8>
    57f4:	1421c83a 	sub	r16,r2,r16
    57f8:	043d380e 	bge	zero,r16,4cdc <__alt_mem_onchip_memory+0xf7804cdc>
    57fc:	04400404 	movi	r17,16
    5800:	d8801f17 	ldw	r2,124(sp)
    5804:	8c3efb0e 	bge	r17,r16,53f4 <__alt_mem_onchip_memory+0xf78053f4>
    5808:	01400074 	movhi	r5,1
    580c:	2945e184 	addi	r5,r5,6022
    5810:	d9402b15 	stw	r5,172(sp)
    5814:	058001c4 	movi	r22,7
    5818:	dcc02c17 	ldw	r19,176(sp)
    581c:	00000306 	br	582c <___vfprintf_internal_r+0x1524>
    5820:	42000204 	addi	r8,r8,8
    5824:	843ffc04 	addi	r16,r16,-16
    5828:	8c3ef50e 	bge	r17,r16,5400 <__alt_mem_onchip_memory+0xf7805400>
    582c:	18c00404 	addi	r3,r3,16
    5830:	10800044 	addi	r2,r2,1
    5834:	45000015 	stw	r20,0(r8)
    5838:	44400115 	stw	r17,4(r8)
    583c:	d8c02015 	stw	r3,128(sp)
    5840:	d8801f15 	stw	r2,124(sp)
    5844:	b0bff60e 	bge	r22,r2,5820 <__alt_mem_onchip_memory+0xf7805820>
    5848:	d9801e04 	addi	r6,sp,120
    584c:	b80b883a 	mov	r5,r23
    5850:	9809883a 	mov	r4,r19
    5854:	000ba540 	call	ba54 <__sprint_r>
    5858:	103bad1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    585c:	d8c02017 	ldw	r3,128(sp)
    5860:	d8801f17 	ldw	r2,124(sp)
    5864:	da000404 	addi	r8,sp,16
    5868:	003fee06 	br	5824 <__alt_mem_onchip_memory+0xf7805824>
    586c:	9088703a 	and	r4,r18,r2
    5870:	203eab1e 	bne	r4,zero,5320 <__alt_mem_onchip_memory+0xf7805320>
    5874:	dc401f17 	ldw	r17,124(sp)
    5878:	40800115 	stw	r2,4(r8)
    587c:	44000015 	stw	r16,0(r8)
    5880:	8c400044 	addi	r17,r17,1
    5884:	d8c02015 	stw	r3,128(sp)
    5888:	dc401f15 	stw	r17,124(sp)
    588c:	008001c4 	movi	r2,7
    5890:	14400e16 	blt	r2,r17,58cc <___vfprintf_internal_r+0x15c4>
    5894:	45800204 	addi	r22,r8,8
    5898:	003eca06 	br	53c4 <__alt_mem_onchip_memory+0xf78053c4>
    589c:	01000074 	movhi	r4,1
    58a0:	2105e184 	addi	r4,r4,6022
    58a4:	d9002b15 	stw	r4,172(sp)
    58a8:	d8802b17 	ldw	r2,172(sp)
    58ac:	1c07883a 	add	r3,r3,r16
    58b0:	8c400044 	addi	r17,r17,1
    58b4:	b0800015 	stw	r2,0(r22)
    58b8:	b4000115 	stw	r16,4(r22)
    58bc:	d8c02015 	stw	r3,128(sp)
    58c0:	dc401f15 	stw	r17,124(sp)
    58c4:	008001c4 	movi	r2,7
    58c8:	147ebd0e 	bge	r2,r17,53c0 <__alt_mem_onchip_memory+0xf78053c0>
    58cc:	d9002c17 	ldw	r4,176(sp)
    58d0:	d9801e04 	addi	r6,sp,120
    58d4:	b80b883a 	mov	r5,r23
    58d8:	000ba540 	call	ba54 <__sprint_r>
    58dc:	103b8c1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    58e0:	d8c02017 	ldw	r3,128(sp)
    58e4:	dc401f17 	ldw	r17,124(sp)
    58e8:	dd800404 	addi	r22,sp,16
    58ec:	003eb506 	br	53c4 <__alt_mem_onchip_memory+0xf78053c4>
    58f0:	d9002c17 	ldw	r4,176(sp)
    58f4:	d9801e04 	addi	r6,sp,120
    58f8:	b80b883a 	mov	r5,r23
    58fc:	000ba540 	call	ba54 <__sprint_r>
    5900:	103b831e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5904:	d8c02017 	ldw	r3,128(sp)
    5908:	dc401f17 	ldw	r17,124(sp)
    590c:	da000404 	addi	r8,sp,16
    5910:	003e8d06 	br	5348 <__alt_mem_onchip_memory+0xf7805348>
    5914:	d9002c17 	ldw	r4,176(sp)
    5918:	d9801e04 	addi	r6,sp,120
    591c:	b80b883a 	mov	r5,r23
    5920:	000ba540 	call	ba54 <__sprint_r>
    5924:	103b7a1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5928:	d8c02017 	ldw	r3,128(sp)
    592c:	dc401f17 	ldw	r17,124(sp)
    5930:	dd800404 	addi	r22,sp,16
    5934:	003e8f06 	br	5374 <__alt_mem_onchip_memory+0xf7805374>
    5938:	0027883a 	mov	r19,zero
    593c:	003f4a06 	br	5668 <__alt_mem_onchip_memory+0xf7805668>
    5940:	d9002c17 	ldw	r4,176(sp)
    5944:	d9801e04 	addi	r6,sp,120
    5948:	b80b883a 	mov	r5,r23
    594c:	000ba540 	call	ba54 <__sprint_r>
    5950:	103b6f1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5954:	d8c02017 	ldw	r3,128(sp)
    5958:	da000404 	addi	r8,sp,16
    595c:	003c9d06 	br	4bd4 <__alt_mem_onchip_memory+0xf7804bd4>
    5960:	04e7c83a 	sub	r19,zero,r19
    5964:	9804c03a 	cmpne	r2,r19,zero
    5968:	05adc83a 	sub	r22,zero,r22
    596c:	b0adc83a 	sub	r22,r22,r2
    5970:	d8802917 	ldw	r2,164(sp)
    5974:	07000b44 	movi	fp,45
    5978:	df002785 	stb	fp,158(sp)
    597c:	10017b16 	blt	r2,zero,5f6c <___vfprintf_internal_r+0x1c64>
    5980:	00bfdfc4 	movi	r2,-129
    5984:	90a4703a 	and	r18,r18,r2
    5988:	003bb106 	br	4850 <__alt_mem_onchip_memory+0xf7804850>
    598c:	d9003617 	ldw	r4,216(sp)
    5990:	d9403817 	ldw	r5,224(sp)
    5994:	da003d15 	stw	r8,244(sp)
    5998:	00017ec0 	call	17ec <__fpclassifyd>
    599c:	da003d17 	ldw	r8,244(sp)
    59a0:	1000f026 	beq	r2,zero,5d64 <___vfprintf_internal_r+0x1a5c>
    59a4:	d9002917 	ldw	r4,164(sp)
    59a8:	05bff7c4 	movi	r22,-33
    59ac:	00bfffc4 	movi	r2,-1
    59b0:	8dac703a 	and	r22,r17,r22
    59b4:	20820026 	beq	r4,r2,61b8 <___vfprintf_internal_r+0x1eb0>
    59b8:	008011c4 	movi	r2,71
    59bc:	b081f726 	beq	r22,r2,619c <___vfprintf_internal_r+0x1e94>
    59c0:	d9003817 	ldw	r4,224(sp)
    59c4:	90c04014 	ori	r3,r18,256
    59c8:	d8c02b15 	stw	r3,172(sp)
    59cc:	20021516 	blt	r4,zero,6224 <___vfprintf_internal_r+0x1f1c>
    59d0:	dcc03817 	ldw	r19,224(sp)
    59d4:	d8002a05 	stb	zero,168(sp)
    59d8:	00801984 	movi	r2,102
    59dc:	8881f926 	beq	r17,r2,61c4 <___vfprintf_internal_r+0x1ebc>
    59e0:	00801184 	movi	r2,70
    59e4:	88821c26 	beq	r17,r2,6258 <___vfprintf_internal_r+0x1f50>
    59e8:	00801144 	movi	r2,69
    59ec:	b081ef26 	beq	r22,r2,61ac <___vfprintf_internal_r+0x1ea4>
    59f0:	d8c02917 	ldw	r3,164(sp)
    59f4:	d8802104 	addi	r2,sp,132
    59f8:	d8800315 	stw	r2,12(sp)
    59fc:	d9403617 	ldw	r5,216(sp)
    5a00:	d8802504 	addi	r2,sp,148
    5a04:	d9002c17 	ldw	r4,176(sp)
    5a08:	d8800215 	stw	r2,8(sp)
    5a0c:	d8802604 	addi	r2,sp,152
    5a10:	d8c00015 	stw	r3,0(sp)
    5a14:	d8800115 	stw	r2,4(sp)
    5a18:	01c00084 	movi	r7,2
    5a1c:	980d883a 	mov	r6,r19
    5a20:	d8c03c15 	stw	r3,240(sp)
    5a24:	da003d15 	stw	r8,244(sp)
    5a28:	000692c0 	call	692c <_dtoa_r>
    5a2c:	1021883a 	mov	r16,r2
    5a30:	008019c4 	movi	r2,103
    5a34:	d8c03c17 	ldw	r3,240(sp)
    5a38:	da003d17 	ldw	r8,244(sp)
    5a3c:	88817126 	beq	r17,r2,6004 <___vfprintf_internal_r+0x1cfc>
    5a40:	008011c4 	movi	r2,71
    5a44:	88829226 	beq	r17,r2,6490 <___vfprintf_internal_r+0x2188>
    5a48:	80f9883a 	add	fp,r16,r3
    5a4c:	d9003617 	ldw	r4,216(sp)
    5a50:	000d883a 	mov	r6,zero
    5a54:	000f883a 	mov	r7,zero
    5a58:	980b883a 	mov	r5,r19
    5a5c:	da003d15 	stw	r8,244(sp)
    5a60:	000e3e40 	call	e3e4 <__eqdf2>
    5a64:	da003d17 	ldw	r8,244(sp)
    5a68:	10018d26 	beq	r2,zero,60a0 <___vfprintf_internal_r+0x1d98>
    5a6c:	d8802117 	ldw	r2,132(sp)
    5a70:	1700062e 	bgeu	r2,fp,5a8c <___vfprintf_internal_r+0x1784>
    5a74:	01000c04 	movi	r4,48
    5a78:	10c00044 	addi	r3,r2,1
    5a7c:	d8c02115 	stw	r3,132(sp)
    5a80:	11000005 	stb	r4,0(r2)
    5a84:	d8802117 	ldw	r2,132(sp)
    5a88:	173ffb36 	bltu	r2,fp,5a78 <__alt_mem_onchip_memory+0xf7805a78>
    5a8c:	1405c83a 	sub	r2,r2,r16
    5a90:	d8803315 	stw	r2,204(sp)
    5a94:	008011c4 	movi	r2,71
    5a98:	b0817626 	beq	r22,r2,6074 <___vfprintf_internal_r+0x1d6c>
    5a9c:	00801944 	movi	r2,101
    5aa0:	1442810e 	bge	r2,r17,64a8 <___vfprintf_internal_r+0x21a0>
    5aa4:	d8c02617 	ldw	r3,152(sp)
    5aa8:	00801984 	movi	r2,102
    5aac:	d8c03215 	stw	r3,200(sp)
    5ab0:	8881fe26 	beq	r17,r2,62ac <___vfprintf_internal_r+0x1fa4>
    5ab4:	d8c03217 	ldw	r3,200(sp)
    5ab8:	d9003317 	ldw	r4,204(sp)
    5abc:	1901dd16 	blt	r3,r4,6234 <___vfprintf_internal_r+0x1f2c>
    5ac0:	9480004c 	andi	r18,r18,1
    5ac4:	90022b1e 	bne	r18,zero,6374 <___vfprintf_internal_r+0x206c>
    5ac8:	1805883a 	mov	r2,r3
    5acc:	18028016 	blt	r3,zero,64d0 <___vfprintf_internal_r+0x21c8>
    5ad0:	d8c03217 	ldw	r3,200(sp)
    5ad4:	044019c4 	movi	r17,103
    5ad8:	d8c02e15 	stw	r3,184(sp)
    5adc:	df002a07 	ldb	fp,168(sp)
    5ae0:	e001531e 	bne	fp,zero,6030 <___vfprintf_internal_r+0x1d28>
    5ae4:	df002783 	ldbu	fp,158(sp)
    5ae8:	d8802a15 	stw	r2,168(sp)
    5aec:	dc802b17 	ldw	r18,172(sp)
    5af0:	d8002915 	stw	zero,164(sp)
    5af4:	003bd106 	br	4a3c <__alt_mem_onchip_memory+0xf7804a3c>
    5af8:	d8802d17 	ldw	r2,180(sp)
    5afc:	d8c02d17 	ldw	r3,180(sp)
    5b00:	d9002d17 	ldw	r4,180(sp)
    5b04:	10800017 	ldw	r2,0(r2)
    5b08:	18c00117 	ldw	r3,4(r3)
    5b0c:	21000204 	addi	r4,r4,8
    5b10:	d8803615 	stw	r2,216(sp)
    5b14:	d8c03815 	stw	r3,224(sp)
    5b18:	d9002d15 	stw	r4,180(sp)
    5b1c:	003b7506 	br	48f4 <__alt_mem_onchip_memory+0xf78048f4>
    5b20:	ac400007 	ldb	r17,0(r21)
    5b24:	003a5906 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    5b28:	9080100c 	andi	r2,r18,64
    5b2c:	1000a826 	beq	r2,zero,5dd0 <___vfprintf_internal_r+0x1ac8>
    5b30:	d9002d17 	ldw	r4,180(sp)
    5b34:	002d883a 	mov	r22,zero
    5b38:	24c0000b 	ldhu	r19,0(r4)
    5b3c:	21000104 	addi	r4,r4,4
    5b40:	d9002d15 	stw	r4,180(sp)
    5b44:	003ccb06 	br	4e74 <__alt_mem_onchip_memory+0xf7804e74>
    5b48:	d8c02d17 	ldw	r3,180(sp)
    5b4c:	d9002917 	ldw	r4,164(sp)
    5b50:	002d883a 	mov	r22,zero
    5b54:	18800104 	addi	r2,r3,4
    5b58:	1cc00017 	ldw	r19,0(r3)
    5b5c:	203ebb0e 	bge	r4,zero,564c <__alt_mem_onchip_memory+0xf780564c>
    5b60:	003ef106 	br	5728 <__alt_mem_onchip_memory+0xf7805728>
    5b64:	9080040c 	andi	r2,r18,16
    5b68:	1000921e 	bne	r2,zero,5db4 <___vfprintf_internal_r+0x1aac>
    5b6c:	9480100c 	andi	r18,r18,64
    5b70:	90013926 	beq	r18,zero,6058 <___vfprintf_internal_r+0x1d50>
    5b74:	d9002d17 	ldw	r4,180(sp)
    5b78:	d9402f17 	ldw	r5,188(sp)
    5b7c:	20800017 	ldw	r2,0(r4)
    5b80:	21000104 	addi	r4,r4,4
    5b84:	d9002d15 	stw	r4,180(sp)
    5b88:	1140000d 	sth	r5,0(r2)
    5b8c:	003a1606 	br	43e8 <__alt_mem_onchip_memory+0xf78043e8>
    5b90:	9080100c 	andi	r2,r18,64
    5b94:	10008026 	beq	r2,zero,5d98 <___vfprintf_internal_r+0x1a90>
    5b98:	d8c02d17 	ldw	r3,180(sp)
    5b9c:	1cc0000f 	ldh	r19,0(r3)
    5ba0:	18c00104 	addi	r3,r3,4
    5ba4:	d8c02d15 	stw	r3,180(sp)
    5ba8:	982dd7fa 	srai	r22,r19,31
    5bac:	b005883a 	mov	r2,r22
    5bb0:	003b1f06 	br	4830 <__alt_mem_onchip_memory+0xf7804830>
    5bb4:	9080100c 	andi	r2,r18,64
    5bb8:	d8002785 	stb	zero,158(sp)
    5bbc:	10008a1e 	bne	r2,zero,5de8 <___vfprintf_internal_r+0x1ae0>
    5bc0:	d9402d17 	ldw	r5,180(sp)
    5bc4:	d8c02917 	ldw	r3,164(sp)
    5bc8:	002d883a 	mov	r22,zero
    5bcc:	28800104 	addi	r2,r5,4
    5bd0:	2cc00017 	ldw	r19,0(r5)
    5bd4:	183e4b0e 	bge	r3,zero,5504 <__alt_mem_onchip_memory+0xf7805504>
    5bd8:	9d86b03a 	or	r3,r19,r22
    5bdc:	d8802d15 	stw	r2,180(sp)
    5be0:	183e4c1e 	bne	r3,zero,5514 <__alt_mem_onchip_memory+0xf7805514>
    5be4:	0039883a 	mov	fp,zero
    5be8:	0005883a 	mov	r2,zero
    5bec:	003d4006 	br	50f0 <__alt_mem_onchip_memory+0xf78050f0>
    5bf0:	01400074 	movhi	r5,1
    5bf4:	2945e184 	addi	r5,r5,6022
    5bf8:	d9402b15 	stw	r5,172(sp)
    5bfc:	d9402b17 	ldw	r5,172(sp)
    5c00:	1c47883a 	add	r3,r3,r17
    5c04:	10800044 	addi	r2,r2,1
    5c08:	41400015 	stw	r5,0(r8)
    5c0c:	44400115 	stw	r17,4(r8)
    5c10:	d8c02015 	stw	r3,128(sp)
    5c14:	d8801f15 	stw	r2,124(sp)
    5c18:	010001c4 	movi	r4,7
    5c1c:	20bec816 	blt	r4,r2,5740 <__alt_mem_onchip_memory+0xf7805740>
    5c20:	42000204 	addi	r8,r8,8
    5c24:	003ecd06 	br	575c <__alt_mem_onchip_memory+0xf780575c>
    5c28:	d9002917 	ldw	r4,164(sp)
    5c2c:	d8002785 	stb	zero,158(sp)
    5c30:	203d2d16 	blt	r4,zero,50e8 <__alt_mem_onchip_memory+0xf78050e8>
    5c34:	00bfdfc4 	movi	r2,-129
    5c38:	90a4703a 	and	r18,r18,r2
    5c3c:	003a9106 	br	4684 <__alt_mem_onchip_memory+0xf7804684>
    5c40:	01000074 	movhi	r4,1
    5c44:	2105e184 	addi	r4,r4,6022
    5c48:	d9002b15 	stw	r4,172(sp)
    5c4c:	003c0c06 	br	4c80 <__alt_mem_onchip_memory+0xf7804c80>
    5c50:	d9002c17 	ldw	r4,176(sp)
    5c54:	d9801e04 	addi	r6,sp,120
    5c58:	b80b883a 	mov	r5,r23
    5c5c:	000ba540 	call	ba54 <__sprint_r>
    5c60:	103aab1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5c64:	d8c02017 	ldw	r3,128(sp)
    5c68:	da000404 	addi	r8,sp,16
    5c6c:	003d4106 	br	5174 <__alt_mem_onchip_memory+0xf7805174>
    5c70:	d8801f17 	ldw	r2,124(sp)
    5c74:	01400074 	movhi	r5,1
    5c78:	01000044 	movi	r4,1
    5c7c:	18c00044 	addi	r3,r3,1
    5c80:	10800044 	addi	r2,r2,1
    5c84:	2945e104 	addi	r5,r5,6020
    5c88:	41000115 	stw	r4,4(r8)
    5c8c:	41400015 	stw	r5,0(r8)
    5c90:	d8c02015 	stw	r3,128(sp)
    5c94:	d8801f15 	stw	r2,124(sp)
    5c98:	010001c4 	movi	r4,7
    5c9c:	20805c16 	blt	r4,r2,5e10 <___vfprintf_internal_r+0x1b08>
    5ca0:	42000204 	addi	r8,r8,8
    5ca4:	8800041e 	bne	r17,zero,5cb8 <___vfprintf_internal_r+0x19b0>
    5ca8:	d8803317 	ldw	r2,204(sp)
    5cac:	1000021e 	bne	r2,zero,5cb8 <___vfprintf_internal_r+0x19b0>
    5cb0:	9080004c 	andi	r2,r18,1
    5cb4:	103c0926 	beq	r2,zero,4cdc <__alt_mem_onchip_memory+0xf7804cdc>
    5cb8:	d9003717 	ldw	r4,220(sp)
    5cbc:	d8801f17 	ldw	r2,124(sp)
    5cc0:	d9403417 	ldw	r5,208(sp)
    5cc4:	20c7883a 	add	r3,r4,r3
    5cc8:	10800044 	addi	r2,r2,1
    5ccc:	41000115 	stw	r4,4(r8)
    5cd0:	41400015 	stw	r5,0(r8)
    5cd4:	d8c02015 	stw	r3,128(sp)
    5cd8:	d8801f15 	stw	r2,124(sp)
    5cdc:	010001c4 	movi	r4,7
    5ce0:	20812116 	blt	r4,r2,6168 <___vfprintf_internal_r+0x1e60>
    5ce4:	42000204 	addi	r8,r8,8
    5ce8:	0463c83a 	sub	r17,zero,r17
    5cec:	0440730e 	bge	zero,r17,5ebc <___vfprintf_internal_r+0x1bb4>
    5cf0:	05800404 	movi	r22,16
    5cf4:	b440860e 	bge	r22,r17,5f10 <___vfprintf_internal_r+0x1c08>
    5cf8:	01400074 	movhi	r5,1
    5cfc:	2945e184 	addi	r5,r5,6022
    5d00:	d9402b15 	stw	r5,172(sp)
    5d04:	070001c4 	movi	fp,7
    5d08:	dcc02c17 	ldw	r19,176(sp)
    5d0c:	00000306 	br	5d1c <___vfprintf_internal_r+0x1a14>
    5d10:	42000204 	addi	r8,r8,8
    5d14:	8c7ffc04 	addi	r17,r17,-16
    5d18:	b440800e 	bge	r22,r17,5f1c <___vfprintf_internal_r+0x1c14>
    5d1c:	18c00404 	addi	r3,r3,16
    5d20:	10800044 	addi	r2,r2,1
    5d24:	45000015 	stw	r20,0(r8)
    5d28:	45800115 	stw	r22,4(r8)
    5d2c:	d8c02015 	stw	r3,128(sp)
    5d30:	d8801f15 	stw	r2,124(sp)
    5d34:	e0bff60e 	bge	fp,r2,5d10 <__alt_mem_onchip_memory+0xf7805d10>
    5d38:	d9801e04 	addi	r6,sp,120
    5d3c:	b80b883a 	mov	r5,r23
    5d40:	9809883a 	mov	r4,r19
    5d44:	000ba540 	call	ba54 <__sprint_r>
    5d48:	103a711e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5d4c:	d8c02017 	ldw	r3,128(sp)
    5d50:	d8801f17 	ldw	r2,124(sp)
    5d54:	da000404 	addi	r8,sp,16
    5d58:	003fee06 	br	5d14 <__alt_mem_onchip_memory+0xf7805d14>
    5d5c:	00bfffc4 	movi	r2,-1
    5d60:	003a6f06 	br	4720 <__alt_mem_onchip_memory+0xf7804720>
    5d64:	008011c4 	movi	r2,71
    5d68:	1440b816 	blt	r2,r17,604c <___vfprintf_internal_r+0x1d44>
    5d6c:	04000074 	movhi	r16,1
    5d70:	8405d304 	addi	r16,r16,5964
    5d74:	00c000c4 	movi	r3,3
    5d78:	00bfdfc4 	movi	r2,-129
    5d7c:	d8c02a15 	stw	r3,168(sp)
    5d80:	90a4703a 	and	r18,r18,r2
    5d84:	df002783 	ldbu	fp,158(sp)
    5d88:	d8c02e15 	stw	r3,184(sp)
    5d8c:	d8002915 	stw	zero,164(sp)
    5d90:	d8003215 	stw	zero,200(sp)
    5d94:	003b2906 	br	4a3c <__alt_mem_onchip_memory+0xf7804a3c>
    5d98:	d9002d17 	ldw	r4,180(sp)
    5d9c:	24c00017 	ldw	r19,0(r4)
    5da0:	21000104 	addi	r4,r4,4
    5da4:	d9002d15 	stw	r4,180(sp)
    5da8:	982dd7fa 	srai	r22,r19,31
    5dac:	b005883a 	mov	r2,r22
    5db0:	003a9f06 	br	4830 <__alt_mem_onchip_memory+0xf7804830>
    5db4:	d9402d17 	ldw	r5,180(sp)
    5db8:	d8c02f17 	ldw	r3,188(sp)
    5dbc:	28800017 	ldw	r2,0(r5)
    5dc0:	29400104 	addi	r5,r5,4
    5dc4:	d9402d15 	stw	r5,180(sp)
    5dc8:	10c00015 	stw	r3,0(r2)
    5dcc:	00398606 	br	43e8 <__alt_mem_onchip_memory+0xf78043e8>
    5dd0:	d9402d17 	ldw	r5,180(sp)
    5dd4:	002d883a 	mov	r22,zero
    5dd8:	2cc00017 	ldw	r19,0(r5)
    5ddc:	29400104 	addi	r5,r5,4
    5de0:	d9402d15 	stw	r5,180(sp)
    5de4:	003c2306 	br	4e74 <__alt_mem_onchip_memory+0xf7804e74>
    5de8:	d8c02d17 	ldw	r3,180(sp)
    5dec:	d9002917 	ldw	r4,164(sp)
    5df0:	002d883a 	mov	r22,zero
    5df4:	18800104 	addi	r2,r3,4
    5df8:	1cc0000b 	ldhu	r19,0(r3)
    5dfc:	203dc10e 	bge	r4,zero,5504 <__alt_mem_onchip_memory+0xf7805504>
    5e00:	003f7506 	br	5bd8 <__alt_mem_onchip_memory+0xf7805bd8>
    5e04:	04000074 	movhi	r16,1
    5e08:	8405d104 	addi	r16,r16,5956
    5e0c:	003acc06 	br	4940 <__alt_mem_onchip_memory+0xf7804940>
    5e10:	d9002c17 	ldw	r4,176(sp)
    5e14:	d9801e04 	addi	r6,sp,120
    5e18:	b80b883a 	mov	r5,r23
    5e1c:	000ba540 	call	ba54 <__sprint_r>
    5e20:	103a3b1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5e24:	dc402617 	ldw	r17,152(sp)
    5e28:	d8c02017 	ldw	r3,128(sp)
    5e2c:	da000404 	addi	r8,sp,16
    5e30:	003f9c06 	br	5ca4 <__alt_mem_onchip_memory+0xf7805ca4>
    5e34:	ac400043 	ldbu	r17,1(r21)
    5e38:	94800814 	ori	r18,r18,32
    5e3c:	ad400044 	addi	r21,r21,1
    5e40:	8c403fcc 	andi	r17,r17,255
    5e44:	8c40201c 	xori	r17,r17,128
    5e48:	8c7fe004 	addi	r17,r17,-128
    5e4c:	00398f06 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    5e50:	d8c02d15 	stw	r3,180(sp)
    5e54:	0039883a 	mov	fp,zero
    5e58:	003e3506 	br	5730 <__alt_mem_onchip_memory+0xf7805730>
    5e5c:	d9002c17 	ldw	r4,176(sp)
    5e60:	d9801e04 	addi	r6,sp,120
    5e64:	b80b883a 	mov	r5,r23
    5e68:	000ba540 	call	ba54 <__sprint_r>
    5e6c:	103a281e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5e70:	d8c02017 	ldw	r3,128(sp)
    5e74:	da000404 	addi	r8,sp,16
    5e78:	003cd006 	br	51bc <__alt_mem_onchip_memory+0xf78051bc>
    5e7c:	8009883a 	mov	r4,r16
    5e80:	da003d15 	stw	r8,244(sp)
    5e84:	00041c00 	call	41c0 <strlen>
    5e88:	d8802e15 	stw	r2,184(sp)
    5e8c:	da003d17 	ldw	r8,244(sp)
    5e90:	103c340e 	bge	r2,zero,4f64 <__alt_mem_onchip_memory+0xf7804f64>
    5e94:	0005883a 	mov	r2,zero
    5e98:	003c3206 	br	4f64 <__alt_mem_onchip_memory+0xf7804f64>
    5e9c:	d9002c17 	ldw	r4,176(sp)
    5ea0:	d9801e04 	addi	r6,sp,120
    5ea4:	b80b883a 	mov	r5,r23
    5ea8:	000ba540 	call	ba54 <__sprint_r>
    5eac:	103a181e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5eb0:	d8c02017 	ldw	r3,128(sp)
    5eb4:	d8801f17 	ldw	r2,124(sp)
    5eb8:	da000404 	addi	r8,sp,16
    5ebc:	d9403317 	ldw	r5,204(sp)
    5ec0:	10800044 	addi	r2,r2,1
    5ec4:	44000015 	stw	r16,0(r8)
    5ec8:	28c7883a 	add	r3,r5,r3
    5ecc:	003b7d06 	br	4cc4 <__alt_mem_onchip_memory+0xf7804cc4>
    5ed0:	01000074 	movhi	r4,1
    5ed4:	2105e584 	addi	r4,r4,6038
    5ed8:	d9003515 	stw	r4,212(sp)
    5edc:	003b1406 	br	4b30 <__alt_mem_onchip_memory+0xf7804b30>
    5ee0:	013fffc4 	movi	r4,-1
    5ee4:	003a3506 	br	47bc <__alt_mem_onchip_memory+0xf78047bc>
    5ee8:	0023883a 	mov	r17,zero
    5eec:	003d9d06 	br	5564 <__alt_mem_onchip_memory+0xf7805564>
    5ef0:	d9002c17 	ldw	r4,176(sp)
    5ef4:	d9801e04 	addi	r6,sp,120
    5ef8:	b80b883a 	mov	r5,r23
    5efc:	000ba540 	call	ba54 <__sprint_r>
    5f00:	103a031e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5f04:	d8c02017 	ldw	r3,128(sp)
    5f08:	da000404 	addi	r8,sp,16
    5f0c:	003d9406 	br	5560 <__alt_mem_onchip_memory+0xf7805560>
    5f10:	01000074 	movhi	r4,1
    5f14:	2105e184 	addi	r4,r4,6022
    5f18:	d9002b15 	stw	r4,172(sp)
    5f1c:	d9002b17 	ldw	r4,172(sp)
    5f20:	1c47883a 	add	r3,r3,r17
    5f24:	10800044 	addi	r2,r2,1
    5f28:	41000015 	stw	r4,0(r8)
    5f2c:	44400115 	stw	r17,4(r8)
    5f30:	d8c02015 	stw	r3,128(sp)
    5f34:	d8801f15 	stw	r2,124(sp)
    5f38:	010001c4 	movi	r4,7
    5f3c:	20bfd716 	blt	r4,r2,5e9c <__alt_mem_onchip_memory+0xf7805e9c>
    5f40:	42000204 	addi	r8,r8,8
    5f44:	003fdd06 	br	5ebc <__alt_mem_onchip_memory+0xf7805ebc>
    5f48:	d9002c17 	ldw	r4,176(sp)
    5f4c:	d9801e04 	addi	r6,sp,120
    5f50:	b80b883a 	mov	r5,r23
    5f54:	000ba540 	call	ba54 <__sprint_r>
    5f58:	1039ed1e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5f5c:	d8802617 	ldw	r2,152(sp)
    5f60:	d8c02017 	ldw	r3,128(sp)
    5f64:	da000404 	addi	r8,sp,16
    5f68:	003e1006 	br	57ac <__alt_mem_onchip_memory+0xf78057ac>
    5f6c:	00800044 	movi	r2,1
    5f70:	10803fcc 	andi	r2,r2,255
    5f74:	00c00044 	movi	r3,1
    5f78:	10fa3526 	beq	r2,r3,4850 <__alt_mem_onchip_memory+0xf7804850>
    5f7c:	00c00084 	movi	r3,2
    5f80:	10fbcb26 	beq	r2,r3,4eb0 <__alt_mem_onchip_memory+0xf7804eb0>
    5f84:	003a8f06 	br	49c4 <__alt_mem_onchip_memory+0xf78049c4>
    5f88:	01000074 	movhi	r4,1
    5f8c:	2105e584 	addi	r4,r4,6038
    5f90:	d9003515 	stw	r4,212(sp)
    5f94:	003b7606 	br	4d70 <__alt_mem_onchip_memory+0xf7804d70>
    5f98:	d8802917 	ldw	r2,164(sp)
    5f9c:	00c00184 	movi	r3,6
    5fa0:	1880012e 	bgeu	r3,r2,5fa8 <___vfprintf_internal_r+0x1ca0>
    5fa4:	1805883a 	mov	r2,r3
    5fa8:	d8802e15 	stw	r2,184(sp)
    5fac:	1000ef16 	blt	r2,zero,636c <___vfprintf_internal_r+0x2064>
    5fb0:	04000074 	movhi	r16,1
    5fb4:	d8802a15 	stw	r2,168(sp)
    5fb8:	dcc02d15 	stw	r19,180(sp)
    5fbc:	d8002915 	stw	zero,164(sp)
    5fc0:	d8003215 	stw	zero,200(sp)
    5fc4:	8405df04 	addi	r16,r16,6012
    5fc8:	0039883a 	mov	fp,zero
    5fcc:	003aa206 	br	4a58 <__alt_mem_onchip_memory+0xf7804a58>
    5fd0:	0021883a 	mov	r16,zero
    5fd4:	003e0706 	br	57f4 <__alt_mem_onchip_memory+0xf78057f4>
    5fd8:	d9002c17 	ldw	r4,176(sp)
    5fdc:	d9801e04 	addi	r6,sp,120
    5fe0:	b80b883a 	mov	r5,r23
    5fe4:	000ba540 	call	ba54 <__sprint_r>
    5fe8:	1039c91e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    5fec:	d8802617 	ldw	r2,152(sp)
    5ff0:	d9403317 	ldw	r5,204(sp)
    5ff4:	d8c02017 	ldw	r3,128(sp)
    5ff8:	da000404 	addi	r8,sp,16
    5ffc:	2885c83a 	sub	r2,r5,r2
    6000:	003dfb06 	br	57f0 <__alt_mem_onchip_memory+0xf78057f0>
    6004:	9080004c 	andi	r2,r18,1
    6008:	103e8f1e 	bne	r2,zero,5a48 <__alt_mem_onchip_memory+0xf7805a48>
    600c:	d8802117 	ldw	r2,132(sp)
    6010:	003e9e06 	br	5a8c <__alt_mem_onchip_memory+0xf7805a8c>
    6014:	1025883a 	mov	r18,r2
    6018:	0039883a 	mov	fp,zero
    601c:	00800084 	movi	r2,2
    6020:	003fd306 	br	5f70 <__alt_mem_onchip_memory+0xf7805f70>
    6024:	07000b44 	movi	fp,45
    6028:	df002785 	stb	fp,158(sp)
    602c:	003a4006 	br	4930 <__alt_mem_onchip_memory+0xf7804930>
    6030:	00c00b44 	movi	r3,45
    6034:	d8c02785 	stb	r3,158(sp)
    6038:	d8802a15 	stw	r2,168(sp)
    603c:	dc802b17 	ldw	r18,172(sp)
    6040:	d8002915 	stw	zero,164(sp)
    6044:	07000b44 	movi	fp,45
    6048:	003a8006 	br	4a4c <__alt_mem_onchip_memory+0xf7804a4c>
    604c:	04000074 	movhi	r16,1
    6050:	8405d404 	addi	r16,r16,5968
    6054:	003f4706 	br	5d74 <__alt_mem_onchip_memory+0xf7805d74>
    6058:	d8c02d17 	ldw	r3,180(sp)
    605c:	d9002f17 	ldw	r4,188(sp)
    6060:	18800017 	ldw	r2,0(r3)
    6064:	18c00104 	addi	r3,r3,4
    6068:	d8c02d15 	stw	r3,180(sp)
    606c:	11000015 	stw	r4,0(r2)
    6070:	0038dd06 	br	43e8 <__alt_mem_onchip_memory+0xf78043e8>
    6074:	dd802617 	ldw	r22,152(sp)
    6078:	00bfff44 	movi	r2,-3
    607c:	b0801c16 	blt	r22,r2,60f0 <___vfprintf_internal_r+0x1de8>
    6080:	d9402917 	ldw	r5,164(sp)
    6084:	2d801a16 	blt	r5,r22,60f0 <___vfprintf_internal_r+0x1de8>
    6088:	dd803215 	stw	r22,200(sp)
    608c:	003e8906 	br	5ab4 <__alt_mem_onchip_memory+0xf7805ab4>
    6090:	01000074 	movhi	r4,1
    6094:	2105e184 	addi	r4,r4,6022
    6098:	d9002b15 	stw	r4,172(sp)
    609c:	003c9106 	br	52e4 <__alt_mem_onchip_memory+0xf78052e4>
    60a0:	e005883a 	mov	r2,fp
    60a4:	003e7906 	br	5a8c <__alt_mem_onchip_memory+0xf7805a8c>
    60a8:	d9402917 	ldw	r5,164(sp)
    60ac:	df002783 	ldbu	fp,158(sp)
    60b0:	dcc02d15 	stw	r19,180(sp)
    60b4:	d9402a15 	stw	r5,168(sp)
    60b8:	d9402e15 	stw	r5,184(sp)
    60bc:	d8002915 	stw	zero,164(sp)
    60c0:	d8003215 	stw	zero,200(sp)
    60c4:	003a5d06 	br	4a3c <__alt_mem_onchip_memory+0xf7804a3c>
    60c8:	9080004c 	andi	r2,r18,1
    60cc:	0039883a 	mov	fp,zero
    60d0:	10000426 	beq	r2,zero,60e4 <___vfprintf_internal_r+0x1ddc>
    60d4:	00800c04 	movi	r2,48
    60d8:	dc001dc4 	addi	r16,sp,119
    60dc:	d8801dc5 	stb	r2,119(sp)
    60e0:	003b8006 	br	4ee4 <__alt_mem_onchip_memory+0xf7804ee4>
    60e4:	d8002e15 	stw	zero,184(sp)
    60e8:	dc001e04 	addi	r16,sp,120
    60ec:	003a4d06 	br	4a24 <__alt_mem_onchip_memory+0xf7804a24>
    60f0:	8c7fff84 	addi	r17,r17,-2
    60f4:	b5bfffc4 	addi	r22,r22,-1
    60f8:	dd802615 	stw	r22,152(sp)
    60fc:	dc4022c5 	stb	r17,139(sp)
    6100:	b000bf16 	blt	r22,zero,6400 <___vfprintf_internal_r+0x20f8>
    6104:	00800ac4 	movi	r2,43
    6108:	d8802305 	stb	r2,140(sp)
    610c:	00800244 	movi	r2,9
    6110:	15807016 	blt	r2,r22,62d4 <___vfprintf_internal_r+0x1fcc>
    6114:	00800c04 	movi	r2,48
    6118:	b5800c04 	addi	r22,r22,48
    611c:	d8802345 	stb	r2,141(sp)
    6120:	dd802385 	stb	r22,142(sp)
    6124:	d88023c4 	addi	r2,sp,143
    6128:	df0022c4 	addi	fp,sp,139
    612c:	d8c03317 	ldw	r3,204(sp)
    6130:	1739c83a 	sub	fp,r2,fp
    6134:	d9003317 	ldw	r4,204(sp)
    6138:	e0c7883a 	add	r3,fp,r3
    613c:	df003a15 	stw	fp,232(sp)
    6140:	d8c02e15 	stw	r3,184(sp)
    6144:	00800044 	movi	r2,1
    6148:	1100b30e 	bge	r2,r4,6418 <___vfprintf_internal_r+0x2110>
    614c:	d8c02e17 	ldw	r3,184(sp)
    6150:	18c00044 	addi	r3,r3,1
    6154:	d8c02e15 	stw	r3,184(sp)
    6158:	1805883a 	mov	r2,r3
    615c:	1800ac16 	blt	r3,zero,6410 <___vfprintf_internal_r+0x2108>
    6160:	d8003215 	stw	zero,200(sp)
    6164:	003e5d06 	br	5adc <__alt_mem_onchip_memory+0xf7805adc>
    6168:	d9002c17 	ldw	r4,176(sp)
    616c:	d9801e04 	addi	r6,sp,120
    6170:	b80b883a 	mov	r5,r23
    6174:	000ba540 	call	ba54 <__sprint_r>
    6178:	1039651e 	bne	r2,zero,4710 <__alt_mem_onchip_memory+0xf7804710>
    617c:	dc402617 	ldw	r17,152(sp)
    6180:	d8c02017 	ldw	r3,128(sp)
    6184:	d8801f17 	ldw	r2,124(sp)
    6188:	da000404 	addi	r8,sp,16
    618c:	003ed606 	br	5ce8 <__alt_mem_onchip_memory+0xf7805ce8>
    6190:	582b883a 	mov	r21,r11
    6194:	d8002915 	stw	zero,164(sp)
    6198:	0038bd06 	br	4490 <__alt_mem_onchip_memory+0xf7804490>
    619c:	d8802917 	ldw	r2,164(sp)
    61a0:	103e071e 	bne	r2,zero,59c0 <__alt_mem_onchip_memory+0xf78059c0>
    61a4:	dc002915 	stw	r16,164(sp)
    61a8:	003e0506 	br	59c0 <__alt_mem_onchip_memory+0xf78059c0>
    61ac:	d9002917 	ldw	r4,164(sp)
    61b0:	20c00044 	addi	r3,r4,1
    61b4:	003e0f06 	br	59f4 <__alt_mem_onchip_memory+0xf78059f4>
    61b8:	01400184 	movi	r5,6
    61bc:	d9402915 	stw	r5,164(sp)
    61c0:	003dff06 	br	59c0 <__alt_mem_onchip_memory+0xf78059c0>
    61c4:	d8802104 	addi	r2,sp,132
    61c8:	d8800315 	stw	r2,12(sp)
    61cc:	d8802504 	addi	r2,sp,148
    61d0:	d8800215 	stw	r2,8(sp)
    61d4:	d8802604 	addi	r2,sp,152
    61d8:	d8800115 	stw	r2,4(sp)
    61dc:	d8802917 	ldw	r2,164(sp)
    61e0:	d9403617 	ldw	r5,216(sp)
    61e4:	d9002c17 	ldw	r4,176(sp)
    61e8:	d8800015 	stw	r2,0(sp)
    61ec:	01c000c4 	movi	r7,3
    61f0:	980d883a 	mov	r6,r19
    61f4:	da003d15 	stw	r8,244(sp)
    61f8:	000692c0 	call	692c <_dtoa_r>
    61fc:	d8c02917 	ldw	r3,164(sp)
    6200:	da003d17 	ldw	r8,244(sp)
    6204:	1021883a 	mov	r16,r2
    6208:	10f9883a 	add	fp,r2,r3
    620c:	81000007 	ldb	r4,0(r16)
    6210:	00800c04 	movi	r2,48
    6214:	20805e26 	beq	r4,r2,6390 <___vfprintf_internal_r+0x2088>
    6218:	d8c02617 	ldw	r3,152(sp)
    621c:	e0f9883a 	add	fp,fp,r3
    6220:	003e0a06 	br	5a4c <__alt_mem_onchip_memory+0xf7805a4c>
    6224:	00c00b44 	movi	r3,45
    6228:	24e0003c 	xorhi	r19,r4,32768
    622c:	d8c02a05 	stb	r3,168(sp)
    6230:	003de906 	br	59d8 <__alt_mem_onchip_memory+0xf78059d8>
    6234:	d8c03217 	ldw	r3,200(sp)
    6238:	00c07a0e 	bge	zero,r3,6424 <___vfprintf_internal_r+0x211c>
    623c:	00800044 	movi	r2,1
    6240:	d9003317 	ldw	r4,204(sp)
    6244:	1105883a 	add	r2,r2,r4
    6248:	d8802e15 	stw	r2,184(sp)
    624c:	10004e16 	blt	r2,zero,6388 <___vfprintf_internal_r+0x2080>
    6250:	044019c4 	movi	r17,103
    6254:	003e2106 	br	5adc <__alt_mem_onchip_memory+0xf7805adc>
    6258:	d9002917 	ldw	r4,164(sp)
    625c:	d8802104 	addi	r2,sp,132
    6260:	d8800315 	stw	r2,12(sp)
    6264:	d9000015 	stw	r4,0(sp)
    6268:	d8802504 	addi	r2,sp,148
    626c:	d9403617 	ldw	r5,216(sp)
    6270:	d9002c17 	ldw	r4,176(sp)
    6274:	d8800215 	stw	r2,8(sp)
    6278:	d8802604 	addi	r2,sp,152
    627c:	d8800115 	stw	r2,4(sp)
    6280:	01c000c4 	movi	r7,3
    6284:	980d883a 	mov	r6,r19
    6288:	da003d15 	stw	r8,244(sp)
    628c:	000692c0 	call	692c <_dtoa_r>
    6290:	d8c02917 	ldw	r3,164(sp)
    6294:	da003d17 	ldw	r8,244(sp)
    6298:	1021883a 	mov	r16,r2
    629c:	00801184 	movi	r2,70
    62a0:	80f9883a 	add	fp,r16,r3
    62a4:	88bfd926 	beq	r17,r2,620c <__alt_mem_onchip_memory+0xf780620c>
    62a8:	003de806 	br	5a4c <__alt_mem_onchip_memory+0xf7805a4c>
    62ac:	d9002917 	ldw	r4,164(sp)
    62b0:	00c04d0e 	bge	zero,r3,63e8 <___vfprintf_internal_r+0x20e0>
    62b4:	2000441e 	bne	r4,zero,63c8 <___vfprintf_internal_r+0x20c0>
    62b8:	9480004c 	andi	r18,r18,1
    62bc:	9000421e 	bne	r18,zero,63c8 <___vfprintf_internal_r+0x20c0>
    62c0:	1805883a 	mov	r2,r3
    62c4:	18007016 	blt	r3,zero,6488 <___vfprintf_internal_r+0x2180>
    62c8:	d8c03217 	ldw	r3,200(sp)
    62cc:	d8c02e15 	stw	r3,184(sp)
    62d0:	003e0206 	br	5adc <__alt_mem_onchip_memory+0xf7805adc>
    62d4:	df0022c4 	addi	fp,sp,139
    62d8:	dc002915 	stw	r16,164(sp)
    62dc:	4027883a 	mov	r19,r8
    62e0:	e021883a 	mov	r16,fp
    62e4:	b009883a 	mov	r4,r22
    62e8:	01400284 	movi	r5,10
    62ec:	0003ea40 	call	3ea4 <__modsi3>
    62f0:	10800c04 	addi	r2,r2,48
    62f4:	843fffc4 	addi	r16,r16,-1
    62f8:	b009883a 	mov	r4,r22
    62fc:	01400284 	movi	r5,10
    6300:	80800005 	stb	r2,0(r16)
    6304:	0003e200 	call	3e20 <__divsi3>
    6308:	102d883a 	mov	r22,r2
    630c:	00800244 	movi	r2,9
    6310:	15bff416 	blt	r2,r22,62e4 <__alt_mem_onchip_memory+0xf78062e4>
    6314:	9811883a 	mov	r8,r19
    6318:	b0800c04 	addi	r2,r22,48
    631c:	8027883a 	mov	r19,r16
    6320:	997fffc4 	addi	r5,r19,-1
    6324:	98bfffc5 	stb	r2,-1(r19)
    6328:	dc002917 	ldw	r16,164(sp)
    632c:	2f006a2e 	bgeu	r5,fp,64d8 <___vfprintf_internal_r+0x21d0>
    6330:	d9c02384 	addi	r7,sp,142
    6334:	3ccfc83a 	sub	r7,r7,r19
    6338:	d9002344 	addi	r4,sp,141
    633c:	e1cf883a 	add	r7,fp,r7
    6340:	00000106 	br	6348 <___vfprintf_internal_r+0x2040>
    6344:	28800003 	ldbu	r2,0(r5)
    6348:	20800005 	stb	r2,0(r4)
    634c:	21000044 	addi	r4,r4,1
    6350:	29400044 	addi	r5,r5,1
    6354:	393ffb1e 	bne	r7,r4,6344 <__alt_mem_onchip_memory+0xf7806344>
    6358:	d8802304 	addi	r2,sp,140
    635c:	14c5c83a 	sub	r2,r2,r19
    6360:	d8c02344 	addi	r3,sp,141
    6364:	1885883a 	add	r2,r3,r2
    6368:	003f7006 	br	612c <__alt_mem_onchip_memory+0xf780612c>
    636c:	0005883a 	mov	r2,zero
    6370:	003f0f06 	br	5fb0 <__alt_mem_onchip_memory+0xf7805fb0>
    6374:	d8c03217 	ldw	r3,200(sp)
    6378:	18c00044 	addi	r3,r3,1
    637c:	d8c02e15 	stw	r3,184(sp)
    6380:	1805883a 	mov	r2,r3
    6384:	183fb20e 	bge	r3,zero,6250 <__alt_mem_onchip_memory+0xf7806250>
    6388:	0005883a 	mov	r2,zero
    638c:	003fb006 	br	6250 <__alt_mem_onchip_memory+0xf7806250>
    6390:	d9003617 	ldw	r4,216(sp)
    6394:	000d883a 	mov	r6,zero
    6398:	000f883a 	mov	r7,zero
    639c:	980b883a 	mov	r5,r19
    63a0:	d8c03c15 	stw	r3,240(sp)
    63a4:	da003d15 	stw	r8,244(sp)
    63a8:	000e3e40 	call	e3e4 <__eqdf2>
    63ac:	d8c03c17 	ldw	r3,240(sp)
    63b0:	da003d17 	ldw	r8,244(sp)
    63b4:	103f9826 	beq	r2,zero,6218 <__alt_mem_onchip_memory+0xf7806218>
    63b8:	00800044 	movi	r2,1
    63bc:	10c7c83a 	sub	r3,r2,r3
    63c0:	d8c02615 	stw	r3,152(sp)
    63c4:	003f9506 	br	621c <__alt_mem_onchip_memory+0xf780621c>
    63c8:	d9002917 	ldw	r4,164(sp)
    63cc:	d8c03217 	ldw	r3,200(sp)
    63d0:	20800044 	addi	r2,r4,1
    63d4:	1885883a 	add	r2,r3,r2
    63d8:	d8802e15 	stw	r2,184(sp)
    63dc:	103dbf0e 	bge	r2,zero,5adc <__alt_mem_onchip_memory+0xf7805adc>
    63e0:	0005883a 	mov	r2,zero
    63e4:	003dbd06 	br	5adc <__alt_mem_onchip_memory+0xf7805adc>
    63e8:	2000211e 	bne	r4,zero,6470 <___vfprintf_internal_r+0x2168>
    63ec:	9480004c 	andi	r18,r18,1
    63f0:	90001f1e 	bne	r18,zero,6470 <___vfprintf_internal_r+0x2168>
    63f4:	00800044 	movi	r2,1
    63f8:	d8802e15 	stw	r2,184(sp)
    63fc:	003db706 	br	5adc <__alt_mem_onchip_memory+0xf7805adc>
    6400:	00800b44 	movi	r2,45
    6404:	05adc83a 	sub	r22,zero,r22
    6408:	d8802305 	stb	r2,140(sp)
    640c:	003f3f06 	br	610c <__alt_mem_onchip_memory+0xf780610c>
    6410:	0005883a 	mov	r2,zero
    6414:	003f5206 	br	6160 <__alt_mem_onchip_memory+0xf7806160>
    6418:	90a4703a 	and	r18,r18,r2
    641c:	903f4e26 	beq	r18,zero,6158 <__alt_mem_onchip_memory+0xf7806158>
    6420:	003f4a06 	br	614c <__alt_mem_onchip_memory+0xf780614c>
    6424:	00800084 	movi	r2,2
    6428:	10c5c83a 	sub	r2,r2,r3
    642c:	003f8406 	br	6240 <__alt_mem_onchip_memory+0xf7806240>
    6430:	d8802d17 	ldw	r2,180(sp)
    6434:	d9002d17 	ldw	r4,180(sp)
    6438:	ac400043 	ldbu	r17,1(r21)
    643c:	10800017 	ldw	r2,0(r2)
    6440:	582b883a 	mov	r21,r11
    6444:	d8802915 	stw	r2,164(sp)
    6448:	20800104 	addi	r2,r4,4
    644c:	d9002917 	ldw	r4,164(sp)
    6450:	d8802d15 	stw	r2,180(sp)
    6454:	203e7a0e 	bge	r4,zero,5e40 <__alt_mem_onchip_memory+0xf7805e40>
    6458:	8c403fcc 	andi	r17,r17,255
    645c:	00bfffc4 	movi	r2,-1
    6460:	8c40201c 	xori	r17,r17,128
    6464:	d8802915 	stw	r2,164(sp)
    6468:	8c7fe004 	addi	r17,r17,-128
    646c:	00380706 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    6470:	d8c02917 	ldw	r3,164(sp)
    6474:	18c00084 	addi	r3,r3,2
    6478:	d8c02e15 	stw	r3,184(sp)
    647c:	1805883a 	mov	r2,r3
    6480:	183d960e 	bge	r3,zero,5adc <__alt_mem_onchip_memory+0xf7805adc>
    6484:	003fd606 	br	63e0 <__alt_mem_onchip_memory+0xf78063e0>
    6488:	0005883a 	mov	r2,zero
    648c:	003f8e06 	br	62c8 <__alt_mem_onchip_memory+0xf78062c8>
    6490:	9080004c 	andi	r2,r18,1
    6494:	103f811e 	bne	r2,zero,629c <__alt_mem_onchip_memory+0xf780629c>
    6498:	d8802117 	ldw	r2,132(sp)
    649c:	1405c83a 	sub	r2,r2,r16
    64a0:	d8803315 	stw	r2,204(sp)
    64a4:	b47ef326 	beq	r22,r17,6074 <__alt_mem_onchip_memory+0xf7806074>
    64a8:	dd802617 	ldw	r22,152(sp)
    64ac:	003f1106 	br	60f4 <__alt_mem_onchip_memory+0xf78060f4>
    64b0:	d9c02785 	stb	r7,158(sp)
    64b4:	00390406 	br	48c8 <__alt_mem_onchip_memory+0xf78048c8>
    64b8:	d9c02785 	stb	r7,158(sp)
    64bc:	0038d306 	br	480c <__alt_mem_onchip_memory+0xf780480c>
    64c0:	d9c02785 	stb	r7,158(sp)
    64c4:	003a6106 	br	4e4c <__alt_mem_onchip_memory+0xf7804e4c>
    64c8:	d9c02785 	stb	r7,158(sp)
    64cc:	003af806 	br	50b0 <__alt_mem_onchip_memory+0xf78050b0>
    64d0:	0005883a 	mov	r2,zero
    64d4:	003d7e06 	br	5ad0 <__alt_mem_onchip_memory+0xf7805ad0>
    64d8:	d8802344 	addi	r2,sp,141
    64dc:	003f1306 	br	612c <__alt_mem_onchip_memory+0xf780612c>
    64e0:	d9c02785 	stb	r7,158(sp)
    64e4:	00392306 	br	4974 <__alt_mem_onchip_memory+0xf7804974>
    64e8:	d9c02785 	stb	r7,158(sp)
    64ec:	003aa906 	br	4f94 <__alt_mem_onchip_memory+0xf7804f94>
    64f0:	d9c02785 	stb	r7,158(sp)
    64f4:	003a3d06 	br	4dec <__alt_mem_onchip_memory+0xf7804dec>
    64f8:	d9c02785 	stb	r7,158(sp)
    64fc:	003aca06 	br	5028 <__alt_mem_onchip_memory+0xf7805028>

00006500 <__vfprintf_internal>:
    6500:	00800074 	movhi	r2,1
    6504:	108d3e04 	addi	r2,r2,13560
    6508:	300f883a 	mov	r7,r6
    650c:	280d883a 	mov	r6,r5
    6510:	200b883a 	mov	r5,r4
    6514:	11000017 	ldw	r4,0(r2)
    6518:	00043081 	jmpi	4308 <___vfprintf_internal_r>

0000651c <__sbprintf>:
    651c:	2880030b 	ldhu	r2,12(r5)
    6520:	2ac01917 	ldw	r11,100(r5)
    6524:	2a80038b 	ldhu	r10,14(r5)
    6528:	2a400717 	ldw	r9,28(r5)
    652c:	2a000917 	ldw	r8,36(r5)
    6530:	defee204 	addi	sp,sp,-1144
    6534:	00c10004 	movi	r3,1024
    6538:	dc011a15 	stw	r16,1128(sp)
    653c:	10bfff4c 	andi	r2,r2,65533
    6540:	2821883a 	mov	r16,r5
    6544:	d8cb883a 	add	r5,sp,r3
    6548:	dc811c15 	stw	r18,1136(sp)
    654c:	dc411b15 	stw	r17,1132(sp)
    6550:	dfc11d15 	stw	ra,1140(sp)
    6554:	2025883a 	mov	r18,r4
    6558:	d881030d 	sth	r2,1036(sp)
    655c:	dac11915 	stw	r11,1124(sp)
    6560:	da81038d 	sth	r10,1038(sp)
    6564:	da410715 	stw	r9,1052(sp)
    6568:	da010915 	stw	r8,1060(sp)
    656c:	dec10015 	stw	sp,1024(sp)
    6570:	dec10415 	stw	sp,1040(sp)
    6574:	d8c10215 	stw	r3,1032(sp)
    6578:	d8c10515 	stw	r3,1044(sp)
    657c:	d8010615 	stw	zero,1048(sp)
    6580:	00043080 	call	4308 <___vfprintf_internal_r>
    6584:	1023883a 	mov	r17,r2
    6588:	10000416 	blt	r2,zero,659c <__sbprintf+0x80>
    658c:	d9410004 	addi	r5,sp,1024
    6590:	9009883a 	mov	r4,r18
    6594:	00081d00 	call	81d0 <_fflush_r>
    6598:	10000d1e 	bne	r2,zero,65d0 <__sbprintf+0xb4>
    659c:	d881030b 	ldhu	r2,1036(sp)
    65a0:	1080100c 	andi	r2,r2,64
    65a4:	10000326 	beq	r2,zero,65b4 <__sbprintf+0x98>
    65a8:	8080030b 	ldhu	r2,12(r16)
    65ac:	10801014 	ori	r2,r2,64
    65b0:	8080030d 	sth	r2,12(r16)
    65b4:	8805883a 	mov	r2,r17
    65b8:	dfc11d17 	ldw	ra,1140(sp)
    65bc:	dc811c17 	ldw	r18,1136(sp)
    65c0:	dc411b17 	ldw	r17,1132(sp)
    65c4:	dc011a17 	ldw	r16,1128(sp)
    65c8:	dec11e04 	addi	sp,sp,1144
    65cc:	f800283a 	ret
    65d0:	047fffc4 	movi	r17,-1
    65d4:	003ff106 	br	659c <__alt_mem_onchip_memory+0xf780659c>

000065d8 <__swsetup_r>:
    65d8:	00800074 	movhi	r2,1
    65dc:	defffd04 	addi	sp,sp,-12
    65e0:	108d3e04 	addi	r2,r2,13560
    65e4:	dc400115 	stw	r17,4(sp)
    65e8:	2023883a 	mov	r17,r4
    65ec:	11000017 	ldw	r4,0(r2)
    65f0:	dc000015 	stw	r16,0(sp)
    65f4:	dfc00215 	stw	ra,8(sp)
    65f8:	2821883a 	mov	r16,r5
    65fc:	20000226 	beq	r4,zero,6608 <__swsetup_r+0x30>
    6600:	20800e17 	ldw	r2,56(r4)
    6604:	10003126 	beq	r2,zero,66cc <__swsetup_r+0xf4>
    6608:	8080030b 	ldhu	r2,12(r16)
    660c:	10c0020c 	andi	r3,r2,8
    6610:	1009883a 	mov	r4,r2
    6614:	18000f26 	beq	r3,zero,6654 <__swsetup_r+0x7c>
    6618:	80c00417 	ldw	r3,16(r16)
    661c:	18001526 	beq	r3,zero,6674 <__swsetup_r+0x9c>
    6620:	1100004c 	andi	r4,r2,1
    6624:	20001c1e 	bne	r4,zero,6698 <__swsetup_r+0xc0>
    6628:	1080008c 	andi	r2,r2,2
    662c:	1000291e 	bne	r2,zero,66d4 <__swsetup_r+0xfc>
    6630:	80800517 	ldw	r2,20(r16)
    6634:	80800215 	stw	r2,8(r16)
    6638:	18001c26 	beq	r3,zero,66ac <__swsetup_r+0xd4>
    663c:	0005883a 	mov	r2,zero
    6640:	dfc00217 	ldw	ra,8(sp)
    6644:	dc400117 	ldw	r17,4(sp)
    6648:	dc000017 	ldw	r16,0(sp)
    664c:	dec00304 	addi	sp,sp,12
    6650:	f800283a 	ret
    6654:	2080040c 	andi	r2,r4,16
    6658:	10002e26 	beq	r2,zero,6714 <__swsetup_r+0x13c>
    665c:	2080010c 	andi	r2,r4,4
    6660:	10001e1e 	bne	r2,zero,66dc <__swsetup_r+0x104>
    6664:	80c00417 	ldw	r3,16(r16)
    6668:	20800214 	ori	r2,r4,8
    666c:	8080030d 	sth	r2,12(r16)
    6670:	183feb1e 	bne	r3,zero,6620 <__alt_mem_onchip_memory+0xf7806620>
    6674:	1100a00c 	andi	r4,r2,640
    6678:	01408004 	movi	r5,512
    667c:	217fe826 	beq	r4,r5,6620 <__alt_mem_onchip_memory+0xf7806620>
    6680:	800b883a 	mov	r5,r16
    6684:	8809883a 	mov	r4,r17
    6688:	00091ac0 	call	91ac <__smakebuf_r>
    668c:	8080030b 	ldhu	r2,12(r16)
    6690:	80c00417 	ldw	r3,16(r16)
    6694:	003fe206 	br	6620 <__alt_mem_onchip_memory+0xf7806620>
    6698:	80800517 	ldw	r2,20(r16)
    669c:	80000215 	stw	zero,8(r16)
    66a0:	0085c83a 	sub	r2,zero,r2
    66a4:	80800615 	stw	r2,24(r16)
    66a8:	183fe41e 	bne	r3,zero,663c <__alt_mem_onchip_memory+0xf780663c>
    66ac:	80c0030b 	ldhu	r3,12(r16)
    66b0:	0005883a 	mov	r2,zero
    66b4:	1900200c 	andi	r4,r3,128
    66b8:	203fe126 	beq	r4,zero,6640 <__alt_mem_onchip_memory+0xf7806640>
    66bc:	18c01014 	ori	r3,r3,64
    66c0:	80c0030d 	sth	r3,12(r16)
    66c4:	00bfffc4 	movi	r2,-1
    66c8:	003fdd06 	br	6640 <__alt_mem_onchip_memory+0xf7806640>
    66cc:	00085ac0 	call	85ac <__sinit>
    66d0:	003fcd06 	br	6608 <__alt_mem_onchip_memory+0xf7806608>
    66d4:	0005883a 	mov	r2,zero
    66d8:	003fd606 	br	6634 <__alt_mem_onchip_memory+0xf7806634>
    66dc:	81400c17 	ldw	r5,48(r16)
    66e0:	28000626 	beq	r5,zero,66fc <__swsetup_r+0x124>
    66e4:	80801004 	addi	r2,r16,64
    66e8:	28800326 	beq	r5,r2,66f8 <__swsetup_r+0x120>
    66ec:	8809883a 	mov	r4,r17
    66f0:	00087200 	call	8720 <_free_r>
    66f4:	8100030b 	ldhu	r4,12(r16)
    66f8:	80000c15 	stw	zero,48(r16)
    66fc:	80c00417 	ldw	r3,16(r16)
    6700:	00bff6c4 	movi	r2,-37
    6704:	1108703a 	and	r4,r2,r4
    6708:	80000115 	stw	zero,4(r16)
    670c:	80c00015 	stw	r3,0(r16)
    6710:	003fd506 	br	6668 <__alt_mem_onchip_memory+0xf7806668>
    6714:	00800244 	movi	r2,9
    6718:	88800015 	stw	r2,0(r17)
    671c:	20801014 	ori	r2,r4,64
    6720:	8080030d 	sth	r2,12(r16)
    6724:	00bfffc4 	movi	r2,-1
    6728:	003fc506 	br	6640 <__alt_mem_onchip_memory+0xf7806640>

0000672c <quorem>:
    672c:	defff704 	addi	sp,sp,-36
    6730:	dc800215 	stw	r18,8(sp)
    6734:	20800417 	ldw	r2,16(r4)
    6738:	2c800417 	ldw	r18,16(r5)
    673c:	dfc00815 	stw	ra,32(sp)
    6740:	ddc00715 	stw	r23,28(sp)
    6744:	dd800615 	stw	r22,24(sp)
    6748:	dd400515 	stw	r21,20(sp)
    674c:	dd000415 	stw	r20,16(sp)
    6750:	dcc00315 	stw	r19,12(sp)
    6754:	dc400115 	stw	r17,4(sp)
    6758:	dc000015 	stw	r16,0(sp)
    675c:	14807116 	blt	r2,r18,6924 <quorem+0x1f8>
    6760:	94bfffc4 	addi	r18,r18,-1
    6764:	94ad883a 	add	r22,r18,r18
    6768:	b5ad883a 	add	r22,r22,r22
    676c:	2c400504 	addi	r17,r5,20
    6770:	8da9883a 	add	r20,r17,r22
    6774:	25400504 	addi	r21,r4,20
    6778:	282f883a 	mov	r23,r5
    677c:	adad883a 	add	r22,r21,r22
    6780:	a1400017 	ldw	r5,0(r20)
    6784:	2021883a 	mov	r16,r4
    6788:	b1000017 	ldw	r4,0(r22)
    678c:	29400044 	addi	r5,r5,1
    6790:	0003f180 	call	3f18 <__udivsi3>
    6794:	1027883a 	mov	r19,r2
    6798:	10002c26 	beq	r2,zero,684c <quorem+0x120>
    679c:	a813883a 	mov	r9,r21
    67a0:	880b883a 	mov	r5,r17
    67a4:	0009883a 	mov	r4,zero
    67a8:	000d883a 	mov	r6,zero
    67ac:	2a000017 	ldw	r8,0(r5)
    67b0:	49c00017 	ldw	r7,0(r9)
    67b4:	29400104 	addi	r5,r5,4
    67b8:	40bfffcc 	andi	r2,r8,65535
    67bc:	14c5383a 	mul	r2,r2,r19
    67c0:	4010d43a 	srli	r8,r8,16
    67c4:	38ffffcc 	andi	r3,r7,65535
    67c8:	1105883a 	add	r2,r2,r4
    67cc:	1008d43a 	srli	r4,r2,16
    67d0:	44d1383a 	mul	r8,r8,r19
    67d4:	198d883a 	add	r6,r3,r6
    67d8:	10ffffcc 	andi	r3,r2,65535
    67dc:	30c7c83a 	sub	r3,r6,r3
    67e0:	380ed43a 	srli	r7,r7,16
    67e4:	4105883a 	add	r2,r8,r4
    67e8:	180dd43a 	srai	r6,r3,16
    67ec:	113fffcc 	andi	r4,r2,65535
    67f0:	390fc83a 	sub	r7,r7,r4
    67f4:	398d883a 	add	r6,r7,r6
    67f8:	300e943a 	slli	r7,r6,16
    67fc:	18ffffcc 	andi	r3,r3,65535
    6800:	1008d43a 	srli	r4,r2,16
    6804:	38ceb03a 	or	r7,r7,r3
    6808:	49c00015 	stw	r7,0(r9)
    680c:	300dd43a 	srai	r6,r6,16
    6810:	4a400104 	addi	r9,r9,4
    6814:	a17fe52e 	bgeu	r20,r5,67ac <__alt_mem_onchip_memory+0xf78067ac>
    6818:	b0800017 	ldw	r2,0(r22)
    681c:	10000b1e 	bne	r2,zero,684c <quorem+0x120>
    6820:	b0bfff04 	addi	r2,r22,-4
    6824:	a880082e 	bgeu	r21,r2,6848 <quorem+0x11c>
    6828:	b0ffff17 	ldw	r3,-4(r22)
    682c:	18000326 	beq	r3,zero,683c <quorem+0x110>
    6830:	00000506 	br	6848 <quorem+0x11c>
    6834:	10c00017 	ldw	r3,0(r2)
    6838:	1800031e 	bne	r3,zero,6848 <quorem+0x11c>
    683c:	10bfff04 	addi	r2,r2,-4
    6840:	94bfffc4 	addi	r18,r18,-1
    6844:	a8bffb36 	bltu	r21,r2,6834 <__alt_mem_onchip_memory+0xf7806834>
    6848:	84800415 	stw	r18,16(r16)
    684c:	b80b883a 	mov	r5,r23
    6850:	8009883a 	mov	r4,r16
    6854:	000a8ec0 	call	a8ec <__mcmp>
    6858:	10002616 	blt	r2,zero,68f4 <quorem+0x1c8>
    685c:	9cc00044 	addi	r19,r19,1
    6860:	a805883a 	mov	r2,r21
    6864:	000b883a 	mov	r5,zero
    6868:	11000017 	ldw	r4,0(r2)
    686c:	89800017 	ldw	r6,0(r17)
    6870:	10800104 	addi	r2,r2,4
    6874:	20ffffcc 	andi	r3,r4,65535
    6878:	194b883a 	add	r5,r3,r5
    687c:	30ffffcc 	andi	r3,r6,65535
    6880:	28c7c83a 	sub	r3,r5,r3
    6884:	300cd43a 	srli	r6,r6,16
    6888:	2008d43a 	srli	r4,r4,16
    688c:	180bd43a 	srai	r5,r3,16
    6890:	18ffffcc 	andi	r3,r3,65535
    6894:	2189c83a 	sub	r4,r4,r6
    6898:	2149883a 	add	r4,r4,r5
    689c:	200c943a 	slli	r6,r4,16
    68a0:	8c400104 	addi	r17,r17,4
    68a4:	200bd43a 	srai	r5,r4,16
    68a8:	30c6b03a 	or	r3,r6,r3
    68ac:	10ffff15 	stw	r3,-4(r2)
    68b0:	a47fed2e 	bgeu	r20,r17,6868 <__alt_mem_onchip_memory+0xf7806868>
    68b4:	9485883a 	add	r2,r18,r18
    68b8:	1085883a 	add	r2,r2,r2
    68bc:	a887883a 	add	r3,r21,r2
    68c0:	18800017 	ldw	r2,0(r3)
    68c4:	10000b1e 	bne	r2,zero,68f4 <quorem+0x1c8>
    68c8:	18bfff04 	addi	r2,r3,-4
    68cc:	a880082e 	bgeu	r21,r2,68f0 <quorem+0x1c4>
    68d0:	18ffff17 	ldw	r3,-4(r3)
    68d4:	18000326 	beq	r3,zero,68e4 <quorem+0x1b8>
    68d8:	00000506 	br	68f0 <quorem+0x1c4>
    68dc:	10c00017 	ldw	r3,0(r2)
    68e0:	1800031e 	bne	r3,zero,68f0 <quorem+0x1c4>
    68e4:	10bfff04 	addi	r2,r2,-4
    68e8:	94bfffc4 	addi	r18,r18,-1
    68ec:	a8bffb36 	bltu	r21,r2,68dc <__alt_mem_onchip_memory+0xf78068dc>
    68f0:	84800415 	stw	r18,16(r16)
    68f4:	9805883a 	mov	r2,r19
    68f8:	dfc00817 	ldw	ra,32(sp)
    68fc:	ddc00717 	ldw	r23,28(sp)
    6900:	dd800617 	ldw	r22,24(sp)
    6904:	dd400517 	ldw	r21,20(sp)
    6908:	dd000417 	ldw	r20,16(sp)
    690c:	dcc00317 	ldw	r19,12(sp)
    6910:	dc800217 	ldw	r18,8(sp)
    6914:	dc400117 	ldw	r17,4(sp)
    6918:	dc000017 	ldw	r16,0(sp)
    691c:	dec00904 	addi	sp,sp,36
    6920:	f800283a 	ret
    6924:	0005883a 	mov	r2,zero
    6928:	003ff306 	br	68f8 <__alt_mem_onchip_memory+0xf78068f8>

0000692c <_dtoa_r>:
    692c:	20801017 	ldw	r2,64(r4)
    6930:	deffde04 	addi	sp,sp,-136
    6934:	df002015 	stw	fp,128(sp)
    6938:	dcc01b15 	stw	r19,108(sp)
    693c:	dc801a15 	stw	r18,104(sp)
    6940:	dc401915 	stw	r17,100(sp)
    6944:	dc001815 	stw	r16,96(sp)
    6948:	dfc02115 	stw	ra,132(sp)
    694c:	ddc01f15 	stw	r23,124(sp)
    6950:	dd801e15 	stw	r22,120(sp)
    6954:	dd401d15 	stw	r21,116(sp)
    6958:	dd001c15 	stw	r20,112(sp)
    695c:	d9c00315 	stw	r7,12(sp)
    6960:	2039883a 	mov	fp,r4
    6964:	3023883a 	mov	r17,r6
    6968:	2825883a 	mov	r18,r5
    696c:	dc002417 	ldw	r16,144(sp)
    6970:	3027883a 	mov	r19,r6
    6974:	10000826 	beq	r2,zero,6998 <_dtoa_r+0x6c>
    6978:	21801117 	ldw	r6,68(r4)
    697c:	00c00044 	movi	r3,1
    6980:	100b883a 	mov	r5,r2
    6984:	1986983a 	sll	r3,r3,r6
    6988:	11800115 	stw	r6,4(r2)
    698c:	10c00215 	stw	r3,8(r2)
    6990:	000a0cc0 	call	a0cc <_Bfree>
    6994:	e0001015 	stw	zero,64(fp)
    6998:	88002e16 	blt	r17,zero,6a54 <_dtoa_r+0x128>
    699c:	80000015 	stw	zero,0(r16)
    69a0:	889ffc2c 	andhi	r2,r17,32752
    69a4:	00dffc34 	movhi	r3,32752
    69a8:	10c01c26 	beq	r2,r3,6a1c <_dtoa_r+0xf0>
    69ac:	000d883a 	mov	r6,zero
    69b0:	000f883a 	mov	r7,zero
    69b4:	9009883a 	mov	r4,r18
    69b8:	980b883a 	mov	r5,r19
    69bc:	000e3e40 	call	e3e4 <__eqdf2>
    69c0:	10002b1e 	bne	r2,zero,6a70 <_dtoa_r+0x144>
    69c4:	d9c02317 	ldw	r7,140(sp)
    69c8:	00800044 	movi	r2,1
    69cc:	38800015 	stw	r2,0(r7)
    69d0:	d8802517 	ldw	r2,148(sp)
    69d4:	10019e26 	beq	r2,zero,7050 <_dtoa_r+0x724>
    69d8:	d8c02517 	ldw	r3,148(sp)
    69dc:	00800074 	movhi	r2,1
    69e0:	1085e144 	addi	r2,r2,6021
    69e4:	18800015 	stw	r2,0(r3)
    69e8:	10bfffc4 	addi	r2,r2,-1
    69ec:	dfc02117 	ldw	ra,132(sp)
    69f0:	df002017 	ldw	fp,128(sp)
    69f4:	ddc01f17 	ldw	r23,124(sp)
    69f8:	dd801e17 	ldw	r22,120(sp)
    69fc:	dd401d17 	ldw	r21,116(sp)
    6a00:	dd001c17 	ldw	r20,112(sp)
    6a04:	dcc01b17 	ldw	r19,108(sp)
    6a08:	dc801a17 	ldw	r18,104(sp)
    6a0c:	dc401917 	ldw	r17,100(sp)
    6a10:	dc001817 	ldw	r16,96(sp)
    6a14:	dec02204 	addi	sp,sp,136
    6a18:	f800283a 	ret
    6a1c:	d8c02317 	ldw	r3,140(sp)
    6a20:	0089c3c4 	movi	r2,9999
    6a24:	18800015 	stw	r2,0(r3)
    6a28:	90017726 	beq	r18,zero,7008 <_dtoa_r+0x6dc>
    6a2c:	00800074 	movhi	r2,1
    6a30:	1085ed04 	addi	r2,r2,6068
    6a34:	d9002517 	ldw	r4,148(sp)
    6a38:	203fec26 	beq	r4,zero,69ec <__alt_mem_onchip_memory+0xf78069ec>
    6a3c:	10c000c7 	ldb	r3,3(r2)
    6a40:	1801781e 	bne	r3,zero,7024 <_dtoa_r+0x6f8>
    6a44:	10c000c4 	addi	r3,r2,3
    6a48:	d9802517 	ldw	r6,148(sp)
    6a4c:	30c00015 	stw	r3,0(r6)
    6a50:	003fe606 	br	69ec <__alt_mem_onchip_memory+0xf78069ec>
    6a54:	04e00034 	movhi	r19,32768
    6a58:	9cffffc4 	addi	r19,r19,-1
    6a5c:	00800044 	movi	r2,1
    6a60:	8ce6703a 	and	r19,r17,r19
    6a64:	80800015 	stw	r2,0(r16)
    6a68:	9823883a 	mov	r17,r19
    6a6c:	003fcc06 	br	69a0 <__alt_mem_onchip_memory+0xf78069a0>
    6a70:	d8800204 	addi	r2,sp,8
    6a74:	d8800015 	stw	r2,0(sp)
    6a78:	d9c00104 	addi	r7,sp,4
    6a7c:	900b883a 	mov	r5,r18
    6a80:	980d883a 	mov	r6,r19
    6a84:	e009883a 	mov	r4,fp
    6a88:	8820d53a 	srli	r16,r17,20
    6a8c:	000acb80 	call	acb8 <__d2b>
    6a90:	d8800915 	stw	r2,36(sp)
    6a94:	8001651e 	bne	r16,zero,702c <_dtoa_r+0x700>
    6a98:	dd800217 	ldw	r22,8(sp)
    6a9c:	dc000117 	ldw	r16,4(sp)
    6aa0:	00800804 	movi	r2,32
    6aa4:	b421883a 	add	r16,r22,r16
    6aa8:	80c10c84 	addi	r3,r16,1074
    6aac:	10c2d10e 	bge	r2,r3,75f4 <_dtoa_r+0xcc8>
    6ab0:	00801004 	movi	r2,64
    6ab4:	81010484 	addi	r4,r16,1042
    6ab8:	10c7c83a 	sub	r3,r2,r3
    6abc:	9108d83a 	srl	r4,r18,r4
    6ac0:	88e2983a 	sll	r17,r17,r3
    6ac4:	2448b03a 	or	r4,r4,r17
    6ac8:	000e6a40 	call	e6a4 <__floatunsidf>
    6acc:	017f8434 	movhi	r5,65040
    6ad0:	01800044 	movi	r6,1
    6ad4:	1009883a 	mov	r4,r2
    6ad8:	194b883a 	add	r5,r3,r5
    6adc:	843fffc4 	addi	r16,r16,-1
    6ae0:	d9801115 	stw	r6,68(sp)
    6ae4:	000d883a 	mov	r6,zero
    6ae8:	01cffe34 	movhi	r7,16376
    6aec:	00032080 	call	3208 <__subdf3>
    6af0:	0198dbf4 	movhi	r6,25455
    6af4:	01cff4f4 	movhi	r7,16339
    6af8:	3190d844 	addi	r6,r6,17249
    6afc:	39e1e9c4 	addi	r7,r7,-30809
    6b00:	1009883a 	mov	r4,r2
    6b04:	180b883a 	mov	r5,r3
    6b08:	0002af00 	call	2af0 <__muldf3>
    6b0c:	01a2d874 	movhi	r6,35681
    6b10:	01cff1f4 	movhi	r7,16327
    6b14:	31b22cc4 	addi	r6,r6,-14157
    6b18:	39e28a04 	addi	r7,r7,-30168
    6b1c:	180b883a 	mov	r5,r3
    6b20:	1009883a 	mov	r4,r2
    6b24:	00018680 	call	1868 <__adddf3>
    6b28:	8009883a 	mov	r4,r16
    6b2c:	1029883a 	mov	r20,r2
    6b30:	1823883a 	mov	r17,r3
    6b34:	000e5c80 	call	e5c8 <__floatsidf>
    6b38:	019427f4 	movhi	r6,20639
    6b3c:	01cff4f4 	movhi	r7,16339
    6b40:	319e7ec4 	addi	r6,r6,31227
    6b44:	39d104c4 	addi	r7,r7,17427
    6b48:	1009883a 	mov	r4,r2
    6b4c:	180b883a 	mov	r5,r3
    6b50:	0002af00 	call	2af0 <__muldf3>
    6b54:	100d883a 	mov	r6,r2
    6b58:	180f883a 	mov	r7,r3
    6b5c:	a009883a 	mov	r4,r20
    6b60:	880b883a 	mov	r5,r17
    6b64:	00018680 	call	1868 <__adddf3>
    6b68:	1009883a 	mov	r4,r2
    6b6c:	180b883a 	mov	r5,r3
    6b70:	1029883a 	mov	r20,r2
    6b74:	1823883a 	mov	r17,r3
    6b78:	000e5480 	call	e548 <__fixdfsi>
    6b7c:	000d883a 	mov	r6,zero
    6b80:	000f883a 	mov	r7,zero
    6b84:	a009883a 	mov	r4,r20
    6b88:	880b883a 	mov	r5,r17
    6b8c:	d8800515 	stw	r2,20(sp)
    6b90:	00029fc0 	call	29fc <__ledf2>
    6b94:	10028716 	blt	r2,zero,75b4 <_dtoa_r+0xc88>
    6b98:	d8c00517 	ldw	r3,20(sp)
    6b9c:	00800584 	movi	r2,22
    6ba0:	10c27536 	bltu	r2,r3,7578 <_dtoa_r+0xc4c>
    6ba4:	180490fa 	slli	r2,r3,3
    6ba8:	00c00074 	movhi	r3,1
    6bac:	18c60804 	addi	r3,r3,6176
    6bb0:	1885883a 	add	r2,r3,r2
    6bb4:	11000017 	ldw	r4,0(r2)
    6bb8:	11400117 	ldw	r5,4(r2)
    6bbc:	900d883a 	mov	r6,r18
    6bc0:	980f883a 	mov	r7,r19
    6bc4:	000e46c0 	call	e46c <__gedf2>
    6bc8:	00828d0e 	bge	zero,r2,7600 <_dtoa_r+0xcd4>
    6bcc:	d9000517 	ldw	r4,20(sp)
    6bd0:	d8000e15 	stw	zero,56(sp)
    6bd4:	213fffc4 	addi	r4,r4,-1
    6bd8:	d9000515 	stw	r4,20(sp)
    6bdc:	b42dc83a 	sub	r22,r22,r16
    6be0:	b5bfffc4 	addi	r22,r22,-1
    6be4:	b0026f16 	blt	r22,zero,75a4 <_dtoa_r+0xc78>
    6be8:	d8000815 	stw	zero,32(sp)
    6bec:	d9c00517 	ldw	r7,20(sp)
    6bf0:	38026416 	blt	r7,zero,7584 <_dtoa_r+0xc58>
    6bf4:	b1ed883a 	add	r22,r22,r7
    6bf8:	d9c00d15 	stw	r7,52(sp)
    6bfc:	d8000a15 	stw	zero,40(sp)
    6c00:	d9800317 	ldw	r6,12(sp)
    6c04:	00800244 	movi	r2,9
    6c08:	11811436 	bltu	r2,r6,705c <_dtoa_r+0x730>
    6c0c:	00800144 	movi	r2,5
    6c10:	1184e10e 	bge	r2,r6,7f98 <_dtoa_r+0x166c>
    6c14:	31bfff04 	addi	r6,r6,-4
    6c18:	d9800315 	stw	r6,12(sp)
    6c1c:	0023883a 	mov	r17,zero
    6c20:	d9800317 	ldw	r6,12(sp)
    6c24:	008000c4 	movi	r2,3
    6c28:	30836726 	beq	r6,r2,79c8 <_dtoa_r+0x109c>
    6c2c:	1183410e 	bge	r2,r6,7934 <_dtoa_r+0x1008>
    6c30:	d9c00317 	ldw	r7,12(sp)
    6c34:	00800104 	movi	r2,4
    6c38:	38827c26 	beq	r7,r2,762c <_dtoa_r+0xd00>
    6c3c:	00800144 	movi	r2,5
    6c40:	3884c41e 	bne	r7,r2,7f54 <_dtoa_r+0x1628>
    6c44:	00800044 	movi	r2,1
    6c48:	d8800b15 	stw	r2,44(sp)
    6c4c:	d8c00517 	ldw	r3,20(sp)
    6c50:	d9002217 	ldw	r4,136(sp)
    6c54:	1907883a 	add	r3,r3,r4
    6c58:	19800044 	addi	r6,r3,1
    6c5c:	d8c00c15 	stw	r3,48(sp)
    6c60:	d9800615 	stw	r6,24(sp)
    6c64:	0183a40e 	bge	zero,r6,7af8 <_dtoa_r+0x11cc>
    6c68:	d9800617 	ldw	r6,24(sp)
    6c6c:	3021883a 	mov	r16,r6
    6c70:	e0001115 	stw	zero,68(fp)
    6c74:	008005c4 	movi	r2,23
    6c78:	1184c92e 	bgeu	r2,r6,7fa0 <_dtoa_r+0x1674>
    6c7c:	00c00044 	movi	r3,1
    6c80:	00800104 	movi	r2,4
    6c84:	1085883a 	add	r2,r2,r2
    6c88:	11000504 	addi	r4,r2,20
    6c8c:	180b883a 	mov	r5,r3
    6c90:	18c00044 	addi	r3,r3,1
    6c94:	313ffb2e 	bgeu	r6,r4,6c84 <__alt_mem_onchip_memory+0xf7806c84>
    6c98:	e1401115 	stw	r5,68(fp)
    6c9c:	e009883a 	mov	r4,fp
    6ca0:	000a0240 	call	a024 <_Balloc>
    6ca4:	d8800715 	stw	r2,28(sp)
    6ca8:	e0801015 	stw	r2,64(fp)
    6cac:	00800384 	movi	r2,14
    6cb0:	1400f736 	bltu	r2,r16,7090 <_dtoa_r+0x764>
    6cb4:	8800f626 	beq	r17,zero,7090 <_dtoa_r+0x764>
    6cb8:	d9c00517 	ldw	r7,20(sp)
    6cbc:	01c39a0e 	bge	zero,r7,7b28 <_dtoa_r+0x11fc>
    6cc0:	388003cc 	andi	r2,r7,15
    6cc4:	100490fa 	slli	r2,r2,3
    6cc8:	382bd13a 	srai	r21,r7,4
    6ccc:	00c00074 	movhi	r3,1
    6cd0:	18c60804 	addi	r3,r3,6176
    6cd4:	1885883a 	add	r2,r3,r2
    6cd8:	a8c0040c 	andi	r3,r21,16
    6cdc:	12400017 	ldw	r9,0(r2)
    6ce0:	12000117 	ldw	r8,4(r2)
    6ce4:	18037926 	beq	r3,zero,7acc <_dtoa_r+0x11a0>
    6ce8:	00800074 	movhi	r2,1
    6cec:	1085fe04 	addi	r2,r2,6136
    6cf0:	11800817 	ldw	r6,32(r2)
    6cf4:	11c00917 	ldw	r7,36(r2)
    6cf8:	9009883a 	mov	r4,r18
    6cfc:	980b883a 	mov	r5,r19
    6d00:	da001715 	stw	r8,92(sp)
    6d04:	da401615 	stw	r9,88(sp)
    6d08:	00021140 	call	2114 <__divdf3>
    6d0c:	da001717 	ldw	r8,92(sp)
    6d10:	da401617 	ldw	r9,88(sp)
    6d14:	ad4003cc 	andi	r21,r21,15
    6d18:	040000c4 	movi	r16,3
    6d1c:	1023883a 	mov	r17,r2
    6d20:	1829883a 	mov	r20,r3
    6d24:	a8001126 	beq	r21,zero,6d6c <_dtoa_r+0x440>
    6d28:	05c00074 	movhi	r23,1
    6d2c:	bdc5fe04 	addi	r23,r23,6136
    6d30:	4805883a 	mov	r2,r9
    6d34:	4007883a 	mov	r3,r8
    6d38:	a980004c 	andi	r6,r21,1
    6d3c:	1009883a 	mov	r4,r2
    6d40:	a82bd07a 	srai	r21,r21,1
    6d44:	180b883a 	mov	r5,r3
    6d48:	30000426 	beq	r6,zero,6d5c <_dtoa_r+0x430>
    6d4c:	b9800017 	ldw	r6,0(r23)
    6d50:	b9c00117 	ldw	r7,4(r23)
    6d54:	84000044 	addi	r16,r16,1
    6d58:	0002af00 	call	2af0 <__muldf3>
    6d5c:	bdc00204 	addi	r23,r23,8
    6d60:	a83ff51e 	bne	r21,zero,6d38 <__alt_mem_onchip_memory+0xf7806d38>
    6d64:	1013883a 	mov	r9,r2
    6d68:	1811883a 	mov	r8,r3
    6d6c:	480d883a 	mov	r6,r9
    6d70:	400f883a 	mov	r7,r8
    6d74:	8809883a 	mov	r4,r17
    6d78:	a00b883a 	mov	r5,r20
    6d7c:	00021140 	call	2114 <__divdf3>
    6d80:	d8800f15 	stw	r2,60(sp)
    6d84:	d8c01015 	stw	r3,64(sp)
    6d88:	d8c00e17 	ldw	r3,56(sp)
    6d8c:	18000626 	beq	r3,zero,6da8 <_dtoa_r+0x47c>
    6d90:	d9000f17 	ldw	r4,60(sp)
    6d94:	d9401017 	ldw	r5,64(sp)
    6d98:	000d883a 	mov	r6,zero
    6d9c:	01cffc34 	movhi	r7,16368
    6da0:	00029fc0 	call	29fc <__ledf2>
    6da4:	10040b16 	blt	r2,zero,7dd4 <_dtoa_r+0x14a8>
    6da8:	8009883a 	mov	r4,r16
    6dac:	000e5c80 	call	e5c8 <__floatsidf>
    6db0:	d9800f17 	ldw	r6,60(sp)
    6db4:	d9c01017 	ldw	r7,64(sp)
    6db8:	1009883a 	mov	r4,r2
    6dbc:	180b883a 	mov	r5,r3
    6dc0:	0002af00 	call	2af0 <__muldf3>
    6dc4:	000d883a 	mov	r6,zero
    6dc8:	01d00734 	movhi	r7,16412
    6dcc:	1009883a 	mov	r4,r2
    6dd0:	180b883a 	mov	r5,r3
    6dd4:	00018680 	call	1868 <__adddf3>
    6dd8:	1021883a 	mov	r16,r2
    6ddc:	d8800617 	ldw	r2,24(sp)
    6de0:	047f3034 	movhi	r17,64704
    6de4:	1c63883a 	add	r17,r3,r17
    6de8:	10031826 	beq	r2,zero,7a4c <_dtoa_r+0x1120>
    6dec:	d8c00517 	ldw	r3,20(sp)
    6df0:	db000617 	ldw	r12,24(sp)
    6df4:	d8c01315 	stw	r3,76(sp)
    6df8:	d9000b17 	ldw	r4,44(sp)
    6dfc:	20038f26 	beq	r4,zero,7c3c <_dtoa_r+0x1310>
    6e00:	60bfffc4 	addi	r2,r12,-1
    6e04:	100490fa 	slli	r2,r2,3
    6e08:	00c00074 	movhi	r3,1
    6e0c:	18c60804 	addi	r3,r3,6176
    6e10:	1885883a 	add	r2,r3,r2
    6e14:	11800017 	ldw	r6,0(r2)
    6e18:	11c00117 	ldw	r7,4(r2)
    6e1c:	d8800717 	ldw	r2,28(sp)
    6e20:	0009883a 	mov	r4,zero
    6e24:	014ff834 	movhi	r5,16352
    6e28:	db001615 	stw	r12,88(sp)
    6e2c:	15c00044 	addi	r23,r2,1
    6e30:	00021140 	call	2114 <__divdf3>
    6e34:	800d883a 	mov	r6,r16
    6e38:	880f883a 	mov	r7,r17
    6e3c:	1009883a 	mov	r4,r2
    6e40:	180b883a 	mov	r5,r3
    6e44:	00032080 	call	3208 <__subdf3>
    6e48:	d9401017 	ldw	r5,64(sp)
    6e4c:	d9000f17 	ldw	r4,60(sp)
    6e50:	102b883a 	mov	r21,r2
    6e54:	d8c01215 	stw	r3,72(sp)
    6e58:	000e5480 	call	e548 <__fixdfsi>
    6e5c:	1009883a 	mov	r4,r2
    6e60:	1029883a 	mov	r20,r2
    6e64:	000e5c80 	call	e5c8 <__floatsidf>
    6e68:	d9000f17 	ldw	r4,60(sp)
    6e6c:	d9401017 	ldw	r5,64(sp)
    6e70:	100d883a 	mov	r6,r2
    6e74:	180f883a 	mov	r7,r3
    6e78:	00032080 	call	3208 <__subdf3>
    6e7c:	1823883a 	mov	r17,r3
    6e80:	d8c00717 	ldw	r3,28(sp)
    6e84:	d9401217 	ldw	r5,72(sp)
    6e88:	a2000c04 	addi	r8,r20,48
    6e8c:	1021883a 	mov	r16,r2
    6e90:	1a000005 	stb	r8,0(r3)
    6e94:	800d883a 	mov	r6,r16
    6e98:	880f883a 	mov	r7,r17
    6e9c:	a809883a 	mov	r4,r21
    6ea0:	4029883a 	mov	r20,r8
    6ea4:	000e46c0 	call	e46c <__gedf2>
    6ea8:	00841d16 	blt	zero,r2,7f20 <_dtoa_r+0x15f4>
    6eac:	800d883a 	mov	r6,r16
    6eb0:	880f883a 	mov	r7,r17
    6eb4:	0009883a 	mov	r4,zero
    6eb8:	014ffc34 	movhi	r5,16368
    6ebc:	00032080 	call	3208 <__subdf3>
    6ec0:	d9401217 	ldw	r5,72(sp)
    6ec4:	100d883a 	mov	r6,r2
    6ec8:	180f883a 	mov	r7,r3
    6ecc:	a809883a 	mov	r4,r21
    6ed0:	000e46c0 	call	e46c <__gedf2>
    6ed4:	db001617 	ldw	r12,88(sp)
    6ed8:	00840e16 	blt	zero,r2,7f14 <_dtoa_r+0x15e8>
    6edc:	00800044 	movi	r2,1
    6ee0:	13006b0e 	bge	r2,r12,7090 <_dtoa_r+0x764>
    6ee4:	d9000717 	ldw	r4,28(sp)
    6ee8:	dd800f15 	stw	r22,60(sp)
    6eec:	dcc01015 	stw	r19,64(sp)
    6ef0:	2319883a 	add	r12,r4,r12
    6ef4:	dcc01217 	ldw	r19,72(sp)
    6ef8:	602d883a 	mov	r22,r12
    6efc:	dc801215 	stw	r18,72(sp)
    6f00:	b825883a 	mov	r18,r23
    6f04:	00000906 	br	6f2c <_dtoa_r+0x600>
    6f08:	00032080 	call	3208 <__subdf3>
    6f0c:	a80d883a 	mov	r6,r21
    6f10:	980f883a 	mov	r7,r19
    6f14:	1009883a 	mov	r4,r2
    6f18:	180b883a 	mov	r5,r3
    6f1c:	00029fc0 	call	29fc <__ledf2>
    6f20:	1003e816 	blt	r2,zero,7ec4 <_dtoa_r+0x1598>
    6f24:	b825883a 	mov	r18,r23
    6f28:	bd83e926 	beq	r23,r22,7ed0 <_dtoa_r+0x15a4>
    6f2c:	a809883a 	mov	r4,r21
    6f30:	980b883a 	mov	r5,r19
    6f34:	000d883a 	mov	r6,zero
    6f38:	01d00934 	movhi	r7,16420
    6f3c:	0002af00 	call	2af0 <__muldf3>
    6f40:	000d883a 	mov	r6,zero
    6f44:	01d00934 	movhi	r7,16420
    6f48:	8009883a 	mov	r4,r16
    6f4c:	880b883a 	mov	r5,r17
    6f50:	102b883a 	mov	r21,r2
    6f54:	1827883a 	mov	r19,r3
    6f58:	0002af00 	call	2af0 <__muldf3>
    6f5c:	180b883a 	mov	r5,r3
    6f60:	1009883a 	mov	r4,r2
    6f64:	1821883a 	mov	r16,r3
    6f68:	1023883a 	mov	r17,r2
    6f6c:	000e5480 	call	e548 <__fixdfsi>
    6f70:	1009883a 	mov	r4,r2
    6f74:	1029883a 	mov	r20,r2
    6f78:	000e5c80 	call	e5c8 <__floatsidf>
    6f7c:	8809883a 	mov	r4,r17
    6f80:	800b883a 	mov	r5,r16
    6f84:	100d883a 	mov	r6,r2
    6f88:	180f883a 	mov	r7,r3
    6f8c:	00032080 	call	3208 <__subdf3>
    6f90:	a5000c04 	addi	r20,r20,48
    6f94:	a80d883a 	mov	r6,r21
    6f98:	980f883a 	mov	r7,r19
    6f9c:	1009883a 	mov	r4,r2
    6fa0:	180b883a 	mov	r5,r3
    6fa4:	95000005 	stb	r20,0(r18)
    6fa8:	1021883a 	mov	r16,r2
    6fac:	1823883a 	mov	r17,r3
    6fb0:	00029fc0 	call	29fc <__ledf2>
    6fb4:	bdc00044 	addi	r23,r23,1
    6fb8:	800d883a 	mov	r6,r16
    6fbc:	880f883a 	mov	r7,r17
    6fc0:	0009883a 	mov	r4,zero
    6fc4:	014ffc34 	movhi	r5,16368
    6fc8:	103fcf0e 	bge	r2,zero,6f08 <__alt_mem_onchip_memory+0xf7806f08>
    6fcc:	d8c01317 	ldw	r3,76(sp)
    6fd0:	d8c00515 	stw	r3,20(sp)
    6fd4:	d9400917 	ldw	r5,36(sp)
    6fd8:	e009883a 	mov	r4,fp
    6fdc:	000a0cc0 	call	a0cc <_Bfree>
    6fe0:	d9000517 	ldw	r4,20(sp)
    6fe4:	d9802317 	ldw	r6,140(sp)
    6fe8:	d9c02517 	ldw	r7,148(sp)
    6fec:	b8000005 	stb	zero,0(r23)
    6ff0:	20800044 	addi	r2,r4,1
    6ff4:	30800015 	stw	r2,0(r6)
    6ff8:	3802aa26 	beq	r7,zero,7aa4 <_dtoa_r+0x1178>
    6ffc:	3dc00015 	stw	r23,0(r7)
    7000:	d8800717 	ldw	r2,28(sp)
    7004:	003e7906 	br	69ec <__alt_mem_onchip_memory+0xf78069ec>
    7008:	00800434 	movhi	r2,16
    700c:	10bfffc4 	addi	r2,r2,-1
    7010:	88a2703a 	and	r17,r17,r2
    7014:	883e851e 	bne	r17,zero,6a2c <__alt_mem_onchip_memory+0xf7806a2c>
    7018:	00800074 	movhi	r2,1
    701c:	1085ea04 	addi	r2,r2,6056
    7020:	003e8406 	br	6a34 <__alt_mem_onchip_memory+0xf7806a34>
    7024:	10c00204 	addi	r3,r2,8
    7028:	003e8706 	br	6a48 <__alt_mem_onchip_memory+0xf7806a48>
    702c:	01400434 	movhi	r5,16
    7030:	297fffc4 	addi	r5,r5,-1
    7034:	994a703a 	and	r5,r19,r5
    7038:	9009883a 	mov	r4,r18
    703c:	843f0044 	addi	r16,r16,-1023
    7040:	294ffc34 	orhi	r5,r5,16368
    7044:	dd800217 	ldw	r22,8(sp)
    7048:	d8001115 	stw	zero,68(sp)
    704c:	003ea506 	br	6ae4 <__alt_mem_onchip_memory+0xf7806ae4>
    7050:	00800074 	movhi	r2,1
    7054:	1085e104 	addi	r2,r2,6020
    7058:	003e6406 	br	69ec <__alt_mem_onchip_memory+0xf78069ec>
    705c:	e0001115 	stw	zero,68(fp)
    7060:	000b883a 	mov	r5,zero
    7064:	e009883a 	mov	r4,fp
    7068:	000a0240 	call	a024 <_Balloc>
    706c:	01bfffc4 	movi	r6,-1
    7070:	01c00044 	movi	r7,1
    7074:	d8800715 	stw	r2,28(sp)
    7078:	d9800c15 	stw	r6,48(sp)
    707c:	e0801015 	stw	r2,64(fp)
    7080:	d8000315 	stw	zero,12(sp)
    7084:	d9c00b15 	stw	r7,44(sp)
    7088:	d9800615 	stw	r6,24(sp)
    708c:	d8002215 	stw	zero,136(sp)
    7090:	d8800117 	ldw	r2,4(sp)
    7094:	10008916 	blt	r2,zero,72bc <_dtoa_r+0x990>
    7098:	d9000517 	ldw	r4,20(sp)
    709c:	00c00384 	movi	r3,14
    70a0:	19008616 	blt	r3,r4,72bc <_dtoa_r+0x990>
    70a4:	200490fa 	slli	r2,r4,3
    70a8:	00c00074 	movhi	r3,1
    70ac:	d9802217 	ldw	r6,136(sp)
    70b0:	18c60804 	addi	r3,r3,6176
    70b4:	1885883a 	add	r2,r3,r2
    70b8:	14000017 	ldw	r16,0(r2)
    70bc:	14400117 	ldw	r17,4(r2)
    70c0:	30016316 	blt	r6,zero,7650 <_dtoa_r+0xd24>
    70c4:	800d883a 	mov	r6,r16
    70c8:	880f883a 	mov	r7,r17
    70cc:	9009883a 	mov	r4,r18
    70d0:	980b883a 	mov	r5,r19
    70d4:	00021140 	call	2114 <__divdf3>
    70d8:	180b883a 	mov	r5,r3
    70dc:	1009883a 	mov	r4,r2
    70e0:	000e5480 	call	e548 <__fixdfsi>
    70e4:	1009883a 	mov	r4,r2
    70e8:	102b883a 	mov	r21,r2
    70ec:	000e5c80 	call	e5c8 <__floatsidf>
    70f0:	800d883a 	mov	r6,r16
    70f4:	880f883a 	mov	r7,r17
    70f8:	1009883a 	mov	r4,r2
    70fc:	180b883a 	mov	r5,r3
    7100:	0002af00 	call	2af0 <__muldf3>
    7104:	100d883a 	mov	r6,r2
    7108:	180f883a 	mov	r7,r3
    710c:	9009883a 	mov	r4,r18
    7110:	980b883a 	mov	r5,r19
    7114:	00032080 	call	3208 <__subdf3>
    7118:	d9c00717 	ldw	r7,28(sp)
    711c:	1009883a 	mov	r4,r2
    7120:	a8800c04 	addi	r2,r21,48
    7124:	38800005 	stb	r2,0(r7)
    7128:	3dc00044 	addi	r23,r7,1
    712c:	d9c00617 	ldw	r7,24(sp)
    7130:	01800044 	movi	r6,1
    7134:	180b883a 	mov	r5,r3
    7138:	2005883a 	mov	r2,r4
    713c:	39803826 	beq	r7,r6,7220 <_dtoa_r+0x8f4>
    7140:	000d883a 	mov	r6,zero
    7144:	01d00934 	movhi	r7,16420
    7148:	0002af00 	call	2af0 <__muldf3>
    714c:	000d883a 	mov	r6,zero
    7150:	000f883a 	mov	r7,zero
    7154:	1009883a 	mov	r4,r2
    7158:	180b883a 	mov	r5,r3
    715c:	1025883a 	mov	r18,r2
    7160:	1827883a 	mov	r19,r3
    7164:	000e3e40 	call	e3e4 <__eqdf2>
    7168:	103f9a26 	beq	r2,zero,6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    716c:	d9c00617 	ldw	r7,24(sp)
    7170:	d8c00717 	ldw	r3,28(sp)
    7174:	b829883a 	mov	r20,r23
    7178:	38bfffc4 	addi	r2,r7,-1
    717c:	18ad883a 	add	r22,r3,r2
    7180:	00000a06 	br	71ac <_dtoa_r+0x880>
    7184:	0002af00 	call	2af0 <__muldf3>
    7188:	000d883a 	mov	r6,zero
    718c:	000f883a 	mov	r7,zero
    7190:	1009883a 	mov	r4,r2
    7194:	180b883a 	mov	r5,r3
    7198:	1025883a 	mov	r18,r2
    719c:	1827883a 	mov	r19,r3
    71a0:	b829883a 	mov	r20,r23
    71a4:	000e3e40 	call	e3e4 <__eqdf2>
    71a8:	103f8a26 	beq	r2,zero,6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    71ac:	800d883a 	mov	r6,r16
    71b0:	880f883a 	mov	r7,r17
    71b4:	9009883a 	mov	r4,r18
    71b8:	980b883a 	mov	r5,r19
    71bc:	00021140 	call	2114 <__divdf3>
    71c0:	180b883a 	mov	r5,r3
    71c4:	1009883a 	mov	r4,r2
    71c8:	000e5480 	call	e548 <__fixdfsi>
    71cc:	1009883a 	mov	r4,r2
    71d0:	102b883a 	mov	r21,r2
    71d4:	000e5c80 	call	e5c8 <__floatsidf>
    71d8:	800d883a 	mov	r6,r16
    71dc:	880f883a 	mov	r7,r17
    71e0:	1009883a 	mov	r4,r2
    71e4:	180b883a 	mov	r5,r3
    71e8:	0002af00 	call	2af0 <__muldf3>
    71ec:	100d883a 	mov	r6,r2
    71f0:	180f883a 	mov	r7,r3
    71f4:	9009883a 	mov	r4,r18
    71f8:	980b883a 	mov	r5,r19
    71fc:	00032080 	call	3208 <__subdf3>
    7200:	aa000c04 	addi	r8,r21,48
    7204:	a2000005 	stb	r8,0(r20)
    7208:	000d883a 	mov	r6,zero
    720c:	01d00934 	movhi	r7,16420
    7210:	1009883a 	mov	r4,r2
    7214:	180b883a 	mov	r5,r3
    7218:	a5c00044 	addi	r23,r20,1
    721c:	b53fd91e 	bne	r22,r20,7184 <__alt_mem_onchip_memory+0xf7807184>
    7220:	100d883a 	mov	r6,r2
    7224:	180f883a 	mov	r7,r3
    7228:	1009883a 	mov	r4,r2
    722c:	180b883a 	mov	r5,r3
    7230:	00018680 	call	1868 <__adddf3>
    7234:	100d883a 	mov	r6,r2
    7238:	180f883a 	mov	r7,r3
    723c:	8009883a 	mov	r4,r16
    7240:	880b883a 	mov	r5,r17
    7244:	1027883a 	mov	r19,r2
    7248:	1825883a 	mov	r18,r3
    724c:	00029fc0 	call	29fc <__ledf2>
    7250:	10000816 	blt	r2,zero,7274 <_dtoa_r+0x948>
    7254:	980d883a 	mov	r6,r19
    7258:	900f883a 	mov	r7,r18
    725c:	8009883a 	mov	r4,r16
    7260:	880b883a 	mov	r5,r17
    7264:	000e3e40 	call	e3e4 <__eqdf2>
    7268:	103f5a1e 	bne	r2,zero,6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    726c:	ad40004c 	andi	r21,r21,1
    7270:	a83f5826 	beq	r21,zero,6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    7274:	bd3fffc3 	ldbu	r20,-1(r23)
    7278:	b8bfffc4 	addi	r2,r23,-1
    727c:	1007883a 	mov	r3,r2
    7280:	01400e44 	movi	r5,57
    7284:	d9800717 	ldw	r6,28(sp)
    7288:	00000506 	br	72a0 <_dtoa_r+0x974>
    728c:	18ffffc4 	addi	r3,r3,-1
    7290:	11824726 	beq	r2,r6,7bb0 <_dtoa_r+0x1284>
    7294:	1d000003 	ldbu	r20,0(r3)
    7298:	102f883a 	mov	r23,r2
    729c:	10bfffc4 	addi	r2,r2,-1
    72a0:	a1003fcc 	andi	r4,r20,255
    72a4:	2100201c 	xori	r4,r4,128
    72a8:	213fe004 	addi	r4,r4,-128
    72ac:	217ff726 	beq	r4,r5,728c <__alt_mem_onchip_memory+0xf780728c>
    72b0:	a2000044 	addi	r8,r20,1
    72b4:	12000005 	stb	r8,0(r2)
    72b8:	003f4606 	br	6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    72bc:	d9000b17 	ldw	r4,44(sp)
    72c0:	2000c826 	beq	r4,zero,75e4 <_dtoa_r+0xcb8>
    72c4:	d9800317 	ldw	r6,12(sp)
    72c8:	00c00044 	movi	r3,1
    72cc:	1980f90e 	bge	r3,r6,76b4 <_dtoa_r+0xd88>
    72d0:	d8800617 	ldw	r2,24(sp)
    72d4:	d8c00a17 	ldw	r3,40(sp)
    72d8:	157fffc4 	addi	r21,r2,-1
    72dc:	1d41f316 	blt	r3,r21,7aac <_dtoa_r+0x1180>
    72e0:	1d6bc83a 	sub	r21,r3,r21
    72e4:	d9c00617 	ldw	r7,24(sp)
    72e8:	3802aa16 	blt	r7,zero,7d94 <_dtoa_r+0x1468>
    72ec:	dd000817 	ldw	r20,32(sp)
    72f0:	d8800617 	ldw	r2,24(sp)
    72f4:	d8c00817 	ldw	r3,32(sp)
    72f8:	01400044 	movi	r5,1
    72fc:	e009883a 	mov	r4,fp
    7300:	1887883a 	add	r3,r3,r2
    7304:	d8c00815 	stw	r3,32(sp)
    7308:	b0ad883a 	add	r22,r22,r2
    730c:	000a4300 	call	a430 <__i2b>
    7310:	1023883a 	mov	r17,r2
    7314:	a0000826 	beq	r20,zero,7338 <_dtoa_r+0xa0c>
    7318:	0580070e 	bge	zero,r22,7338 <_dtoa_r+0xa0c>
    731c:	a005883a 	mov	r2,r20
    7320:	b500b916 	blt	r22,r20,7608 <_dtoa_r+0xcdc>
    7324:	d9000817 	ldw	r4,32(sp)
    7328:	a0a9c83a 	sub	r20,r20,r2
    732c:	b0adc83a 	sub	r22,r22,r2
    7330:	2089c83a 	sub	r4,r4,r2
    7334:	d9000815 	stw	r4,32(sp)
    7338:	d9800a17 	ldw	r6,40(sp)
    733c:	0181810e 	bge	zero,r6,7944 <_dtoa_r+0x1018>
    7340:	d9c00b17 	ldw	r7,44(sp)
    7344:	3800b326 	beq	r7,zero,7614 <_dtoa_r+0xce8>
    7348:	a800b226 	beq	r21,zero,7614 <_dtoa_r+0xce8>
    734c:	880b883a 	mov	r5,r17
    7350:	a80d883a 	mov	r6,r21
    7354:	e009883a 	mov	r4,fp
    7358:	000a6640 	call	a664 <__pow5mult>
    735c:	d9800917 	ldw	r6,36(sp)
    7360:	100b883a 	mov	r5,r2
    7364:	e009883a 	mov	r4,fp
    7368:	1023883a 	mov	r17,r2
    736c:	000a46c0 	call	a46c <__multiply>
    7370:	1021883a 	mov	r16,r2
    7374:	d8800a17 	ldw	r2,40(sp)
    7378:	d9400917 	ldw	r5,36(sp)
    737c:	e009883a 	mov	r4,fp
    7380:	1545c83a 	sub	r2,r2,r21
    7384:	d8800a15 	stw	r2,40(sp)
    7388:	000a0cc0 	call	a0cc <_Bfree>
    738c:	d8c00a17 	ldw	r3,40(sp)
    7390:	18009f1e 	bne	r3,zero,7610 <_dtoa_r+0xce4>
    7394:	05c00044 	movi	r23,1
    7398:	e009883a 	mov	r4,fp
    739c:	b80b883a 	mov	r5,r23
    73a0:	000a4300 	call	a430 <__i2b>
    73a4:	d9000d17 	ldw	r4,52(sp)
    73a8:	102b883a 	mov	r21,r2
    73ac:	2000ce26 	beq	r4,zero,76e8 <_dtoa_r+0xdbc>
    73b0:	200d883a 	mov	r6,r4
    73b4:	100b883a 	mov	r5,r2
    73b8:	e009883a 	mov	r4,fp
    73bc:	000a6640 	call	a664 <__pow5mult>
    73c0:	d9800317 	ldw	r6,12(sp)
    73c4:	102b883a 	mov	r21,r2
    73c8:	b981810e 	bge	r23,r6,79d0 <_dtoa_r+0x10a4>
    73cc:	0027883a 	mov	r19,zero
    73d0:	a8800417 	ldw	r2,16(r21)
    73d4:	05c00804 	movi	r23,32
    73d8:	10800104 	addi	r2,r2,4
    73dc:	1085883a 	add	r2,r2,r2
    73e0:	1085883a 	add	r2,r2,r2
    73e4:	a885883a 	add	r2,r21,r2
    73e8:	11000017 	ldw	r4,0(r2)
    73ec:	000a3180 	call	a318 <__hi0bits>
    73f0:	b885c83a 	sub	r2,r23,r2
    73f4:	1585883a 	add	r2,r2,r22
    73f8:	108007cc 	andi	r2,r2,31
    73fc:	1000b326 	beq	r2,zero,76cc <_dtoa_r+0xda0>
    7400:	00c00804 	movi	r3,32
    7404:	1887c83a 	sub	r3,r3,r2
    7408:	01000104 	movi	r4,4
    740c:	20c2cd0e 	bge	r4,r3,7f44 <_dtoa_r+0x1618>
    7410:	00c00704 	movi	r3,28
    7414:	1885c83a 	sub	r2,r3,r2
    7418:	d8c00817 	ldw	r3,32(sp)
    741c:	a0a9883a 	add	r20,r20,r2
    7420:	b0ad883a 	add	r22,r22,r2
    7424:	1887883a 	add	r3,r3,r2
    7428:	d8c00815 	stw	r3,32(sp)
    742c:	d9800817 	ldw	r6,32(sp)
    7430:	0180040e 	bge	zero,r6,7444 <_dtoa_r+0xb18>
    7434:	800b883a 	mov	r5,r16
    7438:	e009883a 	mov	r4,fp
    743c:	000a7a40 	call	a7a4 <__lshift>
    7440:	1021883a 	mov	r16,r2
    7444:	0580050e 	bge	zero,r22,745c <_dtoa_r+0xb30>
    7448:	a80b883a 	mov	r5,r21
    744c:	b00d883a 	mov	r6,r22
    7450:	e009883a 	mov	r4,fp
    7454:	000a7a40 	call	a7a4 <__lshift>
    7458:	102b883a 	mov	r21,r2
    745c:	d9c00e17 	ldw	r7,56(sp)
    7460:	3801211e 	bne	r7,zero,78e8 <_dtoa_r+0xfbc>
    7464:	d9800617 	ldw	r6,24(sp)
    7468:	0181380e 	bge	zero,r6,794c <_dtoa_r+0x1020>
    746c:	d8c00b17 	ldw	r3,44(sp)
    7470:	1800ab1e 	bne	r3,zero,7720 <_dtoa_r+0xdf4>
    7474:	dc800717 	ldw	r18,28(sp)
    7478:	dcc00617 	ldw	r19,24(sp)
    747c:	9029883a 	mov	r20,r18
    7480:	00000206 	br	748c <_dtoa_r+0xb60>
    7484:	000a0f40 	call	a0f4 <__multadd>
    7488:	1021883a 	mov	r16,r2
    748c:	a80b883a 	mov	r5,r21
    7490:	8009883a 	mov	r4,r16
    7494:	000672c0 	call	672c <quorem>
    7498:	10800c04 	addi	r2,r2,48
    749c:	90800005 	stb	r2,0(r18)
    74a0:	94800044 	addi	r18,r18,1
    74a4:	9507c83a 	sub	r3,r18,r20
    74a8:	000f883a 	mov	r7,zero
    74ac:	01800284 	movi	r6,10
    74b0:	800b883a 	mov	r5,r16
    74b4:	e009883a 	mov	r4,fp
    74b8:	1cfff216 	blt	r3,r19,7484 <__alt_mem_onchip_memory+0xf7807484>
    74bc:	1011883a 	mov	r8,r2
    74c0:	d8800617 	ldw	r2,24(sp)
    74c4:	0082370e 	bge	zero,r2,7da4 <_dtoa_r+0x1478>
    74c8:	d9000717 	ldw	r4,28(sp)
    74cc:	0025883a 	mov	r18,zero
    74d0:	20af883a 	add	r23,r4,r2
    74d4:	01800044 	movi	r6,1
    74d8:	800b883a 	mov	r5,r16
    74dc:	e009883a 	mov	r4,fp
    74e0:	da001715 	stw	r8,92(sp)
    74e4:	000a7a40 	call	a7a4 <__lshift>
    74e8:	a80b883a 	mov	r5,r21
    74ec:	1009883a 	mov	r4,r2
    74f0:	d8800915 	stw	r2,36(sp)
    74f4:	000a8ec0 	call	a8ec <__mcmp>
    74f8:	da001717 	ldw	r8,92(sp)
    74fc:	0081800e 	bge	zero,r2,7b00 <_dtoa_r+0x11d4>
    7500:	b93fffc3 	ldbu	r4,-1(r23)
    7504:	b8bfffc4 	addi	r2,r23,-1
    7508:	1007883a 	mov	r3,r2
    750c:	01800e44 	movi	r6,57
    7510:	d9c00717 	ldw	r7,28(sp)
    7514:	00000506 	br	752c <_dtoa_r+0xc00>
    7518:	18ffffc4 	addi	r3,r3,-1
    751c:	11c12326 	beq	r2,r7,79ac <_dtoa_r+0x1080>
    7520:	19000003 	ldbu	r4,0(r3)
    7524:	102f883a 	mov	r23,r2
    7528:	10bfffc4 	addi	r2,r2,-1
    752c:	21403fcc 	andi	r5,r4,255
    7530:	2940201c 	xori	r5,r5,128
    7534:	297fe004 	addi	r5,r5,-128
    7538:	29bff726 	beq	r5,r6,7518 <__alt_mem_onchip_memory+0xf7807518>
    753c:	21000044 	addi	r4,r4,1
    7540:	11000005 	stb	r4,0(r2)
    7544:	a80b883a 	mov	r5,r21
    7548:	e009883a 	mov	r4,fp
    754c:	000a0cc0 	call	a0cc <_Bfree>
    7550:	883ea026 	beq	r17,zero,6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    7554:	90000426 	beq	r18,zero,7568 <_dtoa_r+0xc3c>
    7558:	94400326 	beq	r18,r17,7568 <_dtoa_r+0xc3c>
    755c:	900b883a 	mov	r5,r18
    7560:	e009883a 	mov	r4,fp
    7564:	000a0cc0 	call	a0cc <_Bfree>
    7568:	880b883a 	mov	r5,r17
    756c:	e009883a 	mov	r4,fp
    7570:	000a0cc0 	call	a0cc <_Bfree>
    7574:	003e9706 	br	6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    7578:	01800044 	movi	r6,1
    757c:	d9800e15 	stw	r6,56(sp)
    7580:	003d9606 	br	6bdc <__alt_mem_onchip_memory+0xf7806bdc>
    7584:	d8800817 	ldw	r2,32(sp)
    7588:	d8c00517 	ldw	r3,20(sp)
    758c:	d8000d15 	stw	zero,52(sp)
    7590:	10c5c83a 	sub	r2,r2,r3
    7594:	00c9c83a 	sub	r4,zero,r3
    7598:	d8800815 	stw	r2,32(sp)
    759c:	d9000a15 	stw	r4,40(sp)
    75a0:	003d9706 	br	6c00 <__alt_mem_onchip_memory+0xf7806c00>
    75a4:	05adc83a 	sub	r22,zero,r22
    75a8:	dd800815 	stw	r22,32(sp)
    75ac:	002d883a 	mov	r22,zero
    75b0:	003d8e06 	br	6bec <__alt_mem_onchip_memory+0xf7806bec>
    75b4:	d9000517 	ldw	r4,20(sp)
    75b8:	000e5c80 	call	e5c8 <__floatsidf>
    75bc:	100d883a 	mov	r6,r2
    75c0:	180f883a 	mov	r7,r3
    75c4:	a009883a 	mov	r4,r20
    75c8:	880b883a 	mov	r5,r17
    75cc:	000e3e40 	call	e3e4 <__eqdf2>
    75d0:	103d7126 	beq	r2,zero,6b98 <__alt_mem_onchip_memory+0xf7806b98>
    75d4:	d9c00517 	ldw	r7,20(sp)
    75d8:	39ffffc4 	addi	r7,r7,-1
    75dc:	d9c00515 	stw	r7,20(sp)
    75e0:	003d6d06 	br	6b98 <__alt_mem_onchip_memory+0xf7806b98>
    75e4:	dd400a17 	ldw	r21,40(sp)
    75e8:	dd000817 	ldw	r20,32(sp)
    75ec:	0023883a 	mov	r17,zero
    75f0:	003f4806 	br	7314 <__alt_mem_onchip_memory+0xf7807314>
    75f4:	10e3c83a 	sub	r17,r2,r3
    75f8:	9448983a 	sll	r4,r18,r17
    75fc:	003d3206 	br	6ac8 <__alt_mem_onchip_memory+0xf7806ac8>
    7600:	d8000e15 	stw	zero,56(sp)
    7604:	003d7506 	br	6bdc <__alt_mem_onchip_memory+0xf7806bdc>
    7608:	b005883a 	mov	r2,r22
    760c:	003f4506 	br	7324 <__alt_mem_onchip_memory+0xf7807324>
    7610:	dc000915 	stw	r16,36(sp)
    7614:	d9800a17 	ldw	r6,40(sp)
    7618:	d9400917 	ldw	r5,36(sp)
    761c:	e009883a 	mov	r4,fp
    7620:	000a6640 	call	a664 <__pow5mult>
    7624:	1021883a 	mov	r16,r2
    7628:	003f5a06 	br	7394 <__alt_mem_onchip_memory+0xf7807394>
    762c:	01c00044 	movi	r7,1
    7630:	d9c00b15 	stw	r7,44(sp)
    7634:	d8802217 	ldw	r2,136(sp)
    7638:	0081280e 	bge	zero,r2,7adc <_dtoa_r+0x11b0>
    763c:	100d883a 	mov	r6,r2
    7640:	1021883a 	mov	r16,r2
    7644:	d8800c15 	stw	r2,48(sp)
    7648:	d8800615 	stw	r2,24(sp)
    764c:	003d8806 	br	6c70 <__alt_mem_onchip_memory+0xf7806c70>
    7650:	d8800617 	ldw	r2,24(sp)
    7654:	00be9b16 	blt	zero,r2,70c4 <__alt_mem_onchip_memory+0xf78070c4>
    7658:	10010f1e 	bne	r2,zero,7a98 <_dtoa_r+0x116c>
    765c:	880b883a 	mov	r5,r17
    7660:	000d883a 	mov	r6,zero
    7664:	01d00534 	movhi	r7,16404
    7668:	8009883a 	mov	r4,r16
    766c:	0002af00 	call	2af0 <__muldf3>
    7670:	900d883a 	mov	r6,r18
    7674:	980f883a 	mov	r7,r19
    7678:	1009883a 	mov	r4,r2
    767c:	180b883a 	mov	r5,r3
    7680:	000e46c0 	call	e46c <__gedf2>
    7684:	002b883a 	mov	r21,zero
    7688:	0023883a 	mov	r17,zero
    768c:	1000bf16 	blt	r2,zero,798c <_dtoa_r+0x1060>
    7690:	d9802217 	ldw	r6,136(sp)
    7694:	ddc00717 	ldw	r23,28(sp)
    7698:	018c303a 	nor	r6,zero,r6
    769c:	d9800515 	stw	r6,20(sp)
    76a0:	a80b883a 	mov	r5,r21
    76a4:	e009883a 	mov	r4,fp
    76a8:	000a0cc0 	call	a0cc <_Bfree>
    76ac:	883e4926 	beq	r17,zero,6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    76b0:	003fad06 	br	7568 <__alt_mem_onchip_memory+0xf7807568>
    76b4:	d9c01117 	ldw	r7,68(sp)
    76b8:	3801bc26 	beq	r7,zero,7dac <_dtoa_r+0x1480>
    76bc:	10810cc4 	addi	r2,r2,1075
    76c0:	dd400a17 	ldw	r21,40(sp)
    76c4:	dd000817 	ldw	r20,32(sp)
    76c8:	003f0a06 	br	72f4 <__alt_mem_onchip_memory+0xf78072f4>
    76cc:	00800704 	movi	r2,28
    76d0:	d9000817 	ldw	r4,32(sp)
    76d4:	a0a9883a 	add	r20,r20,r2
    76d8:	b0ad883a 	add	r22,r22,r2
    76dc:	2089883a 	add	r4,r4,r2
    76e0:	d9000815 	stw	r4,32(sp)
    76e4:	003f5106 	br	742c <__alt_mem_onchip_memory+0xf780742c>
    76e8:	d8c00317 	ldw	r3,12(sp)
    76ec:	b8c1fc0e 	bge	r23,r3,7ee0 <_dtoa_r+0x15b4>
    76f0:	0027883a 	mov	r19,zero
    76f4:	b805883a 	mov	r2,r23
    76f8:	003f3e06 	br	73f4 <__alt_mem_onchip_memory+0xf78073f4>
    76fc:	880b883a 	mov	r5,r17
    7700:	e009883a 	mov	r4,fp
    7704:	000f883a 	mov	r7,zero
    7708:	01800284 	movi	r6,10
    770c:	000a0f40 	call	a0f4 <__multadd>
    7710:	d9000c17 	ldw	r4,48(sp)
    7714:	1023883a 	mov	r17,r2
    7718:	0102040e 	bge	zero,r4,7f2c <_dtoa_r+0x1600>
    771c:	d9000615 	stw	r4,24(sp)
    7720:	0500050e 	bge	zero,r20,7738 <_dtoa_r+0xe0c>
    7724:	880b883a 	mov	r5,r17
    7728:	a00d883a 	mov	r6,r20
    772c:	e009883a 	mov	r4,fp
    7730:	000a7a40 	call	a7a4 <__lshift>
    7734:	1023883a 	mov	r17,r2
    7738:	9801241e 	bne	r19,zero,7bcc <_dtoa_r+0x12a0>
    773c:	8829883a 	mov	r20,r17
    7740:	d9000617 	ldw	r4,24(sp)
    7744:	dcc00717 	ldw	r19,28(sp)
    7748:	9480004c 	andi	r18,r18,1
    774c:	20bfffc4 	addi	r2,r4,-1
    7750:	9885883a 	add	r2,r19,r2
    7754:	d8800415 	stw	r2,16(sp)
    7758:	dc800615 	stw	r18,24(sp)
    775c:	a80b883a 	mov	r5,r21
    7760:	8009883a 	mov	r4,r16
    7764:	000672c0 	call	672c <quorem>
    7768:	880b883a 	mov	r5,r17
    776c:	8009883a 	mov	r4,r16
    7770:	102f883a 	mov	r23,r2
    7774:	000a8ec0 	call	a8ec <__mcmp>
    7778:	a80b883a 	mov	r5,r21
    777c:	a00d883a 	mov	r6,r20
    7780:	e009883a 	mov	r4,fp
    7784:	102d883a 	mov	r22,r2
    7788:	000a94c0 	call	a94c <__mdiff>
    778c:	1007883a 	mov	r3,r2
    7790:	10800317 	ldw	r2,12(r2)
    7794:	bc800c04 	addi	r18,r23,48
    7798:	180b883a 	mov	r5,r3
    779c:	10004e1e 	bne	r2,zero,78d8 <_dtoa_r+0xfac>
    77a0:	8009883a 	mov	r4,r16
    77a4:	d8c01615 	stw	r3,88(sp)
    77a8:	000a8ec0 	call	a8ec <__mcmp>
    77ac:	d8c01617 	ldw	r3,88(sp)
    77b0:	e009883a 	mov	r4,fp
    77b4:	d8801615 	stw	r2,88(sp)
    77b8:	180b883a 	mov	r5,r3
    77bc:	000a0cc0 	call	a0cc <_Bfree>
    77c0:	d8801617 	ldw	r2,88(sp)
    77c4:	1000041e 	bne	r2,zero,77d8 <_dtoa_r+0xeac>
    77c8:	d9800317 	ldw	r6,12(sp)
    77cc:	3000021e 	bne	r6,zero,77d8 <_dtoa_r+0xeac>
    77d0:	d8c00617 	ldw	r3,24(sp)
    77d4:	18003726 	beq	r3,zero,78b4 <_dtoa_r+0xf88>
    77d8:	b0002016 	blt	r22,zero,785c <_dtoa_r+0xf30>
    77dc:	b000041e 	bne	r22,zero,77f0 <_dtoa_r+0xec4>
    77e0:	d9000317 	ldw	r4,12(sp)
    77e4:	2000021e 	bne	r4,zero,77f0 <_dtoa_r+0xec4>
    77e8:	d8c00617 	ldw	r3,24(sp)
    77ec:	18001b26 	beq	r3,zero,785c <_dtoa_r+0xf30>
    77f0:	00810716 	blt	zero,r2,7c10 <_dtoa_r+0x12e4>
    77f4:	d8c00417 	ldw	r3,16(sp)
    77f8:	9d800044 	addi	r22,r19,1
    77fc:	9c800005 	stb	r18,0(r19)
    7800:	b02f883a 	mov	r23,r22
    7804:	98c10626 	beq	r19,r3,7c20 <_dtoa_r+0x12f4>
    7808:	800b883a 	mov	r5,r16
    780c:	000f883a 	mov	r7,zero
    7810:	01800284 	movi	r6,10
    7814:	e009883a 	mov	r4,fp
    7818:	000a0f40 	call	a0f4 <__multadd>
    781c:	1021883a 	mov	r16,r2
    7820:	000f883a 	mov	r7,zero
    7824:	01800284 	movi	r6,10
    7828:	880b883a 	mov	r5,r17
    782c:	e009883a 	mov	r4,fp
    7830:	8d002526 	beq	r17,r20,78c8 <_dtoa_r+0xf9c>
    7834:	000a0f40 	call	a0f4 <__multadd>
    7838:	a00b883a 	mov	r5,r20
    783c:	000f883a 	mov	r7,zero
    7840:	01800284 	movi	r6,10
    7844:	e009883a 	mov	r4,fp
    7848:	1023883a 	mov	r17,r2
    784c:	000a0f40 	call	a0f4 <__multadd>
    7850:	1029883a 	mov	r20,r2
    7854:	b027883a 	mov	r19,r22
    7858:	003fc006 	br	775c <__alt_mem_onchip_memory+0xf780775c>
    785c:	9011883a 	mov	r8,r18
    7860:	00800e0e 	bge	zero,r2,789c <_dtoa_r+0xf70>
    7864:	800b883a 	mov	r5,r16
    7868:	01800044 	movi	r6,1
    786c:	e009883a 	mov	r4,fp
    7870:	da001715 	stw	r8,92(sp)
    7874:	000a7a40 	call	a7a4 <__lshift>
    7878:	a80b883a 	mov	r5,r21
    787c:	1009883a 	mov	r4,r2
    7880:	1021883a 	mov	r16,r2
    7884:	000a8ec0 	call	a8ec <__mcmp>
    7888:	da001717 	ldw	r8,92(sp)
    788c:	0081960e 	bge	zero,r2,7ee8 <_dtoa_r+0x15bc>
    7890:	00800e44 	movi	r2,57
    7894:	40817026 	beq	r8,r2,7e58 <_dtoa_r+0x152c>
    7898:	ba000c44 	addi	r8,r23,49
    789c:	8825883a 	mov	r18,r17
    78a0:	9dc00044 	addi	r23,r19,1
    78a4:	9a000005 	stb	r8,0(r19)
    78a8:	a023883a 	mov	r17,r20
    78ac:	dc000915 	stw	r16,36(sp)
    78b0:	003f2406 	br	7544 <__alt_mem_onchip_memory+0xf7807544>
    78b4:	00800e44 	movi	r2,57
    78b8:	9011883a 	mov	r8,r18
    78bc:	90816626 	beq	r18,r2,7e58 <_dtoa_r+0x152c>
    78c0:	05bff516 	blt	zero,r22,7898 <__alt_mem_onchip_memory+0xf7807898>
    78c4:	003ff506 	br	789c <__alt_mem_onchip_memory+0xf780789c>
    78c8:	000a0f40 	call	a0f4 <__multadd>
    78cc:	1023883a 	mov	r17,r2
    78d0:	1029883a 	mov	r20,r2
    78d4:	003fdf06 	br	7854 <__alt_mem_onchip_memory+0xf7807854>
    78d8:	e009883a 	mov	r4,fp
    78dc:	000a0cc0 	call	a0cc <_Bfree>
    78e0:	00800044 	movi	r2,1
    78e4:	003fbc06 	br	77d8 <__alt_mem_onchip_memory+0xf78077d8>
    78e8:	a80b883a 	mov	r5,r21
    78ec:	8009883a 	mov	r4,r16
    78f0:	000a8ec0 	call	a8ec <__mcmp>
    78f4:	103edb0e 	bge	r2,zero,7464 <__alt_mem_onchip_memory+0xf7807464>
    78f8:	800b883a 	mov	r5,r16
    78fc:	000f883a 	mov	r7,zero
    7900:	01800284 	movi	r6,10
    7904:	e009883a 	mov	r4,fp
    7908:	000a0f40 	call	a0f4 <__multadd>
    790c:	1021883a 	mov	r16,r2
    7910:	d8800517 	ldw	r2,20(sp)
    7914:	d8c00b17 	ldw	r3,44(sp)
    7918:	10bfffc4 	addi	r2,r2,-1
    791c:	d8800515 	stw	r2,20(sp)
    7920:	183f761e 	bne	r3,zero,76fc <__alt_mem_onchip_memory+0xf78076fc>
    7924:	d9000c17 	ldw	r4,48(sp)
    7928:	0101730e 	bge	zero,r4,7ef8 <_dtoa_r+0x15cc>
    792c:	d9000615 	stw	r4,24(sp)
    7930:	003ed006 	br	7474 <__alt_mem_onchip_memory+0xf7807474>
    7934:	00800084 	movi	r2,2
    7938:	3081861e 	bne	r6,r2,7f54 <_dtoa_r+0x1628>
    793c:	d8000b15 	stw	zero,44(sp)
    7940:	003f3c06 	br	7634 <__alt_mem_onchip_memory+0xf7807634>
    7944:	dc000917 	ldw	r16,36(sp)
    7948:	003e9206 	br	7394 <__alt_mem_onchip_memory+0xf7807394>
    794c:	d9c00317 	ldw	r7,12(sp)
    7950:	00800084 	movi	r2,2
    7954:	11fec50e 	bge	r2,r7,746c <__alt_mem_onchip_memory+0xf780746c>
    7958:	d9000617 	ldw	r4,24(sp)
    795c:	20013c1e 	bne	r4,zero,7e50 <_dtoa_r+0x1524>
    7960:	a80b883a 	mov	r5,r21
    7964:	000f883a 	mov	r7,zero
    7968:	01800144 	movi	r6,5
    796c:	e009883a 	mov	r4,fp
    7970:	000a0f40 	call	a0f4 <__multadd>
    7974:	100b883a 	mov	r5,r2
    7978:	8009883a 	mov	r4,r16
    797c:	102b883a 	mov	r21,r2
    7980:	000a8ec0 	call	a8ec <__mcmp>
    7984:	dc000915 	stw	r16,36(sp)
    7988:	00bf410e 	bge	zero,r2,7690 <__alt_mem_onchip_memory+0xf7807690>
    798c:	d9c00717 	ldw	r7,28(sp)
    7990:	00800c44 	movi	r2,49
    7994:	38800005 	stb	r2,0(r7)
    7998:	d8800517 	ldw	r2,20(sp)
    799c:	3dc00044 	addi	r23,r7,1
    79a0:	10800044 	addi	r2,r2,1
    79a4:	d8800515 	stw	r2,20(sp)
    79a8:	003f3d06 	br	76a0 <__alt_mem_onchip_memory+0xf78076a0>
    79ac:	d9800517 	ldw	r6,20(sp)
    79b0:	d9c00717 	ldw	r7,28(sp)
    79b4:	00800c44 	movi	r2,49
    79b8:	31800044 	addi	r6,r6,1
    79bc:	d9800515 	stw	r6,20(sp)
    79c0:	38800005 	stb	r2,0(r7)
    79c4:	003edf06 	br	7544 <__alt_mem_onchip_memory+0xf7807544>
    79c8:	d8000b15 	stw	zero,44(sp)
    79cc:	003c9f06 	br	6c4c <__alt_mem_onchip_memory+0xf7806c4c>
    79d0:	903e7e1e 	bne	r18,zero,73cc <__alt_mem_onchip_memory+0xf78073cc>
    79d4:	00800434 	movhi	r2,16
    79d8:	10bfffc4 	addi	r2,r2,-1
    79dc:	9884703a 	and	r2,r19,r2
    79e0:	1000ea1e 	bne	r2,zero,7d8c <_dtoa_r+0x1460>
    79e4:	9cdffc2c 	andhi	r19,r19,32752
    79e8:	9800e826 	beq	r19,zero,7d8c <_dtoa_r+0x1460>
    79ec:	d9c00817 	ldw	r7,32(sp)
    79f0:	b5800044 	addi	r22,r22,1
    79f4:	04c00044 	movi	r19,1
    79f8:	39c00044 	addi	r7,r7,1
    79fc:	d9c00815 	stw	r7,32(sp)
    7a00:	d8800d17 	ldw	r2,52(sp)
    7a04:	103e721e 	bne	r2,zero,73d0 <__alt_mem_onchip_memory+0xf78073d0>
    7a08:	00800044 	movi	r2,1
    7a0c:	003e7906 	br	73f4 <__alt_mem_onchip_memory+0xf78073f4>
    7a10:	8009883a 	mov	r4,r16
    7a14:	000e5c80 	call	e5c8 <__floatsidf>
    7a18:	d9800f17 	ldw	r6,60(sp)
    7a1c:	d9c01017 	ldw	r7,64(sp)
    7a20:	1009883a 	mov	r4,r2
    7a24:	180b883a 	mov	r5,r3
    7a28:	0002af00 	call	2af0 <__muldf3>
    7a2c:	000d883a 	mov	r6,zero
    7a30:	01d00734 	movhi	r7,16412
    7a34:	1009883a 	mov	r4,r2
    7a38:	180b883a 	mov	r5,r3
    7a3c:	00018680 	call	1868 <__adddf3>
    7a40:	047f3034 	movhi	r17,64704
    7a44:	1021883a 	mov	r16,r2
    7a48:	1c63883a 	add	r17,r3,r17
    7a4c:	d9000f17 	ldw	r4,60(sp)
    7a50:	d9401017 	ldw	r5,64(sp)
    7a54:	000d883a 	mov	r6,zero
    7a58:	01d00534 	movhi	r7,16404
    7a5c:	00032080 	call	3208 <__subdf3>
    7a60:	800d883a 	mov	r6,r16
    7a64:	880f883a 	mov	r7,r17
    7a68:	1009883a 	mov	r4,r2
    7a6c:	180b883a 	mov	r5,r3
    7a70:	102b883a 	mov	r21,r2
    7a74:	1829883a 	mov	r20,r3
    7a78:	000e46c0 	call	e46c <__gedf2>
    7a7c:	00806c16 	blt	zero,r2,7c30 <_dtoa_r+0x1304>
    7a80:	89e0003c 	xorhi	r7,r17,32768
    7a84:	800d883a 	mov	r6,r16
    7a88:	a809883a 	mov	r4,r21
    7a8c:	a00b883a 	mov	r5,r20
    7a90:	00029fc0 	call	29fc <__ledf2>
    7a94:	103d7e0e 	bge	r2,zero,7090 <__alt_mem_onchip_memory+0xf7807090>
    7a98:	002b883a 	mov	r21,zero
    7a9c:	0023883a 	mov	r17,zero
    7aa0:	003efb06 	br	7690 <__alt_mem_onchip_memory+0xf7807690>
    7aa4:	d8800717 	ldw	r2,28(sp)
    7aa8:	003bd006 	br	69ec <__alt_mem_onchip_memory+0xf78069ec>
    7aac:	d9000a17 	ldw	r4,40(sp)
    7ab0:	d9800d17 	ldw	r6,52(sp)
    7ab4:	dd400a15 	stw	r21,40(sp)
    7ab8:	a905c83a 	sub	r2,r21,r4
    7abc:	308d883a 	add	r6,r6,r2
    7ac0:	d9800d15 	stw	r6,52(sp)
    7ac4:	002b883a 	mov	r21,zero
    7ac8:	003e0606 	br	72e4 <__alt_mem_onchip_memory+0xf78072e4>
    7acc:	9023883a 	mov	r17,r18
    7ad0:	9829883a 	mov	r20,r19
    7ad4:	04000084 	movi	r16,2
    7ad8:	003c9206 	br	6d24 <__alt_mem_onchip_memory+0xf7806d24>
    7adc:	04000044 	movi	r16,1
    7ae0:	dc000c15 	stw	r16,48(sp)
    7ae4:	dc000615 	stw	r16,24(sp)
    7ae8:	dc002215 	stw	r16,136(sp)
    7aec:	e0001115 	stw	zero,68(fp)
    7af0:	000b883a 	mov	r5,zero
    7af4:	003c6906 	br	6c9c <__alt_mem_onchip_memory+0xf7806c9c>
    7af8:	3021883a 	mov	r16,r6
    7afc:	003ffb06 	br	7aec <__alt_mem_onchip_memory+0xf7807aec>
    7b00:	1000021e 	bne	r2,zero,7b0c <_dtoa_r+0x11e0>
    7b04:	4200004c 	andi	r8,r8,1
    7b08:	403e7d1e 	bne	r8,zero,7500 <__alt_mem_onchip_memory+0xf7807500>
    7b0c:	01000c04 	movi	r4,48
    7b10:	00000106 	br	7b18 <_dtoa_r+0x11ec>
    7b14:	102f883a 	mov	r23,r2
    7b18:	b8bfffc4 	addi	r2,r23,-1
    7b1c:	10c00007 	ldb	r3,0(r2)
    7b20:	193ffc26 	beq	r3,r4,7b14 <__alt_mem_onchip_memory+0xf7807b14>
    7b24:	003e8706 	br	7544 <__alt_mem_onchip_memory+0xf7807544>
    7b28:	d8800517 	ldw	r2,20(sp)
    7b2c:	00a3c83a 	sub	r17,zero,r2
    7b30:	8800a426 	beq	r17,zero,7dc4 <_dtoa_r+0x1498>
    7b34:	888003cc 	andi	r2,r17,15
    7b38:	100490fa 	slli	r2,r2,3
    7b3c:	00c00074 	movhi	r3,1
    7b40:	18c60804 	addi	r3,r3,6176
    7b44:	1885883a 	add	r2,r3,r2
    7b48:	11800017 	ldw	r6,0(r2)
    7b4c:	11c00117 	ldw	r7,4(r2)
    7b50:	9009883a 	mov	r4,r18
    7b54:	980b883a 	mov	r5,r19
    7b58:	8823d13a 	srai	r17,r17,4
    7b5c:	0002af00 	call	2af0 <__muldf3>
    7b60:	d8800f15 	stw	r2,60(sp)
    7b64:	d8c01015 	stw	r3,64(sp)
    7b68:	8800e826 	beq	r17,zero,7f0c <_dtoa_r+0x15e0>
    7b6c:	05000074 	movhi	r20,1
    7b70:	a505fe04 	addi	r20,r20,6136
    7b74:	04000084 	movi	r16,2
    7b78:	8980004c 	andi	r6,r17,1
    7b7c:	1009883a 	mov	r4,r2
    7b80:	8823d07a 	srai	r17,r17,1
    7b84:	180b883a 	mov	r5,r3
    7b88:	30000426 	beq	r6,zero,7b9c <_dtoa_r+0x1270>
    7b8c:	a1800017 	ldw	r6,0(r20)
    7b90:	a1c00117 	ldw	r7,4(r20)
    7b94:	84000044 	addi	r16,r16,1
    7b98:	0002af00 	call	2af0 <__muldf3>
    7b9c:	a5000204 	addi	r20,r20,8
    7ba0:	883ff51e 	bne	r17,zero,7b78 <__alt_mem_onchip_memory+0xf7807b78>
    7ba4:	d8800f15 	stw	r2,60(sp)
    7ba8:	d8c01015 	stw	r3,64(sp)
    7bac:	003c7606 	br	6d88 <__alt_mem_onchip_memory+0xf7806d88>
    7bb0:	00c00c04 	movi	r3,48
    7bb4:	10c00005 	stb	r3,0(r2)
    7bb8:	d8c00517 	ldw	r3,20(sp)
    7bbc:	bd3fffc3 	ldbu	r20,-1(r23)
    7bc0:	18c00044 	addi	r3,r3,1
    7bc4:	d8c00515 	stw	r3,20(sp)
    7bc8:	003db906 	br	72b0 <__alt_mem_onchip_memory+0xf78072b0>
    7bcc:	89400117 	ldw	r5,4(r17)
    7bd0:	e009883a 	mov	r4,fp
    7bd4:	000a0240 	call	a024 <_Balloc>
    7bd8:	89800417 	ldw	r6,16(r17)
    7bdc:	89400304 	addi	r5,r17,12
    7be0:	11000304 	addi	r4,r2,12
    7be4:	31800084 	addi	r6,r6,2
    7be8:	318d883a 	add	r6,r6,r6
    7bec:	318d883a 	add	r6,r6,r6
    7bf0:	1027883a 	mov	r19,r2
    7bf4:	0009c580 	call	9c58 <memcpy>
    7bf8:	01800044 	movi	r6,1
    7bfc:	980b883a 	mov	r5,r19
    7c00:	e009883a 	mov	r4,fp
    7c04:	000a7a40 	call	a7a4 <__lshift>
    7c08:	1029883a 	mov	r20,r2
    7c0c:	003ecc06 	br	7740 <__alt_mem_onchip_memory+0xf7807740>
    7c10:	00800e44 	movi	r2,57
    7c14:	90809026 	beq	r18,r2,7e58 <_dtoa_r+0x152c>
    7c18:	92000044 	addi	r8,r18,1
    7c1c:	003f1f06 	br	789c <__alt_mem_onchip_memory+0xf780789c>
    7c20:	9011883a 	mov	r8,r18
    7c24:	8825883a 	mov	r18,r17
    7c28:	a023883a 	mov	r17,r20
    7c2c:	003e2906 	br	74d4 <__alt_mem_onchip_memory+0xf78074d4>
    7c30:	002b883a 	mov	r21,zero
    7c34:	0023883a 	mov	r17,zero
    7c38:	003f5406 	br	798c <__alt_mem_onchip_memory+0xf780798c>
    7c3c:	61bfffc4 	addi	r6,r12,-1
    7c40:	300490fa 	slli	r2,r6,3
    7c44:	00c00074 	movhi	r3,1
    7c48:	18c60804 	addi	r3,r3,6176
    7c4c:	1885883a 	add	r2,r3,r2
    7c50:	11000017 	ldw	r4,0(r2)
    7c54:	11400117 	ldw	r5,4(r2)
    7c58:	d8800717 	ldw	r2,28(sp)
    7c5c:	880f883a 	mov	r7,r17
    7c60:	d9801215 	stw	r6,72(sp)
    7c64:	800d883a 	mov	r6,r16
    7c68:	db001615 	stw	r12,88(sp)
    7c6c:	15c00044 	addi	r23,r2,1
    7c70:	0002af00 	call	2af0 <__muldf3>
    7c74:	d9401017 	ldw	r5,64(sp)
    7c78:	d9000f17 	ldw	r4,60(sp)
    7c7c:	d8c01515 	stw	r3,84(sp)
    7c80:	d8801415 	stw	r2,80(sp)
    7c84:	000e5480 	call	e548 <__fixdfsi>
    7c88:	1009883a 	mov	r4,r2
    7c8c:	1021883a 	mov	r16,r2
    7c90:	000e5c80 	call	e5c8 <__floatsidf>
    7c94:	d9000f17 	ldw	r4,60(sp)
    7c98:	d9401017 	ldw	r5,64(sp)
    7c9c:	100d883a 	mov	r6,r2
    7ca0:	180f883a 	mov	r7,r3
    7ca4:	00032080 	call	3208 <__subdf3>
    7ca8:	1829883a 	mov	r20,r3
    7cac:	d8c00717 	ldw	r3,28(sp)
    7cb0:	84000c04 	addi	r16,r16,48
    7cb4:	1023883a 	mov	r17,r2
    7cb8:	1c000005 	stb	r16,0(r3)
    7cbc:	db001617 	ldw	r12,88(sp)
    7cc0:	00800044 	movi	r2,1
    7cc4:	60802226 	beq	r12,r2,7d50 <_dtoa_r+0x1424>
    7cc8:	d9c00717 	ldw	r7,28(sp)
    7ccc:	8805883a 	mov	r2,r17
    7cd0:	b82b883a 	mov	r21,r23
    7cd4:	3b19883a 	add	r12,r7,r12
    7cd8:	6023883a 	mov	r17,r12
    7cdc:	a007883a 	mov	r3,r20
    7ce0:	dc800f15 	stw	r18,60(sp)
    7ce4:	000d883a 	mov	r6,zero
    7ce8:	01d00934 	movhi	r7,16420
    7cec:	1009883a 	mov	r4,r2
    7cf0:	180b883a 	mov	r5,r3
    7cf4:	0002af00 	call	2af0 <__muldf3>
    7cf8:	180b883a 	mov	r5,r3
    7cfc:	1009883a 	mov	r4,r2
    7d00:	1829883a 	mov	r20,r3
    7d04:	1025883a 	mov	r18,r2
    7d08:	000e5480 	call	e548 <__fixdfsi>
    7d0c:	1009883a 	mov	r4,r2
    7d10:	1021883a 	mov	r16,r2
    7d14:	000e5c80 	call	e5c8 <__floatsidf>
    7d18:	100d883a 	mov	r6,r2
    7d1c:	180f883a 	mov	r7,r3
    7d20:	9009883a 	mov	r4,r18
    7d24:	a00b883a 	mov	r5,r20
    7d28:	84000c04 	addi	r16,r16,48
    7d2c:	00032080 	call	3208 <__subdf3>
    7d30:	ad400044 	addi	r21,r21,1
    7d34:	ac3fffc5 	stb	r16,-1(r21)
    7d38:	ac7fea1e 	bne	r21,r17,7ce4 <__alt_mem_onchip_memory+0xf7807ce4>
    7d3c:	1023883a 	mov	r17,r2
    7d40:	d8801217 	ldw	r2,72(sp)
    7d44:	dc800f17 	ldw	r18,60(sp)
    7d48:	1829883a 	mov	r20,r3
    7d4c:	b8af883a 	add	r23,r23,r2
    7d50:	d9001417 	ldw	r4,80(sp)
    7d54:	d9401517 	ldw	r5,84(sp)
    7d58:	000d883a 	mov	r6,zero
    7d5c:	01cff834 	movhi	r7,16352
    7d60:	00018680 	call	1868 <__adddf3>
    7d64:	880d883a 	mov	r6,r17
    7d68:	a00f883a 	mov	r7,r20
    7d6c:	1009883a 	mov	r4,r2
    7d70:	180b883a 	mov	r5,r3
    7d74:	00029fc0 	call	29fc <__ledf2>
    7d78:	10003e0e 	bge	r2,zero,7e74 <_dtoa_r+0x1548>
    7d7c:	d9001317 	ldw	r4,76(sp)
    7d80:	bd3fffc3 	ldbu	r20,-1(r23)
    7d84:	d9000515 	stw	r4,20(sp)
    7d88:	003d3b06 	br	7278 <__alt_mem_onchip_memory+0xf7807278>
    7d8c:	0027883a 	mov	r19,zero
    7d90:	003f1b06 	br	7a00 <__alt_mem_onchip_memory+0xf7807a00>
    7d94:	d8800817 	ldw	r2,32(sp)
    7d98:	11e9c83a 	sub	r20,r2,r7
    7d9c:	0005883a 	mov	r2,zero
    7da0:	003d5406 	br	72f4 <__alt_mem_onchip_memory+0xf78072f4>
    7da4:	00800044 	movi	r2,1
    7da8:	003dc706 	br	74c8 <__alt_mem_onchip_memory+0xf78074c8>
    7dac:	d8c00217 	ldw	r3,8(sp)
    7db0:	00800d84 	movi	r2,54
    7db4:	dd400a17 	ldw	r21,40(sp)
    7db8:	10c5c83a 	sub	r2,r2,r3
    7dbc:	dd000817 	ldw	r20,32(sp)
    7dc0:	003d4c06 	br	72f4 <__alt_mem_onchip_memory+0xf78072f4>
    7dc4:	dc800f15 	stw	r18,60(sp)
    7dc8:	dcc01015 	stw	r19,64(sp)
    7dcc:	04000084 	movi	r16,2
    7dd0:	003bed06 	br	6d88 <__alt_mem_onchip_memory+0xf7806d88>
    7dd4:	d9000617 	ldw	r4,24(sp)
    7dd8:	203f0d26 	beq	r4,zero,7a10 <__alt_mem_onchip_memory+0xf7807a10>
    7ddc:	d9800c17 	ldw	r6,48(sp)
    7de0:	01bcab0e 	bge	zero,r6,7090 <__alt_mem_onchip_memory+0xf7807090>
    7de4:	d9401017 	ldw	r5,64(sp)
    7de8:	d9000f17 	ldw	r4,60(sp)
    7dec:	000d883a 	mov	r6,zero
    7df0:	01d00934 	movhi	r7,16420
    7df4:	0002af00 	call	2af0 <__muldf3>
    7df8:	81000044 	addi	r4,r16,1
    7dfc:	d8800f15 	stw	r2,60(sp)
    7e00:	d8c01015 	stw	r3,64(sp)
    7e04:	000e5c80 	call	e5c8 <__floatsidf>
    7e08:	d9800f17 	ldw	r6,60(sp)
    7e0c:	d9c01017 	ldw	r7,64(sp)
    7e10:	1009883a 	mov	r4,r2
    7e14:	180b883a 	mov	r5,r3
    7e18:	0002af00 	call	2af0 <__muldf3>
    7e1c:	01d00734 	movhi	r7,16412
    7e20:	000d883a 	mov	r6,zero
    7e24:	1009883a 	mov	r4,r2
    7e28:	180b883a 	mov	r5,r3
    7e2c:	00018680 	call	1868 <__adddf3>
    7e30:	d9c00517 	ldw	r7,20(sp)
    7e34:	047f3034 	movhi	r17,64704
    7e38:	1021883a 	mov	r16,r2
    7e3c:	39ffffc4 	addi	r7,r7,-1
    7e40:	d9c01315 	stw	r7,76(sp)
    7e44:	1c63883a 	add	r17,r3,r17
    7e48:	db000c17 	ldw	r12,48(sp)
    7e4c:	003bea06 	br	6df8 <__alt_mem_onchip_memory+0xf7806df8>
    7e50:	dc000915 	stw	r16,36(sp)
    7e54:	003e0e06 	br	7690 <__alt_mem_onchip_memory+0xf7807690>
    7e58:	01000e44 	movi	r4,57
    7e5c:	8825883a 	mov	r18,r17
    7e60:	9dc00044 	addi	r23,r19,1
    7e64:	99000005 	stb	r4,0(r19)
    7e68:	a023883a 	mov	r17,r20
    7e6c:	dc000915 	stw	r16,36(sp)
    7e70:	003da406 	br	7504 <__alt_mem_onchip_memory+0xf7807504>
    7e74:	d9801417 	ldw	r6,80(sp)
    7e78:	d9c01517 	ldw	r7,84(sp)
    7e7c:	0009883a 	mov	r4,zero
    7e80:	014ff834 	movhi	r5,16352
    7e84:	00032080 	call	3208 <__subdf3>
    7e88:	880d883a 	mov	r6,r17
    7e8c:	a00f883a 	mov	r7,r20
    7e90:	1009883a 	mov	r4,r2
    7e94:	180b883a 	mov	r5,r3
    7e98:	000e46c0 	call	e46c <__gedf2>
    7e9c:	00bc7c0e 	bge	zero,r2,7090 <__alt_mem_onchip_memory+0xf7807090>
    7ea0:	01000c04 	movi	r4,48
    7ea4:	00000106 	br	7eac <_dtoa_r+0x1580>
    7ea8:	102f883a 	mov	r23,r2
    7eac:	b8bfffc4 	addi	r2,r23,-1
    7eb0:	10c00007 	ldb	r3,0(r2)
    7eb4:	193ffc26 	beq	r3,r4,7ea8 <__alt_mem_onchip_memory+0xf7807ea8>
    7eb8:	d9801317 	ldw	r6,76(sp)
    7ebc:	d9800515 	stw	r6,20(sp)
    7ec0:	003c4406 	br	6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    7ec4:	d9801317 	ldw	r6,76(sp)
    7ec8:	d9800515 	stw	r6,20(sp)
    7ecc:	003cea06 	br	7278 <__alt_mem_onchip_memory+0xf7807278>
    7ed0:	dd800f17 	ldw	r22,60(sp)
    7ed4:	dcc01017 	ldw	r19,64(sp)
    7ed8:	dc801217 	ldw	r18,72(sp)
    7edc:	003c6c06 	br	7090 <__alt_mem_onchip_memory+0xf7807090>
    7ee0:	903e031e 	bne	r18,zero,76f0 <__alt_mem_onchip_memory+0xf78076f0>
    7ee4:	003ebb06 	br	79d4 <__alt_mem_onchip_memory+0xf78079d4>
    7ee8:	103e6c1e 	bne	r2,zero,789c <__alt_mem_onchip_memory+0xf780789c>
    7eec:	4080004c 	andi	r2,r8,1
    7ef0:	103e6a26 	beq	r2,zero,789c <__alt_mem_onchip_memory+0xf780789c>
    7ef4:	003e6606 	br	7890 <__alt_mem_onchip_memory+0xf7807890>
    7ef8:	d8c00317 	ldw	r3,12(sp)
    7efc:	00800084 	movi	r2,2
    7f00:	10c02916 	blt	r2,r3,7fa8 <_dtoa_r+0x167c>
    7f04:	d9000c17 	ldw	r4,48(sp)
    7f08:	003e8806 	br	792c <__alt_mem_onchip_memory+0xf780792c>
    7f0c:	04000084 	movi	r16,2
    7f10:	003b9d06 	br	6d88 <__alt_mem_onchip_memory+0xf7806d88>
    7f14:	d9001317 	ldw	r4,76(sp)
    7f18:	d9000515 	stw	r4,20(sp)
    7f1c:	003cd606 	br	7278 <__alt_mem_onchip_memory+0xf7807278>
    7f20:	d8801317 	ldw	r2,76(sp)
    7f24:	d8800515 	stw	r2,20(sp)
    7f28:	003c2a06 	br	6fd4 <__alt_mem_onchip_memory+0xf7806fd4>
    7f2c:	d9800317 	ldw	r6,12(sp)
    7f30:	00800084 	movi	r2,2
    7f34:	11801516 	blt	r2,r6,7f8c <_dtoa_r+0x1660>
    7f38:	d9c00c17 	ldw	r7,48(sp)
    7f3c:	d9c00615 	stw	r7,24(sp)
    7f40:	003df706 	br	7720 <__alt_mem_onchip_memory+0xf7807720>
    7f44:	193d3926 	beq	r3,r4,742c <__alt_mem_onchip_memory+0xf780742c>
    7f48:	00c00f04 	movi	r3,60
    7f4c:	1885c83a 	sub	r2,r3,r2
    7f50:	003ddf06 	br	76d0 <__alt_mem_onchip_memory+0xf78076d0>
    7f54:	e009883a 	mov	r4,fp
    7f58:	e0001115 	stw	zero,68(fp)
    7f5c:	000b883a 	mov	r5,zero
    7f60:	000a0240 	call	a024 <_Balloc>
    7f64:	d8800715 	stw	r2,28(sp)
    7f68:	d8c00717 	ldw	r3,28(sp)
    7f6c:	00bfffc4 	movi	r2,-1
    7f70:	01000044 	movi	r4,1
    7f74:	d8800c15 	stw	r2,48(sp)
    7f78:	e0c01015 	stw	r3,64(fp)
    7f7c:	d9000b15 	stw	r4,44(sp)
    7f80:	d8800615 	stw	r2,24(sp)
    7f84:	d8002215 	stw	zero,136(sp)
    7f88:	003c4106 	br	7090 <__alt_mem_onchip_memory+0xf7807090>
    7f8c:	d8c00c17 	ldw	r3,48(sp)
    7f90:	d8c00615 	stw	r3,24(sp)
    7f94:	003e7006 	br	7958 <__alt_mem_onchip_memory+0xf7807958>
    7f98:	04400044 	movi	r17,1
    7f9c:	003b2006 	br	6c20 <__alt_mem_onchip_memory+0xf7806c20>
    7fa0:	000b883a 	mov	r5,zero
    7fa4:	003b3d06 	br	6c9c <__alt_mem_onchip_memory+0xf7806c9c>
    7fa8:	d8800c17 	ldw	r2,48(sp)
    7fac:	d8800615 	stw	r2,24(sp)
    7fb0:	003e6906 	br	7958 <__alt_mem_onchip_memory+0xf7807958>

00007fb4 <__sflush_r>:
    7fb4:	2880030b 	ldhu	r2,12(r5)
    7fb8:	defffb04 	addi	sp,sp,-20
    7fbc:	dcc00315 	stw	r19,12(sp)
    7fc0:	dc400115 	stw	r17,4(sp)
    7fc4:	dfc00415 	stw	ra,16(sp)
    7fc8:	dc800215 	stw	r18,8(sp)
    7fcc:	dc000015 	stw	r16,0(sp)
    7fd0:	10c0020c 	andi	r3,r2,8
    7fd4:	2823883a 	mov	r17,r5
    7fd8:	2027883a 	mov	r19,r4
    7fdc:	1800311e 	bne	r3,zero,80a4 <__sflush_r+0xf0>
    7fe0:	28c00117 	ldw	r3,4(r5)
    7fe4:	10820014 	ori	r2,r2,2048
    7fe8:	2880030d 	sth	r2,12(r5)
    7fec:	00c04b0e 	bge	zero,r3,811c <__sflush_r+0x168>
    7ff0:	8a000a17 	ldw	r8,40(r17)
    7ff4:	40002326 	beq	r8,zero,8084 <__sflush_r+0xd0>
    7ff8:	9c000017 	ldw	r16,0(r19)
    7ffc:	10c4000c 	andi	r3,r2,4096
    8000:	98000015 	stw	zero,0(r19)
    8004:	18004826 	beq	r3,zero,8128 <__sflush_r+0x174>
    8008:	89801417 	ldw	r6,80(r17)
    800c:	10c0010c 	andi	r3,r2,4
    8010:	18000626 	beq	r3,zero,802c <__sflush_r+0x78>
    8014:	88c00117 	ldw	r3,4(r17)
    8018:	88800c17 	ldw	r2,48(r17)
    801c:	30cdc83a 	sub	r6,r6,r3
    8020:	10000226 	beq	r2,zero,802c <__sflush_r+0x78>
    8024:	88800f17 	ldw	r2,60(r17)
    8028:	308dc83a 	sub	r6,r6,r2
    802c:	89400717 	ldw	r5,28(r17)
    8030:	000f883a 	mov	r7,zero
    8034:	9809883a 	mov	r4,r19
    8038:	403ee83a 	callr	r8
    803c:	00ffffc4 	movi	r3,-1
    8040:	10c04426 	beq	r2,r3,8154 <__sflush_r+0x1a0>
    8044:	88c0030b 	ldhu	r3,12(r17)
    8048:	89000417 	ldw	r4,16(r17)
    804c:	88000115 	stw	zero,4(r17)
    8050:	197dffcc 	andi	r5,r3,63487
    8054:	8940030d 	sth	r5,12(r17)
    8058:	89000015 	stw	r4,0(r17)
    805c:	18c4000c 	andi	r3,r3,4096
    8060:	18002c1e 	bne	r3,zero,8114 <__sflush_r+0x160>
    8064:	89400c17 	ldw	r5,48(r17)
    8068:	9c000015 	stw	r16,0(r19)
    806c:	28000526 	beq	r5,zero,8084 <__sflush_r+0xd0>
    8070:	88801004 	addi	r2,r17,64
    8074:	28800226 	beq	r5,r2,8080 <__sflush_r+0xcc>
    8078:	9809883a 	mov	r4,r19
    807c:	00087200 	call	8720 <_free_r>
    8080:	88000c15 	stw	zero,48(r17)
    8084:	0005883a 	mov	r2,zero
    8088:	dfc00417 	ldw	ra,16(sp)
    808c:	dcc00317 	ldw	r19,12(sp)
    8090:	dc800217 	ldw	r18,8(sp)
    8094:	dc400117 	ldw	r17,4(sp)
    8098:	dc000017 	ldw	r16,0(sp)
    809c:	dec00504 	addi	sp,sp,20
    80a0:	f800283a 	ret
    80a4:	2c800417 	ldw	r18,16(r5)
    80a8:	903ff626 	beq	r18,zero,8084 <__alt_mem_onchip_memory+0xf7808084>
    80ac:	2c000017 	ldw	r16,0(r5)
    80b0:	108000cc 	andi	r2,r2,3
    80b4:	2c800015 	stw	r18,0(r5)
    80b8:	84a1c83a 	sub	r16,r16,r18
    80bc:	1000131e 	bne	r2,zero,810c <__sflush_r+0x158>
    80c0:	28800517 	ldw	r2,20(r5)
    80c4:	88800215 	stw	r2,8(r17)
    80c8:	04000316 	blt	zero,r16,80d8 <__sflush_r+0x124>
    80cc:	003fed06 	br	8084 <__alt_mem_onchip_memory+0xf7808084>
    80d0:	90a5883a 	add	r18,r18,r2
    80d4:	043feb0e 	bge	zero,r16,8084 <__alt_mem_onchip_memory+0xf7808084>
    80d8:	88800917 	ldw	r2,36(r17)
    80dc:	89400717 	ldw	r5,28(r17)
    80e0:	800f883a 	mov	r7,r16
    80e4:	900d883a 	mov	r6,r18
    80e8:	9809883a 	mov	r4,r19
    80ec:	103ee83a 	callr	r2
    80f0:	80a1c83a 	sub	r16,r16,r2
    80f4:	00bff616 	blt	zero,r2,80d0 <__alt_mem_onchip_memory+0xf78080d0>
    80f8:	88c0030b 	ldhu	r3,12(r17)
    80fc:	00bfffc4 	movi	r2,-1
    8100:	18c01014 	ori	r3,r3,64
    8104:	88c0030d 	sth	r3,12(r17)
    8108:	003fdf06 	br	8088 <__alt_mem_onchip_memory+0xf7808088>
    810c:	0005883a 	mov	r2,zero
    8110:	003fec06 	br	80c4 <__alt_mem_onchip_memory+0xf78080c4>
    8114:	88801415 	stw	r2,80(r17)
    8118:	003fd206 	br	8064 <__alt_mem_onchip_memory+0xf7808064>
    811c:	28c00f17 	ldw	r3,60(r5)
    8120:	00ffb316 	blt	zero,r3,7ff0 <__alt_mem_onchip_memory+0xf7807ff0>
    8124:	003fd706 	br	8084 <__alt_mem_onchip_memory+0xf7808084>
    8128:	89400717 	ldw	r5,28(r17)
    812c:	000d883a 	mov	r6,zero
    8130:	01c00044 	movi	r7,1
    8134:	9809883a 	mov	r4,r19
    8138:	403ee83a 	callr	r8
    813c:	100d883a 	mov	r6,r2
    8140:	00bfffc4 	movi	r2,-1
    8144:	30801426 	beq	r6,r2,8198 <__sflush_r+0x1e4>
    8148:	8880030b 	ldhu	r2,12(r17)
    814c:	8a000a17 	ldw	r8,40(r17)
    8150:	003fae06 	br	800c <__alt_mem_onchip_memory+0xf780800c>
    8154:	98c00017 	ldw	r3,0(r19)
    8158:	183fba26 	beq	r3,zero,8044 <__alt_mem_onchip_memory+0xf7808044>
    815c:	01000744 	movi	r4,29
    8160:	19000626 	beq	r3,r4,817c <__sflush_r+0x1c8>
    8164:	01000584 	movi	r4,22
    8168:	19000426 	beq	r3,r4,817c <__sflush_r+0x1c8>
    816c:	88c0030b 	ldhu	r3,12(r17)
    8170:	18c01014 	ori	r3,r3,64
    8174:	88c0030d 	sth	r3,12(r17)
    8178:	003fc306 	br	8088 <__alt_mem_onchip_memory+0xf7808088>
    817c:	8880030b 	ldhu	r2,12(r17)
    8180:	88c00417 	ldw	r3,16(r17)
    8184:	88000115 	stw	zero,4(r17)
    8188:	10bdffcc 	andi	r2,r2,63487
    818c:	8880030d 	sth	r2,12(r17)
    8190:	88c00015 	stw	r3,0(r17)
    8194:	003fb306 	br	8064 <__alt_mem_onchip_memory+0xf7808064>
    8198:	98800017 	ldw	r2,0(r19)
    819c:	103fea26 	beq	r2,zero,8148 <__alt_mem_onchip_memory+0xf7808148>
    81a0:	00c00744 	movi	r3,29
    81a4:	10c00226 	beq	r2,r3,81b0 <__sflush_r+0x1fc>
    81a8:	00c00584 	movi	r3,22
    81ac:	10c0031e 	bne	r2,r3,81bc <__sflush_r+0x208>
    81b0:	9c000015 	stw	r16,0(r19)
    81b4:	0005883a 	mov	r2,zero
    81b8:	003fb306 	br	8088 <__alt_mem_onchip_memory+0xf7808088>
    81bc:	88c0030b 	ldhu	r3,12(r17)
    81c0:	3005883a 	mov	r2,r6
    81c4:	18c01014 	ori	r3,r3,64
    81c8:	88c0030d 	sth	r3,12(r17)
    81cc:	003fae06 	br	8088 <__alt_mem_onchip_memory+0xf7808088>

000081d0 <_fflush_r>:
    81d0:	defffd04 	addi	sp,sp,-12
    81d4:	dc000115 	stw	r16,4(sp)
    81d8:	dfc00215 	stw	ra,8(sp)
    81dc:	2021883a 	mov	r16,r4
    81e0:	20000226 	beq	r4,zero,81ec <_fflush_r+0x1c>
    81e4:	20800e17 	ldw	r2,56(r4)
    81e8:	10000c26 	beq	r2,zero,821c <_fflush_r+0x4c>
    81ec:	2880030f 	ldh	r2,12(r5)
    81f0:	1000051e 	bne	r2,zero,8208 <_fflush_r+0x38>
    81f4:	0005883a 	mov	r2,zero
    81f8:	dfc00217 	ldw	ra,8(sp)
    81fc:	dc000117 	ldw	r16,4(sp)
    8200:	dec00304 	addi	sp,sp,12
    8204:	f800283a 	ret
    8208:	8009883a 	mov	r4,r16
    820c:	dfc00217 	ldw	ra,8(sp)
    8210:	dc000117 	ldw	r16,4(sp)
    8214:	dec00304 	addi	sp,sp,12
    8218:	0007fb41 	jmpi	7fb4 <__sflush_r>
    821c:	d9400015 	stw	r5,0(sp)
    8220:	00085ac0 	call	85ac <__sinit>
    8224:	d9400017 	ldw	r5,0(sp)
    8228:	003ff006 	br	81ec <__alt_mem_onchip_memory+0xf78081ec>

0000822c <fflush>:
    822c:	20000526 	beq	r4,zero,8244 <fflush+0x18>
    8230:	00800074 	movhi	r2,1
    8234:	108d3e04 	addi	r2,r2,13560
    8238:	200b883a 	mov	r5,r4
    823c:	11000017 	ldw	r4,0(r2)
    8240:	00081d01 	jmpi	81d0 <_fflush_r>
    8244:	00800074 	movhi	r2,1
    8248:	108d3d04 	addi	r2,r2,13556
    824c:	11000017 	ldw	r4,0(r2)
    8250:	01400074 	movhi	r5,1
    8254:	29607404 	addi	r5,r5,-32304
    8258:	0008fb01 	jmpi	8fb0 <_fwalk_reent>

0000825c <__fp_unlock>:
    825c:	0005883a 	mov	r2,zero
    8260:	f800283a 	ret

00008264 <_cleanup_r>:
    8264:	01400074 	movhi	r5,1
    8268:	29749c04 	addi	r5,r5,-11664
    826c:	0008fb01 	jmpi	8fb0 <_fwalk_reent>

00008270 <__sinit.part.1>:
    8270:	defff704 	addi	sp,sp,-36
    8274:	00c00074 	movhi	r3,1
    8278:	dfc00815 	stw	ra,32(sp)
    827c:	ddc00715 	stw	r23,28(sp)
    8280:	dd800615 	stw	r22,24(sp)
    8284:	dd400515 	stw	r21,20(sp)
    8288:	dd000415 	stw	r20,16(sp)
    828c:	dcc00315 	stw	r19,12(sp)
    8290:	dc800215 	stw	r18,8(sp)
    8294:	dc400115 	stw	r17,4(sp)
    8298:	dc000015 	stw	r16,0(sp)
    829c:	18e09904 	addi	r3,r3,-32156
    82a0:	24000117 	ldw	r16,4(r4)
    82a4:	20c00f15 	stw	r3,60(r4)
    82a8:	2080bb04 	addi	r2,r4,748
    82ac:	00c000c4 	movi	r3,3
    82b0:	20c0b915 	stw	r3,740(r4)
    82b4:	2080ba15 	stw	r2,744(r4)
    82b8:	2000b815 	stw	zero,736(r4)
    82bc:	05c00204 	movi	r23,8
    82c0:	00800104 	movi	r2,4
    82c4:	2025883a 	mov	r18,r4
    82c8:	b80d883a 	mov	r6,r23
    82cc:	81001704 	addi	r4,r16,92
    82d0:	000b883a 	mov	r5,zero
    82d4:	80000015 	stw	zero,0(r16)
    82d8:	80000115 	stw	zero,4(r16)
    82dc:	80000215 	stw	zero,8(r16)
    82e0:	8080030d 	sth	r2,12(r16)
    82e4:	80001915 	stw	zero,100(r16)
    82e8:	8000038d 	sth	zero,14(r16)
    82ec:	80000415 	stw	zero,16(r16)
    82f0:	80000515 	stw	zero,20(r16)
    82f4:	80000615 	stw	zero,24(r16)
    82f8:	0009efc0 	call	9efc <memset>
    82fc:	05800074 	movhi	r22,1
    8300:	94400217 	ldw	r17,8(r18)
    8304:	05400074 	movhi	r21,1
    8308:	05000074 	movhi	r20,1
    830c:	04c00074 	movhi	r19,1
    8310:	b5add004 	addi	r22,r22,-18624
    8314:	ad6de704 	addi	r21,r21,-18532
    8318:	a52e0604 	addi	r20,r20,-18408
    831c:	9cee1d04 	addi	r19,r19,-18316
    8320:	85800815 	stw	r22,32(r16)
    8324:	85400915 	stw	r21,36(r16)
    8328:	85000a15 	stw	r20,40(r16)
    832c:	84c00b15 	stw	r19,44(r16)
    8330:	84000715 	stw	r16,28(r16)
    8334:	00800284 	movi	r2,10
    8338:	8880030d 	sth	r2,12(r17)
    833c:	00800044 	movi	r2,1
    8340:	b80d883a 	mov	r6,r23
    8344:	89001704 	addi	r4,r17,92
    8348:	000b883a 	mov	r5,zero
    834c:	88000015 	stw	zero,0(r17)
    8350:	88000115 	stw	zero,4(r17)
    8354:	88000215 	stw	zero,8(r17)
    8358:	88001915 	stw	zero,100(r17)
    835c:	8880038d 	sth	r2,14(r17)
    8360:	88000415 	stw	zero,16(r17)
    8364:	88000515 	stw	zero,20(r17)
    8368:	88000615 	stw	zero,24(r17)
    836c:	0009efc0 	call	9efc <memset>
    8370:	94000317 	ldw	r16,12(r18)
    8374:	00800484 	movi	r2,18
    8378:	8c400715 	stw	r17,28(r17)
    837c:	8d800815 	stw	r22,32(r17)
    8380:	8d400915 	stw	r21,36(r17)
    8384:	8d000a15 	stw	r20,40(r17)
    8388:	8cc00b15 	stw	r19,44(r17)
    838c:	8080030d 	sth	r2,12(r16)
    8390:	00800084 	movi	r2,2
    8394:	80000015 	stw	zero,0(r16)
    8398:	80000115 	stw	zero,4(r16)
    839c:	80000215 	stw	zero,8(r16)
    83a0:	80001915 	stw	zero,100(r16)
    83a4:	8080038d 	sth	r2,14(r16)
    83a8:	80000415 	stw	zero,16(r16)
    83ac:	80000515 	stw	zero,20(r16)
    83b0:	80000615 	stw	zero,24(r16)
    83b4:	b80d883a 	mov	r6,r23
    83b8:	000b883a 	mov	r5,zero
    83bc:	81001704 	addi	r4,r16,92
    83c0:	0009efc0 	call	9efc <memset>
    83c4:	00800044 	movi	r2,1
    83c8:	84000715 	stw	r16,28(r16)
    83cc:	85800815 	stw	r22,32(r16)
    83d0:	85400915 	stw	r21,36(r16)
    83d4:	85000a15 	stw	r20,40(r16)
    83d8:	84c00b15 	stw	r19,44(r16)
    83dc:	90800e15 	stw	r2,56(r18)
    83e0:	dfc00817 	ldw	ra,32(sp)
    83e4:	ddc00717 	ldw	r23,28(sp)
    83e8:	dd800617 	ldw	r22,24(sp)
    83ec:	dd400517 	ldw	r21,20(sp)
    83f0:	dd000417 	ldw	r20,16(sp)
    83f4:	dcc00317 	ldw	r19,12(sp)
    83f8:	dc800217 	ldw	r18,8(sp)
    83fc:	dc400117 	ldw	r17,4(sp)
    8400:	dc000017 	ldw	r16,0(sp)
    8404:	dec00904 	addi	sp,sp,36
    8408:	f800283a 	ret

0000840c <__fp_lock>:
    840c:	0005883a 	mov	r2,zero
    8410:	f800283a 	ret

00008414 <__sfmoreglue>:
    8414:	defffc04 	addi	sp,sp,-16
    8418:	dc400115 	stw	r17,4(sp)
    841c:	2c7fffc4 	addi	r17,r5,-1
    8420:	8c401a24 	muli	r17,r17,104
    8424:	dc800215 	stw	r18,8(sp)
    8428:	2825883a 	mov	r18,r5
    842c:	89401d04 	addi	r5,r17,116
    8430:	dc000015 	stw	r16,0(sp)
    8434:	dfc00315 	stw	ra,12(sp)
    8438:	00093680 	call	9368 <_malloc_r>
    843c:	1021883a 	mov	r16,r2
    8440:	10000726 	beq	r2,zero,8460 <__sfmoreglue+0x4c>
    8444:	11000304 	addi	r4,r2,12
    8448:	10000015 	stw	zero,0(r2)
    844c:	14800115 	stw	r18,4(r2)
    8450:	11000215 	stw	r4,8(r2)
    8454:	89801a04 	addi	r6,r17,104
    8458:	000b883a 	mov	r5,zero
    845c:	0009efc0 	call	9efc <memset>
    8460:	8005883a 	mov	r2,r16
    8464:	dfc00317 	ldw	ra,12(sp)
    8468:	dc800217 	ldw	r18,8(sp)
    846c:	dc400117 	ldw	r17,4(sp)
    8470:	dc000017 	ldw	r16,0(sp)
    8474:	dec00404 	addi	sp,sp,16
    8478:	f800283a 	ret

0000847c <__sfp>:
    847c:	defffb04 	addi	sp,sp,-20
    8480:	dc000015 	stw	r16,0(sp)
    8484:	04000074 	movhi	r16,1
    8488:	840d3d04 	addi	r16,r16,13556
    848c:	dcc00315 	stw	r19,12(sp)
    8490:	2027883a 	mov	r19,r4
    8494:	81000017 	ldw	r4,0(r16)
    8498:	dfc00415 	stw	ra,16(sp)
    849c:	dc800215 	stw	r18,8(sp)
    84a0:	20800e17 	ldw	r2,56(r4)
    84a4:	dc400115 	stw	r17,4(sp)
    84a8:	1000021e 	bne	r2,zero,84b4 <__sfp+0x38>
    84ac:	00082700 	call	8270 <__sinit.part.1>
    84b0:	81000017 	ldw	r4,0(r16)
    84b4:	2480b804 	addi	r18,r4,736
    84b8:	047fffc4 	movi	r17,-1
    84bc:	91000117 	ldw	r4,4(r18)
    84c0:	94000217 	ldw	r16,8(r18)
    84c4:	213fffc4 	addi	r4,r4,-1
    84c8:	20000a16 	blt	r4,zero,84f4 <__sfp+0x78>
    84cc:	8080030f 	ldh	r2,12(r16)
    84d0:	10000c26 	beq	r2,zero,8504 <__sfp+0x88>
    84d4:	80c01d04 	addi	r3,r16,116
    84d8:	00000206 	br	84e4 <__sfp+0x68>
    84dc:	18bfe60f 	ldh	r2,-104(r3)
    84e0:	10000826 	beq	r2,zero,8504 <__sfp+0x88>
    84e4:	213fffc4 	addi	r4,r4,-1
    84e8:	1c3ffd04 	addi	r16,r3,-12
    84ec:	18c01a04 	addi	r3,r3,104
    84f0:	247ffa1e 	bne	r4,r17,84dc <__alt_mem_onchip_memory+0xf78084dc>
    84f4:	90800017 	ldw	r2,0(r18)
    84f8:	10001d26 	beq	r2,zero,8570 <__sfp+0xf4>
    84fc:	1025883a 	mov	r18,r2
    8500:	003fee06 	br	84bc <__alt_mem_onchip_memory+0xf78084bc>
    8504:	00bfffc4 	movi	r2,-1
    8508:	8080038d 	sth	r2,14(r16)
    850c:	00800044 	movi	r2,1
    8510:	8080030d 	sth	r2,12(r16)
    8514:	80001915 	stw	zero,100(r16)
    8518:	80000015 	stw	zero,0(r16)
    851c:	80000215 	stw	zero,8(r16)
    8520:	80000115 	stw	zero,4(r16)
    8524:	80000415 	stw	zero,16(r16)
    8528:	80000515 	stw	zero,20(r16)
    852c:	80000615 	stw	zero,24(r16)
    8530:	01800204 	movi	r6,8
    8534:	000b883a 	mov	r5,zero
    8538:	81001704 	addi	r4,r16,92
    853c:	0009efc0 	call	9efc <memset>
    8540:	8005883a 	mov	r2,r16
    8544:	80000c15 	stw	zero,48(r16)
    8548:	80000d15 	stw	zero,52(r16)
    854c:	80001115 	stw	zero,68(r16)
    8550:	80001215 	stw	zero,72(r16)
    8554:	dfc00417 	ldw	ra,16(sp)
    8558:	dcc00317 	ldw	r19,12(sp)
    855c:	dc800217 	ldw	r18,8(sp)
    8560:	dc400117 	ldw	r17,4(sp)
    8564:	dc000017 	ldw	r16,0(sp)
    8568:	dec00504 	addi	sp,sp,20
    856c:	f800283a 	ret
    8570:	01400104 	movi	r5,4
    8574:	9809883a 	mov	r4,r19
    8578:	00084140 	call	8414 <__sfmoreglue>
    857c:	90800015 	stw	r2,0(r18)
    8580:	103fde1e 	bne	r2,zero,84fc <__alt_mem_onchip_memory+0xf78084fc>
    8584:	00800304 	movi	r2,12
    8588:	98800015 	stw	r2,0(r19)
    858c:	0005883a 	mov	r2,zero
    8590:	003ff006 	br	8554 <__alt_mem_onchip_memory+0xf7808554>

00008594 <_cleanup>:
    8594:	00800074 	movhi	r2,1
    8598:	108d3d04 	addi	r2,r2,13556
    859c:	11000017 	ldw	r4,0(r2)
    85a0:	01400074 	movhi	r5,1
    85a4:	29749c04 	addi	r5,r5,-11664
    85a8:	0008fb01 	jmpi	8fb0 <_fwalk_reent>

000085ac <__sinit>:
    85ac:	20800e17 	ldw	r2,56(r4)
    85b0:	10000126 	beq	r2,zero,85b8 <__sinit+0xc>
    85b4:	f800283a 	ret
    85b8:	00082701 	jmpi	8270 <__sinit.part.1>

000085bc <__sfp_lock_acquire>:
    85bc:	f800283a 	ret

000085c0 <__sfp_lock_release>:
    85c0:	f800283a 	ret

000085c4 <__sinit_lock_acquire>:
    85c4:	f800283a 	ret

000085c8 <__sinit_lock_release>:
    85c8:	f800283a 	ret

000085cc <__fp_lock_all>:
    85cc:	00800074 	movhi	r2,1
    85d0:	108d3e04 	addi	r2,r2,13560
    85d4:	11000017 	ldw	r4,0(r2)
    85d8:	01400074 	movhi	r5,1
    85dc:	29610304 	addi	r5,r5,-31732
    85e0:	0008eec1 	jmpi	8eec <_fwalk>

000085e4 <__fp_unlock_all>:
    85e4:	00800074 	movhi	r2,1
    85e8:	108d3e04 	addi	r2,r2,13560
    85ec:	11000017 	ldw	r4,0(r2)
    85f0:	01400074 	movhi	r5,1
    85f4:	29609704 	addi	r5,r5,-32164
    85f8:	0008eec1 	jmpi	8eec <_fwalk>

000085fc <_malloc_trim_r>:
    85fc:	defffb04 	addi	sp,sp,-20
    8600:	dcc00315 	stw	r19,12(sp)
    8604:	04c00074 	movhi	r19,1
    8608:	dc800215 	stw	r18,8(sp)
    860c:	dc400115 	stw	r17,4(sp)
    8610:	dc000015 	stw	r16,0(sp)
    8614:	dfc00415 	stw	ra,16(sp)
    8618:	2821883a 	mov	r16,r5
    861c:	9cc7b404 	addi	r19,r19,7888
    8620:	2025883a 	mov	r18,r4
    8624:	000eebc0 	call	eebc <__malloc_lock>
    8628:	98800217 	ldw	r2,8(r19)
    862c:	14400117 	ldw	r17,4(r2)
    8630:	00bfff04 	movi	r2,-4
    8634:	88a2703a 	and	r17,r17,r2
    8638:	8c21c83a 	sub	r16,r17,r16
    863c:	8403fbc4 	addi	r16,r16,4079
    8640:	8020d33a 	srli	r16,r16,12
    8644:	0083ffc4 	movi	r2,4095
    8648:	843fffc4 	addi	r16,r16,-1
    864c:	8020933a 	slli	r16,r16,12
    8650:	1400060e 	bge	r2,r16,866c <_malloc_trim_r+0x70>
    8654:	000b883a 	mov	r5,zero
    8658:	9009883a 	mov	r4,r18
    865c:	000b6ec0 	call	b6ec <_sbrk_r>
    8660:	98c00217 	ldw	r3,8(r19)
    8664:	1c47883a 	add	r3,r3,r17
    8668:	10c00a26 	beq	r2,r3,8694 <_malloc_trim_r+0x98>
    866c:	9009883a 	mov	r4,r18
    8670:	000eee00 	call	eee0 <__malloc_unlock>
    8674:	0005883a 	mov	r2,zero
    8678:	dfc00417 	ldw	ra,16(sp)
    867c:	dcc00317 	ldw	r19,12(sp)
    8680:	dc800217 	ldw	r18,8(sp)
    8684:	dc400117 	ldw	r17,4(sp)
    8688:	dc000017 	ldw	r16,0(sp)
    868c:	dec00504 	addi	sp,sp,20
    8690:	f800283a 	ret
    8694:	040bc83a 	sub	r5,zero,r16
    8698:	9009883a 	mov	r4,r18
    869c:	000b6ec0 	call	b6ec <_sbrk_r>
    86a0:	00ffffc4 	movi	r3,-1
    86a4:	10c00d26 	beq	r2,r3,86dc <_malloc_trim_r+0xe0>
    86a8:	00c00074 	movhi	r3,1
    86ac:	18d42604 	addi	r3,r3,20632
    86b0:	18800017 	ldw	r2,0(r3)
    86b4:	99000217 	ldw	r4,8(r19)
    86b8:	8c23c83a 	sub	r17,r17,r16
    86bc:	8c400054 	ori	r17,r17,1
    86c0:	1421c83a 	sub	r16,r2,r16
    86c4:	24400115 	stw	r17,4(r4)
    86c8:	9009883a 	mov	r4,r18
    86cc:	1c000015 	stw	r16,0(r3)
    86d0:	000eee00 	call	eee0 <__malloc_unlock>
    86d4:	00800044 	movi	r2,1
    86d8:	003fe706 	br	8678 <__alt_mem_onchip_memory+0xf7808678>
    86dc:	000b883a 	mov	r5,zero
    86e0:	9009883a 	mov	r4,r18
    86e4:	000b6ec0 	call	b6ec <_sbrk_r>
    86e8:	99000217 	ldw	r4,8(r19)
    86ec:	014003c4 	movi	r5,15
    86f0:	1107c83a 	sub	r3,r2,r4
    86f4:	28ffdd0e 	bge	r5,r3,866c <__alt_mem_onchip_memory+0xf780866c>
    86f8:	01400074 	movhi	r5,1
    86fc:	294d4004 	addi	r5,r5,13568
    8700:	29400017 	ldw	r5,0(r5)
    8704:	18c00054 	ori	r3,r3,1
    8708:	20c00115 	stw	r3,4(r4)
    870c:	00c00074 	movhi	r3,1
    8710:	1145c83a 	sub	r2,r2,r5
    8714:	18d42604 	addi	r3,r3,20632
    8718:	18800015 	stw	r2,0(r3)
    871c:	003fd306 	br	866c <__alt_mem_onchip_memory+0xf780866c>

00008720 <_free_r>:
    8720:	28004126 	beq	r5,zero,8828 <_free_r+0x108>
    8724:	defffd04 	addi	sp,sp,-12
    8728:	dc400115 	stw	r17,4(sp)
    872c:	dc000015 	stw	r16,0(sp)
    8730:	2023883a 	mov	r17,r4
    8734:	2821883a 	mov	r16,r5
    8738:	dfc00215 	stw	ra,8(sp)
    873c:	000eebc0 	call	eebc <__malloc_lock>
    8740:	81ffff17 	ldw	r7,-4(r16)
    8744:	00bfff84 	movi	r2,-2
    8748:	01000074 	movhi	r4,1
    874c:	81bffe04 	addi	r6,r16,-8
    8750:	3884703a 	and	r2,r7,r2
    8754:	2107b404 	addi	r4,r4,7888
    8758:	308b883a 	add	r5,r6,r2
    875c:	2a400117 	ldw	r9,4(r5)
    8760:	22000217 	ldw	r8,8(r4)
    8764:	00ffff04 	movi	r3,-4
    8768:	48c6703a 	and	r3,r9,r3
    876c:	2a005726 	beq	r5,r8,88cc <_free_r+0x1ac>
    8770:	28c00115 	stw	r3,4(r5)
    8774:	39c0004c 	andi	r7,r7,1
    8778:	3800091e 	bne	r7,zero,87a0 <_free_r+0x80>
    877c:	823ffe17 	ldw	r8,-8(r16)
    8780:	22400204 	addi	r9,r4,8
    8784:	320dc83a 	sub	r6,r6,r8
    8788:	31c00217 	ldw	r7,8(r6)
    878c:	1205883a 	add	r2,r2,r8
    8790:	3a406526 	beq	r7,r9,8928 <_free_r+0x208>
    8794:	32000317 	ldw	r8,12(r6)
    8798:	3a000315 	stw	r8,12(r7)
    879c:	41c00215 	stw	r7,8(r8)
    87a0:	28cf883a 	add	r7,r5,r3
    87a4:	39c00117 	ldw	r7,4(r7)
    87a8:	39c0004c 	andi	r7,r7,1
    87ac:	38003a26 	beq	r7,zero,8898 <_free_r+0x178>
    87b0:	10c00054 	ori	r3,r2,1
    87b4:	30c00115 	stw	r3,4(r6)
    87b8:	3087883a 	add	r3,r6,r2
    87bc:	18800015 	stw	r2,0(r3)
    87c0:	00c07fc4 	movi	r3,511
    87c4:	18801936 	bltu	r3,r2,882c <_free_r+0x10c>
    87c8:	1004d0fa 	srli	r2,r2,3
    87cc:	01c00044 	movi	r7,1
    87d0:	21400117 	ldw	r5,4(r4)
    87d4:	10c00044 	addi	r3,r2,1
    87d8:	18c7883a 	add	r3,r3,r3
    87dc:	1005d0ba 	srai	r2,r2,2
    87e0:	18c7883a 	add	r3,r3,r3
    87e4:	18c7883a 	add	r3,r3,r3
    87e8:	1907883a 	add	r3,r3,r4
    87ec:	3884983a 	sll	r2,r7,r2
    87f0:	19c00017 	ldw	r7,0(r3)
    87f4:	1a3ffe04 	addi	r8,r3,-8
    87f8:	1144b03a 	or	r2,r2,r5
    87fc:	32000315 	stw	r8,12(r6)
    8800:	31c00215 	stw	r7,8(r6)
    8804:	20800115 	stw	r2,4(r4)
    8808:	19800015 	stw	r6,0(r3)
    880c:	39800315 	stw	r6,12(r7)
    8810:	8809883a 	mov	r4,r17
    8814:	dfc00217 	ldw	ra,8(sp)
    8818:	dc400117 	ldw	r17,4(sp)
    881c:	dc000017 	ldw	r16,0(sp)
    8820:	dec00304 	addi	sp,sp,12
    8824:	000eee01 	jmpi	eee0 <__malloc_unlock>
    8828:	f800283a 	ret
    882c:	100ad27a 	srli	r5,r2,9
    8830:	00c00104 	movi	r3,4
    8834:	19404a36 	bltu	r3,r5,8960 <_free_r+0x240>
    8838:	100ad1ba 	srli	r5,r2,6
    883c:	28c00e44 	addi	r3,r5,57
    8840:	18c7883a 	add	r3,r3,r3
    8844:	29400e04 	addi	r5,r5,56
    8848:	18c7883a 	add	r3,r3,r3
    884c:	18c7883a 	add	r3,r3,r3
    8850:	1909883a 	add	r4,r3,r4
    8854:	20c00017 	ldw	r3,0(r4)
    8858:	01c00074 	movhi	r7,1
    885c:	213ffe04 	addi	r4,r4,-8
    8860:	39c7b404 	addi	r7,r7,7888
    8864:	20c04426 	beq	r4,r3,8978 <_free_r+0x258>
    8868:	01ffff04 	movi	r7,-4
    886c:	19400117 	ldw	r5,4(r3)
    8870:	29ca703a 	and	r5,r5,r7
    8874:	1140022e 	bgeu	r2,r5,8880 <_free_r+0x160>
    8878:	18c00217 	ldw	r3,8(r3)
    887c:	20fffb1e 	bne	r4,r3,886c <__alt_mem_onchip_memory+0xf780886c>
    8880:	19000317 	ldw	r4,12(r3)
    8884:	31000315 	stw	r4,12(r6)
    8888:	30c00215 	stw	r3,8(r6)
    888c:	21800215 	stw	r6,8(r4)
    8890:	19800315 	stw	r6,12(r3)
    8894:	003fde06 	br	8810 <__alt_mem_onchip_memory+0xf7808810>
    8898:	29c00217 	ldw	r7,8(r5)
    889c:	10c5883a 	add	r2,r2,r3
    88a0:	00c00074 	movhi	r3,1
    88a4:	18c7b604 	addi	r3,r3,7896
    88a8:	38c03b26 	beq	r7,r3,8998 <_free_r+0x278>
    88ac:	2a000317 	ldw	r8,12(r5)
    88b0:	11400054 	ori	r5,r2,1
    88b4:	3087883a 	add	r3,r6,r2
    88b8:	3a000315 	stw	r8,12(r7)
    88bc:	41c00215 	stw	r7,8(r8)
    88c0:	31400115 	stw	r5,4(r6)
    88c4:	18800015 	stw	r2,0(r3)
    88c8:	003fbd06 	br	87c0 <__alt_mem_onchip_memory+0xf78087c0>
    88cc:	39c0004c 	andi	r7,r7,1
    88d0:	10c5883a 	add	r2,r2,r3
    88d4:	3800071e 	bne	r7,zero,88f4 <_free_r+0x1d4>
    88d8:	81fffe17 	ldw	r7,-8(r16)
    88dc:	31cdc83a 	sub	r6,r6,r7
    88e0:	30c00317 	ldw	r3,12(r6)
    88e4:	31400217 	ldw	r5,8(r6)
    88e8:	11c5883a 	add	r2,r2,r7
    88ec:	28c00315 	stw	r3,12(r5)
    88f0:	19400215 	stw	r5,8(r3)
    88f4:	10c00054 	ori	r3,r2,1
    88f8:	30c00115 	stw	r3,4(r6)
    88fc:	00c00074 	movhi	r3,1
    8900:	18cd4104 	addi	r3,r3,13572
    8904:	18c00017 	ldw	r3,0(r3)
    8908:	21800215 	stw	r6,8(r4)
    890c:	10ffc036 	bltu	r2,r3,8810 <__alt_mem_onchip_memory+0xf7808810>
    8910:	00800074 	movhi	r2,1
    8914:	10941a04 	addi	r2,r2,20584
    8918:	11400017 	ldw	r5,0(r2)
    891c:	8809883a 	mov	r4,r17
    8920:	00085fc0 	call	85fc <_malloc_trim_r>
    8924:	003fba06 	br	8810 <__alt_mem_onchip_memory+0xf7808810>
    8928:	28c9883a 	add	r4,r5,r3
    892c:	21000117 	ldw	r4,4(r4)
    8930:	2100004c 	andi	r4,r4,1
    8934:	2000391e 	bne	r4,zero,8a1c <_free_r+0x2fc>
    8938:	29c00217 	ldw	r7,8(r5)
    893c:	29000317 	ldw	r4,12(r5)
    8940:	1885883a 	add	r2,r3,r2
    8944:	10c00054 	ori	r3,r2,1
    8948:	39000315 	stw	r4,12(r7)
    894c:	21c00215 	stw	r7,8(r4)
    8950:	30c00115 	stw	r3,4(r6)
    8954:	308d883a 	add	r6,r6,r2
    8958:	30800015 	stw	r2,0(r6)
    895c:	003fac06 	br	8810 <__alt_mem_onchip_memory+0xf7808810>
    8960:	00c00504 	movi	r3,20
    8964:	19401536 	bltu	r3,r5,89bc <_free_r+0x29c>
    8968:	28c01704 	addi	r3,r5,92
    896c:	18c7883a 	add	r3,r3,r3
    8970:	294016c4 	addi	r5,r5,91
    8974:	003fb406 	br	8848 <__alt_mem_onchip_memory+0xf7808848>
    8978:	280bd0ba 	srai	r5,r5,2
    897c:	00c00044 	movi	r3,1
    8980:	38800117 	ldw	r2,4(r7)
    8984:	194a983a 	sll	r5,r3,r5
    8988:	2007883a 	mov	r3,r4
    898c:	2884b03a 	or	r2,r5,r2
    8990:	38800115 	stw	r2,4(r7)
    8994:	003fbb06 	br	8884 <__alt_mem_onchip_memory+0xf7808884>
    8998:	21800515 	stw	r6,20(r4)
    899c:	21800415 	stw	r6,16(r4)
    89a0:	10c00054 	ori	r3,r2,1
    89a4:	31c00315 	stw	r7,12(r6)
    89a8:	31c00215 	stw	r7,8(r6)
    89ac:	30c00115 	stw	r3,4(r6)
    89b0:	308d883a 	add	r6,r6,r2
    89b4:	30800015 	stw	r2,0(r6)
    89b8:	003f9506 	br	8810 <__alt_mem_onchip_memory+0xf7808810>
    89bc:	00c01504 	movi	r3,84
    89c0:	19400536 	bltu	r3,r5,89d8 <_free_r+0x2b8>
    89c4:	100ad33a 	srli	r5,r2,12
    89c8:	28c01bc4 	addi	r3,r5,111
    89cc:	18c7883a 	add	r3,r3,r3
    89d0:	29401b84 	addi	r5,r5,110
    89d4:	003f9c06 	br	8848 <__alt_mem_onchip_memory+0xf7808848>
    89d8:	00c05504 	movi	r3,340
    89dc:	19400536 	bltu	r3,r5,89f4 <_free_r+0x2d4>
    89e0:	100ad3fa 	srli	r5,r2,15
    89e4:	28c01e04 	addi	r3,r5,120
    89e8:	18c7883a 	add	r3,r3,r3
    89ec:	29401dc4 	addi	r5,r5,119
    89f0:	003f9506 	br	8848 <__alt_mem_onchip_memory+0xf7808848>
    89f4:	00c15504 	movi	r3,1364
    89f8:	19400536 	bltu	r3,r5,8a10 <_free_r+0x2f0>
    89fc:	100ad4ba 	srli	r5,r2,18
    8a00:	28c01f44 	addi	r3,r5,125
    8a04:	18c7883a 	add	r3,r3,r3
    8a08:	29401f04 	addi	r5,r5,124
    8a0c:	003f8e06 	br	8848 <__alt_mem_onchip_memory+0xf7808848>
    8a10:	00c03f84 	movi	r3,254
    8a14:	01401f84 	movi	r5,126
    8a18:	003f8b06 	br	8848 <__alt_mem_onchip_memory+0xf7808848>
    8a1c:	10c00054 	ori	r3,r2,1
    8a20:	30c00115 	stw	r3,4(r6)
    8a24:	308d883a 	add	r6,r6,r2
    8a28:	30800015 	stw	r2,0(r6)
    8a2c:	003f7806 	br	8810 <__alt_mem_onchip_memory+0xf7808810>

00008a30 <__sfvwrite_r>:
    8a30:	30800217 	ldw	r2,8(r6)
    8a34:	10006726 	beq	r2,zero,8bd4 <__sfvwrite_r+0x1a4>
    8a38:	28c0030b 	ldhu	r3,12(r5)
    8a3c:	defff404 	addi	sp,sp,-48
    8a40:	dd400715 	stw	r21,28(sp)
    8a44:	dd000615 	stw	r20,24(sp)
    8a48:	dc000215 	stw	r16,8(sp)
    8a4c:	dfc00b15 	stw	ra,44(sp)
    8a50:	df000a15 	stw	fp,40(sp)
    8a54:	ddc00915 	stw	r23,36(sp)
    8a58:	dd800815 	stw	r22,32(sp)
    8a5c:	dcc00515 	stw	r19,20(sp)
    8a60:	dc800415 	stw	r18,16(sp)
    8a64:	dc400315 	stw	r17,12(sp)
    8a68:	1880020c 	andi	r2,r3,8
    8a6c:	2821883a 	mov	r16,r5
    8a70:	202b883a 	mov	r21,r4
    8a74:	3029883a 	mov	r20,r6
    8a78:	10002726 	beq	r2,zero,8b18 <__sfvwrite_r+0xe8>
    8a7c:	28800417 	ldw	r2,16(r5)
    8a80:	10002526 	beq	r2,zero,8b18 <__sfvwrite_r+0xe8>
    8a84:	1880008c 	andi	r2,r3,2
    8a88:	a4400017 	ldw	r17,0(r20)
    8a8c:	10002a26 	beq	r2,zero,8b38 <__sfvwrite_r+0x108>
    8a90:	05a00034 	movhi	r22,32768
    8a94:	0027883a 	mov	r19,zero
    8a98:	0025883a 	mov	r18,zero
    8a9c:	b5bf0004 	addi	r22,r22,-1024
    8aa0:	980d883a 	mov	r6,r19
    8aa4:	a809883a 	mov	r4,r21
    8aa8:	90004626 	beq	r18,zero,8bc4 <__sfvwrite_r+0x194>
    8aac:	900f883a 	mov	r7,r18
    8ab0:	b480022e 	bgeu	r22,r18,8abc <__sfvwrite_r+0x8c>
    8ab4:	01e00034 	movhi	r7,32768
    8ab8:	39ff0004 	addi	r7,r7,-1024
    8abc:	80800917 	ldw	r2,36(r16)
    8ac0:	81400717 	ldw	r5,28(r16)
    8ac4:	103ee83a 	callr	r2
    8ac8:	0080570e 	bge	zero,r2,8c28 <__sfvwrite_r+0x1f8>
    8acc:	a0c00217 	ldw	r3,8(r20)
    8ad0:	98a7883a 	add	r19,r19,r2
    8ad4:	90a5c83a 	sub	r18,r18,r2
    8ad8:	1885c83a 	sub	r2,r3,r2
    8adc:	a0800215 	stw	r2,8(r20)
    8ae0:	103fef1e 	bne	r2,zero,8aa0 <__alt_mem_onchip_memory+0xf7808aa0>
    8ae4:	0005883a 	mov	r2,zero
    8ae8:	dfc00b17 	ldw	ra,44(sp)
    8aec:	df000a17 	ldw	fp,40(sp)
    8af0:	ddc00917 	ldw	r23,36(sp)
    8af4:	dd800817 	ldw	r22,32(sp)
    8af8:	dd400717 	ldw	r21,28(sp)
    8afc:	dd000617 	ldw	r20,24(sp)
    8b00:	dcc00517 	ldw	r19,20(sp)
    8b04:	dc800417 	ldw	r18,16(sp)
    8b08:	dc400317 	ldw	r17,12(sp)
    8b0c:	dc000217 	ldw	r16,8(sp)
    8b10:	dec00c04 	addi	sp,sp,48
    8b14:	f800283a 	ret
    8b18:	800b883a 	mov	r5,r16
    8b1c:	a809883a 	mov	r4,r21
    8b20:	00065d80 	call	65d8 <__swsetup_r>
    8b24:	1000eb1e 	bne	r2,zero,8ed4 <__sfvwrite_r+0x4a4>
    8b28:	80c0030b 	ldhu	r3,12(r16)
    8b2c:	a4400017 	ldw	r17,0(r20)
    8b30:	1880008c 	andi	r2,r3,2
    8b34:	103fd61e 	bne	r2,zero,8a90 <__alt_mem_onchip_memory+0xf7808a90>
    8b38:	1880004c 	andi	r2,r3,1
    8b3c:	10003f1e 	bne	r2,zero,8c3c <__sfvwrite_r+0x20c>
    8b40:	0039883a 	mov	fp,zero
    8b44:	0025883a 	mov	r18,zero
    8b48:	90001a26 	beq	r18,zero,8bb4 <__sfvwrite_r+0x184>
    8b4c:	1880800c 	andi	r2,r3,512
    8b50:	84c00217 	ldw	r19,8(r16)
    8b54:	10002126 	beq	r2,zero,8bdc <__sfvwrite_r+0x1ac>
    8b58:	982f883a 	mov	r23,r19
    8b5c:	94c09336 	bltu	r18,r19,8dac <__sfvwrite_r+0x37c>
    8b60:	1881200c 	andi	r2,r3,1152
    8b64:	10009e1e 	bne	r2,zero,8de0 <__sfvwrite_r+0x3b0>
    8b68:	81000017 	ldw	r4,0(r16)
    8b6c:	b80d883a 	mov	r6,r23
    8b70:	e00b883a 	mov	r5,fp
    8b74:	0009da00 	call	9da0 <memmove>
    8b78:	80c00217 	ldw	r3,8(r16)
    8b7c:	81000017 	ldw	r4,0(r16)
    8b80:	9005883a 	mov	r2,r18
    8b84:	1ce7c83a 	sub	r19,r3,r19
    8b88:	25cf883a 	add	r7,r4,r23
    8b8c:	84c00215 	stw	r19,8(r16)
    8b90:	81c00015 	stw	r7,0(r16)
    8b94:	a0c00217 	ldw	r3,8(r20)
    8b98:	e0b9883a 	add	fp,fp,r2
    8b9c:	90a5c83a 	sub	r18,r18,r2
    8ba0:	18a7c83a 	sub	r19,r3,r2
    8ba4:	a4c00215 	stw	r19,8(r20)
    8ba8:	983fce26 	beq	r19,zero,8ae4 <__alt_mem_onchip_memory+0xf7808ae4>
    8bac:	80c0030b 	ldhu	r3,12(r16)
    8bb0:	903fe61e 	bne	r18,zero,8b4c <__alt_mem_onchip_memory+0xf7808b4c>
    8bb4:	8f000017 	ldw	fp,0(r17)
    8bb8:	8c800117 	ldw	r18,4(r17)
    8bbc:	8c400204 	addi	r17,r17,8
    8bc0:	003fe106 	br	8b48 <__alt_mem_onchip_memory+0xf7808b48>
    8bc4:	8cc00017 	ldw	r19,0(r17)
    8bc8:	8c800117 	ldw	r18,4(r17)
    8bcc:	8c400204 	addi	r17,r17,8
    8bd0:	003fb306 	br	8aa0 <__alt_mem_onchip_memory+0xf7808aa0>
    8bd4:	0005883a 	mov	r2,zero
    8bd8:	f800283a 	ret
    8bdc:	81000017 	ldw	r4,0(r16)
    8be0:	80800417 	ldw	r2,16(r16)
    8be4:	11005736 	bltu	r2,r4,8d44 <__sfvwrite_r+0x314>
    8be8:	85c00517 	ldw	r23,20(r16)
    8bec:	95c05536 	bltu	r18,r23,8d44 <__sfvwrite_r+0x314>
    8bf0:	00a00034 	movhi	r2,32768
    8bf4:	10bfffc4 	addi	r2,r2,-1
    8bf8:	9009883a 	mov	r4,r18
    8bfc:	1480012e 	bgeu	r2,r18,8c04 <__sfvwrite_r+0x1d4>
    8c00:	1009883a 	mov	r4,r2
    8c04:	b80b883a 	mov	r5,r23
    8c08:	0003e200 	call	3e20 <__divsi3>
    8c0c:	15cf383a 	mul	r7,r2,r23
    8c10:	81400717 	ldw	r5,28(r16)
    8c14:	80800917 	ldw	r2,36(r16)
    8c18:	e00d883a 	mov	r6,fp
    8c1c:	a809883a 	mov	r4,r21
    8c20:	103ee83a 	callr	r2
    8c24:	00bfdb16 	blt	zero,r2,8b94 <__alt_mem_onchip_memory+0xf7808b94>
    8c28:	8080030b 	ldhu	r2,12(r16)
    8c2c:	10801014 	ori	r2,r2,64
    8c30:	8080030d 	sth	r2,12(r16)
    8c34:	00bfffc4 	movi	r2,-1
    8c38:	003fab06 	br	8ae8 <__alt_mem_onchip_memory+0xf7808ae8>
    8c3c:	0027883a 	mov	r19,zero
    8c40:	0011883a 	mov	r8,zero
    8c44:	0039883a 	mov	fp,zero
    8c48:	0025883a 	mov	r18,zero
    8c4c:	90001f26 	beq	r18,zero,8ccc <__sfvwrite_r+0x29c>
    8c50:	40005a26 	beq	r8,zero,8dbc <__sfvwrite_r+0x38c>
    8c54:	982d883a 	mov	r22,r19
    8c58:	94c0012e 	bgeu	r18,r19,8c60 <__sfvwrite_r+0x230>
    8c5c:	902d883a 	mov	r22,r18
    8c60:	81000017 	ldw	r4,0(r16)
    8c64:	80800417 	ldw	r2,16(r16)
    8c68:	b02f883a 	mov	r23,r22
    8c6c:	81c00517 	ldw	r7,20(r16)
    8c70:	1100032e 	bgeu	r2,r4,8c80 <__sfvwrite_r+0x250>
    8c74:	80c00217 	ldw	r3,8(r16)
    8c78:	38c7883a 	add	r3,r7,r3
    8c7c:	1d801816 	blt	r3,r22,8ce0 <__sfvwrite_r+0x2b0>
    8c80:	b1c03e16 	blt	r22,r7,8d7c <__sfvwrite_r+0x34c>
    8c84:	80800917 	ldw	r2,36(r16)
    8c88:	81400717 	ldw	r5,28(r16)
    8c8c:	e00d883a 	mov	r6,fp
    8c90:	da000115 	stw	r8,4(sp)
    8c94:	a809883a 	mov	r4,r21
    8c98:	103ee83a 	callr	r2
    8c9c:	102f883a 	mov	r23,r2
    8ca0:	da000117 	ldw	r8,4(sp)
    8ca4:	00bfe00e 	bge	zero,r2,8c28 <__alt_mem_onchip_memory+0xf7808c28>
    8ca8:	9de7c83a 	sub	r19,r19,r23
    8cac:	98001f26 	beq	r19,zero,8d2c <__sfvwrite_r+0x2fc>
    8cb0:	a0800217 	ldw	r2,8(r20)
    8cb4:	e5f9883a 	add	fp,fp,r23
    8cb8:	95e5c83a 	sub	r18,r18,r23
    8cbc:	15efc83a 	sub	r23,r2,r23
    8cc0:	a5c00215 	stw	r23,8(r20)
    8cc4:	b83f8726 	beq	r23,zero,8ae4 <__alt_mem_onchip_memory+0xf7808ae4>
    8cc8:	903fe11e 	bne	r18,zero,8c50 <__alt_mem_onchip_memory+0xf7808c50>
    8ccc:	8f000017 	ldw	fp,0(r17)
    8cd0:	8c800117 	ldw	r18,4(r17)
    8cd4:	0011883a 	mov	r8,zero
    8cd8:	8c400204 	addi	r17,r17,8
    8cdc:	003fdb06 	br	8c4c <__alt_mem_onchip_memory+0xf7808c4c>
    8ce0:	180d883a 	mov	r6,r3
    8ce4:	e00b883a 	mov	r5,fp
    8ce8:	da000115 	stw	r8,4(sp)
    8cec:	d8c00015 	stw	r3,0(sp)
    8cf0:	0009da00 	call	9da0 <memmove>
    8cf4:	d8c00017 	ldw	r3,0(sp)
    8cf8:	80800017 	ldw	r2,0(r16)
    8cfc:	800b883a 	mov	r5,r16
    8d00:	a809883a 	mov	r4,r21
    8d04:	10c5883a 	add	r2,r2,r3
    8d08:	80800015 	stw	r2,0(r16)
    8d0c:	d8c00015 	stw	r3,0(sp)
    8d10:	00081d00 	call	81d0 <_fflush_r>
    8d14:	d8c00017 	ldw	r3,0(sp)
    8d18:	da000117 	ldw	r8,4(sp)
    8d1c:	103fc21e 	bne	r2,zero,8c28 <__alt_mem_onchip_memory+0xf7808c28>
    8d20:	182f883a 	mov	r23,r3
    8d24:	9de7c83a 	sub	r19,r19,r23
    8d28:	983fe11e 	bne	r19,zero,8cb0 <__alt_mem_onchip_memory+0xf7808cb0>
    8d2c:	800b883a 	mov	r5,r16
    8d30:	a809883a 	mov	r4,r21
    8d34:	00081d00 	call	81d0 <_fflush_r>
    8d38:	103fbb1e 	bne	r2,zero,8c28 <__alt_mem_onchip_memory+0xf7808c28>
    8d3c:	0011883a 	mov	r8,zero
    8d40:	003fdb06 	br	8cb0 <__alt_mem_onchip_memory+0xf7808cb0>
    8d44:	94c0012e 	bgeu	r18,r19,8d4c <__sfvwrite_r+0x31c>
    8d48:	9027883a 	mov	r19,r18
    8d4c:	980d883a 	mov	r6,r19
    8d50:	e00b883a 	mov	r5,fp
    8d54:	0009da00 	call	9da0 <memmove>
    8d58:	80800217 	ldw	r2,8(r16)
    8d5c:	80c00017 	ldw	r3,0(r16)
    8d60:	14c5c83a 	sub	r2,r2,r19
    8d64:	1cc7883a 	add	r3,r3,r19
    8d68:	80800215 	stw	r2,8(r16)
    8d6c:	80c00015 	stw	r3,0(r16)
    8d70:	10004326 	beq	r2,zero,8e80 <__sfvwrite_r+0x450>
    8d74:	9805883a 	mov	r2,r19
    8d78:	003f8606 	br	8b94 <__alt_mem_onchip_memory+0xf7808b94>
    8d7c:	b00d883a 	mov	r6,r22
    8d80:	e00b883a 	mov	r5,fp
    8d84:	da000115 	stw	r8,4(sp)
    8d88:	0009da00 	call	9da0 <memmove>
    8d8c:	80800217 	ldw	r2,8(r16)
    8d90:	80c00017 	ldw	r3,0(r16)
    8d94:	da000117 	ldw	r8,4(sp)
    8d98:	1585c83a 	sub	r2,r2,r22
    8d9c:	1dad883a 	add	r22,r3,r22
    8da0:	80800215 	stw	r2,8(r16)
    8da4:	85800015 	stw	r22,0(r16)
    8da8:	003fbf06 	br	8ca8 <__alt_mem_onchip_memory+0xf7808ca8>
    8dac:	81000017 	ldw	r4,0(r16)
    8db0:	9027883a 	mov	r19,r18
    8db4:	902f883a 	mov	r23,r18
    8db8:	003f6c06 	br	8b6c <__alt_mem_onchip_memory+0xf7808b6c>
    8dbc:	900d883a 	mov	r6,r18
    8dc0:	01400284 	movi	r5,10
    8dc4:	e009883a 	mov	r4,fp
    8dc8:	0009b740 	call	9b74 <memchr>
    8dcc:	10003e26 	beq	r2,zero,8ec8 <__sfvwrite_r+0x498>
    8dd0:	10800044 	addi	r2,r2,1
    8dd4:	1727c83a 	sub	r19,r2,fp
    8dd8:	02000044 	movi	r8,1
    8ddc:	003f9d06 	br	8c54 <__alt_mem_onchip_memory+0xf7808c54>
    8de0:	80800517 	ldw	r2,20(r16)
    8de4:	81400417 	ldw	r5,16(r16)
    8de8:	81c00017 	ldw	r7,0(r16)
    8dec:	10a7883a 	add	r19,r2,r2
    8df0:	9885883a 	add	r2,r19,r2
    8df4:	1026d7fa 	srli	r19,r2,31
    8df8:	396dc83a 	sub	r22,r7,r5
    8dfc:	b1000044 	addi	r4,r22,1
    8e00:	9885883a 	add	r2,r19,r2
    8e04:	1027d07a 	srai	r19,r2,1
    8e08:	2485883a 	add	r2,r4,r18
    8e0c:	980d883a 	mov	r6,r19
    8e10:	9880022e 	bgeu	r19,r2,8e1c <__sfvwrite_r+0x3ec>
    8e14:	1027883a 	mov	r19,r2
    8e18:	100d883a 	mov	r6,r2
    8e1c:	18c1000c 	andi	r3,r3,1024
    8e20:	18001c26 	beq	r3,zero,8e94 <__sfvwrite_r+0x464>
    8e24:	300b883a 	mov	r5,r6
    8e28:	a809883a 	mov	r4,r21
    8e2c:	00093680 	call	9368 <_malloc_r>
    8e30:	102f883a 	mov	r23,r2
    8e34:	10002926 	beq	r2,zero,8edc <__sfvwrite_r+0x4ac>
    8e38:	81400417 	ldw	r5,16(r16)
    8e3c:	b00d883a 	mov	r6,r22
    8e40:	1009883a 	mov	r4,r2
    8e44:	0009c580 	call	9c58 <memcpy>
    8e48:	8080030b 	ldhu	r2,12(r16)
    8e4c:	00fedfc4 	movi	r3,-1153
    8e50:	10c4703a 	and	r2,r2,r3
    8e54:	10802014 	ori	r2,r2,128
    8e58:	8080030d 	sth	r2,12(r16)
    8e5c:	bd89883a 	add	r4,r23,r22
    8e60:	9d8fc83a 	sub	r7,r19,r22
    8e64:	85c00415 	stw	r23,16(r16)
    8e68:	84c00515 	stw	r19,20(r16)
    8e6c:	81000015 	stw	r4,0(r16)
    8e70:	9027883a 	mov	r19,r18
    8e74:	81c00215 	stw	r7,8(r16)
    8e78:	902f883a 	mov	r23,r18
    8e7c:	003f3b06 	br	8b6c <__alt_mem_onchip_memory+0xf7808b6c>
    8e80:	800b883a 	mov	r5,r16
    8e84:	a809883a 	mov	r4,r21
    8e88:	00081d00 	call	81d0 <_fflush_r>
    8e8c:	103fb926 	beq	r2,zero,8d74 <__alt_mem_onchip_memory+0xf7808d74>
    8e90:	003f6506 	br	8c28 <__alt_mem_onchip_memory+0xf7808c28>
    8e94:	a809883a 	mov	r4,r21
    8e98:	000b1880 	call	b188 <_realloc_r>
    8e9c:	102f883a 	mov	r23,r2
    8ea0:	103fee1e 	bne	r2,zero,8e5c <__alt_mem_onchip_memory+0xf7808e5c>
    8ea4:	81400417 	ldw	r5,16(r16)
    8ea8:	a809883a 	mov	r4,r21
    8eac:	00087200 	call	8720 <_free_r>
    8eb0:	8080030b 	ldhu	r2,12(r16)
    8eb4:	00ffdfc4 	movi	r3,-129
    8eb8:	1884703a 	and	r2,r3,r2
    8ebc:	00c00304 	movi	r3,12
    8ec0:	a8c00015 	stw	r3,0(r21)
    8ec4:	003f5906 	br	8c2c <__alt_mem_onchip_memory+0xf7808c2c>
    8ec8:	94c00044 	addi	r19,r18,1
    8ecc:	02000044 	movi	r8,1
    8ed0:	003f6006 	br	8c54 <__alt_mem_onchip_memory+0xf7808c54>
    8ed4:	00bfffc4 	movi	r2,-1
    8ed8:	003f0306 	br	8ae8 <__alt_mem_onchip_memory+0xf7808ae8>
    8edc:	00800304 	movi	r2,12
    8ee0:	a8800015 	stw	r2,0(r21)
    8ee4:	8080030b 	ldhu	r2,12(r16)
    8ee8:	003f5006 	br	8c2c <__alt_mem_onchip_memory+0xf7808c2c>

00008eec <_fwalk>:
    8eec:	defff704 	addi	sp,sp,-36
    8ef0:	dd000415 	stw	r20,16(sp)
    8ef4:	dfc00815 	stw	ra,32(sp)
    8ef8:	ddc00715 	stw	r23,28(sp)
    8efc:	dd800615 	stw	r22,24(sp)
    8f00:	dd400515 	stw	r21,20(sp)
    8f04:	dcc00315 	stw	r19,12(sp)
    8f08:	dc800215 	stw	r18,8(sp)
    8f0c:	dc400115 	stw	r17,4(sp)
    8f10:	dc000015 	stw	r16,0(sp)
    8f14:	2500b804 	addi	r20,r4,736
    8f18:	a0002326 	beq	r20,zero,8fa8 <_fwalk+0xbc>
    8f1c:	282b883a 	mov	r21,r5
    8f20:	002f883a 	mov	r23,zero
    8f24:	05800044 	movi	r22,1
    8f28:	04ffffc4 	movi	r19,-1
    8f2c:	a4400117 	ldw	r17,4(r20)
    8f30:	a4800217 	ldw	r18,8(r20)
    8f34:	8c7fffc4 	addi	r17,r17,-1
    8f38:	88000d16 	blt	r17,zero,8f70 <_fwalk+0x84>
    8f3c:	94000304 	addi	r16,r18,12
    8f40:	94800384 	addi	r18,r18,14
    8f44:	8080000b 	ldhu	r2,0(r16)
    8f48:	8c7fffc4 	addi	r17,r17,-1
    8f4c:	813ffd04 	addi	r4,r16,-12
    8f50:	b080042e 	bgeu	r22,r2,8f64 <_fwalk+0x78>
    8f54:	9080000f 	ldh	r2,0(r18)
    8f58:	14c00226 	beq	r2,r19,8f64 <_fwalk+0x78>
    8f5c:	a83ee83a 	callr	r21
    8f60:	b8aeb03a 	or	r23,r23,r2
    8f64:	84001a04 	addi	r16,r16,104
    8f68:	94801a04 	addi	r18,r18,104
    8f6c:	8cfff51e 	bne	r17,r19,8f44 <__alt_mem_onchip_memory+0xf7808f44>
    8f70:	a5000017 	ldw	r20,0(r20)
    8f74:	a03fed1e 	bne	r20,zero,8f2c <__alt_mem_onchip_memory+0xf7808f2c>
    8f78:	b805883a 	mov	r2,r23
    8f7c:	dfc00817 	ldw	ra,32(sp)
    8f80:	ddc00717 	ldw	r23,28(sp)
    8f84:	dd800617 	ldw	r22,24(sp)
    8f88:	dd400517 	ldw	r21,20(sp)
    8f8c:	dd000417 	ldw	r20,16(sp)
    8f90:	dcc00317 	ldw	r19,12(sp)
    8f94:	dc800217 	ldw	r18,8(sp)
    8f98:	dc400117 	ldw	r17,4(sp)
    8f9c:	dc000017 	ldw	r16,0(sp)
    8fa0:	dec00904 	addi	sp,sp,36
    8fa4:	f800283a 	ret
    8fa8:	002f883a 	mov	r23,zero
    8fac:	003ff206 	br	8f78 <__alt_mem_onchip_memory+0xf7808f78>

00008fb0 <_fwalk_reent>:
    8fb0:	defff704 	addi	sp,sp,-36
    8fb4:	dd000415 	stw	r20,16(sp)
    8fb8:	dfc00815 	stw	ra,32(sp)
    8fbc:	ddc00715 	stw	r23,28(sp)
    8fc0:	dd800615 	stw	r22,24(sp)
    8fc4:	dd400515 	stw	r21,20(sp)
    8fc8:	dcc00315 	stw	r19,12(sp)
    8fcc:	dc800215 	stw	r18,8(sp)
    8fd0:	dc400115 	stw	r17,4(sp)
    8fd4:	dc000015 	stw	r16,0(sp)
    8fd8:	2500b804 	addi	r20,r4,736
    8fdc:	a0002326 	beq	r20,zero,906c <_fwalk_reent+0xbc>
    8fe0:	282b883a 	mov	r21,r5
    8fe4:	2027883a 	mov	r19,r4
    8fe8:	002f883a 	mov	r23,zero
    8fec:	05800044 	movi	r22,1
    8ff0:	04bfffc4 	movi	r18,-1
    8ff4:	a4400117 	ldw	r17,4(r20)
    8ff8:	a4000217 	ldw	r16,8(r20)
    8ffc:	8c7fffc4 	addi	r17,r17,-1
    9000:	88000c16 	blt	r17,zero,9034 <_fwalk_reent+0x84>
    9004:	84000304 	addi	r16,r16,12
    9008:	8080000b 	ldhu	r2,0(r16)
    900c:	8c7fffc4 	addi	r17,r17,-1
    9010:	817ffd04 	addi	r5,r16,-12
    9014:	b080052e 	bgeu	r22,r2,902c <_fwalk_reent+0x7c>
    9018:	8080008f 	ldh	r2,2(r16)
    901c:	9809883a 	mov	r4,r19
    9020:	14800226 	beq	r2,r18,902c <_fwalk_reent+0x7c>
    9024:	a83ee83a 	callr	r21
    9028:	b8aeb03a 	or	r23,r23,r2
    902c:	84001a04 	addi	r16,r16,104
    9030:	8cbff51e 	bne	r17,r18,9008 <__alt_mem_onchip_memory+0xf7809008>
    9034:	a5000017 	ldw	r20,0(r20)
    9038:	a03fee1e 	bne	r20,zero,8ff4 <__alt_mem_onchip_memory+0xf7808ff4>
    903c:	b805883a 	mov	r2,r23
    9040:	dfc00817 	ldw	ra,32(sp)
    9044:	ddc00717 	ldw	r23,28(sp)
    9048:	dd800617 	ldw	r22,24(sp)
    904c:	dd400517 	ldw	r21,20(sp)
    9050:	dd000417 	ldw	r20,16(sp)
    9054:	dcc00317 	ldw	r19,12(sp)
    9058:	dc800217 	ldw	r18,8(sp)
    905c:	dc400117 	ldw	r17,4(sp)
    9060:	dc000017 	ldw	r16,0(sp)
    9064:	dec00904 	addi	sp,sp,36
    9068:	f800283a 	ret
    906c:	002f883a 	mov	r23,zero
    9070:	003ff206 	br	903c <__alt_mem_onchip_memory+0xf780903c>

00009074 <_gettimeofday_r>:
    9074:	defffd04 	addi	sp,sp,-12
    9078:	2805883a 	mov	r2,r5
    907c:	dc000015 	stw	r16,0(sp)
    9080:	04000074 	movhi	r16,1
    9084:	dc400115 	stw	r17,4(sp)
    9088:	84141404 	addi	r16,r16,20560
    908c:	2023883a 	mov	r17,r4
    9090:	300b883a 	mov	r5,r6
    9094:	1009883a 	mov	r4,r2
    9098:	dfc00215 	stw	ra,8(sp)
    909c:	80000015 	stw	zero,0(r16)
    90a0:	000e9700 	call	e970 <gettimeofday>
    90a4:	00ffffc4 	movi	r3,-1
    90a8:	10c00526 	beq	r2,r3,90c0 <_gettimeofday_r+0x4c>
    90ac:	dfc00217 	ldw	ra,8(sp)
    90b0:	dc400117 	ldw	r17,4(sp)
    90b4:	dc000017 	ldw	r16,0(sp)
    90b8:	dec00304 	addi	sp,sp,12
    90bc:	f800283a 	ret
    90c0:	80c00017 	ldw	r3,0(r16)
    90c4:	183ff926 	beq	r3,zero,90ac <__alt_mem_onchip_memory+0xf78090ac>
    90c8:	88c00015 	stw	r3,0(r17)
    90cc:	003ff706 	br	90ac <__alt_mem_onchip_memory+0xf78090ac>

000090d0 <_setlocale_r>:
    90d0:	30001b26 	beq	r6,zero,9140 <_setlocale_r+0x70>
    90d4:	01400074 	movhi	r5,1
    90d8:	defffe04 	addi	sp,sp,-8
    90dc:	2945ee04 	addi	r5,r5,6072
    90e0:	3009883a 	mov	r4,r6
    90e4:	dc000015 	stw	r16,0(sp)
    90e8:	dfc00115 	stw	ra,4(sp)
    90ec:	3021883a 	mov	r16,r6
    90f0:	000b87c0 	call	b87c <strcmp>
    90f4:	1000061e 	bne	r2,zero,9110 <_setlocale_r+0x40>
    90f8:	00800074 	movhi	r2,1
    90fc:	1085cf04 	addi	r2,r2,5948
    9100:	dfc00117 	ldw	ra,4(sp)
    9104:	dc000017 	ldw	r16,0(sp)
    9108:	dec00204 	addi	sp,sp,8
    910c:	f800283a 	ret
    9110:	01400074 	movhi	r5,1
    9114:	2945cf04 	addi	r5,r5,5948
    9118:	8009883a 	mov	r4,r16
    911c:	000b87c0 	call	b87c <strcmp>
    9120:	103ff526 	beq	r2,zero,90f8 <__alt_mem_onchip_memory+0xf78090f8>
    9124:	01400074 	movhi	r5,1
    9128:	2945d904 	addi	r5,r5,5988
    912c:	8009883a 	mov	r4,r16
    9130:	000b87c0 	call	b87c <strcmp>
    9134:	103ff026 	beq	r2,zero,90f8 <__alt_mem_onchip_memory+0xf78090f8>
    9138:	0005883a 	mov	r2,zero
    913c:	003ff006 	br	9100 <__alt_mem_onchip_memory+0xf7809100>
    9140:	00800074 	movhi	r2,1
    9144:	1085cf04 	addi	r2,r2,5948
    9148:	f800283a 	ret

0000914c <__locale_charset>:
    914c:	00800074 	movhi	r2,1
    9150:	10879e04 	addi	r2,r2,7800
    9154:	f800283a 	ret

00009158 <__locale_mb_cur_max>:
    9158:	00800074 	movhi	r2,1
    915c:	108d3f04 	addi	r2,r2,13564
    9160:	10800017 	ldw	r2,0(r2)
    9164:	f800283a 	ret

00009168 <__locale_msgcharset>:
    9168:	00800074 	movhi	r2,1
    916c:	10879604 	addi	r2,r2,7768
    9170:	f800283a 	ret

00009174 <__locale_cjk_lang>:
    9174:	0005883a 	mov	r2,zero
    9178:	f800283a 	ret

0000917c <_localeconv_r>:
    917c:	00800074 	movhi	r2,1
    9180:	1087a604 	addi	r2,r2,7832
    9184:	f800283a 	ret

00009188 <setlocale>:
    9188:	00800074 	movhi	r2,1
    918c:	108d3e04 	addi	r2,r2,13560
    9190:	280d883a 	mov	r6,r5
    9194:	200b883a 	mov	r5,r4
    9198:	11000017 	ldw	r4,0(r2)
    919c:	00090d01 	jmpi	90d0 <_setlocale_r>

000091a0 <localeconv>:
    91a0:	00800074 	movhi	r2,1
    91a4:	1087a604 	addi	r2,r2,7832
    91a8:	f800283a 	ret

000091ac <__smakebuf_r>:
    91ac:	2880030b 	ldhu	r2,12(r5)
    91b0:	10c0008c 	andi	r3,r2,2
    91b4:	1800411e 	bne	r3,zero,92bc <__smakebuf_r+0x110>
    91b8:	deffec04 	addi	sp,sp,-80
    91bc:	dc000f15 	stw	r16,60(sp)
    91c0:	2821883a 	mov	r16,r5
    91c4:	2940038f 	ldh	r5,14(r5)
    91c8:	dc401015 	stw	r17,64(sp)
    91cc:	dfc01315 	stw	ra,76(sp)
    91d0:	dcc01215 	stw	r19,72(sp)
    91d4:	dc801115 	stw	r18,68(sp)
    91d8:	2023883a 	mov	r17,r4
    91dc:	28001c16 	blt	r5,zero,9250 <__smakebuf_r+0xa4>
    91e0:	d80d883a 	mov	r6,sp
    91e4:	000d57c0 	call	d57c <_fstat_r>
    91e8:	10001816 	blt	r2,zero,924c <__smakebuf_r+0xa0>
    91ec:	d8800117 	ldw	r2,4(sp)
    91f0:	00e00014 	movui	r3,32768
    91f4:	10bc000c 	andi	r2,r2,61440
    91f8:	14c80020 	cmpeqi	r19,r2,8192
    91fc:	10c03726 	beq	r2,r3,92dc <__smakebuf_r+0x130>
    9200:	80c0030b 	ldhu	r3,12(r16)
    9204:	18c20014 	ori	r3,r3,2048
    9208:	80c0030d 	sth	r3,12(r16)
    920c:	00c80004 	movi	r3,8192
    9210:	10c0521e 	bne	r2,r3,935c <__smakebuf_r+0x1b0>
    9214:	8140038f 	ldh	r5,14(r16)
    9218:	8809883a 	mov	r4,r17
    921c:	000d5d80 	call	d5d8 <_isatty_r>
    9220:	10004c26 	beq	r2,zero,9354 <__smakebuf_r+0x1a8>
    9224:	8080030b 	ldhu	r2,12(r16)
    9228:	80c010c4 	addi	r3,r16,67
    922c:	80c00015 	stw	r3,0(r16)
    9230:	10800054 	ori	r2,r2,1
    9234:	8080030d 	sth	r2,12(r16)
    9238:	00800044 	movi	r2,1
    923c:	80c00415 	stw	r3,16(r16)
    9240:	80800515 	stw	r2,20(r16)
    9244:	04810004 	movi	r18,1024
    9248:	00000706 	br	9268 <__smakebuf_r+0xbc>
    924c:	8080030b 	ldhu	r2,12(r16)
    9250:	10c0200c 	andi	r3,r2,128
    9254:	18001f1e 	bne	r3,zero,92d4 <__smakebuf_r+0x128>
    9258:	04810004 	movi	r18,1024
    925c:	10820014 	ori	r2,r2,2048
    9260:	8080030d 	sth	r2,12(r16)
    9264:	0027883a 	mov	r19,zero
    9268:	900b883a 	mov	r5,r18
    926c:	8809883a 	mov	r4,r17
    9270:	00093680 	call	9368 <_malloc_r>
    9274:	10002c26 	beq	r2,zero,9328 <__smakebuf_r+0x17c>
    9278:	80c0030b 	ldhu	r3,12(r16)
    927c:	01000074 	movhi	r4,1
    9280:	21209904 	addi	r4,r4,-32156
    9284:	89000f15 	stw	r4,60(r17)
    9288:	18c02014 	ori	r3,r3,128
    928c:	80c0030d 	sth	r3,12(r16)
    9290:	80800015 	stw	r2,0(r16)
    9294:	80800415 	stw	r2,16(r16)
    9298:	84800515 	stw	r18,20(r16)
    929c:	98001a1e 	bne	r19,zero,9308 <__smakebuf_r+0x15c>
    92a0:	dfc01317 	ldw	ra,76(sp)
    92a4:	dcc01217 	ldw	r19,72(sp)
    92a8:	dc801117 	ldw	r18,68(sp)
    92ac:	dc401017 	ldw	r17,64(sp)
    92b0:	dc000f17 	ldw	r16,60(sp)
    92b4:	dec01404 	addi	sp,sp,80
    92b8:	f800283a 	ret
    92bc:	288010c4 	addi	r2,r5,67
    92c0:	28800015 	stw	r2,0(r5)
    92c4:	28800415 	stw	r2,16(r5)
    92c8:	00800044 	movi	r2,1
    92cc:	28800515 	stw	r2,20(r5)
    92d0:	f800283a 	ret
    92d4:	04801004 	movi	r18,64
    92d8:	003fe006 	br	925c <__alt_mem_onchip_memory+0xf780925c>
    92dc:	81000a17 	ldw	r4,40(r16)
    92e0:	00c00074 	movhi	r3,1
    92e4:	18ee0604 	addi	r3,r3,-18408
    92e8:	20ffc51e 	bne	r4,r3,9200 <__alt_mem_onchip_memory+0xf7809200>
    92ec:	8080030b 	ldhu	r2,12(r16)
    92f0:	04810004 	movi	r18,1024
    92f4:	84801315 	stw	r18,76(r16)
    92f8:	1484b03a 	or	r2,r2,r18
    92fc:	8080030d 	sth	r2,12(r16)
    9300:	0027883a 	mov	r19,zero
    9304:	003fd806 	br	9268 <__alt_mem_onchip_memory+0xf7809268>
    9308:	8140038f 	ldh	r5,14(r16)
    930c:	8809883a 	mov	r4,r17
    9310:	000d5d80 	call	d5d8 <_isatty_r>
    9314:	103fe226 	beq	r2,zero,92a0 <__alt_mem_onchip_memory+0xf78092a0>
    9318:	8080030b 	ldhu	r2,12(r16)
    931c:	10800054 	ori	r2,r2,1
    9320:	8080030d 	sth	r2,12(r16)
    9324:	003fde06 	br	92a0 <__alt_mem_onchip_memory+0xf78092a0>
    9328:	8080030b 	ldhu	r2,12(r16)
    932c:	10c0800c 	andi	r3,r2,512
    9330:	183fdb1e 	bne	r3,zero,92a0 <__alt_mem_onchip_memory+0xf78092a0>
    9334:	10800094 	ori	r2,r2,2
    9338:	80c010c4 	addi	r3,r16,67
    933c:	8080030d 	sth	r2,12(r16)
    9340:	00800044 	movi	r2,1
    9344:	80c00015 	stw	r3,0(r16)
    9348:	80c00415 	stw	r3,16(r16)
    934c:	80800515 	stw	r2,20(r16)
    9350:	003fd306 	br	92a0 <__alt_mem_onchip_memory+0xf78092a0>
    9354:	04810004 	movi	r18,1024
    9358:	003fc306 	br	9268 <__alt_mem_onchip_memory+0xf7809268>
    935c:	0027883a 	mov	r19,zero
    9360:	04810004 	movi	r18,1024
    9364:	003fc006 	br	9268 <__alt_mem_onchip_memory+0xf7809268>

00009368 <_malloc_r>:
    9368:	defff504 	addi	sp,sp,-44
    936c:	dc800315 	stw	r18,12(sp)
    9370:	dfc00a15 	stw	ra,40(sp)
    9374:	df000915 	stw	fp,36(sp)
    9378:	ddc00815 	stw	r23,32(sp)
    937c:	dd800715 	stw	r22,28(sp)
    9380:	dd400615 	stw	r21,24(sp)
    9384:	dd000515 	stw	r20,20(sp)
    9388:	dcc00415 	stw	r19,16(sp)
    938c:	dc400215 	stw	r17,8(sp)
    9390:	dc000115 	stw	r16,4(sp)
    9394:	288002c4 	addi	r2,r5,11
    9398:	00c00584 	movi	r3,22
    939c:	2025883a 	mov	r18,r4
    93a0:	18807f2e 	bgeu	r3,r2,95a0 <_malloc_r+0x238>
    93a4:	047ffe04 	movi	r17,-8
    93a8:	1462703a 	and	r17,r2,r17
    93ac:	8800a316 	blt	r17,zero,963c <_malloc_r+0x2d4>
    93b0:	8940a236 	bltu	r17,r5,963c <_malloc_r+0x2d4>
    93b4:	000eebc0 	call	eebc <__malloc_lock>
    93b8:	00807dc4 	movi	r2,503
    93bc:	1441e92e 	bgeu	r2,r17,9b64 <_malloc_r+0x7fc>
    93c0:	8804d27a 	srli	r2,r17,9
    93c4:	1000a126 	beq	r2,zero,964c <_malloc_r+0x2e4>
    93c8:	00c00104 	movi	r3,4
    93cc:	18811e36 	bltu	r3,r2,9848 <_malloc_r+0x4e0>
    93d0:	8804d1ba 	srli	r2,r17,6
    93d4:	12000e44 	addi	r8,r2,57
    93d8:	11c00e04 	addi	r7,r2,56
    93dc:	4209883a 	add	r4,r8,r8
    93e0:	04c00074 	movhi	r19,1
    93e4:	2109883a 	add	r4,r4,r4
    93e8:	9cc7b404 	addi	r19,r19,7888
    93ec:	2109883a 	add	r4,r4,r4
    93f0:	9909883a 	add	r4,r19,r4
    93f4:	24000117 	ldw	r16,4(r4)
    93f8:	213ffe04 	addi	r4,r4,-8
    93fc:	24009726 	beq	r4,r16,965c <_malloc_r+0x2f4>
    9400:	80800117 	ldw	r2,4(r16)
    9404:	01bfff04 	movi	r6,-4
    9408:	014003c4 	movi	r5,15
    940c:	1184703a 	and	r2,r2,r6
    9410:	1447c83a 	sub	r3,r2,r17
    9414:	28c00716 	blt	r5,r3,9434 <_malloc_r+0xcc>
    9418:	1800920e 	bge	r3,zero,9664 <_malloc_r+0x2fc>
    941c:	84000317 	ldw	r16,12(r16)
    9420:	24008e26 	beq	r4,r16,965c <_malloc_r+0x2f4>
    9424:	80800117 	ldw	r2,4(r16)
    9428:	1184703a 	and	r2,r2,r6
    942c:	1447c83a 	sub	r3,r2,r17
    9430:	28fff90e 	bge	r5,r3,9418 <__alt_mem_onchip_memory+0xf7809418>
    9434:	3809883a 	mov	r4,r7
    9438:	01800074 	movhi	r6,1
    943c:	9c000417 	ldw	r16,16(r19)
    9440:	3187b404 	addi	r6,r6,7888
    9444:	32000204 	addi	r8,r6,8
    9448:	82013426 	beq	r16,r8,991c <_malloc_r+0x5b4>
    944c:	80c00117 	ldw	r3,4(r16)
    9450:	00bfff04 	movi	r2,-4
    9454:	188e703a 	and	r7,r3,r2
    9458:	3c45c83a 	sub	r2,r7,r17
    945c:	00c003c4 	movi	r3,15
    9460:	18811f16 	blt	r3,r2,98e0 <_malloc_r+0x578>
    9464:	32000515 	stw	r8,20(r6)
    9468:	32000415 	stw	r8,16(r6)
    946c:	10007f0e 	bge	r2,zero,966c <_malloc_r+0x304>
    9470:	00807fc4 	movi	r2,511
    9474:	11c0fd36 	bltu	r2,r7,986c <_malloc_r+0x504>
    9478:	3806d0fa 	srli	r3,r7,3
    947c:	01c00044 	movi	r7,1
    9480:	30800117 	ldw	r2,4(r6)
    9484:	19400044 	addi	r5,r3,1
    9488:	294b883a 	add	r5,r5,r5
    948c:	1807d0ba 	srai	r3,r3,2
    9490:	294b883a 	add	r5,r5,r5
    9494:	294b883a 	add	r5,r5,r5
    9498:	298b883a 	add	r5,r5,r6
    949c:	38c6983a 	sll	r3,r7,r3
    94a0:	29c00017 	ldw	r7,0(r5)
    94a4:	2a7ffe04 	addi	r9,r5,-8
    94a8:	1886b03a 	or	r3,r3,r2
    94ac:	82400315 	stw	r9,12(r16)
    94b0:	81c00215 	stw	r7,8(r16)
    94b4:	30c00115 	stw	r3,4(r6)
    94b8:	2c000015 	stw	r16,0(r5)
    94bc:	3c000315 	stw	r16,12(r7)
    94c0:	2005d0ba 	srai	r2,r4,2
    94c4:	01400044 	movi	r5,1
    94c8:	288a983a 	sll	r5,r5,r2
    94cc:	19406f36 	bltu	r3,r5,968c <_malloc_r+0x324>
    94d0:	28c4703a 	and	r2,r5,r3
    94d4:	10000a1e 	bne	r2,zero,9500 <_malloc_r+0x198>
    94d8:	00bfff04 	movi	r2,-4
    94dc:	294b883a 	add	r5,r5,r5
    94e0:	2088703a 	and	r4,r4,r2
    94e4:	28c4703a 	and	r2,r5,r3
    94e8:	21000104 	addi	r4,r4,4
    94ec:	1000041e 	bne	r2,zero,9500 <_malloc_r+0x198>
    94f0:	294b883a 	add	r5,r5,r5
    94f4:	28c4703a 	and	r2,r5,r3
    94f8:	21000104 	addi	r4,r4,4
    94fc:	103ffc26 	beq	r2,zero,94f0 <__alt_mem_onchip_memory+0xf78094f0>
    9500:	02bfff04 	movi	r10,-4
    9504:	024003c4 	movi	r9,15
    9508:	21800044 	addi	r6,r4,1
    950c:	318d883a 	add	r6,r6,r6
    9510:	318d883a 	add	r6,r6,r6
    9514:	318d883a 	add	r6,r6,r6
    9518:	998d883a 	add	r6,r19,r6
    951c:	333ffe04 	addi	r12,r6,-8
    9520:	2017883a 	mov	r11,r4
    9524:	31800104 	addi	r6,r6,4
    9528:	34000017 	ldw	r16,0(r6)
    952c:	31fffd04 	addi	r7,r6,-12
    9530:	81c0041e 	bne	r16,r7,9544 <_malloc_r+0x1dc>
    9534:	0000fb06 	br	9924 <_malloc_r+0x5bc>
    9538:	1801030e 	bge	r3,zero,9948 <_malloc_r+0x5e0>
    953c:	84000317 	ldw	r16,12(r16)
    9540:	81c0f826 	beq	r16,r7,9924 <_malloc_r+0x5bc>
    9544:	80800117 	ldw	r2,4(r16)
    9548:	1284703a 	and	r2,r2,r10
    954c:	1447c83a 	sub	r3,r2,r17
    9550:	48fff90e 	bge	r9,r3,9538 <__alt_mem_onchip_memory+0xf7809538>
    9554:	80800317 	ldw	r2,12(r16)
    9558:	81000217 	ldw	r4,8(r16)
    955c:	89400054 	ori	r5,r17,1
    9560:	81400115 	stw	r5,4(r16)
    9564:	20800315 	stw	r2,12(r4)
    9568:	11000215 	stw	r4,8(r2)
    956c:	8463883a 	add	r17,r16,r17
    9570:	9c400515 	stw	r17,20(r19)
    9574:	9c400415 	stw	r17,16(r19)
    9578:	18800054 	ori	r2,r3,1
    957c:	88800115 	stw	r2,4(r17)
    9580:	8a000315 	stw	r8,12(r17)
    9584:	8a000215 	stw	r8,8(r17)
    9588:	88e3883a 	add	r17,r17,r3
    958c:	88c00015 	stw	r3,0(r17)
    9590:	9009883a 	mov	r4,r18
    9594:	000eee00 	call	eee0 <__malloc_unlock>
    9598:	80800204 	addi	r2,r16,8
    959c:	00001b06 	br	960c <_malloc_r+0x2a4>
    95a0:	04400404 	movi	r17,16
    95a4:	89402536 	bltu	r17,r5,963c <_malloc_r+0x2d4>
    95a8:	000eebc0 	call	eebc <__malloc_lock>
    95ac:	00800184 	movi	r2,6
    95b0:	01000084 	movi	r4,2
    95b4:	04c00074 	movhi	r19,1
    95b8:	1085883a 	add	r2,r2,r2
    95bc:	9cc7b404 	addi	r19,r19,7888
    95c0:	1085883a 	add	r2,r2,r2
    95c4:	9885883a 	add	r2,r19,r2
    95c8:	14000117 	ldw	r16,4(r2)
    95cc:	10fffe04 	addi	r3,r2,-8
    95d0:	80c0d926 	beq	r16,r3,9938 <_malloc_r+0x5d0>
    95d4:	80c00117 	ldw	r3,4(r16)
    95d8:	81000317 	ldw	r4,12(r16)
    95dc:	00bfff04 	movi	r2,-4
    95e0:	1884703a 	and	r2,r3,r2
    95e4:	81400217 	ldw	r5,8(r16)
    95e8:	8085883a 	add	r2,r16,r2
    95ec:	10c00117 	ldw	r3,4(r2)
    95f0:	29000315 	stw	r4,12(r5)
    95f4:	21400215 	stw	r5,8(r4)
    95f8:	18c00054 	ori	r3,r3,1
    95fc:	10c00115 	stw	r3,4(r2)
    9600:	9009883a 	mov	r4,r18
    9604:	000eee00 	call	eee0 <__malloc_unlock>
    9608:	80800204 	addi	r2,r16,8
    960c:	dfc00a17 	ldw	ra,40(sp)
    9610:	df000917 	ldw	fp,36(sp)
    9614:	ddc00817 	ldw	r23,32(sp)
    9618:	dd800717 	ldw	r22,28(sp)
    961c:	dd400617 	ldw	r21,24(sp)
    9620:	dd000517 	ldw	r20,20(sp)
    9624:	dcc00417 	ldw	r19,16(sp)
    9628:	dc800317 	ldw	r18,12(sp)
    962c:	dc400217 	ldw	r17,8(sp)
    9630:	dc000117 	ldw	r16,4(sp)
    9634:	dec00b04 	addi	sp,sp,44
    9638:	f800283a 	ret
    963c:	00800304 	movi	r2,12
    9640:	90800015 	stw	r2,0(r18)
    9644:	0005883a 	mov	r2,zero
    9648:	003ff006 	br	960c <__alt_mem_onchip_memory+0xf780960c>
    964c:	01002004 	movi	r4,128
    9650:	02001004 	movi	r8,64
    9654:	01c00fc4 	movi	r7,63
    9658:	003f6106 	br	93e0 <__alt_mem_onchip_memory+0xf78093e0>
    965c:	4009883a 	mov	r4,r8
    9660:	003f7506 	br	9438 <__alt_mem_onchip_memory+0xf7809438>
    9664:	81000317 	ldw	r4,12(r16)
    9668:	003fde06 	br	95e4 <__alt_mem_onchip_memory+0xf78095e4>
    966c:	81c5883a 	add	r2,r16,r7
    9670:	11400117 	ldw	r5,4(r2)
    9674:	9009883a 	mov	r4,r18
    9678:	29400054 	ori	r5,r5,1
    967c:	11400115 	stw	r5,4(r2)
    9680:	000eee00 	call	eee0 <__malloc_unlock>
    9684:	80800204 	addi	r2,r16,8
    9688:	003fe006 	br	960c <__alt_mem_onchip_memory+0xf780960c>
    968c:	9c000217 	ldw	r16,8(r19)
    9690:	00bfff04 	movi	r2,-4
    9694:	85800117 	ldw	r22,4(r16)
    9698:	b0ac703a 	and	r22,r22,r2
    969c:	b4400336 	bltu	r22,r17,96ac <_malloc_r+0x344>
    96a0:	b445c83a 	sub	r2,r22,r17
    96a4:	00c003c4 	movi	r3,15
    96a8:	18805d16 	blt	r3,r2,9820 <_malloc_r+0x4b8>
    96ac:	05c00074 	movhi	r23,1
    96b0:	00800074 	movhi	r2,1
    96b4:	10941a04 	addi	r2,r2,20584
    96b8:	bdcd4004 	addi	r23,r23,13568
    96bc:	15400017 	ldw	r21,0(r2)
    96c0:	b8c00017 	ldw	r3,0(r23)
    96c4:	00bfffc4 	movi	r2,-1
    96c8:	858d883a 	add	r6,r16,r22
    96cc:	8d6b883a 	add	r21,r17,r21
    96d0:	1880ea26 	beq	r3,r2,9a7c <_malloc_r+0x714>
    96d4:	ad4403c4 	addi	r21,r21,4111
    96d8:	00bc0004 	movi	r2,-4096
    96dc:	a8aa703a 	and	r21,r21,r2
    96e0:	a80b883a 	mov	r5,r21
    96e4:	9009883a 	mov	r4,r18
    96e8:	d9800015 	stw	r6,0(sp)
    96ec:	000b6ec0 	call	b6ec <_sbrk_r>
    96f0:	1029883a 	mov	r20,r2
    96f4:	00bfffc4 	movi	r2,-1
    96f8:	d9800017 	ldw	r6,0(sp)
    96fc:	a080e826 	beq	r20,r2,9aa0 <_malloc_r+0x738>
    9700:	a180a636 	bltu	r20,r6,999c <_malloc_r+0x634>
    9704:	07000074 	movhi	fp,1
    9708:	e7142604 	addi	fp,fp,20632
    970c:	e0800017 	ldw	r2,0(fp)
    9710:	a887883a 	add	r3,r21,r2
    9714:	e0c00015 	stw	r3,0(fp)
    9718:	3500e626 	beq	r6,r20,9ab4 <_malloc_r+0x74c>
    971c:	b9000017 	ldw	r4,0(r23)
    9720:	00bfffc4 	movi	r2,-1
    9724:	2080ee26 	beq	r4,r2,9ae0 <_malloc_r+0x778>
    9728:	a185c83a 	sub	r2,r20,r6
    972c:	10c5883a 	add	r2,r2,r3
    9730:	e0800015 	stw	r2,0(fp)
    9734:	a0c001cc 	andi	r3,r20,7
    9738:	1800bc26 	beq	r3,zero,9a2c <_malloc_r+0x6c4>
    973c:	a0e9c83a 	sub	r20,r20,r3
    9740:	00840204 	movi	r2,4104
    9744:	a5000204 	addi	r20,r20,8
    9748:	10c7c83a 	sub	r3,r2,r3
    974c:	a545883a 	add	r2,r20,r21
    9750:	1083ffcc 	andi	r2,r2,4095
    9754:	18abc83a 	sub	r21,r3,r2
    9758:	a80b883a 	mov	r5,r21
    975c:	9009883a 	mov	r4,r18
    9760:	000b6ec0 	call	b6ec <_sbrk_r>
    9764:	00ffffc4 	movi	r3,-1
    9768:	10c0e126 	beq	r2,r3,9af0 <_malloc_r+0x788>
    976c:	1505c83a 	sub	r2,r2,r20
    9770:	1545883a 	add	r2,r2,r21
    9774:	10800054 	ori	r2,r2,1
    9778:	e0c00017 	ldw	r3,0(fp)
    977c:	9d000215 	stw	r20,8(r19)
    9780:	a0800115 	stw	r2,4(r20)
    9784:	a8c7883a 	add	r3,r21,r3
    9788:	e0c00015 	stw	r3,0(fp)
    978c:	84c00e26 	beq	r16,r19,97c8 <_malloc_r+0x460>
    9790:	018003c4 	movi	r6,15
    9794:	3580a72e 	bgeu	r6,r22,9a34 <_malloc_r+0x6cc>
    9798:	81400117 	ldw	r5,4(r16)
    979c:	013ffe04 	movi	r4,-8
    97a0:	b0bffd04 	addi	r2,r22,-12
    97a4:	1104703a 	and	r2,r2,r4
    97a8:	2900004c 	andi	r4,r5,1
    97ac:	2088b03a 	or	r4,r4,r2
    97b0:	81000115 	stw	r4,4(r16)
    97b4:	01400144 	movi	r5,5
    97b8:	8089883a 	add	r4,r16,r2
    97bc:	21400115 	stw	r5,4(r4)
    97c0:	21400215 	stw	r5,8(r4)
    97c4:	3080cd36 	bltu	r6,r2,9afc <_malloc_r+0x794>
    97c8:	00800074 	movhi	r2,1
    97cc:	10941904 	addi	r2,r2,20580
    97d0:	11000017 	ldw	r4,0(r2)
    97d4:	20c0012e 	bgeu	r4,r3,97dc <_malloc_r+0x474>
    97d8:	10c00015 	stw	r3,0(r2)
    97dc:	00800074 	movhi	r2,1
    97e0:	10941804 	addi	r2,r2,20576
    97e4:	11000017 	ldw	r4,0(r2)
    97e8:	9c000217 	ldw	r16,8(r19)
    97ec:	20c0012e 	bgeu	r4,r3,97f4 <_malloc_r+0x48c>
    97f0:	10c00015 	stw	r3,0(r2)
    97f4:	80c00117 	ldw	r3,4(r16)
    97f8:	00bfff04 	movi	r2,-4
    97fc:	1886703a 	and	r3,r3,r2
    9800:	1c45c83a 	sub	r2,r3,r17
    9804:	1c400236 	bltu	r3,r17,9810 <_malloc_r+0x4a8>
    9808:	00c003c4 	movi	r3,15
    980c:	18800416 	blt	r3,r2,9820 <_malloc_r+0x4b8>
    9810:	9009883a 	mov	r4,r18
    9814:	000eee00 	call	eee0 <__malloc_unlock>
    9818:	0005883a 	mov	r2,zero
    981c:	003f7b06 	br	960c <__alt_mem_onchip_memory+0xf780960c>
    9820:	88c00054 	ori	r3,r17,1
    9824:	80c00115 	stw	r3,4(r16)
    9828:	8463883a 	add	r17,r16,r17
    982c:	10800054 	ori	r2,r2,1
    9830:	9c400215 	stw	r17,8(r19)
    9834:	88800115 	stw	r2,4(r17)
    9838:	9009883a 	mov	r4,r18
    983c:	000eee00 	call	eee0 <__malloc_unlock>
    9840:	80800204 	addi	r2,r16,8
    9844:	003f7106 	br	960c <__alt_mem_onchip_memory+0xf780960c>
    9848:	00c00504 	movi	r3,20
    984c:	18804a2e 	bgeu	r3,r2,9978 <_malloc_r+0x610>
    9850:	00c01504 	movi	r3,84
    9854:	18806e36 	bltu	r3,r2,9a10 <_malloc_r+0x6a8>
    9858:	8804d33a 	srli	r2,r17,12
    985c:	12001bc4 	addi	r8,r2,111
    9860:	11c01b84 	addi	r7,r2,110
    9864:	4209883a 	add	r4,r8,r8
    9868:	003edd06 	br	93e0 <__alt_mem_onchip_memory+0xf78093e0>
    986c:	3804d27a 	srli	r2,r7,9
    9870:	00c00104 	movi	r3,4
    9874:	1880442e 	bgeu	r3,r2,9988 <_malloc_r+0x620>
    9878:	00c00504 	movi	r3,20
    987c:	18808136 	bltu	r3,r2,9a84 <_malloc_r+0x71c>
    9880:	11401704 	addi	r5,r2,92
    9884:	10c016c4 	addi	r3,r2,91
    9888:	294b883a 	add	r5,r5,r5
    988c:	294b883a 	add	r5,r5,r5
    9890:	294b883a 	add	r5,r5,r5
    9894:	994b883a 	add	r5,r19,r5
    9898:	28800017 	ldw	r2,0(r5)
    989c:	01800074 	movhi	r6,1
    98a0:	297ffe04 	addi	r5,r5,-8
    98a4:	3187b404 	addi	r6,r6,7888
    98a8:	28806526 	beq	r5,r2,9a40 <_malloc_r+0x6d8>
    98ac:	01bfff04 	movi	r6,-4
    98b0:	10c00117 	ldw	r3,4(r2)
    98b4:	1986703a 	and	r3,r3,r6
    98b8:	38c0022e 	bgeu	r7,r3,98c4 <_malloc_r+0x55c>
    98bc:	10800217 	ldw	r2,8(r2)
    98c0:	28bffb1e 	bne	r5,r2,98b0 <__alt_mem_onchip_memory+0xf78098b0>
    98c4:	11400317 	ldw	r5,12(r2)
    98c8:	98c00117 	ldw	r3,4(r19)
    98cc:	81400315 	stw	r5,12(r16)
    98d0:	80800215 	stw	r2,8(r16)
    98d4:	2c000215 	stw	r16,8(r5)
    98d8:	14000315 	stw	r16,12(r2)
    98dc:	003ef806 	br	94c0 <__alt_mem_onchip_memory+0xf78094c0>
    98e0:	88c00054 	ori	r3,r17,1
    98e4:	80c00115 	stw	r3,4(r16)
    98e8:	8463883a 	add	r17,r16,r17
    98ec:	34400515 	stw	r17,20(r6)
    98f0:	34400415 	stw	r17,16(r6)
    98f4:	10c00054 	ori	r3,r2,1
    98f8:	8a000315 	stw	r8,12(r17)
    98fc:	8a000215 	stw	r8,8(r17)
    9900:	88c00115 	stw	r3,4(r17)
    9904:	88a3883a 	add	r17,r17,r2
    9908:	88800015 	stw	r2,0(r17)
    990c:	9009883a 	mov	r4,r18
    9910:	000eee00 	call	eee0 <__malloc_unlock>
    9914:	80800204 	addi	r2,r16,8
    9918:	003f3c06 	br	960c <__alt_mem_onchip_memory+0xf780960c>
    991c:	30c00117 	ldw	r3,4(r6)
    9920:	003ee706 	br	94c0 <__alt_mem_onchip_memory+0xf78094c0>
    9924:	5ac00044 	addi	r11,r11,1
    9928:	588000cc 	andi	r2,r11,3
    992c:	31800204 	addi	r6,r6,8
    9930:	103efd1e 	bne	r2,zero,9528 <__alt_mem_onchip_memory+0xf7809528>
    9934:	00002406 	br	99c8 <_malloc_r+0x660>
    9938:	14000317 	ldw	r16,12(r2)
    993c:	143f251e 	bne	r2,r16,95d4 <__alt_mem_onchip_memory+0xf78095d4>
    9940:	21000084 	addi	r4,r4,2
    9944:	003ebc06 	br	9438 <__alt_mem_onchip_memory+0xf7809438>
    9948:	8085883a 	add	r2,r16,r2
    994c:	10c00117 	ldw	r3,4(r2)
    9950:	81000317 	ldw	r4,12(r16)
    9954:	81400217 	ldw	r5,8(r16)
    9958:	18c00054 	ori	r3,r3,1
    995c:	10c00115 	stw	r3,4(r2)
    9960:	29000315 	stw	r4,12(r5)
    9964:	21400215 	stw	r5,8(r4)
    9968:	9009883a 	mov	r4,r18
    996c:	000eee00 	call	eee0 <__malloc_unlock>
    9970:	80800204 	addi	r2,r16,8
    9974:	003f2506 	br	960c <__alt_mem_onchip_memory+0xf780960c>
    9978:	12001704 	addi	r8,r2,92
    997c:	11c016c4 	addi	r7,r2,91
    9980:	4209883a 	add	r4,r8,r8
    9984:	003e9606 	br	93e0 <__alt_mem_onchip_memory+0xf78093e0>
    9988:	3804d1ba 	srli	r2,r7,6
    998c:	11400e44 	addi	r5,r2,57
    9990:	10c00e04 	addi	r3,r2,56
    9994:	294b883a 	add	r5,r5,r5
    9998:	003fbc06 	br	988c <__alt_mem_onchip_memory+0xf780988c>
    999c:	84ff5926 	beq	r16,r19,9704 <__alt_mem_onchip_memory+0xf7809704>
    99a0:	00800074 	movhi	r2,1
    99a4:	1087b404 	addi	r2,r2,7888
    99a8:	14000217 	ldw	r16,8(r2)
    99ac:	00bfff04 	movi	r2,-4
    99b0:	80c00117 	ldw	r3,4(r16)
    99b4:	1886703a 	and	r3,r3,r2
    99b8:	003f9106 	br	9800 <__alt_mem_onchip_memory+0xf7809800>
    99bc:	60800217 	ldw	r2,8(r12)
    99c0:	213fffc4 	addi	r4,r4,-1
    99c4:	1300651e 	bne	r2,r12,9b5c <_malloc_r+0x7f4>
    99c8:	208000cc 	andi	r2,r4,3
    99cc:	633ffe04 	addi	r12,r12,-8
    99d0:	103ffa1e 	bne	r2,zero,99bc <__alt_mem_onchip_memory+0xf78099bc>
    99d4:	98800117 	ldw	r2,4(r19)
    99d8:	0146303a 	nor	r3,zero,r5
    99dc:	1884703a 	and	r2,r3,r2
    99e0:	98800115 	stw	r2,4(r19)
    99e4:	294b883a 	add	r5,r5,r5
    99e8:	117f2836 	bltu	r2,r5,968c <__alt_mem_onchip_memory+0xf780968c>
    99ec:	283f2726 	beq	r5,zero,968c <__alt_mem_onchip_memory+0xf780968c>
    99f0:	2886703a 	and	r3,r5,r2
    99f4:	5809883a 	mov	r4,r11
    99f8:	183ec31e 	bne	r3,zero,9508 <__alt_mem_onchip_memory+0xf7809508>
    99fc:	294b883a 	add	r5,r5,r5
    9a00:	2886703a 	and	r3,r5,r2
    9a04:	21000104 	addi	r4,r4,4
    9a08:	183ffc26 	beq	r3,zero,99fc <__alt_mem_onchip_memory+0xf78099fc>
    9a0c:	003ebe06 	br	9508 <__alt_mem_onchip_memory+0xf7809508>
    9a10:	00c05504 	movi	r3,340
    9a14:	18801236 	bltu	r3,r2,9a60 <_malloc_r+0x6f8>
    9a18:	8804d3fa 	srli	r2,r17,15
    9a1c:	12001e04 	addi	r8,r2,120
    9a20:	11c01dc4 	addi	r7,r2,119
    9a24:	4209883a 	add	r4,r8,r8
    9a28:	003e6d06 	br	93e0 <__alt_mem_onchip_memory+0xf78093e0>
    9a2c:	00c40004 	movi	r3,4096
    9a30:	003f4606 	br	974c <__alt_mem_onchip_memory+0xf780974c>
    9a34:	00800044 	movi	r2,1
    9a38:	a0800115 	stw	r2,4(r20)
    9a3c:	003f7406 	br	9810 <__alt_mem_onchip_memory+0xf7809810>
    9a40:	1805d0ba 	srai	r2,r3,2
    9a44:	01c00044 	movi	r7,1
    9a48:	30c00117 	ldw	r3,4(r6)
    9a4c:	388e983a 	sll	r7,r7,r2
    9a50:	2805883a 	mov	r2,r5
    9a54:	38c6b03a 	or	r3,r7,r3
    9a58:	30c00115 	stw	r3,4(r6)
    9a5c:	003f9b06 	br	98cc <__alt_mem_onchip_memory+0xf78098cc>
    9a60:	00c15504 	movi	r3,1364
    9a64:	18801a36 	bltu	r3,r2,9ad0 <_malloc_r+0x768>
    9a68:	8804d4ba 	srli	r2,r17,18
    9a6c:	12001f44 	addi	r8,r2,125
    9a70:	11c01f04 	addi	r7,r2,124
    9a74:	4209883a 	add	r4,r8,r8
    9a78:	003e5906 	br	93e0 <__alt_mem_onchip_memory+0xf78093e0>
    9a7c:	ad400404 	addi	r21,r21,16
    9a80:	003f1706 	br	96e0 <__alt_mem_onchip_memory+0xf78096e0>
    9a84:	00c01504 	movi	r3,84
    9a88:	18802336 	bltu	r3,r2,9b18 <_malloc_r+0x7b0>
    9a8c:	3804d33a 	srli	r2,r7,12
    9a90:	11401bc4 	addi	r5,r2,111
    9a94:	10c01b84 	addi	r3,r2,110
    9a98:	294b883a 	add	r5,r5,r5
    9a9c:	003f7b06 	br	988c <__alt_mem_onchip_memory+0xf780988c>
    9aa0:	9c000217 	ldw	r16,8(r19)
    9aa4:	00bfff04 	movi	r2,-4
    9aa8:	80c00117 	ldw	r3,4(r16)
    9aac:	1886703a 	and	r3,r3,r2
    9ab0:	003f5306 	br	9800 <__alt_mem_onchip_memory+0xf7809800>
    9ab4:	3083ffcc 	andi	r2,r6,4095
    9ab8:	103f181e 	bne	r2,zero,971c <__alt_mem_onchip_memory+0xf780971c>
    9abc:	99000217 	ldw	r4,8(r19)
    9ac0:	b545883a 	add	r2,r22,r21
    9ac4:	10800054 	ori	r2,r2,1
    9ac8:	20800115 	stw	r2,4(r4)
    9acc:	003f3e06 	br	97c8 <__alt_mem_onchip_memory+0xf78097c8>
    9ad0:	01003f84 	movi	r4,254
    9ad4:	02001fc4 	movi	r8,127
    9ad8:	01c01f84 	movi	r7,126
    9adc:	003e4006 	br	93e0 <__alt_mem_onchip_memory+0xf78093e0>
    9ae0:	00800074 	movhi	r2,1
    9ae4:	108d4004 	addi	r2,r2,13568
    9ae8:	15000015 	stw	r20,0(r2)
    9aec:	003f1106 	br	9734 <__alt_mem_onchip_memory+0xf7809734>
    9af0:	00800044 	movi	r2,1
    9af4:	002b883a 	mov	r21,zero
    9af8:	003f1f06 	br	9778 <__alt_mem_onchip_memory+0xf7809778>
    9afc:	81400204 	addi	r5,r16,8
    9b00:	9009883a 	mov	r4,r18
    9b04:	00087200 	call	8720 <_free_r>
    9b08:	00800074 	movhi	r2,1
    9b0c:	10942604 	addi	r2,r2,20632
    9b10:	10c00017 	ldw	r3,0(r2)
    9b14:	003f2c06 	br	97c8 <__alt_mem_onchip_memory+0xf78097c8>
    9b18:	00c05504 	movi	r3,340
    9b1c:	18800536 	bltu	r3,r2,9b34 <_malloc_r+0x7cc>
    9b20:	3804d3fa 	srli	r2,r7,15
    9b24:	11401e04 	addi	r5,r2,120
    9b28:	10c01dc4 	addi	r3,r2,119
    9b2c:	294b883a 	add	r5,r5,r5
    9b30:	003f5606 	br	988c <__alt_mem_onchip_memory+0xf780988c>
    9b34:	00c15504 	movi	r3,1364
    9b38:	18800536 	bltu	r3,r2,9b50 <_malloc_r+0x7e8>
    9b3c:	3804d4ba 	srli	r2,r7,18
    9b40:	11401f44 	addi	r5,r2,125
    9b44:	10c01f04 	addi	r3,r2,124
    9b48:	294b883a 	add	r5,r5,r5
    9b4c:	003f4f06 	br	988c <__alt_mem_onchip_memory+0xf780988c>
    9b50:	01403f84 	movi	r5,254
    9b54:	00c01f84 	movi	r3,126
    9b58:	003f4c06 	br	988c <__alt_mem_onchip_memory+0xf780988c>
    9b5c:	98800117 	ldw	r2,4(r19)
    9b60:	003fa006 	br	99e4 <__alt_mem_onchip_memory+0xf78099e4>
    9b64:	8808d0fa 	srli	r4,r17,3
    9b68:	20800044 	addi	r2,r4,1
    9b6c:	1085883a 	add	r2,r2,r2
    9b70:	003e9006 	br	95b4 <__alt_mem_onchip_memory+0xf78095b4>

00009b74 <memchr>:
    9b74:	208000cc 	andi	r2,r4,3
    9b78:	280f883a 	mov	r7,r5
    9b7c:	10003426 	beq	r2,zero,9c50 <memchr+0xdc>
    9b80:	30bfffc4 	addi	r2,r6,-1
    9b84:	30001a26 	beq	r6,zero,9bf0 <memchr+0x7c>
    9b88:	20c00003 	ldbu	r3,0(r4)
    9b8c:	29803fcc 	andi	r6,r5,255
    9b90:	30c0051e 	bne	r6,r3,9ba8 <memchr+0x34>
    9b94:	00001806 	br	9bf8 <memchr+0x84>
    9b98:	10001526 	beq	r2,zero,9bf0 <memchr+0x7c>
    9b9c:	20c00003 	ldbu	r3,0(r4)
    9ba0:	10bfffc4 	addi	r2,r2,-1
    9ba4:	30c01426 	beq	r6,r3,9bf8 <memchr+0x84>
    9ba8:	21000044 	addi	r4,r4,1
    9bac:	20c000cc 	andi	r3,r4,3
    9bb0:	183ff91e 	bne	r3,zero,9b98 <__alt_mem_onchip_memory+0xf7809b98>
    9bb4:	020000c4 	movi	r8,3
    9bb8:	40801136 	bltu	r8,r2,9c00 <memchr+0x8c>
    9bbc:	10000c26 	beq	r2,zero,9bf0 <memchr+0x7c>
    9bc0:	20c00003 	ldbu	r3,0(r4)
    9bc4:	29403fcc 	andi	r5,r5,255
    9bc8:	28c00b26 	beq	r5,r3,9bf8 <memchr+0x84>
    9bcc:	20c00044 	addi	r3,r4,1
    9bd0:	39803fcc 	andi	r6,r7,255
    9bd4:	2089883a 	add	r4,r4,r2
    9bd8:	00000306 	br	9be8 <memchr+0x74>
    9bdc:	18c00044 	addi	r3,r3,1
    9be0:	197fffc3 	ldbu	r5,-1(r3)
    9be4:	31400526 	beq	r6,r5,9bfc <memchr+0x88>
    9be8:	1805883a 	mov	r2,r3
    9bec:	20fffb1e 	bne	r4,r3,9bdc <__alt_mem_onchip_memory+0xf7809bdc>
    9bf0:	0005883a 	mov	r2,zero
    9bf4:	f800283a 	ret
    9bf8:	2005883a 	mov	r2,r4
    9bfc:	f800283a 	ret
    9c00:	28c03fcc 	andi	r3,r5,255
    9c04:	1812923a 	slli	r9,r3,8
    9c08:	02ffbff4 	movhi	r11,65279
    9c0c:	02a02074 	movhi	r10,32897
    9c10:	48d2b03a 	or	r9,r9,r3
    9c14:	4806943a 	slli	r3,r9,16
    9c18:	5affbfc4 	addi	r11,r11,-257
    9c1c:	52a02004 	addi	r10,r10,-32640
    9c20:	48d2b03a 	or	r9,r9,r3
    9c24:	20c00017 	ldw	r3,0(r4)
    9c28:	48c6f03a 	xor	r3,r9,r3
    9c2c:	1acd883a 	add	r6,r3,r11
    9c30:	00c6303a 	nor	r3,zero,r3
    9c34:	30c6703a 	and	r3,r6,r3
    9c38:	1a86703a 	and	r3,r3,r10
    9c3c:	183fe01e 	bne	r3,zero,9bc0 <__alt_mem_onchip_memory+0xf7809bc0>
    9c40:	10bfff04 	addi	r2,r2,-4
    9c44:	21000104 	addi	r4,r4,4
    9c48:	40bff636 	bltu	r8,r2,9c24 <__alt_mem_onchip_memory+0xf7809c24>
    9c4c:	003fdb06 	br	9bbc <__alt_mem_onchip_memory+0xf7809bbc>
    9c50:	3005883a 	mov	r2,r6
    9c54:	003fd706 	br	9bb4 <__alt_mem_onchip_memory+0xf7809bb4>

00009c58 <memcpy>:
    9c58:	defffd04 	addi	sp,sp,-12
    9c5c:	dfc00215 	stw	ra,8(sp)
    9c60:	dc400115 	stw	r17,4(sp)
    9c64:	dc000015 	stw	r16,0(sp)
    9c68:	00c003c4 	movi	r3,15
    9c6c:	2005883a 	mov	r2,r4
    9c70:	1980452e 	bgeu	r3,r6,9d88 <memcpy+0x130>
    9c74:	2906b03a 	or	r3,r5,r4
    9c78:	18c000cc 	andi	r3,r3,3
    9c7c:	1800441e 	bne	r3,zero,9d90 <memcpy+0x138>
    9c80:	347ffc04 	addi	r17,r6,-16
    9c84:	8822d13a 	srli	r17,r17,4
    9c88:	28c00104 	addi	r3,r5,4
    9c8c:	23400104 	addi	r13,r4,4
    9c90:	8820913a 	slli	r16,r17,4
    9c94:	2b000204 	addi	r12,r5,8
    9c98:	22c00204 	addi	r11,r4,8
    9c9c:	84000504 	addi	r16,r16,20
    9ca0:	2a800304 	addi	r10,r5,12
    9ca4:	22400304 	addi	r9,r4,12
    9ca8:	2c21883a 	add	r16,r5,r16
    9cac:	2811883a 	mov	r8,r5
    9cb0:	200f883a 	mov	r7,r4
    9cb4:	41000017 	ldw	r4,0(r8)
    9cb8:	1fc00017 	ldw	ra,0(r3)
    9cbc:	63c00017 	ldw	r15,0(r12)
    9cc0:	39000015 	stw	r4,0(r7)
    9cc4:	53800017 	ldw	r14,0(r10)
    9cc8:	6fc00015 	stw	ra,0(r13)
    9ccc:	5bc00015 	stw	r15,0(r11)
    9cd0:	4b800015 	stw	r14,0(r9)
    9cd4:	18c00404 	addi	r3,r3,16
    9cd8:	39c00404 	addi	r7,r7,16
    9cdc:	42000404 	addi	r8,r8,16
    9ce0:	6b400404 	addi	r13,r13,16
    9ce4:	63000404 	addi	r12,r12,16
    9ce8:	5ac00404 	addi	r11,r11,16
    9cec:	52800404 	addi	r10,r10,16
    9cf0:	4a400404 	addi	r9,r9,16
    9cf4:	1c3fef1e 	bne	r3,r16,9cb4 <__alt_mem_onchip_memory+0xf7809cb4>
    9cf8:	89c00044 	addi	r7,r17,1
    9cfc:	380e913a 	slli	r7,r7,4
    9d00:	310003cc 	andi	r4,r6,15
    9d04:	02c000c4 	movi	r11,3
    9d08:	11c7883a 	add	r3,r2,r7
    9d0c:	29cb883a 	add	r5,r5,r7
    9d10:	5900212e 	bgeu	r11,r4,9d98 <memcpy+0x140>
    9d14:	1813883a 	mov	r9,r3
    9d18:	2811883a 	mov	r8,r5
    9d1c:	200f883a 	mov	r7,r4
    9d20:	42800017 	ldw	r10,0(r8)
    9d24:	4a400104 	addi	r9,r9,4
    9d28:	39ffff04 	addi	r7,r7,-4
    9d2c:	4abfff15 	stw	r10,-4(r9)
    9d30:	42000104 	addi	r8,r8,4
    9d34:	59fffa36 	bltu	r11,r7,9d20 <__alt_mem_onchip_memory+0xf7809d20>
    9d38:	213fff04 	addi	r4,r4,-4
    9d3c:	2008d0ba 	srli	r4,r4,2
    9d40:	318000cc 	andi	r6,r6,3
    9d44:	21000044 	addi	r4,r4,1
    9d48:	2109883a 	add	r4,r4,r4
    9d4c:	2109883a 	add	r4,r4,r4
    9d50:	1907883a 	add	r3,r3,r4
    9d54:	290b883a 	add	r5,r5,r4
    9d58:	30000626 	beq	r6,zero,9d74 <memcpy+0x11c>
    9d5c:	198d883a 	add	r6,r3,r6
    9d60:	29c00003 	ldbu	r7,0(r5)
    9d64:	18c00044 	addi	r3,r3,1
    9d68:	29400044 	addi	r5,r5,1
    9d6c:	19ffffc5 	stb	r7,-1(r3)
    9d70:	19bffb1e 	bne	r3,r6,9d60 <__alt_mem_onchip_memory+0xf7809d60>
    9d74:	dfc00217 	ldw	ra,8(sp)
    9d78:	dc400117 	ldw	r17,4(sp)
    9d7c:	dc000017 	ldw	r16,0(sp)
    9d80:	dec00304 	addi	sp,sp,12
    9d84:	f800283a 	ret
    9d88:	2007883a 	mov	r3,r4
    9d8c:	003ff206 	br	9d58 <__alt_mem_onchip_memory+0xf7809d58>
    9d90:	2007883a 	mov	r3,r4
    9d94:	003ff106 	br	9d5c <__alt_mem_onchip_memory+0xf7809d5c>
    9d98:	200d883a 	mov	r6,r4
    9d9c:	003fee06 	br	9d58 <__alt_mem_onchip_memory+0xf7809d58>

00009da0 <memmove>:
    9da0:	2005883a 	mov	r2,r4
    9da4:	29000b2e 	bgeu	r5,r4,9dd4 <memmove+0x34>
    9da8:	298f883a 	add	r7,r5,r6
    9dac:	21c0092e 	bgeu	r4,r7,9dd4 <memmove+0x34>
    9db0:	2187883a 	add	r3,r4,r6
    9db4:	198bc83a 	sub	r5,r3,r6
    9db8:	30004826 	beq	r6,zero,9edc <memmove+0x13c>
    9dbc:	39ffffc4 	addi	r7,r7,-1
    9dc0:	39000003 	ldbu	r4,0(r7)
    9dc4:	18ffffc4 	addi	r3,r3,-1
    9dc8:	19000005 	stb	r4,0(r3)
    9dcc:	28fffb1e 	bne	r5,r3,9dbc <__alt_mem_onchip_memory+0xf7809dbc>
    9dd0:	f800283a 	ret
    9dd4:	00c003c4 	movi	r3,15
    9dd8:	1980412e 	bgeu	r3,r6,9ee0 <memmove+0x140>
    9ddc:	2886b03a 	or	r3,r5,r2
    9de0:	18c000cc 	andi	r3,r3,3
    9de4:	1800401e 	bne	r3,zero,9ee8 <memmove+0x148>
    9de8:	33fffc04 	addi	r15,r6,-16
    9dec:	781ed13a 	srli	r15,r15,4
    9df0:	28c00104 	addi	r3,r5,4
    9df4:	13400104 	addi	r13,r2,4
    9df8:	781c913a 	slli	r14,r15,4
    9dfc:	2b000204 	addi	r12,r5,8
    9e00:	12c00204 	addi	r11,r2,8
    9e04:	73800504 	addi	r14,r14,20
    9e08:	2a800304 	addi	r10,r5,12
    9e0c:	12400304 	addi	r9,r2,12
    9e10:	2b9d883a 	add	r14,r5,r14
    9e14:	2811883a 	mov	r8,r5
    9e18:	100f883a 	mov	r7,r2
    9e1c:	41000017 	ldw	r4,0(r8)
    9e20:	39c00404 	addi	r7,r7,16
    9e24:	18c00404 	addi	r3,r3,16
    9e28:	393ffc15 	stw	r4,-16(r7)
    9e2c:	193ffc17 	ldw	r4,-16(r3)
    9e30:	6b400404 	addi	r13,r13,16
    9e34:	5ac00404 	addi	r11,r11,16
    9e38:	693ffc15 	stw	r4,-16(r13)
    9e3c:	61000017 	ldw	r4,0(r12)
    9e40:	4a400404 	addi	r9,r9,16
    9e44:	42000404 	addi	r8,r8,16
    9e48:	593ffc15 	stw	r4,-16(r11)
    9e4c:	51000017 	ldw	r4,0(r10)
    9e50:	63000404 	addi	r12,r12,16
    9e54:	52800404 	addi	r10,r10,16
    9e58:	493ffc15 	stw	r4,-16(r9)
    9e5c:	1bbfef1e 	bne	r3,r14,9e1c <__alt_mem_onchip_memory+0xf7809e1c>
    9e60:	79000044 	addi	r4,r15,1
    9e64:	2008913a 	slli	r4,r4,4
    9e68:	328003cc 	andi	r10,r6,15
    9e6c:	02c000c4 	movi	r11,3
    9e70:	1107883a 	add	r3,r2,r4
    9e74:	290b883a 	add	r5,r5,r4
    9e78:	5a801e2e 	bgeu	r11,r10,9ef4 <memmove+0x154>
    9e7c:	1813883a 	mov	r9,r3
    9e80:	2811883a 	mov	r8,r5
    9e84:	500f883a 	mov	r7,r10
    9e88:	41000017 	ldw	r4,0(r8)
    9e8c:	4a400104 	addi	r9,r9,4
    9e90:	39ffff04 	addi	r7,r7,-4
    9e94:	493fff15 	stw	r4,-4(r9)
    9e98:	42000104 	addi	r8,r8,4
    9e9c:	59fffa36 	bltu	r11,r7,9e88 <__alt_mem_onchip_memory+0xf7809e88>
    9ea0:	513fff04 	addi	r4,r10,-4
    9ea4:	2008d0ba 	srli	r4,r4,2
    9ea8:	318000cc 	andi	r6,r6,3
    9eac:	21000044 	addi	r4,r4,1
    9eb0:	2109883a 	add	r4,r4,r4
    9eb4:	2109883a 	add	r4,r4,r4
    9eb8:	1907883a 	add	r3,r3,r4
    9ebc:	290b883a 	add	r5,r5,r4
    9ec0:	30000b26 	beq	r6,zero,9ef0 <memmove+0x150>
    9ec4:	198d883a 	add	r6,r3,r6
    9ec8:	29c00003 	ldbu	r7,0(r5)
    9ecc:	18c00044 	addi	r3,r3,1
    9ed0:	29400044 	addi	r5,r5,1
    9ed4:	19ffffc5 	stb	r7,-1(r3)
    9ed8:	19bffb1e 	bne	r3,r6,9ec8 <__alt_mem_onchip_memory+0xf7809ec8>
    9edc:	f800283a 	ret
    9ee0:	1007883a 	mov	r3,r2
    9ee4:	003ff606 	br	9ec0 <__alt_mem_onchip_memory+0xf7809ec0>
    9ee8:	1007883a 	mov	r3,r2
    9eec:	003ff506 	br	9ec4 <__alt_mem_onchip_memory+0xf7809ec4>
    9ef0:	f800283a 	ret
    9ef4:	500d883a 	mov	r6,r10
    9ef8:	003ff106 	br	9ec0 <__alt_mem_onchip_memory+0xf7809ec0>

00009efc <memset>:
    9efc:	20c000cc 	andi	r3,r4,3
    9f00:	2005883a 	mov	r2,r4
    9f04:	18004426 	beq	r3,zero,a018 <memset+0x11c>
    9f08:	31ffffc4 	addi	r7,r6,-1
    9f0c:	30004026 	beq	r6,zero,a010 <memset+0x114>
    9f10:	2813883a 	mov	r9,r5
    9f14:	200d883a 	mov	r6,r4
    9f18:	2007883a 	mov	r3,r4
    9f1c:	00000406 	br	9f30 <memset+0x34>
    9f20:	3a3fffc4 	addi	r8,r7,-1
    9f24:	31800044 	addi	r6,r6,1
    9f28:	38003926 	beq	r7,zero,a010 <memset+0x114>
    9f2c:	400f883a 	mov	r7,r8
    9f30:	18c00044 	addi	r3,r3,1
    9f34:	32400005 	stb	r9,0(r6)
    9f38:	1a0000cc 	andi	r8,r3,3
    9f3c:	403ff81e 	bne	r8,zero,9f20 <__alt_mem_onchip_memory+0xf7809f20>
    9f40:	010000c4 	movi	r4,3
    9f44:	21c02d2e 	bgeu	r4,r7,9ffc <memset+0x100>
    9f48:	29003fcc 	andi	r4,r5,255
    9f4c:	200c923a 	slli	r6,r4,8
    9f50:	3108b03a 	or	r4,r6,r4
    9f54:	200c943a 	slli	r6,r4,16
    9f58:	218cb03a 	or	r6,r4,r6
    9f5c:	010003c4 	movi	r4,15
    9f60:	21c0182e 	bgeu	r4,r7,9fc4 <memset+0xc8>
    9f64:	3b3ffc04 	addi	r12,r7,-16
    9f68:	6018d13a 	srli	r12,r12,4
    9f6c:	1a000104 	addi	r8,r3,4
    9f70:	1ac00204 	addi	r11,r3,8
    9f74:	6008913a 	slli	r4,r12,4
    9f78:	1a800304 	addi	r10,r3,12
    9f7c:	1813883a 	mov	r9,r3
    9f80:	21000504 	addi	r4,r4,20
    9f84:	1909883a 	add	r4,r3,r4
    9f88:	49800015 	stw	r6,0(r9)
    9f8c:	41800015 	stw	r6,0(r8)
    9f90:	59800015 	stw	r6,0(r11)
    9f94:	51800015 	stw	r6,0(r10)
    9f98:	42000404 	addi	r8,r8,16
    9f9c:	4a400404 	addi	r9,r9,16
    9fa0:	5ac00404 	addi	r11,r11,16
    9fa4:	52800404 	addi	r10,r10,16
    9fa8:	413ff71e 	bne	r8,r4,9f88 <__alt_mem_onchip_memory+0xf7809f88>
    9fac:	63000044 	addi	r12,r12,1
    9fb0:	6018913a 	slli	r12,r12,4
    9fb4:	39c003cc 	andi	r7,r7,15
    9fb8:	010000c4 	movi	r4,3
    9fbc:	1b07883a 	add	r3,r3,r12
    9fc0:	21c00e2e 	bgeu	r4,r7,9ffc <memset+0x100>
    9fc4:	1813883a 	mov	r9,r3
    9fc8:	3811883a 	mov	r8,r7
    9fcc:	010000c4 	movi	r4,3
    9fd0:	49800015 	stw	r6,0(r9)
    9fd4:	423fff04 	addi	r8,r8,-4
    9fd8:	4a400104 	addi	r9,r9,4
    9fdc:	223ffc36 	bltu	r4,r8,9fd0 <__alt_mem_onchip_memory+0xf7809fd0>
    9fe0:	393fff04 	addi	r4,r7,-4
    9fe4:	2008d0ba 	srli	r4,r4,2
    9fe8:	39c000cc 	andi	r7,r7,3
    9fec:	21000044 	addi	r4,r4,1
    9ff0:	2109883a 	add	r4,r4,r4
    9ff4:	2109883a 	add	r4,r4,r4
    9ff8:	1907883a 	add	r3,r3,r4
    9ffc:	38000526 	beq	r7,zero,a014 <memset+0x118>
    a000:	19cf883a 	add	r7,r3,r7
    a004:	19400005 	stb	r5,0(r3)
    a008:	18c00044 	addi	r3,r3,1
    a00c:	38fffd1e 	bne	r7,r3,a004 <__alt_mem_onchip_memory+0xf780a004>
    a010:	f800283a 	ret
    a014:	f800283a 	ret
    a018:	2007883a 	mov	r3,r4
    a01c:	300f883a 	mov	r7,r6
    a020:	003fc706 	br	9f40 <__alt_mem_onchip_memory+0xf7809f40>

0000a024 <_Balloc>:
    a024:	20801317 	ldw	r2,76(r4)
    a028:	defffc04 	addi	sp,sp,-16
    a02c:	dc400115 	stw	r17,4(sp)
    a030:	dc000015 	stw	r16,0(sp)
    a034:	dfc00315 	stw	ra,12(sp)
    a038:	dc800215 	stw	r18,8(sp)
    a03c:	2023883a 	mov	r17,r4
    a040:	2821883a 	mov	r16,r5
    a044:	10000f26 	beq	r2,zero,a084 <_Balloc+0x60>
    a048:	8407883a 	add	r3,r16,r16
    a04c:	18c7883a 	add	r3,r3,r3
    a050:	10c7883a 	add	r3,r2,r3
    a054:	18800017 	ldw	r2,0(r3)
    a058:	10001126 	beq	r2,zero,a0a0 <_Balloc+0x7c>
    a05c:	11000017 	ldw	r4,0(r2)
    a060:	19000015 	stw	r4,0(r3)
    a064:	10000415 	stw	zero,16(r2)
    a068:	10000315 	stw	zero,12(r2)
    a06c:	dfc00317 	ldw	ra,12(sp)
    a070:	dc800217 	ldw	r18,8(sp)
    a074:	dc400117 	ldw	r17,4(sp)
    a078:	dc000017 	ldw	r16,0(sp)
    a07c:	dec00404 	addi	sp,sp,16
    a080:	f800283a 	ret
    a084:	01800844 	movi	r6,33
    a088:	01400104 	movi	r5,4
    a08c:	000d1ac0 	call	d1ac <_calloc_r>
    a090:	88801315 	stw	r2,76(r17)
    a094:	103fec1e 	bne	r2,zero,a048 <__alt_mem_onchip_memory+0xf780a048>
    a098:	0005883a 	mov	r2,zero
    a09c:	003ff306 	br	a06c <__alt_mem_onchip_memory+0xf780a06c>
    a0a0:	01400044 	movi	r5,1
    a0a4:	2c24983a 	sll	r18,r5,r16
    a0a8:	8809883a 	mov	r4,r17
    a0ac:	91800144 	addi	r6,r18,5
    a0b0:	318d883a 	add	r6,r6,r6
    a0b4:	318d883a 	add	r6,r6,r6
    a0b8:	000d1ac0 	call	d1ac <_calloc_r>
    a0bc:	103ff626 	beq	r2,zero,a098 <__alt_mem_onchip_memory+0xf780a098>
    a0c0:	14000115 	stw	r16,4(r2)
    a0c4:	14800215 	stw	r18,8(r2)
    a0c8:	003fe606 	br	a064 <__alt_mem_onchip_memory+0xf780a064>

0000a0cc <_Bfree>:
    a0cc:	28000826 	beq	r5,zero,a0f0 <_Bfree+0x24>
    a0d0:	28c00117 	ldw	r3,4(r5)
    a0d4:	20801317 	ldw	r2,76(r4)
    a0d8:	18c7883a 	add	r3,r3,r3
    a0dc:	18c7883a 	add	r3,r3,r3
    a0e0:	10c5883a 	add	r2,r2,r3
    a0e4:	10c00017 	ldw	r3,0(r2)
    a0e8:	28c00015 	stw	r3,0(r5)
    a0ec:	11400015 	stw	r5,0(r2)
    a0f0:	f800283a 	ret

0000a0f4 <__multadd>:
    a0f4:	defffa04 	addi	sp,sp,-24
    a0f8:	dc800315 	stw	r18,12(sp)
    a0fc:	dc400215 	stw	r17,8(sp)
    a100:	dc000115 	stw	r16,4(sp)
    a104:	2823883a 	mov	r17,r5
    a108:	2c000417 	ldw	r16,16(r5)
    a10c:	dfc00515 	stw	ra,20(sp)
    a110:	dcc00415 	stw	r19,16(sp)
    a114:	2025883a 	mov	r18,r4
    a118:	29400504 	addi	r5,r5,20
    a11c:	0011883a 	mov	r8,zero
    a120:	28c00017 	ldw	r3,0(r5)
    a124:	29400104 	addi	r5,r5,4
    a128:	42000044 	addi	r8,r8,1
    a12c:	18bfffcc 	andi	r2,r3,65535
    a130:	1185383a 	mul	r2,r2,r6
    a134:	1806d43a 	srli	r3,r3,16
    a138:	11cf883a 	add	r7,r2,r7
    a13c:	3808d43a 	srli	r4,r7,16
    a140:	1987383a 	mul	r3,r3,r6
    a144:	38bfffcc 	andi	r2,r7,65535
    a148:	1907883a 	add	r3,r3,r4
    a14c:	1808943a 	slli	r4,r3,16
    a150:	180ed43a 	srli	r7,r3,16
    a154:	2085883a 	add	r2,r4,r2
    a158:	28bfff15 	stw	r2,-4(r5)
    a15c:	443ff016 	blt	r8,r16,a120 <__alt_mem_onchip_memory+0xf780a120>
    a160:	38000926 	beq	r7,zero,a188 <__multadd+0x94>
    a164:	88800217 	ldw	r2,8(r17)
    a168:	80800f0e 	bge	r16,r2,a1a8 <__multadd+0xb4>
    a16c:	80800144 	addi	r2,r16,5
    a170:	1085883a 	add	r2,r2,r2
    a174:	1085883a 	add	r2,r2,r2
    a178:	8885883a 	add	r2,r17,r2
    a17c:	11c00015 	stw	r7,0(r2)
    a180:	84000044 	addi	r16,r16,1
    a184:	8c000415 	stw	r16,16(r17)
    a188:	8805883a 	mov	r2,r17
    a18c:	dfc00517 	ldw	ra,20(sp)
    a190:	dcc00417 	ldw	r19,16(sp)
    a194:	dc800317 	ldw	r18,12(sp)
    a198:	dc400217 	ldw	r17,8(sp)
    a19c:	dc000117 	ldw	r16,4(sp)
    a1a0:	dec00604 	addi	sp,sp,24
    a1a4:	f800283a 	ret
    a1a8:	89400117 	ldw	r5,4(r17)
    a1ac:	9009883a 	mov	r4,r18
    a1b0:	d9c00015 	stw	r7,0(sp)
    a1b4:	29400044 	addi	r5,r5,1
    a1b8:	000a0240 	call	a024 <_Balloc>
    a1bc:	89800417 	ldw	r6,16(r17)
    a1c0:	89400304 	addi	r5,r17,12
    a1c4:	11000304 	addi	r4,r2,12
    a1c8:	31800084 	addi	r6,r6,2
    a1cc:	318d883a 	add	r6,r6,r6
    a1d0:	318d883a 	add	r6,r6,r6
    a1d4:	1027883a 	mov	r19,r2
    a1d8:	0009c580 	call	9c58 <memcpy>
    a1dc:	d9c00017 	ldw	r7,0(sp)
    a1e0:	88000a26 	beq	r17,zero,a20c <__multadd+0x118>
    a1e4:	88c00117 	ldw	r3,4(r17)
    a1e8:	90801317 	ldw	r2,76(r18)
    a1ec:	18c7883a 	add	r3,r3,r3
    a1f0:	18c7883a 	add	r3,r3,r3
    a1f4:	10c5883a 	add	r2,r2,r3
    a1f8:	10c00017 	ldw	r3,0(r2)
    a1fc:	88c00015 	stw	r3,0(r17)
    a200:	14400015 	stw	r17,0(r2)
    a204:	9823883a 	mov	r17,r19
    a208:	003fd806 	br	a16c <__alt_mem_onchip_memory+0xf780a16c>
    a20c:	9823883a 	mov	r17,r19
    a210:	003fd606 	br	a16c <__alt_mem_onchip_memory+0xf780a16c>

0000a214 <__s2b>:
    a214:	defff904 	addi	sp,sp,-28
    a218:	dc400115 	stw	r17,4(sp)
    a21c:	dc000015 	stw	r16,0(sp)
    a220:	2023883a 	mov	r17,r4
    a224:	2821883a 	mov	r16,r5
    a228:	39000204 	addi	r4,r7,8
    a22c:	01400244 	movi	r5,9
    a230:	dcc00315 	stw	r19,12(sp)
    a234:	dc800215 	stw	r18,8(sp)
    a238:	dfc00615 	stw	ra,24(sp)
    a23c:	dd400515 	stw	r21,20(sp)
    a240:	dd000415 	stw	r20,16(sp)
    a244:	3825883a 	mov	r18,r7
    a248:	3027883a 	mov	r19,r6
    a24c:	0003e200 	call	3e20 <__divsi3>
    a250:	00c00044 	movi	r3,1
    a254:	000b883a 	mov	r5,zero
    a258:	1880030e 	bge	r3,r2,a268 <__s2b+0x54>
    a25c:	18c7883a 	add	r3,r3,r3
    a260:	29400044 	addi	r5,r5,1
    a264:	18bffd16 	blt	r3,r2,a25c <__alt_mem_onchip_memory+0xf780a25c>
    a268:	8809883a 	mov	r4,r17
    a26c:	000a0240 	call	a024 <_Balloc>
    a270:	d8c00717 	ldw	r3,28(sp)
    a274:	10c00515 	stw	r3,20(r2)
    a278:	00c00044 	movi	r3,1
    a27c:	10c00415 	stw	r3,16(r2)
    a280:	00c00244 	movi	r3,9
    a284:	1cc0210e 	bge	r3,r19,a30c <__s2b+0xf8>
    a288:	80eb883a 	add	r21,r16,r3
    a28c:	a829883a 	mov	r20,r21
    a290:	84e1883a 	add	r16,r16,r19
    a294:	a1c00007 	ldb	r7,0(r20)
    a298:	01800284 	movi	r6,10
    a29c:	a5000044 	addi	r20,r20,1
    a2a0:	100b883a 	mov	r5,r2
    a2a4:	39fff404 	addi	r7,r7,-48
    a2a8:	8809883a 	mov	r4,r17
    a2ac:	000a0f40 	call	a0f4 <__multadd>
    a2b0:	a43ff81e 	bne	r20,r16,a294 <__alt_mem_onchip_memory+0xf780a294>
    a2b4:	ace1883a 	add	r16,r21,r19
    a2b8:	843ffe04 	addi	r16,r16,-8
    a2bc:	9c800a0e 	bge	r19,r18,a2e8 <__s2b+0xd4>
    a2c0:	94e5c83a 	sub	r18,r18,r19
    a2c4:	84a5883a 	add	r18,r16,r18
    a2c8:	81c00007 	ldb	r7,0(r16)
    a2cc:	01800284 	movi	r6,10
    a2d0:	84000044 	addi	r16,r16,1
    a2d4:	100b883a 	mov	r5,r2
    a2d8:	39fff404 	addi	r7,r7,-48
    a2dc:	8809883a 	mov	r4,r17
    a2e0:	000a0f40 	call	a0f4 <__multadd>
    a2e4:	84bff81e 	bne	r16,r18,a2c8 <__alt_mem_onchip_memory+0xf780a2c8>
    a2e8:	dfc00617 	ldw	ra,24(sp)
    a2ec:	dd400517 	ldw	r21,20(sp)
    a2f0:	dd000417 	ldw	r20,16(sp)
    a2f4:	dcc00317 	ldw	r19,12(sp)
    a2f8:	dc800217 	ldw	r18,8(sp)
    a2fc:	dc400117 	ldw	r17,4(sp)
    a300:	dc000017 	ldw	r16,0(sp)
    a304:	dec00704 	addi	sp,sp,28
    a308:	f800283a 	ret
    a30c:	84000284 	addi	r16,r16,10
    a310:	1827883a 	mov	r19,r3
    a314:	003fe906 	br	a2bc <__alt_mem_onchip_memory+0xf780a2bc>

0000a318 <__hi0bits>:
    a318:	20bfffec 	andhi	r2,r4,65535
    a31c:	1000141e 	bne	r2,zero,a370 <__hi0bits+0x58>
    a320:	2008943a 	slli	r4,r4,16
    a324:	00800404 	movi	r2,16
    a328:	20ffc02c 	andhi	r3,r4,65280
    a32c:	1800021e 	bne	r3,zero,a338 <__hi0bits+0x20>
    a330:	2008923a 	slli	r4,r4,8
    a334:	10800204 	addi	r2,r2,8
    a338:	20fc002c 	andhi	r3,r4,61440
    a33c:	1800021e 	bne	r3,zero,a348 <__hi0bits+0x30>
    a340:	2008913a 	slli	r4,r4,4
    a344:	10800104 	addi	r2,r2,4
    a348:	20f0002c 	andhi	r3,r4,49152
    a34c:	1800031e 	bne	r3,zero,a35c <__hi0bits+0x44>
    a350:	2109883a 	add	r4,r4,r4
    a354:	10800084 	addi	r2,r2,2
    a358:	2109883a 	add	r4,r4,r4
    a35c:	20000316 	blt	r4,zero,a36c <__hi0bits+0x54>
    a360:	2110002c 	andhi	r4,r4,16384
    a364:	2000041e 	bne	r4,zero,a378 <__hi0bits+0x60>
    a368:	00800804 	movi	r2,32
    a36c:	f800283a 	ret
    a370:	0005883a 	mov	r2,zero
    a374:	003fec06 	br	a328 <__alt_mem_onchip_memory+0xf780a328>
    a378:	10800044 	addi	r2,r2,1
    a37c:	f800283a 	ret

0000a380 <__lo0bits>:
    a380:	20c00017 	ldw	r3,0(r4)
    a384:	188001cc 	andi	r2,r3,7
    a388:	10000826 	beq	r2,zero,a3ac <__lo0bits+0x2c>
    a38c:	1880004c 	andi	r2,r3,1
    a390:	1000211e 	bne	r2,zero,a418 <__lo0bits+0x98>
    a394:	1880008c 	andi	r2,r3,2
    a398:	1000211e 	bne	r2,zero,a420 <__lo0bits+0xa0>
    a39c:	1806d0ba 	srli	r3,r3,2
    a3a0:	00800084 	movi	r2,2
    a3a4:	20c00015 	stw	r3,0(r4)
    a3a8:	f800283a 	ret
    a3ac:	18bfffcc 	andi	r2,r3,65535
    a3b0:	10001326 	beq	r2,zero,a400 <__lo0bits+0x80>
    a3b4:	0005883a 	mov	r2,zero
    a3b8:	19403fcc 	andi	r5,r3,255
    a3bc:	2800021e 	bne	r5,zero,a3c8 <__lo0bits+0x48>
    a3c0:	1806d23a 	srli	r3,r3,8
    a3c4:	10800204 	addi	r2,r2,8
    a3c8:	194003cc 	andi	r5,r3,15
    a3cc:	2800021e 	bne	r5,zero,a3d8 <__lo0bits+0x58>
    a3d0:	1806d13a 	srli	r3,r3,4
    a3d4:	10800104 	addi	r2,r2,4
    a3d8:	194000cc 	andi	r5,r3,3
    a3dc:	2800021e 	bne	r5,zero,a3e8 <__lo0bits+0x68>
    a3e0:	1806d0ba 	srli	r3,r3,2
    a3e4:	10800084 	addi	r2,r2,2
    a3e8:	1940004c 	andi	r5,r3,1
    a3ec:	2800081e 	bne	r5,zero,a410 <__lo0bits+0x90>
    a3f0:	1806d07a 	srli	r3,r3,1
    a3f4:	1800051e 	bne	r3,zero,a40c <__lo0bits+0x8c>
    a3f8:	00800804 	movi	r2,32
    a3fc:	f800283a 	ret
    a400:	1806d43a 	srli	r3,r3,16
    a404:	00800404 	movi	r2,16
    a408:	003feb06 	br	a3b8 <__alt_mem_onchip_memory+0xf780a3b8>
    a40c:	10800044 	addi	r2,r2,1
    a410:	20c00015 	stw	r3,0(r4)
    a414:	f800283a 	ret
    a418:	0005883a 	mov	r2,zero
    a41c:	f800283a 	ret
    a420:	1806d07a 	srli	r3,r3,1
    a424:	00800044 	movi	r2,1
    a428:	20c00015 	stw	r3,0(r4)
    a42c:	f800283a 	ret

0000a430 <__i2b>:
    a430:	defffd04 	addi	sp,sp,-12
    a434:	dc000015 	stw	r16,0(sp)
    a438:	04000044 	movi	r16,1
    a43c:	dc400115 	stw	r17,4(sp)
    a440:	2823883a 	mov	r17,r5
    a444:	800b883a 	mov	r5,r16
    a448:	dfc00215 	stw	ra,8(sp)
    a44c:	000a0240 	call	a024 <_Balloc>
    a450:	14400515 	stw	r17,20(r2)
    a454:	14000415 	stw	r16,16(r2)
    a458:	dfc00217 	ldw	ra,8(sp)
    a45c:	dc400117 	ldw	r17,4(sp)
    a460:	dc000017 	ldw	r16,0(sp)
    a464:	dec00304 	addi	sp,sp,12
    a468:	f800283a 	ret

0000a46c <__multiply>:
    a46c:	defffa04 	addi	sp,sp,-24
    a470:	dcc00315 	stw	r19,12(sp)
    a474:	dc800215 	stw	r18,8(sp)
    a478:	34c00417 	ldw	r19,16(r6)
    a47c:	2c800417 	ldw	r18,16(r5)
    a480:	dd000415 	stw	r20,16(sp)
    a484:	dc400115 	stw	r17,4(sp)
    a488:	dfc00515 	stw	ra,20(sp)
    a48c:	dc000015 	stw	r16,0(sp)
    a490:	2829883a 	mov	r20,r5
    a494:	3023883a 	mov	r17,r6
    a498:	94c0050e 	bge	r18,r19,a4b0 <__multiply+0x44>
    a49c:	9007883a 	mov	r3,r18
    a4a0:	3029883a 	mov	r20,r6
    a4a4:	9825883a 	mov	r18,r19
    a4a8:	2823883a 	mov	r17,r5
    a4ac:	1827883a 	mov	r19,r3
    a4b0:	a0800217 	ldw	r2,8(r20)
    a4b4:	94e1883a 	add	r16,r18,r19
    a4b8:	a1400117 	ldw	r5,4(r20)
    a4bc:	1400010e 	bge	r2,r16,a4c4 <__multiply+0x58>
    a4c0:	29400044 	addi	r5,r5,1
    a4c4:	000a0240 	call	a024 <_Balloc>
    a4c8:	8415883a 	add	r10,r16,r16
    a4cc:	12c00504 	addi	r11,r2,20
    a4d0:	5295883a 	add	r10,r10,r10
    a4d4:	5a95883a 	add	r10,r11,r10
    a4d8:	5807883a 	mov	r3,r11
    a4dc:	5a80032e 	bgeu	r11,r10,a4ec <__multiply+0x80>
    a4e0:	18000015 	stw	zero,0(r3)
    a4e4:	18c00104 	addi	r3,r3,4
    a4e8:	1abffd36 	bltu	r3,r10,a4e0 <__alt_mem_onchip_memory+0xf780a4e0>
    a4ec:	9ce7883a 	add	r19,r19,r19
    a4f0:	94a5883a 	add	r18,r18,r18
    a4f4:	89800504 	addi	r6,r17,20
    a4f8:	9ce7883a 	add	r19,r19,r19
    a4fc:	a3400504 	addi	r13,r20,20
    a500:	94a5883a 	add	r18,r18,r18
    a504:	34d9883a 	add	r12,r6,r19
    a508:	6c93883a 	add	r9,r13,r18
    a50c:	3300422e 	bgeu	r6,r12,a618 <__multiply+0x1ac>
    a510:	37c00017 	ldw	ra,0(r6)
    a514:	fbffffcc 	andi	r15,ra,65535
    a518:	78001b26 	beq	r15,zero,a588 <__multiply+0x11c>
    a51c:	5811883a 	mov	r8,r11
    a520:	681d883a 	mov	r14,r13
    a524:	000f883a 	mov	r7,zero
    a528:	71000017 	ldw	r4,0(r14)
    a52c:	40c00017 	ldw	r3,0(r8)
    a530:	73800104 	addi	r14,r14,4
    a534:	217fffcc 	andi	r5,r4,65535
    a538:	2bcb383a 	mul	r5,r5,r15
    a53c:	2008d43a 	srli	r4,r4,16
    a540:	1c7fffcc 	andi	r17,r3,65535
    a544:	2c4b883a 	add	r5,r5,r17
    a548:	29cb883a 	add	r5,r5,r7
    a54c:	23c9383a 	mul	r4,r4,r15
    a550:	1806d43a 	srli	r3,r3,16
    a554:	280ed43a 	srli	r7,r5,16
    a558:	297fffcc 	andi	r5,r5,65535
    a55c:	20c7883a 	add	r3,r4,r3
    a560:	19c7883a 	add	r3,r3,r7
    a564:	1808943a 	slli	r4,r3,16
    a568:	4023883a 	mov	r17,r8
    a56c:	180ed43a 	srli	r7,r3,16
    a570:	214ab03a 	or	r5,r4,r5
    a574:	41400015 	stw	r5,0(r8)
    a578:	42000104 	addi	r8,r8,4
    a57c:	727fea36 	bltu	r14,r9,a528 <__alt_mem_onchip_memory+0xf780a528>
    a580:	89c00115 	stw	r7,4(r17)
    a584:	37c00017 	ldw	ra,0(r6)
    a588:	f83ed43a 	srli	ra,ra,16
    a58c:	f8001f26 	beq	ra,zero,a60c <__multiply+0x1a0>
    a590:	58c00017 	ldw	r3,0(r11)
    a594:	681d883a 	mov	r14,r13
    a598:	581f883a 	mov	r15,r11
    a59c:	1811883a 	mov	r8,r3
    a5a0:	5825883a 	mov	r18,r11
    a5a4:	000f883a 	mov	r7,zero
    a5a8:	00000106 	br	a5b0 <__multiply+0x144>
    a5ac:	8825883a 	mov	r18,r17
    a5b0:	7140000b 	ldhu	r5,0(r14)
    a5b4:	4010d43a 	srli	r8,r8,16
    a5b8:	193fffcc 	andi	r4,r3,65535
    a5bc:	2fcb383a 	mul	r5,r5,ra
    a5c0:	7bc00104 	addi	r15,r15,4
    a5c4:	73800104 	addi	r14,r14,4
    a5c8:	2a0b883a 	add	r5,r5,r8
    a5cc:	29cb883a 	add	r5,r5,r7
    a5d0:	2806943a 	slli	r3,r5,16
    a5d4:	94400104 	addi	r17,r18,4
    a5d8:	280ad43a 	srli	r5,r5,16
    a5dc:	1908b03a 	or	r4,r3,r4
    a5e0:	793fff15 	stw	r4,-4(r15)
    a5e4:	70ffff17 	ldw	r3,-4(r14)
    a5e8:	8a000017 	ldw	r8,0(r17)
    a5ec:	1806d43a 	srli	r3,r3,16
    a5f0:	413fffcc 	andi	r4,r8,65535
    a5f4:	1fc7383a 	mul	r3,r3,ra
    a5f8:	1907883a 	add	r3,r3,r4
    a5fc:	1947883a 	add	r3,r3,r5
    a600:	180ed43a 	srli	r7,r3,16
    a604:	727fe936 	bltu	r14,r9,a5ac <__alt_mem_onchip_memory+0xf780a5ac>
    a608:	90c00115 	stw	r3,4(r18)
    a60c:	31800104 	addi	r6,r6,4
    a610:	5ac00104 	addi	r11,r11,4
    a614:	333fbe36 	bltu	r6,r12,a510 <__alt_mem_onchip_memory+0xf780a510>
    a618:	0400090e 	bge	zero,r16,a640 <__multiply+0x1d4>
    a61c:	50ffff17 	ldw	r3,-4(r10)
    a620:	52bfff04 	addi	r10,r10,-4
    a624:	18000326 	beq	r3,zero,a634 <__multiply+0x1c8>
    a628:	00000506 	br	a640 <__multiply+0x1d4>
    a62c:	50c00017 	ldw	r3,0(r10)
    a630:	1800031e 	bne	r3,zero,a640 <__multiply+0x1d4>
    a634:	843fffc4 	addi	r16,r16,-1
    a638:	52bfff04 	addi	r10,r10,-4
    a63c:	803ffb1e 	bne	r16,zero,a62c <__alt_mem_onchip_memory+0xf780a62c>
    a640:	14000415 	stw	r16,16(r2)
    a644:	dfc00517 	ldw	ra,20(sp)
    a648:	dd000417 	ldw	r20,16(sp)
    a64c:	dcc00317 	ldw	r19,12(sp)
    a650:	dc800217 	ldw	r18,8(sp)
    a654:	dc400117 	ldw	r17,4(sp)
    a658:	dc000017 	ldw	r16,0(sp)
    a65c:	dec00604 	addi	sp,sp,24
    a660:	f800283a 	ret

0000a664 <__pow5mult>:
    a664:	defffa04 	addi	sp,sp,-24
    a668:	dcc00315 	stw	r19,12(sp)
    a66c:	dc000015 	stw	r16,0(sp)
    a670:	dfc00515 	stw	ra,20(sp)
    a674:	dd000415 	stw	r20,16(sp)
    a678:	dc800215 	stw	r18,8(sp)
    a67c:	dc400115 	stw	r17,4(sp)
    a680:	308000cc 	andi	r2,r6,3
    a684:	3021883a 	mov	r16,r6
    a688:	2027883a 	mov	r19,r4
    a68c:	10002f1e 	bne	r2,zero,a74c <__pow5mult+0xe8>
    a690:	2825883a 	mov	r18,r5
    a694:	8021d0ba 	srai	r16,r16,2
    a698:	80001a26 	beq	r16,zero,a704 <__pow5mult+0xa0>
    a69c:	9c401217 	ldw	r17,72(r19)
    a6a0:	8800061e 	bne	r17,zero,a6bc <__pow5mult+0x58>
    a6a4:	00003406 	br	a778 <__pow5mult+0x114>
    a6a8:	8021d07a 	srai	r16,r16,1
    a6ac:	80001526 	beq	r16,zero,a704 <__pow5mult+0xa0>
    a6b0:	88800017 	ldw	r2,0(r17)
    a6b4:	10001c26 	beq	r2,zero,a728 <__pow5mult+0xc4>
    a6b8:	1023883a 	mov	r17,r2
    a6bc:	8080004c 	andi	r2,r16,1
    a6c0:	103ff926 	beq	r2,zero,a6a8 <__alt_mem_onchip_memory+0xf780a6a8>
    a6c4:	880d883a 	mov	r6,r17
    a6c8:	900b883a 	mov	r5,r18
    a6cc:	9809883a 	mov	r4,r19
    a6d0:	000a46c0 	call	a46c <__multiply>
    a6d4:	90001b26 	beq	r18,zero,a744 <__pow5mult+0xe0>
    a6d8:	91000117 	ldw	r4,4(r18)
    a6dc:	98c01317 	ldw	r3,76(r19)
    a6e0:	8021d07a 	srai	r16,r16,1
    a6e4:	2109883a 	add	r4,r4,r4
    a6e8:	2109883a 	add	r4,r4,r4
    a6ec:	1907883a 	add	r3,r3,r4
    a6f0:	19000017 	ldw	r4,0(r3)
    a6f4:	91000015 	stw	r4,0(r18)
    a6f8:	1c800015 	stw	r18,0(r3)
    a6fc:	1025883a 	mov	r18,r2
    a700:	803feb1e 	bne	r16,zero,a6b0 <__alt_mem_onchip_memory+0xf780a6b0>
    a704:	9005883a 	mov	r2,r18
    a708:	dfc00517 	ldw	ra,20(sp)
    a70c:	dd000417 	ldw	r20,16(sp)
    a710:	dcc00317 	ldw	r19,12(sp)
    a714:	dc800217 	ldw	r18,8(sp)
    a718:	dc400117 	ldw	r17,4(sp)
    a71c:	dc000017 	ldw	r16,0(sp)
    a720:	dec00604 	addi	sp,sp,24
    a724:	f800283a 	ret
    a728:	880d883a 	mov	r6,r17
    a72c:	880b883a 	mov	r5,r17
    a730:	9809883a 	mov	r4,r19
    a734:	000a46c0 	call	a46c <__multiply>
    a738:	88800015 	stw	r2,0(r17)
    a73c:	10000015 	stw	zero,0(r2)
    a740:	003fdd06 	br	a6b8 <__alt_mem_onchip_memory+0xf780a6b8>
    a744:	1025883a 	mov	r18,r2
    a748:	003fd706 	br	a6a8 <__alt_mem_onchip_memory+0xf780a6a8>
    a74c:	10bfffc4 	addi	r2,r2,-1
    a750:	1085883a 	add	r2,r2,r2
    a754:	00c00074 	movhi	r3,1
    a758:	18c5f104 	addi	r3,r3,6084
    a75c:	1085883a 	add	r2,r2,r2
    a760:	1885883a 	add	r2,r3,r2
    a764:	11800017 	ldw	r6,0(r2)
    a768:	000f883a 	mov	r7,zero
    a76c:	000a0f40 	call	a0f4 <__multadd>
    a770:	1025883a 	mov	r18,r2
    a774:	003fc706 	br	a694 <__alt_mem_onchip_memory+0xf780a694>
    a778:	05000044 	movi	r20,1
    a77c:	a00b883a 	mov	r5,r20
    a780:	9809883a 	mov	r4,r19
    a784:	000a0240 	call	a024 <_Balloc>
    a788:	1023883a 	mov	r17,r2
    a78c:	00809c44 	movi	r2,625
    a790:	88800515 	stw	r2,20(r17)
    a794:	8d000415 	stw	r20,16(r17)
    a798:	9c401215 	stw	r17,72(r19)
    a79c:	88000015 	stw	zero,0(r17)
    a7a0:	003fc606 	br	a6bc <__alt_mem_onchip_memory+0xf780a6bc>

0000a7a4 <__lshift>:
    a7a4:	defff904 	addi	sp,sp,-28
    a7a8:	dd400515 	stw	r21,20(sp)
    a7ac:	dcc00315 	stw	r19,12(sp)
    a7b0:	302bd17a 	srai	r21,r6,5
    a7b4:	2cc00417 	ldw	r19,16(r5)
    a7b8:	28800217 	ldw	r2,8(r5)
    a7bc:	dd000415 	stw	r20,16(sp)
    a7c0:	ace7883a 	add	r19,r21,r19
    a7c4:	dc800215 	stw	r18,8(sp)
    a7c8:	dc400115 	stw	r17,4(sp)
    a7cc:	dc000015 	stw	r16,0(sp)
    a7d0:	dfc00615 	stw	ra,24(sp)
    a7d4:	9c000044 	addi	r16,r19,1
    a7d8:	2823883a 	mov	r17,r5
    a7dc:	3029883a 	mov	r20,r6
    a7e0:	2025883a 	mov	r18,r4
    a7e4:	29400117 	ldw	r5,4(r5)
    a7e8:	1400030e 	bge	r2,r16,a7f8 <__lshift+0x54>
    a7ec:	1085883a 	add	r2,r2,r2
    a7f0:	29400044 	addi	r5,r5,1
    a7f4:	143ffd16 	blt	r2,r16,a7ec <__alt_mem_onchip_memory+0xf780a7ec>
    a7f8:	9009883a 	mov	r4,r18
    a7fc:	000a0240 	call	a024 <_Balloc>
    a800:	10c00504 	addi	r3,r2,20
    a804:	0540070e 	bge	zero,r21,a824 <__lshift+0x80>
    a808:	ad6b883a 	add	r21,r21,r21
    a80c:	ad6b883a 	add	r21,r21,r21
    a810:	1809883a 	mov	r4,r3
    a814:	1d47883a 	add	r3,r3,r21
    a818:	20000015 	stw	zero,0(r4)
    a81c:	21000104 	addi	r4,r4,4
    a820:	193ffd1e 	bne	r3,r4,a818 <__alt_mem_onchip_memory+0xf780a818>
    a824:	8a000417 	ldw	r8,16(r17)
    a828:	89000504 	addi	r4,r17,20
    a82c:	a18007cc 	andi	r6,r20,31
    a830:	4211883a 	add	r8,r8,r8
    a834:	4211883a 	add	r8,r8,r8
    a838:	2211883a 	add	r8,r4,r8
    a83c:	30002326 	beq	r6,zero,a8cc <__lshift+0x128>
    a840:	02400804 	movi	r9,32
    a844:	4993c83a 	sub	r9,r9,r6
    a848:	000b883a 	mov	r5,zero
    a84c:	21c00017 	ldw	r7,0(r4)
    a850:	1815883a 	mov	r10,r3
    a854:	18c00104 	addi	r3,r3,4
    a858:	398e983a 	sll	r7,r7,r6
    a85c:	21000104 	addi	r4,r4,4
    a860:	394ab03a 	or	r5,r7,r5
    a864:	197fff15 	stw	r5,-4(r3)
    a868:	217fff17 	ldw	r5,-4(r4)
    a86c:	2a4ad83a 	srl	r5,r5,r9
    a870:	223ff636 	bltu	r4,r8,a84c <__alt_mem_onchip_memory+0xf780a84c>
    a874:	51400115 	stw	r5,4(r10)
    a878:	28001a1e 	bne	r5,zero,a8e4 <__lshift+0x140>
    a87c:	843fffc4 	addi	r16,r16,-1
    a880:	14000415 	stw	r16,16(r2)
    a884:	88000826 	beq	r17,zero,a8a8 <__lshift+0x104>
    a888:	89000117 	ldw	r4,4(r17)
    a88c:	90c01317 	ldw	r3,76(r18)
    a890:	2109883a 	add	r4,r4,r4
    a894:	2109883a 	add	r4,r4,r4
    a898:	1907883a 	add	r3,r3,r4
    a89c:	19000017 	ldw	r4,0(r3)
    a8a0:	89000015 	stw	r4,0(r17)
    a8a4:	1c400015 	stw	r17,0(r3)
    a8a8:	dfc00617 	ldw	ra,24(sp)
    a8ac:	dd400517 	ldw	r21,20(sp)
    a8b0:	dd000417 	ldw	r20,16(sp)
    a8b4:	dcc00317 	ldw	r19,12(sp)
    a8b8:	dc800217 	ldw	r18,8(sp)
    a8bc:	dc400117 	ldw	r17,4(sp)
    a8c0:	dc000017 	ldw	r16,0(sp)
    a8c4:	dec00704 	addi	sp,sp,28
    a8c8:	f800283a 	ret
    a8cc:	21400017 	ldw	r5,0(r4)
    a8d0:	18c00104 	addi	r3,r3,4
    a8d4:	21000104 	addi	r4,r4,4
    a8d8:	197fff15 	stw	r5,-4(r3)
    a8dc:	223ffb36 	bltu	r4,r8,a8cc <__alt_mem_onchip_memory+0xf780a8cc>
    a8e0:	003fe606 	br	a87c <__alt_mem_onchip_memory+0xf780a87c>
    a8e4:	9c000084 	addi	r16,r19,2
    a8e8:	003fe406 	br	a87c <__alt_mem_onchip_memory+0xf780a87c>

0000a8ec <__mcmp>:
    a8ec:	20800417 	ldw	r2,16(r4)
    a8f0:	28c00417 	ldw	r3,16(r5)
    a8f4:	10c5c83a 	sub	r2,r2,r3
    a8f8:	1000111e 	bne	r2,zero,a940 <__mcmp+0x54>
    a8fc:	18c7883a 	add	r3,r3,r3
    a900:	18c7883a 	add	r3,r3,r3
    a904:	21000504 	addi	r4,r4,20
    a908:	29400504 	addi	r5,r5,20
    a90c:	20c5883a 	add	r2,r4,r3
    a910:	28cb883a 	add	r5,r5,r3
    a914:	00000106 	br	a91c <__mcmp+0x30>
    a918:	20800a2e 	bgeu	r4,r2,a944 <__mcmp+0x58>
    a91c:	10bfff04 	addi	r2,r2,-4
    a920:	297fff04 	addi	r5,r5,-4
    a924:	11800017 	ldw	r6,0(r2)
    a928:	28c00017 	ldw	r3,0(r5)
    a92c:	30fffa26 	beq	r6,r3,a918 <__alt_mem_onchip_memory+0xf780a918>
    a930:	30c00236 	bltu	r6,r3,a93c <__mcmp+0x50>
    a934:	00800044 	movi	r2,1
    a938:	f800283a 	ret
    a93c:	00bfffc4 	movi	r2,-1
    a940:	f800283a 	ret
    a944:	0005883a 	mov	r2,zero
    a948:	f800283a 	ret

0000a94c <__mdiff>:
    a94c:	28c00417 	ldw	r3,16(r5)
    a950:	30800417 	ldw	r2,16(r6)
    a954:	defffa04 	addi	sp,sp,-24
    a958:	dcc00315 	stw	r19,12(sp)
    a95c:	dc800215 	stw	r18,8(sp)
    a960:	dfc00515 	stw	ra,20(sp)
    a964:	dd000415 	stw	r20,16(sp)
    a968:	dc400115 	stw	r17,4(sp)
    a96c:	dc000015 	stw	r16,0(sp)
    a970:	1887c83a 	sub	r3,r3,r2
    a974:	2825883a 	mov	r18,r5
    a978:	3027883a 	mov	r19,r6
    a97c:	1800141e 	bne	r3,zero,a9d0 <__mdiff+0x84>
    a980:	1085883a 	add	r2,r2,r2
    a984:	1085883a 	add	r2,r2,r2
    a988:	2a000504 	addi	r8,r5,20
    a98c:	34000504 	addi	r16,r6,20
    a990:	4087883a 	add	r3,r8,r2
    a994:	8085883a 	add	r2,r16,r2
    a998:	00000106 	br	a9a0 <__mdiff+0x54>
    a99c:	40c0592e 	bgeu	r8,r3,ab04 <__mdiff+0x1b8>
    a9a0:	18ffff04 	addi	r3,r3,-4
    a9a4:	10bfff04 	addi	r2,r2,-4
    a9a8:	19c00017 	ldw	r7,0(r3)
    a9ac:	11400017 	ldw	r5,0(r2)
    a9b0:	397ffa26 	beq	r7,r5,a99c <__alt_mem_onchip_memory+0xf780a99c>
    a9b4:	3940592e 	bgeu	r7,r5,ab1c <__mdiff+0x1d0>
    a9b8:	9005883a 	mov	r2,r18
    a9bc:	4023883a 	mov	r17,r8
    a9c0:	9825883a 	mov	r18,r19
    a9c4:	05000044 	movi	r20,1
    a9c8:	1027883a 	mov	r19,r2
    a9cc:	00000406 	br	a9e0 <__mdiff+0x94>
    a9d0:	18005616 	blt	r3,zero,ab2c <__mdiff+0x1e0>
    a9d4:	34400504 	addi	r17,r6,20
    a9d8:	2c000504 	addi	r16,r5,20
    a9dc:	0029883a 	mov	r20,zero
    a9e0:	91400117 	ldw	r5,4(r18)
    a9e4:	000a0240 	call	a024 <_Balloc>
    a9e8:	92400417 	ldw	r9,16(r18)
    a9ec:	9b000417 	ldw	r12,16(r19)
    a9f0:	12c00504 	addi	r11,r2,20
    a9f4:	4a51883a 	add	r8,r9,r9
    a9f8:	6319883a 	add	r12,r12,r12
    a9fc:	4211883a 	add	r8,r8,r8
    aa00:	6319883a 	add	r12,r12,r12
    aa04:	15000315 	stw	r20,12(r2)
    aa08:	8211883a 	add	r8,r16,r8
    aa0c:	8b19883a 	add	r12,r17,r12
    aa10:	0007883a 	mov	r3,zero
    aa14:	81400017 	ldw	r5,0(r16)
    aa18:	89c00017 	ldw	r7,0(r17)
    aa1c:	59800104 	addi	r6,r11,4
    aa20:	293fffcc 	andi	r4,r5,65535
    aa24:	20c7883a 	add	r3,r4,r3
    aa28:	393fffcc 	andi	r4,r7,65535
    aa2c:	1909c83a 	sub	r4,r3,r4
    aa30:	280ad43a 	srli	r5,r5,16
    aa34:	380ed43a 	srli	r7,r7,16
    aa38:	2007d43a 	srai	r3,r4,16
    aa3c:	213fffcc 	andi	r4,r4,65535
    aa40:	29cbc83a 	sub	r5,r5,r7
    aa44:	28c7883a 	add	r3,r5,r3
    aa48:	180a943a 	slli	r5,r3,16
    aa4c:	8c400104 	addi	r17,r17,4
    aa50:	84000104 	addi	r16,r16,4
    aa54:	2908b03a 	or	r4,r5,r4
    aa58:	59000015 	stw	r4,0(r11)
    aa5c:	1807d43a 	srai	r3,r3,16
    aa60:	3015883a 	mov	r10,r6
    aa64:	3017883a 	mov	r11,r6
    aa68:	8b3fea36 	bltu	r17,r12,aa14 <__alt_mem_onchip_memory+0xf780aa14>
    aa6c:	8200162e 	bgeu	r16,r8,aac8 <__mdiff+0x17c>
    aa70:	8017883a 	mov	r11,r16
    aa74:	59400017 	ldw	r5,0(r11)
    aa78:	31800104 	addi	r6,r6,4
    aa7c:	5ac00104 	addi	r11,r11,4
    aa80:	293fffcc 	andi	r4,r5,65535
    aa84:	20c7883a 	add	r3,r4,r3
    aa88:	280ed43a 	srli	r7,r5,16
    aa8c:	180bd43a 	srai	r5,r3,16
    aa90:	193fffcc 	andi	r4,r3,65535
    aa94:	3947883a 	add	r3,r7,r5
    aa98:	180a943a 	slli	r5,r3,16
    aa9c:	1807d43a 	srai	r3,r3,16
    aaa0:	2908b03a 	or	r4,r5,r4
    aaa4:	313fff15 	stw	r4,-4(r6)
    aaa8:	5a3ff236 	bltu	r11,r8,aa74 <__alt_mem_onchip_memory+0xf780aa74>
    aaac:	0406303a 	nor	r3,zero,r16
    aab0:	1a07883a 	add	r3,r3,r8
    aab4:	1806d0ba 	srli	r3,r3,2
    aab8:	18c00044 	addi	r3,r3,1
    aabc:	18c7883a 	add	r3,r3,r3
    aac0:	18c7883a 	add	r3,r3,r3
    aac4:	50d5883a 	add	r10,r10,r3
    aac8:	50ffff04 	addi	r3,r10,-4
    aacc:	2000041e 	bne	r4,zero,aae0 <__mdiff+0x194>
    aad0:	18ffff04 	addi	r3,r3,-4
    aad4:	19000017 	ldw	r4,0(r3)
    aad8:	4a7fffc4 	addi	r9,r9,-1
    aadc:	203ffc26 	beq	r4,zero,aad0 <__alt_mem_onchip_memory+0xf780aad0>
    aae0:	12400415 	stw	r9,16(r2)
    aae4:	dfc00517 	ldw	ra,20(sp)
    aae8:	dd000417 	ldw	r20,16(sp)
    aaec:	dcc00317 	ldw	r19,12(sp)
    aaf0:	dc800217 	ldw	r18,8(sp)
    aaf4:	dc400117 	ldw	r17,4(sp)
    aaf8:	dc000017 	ldw	r16,0(sp)
    aafc:	dec00604 	addi	sp,sp,24
    ab00:	f800283a 	ret
    ab04:	000b883a 	mov	r5,zero
    ab08:	000a0240 	call	a024 <_Balloc>
    ab0c:	00c00044 	movi	r3,1
    ab10:	10c00415 	stw	r3,16(r2)
    ab14:	10000515 	stw	zero,20(r2)
    ab18:	003ff206 	br	aae4 <__alt_mem_onchip_memory+0xf780aae4>
    ab1c:	8023883a 	mov	r17,r16
    ab20:	0029883a 	mov	r20,zero
    ab24:	4021883a 	mov	r16,r8
    ab28:	003fad06 	br	a9e0 <__alt_mem_onchip_memory+0xf780a9e0>
    ab2c:	9005883a 	mov	r2,r18
    ab30:	94400504 	addi	r17,r18,20
    ab34:	9c000504 	addi	r16,r19,20
    ab38:	9825883a 	mov	r18,r19
    ab3c:	05000044 	movi	r20,1
    ab40:	1027883a 	mov	r19,r2
    ab44:	003fa606 	br	a9e0 <__alt_mem_onchip_memory+0xf780a9e0>

0000ab48 <__ulp>:
    ab48:	295ffc2c 	andhi	r5,r5,32752
    ab4c:	00bf3034 	movhi	r2,64704
    ab50:	2887883a 	add	r3,r5,r2
    ab54:	00c0020e 	bge	zero,r3,ab60 <__ulp+0x18>
    ab58:	0005883a 	mov	r2,zero
    ab5c:	f800283a 	ret
    ab60:	00c7c83a 	sub	r3,zero,r3
    ab64:	1807d53a 	srai	r3,r3,20
    ab68:	008004c4 	movi	r2,19
    ab6c:	10c00b0e 	bge	r2,r3,ab9c <__ulp+0x54>
    ab70:	18bffb04 	addi	r2,r3,-20
    ab74:	01000784 	movi	r4,30
    ab78:	0007883a 	mov	r3,zero
    ab7c:	20800516 	blt	r4,r2,ab94 <__ulp+0x4c>
    ab80:	010007c4 	movi	r4,31
    ab84:	2089c83a 	sub	r4,r4,r2
    ab88:	00800044 	movi	r2,1
    ab8c:	1104983a 	sll	r2,r2,r4
    ab90:	f800283a 	ret
    ab94:	00800044 	movi	r2,1
    ab98:	f800283a 	ret
    ab9c:	01400234 	movhi	r5,8
    aba0:	28c7d83a 	sra	r3,r5,r3
    aba4:	0005883a 	mov	r2,zero
    aba8:	f800283a 	ret

0000abac <__b2d>:
    abac:	defffa04 	addi	sp,sp,-24
    abb0:	dc000015 	stw	r16,0(sp)
    abb4:	24000417 	ldw	r16,16(r4)
    abb8:	dc400115 	stw	r17,4(sp)
    abbc:	24400504 	addi	r17,r4,20
    abc0:	8421883a 	add	r16,r16,r16
    abc4:	8421883a 	add	r16,r16,r16
    abc8:	8c21883a 	add	r16,r17,r16
    abcc:	dc800215 	stw	r18,8(sp)
    abd0:	84bfff17 	ldw	r18,-4(r16)
    abd4:	dd000415 	stw	r20,16(sp)
    abd8:	dcc00315 	stw	r19,12(sp)
    abdc:	9009883a 	mov	r4,r18
    abe0:	2829883a 	mov	r20,r5
    abe4:	dfc00515 	stw	ra,20(sp)
    abe8:	000a3180 	call	a318 <__hi0bits>
    abec:	00c00804 	movi	r3,32
    abf0:	1889c83a 	sub	r4,r3,r2
    abf4:	a1000015 	stw	r4,0(r20)
    abf8:	01000284 	movi	r4,10
    abfc:	84ffff04 	addi	r19,r16,-4
    ac00:	20801216 	blt	r4,r2,ac4c <__b2d+0xa0>
    ac04:	018002c4 	movi	r6,11
    ac08:	308dc83a 	sub	r6,r6,r2
    ac0c:	9186d83a 	srl	r3,r18,r6
    ac10:	18cffc34 	orhi	r3,r3,16368
    ac14:	8cc0212e 	bgeu	r17,r19,ac9c <__b2d+0xf0>
    ac18:	813ffe17 	ldw	r4,-8(r16)
    ac1c:	218cd83a 	srl	r6,r4,r6
    ac20:	10800544 	addi	r2,r2,21
    ac24:	9084983a 	sll	r2,r18,r2
    ac28:	1184b03a 	or	r2,r2,r6
    ac2c:	dfc00517 	ldw	ra,20(sp)
    ac30:	dd000417 	ldw	r20,16(sp)
    ac34:	dcc00317 	ldw	r19,12(sp)
    ac38:	dc800217 	ldw	r18,8(sp)
    ac3c:	dc400117 	ldw	r17,4(sp)
    ac40:	dc000017 	ldw	r16,0(sp)
    ac44:	dec00604 	addi	sp,sp,24
    ac48:	f800283a 	ret
    ac4c:	8cc00f2e 	bgeu	r17,r19,ac8c <__b2d+0xe0>
    ac50:	117ffd44 	addi	r5,r2,-11
    ac54:	80bffe17 	ldw	r2,-8(r16)
    ac58:	28000e26 	beq	r5,zero,ac94 <__b2d+0xe8>
    ac5c:	1949c83a 	sub	r4,r3,r5
    ac60:	9164983a 	sll	r18,r18,r5
    ac64:	1106d83a 	srl	r3,r2,r4
    ac68:	81bffe04 	addi	r6,r16,-8
    ac6c:	948ffc34 	orhi	r18,r18,16368
    ac70:	90c6b03a 	or	r3,r18,r3
    ac74:	89800e2e 	bgeu	r17,r6,acb0 <__b2d+0x104>
    ac78:	81bffd17 	ldw	r6,-12(r16)
    ac7c:	1144983a 	sll	r2,r2,r5
    ac80:	310ad83a 	srl	r5,r6,r4
    ac84:	2884b03a 	or	r2,r5,r2
    ac88:	003fe806 	br	ac2c <__alt_mem_onchip_memory+0xf780ac2c>
    ac8c:	10bffd44 	addi	r2,r2,-11
    ac90:	1000041e 	bne	r2,zero,aca4 <__b2d+0xf8>
    ac94:	90cffc34 	orhi	r3,r18,16368
    ac98:	003fe406 	br	ac2c <__alt_mem_onchip_memory+0xf780ac2c>
    ac9c:	000d883a 	mov	r6,zero
    aca0:	003fdf06 	br	ac20 <__alt_mem_onchip_memory+0xf780ac20>
    aca4:	90a4983a 	sll	r18,r18,r2
    aca8:	0005883a 	mov	r2,zero
    acac:	003ff906 	br	ac94 <__alt_mem_onchip_memory+0xf780ac94>
    acb0:	1144983a 	sll	r2,r2,r5
    acb4:	003fdd06 	br	ac2c <__alt_mem_onchip_memory+0xf780ac2c>

0000acb8 <__d2b>:
    acb8:	defff804 	addi	sp,sp,-32
    acbc:	dc000215 	stw	r16,8(sp)
    acc0:	3021883a 	mov	r16,r6
    acc4:	dc400315 	stw	r17,12(sp)
    acc8:	8022907a 	slli	r17,r16,1
    accc:	dd000615 	stw	r20,24(sp)
    acd0:	2829883a 	mov	r20,r5
    acd4:	01400044 	movi	r5,1
    acd8:	dcc00515 	stw	r19,20(sp)
    acdc:	dc800415 	stw	r18,16(sp)
    ace0:	dfc00715 	stw	ra,28(sp)
    ace4:	3825883a 	mov	r18,r7
    ace8:	8822d57a 	srli	r17,r17,21
    acec:	000a0240 	call	a024 <_Balloc>
    acf0:	1027883a 	mov	r19,r2
    acf4:	00800434 	movhi	r2,16
    acf8:	10bfffc4 	addi	r2,r2,-1
    acfc:	808c703a 	and	r6,r16,r2
    ad00:	88000126 	beq	r17,zero,ad08 <__d2b+0x50>
    ad04:	31800434 	orhi	r6,r6,16
    ad08:	d9800015 	stw	r6,0(sp)
    ad0c:	a0002426 	beq	r20,zero,ada0 <__d2b+0xe8>
    ad10:	d9000104 	addi	r4,sp,4
    ad14:	dd000115 	stw	r20,4(sp)
    ad18:	000a3800 	call	a380 <__lo0bits>
    ad1c:	d8c00017 	ldw	r3,0(sp)
    ad20:	10002f1e 	bne	r2,zero,ade0 <__d2b+0x128>
    ad24:	d9000117 	ldw	r4,4(sp)
    ad28:	99000515 	stw	r4,20(r19)
    ad2c:	1821003a 	cmpeq	r16,r3,zero
    ad30:	01000084 	movi	r4,2
    ad34:	2421c83a 	sub	r16,r4,r16
    ad38:	98c00615 	stw	r3,24(r19)
    ad3c:	9c000415 	stw	r16,16(r19)
    ad40:	88001f1e 	bne	r17,zero,adc0 <__d2b+0x108>
    ad44:	10bef384 	addi	r2,r2,-1074
    ad48:	90800015 	stw	r2,0(r18)
    ad4c:	00900034 	movhi	r2,16384
    ad50:	10bfffc4 	addi	r2,r2,-1
    ad54:	8085883a 	add	r2,r16,r2
    ad58:	1085883a 	add	r2,r2,r2
    ad5c:	1085883a 	add	r2,r2,r2
    ad60:	9885883a 	add	r2,r19,r2
    ad64:	11000517 	ldw	r4,20(r2)
    ad68:	8020917a 	slli	r16,r16,5
    ad6c:	000a3180 	call	a318 <__hi0bits>
    ad70:	d8c00817 	ldw	r3,32(sp)
    ad74:	8085c83a 	sub	r2,r16,r2
    ad78:	18800015 	stw	r2,0(r3)
    ad7c:	9805883a 	mov	r2,r19
    ad80:	dfc00717 	ldw	ra,28(sp)
    ad84:	dd000617 	ldw	r20,24(sp)
    ad88:	dcc00517 	ldw	r19,20(sp)
    ad8c:	dc800417 	ldw	r18,16(sp)
    ad90:	dc400317 	ldw	r17,12(sp)
    ad94:	dc000217 	ldw	r16,8(sp)
    ad98:	dec00804 	addi	sp,sp,32
    ad9c:	f800283a 	ret
    ada0:	d809883a 	mov	r4,sp
    ada4:	000a3800 	call	a380 <__lo0bits>
    ada8:	d8c00017 	ldw	r3,0(sp)
    adac:	04000044 	movi	r16,1
    adb0:	9c000415 	stw	r16,16(r19)
    adb4:	98c00515 	stw	r3,20(r19)
    adb8:	10800804 	addi	r2,r2,32
    adbc:	883fe126 	beq	r17,zero,ad44 <__alt_mem_onchip_memory+0xf780ad44>
    adc0:	00c00d44 	movi	r3,53
    adc4:	8c7ef344 	addi	r17,r17,-1075
    adc8:	88a3883a 	add	r17,r17,r2
    adcc:	1885c83a 	sub	r2,r3,r2
    add0:	d8c00817 	ldw	r3,32(sp)
    add4:	94400015 	stw	r17,0(r18)
    add8:	18800015 	stw	r2,0(r3)
    addc:	003fe706 	br	ad7c <__alt_mem_onchip_memory+0xf780ad7c>
    ade0:	01000804 	movi	r4,32
    ade4:	2089c83a 	sub	r4,r4,r2
    ade8:	1908983a 	sll	r4,r3,r4
    adec:	d9400117 	ldw	r5,4(sp)
    adf0:	1886d83a 	srl	r3,r3,r2
    adf4:	2148b03a 	or	r4,r4,r5
    adf8:	99000515 	stw	r4,20(r19)
    adfc:	d8c00015 	stw	r3,0(sp)
    ae00:	003fca06 	br	ad2c <__alt_mem_onchip_memory+0xf780ad2c>

0000ae04 <__ratio>:
    ae04:	defff904 	addi	sp,sp,-28
    ae08:	dc400315 	stw	r17,12(sp)
    ae0c:	2823883a 	mov	r17,r5
    ae10:	d9400104 	addi	r5,sp,4
    ae14:	dfc00615 	stw	ra,24(sp)
    ae18:	dcc00515 	stw	r19,20(sp)
    ae1c:	dc800415 	stw	r18,16(sp)
    ae20:	2027883a 	mov	r19,r4
    ae24:	dc000215 	stw	r16,8(sp)
    ae28:	000abac0 	call	abac <__b2d>
    ae2c:	d80b883a 	mov	r5,sp
    ae30:	8809883a 	mov	r4,r17
    ae34:	1025883a 	mov	r18,r2
    ae38:	1821883a 	mov	r16,r3
    ae3c:	000abac0 	call	abac <__b2d>
    ae40:	8a000417 	ldw	r8,16(r17)
    ae44:	99000417 	ldw	r4,16(r19)
    ae48:	d9400117 	ldw	r5,4(sp)
    ae4c:	2209c83a 	sub	r4,r4,r8
    ae50:	2010917a 	slli	r8,r4,5
    ae54:	d9000017 	ldw	r4,0(sp)
    ae58:	2909c83a 	sub	r4,r5,r4
    ae5c:	4109883a 	add	r4,r8,r4
    ae60:	01000e0e 	bge	zero,r4,ae9c <__ratio+0x98>
    ae64:	2008953a 	slli	r4,r4,20
    ae68:	2421883a 	add	r16,r4,r16
    ae6c:	100d883a 	mov	r6,r2
    ae70:	180f883a 	mov	r7,r3
    ae74:	9009883a 	mov	r4,r18
    ae78:	800b883a 	mov	r5,r16
    ae7c:	00021140 	call	2114 <__divdf3>
    ae80:	dfc00617 	ldw	ra,24(sp)
    ae84:	dcc00517 	ldw	r19,20(sp)
    ae88:	dc800417 	ldw	r18,16(sp)
    ae8c:	dc400317 	ldw	r17,12(sp)
    ae90:	dc000217 	ldw	r16,8(sp)
    ae94:	dec00704 	addi	sp,sp,28
    ae98:	f800283a 	ret
    ae9c:	2008953a 	slli	r4,r4,20
    aea0:	1907c83a 	sub	r3,r3,r4
    aea4:	003ff106 	br	ae6c <__alt_mem_onchip_memory+0xf780ae6c>

0000aea8 <_mprec_log10>:
    aea8:	defffe04 	addi	sp,sp,-8
    aeac:	dc000015 	stw	r16,0(sp)
    aeb0:	dfc00115 	stw	ra,4(sp)
    aeb4:	008005c4 	movi	r2,23
    aeb8:	2021883a 	mov	r16,r4
    aebc:	11000d0e 	bge	r2,r4,aef4 <_mprec_log10+0x4c>
    aec0:	0005883a 	mov	r2,zero
    aec4:	00cffc34 	movhi	r3,16368
    aec8:	843fffc4 	addi	r16,r16,-1
    aecc:	000d883a 	mov	r6,zero
    aed0:	01d00934 	movhi	r7,16420
    aed4:	1009883a 	mov	r4,r2
    aed8:	180b883a 	mov	r5,r3
    aedc:	0002af00 	call	2af0 <__muldf3>
    aee0:	803ff91e 	bne	r16,zero,aec8 <__alt_mem_onchip_memory+0xf780aec8>
    aee4:	dfc00117 	ldw	ra,4(sp)
    aee8:	dc000017 	ldw	r16,0(sp)
    aeec:	dec00204 	addi	sp,sp,8
    aef0:	f800283a 	ret
    aef4:	202090fa 	slli	r16,r4,3
    aef8:	00800074 	movhi	r2,1
    aefc:	10860804 	addi	r2,r2,6176
    af00:	1421883a 	add	r16,r2,r16
    af04:	80800017 	ldw	r2,0(r16)
    af08:	80c00117 	ldw	r3,4(r16)
    af0c:	dfc00117 	ldw	ra,4(sp)
    af10:	dc000017 	ldw	r16,0(sp)
    af14:	dec00204 	addi	sp,sp,8
    af18:	f800283a 	ret

0000af1c <__copybits>:
    af1c:	297fffc4 	addi	r5,r5,-1
    af20:	280fd17a 	srai	r7,r5,5
    af24:	30c00417 	ldw	r3,16(r6)
    af28:	30800504 	addi	r2,r6,20
    af2c:	39c00044 	addi	r7,r7,1
    af30:	18c7883a 	add	r3,r3,r3
    af34:	39cf883a 	add	r7,r7,r7
    af38:	18c7883a 	add	r3,r3,r3
    af3c:	39cf883a 	add	r7,r7,r7
    af40:	10c7883a 	add	r3,r2,r3
    af44:	21cf883a 	add	r7,r4,r7
    af48:	10c00d2e 	bgeu	r2,r3,af80 <__copybits+0x64>
    af4c:	200b883a 	mov	r5,r4
    af50:	12000017 	ldw	r8,0(r2)
    af54:	29400104 	addi	r5,r5,4
    af58:	10800104 	addi	r2,r2,4
    af5c:	2a3fff15 	stw	r8,-4(r5)
    af60:	10fffb36 	bltu	r2,r3,af50 <__alt_mem_onchip_memory+0xf780af50>
    af64:	1985c83a 	sub	r2,r3,r6
    af68:	10bffac4 	addi	r2,r2,-21
    af6c:	1004d0ba 	srli	r2,r2,2
    af70:	10800044 	addi	r2,r2,1
    af74:	1085883a 	add	r2,r2,r2
    af78:	1085883a 	add	r2,r2,r2
    af7c:	2089883a 	add	r4,r4,r2
    af80:	21c0032e 	bgeu	r4,r7,af90 <__copybits+0x74>
    af84:	20000015 	stw	zero,0(r4)
    af88:	21000104 	addi	r4,r4,4
    af8c:	21fffd36 	bltu	r4,r7,af84 <__alt_mem_onchip_memory+0xf780af84>
    af90:	f800283a 	ret

0000af94 <__any_on>:
    af94:	20c00417 	ldw	r3,16(r4)
    af98:	2805d17a 	srai	r2,r5,5
    af9c:	21000504 	addi	r4,r4,20
    afa0:	18800d0e 	bge	r3,r2,afd8 <__any_on+0x44>
    afa4:	18c7883a 	add	r3,r3,r3
    afa8:	18c7883a 	add	r3,r3,r3
    afac:	20c7883a 	add	r3,r4,r3
    afb0:	20c0192e 	bgeu	r4,r3,b018 <__any_on+0x84>
    afb4:	18bfff17 	ldw	r2,-4(r3)
    afb8:	18ffff04 	addi	r3,r3,-4
    afbc:	1000041e 	bne	r2,zero,afd0 <__any_on+0x3c>
    afc0:	20c0142e 	bgeu	r4,r3,b014 <__any_on+0x80>
    afc4:	18ffff04 	addi	r3,r3,-4
    afc8:	19400017 	ldw	r5,0(r3)
    afcc:	283ffc26 	beq	r5,zero,afc0 <__alt_mem_onchip_memory+0xf780afc0>
    afd0:	00800044 	movi	r2,1
    afd4:	f800283a 	ret
    afd8:	10c00a0e 	bge	r2,r3,b004 <__any_on+0x70>
    afdc:	1085883a 	add	r2,r2,r2
    afe0:	1085883a 	add	r2,r2,r2
    afe4:	294007cc 	andi	r5,r5,31
    afe8:	2087883a 	add	r3,r4,r2
    afec:	283ff026 	beq	r5,zero,afb0 <__alt_mem_onchip_memory+0xf780afb0>
    aff0:	19800017 	ldw	r6,0(r3)
    aff4:	3144d83a 	srl	r2,r6,r5
    aff8:	114a983a 	sll	r5,r2,r5
    affc:	317ff41e 	bne	r6,r5,afd0 <__alt_mem_onchip_memory+0xf780afd0>
    b000:	003feb06 	br	afb0 <__alt_mem_onchip_memory+0xf780afb0>
    b004:	1085883a 	add	r2,r2,r2
    b008:	1085883a 	add	r2,r2,r2
    b00c:	2087883a 	add	r3,r4,r2
    b010:	003fe706 	br	afb0 <__alt_mem_onchip_memory+0xf780afb0>
    b014:	f800283a 	ret
    b018:	0005883a 	mov	r2,zero
    b01c:	f800283a 	ret

0000b020 <_putc_r>:
    b020:	defffc04 	addi	sp,sp,-16
    b024:	dc000215 	stw	r16,8(sp)
    b028:	dfc00315 	stw	ra,12(sp)
    b02c:	2021883a 	mov	r16,r4
    b030:	20000226 	beq	r4,zero,b03c <_putc_r+0x1c>
    b034:	20800e17 	ldw	r2,56(r4)
    b038:	10001b26 	beq	r2,zero,b0a8 <_putc_r+0x88>
    b03c:	30800217 	ldw	r2,8(r6)
    b040:	10bfffc4 	addi	r2,r2,-1
    b044:	30800215 	stw	r2,8(r6)
    b048:	10000a16 	blt	r2,zero,b074 <_putc_r+0x54>
    b04c:	30800017 	ldw	r2,0(r6)
    b050:	11400005 	stb	r5,0(r2)
    b054:	30800017 	ldw	r2,0(r6)
    b058:	10c00044 	addi	r3,r2,1
    b05c:	30c00015 	stw	r3,0(r6)
    b060:	10800003 	ldbu	r2,0(r2)
    b064:	dfc00317 	ldw	ra,12(sp)
    b068:	dc000217 	ldw	r16,8(sp)
    b06c:	dec00404 	addi	sp,sp,16
    b070:	f800283a 	ret
    b074:	30c00617 	ldw	r3,24(r6)
    b078:	10c00616 	blt	r2,r3,b094 <_putc_r+0x74>
    b07c:	30800017 	ldw	r2,0(r6)
    b080:	00c00284 	movi	r3,10
    b084:	11400005 	stb	r5,0(r2)
    b088:	30800017 	ldw	r2,0(r6)
    b08c:	11400003 	ldbu	r5,0(r2)
    b090:	28fff11e 	bne	r5,r3,b058 <__alt_mem_onchip_memory+0xf780b058>
    b094:	8009883a 	mov	r4,r16
    b098:	dfc00317 	ldw	ra,12(sp)
    b09c:	dc000217 	ldw	r16,8(sp)
    b0a0:	dec00404 	addi	sp,sp,16
    b0a4:	000cfa01 	jmpi	cfa0 <__swbuf_r>
    b0a8:	d9400015 	stw	r5,0(sp)
    b0ac:	d9800115 	stw	r6,4(sp)
    b0b0:	00085ac0 	call	85ac <__sinit>
    b0b4:	d9800117 	ldw	r6,4(sp)
    b0b8:	d9400017 	ldw	r5,0(sp)
    b0bc:	003fdf06 	br	b03c <__alt_mem_onchip_memory+0xf780b03c>

0000b0c0 <putc>:
    b0c0:	00800074 	movhi	r2,1
    b0c4:	defffc04 	addi	sp,sp,-16
    b0c8:	108d3e04 	addi	r2,r2,13560
    b0cc:	dc000115 	stw	r16,4(sp)
    b0d0:	14000017 	ldw	r16,0(r2)
    b0d4:	dc400215 	stw	r17,8(sp)
    b0d8:	dfc00315 	stw	ra,12(sp)
    b0dc:	2023883a 	mov	r17,r4
    b0e0:	80000226 	beq	r16,zero,b0ec <putc+0x2c>
    b0e4:	80800e17 	ldw	r2,56(r16)
    b0e8:	10001a26 	beq	r2,zero,b154 <putc+0x94>
    b0ec:	28800217 	ldw	r2,8(r5)
    b0f0:	10bfffc4 	addi	r2,r2,-1
    b0f4:	28800215 	stw	r2,8(r5)
    b0f8:	10000b16 	blt	r2,zero,b128 <putc+0x68>
    b0fc:	28800017 	ldw	r2,0(r5)
    b100:	14400005 	stb	r17,0(r2)
    b104:	28800017 	ldw	r2,0(r5)
    b108:	10c00044 	addi	r3,r2,1
    b10c:	28c00015 	stw	r3,0(r5)
    b110:	10800003 	ldbu	r2,0(r2)
    b114:	dfc00317 	ldw	ra,12(sp)
    b118:	dc400217 	ldw	r17,8(sp)
    b11c:	dc000117 	ldw	r16,4(sp)
    b120:	dec00404 	addi	sp,sp,16
    b124:	f800283a 	ret
    b128:	28c00617 	ldw	r3,24(r5)
    b12c:	10c00e16 	blt	r2,r3,b168 <putc+0xa8>
    b130:	28800017 	ldw	r2,0(r5)
    b134:	01000284 	movi	r4,10
    b138:	14400005 	stb	r17,0(r2)
    b13c:	28800017 	ldw	r2,0(r5)
    b140:	10c00003 	ldbu	r3,0(r2)
    b144:	193ff01e 	bne	r3,r4,b108 <__alt_mem_onchip_memory+0xf780b108>
    b148:	280d883a 	mov	r6,r5
    b14c:	180b883a 	mov	r5,r3
    b150:	00000706 	br	b170 <putc+0xb0>
    b154:	8009883a 	mov	r4,r16
    b158:	d9400015 	stw	r5,0(sp)
    b15c:	00085ac0 	call	85ac <__sinit>
    b160:	d9400017 	ldw	r5,0(sp)
    b164:	003fe106 	br	b0ec <__alt_mem_onchip_memory+0xf780b0ec>
    b168:	280d883a 	mov	r6,r5
    b16c:	880b883a 	mov	r5,r17
    b170:	8009883a 	mov	r4,r16
    b174:	dfc00317 	ldw	ra,12(sp)
    b178:	dc400217 	ldw	r17,8(sp)
    b17c:	dc000117 	ldw	r16,4(sp)
    b180:	dec00404 	addi	sp,sp,16
    b184:	000cfa01 	jmpi	cfa0 <__swbuf_r>

0000b188 <_realloc_r>:
    b188:	defff604 	addi	sp,sp,-40
    b18c:	dc800215 	stw	r18,8(sp)
    b190:	dfc00915 	stw	ra,36(sp)
    b194:	df000815 	stw	fp,32(sp)
    b198:	ddc00715 	stw	r23,28(sp)
    b19c:	dd800615 	stw	r22,24(sp)
    b1a0:	dd400515 	stw	r21,20(sp)
    b1a4:	dd000415 	stw	r20,16(sp)
    b1a8:	dcc00315 	stw	r19,12(sp)
    b1ac:	dc400115 	stw	r17,4(sp)
    b1b0:	dc000015 	stw	r16,0(sp)
    b1b4:	3025883a 	mov	r18,r6
    b1b8:	2800b726 	beq	r5,zero,b498 <_realloc_r+0x310>
    b1bc:	282b883a 	mov	r21,r5
    b1c0:	2029883a 	mov	r20,r4
    b1c4:	000eebc0 	call	eebc <__malloc_lock>
    b1c8:	a8bfff17 	ldw	r2,-4(r21)
    b1cc:	043fff04 	movi	r16,-4
    b1d0:	90c002c4 	addi	r3,r18,11
    b1d4:	01000584 	movi	r4,22
    b1d8:	acfffe04 	addi	r19,r21,-8
    b1dc:	1420703a 	and	r16,r2,r16
    b1e0:	20c0332e 	bgeu	r4,r3,b2b0 <_realloc_r+0x128>
    b1e4:	047ffe04 	movi	r17,-8
    b1e8:	1c62703a 	and	r17,r3,r17
    b1ec:	8807883a 	mov	r3,r17
    b1f0:	88005816 	blt	r17,zero,b354 <_realloc_r+0x1cc>
    b1f4:	8c805736 	bltu	r17,r18,b354 <_realloc_r+0x1cc>
    b1f8:	80c0300e 	bge	r16,r3,b2bc <_realloc_r+0x134>
    b1fc:	07000074 	movhi	fp,1
    b200:	e707b404 	addi	fp,fp,7888
    b204:	e1c00217 	ldw	r7,8(fp)
    b208:	9c09883a 	add	r4,r19,r16
    b20c:	22000117 	ldw	r8,4(r4)
    b210:	21c06326 	beq	r4,r7,b3a0 <_realloc_r+0x218>
    b214:	017fff84 	movi	r5,-2
    b218:	414a703a 	and	r5,r8,r5
    b21c:	214b883a 	add	r5,r4,r5
    b220:	29800117 	ldw	r6,4(r5)
    b224:	3180004c 	andi	r6,r6,1
    b228:	30003f26 	beq	r6,zero,b328 <_realloc_r+0x1a0>
    b22c:	1080004c 	andi	r2,r2,1
    b230:	10008326 	beq	r2,zero,b440 <_realloc_r+0x2b8>
    b234:	900b883a 	mov	r5,r18
    b238:	a009883a 	mov	r4,r20
    b23c:	00093680 	call	9368 <_malloc_r>
    b240:	1025883a 	mov	r18,r2
    b244:	10011e26 	beq	r2,zero,b6c0 <_realloc_r+0x538>
    b248:	a93fff17 	ldw	r4,-4(r21)
    b24c:	10fffe04 	addi	r3,r2,-8
    b250:	00bfff84 	movi	r2,-2
    b254:	2084703a 	and	r2,r4,r2
    b258:	9885883a 	add	r2,r19,r2
    b25c:	1880ee26 	beq	r3,r2,b618 <_realloc_r+0x490>
    b260:	81bfff04 	addi	r6,r16,-4
    b264:	00800904 	movi	r2,36
    b268:	1180b836 	bltu	r2,r6,b54c <_realloc_r+0x3c4>
    b26c:	00c004c4 	movi	r3,19
    b270:	19809636 	bltu	r3,r6,b4cc <_realloc_r+0x344>
    b274:	9005883a 	mov	r2,r18
    b278:	a807883a 	mov	r3,r21
    b27c:	19000017 	ldw	r4,0(r3)
    b280:	11000015 	stw	r4,0(r2)
    b284:	19000117 	ldw	r4,4(r3)
    b288:	11000115 	stw	r4,4(r2)
    b28c:	18c00217 	ldw	r3,8(r3)
    b290:	10c00215 	stw	r3,8(r2)
    b294:	a80b883a 	mov	r5,r21
    b298:	a009883a 	mov	r4,r20
    b29c:	00087200 	call	8720 <_free_r>
    b2a0:	a009883a 	mov	r4,r20
    b2a4:	000eee00 	call	eee0 <__malloc_unlock>
    b2a8:	9005883a 	mov	r2,r18
    b2ac:	00001206 	br	b2f8 <_realloc_r+0x170>
    b2b0:	00c00404 	movi	r3,16
    b2b4:	1823883a 	mov	r17,r3
    b2b8:	003fce06 	br	b1f4 <__alt_mem_onchip_memory+0xf780b1f4>
    b2bc:	a825883a 	mov	r18,r21
    b2c0:	8445c83a 	sub	r2,r16,r17
    b2c4:	00c003c4 	movi	r3,15
    b2c8:	18802636 	bltu	r3,r2,b364 <_realloc_r+0x1dc>
    b2cc:	99800117 	ldw	r6,4(r19)
    b2d0:	9c07883a 	add	r3,r19,r16
    b2d4:	3180004c 	andi	r6,r6,1
    b2d8:	3420b03a 	or	r16,r6,r16
    b2dc:	9c000115 	stw	r16,4(r19)
    b2e0:	18800117 	ldw	r2,4(r3)
    b2e4:	10800054 	ori	r2,r2,1
    b2e8:	18800115 	stw	r2,4(r3)
    b2ec:	a009883a 	mov	r4,r20
    b2f0:	000eee00 	call	eee0 <__malloc_unlock>
    b2f4:	9005883a 	mov	r2,r18
    b2f8:	dfc00917 	ldw	ra,36(sp)
    b2fc:	df000817 	ldw	fp,32(sp)
    b300:	ddc00717 	ldw	r23,28(sp)
    b304:	dd800617 	ldw	r22,24(sp)
    b308:	dd400517 	ldw	r21,20(sp)
    b30c:	dd000417 	ldw	r20,16(sp)
    b310:	dcc00317 	ldw	r19,12(sp)
    b314:	dc800217 	ldw	r18,8(sp)
    b318:	dc400117 	ldw	r17,4(sp)
    b31c:	dc000017 	ldw	r16,0(sp)
    b320:	dec00a04 	addi	sp,sp,40
    b324:	f800283a 	ret
    b328:	017fff04 	movi	r5,-4
    b32c:	414a703a 	and	r5,r8,r5
    b330:	814d883a 	add	r6,r16,r5
    b334:	30c01f16 	blt	r6,r3,b3b4 <_realloc_r+0x22c>
    b338:	20800317 	ldw	r2,12(r4)
    b33c:	20c00217 	ldw	r3,8(r4)
    b340:	a825883a 	mov	r18,r21
    b344:	3021883a 	mov	r16,r6
    b348:	18800315 	stw	r2,12(r3)
    b34c:	10c00215 	stw	r3,8(r2)
    b350:	003fdb06 	br	b2c0 <__alt_mem_onchip_memory+0xf780b2c0>
    b354:	00800304 	movi	r2,12
    b358:	a0800015 	stw	r2,0(r20)
    b35c:	0005883a 	mov	r2,zero
    b360:	003fe506 	br	b2f8 <__alt_mem_onchip_memory+0xf780b2f8>
    b364:	98c00117 	ldw	r3,4(r19)
    b368:	9c4b883a 	add	r5,r19,r17
    b36c:	11000054 	ori	r4,r2,1
    b370:	18c0004c 	andi	r3,r3,1
    b374:	1c62b03a 	or	r17,r3,r17
    b378:	9c400115 	stw	r17,4(r19)
    b37c:	29000115 	stw	r4,4(r5)
    b380:	2885883a 	add	r2,r5,r2
    b384:	10c00117 	ldw	r3,4(r2)
    b388:	29400204 	addi	r5,r5,8
    b38c:	a009883a 	mov	r4,r20
    b390:	18c00054 	ori	r3,r3,1
    b394:	10c00115 	stw	r3,4(r2)
    b398:	00087200 	call	8720 <_free_r>
    b39c:	003fd306 	br	b2ec <__alt_mem_onchip_memory+0xf780b2ec>
    b3a0:	017fff04 	movi	r5,-4
    b3a4:	414a703a 	and	r5,r8,r5
    b3a8:	89800404 	addi	r6,r17,16
    b3ac:	8151883a 	add	r8,r16,r5
    b3b0:	4180590e 	bge	r8,r6,b518 <_realloc_r+0x390>
    b3b4:	1080004c 	andi	r2,r2,1
    b3b8:	103f9e1e 	bne	r2,zero,b234 <__alt_mem_onchip_memory+0xf780b234>
    b3bc:	adbffe17 	ldw	r22,-8(r21)
    b3c0:	00bfff04 	movi	r2,-4
    b3c4:	9dadc83a 	sub	r22,r19,r22
    b3c8:	b1800117 	ldw	r6,4(r22)
    b3cc:	3084703a 	and	r2,r6,r2
    b3d0:	20002026 	beq	r4,zero,b454 <_realloc_r+0x2cc>
    b3d4:	80af883a 	add	r23,r16,r2
    b3d8:	b96f883a 	add	r23,r23,r5
    b3dc:	21c05f26 	beq	r4,r7,b55c <_realloc_r+0x3d4>
    b3e0:	b8c01c16 	blt	r23,r3,b454 <_realloc_r+0x2cc>
    b3e4:	20800317 	ldw	r2,12(r4)
    b3e8:	20c00217 	ldw	r3,8(r4)
    b3ec:	81bfff04 	addi	r6,r16,-4
    b3f0:	01000904 	movi	r4,36
    b3f4:	18800315 	stw	r2,12(r3)
    b3f8:	10c00215 	stw	r3,8(r2)
    b3fc:	b0c00217 	ldw	r3,8(r22)
    b400:	b0800317 	ldw	r2,12(r22)
    b404:	b4800204 	addi	r18,r22,8
    b408:	18800315 	stw	r2,12(r3)
    b40c:	10c00215 	stw	r3,8(r2)
    b410:	21801b36 	bltu	r4,r6,b480 <_realloc_r+0x2f8>
    b414:	008004c4 	movi	r2,19
    b418:	1180352e 	bgeu	r2,r6,b4f0 <_realloc_r+0x368>
    b41c:	a8800017 	ldw	r2,0(r21)
    b420:	b0800215 	stw	r2,8(r22)
    b424:	a8800117 	ldw	r2,4(r21)
    b428:	b0800315 	stw	r2,12(r22)
    b42c:	008006c4 	movi	r2,27
    b430:	11807f36 	bltu	r2,r6,b630 <_realloc_r+0x4a8>
    b434:	b0800404 	addi	r2,r22,16
    b438:	ad400204 	addi	r21,r21,8
    b43c:	00002d06 	br	b4f4 <_realloc_r+0x36c>
    b440:	adbffe17 	ldw	r22,-8(r21)
    b444:	00bfff04 	movi	r2,-4
    b448:	9dadc83a 	sub	r22,r19,r22
    b44c:	b1000117 	ldw	r4,4(r22)
    b450:	2084703a 	and	r2,r4,r2
    b454:	b03f7726 	beq	r22,zero,b234 <__alt_mem_onchip_memory+0xf780b234>
    b458:	80af883a 	add	r23,r16,r2
    b45c:	b8ff7516 	blt	r23,r3,b234 <__alt_mem_onchip_memory+0xf780b234>
    b460:	b0800317 	ldw	r2,12(r22)
    b464:	b0c00217 	ldw	r3,8(r22)
    b468:	81bfff04 	addi	r6,r16,-4
    b46c:	01000904 	movi	r4,36
    b470:	18800315 	stw	r2,12(r3)
    b474:	10c00215 	stw	r3,8(r2)
    b478:	b4800204 	addi	r18,r22,8
    b47c:	21bfe52e 	bgeu	r4,r6,b414 <__alt_mem_onchip_memory+0xf780b414>
    b480:	a80b883a 	mov	r5,r21
    b484:	9009883a 	mov	r4,r18
    b488:	0009da00 	call	9da0 <memmove>
    b48c:	b821883a 	mov	r16,r23
    b490:	b027883a 	mov	r19,r22
    b494:	003f8a06 	br	b2c0 <__alt_mem_onchip_memory+0xf780b2c0>
    b498:	300b883a 	mov	r5,r6
    b49c:	dfc00917 	ldw	ra,36(sp)
    b4a0:	df000817 	ldw	fp,32(sp)
    b4a4:	ddc00717 	ldw	r23,28(sp)
    b4a8:	dd800617 	ldw	r22,24(sp)
    b4ac:	dd400517 	ldw	r21,20(sp)
    b4b0:	dd000417 	ldw	r20,16(sp)
    b4b4:	dcc00317 	ldw	r19,12(sp)
    b4b8:	dc800217 	ldw	r18,8(sp)
    b4bc:	dc400117 	ldw	r17,4(sp)
    b4c0:	dc000017 	ldw	r16,0(sp)
    b4c4:	dec00a04 	addi	sp,sp,40
    b4c8:	00093681 	jmpi	9368 <_malloc_r>
    b4cc:	a8c00017 	ldw	r3,0(r21)
    b4d0:	90c00015 	stw	r3,0(r18)
    b4d4:	a8c00117 	ldw	r3,4(r21)
    b4d8:	90c00115 	stw	r3,4(r18)
    b4dc:	00c006c4 	movi	r3,27
    b4e0:	19804536 	bltu	r3,r6,b5f8 <_realloc_r+0x470>
    b4e4:	90800204 	addi	r2,r18,8
    b4e8:	a8c00204 	addi	r3,r21,8
    b4ec:	003f6306 	br	b27c <__alt_mem_onchip_memory+0xf780b27c>
    b4f0:	9005883a 	mov	r2,r18
    b4f4:	a8c00017 	ldw	r3,0(r21)
    b4f8:	b821883a 	mov	r16,r23
    b4fc:	b027883a 	mov	r19,r22
    b500:	10c00015 	stw	r3,0(r2)
    b504:	a8c00117 	ldw	r3,4(r21)
    b508:	10c00115 	stw	r3,4(r2)
    b50c:	a8c00217 	ldw	r3,8(r21)
    b510:	10c00215 	stw	r3,8(r2)
    b514:	003f6a06 	br	b2c0 <__alt_mem_onchip_memory+0xf780b2c0>
    b518:	9c67883a 	add	r19,r19,r17
    b51c:	4445c83a 	sub	r2,r8,r17
    b520:	e4c00215 	stw	r19,8(fp)
    b524:	10800054 	ori	r2,r2,1
    b528:	98800115 	stw	r2,4(r19)
    b52c:	a8bfff17 	ldw	r2,-4(r21)
    b530:	a009883a 	mov	r4,r20
    b534:	1080004c 	andi	r2,r2,1
    b538:	1462b03a 	or	r17,r2,r17
    b53c:	ac7fff15 	stw	r17,-4(r21)
    b540:	000eee00 	call	eee0 <__malloc_unlock>
    b544:	a805883a 	mov	r2,r21
    b548:	003f6b06 	br	b2f8 <__alt_mem_onchip_memory+0xf780b2f8>
    b54c:	a80b883a 	mov	r5,r21
    b550:	9009883a 	mov	r4,r18
    b554:	0009da00 	call	9da0 <memmove>
    b558:	003f4e06 	br	b294 <__alt_mem_onchip_memory+0xf780b294>
    b55c:	89000404 	addi	r4,r17,16
    b560:	b93fbc16 	blt	r23,r4,b454 <__alt_mem_onchip_memory+0xf780b454>
    b564:	b0800317 	ldw	r2,12(r22)
    b568:	b0c00217 	ldw	r3,8(r22)
    b56c:	81bfff04 	addi	r6,r16,-4
    b570:	01000904 	movi	r4,36
    b574:	18800315 	stw	r2,12(r3)
    b578:	10c00215 	stw	r3,8(r2)
    b57c:	b4800204 	addi	r18,r22,8
    b580:	21804336 	bltu	r4,r6,b690 <_realloc_r+0x508>
    b584:	008004c4 	movi	r2,19
    b588:	11803f2e 	bgeu	r2,r6,b688 <_realloc_r+0x500>
    b58c:	a8800017 	ldw	r2,0(r21)
    b590:	b0800215 	stw	r2,8(r22)
    b594:	a8800117 	ldw	r2,4(r21)
    b598:	b0800315 	stw	r2,12(r22)
    b59c:	008006c4 	movi	r2,27
    b5a0:	11803f36 	bltu	r2,r6,b6a0 <_realloc_r+0x518>
    b5a4:	b0800404 	addi	r2,r22,16
    b5a8:	ad400204 	addi	r21,r21,8
    b5ac:	a8c00017 	ldw	r3,0(r21)
    b5b0:	10c00015 	stw	r3,0(r2)
    b5b4:	a8c00117 	ldw	r3,4(r21)
    b5b8:	10c00115 	stw	r3,4(r2)
    b5bc:	a8c00217 	ldw	r3,8(r21)
    b5c0:	10c00215 	stw	r3,8(r2)
    b5c4:	b447883a 	add	r3,r22,r17
    b5c8:	bc45c83a 	sub	r2,r23,r17
    b5cc:	e0c00215 	stw	r3,8(fp)
    b5d0:	10800054 	ori	r2,r2,1
    b5d4:	18800115 	stw	r2,4(r3)
    b5d8:	b0800117 	ldw	r2,4(r22)
    b5dc:	a009883a 	mov	r4,r20
    b5e0:	1080004c 	andi	r2,r2,1
    b5e4:	1462b03a 	or	r17,r2,r17
    b5e8:	b4400115 	stw	r17,4(r22)
    b5ec:	000eee00 	call	eee0 <__malloc_unlock>
    b5f0:	9005883a 	mov	r2,r18
    b5f4:	003f4006 	br	b2f8 <__alt_mem_onchip_memory+0xf780b2f8>
    b5f8:	a8c00217 	ldw	r3,8(r21)
    b5fc:	90c00215 	stw	r3,8(r18)
    b600:	a8c00317 	ldw	r3,12(r21)
    b604:	90c00315 	stw	r3,12(r18)
    b608:	30801126 	beq	r6,r2,b650 <_realloc_r+0x4c8>
    b60c:	90800404 	addi	r2,r18,16
    b610:	a8c00404 	addi	r3,r21,16
    b614:	003f1906 	br	b27c <__alt_mem_onchip_memory+0xf780b27c>
    b618:	90ffff17 	ldw	r3,-4(r18)
    b61c:	00bfff04 	movi	r2,-4
    b620:	a825883a 	mov	r18,r21
    b624:	1884703a 	and	r2,r3,r2
    b628:	80a1883a 	add	r16,r16,r2
    b62c:	003f2406 	br	b2c0 <__alt_mem_onchip_memory+0xf780b2c0>
    b630:	a8800217 	ldw	r2,8(r21)
    b634:	b0800415 	stw	r2,16(r22)
    b638:	a8800317 	ldw	r2,12(r21)
    b63c:	b0800515 	stw	r2,20(r22)
    b640:	31000a26 	beq	r6,r4,b66c <_realloc_r+0x4e4>
    b644:	b0800604 	addi	r2,r22,24
    b648:	ad400404 	addi	r21,r21,16
    b64c:	003fa906 	br	b4f4 <__alt_mem_onchip_memory+0xf780b4f4>
    b650:	a9000417 	ldw	r4,16(r21)
    b654:	90800604 	addi	r2,r18,24
    b658:	a8c00604 	addi	r3,r21,24
    b65c:	91000415 	stw	r4,16(r18)
    b660:	a9000517 	ldw	r4,20(r21)
    b664:	91000515 	stw	r4,20(r18)
    b668:	003f0406 	br	b27c <__alt_mem_onchip_memory+0xf780b27c>
    b66c:	a8c00417 	ldw	r3,16(r21)
    b670:	ad400604 	addi	r21,r21,24
    b674:	b0800804 	addi	r2,r22,32
    b678:	b0c00615 	stw	r3,24(r22)
    b67c:	a8ffff17 	ldw	r3,-4(r21)
    b680:	b0c00715 	stw	r3,28(r22)
    b684:	003f9b06 	br	b4f4 <__alt_mem_onchip_memory+0xf780b4f4>
    b688:	9005883a 	mov	r2,r18
    b68c:	003fc706 	br	b5ac <__alt_mem_onchip_memory+0xf780b5ac>
    b690:	a80b883a 	mov	r5,r21
    b694:	9009883a 	mov	r4,r18
    b698:	0009da00 	call	9da0 <memmove>
    b69c:	003fc906 	br	b5c4 <__alt_mem_onchip_memory+0xf780b5c4>
    b6a0:	a8800217 	ldw	r2,8(r21)
    b6a4:	b0800415 	stw	r2,16(r22)
    b6a8:	a8800317 	ldw	r2,12(r21)
    b6ac:	b0800515 	stw	r2,20(r22)
    b6b0:	31000726 	beq	r6,r4,b6d0 <_realloc_r+0x548>
    b6b4:	b0800604 	addi	r2,r22,24
    b6b8:	ad400404 	addi	r21,r21,16
    b6bc:	003fbb06 	br	b5ac <__alt_mem_onchip_memory+0xf780b5ac>
    b6c0:	a009883a 	mov	r4,r20
    b6c4:	000eee00 	call	eee0 <__malloc_unlock>
    b6c8:	0005883a 	mov	r2,zero
    b6cc:	003f0a06 	br	b2f8 <__alt_mem_onchip_memory+0xf780b2f8>
    b6d0:	a8c00417 	ldw	r3,16(r21)
    b6d4:	ad400604 	addi	r21,r21,24
    b6d8:	b0800804 	addi	r2,r22,32
    b6dc:	b0c00615 	stw	r3,24(r22)
    b6e0:	a8ffff17 	ldw	r3,-4(r21)
    b6e4:	b0c00715 	stw	r3,28(r22)
    b6e8:	003fb006 	br	b5ac <__alt_mem_onchip_memory+0xf780b5ac>

0000b6ec <_sbrk_r>:
    b6ec:	defffd04 	addi	sp,sp,-12
    b6f0:	dc000015 	stw	r16,0(sp)
    b6f4:	04000074 	movhi	r16,1
    b6f8:	dc400115 	stw	r17,4(sp)
    b6fc:	84141404 	addi	r16,r16,20560
    b700:	2023883a 	mov	r17,r4
    b704:	2809883a 	mov	r4,r5
    b708:	dfc00215 	stw	ra,8(sp)
    b70c:	80000015 	stw	zero,0(r16)
    b710:	000f0a00 	call	f0a0 <sbrk>
    b714:	00ffffc4 	movi	r3,-1
    b718:	10c00526 	beq	r2,r3,b730 <_sbrk_r+0x44>
    b71c:	dfc00217 	ldw	ra,8(sp)
    b720:	dc400117 	ldw	r17,4(sp)
    b724:	dc000017 	ldw	r16,0(sp)
    b728:	dec00304 	addi	sp,sp,12
    b72c:	f800283a 	ret
    b730:	80c00017 	ldw	r3,0(r16)
    b734:	183ff926 	beq	r3,zero,b71c <__alt_mem_onchip_memory+0xf780b71c>
    b738:	88c00015 	stw	r3,0(r17)
    b73c:	003ff706 	br	b71c <__alt_mem_onchip_memory+0xf780b71c>

0000b740 <__sread>:
    b740:	defffe04 	addi	sp,sp,-8
    b744:	dc000015 	stw	r16,0(sp)
    b748:	2821883a 	mov	r16,r5
    b74c:	2940038f 	ldh	r5,14(r5)
    b750:	dfc00115 	stw	ra,4(sp)
    b754:	000d68c0 	call	d68c <_read_r>
    b758:	10000716 	blt	r2,zero,b778 <__sread+0x38>
    b75c:	80c01417 	ldw	r3,80(r16)
    b760:	1887883a 	add	r3,r3,r2
    b764:	80c01415 	stw	r3,80(r16)
    b768:	dfc00117 	ldw	ra,4(sp)
    b76c:	dc000017 	ldw	r16,0(sp)
    b770:	dec00204 	addi	sp,sp,8
    b774:	f800283a 	ret
    b778:	80c0030b 	ldhu	r3,12(r16)
    b77c:	18fbffcc 	andi	r3,r3,61439
    b780:	80c0030d 	sth	r3,12(r16)
    b784:	dfc00117 	ldw	ra,4(sp)
    b788:	dc000017 	ldw	r16,0(sp)
    b78c:	dec00204 	addi	sp,sp,8
    b790:	f800283a 	ret

0000b794 <__seofread>:
    b794:	0005883a 	mov	r2,zero
    b798:	f800283a 	ret

0000b79c <__swrite>:
    b79c:	2880030b 	ldhu	r2,12(r5)
    b7a0:	defffb04 	addi	sp,sp,-20
    b7a4:	dcc00315 	stw	r19,12(sp)
    b7a8:	dc800215 	stw	r18,8(sp)
    b7ac:	dc400115 	stw	r17,4(sp)
    b7b0:	dc000015 	stw	r16,0(sp)
    b7b4:	dfc00415 	stw	ra,16(sp)
    b7b8:	10c0400c 	andi	r3,r2,256
    b7bc:	2821883a 	mov	r16,r5
    b7c0:	2023883a 	mov	r17,r4
    b7c4:	3025883a 	mov	r18,r6
    b7c8:	3827883a 	mov	r19,r7
    b7cc:	18000526 	beq	r3,zero,b7e4 <__swrite+0x48>
    b7d0:	2940038f 	ldh	r5,14(r5)
    b7d4:	01c00084 	movi	r7,2
    b7d8:	000d883a 	mov	r6,zero
    b7dc:	000d62c0 	call	d62c <_lseek_r>
    b7e0:	8080030b 	ldhu	r2,12(r16)
    b7e4:	8140038f 	ldh	r5,14(r16)
    b7e8:	10bbffcc 	andi	r2,r2,61439
    b7ec:	980f883a 	mov	r7,r19
    b7f0:	900d883a 	mov	r6,r18
    b7f4:	8809883a 	mov	r4,r17
    b7f8:	8080030d 	sth	r2,12(r16)
    b7fc:	dfc00417 	ldw	ra,16(sp)
    b800:	dcc00317 	ldw	r19,12(sp)
    b804:	dc800217 	ldw	r18,8(sp)
    b808:	dc400117 	ldw	r17,4(sp)
    b80c:	dc000017 	ldw	r16,0(sp)
    b810:	dec00504 	addi	sp,sp,20
    b814:	000d0f81 	jmpi	d0f8 <_write_r>

0000b818 <__sseek>:
    b818:	defffe04 	addi	sp,sp,-8
    b81c:	dc000015 	stw	r16,0(sp)
    b820:	2821883a 	mov	r16,r5
    b824:	2940038f 	ldh	r5,14(r5)
    b828:	dfc00115 	stw	ra,4(sp)
    b82c:	000d62c0 	call	d62c <_lseek_r>
    b830:	00ffffc4 	movi	r3,-1
    b834:	10c00826 	beq	r2,r3,b858 <__sseek+0x40>
    b838:	80c0030b 	ldhu	r3,12(r16)
    b83c:	80801415 	stw	r2,80(r16)
    b840:	18c40014 	ori	r3,r3,4096
    b844:	80c0030d 	sth	r3,12(r16)
    b848:	dfc00117 	ldw	ra,4(sp)
    b84c:	dc000017 	ldw	r16,0(sp)
    b850:	dec00204 	addi	sp,sp,8
    b854:	f800283a 	ret
    b858:	80c0030b 	ldhu	r3,12(r16)
    b85c:	18fbffcc 	andi	r3,r3,61439
    b860:	80c0030d 	sth	r3,12(r16)
    b864:	dfc00117 	ldw	ra,4(sp)
    b868:	dc000017 	ldw	r16,0(sp)
    b86c:	dec00204 	addi	sp,sp,8
    b870:	f800283a 	ret

0000b874 <__sclose>:
    b874:	2940038f 	ldh	r5,14(r5)
    b878:	000d1581 	jmpi	d158 <_close_r>

0000b87c <strcmp>:
    b87c:	2144b03a 	or	r2,r4,r5
    b880:	108000cc 	andi	r2,r2,3
    b884:	1000171e 	bne	r2,zero,b8e4 <strcmp+0x68>
    b888:	20800017 	ldw	r2,0(r4)
    b88c:	28c00017 	ldw	r3,0(r5)
    b890:	10c0141e 	bne	r2,r3,b8e4 <strcmp+0x68>
    b894:	027fbff4 	movhi	r9,65279
    b898:	4a7fbfc4 	addi	r9,r9,-257
    b89c:	0086303a 	nor	r3,zero,r2
    b8a0:	02202074 	movhi	r8,32897
    b8a4:	1245883a 	add	r2,r2,r9
    b8a8:	42202004 	addi	r8,r8,-32640
    b8ac:	10c4703a 	and	r2,r2,r3
    b8b0:	1204703a 	and	r2,r2,r8
    b8b4:	10000226 	beq	r2,zero,b8c0 <strcmp+0x44>
    b8b8:	00002306 	br	b948 <strcmp+0xcc>
    b8bc:	1000221e 	bne	r2,zero,b948 <strcmp+0xcc>
    b8c0:	21000104 	addi	r4,r4,4
    b8c4:	20c00017 	ldw	r3,0(r4)
    b8c8:	29400104 	addi	r5,r5,4
    b8cc:	29800017 	ldw	r6,0(r5)
    b8d0:	1a4f883a 	add	r7,r3,r9
    b8d4:	00c4303a 	nor	r2,zero,r3
    b8d8:	3884703a 	and	r2,r7,r2
    b8dc:	1204703a 	and	r2,r2,r8
    b8e0:	19bff626 	beq	r3,r6,b8bc <__alt_mem_onchip_memory+0xf780b8bc>
    b8e4:	20800003 	ldbu	r2,0(r4)
    b8e8:	10c03fcc 	andi	r3,r2,255
    b8ec:	18c0201c 	xori	r3,r3,128
    b8f0:	18ffe004 	addi	r3,r3,-128
    b8f4:	18000c26 	beq	r3,zero,b928 <strcmp+0xac>
    b8f8:	29800007 	ldb	r6,0(r5)
    b8fc:	19800326 	beq	r3,r6,b90c <strcmp+0x90>
    b900:	00001306 	br	b950 <strcmp+0xd4>
    b904:	29800007 	ldb	r6,0(r5)
    b908:	11800b1e 	bne	r2,r6,b938 <strcmp+0xbc>
    b90c:	21000044 	addi	r4,r4,1
    b910:	20c00003 	ldbu	r3,0(r4)
    b914:	29400044 	addi	r5,r5,1
    b918:	18803fcc 	andi	r2,r3,255
    b91c:	1080201c 	xori	r2,r2,128
    b920:	10bfe004 	addi	r2,r2,-128
    b924:	103ff71e 	bne	r2,zero,b904 <__alt_mem_onchip_memory+0xf780b904>
    b928:	0007883a 	mov	r3,zero
    b92c:	28800003 	ldbu	r2,0(r5)
    b930:	1885c83a 	sub	r2,r3,r2
    b934:	f800283a 	ret
    b938:	28800003 	ldbu	r2,0(r5)
    b93c:	18c03fcc 	andi	r3,r3,255
    b940:	1885c83a 	sub	r2,r3,r2
    b944:	f800283a 	ret
    b948:	0005883a 	mov	r2,zero
    b94c:	f800283a 	ret
    b950:	10c03fcc 	andi	r3,r2,255
    b954:	003ff506 	br	b92c <__alt_mem_onchip_memory+0xf780b92c>

0000b958 <__sprint_r.part.0>:
    b958:	28801917 	ldw	r2,100(r5)
    b95c:	defff604 	addi	sp,sp,-40
    b960:	dd400515 	stw	r21,20(sp)
    b964:	dfc00915 	stw	ra,36(sp)
    b968:	df000815 	stw	fp,32(sp)
    b96c:	ddc00715 	stw	r23,28(sp)
    b970:	dd800615 	stw	r22,24(sp)
    b974:	dd000415 	stw	r20,16(sp)
    b978:	dcc00315 	stw	r19,12(sp)
    b97c:	dc800215 	stw	r18,8(sp)
    b980:	dc400115 	stw	r17,4(sp)
    b984:	dc000015 	stw	r16,0(sp)
    b988:	1088000c 	andi	r2,r2,8192
    b98c:	302b883a 	mov	r21,r6
    b990:	10002e26 	beq	r2,zero,ba4c <__sprint_r.part.0+0xf4>
    b994:	30800217 	ldw	r2,8(r6)
    b998:	35800017 	ldw	r22,0(r6)
    b99c:	10002926 	beq	r2,zero,ba44 <__sprint_r.part.0+0xec>
    b9a0:	2827883a 	mov	r19,r5
    b9a4:	2029883a 	mov	r20,r4
    b9a8:	b5c00104 	addi	r23,r22,4
    b9ac:	04bfffc4 	movi	r18,-1
    b9b0:	bc400017 	ldw	r17,0(r23)
    b9b4:	b4000017 	ldw	r16,0(r22)
    b9b8:	0039883a 	mov	fp,zero
    b9bc:	8822d0ba 	srli	r17,r17,2
    b9c0:	8800031e 	bne	r17,zero,b9d0 <__sprint_r.part.0+0x78>
    b9c4:	00001806 	br	ba28 <__sprint_r.part.0+0xd0>
    b9c8:	84000104 	addi	r16,r16,4
    b9cc:	8f001526 	beq	r17,fp,ba24 <__sprint_r.part.0+0xcc>
    b9d0:	81400017 	ldw	r5,0(r16)
    b9d4:	980d883a 	mov	r6,r19
    b9d8:	a009883a 	mov	r4,r20
    b9dc:	000d4d80 	call	d4d8 <_fputwc_r>
    b9e0:	e7000044 	addi	fp,fp,1
    b9e4:	14bff81e 	bne	r2,r18,b9c8 <__alt_mem_onchip_memory+0xf780b9c8>
    b9e8:	9005883a 	mov	r2,r18
    b9ec:	a8000215 	stw	zero,8(r21)
    b9f0:	a8000115 	stw	zero,4(r21)
    b9f4:	dfc00917 	ldw	ra,36(sp)
    b9f8:	df000817 	ldw	fp,32(sp)
    b9fc:	ddc00717 	ldw	r23,28(sp)
    ba00:	dd800617 	ldw	r22,24(sp)
    ba04:	dd400517 	ldw	r21,20(sp)
    ba08:	dd000417 	ldw	r20,16(sp)
    ba0c:	dcc00317 	ldw	r19,12(sp)
    ba10:	dc800217 	ldw	r18,8(sp)
    ba14:	dc400117 	ldw	r17,4(sp)
    ba18:	dc000017 	ldw	r16,0(sp)
    ba1c:	dec00a04 	addi	sp,sp,40
    ba20:	f800283a 	ret
    ba24:	a8800217 	ldw	r2,8(r21)
    ba28:	8c63883a 	add	r17,r17,r17
    ba2c:	8c63883a 	add	r17,r17,r17
    ba30:	1445c83a 	sub	r2,r2,r17
    ba34:	a8800215 	stw	r2,8(r21)
    ba38:	b5800204 	addi	r22,r22,8
    ba3c:	bdc00204 	addi	r23,r23,8
    ba40:	103fdb1e 	bne	r2,zero,b9b0 <__alt_mem_onchip_memory+0xf780b9b0>
    ba44:	0005883a 	mov	r2,zero
    ba48:	003fe806 	br	b9ec <__alt_mem_onchip_memory+0xf780b9ec>
    ba4c:	0008a300 	call	8a30 <__sfvwrite_r>
    ba50:	003fe606 	br	b9ec <__alt_mem_onchip_memory+0xf780b9ec>

0000ba54 <__sprint_r>:
    ba54:	30c00217 	ldw	r3,8(r6)
    ba58:	18000126 	beq	r3,zero,ba60 <__sprint_r+0xc>
    ba5c:	000b9581 	jmpi	b958 <__sprint_r.part.0>
    ba60:	30000115 	stw	zero,4(r6)
    ba64:	0005883a 	mov	r2,zero
    ba68:	f800283a 	ret

0000ba6c <___vfiprintf_internal_r>:
    ba6c:	deffc904 	addi	sp,sp,-220
    ba70:	df003515 	stw	fp,212(sp)
    ba74:	dd003115 	stw	r20,196(sp)
    ba78:	dfc03615 	stw	ra,216(sp)
    ba7c:	ddc03415 	stw	r23,208(sp)
    ba80:	dd803315 	stw	r22,204(sp)
    ba84:	dd403215 	stw	r21,200(sp)
    ba88:	dcc03015 	stw	r19,192(sp)
    ba8c:	dc802f15 	stw	r18,188(sp)
    ba90:	dc402e15 	stw	r17,184(sp)
    ba94:	dc002d15 	stw	r16,180(sp)
    ba98:	d9002015 	stw	r4,128(sp)
    ba9c:	d9c02215 	stw	r7,136(sp)
    baa0:	2829883a 	mov	r20,r5
    baa4:	3039883a 	mov	fp,r6
    baa8:	20000226 	beq	r4,zero,bab4 <___vfiprintf_internal_r+0x48>
    baac:	20800e17 	ldw	r2,56(r4)
    bab0:	1000cf26 	beq	r2,zero,bdf0 <___vfiprintf_internal_r+0x384>
    bab4:	a080030b 	ldhu	r2,12(r20)
    bab8:	10c8000c 	andi	r3,r2,8192
    babc:	1800061e 	bne	r3,zero,bad8 <___vfiprintf_internal_r+0x6c>
    bac0:	a1001917 	ldw	r4,100(r20)
    bac4:	00f7ffc4 	movi	r3,-8193
    bac8:	10880014 	ori	r2,r2,8192
    bacc:	20c6703a 	and	r3,r4,r3
    bad0:	a080030d 	sth	r2,12(r20)
    bad4:	a0c01915 	stw	r3,100(r20)
    bad8:	10c0020c 	andi	r3,r2,8
    badc:	1800a926 	beq	r3,zero,bd84 <___vfiprintf_internal_r+0x318>
    bae0:	a0c00417 	ldw	r3,16(r20)
    bae4:	1800a726 	beq	r3,zero,bd84 <___vfiprintf_internal_r+0x318>
    bae8:	1080068c 	andi	r2,r2,26
    baec:	00c00284 	movi	r3,10
    baf0:	10c0ac26 	beq	r2,r3,bda4 <___vfiprintf_internal_r+0x338>
    baf4:	da801a04 	addi	r10,sp,104
    baf8:	da801e15 	stw	r10,120(sp)
    bafc:	d8801e17 	ldw	r2,120(sp)
    bb00:	da8019c4 	addi	r10,sp,103
    bb04:	05800074 	movhi	r22,1
    bb08:	05c00074 	movhi	r23,1
    bb0c:	da801f15 	stw	r10,124(sp)
    bb10:	1295c83a 	sub	r10,r2,r10
    bb14:	b5863e04 	addi	r22,r22,6392
    bb18:	bdc63a04 	addi	r23,r23,6376
    bb1c:	dec01a15 	stw	sp,104(sp)
    bb20:	d8001c15 	stw	zero,112(sp)
    bb24:	d8001b15 	stw	zero,108(sp)
    bb28:	d8002615 	stw	zero,152(sp)
    bb2c:	d8002315 	stw	zero,140(sp)
    bb30:	da802715 	stw	r10,156(sp)
    bb34:	d811883a 	mov	r8,sp
    bb38:	dd002115 	stw	r20,132(sp)
    bb3c:	e021883a 	mov	r16,fp
    bb40:	80800007 	ldb	r2,0(r16)
    bb44:	1003ea26 	beq	r2,zero,caf0 <___vfiprintf_internal_r+0x1084>
    bb48:	00c00944 	movi	r3,37
    bb4c:	8025883a 	mov	r18,r16
    bb50:	10c0021e 	bne	r2,r3,bb5c <___vfiprintf_internal_r+0xf0>
    bb54:	00001606 	br	bbb0 <___vfiprintf_internal_r+0x144>
    bb58:	10c00326 	beq	r2,r3,bb68 <___vfiprintf_internal_r+0xfc>
    bb5c:	94800044 	addi	r18,r18,1
    bb60:	90800007 	ldb	r2,0(r18)
    bb64:	103ffc1e 	bne	r2,zero,bb58 <__alt_mem_onchip_memory+0xf780bb58>
    bb68:	9423c83a 	sub	r17,r18,r16
    bb6c:	88001026 	beq	r17,zero,bbb0 <___vfiprintf_internal_r+0x144>
    bb70:	d8c01c17 	ldw	r3,112(sp)
    bb74:	d8801b17 	ldw	r2,108(sp)
    bb78:	44000015 	stw	r16,0(r8)
    bb7c:	88c7883a 	add	r3,r17,r3
    bb80:	10800044 	addi	r2,r2,1
    bb84:	44400115 	stw	r17,4(r8)
    bb88:	d8c01c15 	stw	r3,112(sp)
    bb8c:	d8801b15 	stw	r2,108(sp)
    bb90:	010001c4 	movi	r4,7
    bb94:	2080760e 	bge	r4,r2,bd70 <___vfiprintf_internal_r+0x304>
    bb98:	1803821e 	bne	r3,zero,c9a4 <___vfiprintf_internal_r+0xf38>
    bb9c:	da802317 	ldw	r10,140(sp)
    bba0:	d8001b15 	stw	zero,108(sp)
    bba4:	d811883a 	mov	r8,sp
    bba8:	5455883a 	add	r10,r10,r17
    bbac:	da802315 	stw	r10,140(sp)
    bbb0:	90800007 	ldb	r2,0(r18)
    bbb4:	10044626 	beq	r2,zero,ccd0 <___vfiprintf_internal_r+0x1264>
    bbb8:	90c00047 	ldb	r3,1(r18)
    bbbc:	94000044 	addi	r16,r18,1
    bbc0:	d8001d85 	stb	zero,118(sp)
    bbc4:	0009883a 	mov	r4,zero
    bbc8:	000f883a 	mov	r7,zero
    bbcc:	027fffc4 	movi	r9,-1
    bbd0:	0023883a 	mov	r17,zero
    bbd4:	0029883a 	mov	r20,zero
    bbd8:	01401604 	movi	r5,88
    bbdc:	01800244 	movi	r6,9
    bbe0:	03400a84 	movi	r13,42
    bbe4:	03001b04 	movi	r12,108
    bbe8:	84000044 	addi	r16,r16,1
    bbec:	18bff804 	addi	r2,r3,-32
    bbf0:	28827336 	bltu	r5,r2,c5c0 <___vfiprintf_internal_r+0xb54>
    bbf4:	100490ba 	slli	r2,r2,2
    bbf8:	02800074 	movhi	r10,1
    bbfc:	52af0304 	addi	r10,r10,-17396
    bc00:	1285883a 	add	r2,r2,r10
    bc04:	10800017 	ldw	r2,0(r2)
    bc08:	1000683a 	jmp	r2
    bc0c:	0000c2f4 	movhi	zero,779
    bc10:	0000c5c0 	call	c5c <initWeights+0x28>
    bc14:	0000c5c0 	call	c5c <initWeights+0x28>
    bc18:	0000c314 	movui	zero,780
    bc1c:	0000c5c0 	call	c5c <initWeights+0x28>
    bc20:	0000c5c0 	call	c5c <initWeights+0x28>
    bc24:	0000c5c0 	call	c5c <initWeights+0x28>
    bc28:	0000c5c0 	call	c5c <initWeights+0x28>
    bc2c:	0000c5c0 	call	c5c <initWeights+0x28>
    bc30:	0000c5c0 	call	c5c <initWeights+0x28>
    bc34:	0000c4fc 	xorhi	zero,zero,787
    bc38:	0000c518 	cmpnei	zero,zero,788
    bc3c:	0000c5c0 	call	c5c <initWeights+0x28>
    bc40:	0000be00 	call	be0 <WeightUpdatesIH1+0x108>
    bc44:	0000c528 	cmpgeui	zero,zero,788
    bc48:	0000c5c0 	call	c5c <initWeights+0x28>
    bc4c:	0000c320 	cmpeqi	zero,zero,780
    bc50:	0000c32c 	andhi	zero,zero,780
    bc54:	0000c32c 	andhi	zero,zero,780
    bc58:	0000c32c 	andhi	zero,zero,780
    bc5c:	0000c32c 	andhi	zero,zero,780
    bc60:	0000c32c 	andhi	zero,zero,780
    bc64:	0000c32c 	andhi	zero,zero,780
    bc68:	0000c32c 	andhi	zero,zero,780
    bc6c:	0000c32c 	andhi	zero,zero,780
    bc70:	0000c32c 	andhi	zero,zero,780
    bc74:	0000c5c0 	call	c5c <initWeights+0x28>
    bc78:	0000c5c0 	call	c5c <initWeights+0x28>
    bc7c:	0000c5c0 	call	c5c <initWeights+0x28>
    bc80:	0000c5c0 	call	c5c <initWeights+0x28>
    bc84:	0000c5c0 	call	c5c <initWeights+0x28>
    bc88:	0000c5c0 	call	c5c <initWeights+0x28>
    bc8c:	0000c5c0 	call	c5c <initWeights+0x28>
    bc90:	0000c5c0 	call	c5c <initWeights+0x28>
    bc94:	0000c5c0 	call	c5c <initWeights+0x28>
    bc98:	0000c5c0 	call	c5c <initWeights+0x28>
    bc9c:	0000c358 	cmpnei	zero,zero,781
    bca0:	0000c5c0 	call	c5c <initWeights+0x28>
    bca4:	0000c5c0 	call	c5c <initWeights+0x28>
    bca8:	0000c5c0 	call	c5c <initWeights+0x28>
    bcac:	0000c5c0 	call	c5c <initWeights+0x28>
    bcb0:	0000c5c0 	call	c5c <initWeights+0x28>
    bcb4:	0000c5c0 	call	c5c <initWeights+0x28>
    bcb8:	0000c5c0 	call	c5c <initWeights+0x28>
    bcbc:	0000c5c0 	call	c5c <initWeights+0x28>
    bcc0:	0000c5c0 	call	c5c <initWeights+0x28>
    bcc4:	0000c5c0 	call	c5c <initWeights+0x28>
    bcc8:	0000c390 	cmplti	zero,zero,782
    bccc:	0000c5c0 	call	c5c <initWeights+0x28>
    bcd0:	0000c5c0 	call	c5c <initWeights+0x28>
    bcd4:	0000c5c0 	call	c5c <initWeights+0x28>
    bcd8:	0000c5c0 	call	c5c <initWeights+0x28>
    bcdc:	0000c5c0 	call	c5c <initWeights+0x28>
    bce0:	0000c3e8 	cmpgeui	zero,zero,783
    bce4:	0000c5c0 	call	c5c <initWeights+0x28>
    bce8:	0000c5c0 	call	c5c <initWeights+0x28>
    bcec:	0000c458 	cmpnei	zero,zero,785
    bcf0:	0000c5c0 	call	c5c <initWeights+0x28>
    bcf4:	0000c5c0 	call	c5c <initWeights+0x28>
    bcf8:	0000c5c0 	call	c5c <initWeights+0x28>
    bcfc:	0000c5c0 	call	c5c <initWeights+0x28>
    bd00:	0000c5c0 	call	c5c <initWeights+0x28>
    bd04:	0000c5c0 	call	c5c <initWeights+0x28>
    bd08:	0000c5c0 	call	c5c <initWeights+0x28>
    bd0c:	0000c5c0 	call	c5c <initWeights+0x28>
    bd10:	0000c5c0 	call	c5c <initWeights+0x28>
    bd14:	0000c5c0 	call	c5c <initWeights+0x28>
    bd18:	0000c204 	movi	zero,776
    bd1c:	0000c230 	cmpltui	zero,zero,776
    bd20:	0000c5c0 	call	c5c <initWeights+0x28>
    bd24:	0000c5c0 	call	c5c <initWeights+0x28>
    bd28:	0000c5c0 	call	c5c <initWeights+0x28>
    bd2c:	0000c568 	cmpgeui	zero,zero,789
    bd30:	0000c230 	cmpltui	zero,zero,776
    bd34:	0000c5c0 	call	c5c <initWeights+0x28>
    bd38:	0000c5c0 	call	c5c <initWeights+0x28>
    bd3c:	0000c0c4 	movi	zero,771
    bd40:	0000c5c0 	call	c5c <initWeights+0x28>
    bd44:	0000c0d4 	movui	zero,771
    bd48:	0000c110 	cmplti	zero,zero,772
    bd4c:	0000be0c 	andi	zero,zero,760
    bd50:	0000c0b8 	rdprs	zero,zero,770
    bd54:	0000c5c0 	call	c5c <initWeights+0x28>
    bd58:	0000c494 	movui	zero,786
    bd5c:	0000c5c0 	call	c5c <initWeights+0x28>
    bd60:	0000c4ec 	andhi	zero,zero,787
    bd64:	0000c5c0 	call	c5c <initWeights+0x28>
    bd68:	0000c5c0 	call	c5c <initWeights+0x28>
    bd6c:	0000c1b0 	cmpltui	zero,zero,774
    bd70:	42000204 	addi	r8,r8,8
    bd74:	da802317 	ldw	r10,140(sp)
    bd78:	5455883a 	add	r10,r10,r17
    bd7c:	da802315 	stw	r10,140(sp)
    bd80:	003f8b06 	br	bbb0 <__alt_mem_onchip_memory+0xf780bbb0>
    bd84:	d9002017 	ldw	r4,128(sp)
    bd88:	a00b883a 	mov	r5,r20
    bd8c:	00065d80 	call	65d8 <__swsetup_r>
    bd90:	1003b11e 	bne	r2,zero,cc58 <___vfiprintf_internal_r+0x11ec>
    bd94:	a080030b 	ldhu	r2,12(r20)
    bd98:	00c00284 	movi	r3,10
    bd9c:	1080068c 	andi	r2,r2,26
    bda0:	10ff541e 	bne	r2,r3,baf4 <__alt_mem_onchip_memory+0xf780baf4>
    bda4:	a080038f 	ldh	r2,14(r20)
    bda8:	103f5216 	blt	r2,zero,baf4 <__alt_mem_onchip_memory+0xf780baf4>
    bdac:	d9c02217 	ldw	r7,136(sp)
    bdb0:	d9002017 	ldw	r4,128(sp)
    bdb4:	e00d883a 	mov	r6,fp
    bdb8:	a00b883a 	mov	r5,r20
    bdbc:	000cee40 	call	cee4 <__sbprintf>
    bdc0:	dfc03617 	ldw	ra,216(sp)
    bdc4:	df003517 	ldw	fp,212(sp)
    bdc8:	ddc03417 	ldw	r23,208(sp)
    bdcc:	dd803317 	ldw	r22,204(sp)
    bdd0:	dd403217 	ldw	r21,200(sp)
    bdd4:	dd003117 	ldw	r20,196(sp)
    bdd8:	dcc03017 	ldw	r19,192(sp)
    bddc:	dc802f17 	ldw	r18,188(sp)
    bde0:	dc402e17 	ldw	r17,184(sp)
    bde4:	dc002d17 	ldw	r16,180(sp)
    bde8:	dec03704 	addi	sp,sp,220
    bdec:	f800283a 	ret
    bdf0:	00085ac0 	call	85ac <__sinit>
    bdf4:	003f2f06 	br	bab4 <__alt_mem_onchip_memory+0xf780bab4>
    bdf8:	0463c83a 	sub	r17,zero,r17
    bdfc:	d8802215 	stw	r2,136(sp)
    be00:	a5000114 	ori	r20,r20,4
    be04:	80c00007 	ldb	r3,0(r16)
    be08:	003f7706 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    be0c:	00800c04 	movi	r2,48
    be10:	da802217 	ldw	r10,136(sp)
    be14:	d8801d05 	stb	r2,116(sp)
    be18:	00801e04 	movi	r2,120
    be1c:	d8801d45 	stb	r2,117(sp)
    be20:	d8001d85 	stb	zero,118(sp)
    be24:	50c00104 	addi	r3,r10,4
    be28:	54800017 	ldw	r18,0(r10)
    be2c:	0027883a 	mov	r19,zero
    be30:	a0800094 	ori	r2,r20,2
    be34:	48030b16 	blt	r9,zero,ca64 <___vfiprintf_internal_r+0xff8>
    be38:	00bfdfc4 	movi	r2,-129
    be3c:	a096703a 	and	r11,r20,r2
    be40:	d8c02215 	stw	r3,136(sp)
    be44:	5d000094 	ori	r20,r11,2
    be48:	90032b1e 	bne	r18,zero,caf8 <___vfiprintf_internal_r+0x108c>
    be4c:	00800074 	movhi	r2,1
    be50:	1085da04 	addi	r2,r2,5992
    be54:	d8802615 	stw	r2,152(sp)
    be58:	0039883a 	mov	fp,zero
    be5c:	48017b1e 	bne	r9,zero,c44c <___vfiprintf_internal_r+0x9e0>
    be60:	0013883a 	mov	r9,zero
    be64:	0027883a 	mov	r19,zero
    be68:	dd401a04 	addi	r21,sp,104
    be6c:	4825883a 	mov	r18,r9
    be70:	4cc0010e 	bge	r9,r19,be78 <___vfiprintf_internal_r+0x40c>
    be74:	9825883a 	mov	r18,r19
    be78:	e7003fcc 	andi	fp,fp,255
    be7c:	e700201c 	xori	fp,fp,128
    be80:	e73fe004 	addi	fp,fp,-128
    be84:	e0000126 	beq	fp,zero,be8c <___vfiprintf_internal_r+0x420>
    be88:	94800044 	addi	r18,r18,1
    be8c:	a380008c 	andi	r14,r20,2
    be90:	70000126 	beq	r14,zero,be98 <___vfiprintf_internal_r+0x42c>
    be94:	94800084 	addi	r18,r18,2
    be98:	a700210c 	andi	fp,r20,132
    be9c:	e001df1e 	bne	fp,zero,c61c <___vfiprintf_internal_r+0xbb0>
    bea0:	8c87c83a 	sub	r3,r17,r18
    bea4:	00c1dd0e 	bge	zero,r3,c61c <___vfiprintf_internal_r+0xbb0>
    bea8:	01c00404 	movi	r7,16
    beac:	d8801c17 	ldw	r2,112(sp)
    beb0:	38c3ad0e 	bge	r7,r3,cd68 <___vfiprintf_internal_r+0x12fc>
    beb4:	02800074 	movhi	r10,1
    beb8:	52863e04 	addi	r10,r10,6392
    bebc:	dc002915 	stw	r16,164(sp)
    bec0:	d9801b17 	ldw	r6,108(sp)
    bec4:	da802415 	stw	r10,144(sp)
    bec8:	03c001c4 	movi	r15,7
    becc:	da402515 	stw	r9,148(sp)
    bed0:	db802815 	stw	r14,160(sp)
    bed4:	1821883a 	mov	r16,r3
    bed8:	00000506 	br	bef0 <___vfiprintf_internal_r+0x484>
    bedc:	31400084 	addi	r5,r6,2
    bee0:	42000204 	addi	r8,r8,8
    bee4:	200d883a 	mov	r6,r4
    bee8:	843ffc04 	addi	r16,r16,-16
    beec:	3c000d0e 	bge	r7,r16,bf24 <___vfiprintf_internal_r+0x4b8>
    bef0:	10800404 	addi	r2,r2,16
    bef4:	31000044 	addi	r4,r6,1
    bef8:	45800015 	stw	r22,0(r8)
    befc:	41c00115 	stw	r7,4(r8)
    bf00:	d8801c15 	stw	r2,112(sp)
    bf04:	d9001b15 	stw	r4,108(sp)
    bf08:	793ff40e 	bge	r15,r4,bedc <__alt_mem_onchip_memory+0xf780bedc>
    bf0c:	1001b51e 	bne	r2,zero,c5e4 <___vfiprintf_internal_r+0xb78>
    bf10:	843ffc04 	addi	r16,r16,-16
    bf14:	000d883a 	mov	r6,zero
    bf18:	01400044 	movi	r5,1
    bf1c:	d811883a 	mov	r8,sp
    bf20:	3c3ff316 	blt	r7,r16,bef0 <__alt_mem_onchip_memory+0xf780bef0>
    bf24:	8007883a 	mov	r3,r16
    bf28:	da402517 	ldw	r9,148(sp)
    bf2c:	db802817 	ldw	r14,160(sp)
    bf30:	dc002917 	ldw	r16,164(sp)
    bf34:	da802417 	ldw	r10,144(sp)
    bf38:	1885883a 	add	r2,r3,r2
    bf3c:	40c00115 	stw	r3,4(r8)
    bf40:	42800015 	stw	r10,0(r8)
    bf44:	d8801c15 	stw	r2,112(sp)
    bf48:	d9401b15 	stw	r5,108(sp)
    bf4c:	00c001c4 	movi	r3,7
    bf50:	19426016 	blt	r3,r5,c8d4 <___vfiprintf_internal_r+0xe68>
    bf54:	d8c01d87 	ldb	r3,118(sp)
    bf58:	42000204 	addi	r8,r8,8
    bf5c:	29000044 	addi	r4,r5,1
    bf60:	1801b31e 	bne	r3,zero,c630 <___vfiprintf_internal_r+0xbc4>
    bf64:	7001c026 	beq	r14,zero,c668 <___vfiprintf_internal_r+0xbfc>
    bf68:	d8c01d04 	addi	r3,sp,116
    bf6c:	10800084 	addi	r2,r2,2
    bf70:	40c00015 	stw	r3,0(r8)
    bf74:	00c00084 	movi	r3,2
    bf78:	40c00115 	stw	r3,4(r8)
    bf7c:	d8801c15 	stw	r2,112(sp)
    bf80:	d9001b15 	stw	r4,108(sp)
    bf84:	00c001c4 	movi	r3,7
    bf88:	1902650e 	bge	r3,r4,c920 <___vfiprintf_internal_r+0xeb4>
    bf8c:	10029a1e 	bne	r2,zero,c9f8 <___vfiprintf_internal_r+0xf8c>
    bf90:	00c02004 	movi	r3,128
    bf94:	01000044 	movi	r4,1
    bf98:	000b883a 	mov	r5,zero
    bf9c:	d811883a 	mov	r8,sp
    bfa0:	e0c1b31e 	bne	fp,r3,c670 <___vfiprintf_internal_r+0xc04>
    bfa4:	8cb9c83a 	sub	fp,r17,r18
    bfa8:	0701b10e 	bge	zero,fp,c670 <___vfiprintf_internal_r+0xc04>
    bfac:	01c00404 	movi	r7,16
    bfb0:	3f03890e 	bge	r7,fp,cdd8 <___vfiprintf_internal_r+0x136c>
    bfb4:	00c00074 	movhi	r3,1
    bfb8:	18c63a04 	addi	r3,r3,6376
    bfbc:	d8c02415 	stw	r3,144(sp)
    bfc0:	8007883a 	mov	r3,r16
    bfc4:	034001c4 	movi	r13,7
    bfc8:	e021883a 	mov	r16,fp
    bfcc:	da402515 	stw	r9,148(sp)
    bfd0:	1839883a 	mov	fp,r3
    bfd4:	00000506 	br	bfec <___vfiprintf_internal_r+0x580>
    bfd8:	29800084 	addi	r6,r5,2
    bfdc:	42000204 	addi	r8,r8,8
    bfe0:	180b883a 	mov	r5,r3
    bfe4:	843ffc04 	addi	r16,r16,-16
    bfe8:	3c000d0e 	bge	r7,r16,c020 <___vfiprintf_internal_r+0x5b4>
    bfec:	10800404 	addi	r2,r2,16
    bff0:	28c00044 	addi	r3,r5,1
    bff4:	45c00015 	stw	r23,0(r8)
    bff8:	41c00115 	stw	r7,4(r8)
    bffc:	d8801c15 	stw	r2,112(sp)
    c000:	d8c01b15 	stw	r3,108(sp)
    c004:	68fff40e 	bge	r13,r3,bfd8 <__alt_mem_onchip_memory+0xf780bfd8>
    c008:	1002241e 	bne	r2,zero,c89c <___vfiprintf_internal_r+0xe30>
    c00c:	843ffc04 	addi	r16,r16,-16
    c010:	01800044 	movi	r6,1
    c014:	000b883a 	mov	r5,zero
    c018:	d811883a 	mov	r8,sp
    c01c:	3c3ff316 	blt	r7,r16,bfec <__alt_mem_onchip_memory+0xf780bfec>
    c020:	da402517 	ldw	r9,148(sp)
    c024:	e007883a 	mov	r3,fp
    c028:	8039883a 	mov	fp,r16
    c02c:	1821883a 	mov	r16,r3
    c030:	d8c02417 	ldw	r3,144(sp)
    c034:	1705883a 	add	r2,r2,fp
    c038:	47000115 	stw	fp,4(r8)
    c03c:	40c00015 	stw	r3,0(r8)
    c040:	d8801c15 	stw	r2,112(sp)
    c044:	d9801b15 	stw	r6,108(sp)
    c048:	00c001c4 	movi	r3,7
    c04c:	19827616 	blt	r3,r6,ca28 <___vfiprintf_internal_r+0xfbc>
    c050:	4cf9c83a 	sub	fp,r9,r19
    c054:	42000204 	addi	r8,r8,8
    c058:	31000044 	addi	r4,r6,1
    c05c:	300b883a 	mov	r5,r6
    c060:	07018516 	blt	zero,fp,c678 <___vfiprintf_internal_r+0xc0c>
    c064:	9885883a 	add	r2,r19,r2
    c068:	45400015 	stw	r21,0(r8)
    c06c:	44c00115 	stw	r19,4(r8)
    c070:	d8801c15 	stw	r2,112(sp)
    c074:	d9001b15 	stw	r4,108(sp)
    c078:	00c001c4 	movi	r3,7
    c07c:	1901dd0e 	bge	r3,r4,c7f4 <___vfiprintf_internal_r+0xd88>
    c080:	1002401e 	bne	r2,zero,c984 <___vfiprintf_internal_r+0xf18>
    c084:	d8001b15 	stw	zero,108(sp)
    c088:	a2c0010c 	andi	r11,r20,4
    c08c:	58000226 	beq	r11,zero,c098 <___vfiprintf_internal_r+0x62c>
    c090:	8ca7c83a 	sub	r19,r17,r18
    c094:	04c2f216 	blt	zero,r19,cc60 <___vfiprintf_internal_r+0x11f4>
    c098:	8c80010e 	bge	r17,r18,c0a0 <___vfiprintf_internal_r+0x634>
    c09c:	9023883a 	mov	r17,r18
    c0a0:	da802317 	ldw	r10,140(sp)
    c0a4:	5455883a 	add	r10,r10,r17
    c0a8:	da802315 	stw	r10,140(sp)
    c0ac:	d8001b15 	stw	zero,108(sp)
    c0b0:	d811883a 	mov	r8,sp
    c0b4:	003ea206 	br	bb40 <__alt_mem_onchip_memory+0xf780bb40>
    c0b8:	a5000814 	ori	r20,r20,32
    c0bc:	80c00007 	ldb	r3,0(r16)
    c0c0:	003ec906 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c0c4:	80c00007 	ldb	r3,0(r16)
    c0c8:	1b030926 	beq	r3,r12,ccf0 <___vfiprintf_internal_r+0x1284>
    c0cc:	a5000414 	ori	r20,r20,16
    c0d0:	003ec506 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c0d4:	21003fcc 	andi	r4,r4,255
    c0d8:	20035e1e 	bne	r4,zero,ce54 <___vfiprintf_internal_r+0x13e8>
    c0dc:	a080080c 	andi	r2,r20,32
    c0e0:	1002a526 	beq	r2,zero,cb78 <___vfiprintf_internal_r+0x110c>
    c0e4:	da802217 	ldw	r10,136(sp)
    c0e8:	50800017 	ldw	r2,0(r10)
    c0ec:	da802317 	ldw	r10,140(sp)
    c0f0:	5007d7fa 	srai	r3,r10,31
    c0f4:	da802217 	ldw	r10,136(sp)
    c0f8:	10c00115 	stw	r3,4(r2)
    c0fc:	52800104 	addi	r10,r10,4
    c100:	da802215 	stw	r10,136(sp)
    c104:	da802317 	ldw	r10,140(sp)
    c108:	12800015 	stw	r10,0(r2)
    c10c:	003e8c06 	br	bb40 <__alt_mem_onchip_memory+0xf780bb40>
    c110:	21003fcc 	andi	r4,r4,255
    c114:	2003511e 	bne	r4,zero,ce5c <___vfiprintf_internal_r+0x13f0>
    c118:	a080080c 	andi	r2,r20,32
    c11c:	1000a126 	beq	r2,zero,c3a4 <___vfiprintf_internal_r+0x938>
    c120:	da802217 	ldw	r10,136(sp)
    c124:	d8001d85 	stb	zero,118(sp)
    c128:	50800204 	addi	r2,r10,8
    c12c:	54800017 	ldw	r18,0(r10)
    c130:	54c00117 	ldw	r19,4(r10)
    c134:	4802b416 	blt	r9,zero,cc08 <___vfiprintf_internal_r+0x119c>
    c138:	013fdfc4 	movi	r4,-129
    c13c:	94c6b03a 	or	r3,r18,r19
    c140:	d8802215 	stw	r2,136(sp)
    c144:	a128703a 	and	r20,r20,r4
    c148:	1800a226 	beq	r3,zero,c3d4 <___vfiprintf_internal_r+0x968>
    c14c:	0039883a 	mov	fp,zero
    c150:	dd401a04 	addi	r21,sp,104
    c154:	9006d0fa 	srli	r3,r18,3
    c158:	9808977a 	slli	r4,r19,29
    c15c:	9826d0fa 	srli	r19,r19,3
    c160:	948001cc 	andi	r18,r18,7
    c164:	90800c04 	addi	r2,r18,48
    c168:	ad7fffc4 	addi	r21,r21,-1
    c16c:	20e4b03a 	or	r18,r4,r3
    c170:	a8800005 	stb	r2,0(r21)
    c174:	94c6b03a 	or	r3,r18,r19
    c178:	183ff61e 	bne	r3,zero,c154 <__alt_mem_onchip_memory+0xf780c154>
    c17c:	a0c0004c 	andi	r3,r20,1
    c180:	18005926 	beq	r3,zero,c2e8 <___vfiprintf_internal_r+0x87c>
    c184:	10803fcc 	andi	r2,r2,255
    c188:	1080201c 	xori	r2,r2,128
    c18c:	10bfe004 	addi	r2,r2,-128
    c190:	00c00c04 	movi	r3,48
    c194:	10c05426 	beq	r2,r3,c2e8 <___vfiprintf_internal_r+0x87c>
    c198:	da801e17 	ldw	r10,120(sp)
    c19c:	a8bfffc4 	addi	r2,r21,-1
    c1a0:	a8ffffc5 	stb	r3,-1(r21)
    c1a4:	50a7c83a 	sub	r19,r10,r2
    c1a8:	102b883a 	mov	r21,r2
    c1ac:	003f2f06 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    c1b0:	21003fcc 	andi	r4,r4,255
    c1b4:	2003421e 	bne	r4,zero,cec0 <___vfiprintf_internal_r+0x1454>
    c1b8:	00800074 	movhi	r2,1
    c1bc:	1085da04 	addi	r2,r2,5992
    c1c0:	d8802615 	stw	r2,152(sp)
    c1c4:	a080080c 	andi	r2,r20,32
    c1c8:	1000aa26 	beq	r2,zero,c474 <___vfiprintf_internal_r+0xa08>
    c1cc:	da802217 	ldw	r10,136(sp)
    c1d0:	54800017 	ldw	r18,0(r10)
    c1d4:	54c00117 	ldw	r19,4(r10)
    c1d8:	52800204 	addi	r10,r10,8
    c1dc:	da802215 	stw	r10,136(sp)
    c1e0:	a080004c 	andi	r2,r20,1
    c1e4:	1001d226 	beq	r2,zero,c930 <___vfiprintf_internal_r+0xec4>
    c1e8:	94c4b03a 	or	r2,r18,r19
    c1ec:	1002351e 	bne	r2,zero,cac4 <___vfiprintf_internal_r+0x1058>
    c1f0:	d8001d85 	stb	zero,118(sp)
    c1f4:	48022216 	blt	r9,zero,ca80 <___vfiprintf_internal_r+0x1014>
    c1f8:	00bfdfc4 	movi	r2,-129
    c1fc:	a0a8703a 	and	r20,r20,r2
    c200:	003f1506 	br	be58 <__alt_mem_onchip_memory+0xf780be58>
    c204:	da802217 	ldw	r10,136(sp)
    c208:	04800044 	movi	r18,1
    c20c:	d8001d85 	stb	zero,118(sp)
    c210:	50800017 	ldw	r2,0(r10)
    c214:	52800104 	addi	r10,r10,4
    c218:	da802215 	stw	r10,136(sp)
    c21c:	d8801005 	stb	r2,64(sp)
    c220:	9027883a 	mov	r19,r18
    c224:	dd401004 	addi	r21,sp,64
    c228:	0013883a 	mov	r9,zero
    c22c:	003f1706 	br	be8c <__alt_mem_onchip_memory+0xf780be8c>
    c230:	21003fcc 	andi	r4,r4,255
    c234:	2003201e 	bne	r4,zero,ceb8 <___vfiprintf_internal_r+0x144c>
    c238:	a080080c 	andi	r2,r20,32
    c23c:	10004b26 	beq	r2,zero,c36c <___vfiprintf_internal_r+0x900>
    c240:	da802217 	ldw	r10,136(sp)
    c244:	50800117 	ldw	r2,4(r10)
    c248:	54800017 	ldw	r18,0(r10)
    c24c:	52800204 	addi	r10,r10,8
    c250:	da802215 	stw	r10,136(sp)
    c254:	1027883a 	mov	r19,r2
    c258:	10022c16 	blt	r2,zero,cb0c <___vfiprintf_internal_r+0x10a0>
    c25c:	df001d83 	ldbu	fp,118(sp)
    c260:	48007216 	blt	r9,zero,c42c <___vfiprintf_internal_r+0x9c0>
    c264:	00ffdfc4 	movi	r3,-129
    c268:	94c4b03a 	or	r2,r18,r19
    c26c:	a0e8703a 	and	r20,r20,r3
    c270:	1000cc26 	beq	r2,zero,c5a4 <___vfiprintf_internal_r+0xb38>
    c274:	98021026 	beq	r19,zero,cab8 <___vfiprintf_internal_r+0x104c>
    c278:	dc402415 	stw	r17,144(sp)
    c27c:	dc002515 	stw	r16,148(sp)
    c280:	9823883a 	mov	r17,r19
    c284:	9021883a 	mov	r16,r18
    c288:	dd401a04 	addi	r21,sp,104
    c28c:	4825883a 	mov	r18,r9
    c290:	4027883a 	mov	r19,r8
    c294:	8009883a 	mov	r4,r16
    c298:	880b883a 	mov	r5,r17
    c29c:	01800284 	movi	r6,10
    c2a0:	000f883a 	mov	r7,zero
    c2a4:	000deac0 	call	deac <__umoddi3>
    c2a8:	10800c04 	addi	r2,r2,48
    c2ac:	ad7fffc4 	addi	r21,r21,-1
    c2b0:	8009883a 	mov	r4,r16
    c2b4:	880b883a 	mov	r5,r17
    c2b8:	a8800005 	stb	r2,0(r21)
    c2bc:	01800284 	movi	r6,10
    c2c0:	000f883a 	mov	r7,zero
    c2c4:	000d9340 	call	d934 <__udivdi3>
    c2c8:	1021883a 	mov	r16,r2
    c2cc:	10c4b03a 	or	r2,r2,r3
    c2d0:	1823883a 	mov	r17,r3
    c2d4:	103fef1e 	bne	r2,zero,c294 <__alt_mem_onchip_memory+0xf780c294>
    c2d8:	dc402417 	ldw	r17,144(sp)
    c2dc:	dc002517 	ldw	r16,148(sp)
    c2e0:	9013883a 	mov	r9,r18
    c2e4:	9811883a 	mov	r8,r19
    c2e8:	da801e17 	ldw	r10,120(sp)
    c2ec:	5567c83a 	sub	r19,r10,r21
    c2f0:	003ede06 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    c2f4:	38803fcc 	andi	r2,r7,255
    c2f8:	1080201c 	xori	r2,r2,128
    c2fc:	10bfe004 	addi	r2,r2,-128
    c300:	1002371e 	bne	r2,zero,cbe0 <___vfiprintf_internal_r+0x1174>
    c304:	01000044 	movi	r4,1
    c308:	01c00804 	movi	r7,32
    c30c:	80c00007 	ldb	r3,0(r16)
    c310:	003e3506 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c314:	a5000054 	ori	r20,r20,1
    c318:	80c00007 	ldb	r3,0(r16)
    c31c:	003e3206 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c320:	a5002014 	ori	r20,r20,128
    c324:	80c00007 	ldb	r3,0(r16)
    c328:	003e2f06 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c32c:	8015883a 	mov	r10,r16
    c330:	0023883a 	mov	r17,zero
    c334:	18bff404 	addi	r2,r3,-48
    c338:	50c00007 	ldb	r3,0(r10)
    c33c:	8c4002a4 	muli	r17,r17,10
    c340:	84000044 	addi	r16,r16,1
    c344:	8015883a 	mov	r10,r16
    c348:	1463883a 	add	r17,r2,r17
    c34c:	18bff404 	addi	r2,r3,-48
    c350:	30bff92e 	bgeu	r6,r2,c338 <__alt_mem_onchip_memory+0xf780c338>
    c354:	003e2506 	br	bbec <__alt_mem_onchip_memory+0xf780bbec>
    c358:	21003fcc 	andi	r4,r4,255
    c35c:	2002d41e 	bne	r4,zero,ceb0 <___vfiprintf_internal_r+0x1444>
    c360:	a5000414 	ori	r20,r20,16
    c364:	a080080c 	andi	r2,r20,32
    c368:	103fb51e 	bne	r2,zero,c240 <__alt_mem_onchip_memory+0xf780c240>
    c36c:	a080040c 	andi	r2,r20,16
    c370:	1001f826 	beq	r2,zero,cb54 <___vfiprintf_internal_r+0x10e8>
    c374:	da802217 	ldw	r10,136(sp)
    c378:	54800017 	ldw	r18,0(r10)
    c37c:	52800104 	addi	r10,r10,4
    c380:	da802215 	stw	r10,136(sp)
    c384:	9027d7fa 	srai	r19,r18,31
    c388:	9805883a 	mov	r2,r19
    c38c:	003fb206 	br	c258 <__alt_mem_onchip_memory+0xf780c258>
    c390:	21003fcc 	andi	r4,r4,255
    c394:	2002c41e 	bne	r4,zero,cea8 <___vfiprintf_internal_r+0x143c>
    c398:	a5000414 	ori	r20,r20,16
    c39c:	a080080c 	andi	r2,r20,32
    c3a0:	103f5f1e 	bne	r2,zero,c120 <__alt_mem_onchip_memory+0xf780c120>
    c3a4:	a080040c 	andi	r2,r20,16
    c3a8:	10020f26 	beq	r2,zero,cbe8 <___vfiprintf_internal_r+0x117c>
    c3ac:	da802217 	ldw	r10,136(sp)
    c3b0:	d8001d85 	stb	zero,118(sp)
    c3b4:	0027883a 	mov	r19,zero
    c3b8:	50800104 	addi	r2,r10,4
    c3bc:	54800017 	ldw	r18,0(r10)
    c3c0:	48021116 	blt	r9,zero,cc08 <___vfiprintf_internal_r+0x119c>
    c3c4:	00ffdfc4 	movi	r3,-129
    c3c8:	d8802215 	stw	r2,136(sp)
    c3cc:	a0e8703a 	and	r20,r20,r3
    c3d0:	903f5e1e 	bne	r18,zero,c14c <__alt_mem_onchip_memory+0xf780c14c>
    c3d4:	0039883a 	mov	fp,zero
    c3d8:	4802a626 	beq	r9,zero,ce74 <___vfiprintf_internal_r+0x1408>
    c3dc:	0025883a 	mov	r18,zero
    c3e0:	0027883a 	mov	r19,zero
    c3e4:	003f5a06 	br	c150 <__alt_mem_onchip_memory+0xf780c150>
    c3e8:	21003fcc 	andi	r4,r4,255
    c3ec:	20029f1e 	bne	r4,zero,ce6c <___vfiprintf_internal_r+0x1400>
    c3f0:	a5000414 	ori	r20,r20,16
    c3f4:	a080080c 	andi	r2,r20,32
    c3f8:	10005e1e 	bne	r2,zero,c574 <___vfiprintf_internal_r+0xb08>
    c3fc:	a080040c 	andi	r2,r20,16
    c400:	1001a21e 	bne	r2,zero,ca8c <___vfiprintf_internal_r+0x1020>
    c404:	a080100c 	andi	r2,r20,64
    c408:	d8001d85 	stb	zero,118(sp)
    c40c:	da802217 	ldw	r10,136(sp)
    c410:	1002231e 	bne	r2,zero,cca0 <___vfiprintf_internal_r+0x1234>
    c414:	50800104 	addi	r2,r10,4
    c418:	54800017 	ldw	r18,0(r10)
    c41c:	0027883a 	mov	r19,zero
    c420:	4801a00e 	bge	r9,zero,caa4 <___vfiprintf_internal_r+0x1038>
    c424:	d8802215 	stw	r2,136(sp)
    c428:	0039883a 	mov	fp,zero
    c42c:	94c4b03a 	or	r2,r18,r19
    c430:	103f901e 	bne	r2,zero,c274 <__alt_mem_onchip_memory+0xf780c274>
    c434:	00800044 	movi	r2,1
    c438:	10803fcc 	andi	r2,r2,255
    c43c:	00c00044 	movi	r3,1
    c440:	10c05926 	beq	r2,r3,c5a8 <___vfiprintf_internal_r+0xb3c>
    c444:	00c00084 	movi	r3,2
    c448:	10ffe41e 	bne	r2,r3,c3dc <__alt_mem_onchip_memory+0xf780c3dc>
    c44c:	0025883a 	mov	r18,zero
    c450:	0027883a 	mov	r19,zero
    c454:	00013d06 	br	c94c <___vfiprintf_internal_r+0xee0>
    c458:	21003fcc 	andi	r4,r4,255
    c45c:	2002811e 	bne	r4,zero,ce64 <___vfiprintf_internal_r+0x13f8>
    c460:	00800074 	movhi	r2,1
    c464:	1085d504 	addi	r2,r2,5972
    c468:	d8802615 	stw	r2,152(sp)
    c46c:	a080080c 	andi	r2,r20,32
    c470:	103f561e 	bne	r2,zero,c1cc <__alt_mem_onchip_memory+0xf780c1cc>
    c474:	a080040c 	andi	r2,r20,16
    c478:	1001d126 	beq	r2,zero,cbc0 <___vfiprintf_internal_r+0x1154>
    c47c:	da802217 	ldw	r10,136(sp)
    c480:	0027883a 	mov	r19,zero
    c484:	54800017 	ldw	r18,0(r10)
    c488:	52800104 	addi	r10,r10,4
    c48c:	da802215 	stw	r10,136(sp)
    c490:	003f5306 	br	c1e0 <__alt_mem_onchip_memory+0xf780c1e0>
    c494:	da802217 	ldw	r10,136(sp)
    c498:	d8001d85 	stb	zero,118(sp)
    c49c:	55400017 	ldw	r21,0(r10)
    c4a0:	50c00104 	addi	r3,r10,4
    c4a4:	a8024226 	beq	r21,zero,cdb0 <___vfiprintf_internal_r+0x1344>
    c4a8:	48021816 	blt	r9,zero,cd0c <___vfiprintf_internal_r+0x12a0>
    c4ac:	480d883a 	mov	r6,r9
    c4b0:	000b883a 	mov	r5,zero
    c4b4:	a809883a 	mov	r4,r21
    c4b8:	d8c02a15 	stw	r3,168(sp)
    c4bc:	da002b15 	stw	r8,172(sp)
    c4c0:	da402c15 	stw	r9,176(sp)
    c4c4:	0009b740 	call	9b74 <memchr>
    c4c8:	d8c02a17 	ldw	r3,168(sp)
    c4cc:	da002b17 	ldw	r8,172(sp)
    c4d0:	da402c17 	ldw	r9,176(sp)
    c4d4:	10024826 	beq	r2,zero,cdf8 <___vfiprintf_internal_r+0x138c>
    c4d8:	1567c83a 	sub	r19,r2,r21
    c4dc:	df001d83 	ldbu	fp,118(sp)
    c4e0:	d8c02215 	stw	r3,136(sp)
    c4e4:	0013883a 	mov	r9,zero
    c4e8:	003e6006 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    c4ec:	21003fcc 	andi	r4,r4,255
    c4f0:	203fc026 	beq	r4,zero,c3f4 <__alt_mem_onchip_memory+0xf780c3f4>
    c4f4:	d9c01d85 	stb	r7,118(sp)
    c4f8:	003fbe06 	br	c3f4 <__alt_mem_onchip_memory+0xf780c3f4>
    c4fc:	da802217 	ldw	r10,136(sp)
    c500:	54400017 	ldw	r17,0(r10)
    c504:	50800104 	addi	r2,r10,4
    c508:	883e3b16 	blt	r17,zero,bdf8 <__alt_mem_onchip_memory+0xf780bdf8>
    c50c:	d8802215 	stw	r2,136(sp)
    c510:	80c00007 	ldb	r3,0(r16)
    c514:	003db406 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c518:	01000044 	movi	r4,1
    c51c:	01c00ac4 	movi	r7,43
    c520:	80c00007 	ldb	r3,0(r16)
    c524:	003db006 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c528:	80c00007 	ldb	r3,0(r16)
    c52c:	82800044 	addi	r10,r16,1
    c530:	1b423c26 	beq	r3,r13,ce24 <___vfiprintf_internal_r+0x13b8>
    c534:	18bff404 	addi	r2,r3,-48
    c538:	0013883a 	mov	r9,zero
    c53c:	30822b36 	bltu	r6,r2,cdec <___vfiprintf_internal_r+0x1380>
    c540:	50c00007 	ldb	r3,0(r10)
    c544:	4a4002a4 	muli	r9,r9,10
    c548:	54000044 	addi	r16,r10,1
    c54c:	8015883a 	mov	r10,r16
    c550:	4893883a 	add	r9,r9,r2
    c554:	18bff404 	addi	r2,r3,-48
    c558:	30bff92e 	bgeu	r6,r2,c540 <__alt_mem_onchip_memory+0xf780c540>
    c55c:	483da30e 	bge	r9,zero,bbec <__alt_mem_onchip_memory+0xf780bbec>
    c560:	027fffc4 	movi	r9,-1
    c564:	003da106 	br	bbec <__alt_mem_onchip_memory+0xf780bbec>
    c568:	a5001014 	ori	r20,r20,64
    c56c:	80c00007 	ldb	r3,0(r16)
    c570:	003d9d06 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    c574:	da802217 	ldw	r10,136(sp)
    c578:	d8001d85 	stb	zero,118(sp)
    c57c:	50c00204 	addi	r3,r10,8
    c580:	54800017 	ldw	r18,0(r10)
    c584:	54c00117 	ldw	r19,4(r10)
    c588:	4801ca16 	blt	r9,zero,ccb4 <___vfiprintf_internal_r+0x1248>
    c58c:	013fdfc4 	movi	r4,-129
    c590:	94c4b03a 	or	r2,r18,r19
    c594:	d8c02215 	stw	r3,136(sp)
    c598:	a128703a 	and	r20,r20,r4
    c59c:	0039883a 	mov	fp,zero
    c5a0:	103f341e 	bne	r2,zero,c274 <__alt_mem_onchip_memory+0xf780c274>
    c5a4:	483e2e26 	beq	r9,zero,be60 <__alt_mem_onchip_memory+0xf780be60>
    c5a8:	0025883a 	mov	r18,zero
    c5ac:	94800c04 	addi	r18,r18,48
    c5b0:	dc8019c5 	stb	r18,103(sp)
    c5b4:	dcc02717 	ldw	r19,156(sp)
    c5b8:	dd4019c4 	addi	r21,sp,103
    c5bc:	003e2b06 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    c5c0:	21003fcc 	andi	r4,r4,255
    c5c4:	2002361e 	bne	r4,zero,cea0 <___vfiprintf_internal_r+0x1434>
    c5c8:	1801c126 	beq	r3,zero,ccd0 <___vfiprintf_internal_r+0x1264>
    c5cc:	04800044 	movi	r18,1
    c5d0:	d8c01005 	stb	r3,64(sp)
    c5d4:	d8001d85 	stb	zero,118(sp)
    c5d8:	9027883a 	mov	r19,r18
    c5dc:	dd401004 	addi	r21,sp,64
    c5e0:	003f1106 	br	c228 <__alt_mem_onchip_memory+0xf780c228>
    c5e4:	d9402117 	ldw	r5,132(sp)
    c5e8:	d9002017 	ldw	r4,128(sp)
    c5ec:	d9801a04 	addi	r6,sp,104
    c5f0:	d9c02b15 	stw	r7,172(sp)
    c5f4:	dbc02a15 	stw	r15,168(sp)
    c5f8:	000b9580 	call	b958 <__sprint_r.part.0>
    c5fc:	d9c02b17 	ldw	r7,172(sp)
    c600:	dbc02a17 	ldw	r15,168(sp)
    c604:	10006d1e 	bne	r2,zero,c7bc <___vfiprintf_internal_r+0xd50>
    c608:	d9801b17 	ldw	r6,108(sp)
    c60c:	d8801c17 	ldw	r2,112(sp)
    c610:	d811883a 	mov	r8,sp
    c614:	31400044 	addi	r5,r6,1
    c618:	003e3306 	br	bee8 <__alt_mem_onchip_memory+0xf780bee8>
    c61c:	d9401b17 	ldw	r5,108(sp)
    c620:	d8801c17 	ldw	r2,112(sp)
    c624:	29000044 	addi	r4,r5,1
    c628:	d8c01d87 	ldb	r3,118(sp)
    c62c:	183e4d26 	beq	r3,zero,bf64 <__alt_mem_onchip_memory+0xf780bf64>
    c630:	00c00044 	movi	r3,1
    c634:	d9401d84 	addi	r5,sp,118
    c638:	10c5883a 	add	r2,r2,r3
    c63c:	41400015 	stw	r5,0(r8)
    c640:	40c00115 	stw	r3,4(r8)
    c644:	d8801c15 	stw	r2,112(sp)
    c648:	d9001b15 	stw	r4,108(sp)
    c64c:	014001c4 	movi	r5,7
    c650:	2900a90e 	bge	r5,r4,c8f8 <___vfiprintf_internal_r+0xe8c>
    c654:	1000da1e 	bne	r2,zero,c9c0 <___vfiprintf_internal_r+0xf54>
    c658:	7000ab1e 	bne	r14,zero,c908 <___vfiprintf_internal_r+0xe9c>
    c65c:	000b883a 	mov	r5,zero
    c660:	1809883a 	mov	r4,r3
    c664:	d811883a 	mov	r8,sp
    c668:	00c02004 	movi	r3,128
    c66c:	e0fe4d26 	beq	fp,r3,bfa4 <__alt_mem_onchip_memory+0xf780bfa4>
    c670:	4cf9c83a 	sub	fp,r9,r19
    c674:	073e7b0e 	bge	zero,fp,c064 <__alt_mem_onchip_memory+0xf780c064>
    c678:	01c00404 	movi	r7,16
    c67c:	3f01900e 	bge	r7,fp,ccc0 <___vfiprintf_internal_r+0x1254>
    c680:	00c00074 	movhi	r3,1
    c684:	18c63a04 	addi	r3,r3,6376
    c688:	d8c02415 	stw	r3,144(sp)
    c68c:	034001c4 	movi	r13,7
    c690:	00000506 	br	c6a8 <___vfiprintf_internal_r+0xc3c>
    c694:	29000084 	addi	r4,r5,2
    c698:	42000204 	addi	r8,r8,8
    c69c:	180b883a 	mov	r5,r3
    c6a0:	e73ffc04 	addi	fp,fp,-16
    c6a4:	3f000d0e 	bge	r7,fp,c6dc <___vfiprintf_internal_r+0xc70>
    c6a8:	10800404 	addi	r2,r2,16
    c6ac:	28c00044 	addi	r3,r5,1
    c6b0:	45c00015 	stw	r23,0(r8)
    c6b4:	41c00115 	stw	r7,4(r8)
    c6b8:	d8801c15 	stw	r2,112(sp)
    c6bc:	d8c01b15 	stw	r3,108(sp)
    c6c0:	68fff40e 	bge	r13,r3,c694 <__alt_mem_onchip_memory+0xf780c694>
    c6c4:	1000101e 	bne	r2,zero,c708 <___vfiprintf_internal_r+0xc9c>
    c6c8:	e73ffc04 	addi	fp,fp,-16
    c6cc:	01000044 	movi	r4,1
    c6d0:	000b883a 	mov	r5,zero
    c6d4:	d811883a 	mov	r8,sp
    c6d8:	3f3ff316 	blt	r7,fp,c6a8 <__alt_mem_onchip_memory+0xf780c6a8>
    c6dc:	da802417 	ldw	r10,144(sp)
    c6e0:	1705883a 	add	r2,r2,fp
    c6e4:	47000115 	stw	fp,4(r8)
    c6e8:	42800015 	stw	r10,0(r8)
    c6ec:	d8801c15 	stw	r2,112(sp)
    c6f0:	d9001b15 	stw	r4,108(sp)
    c6f4:	00c001c4 	movi	r3,7
    c6f8:	19003616 	blt	r3,r4,c7d4 <___vfiprintf_internal_r+0xd68>
    c6fc:	42000204 	addi	r8,r8,8
    c700:	21000044 	addi	r4,r4,1
    c704:	003e5706 	br	c064 <__alt_mem_onchip_memory+0xf780c064>
    c708:	d9402117 	ldw	r5,132(sp)
    c70c:	d9002017 	ldw	r4,128(sp)
    c710:	d9801a04 	addi	r6,sp,104
    c714:	d9c02b15 	stw	r7,172(sp)
    c718:	db402a15 	stw	r13,168(sp)
    c71c:	000b9580 	call	b958 <__sprint_r.part.0>
    c720:	d9c02b17 	ldw	r7,172(sp)
    c724:	db402a17 	ldw	r13,168(sp)
    c728:	1000241e 	bne	r2,zero,c7bc <___vfiprintf_internal_r+0xd50>
    c72c:	d9401b17 	ldw	r5,108(sp)
    c730:	d8801c17 	ldw	r2,112(sp)
    c734:	d811883a 	mov	r8,sp
    c738:	29000044 	addi	r4,r5,1
    c73c:	003fd806 	br	c6a0 <__alt_mem_onchip_memory+0xf780c6a0>
    c740:	d9401b17 	ldw	r5,108(sp)
    c744:	00c00074 	movhi	r3,1
    c748:	18c63e04 	addi	r3,r3,6392
    c74c:	d8c02415 	stw	r3,144(sp)
    c750:	29400044 	addi	r5,r5,1
    c754:	d8c02417 	ldw	r3,144(sp)
    c758:	14c5883a 	add	r2,r2,r19
    c75c:	44c00115 	stw	r19,4(r8)
    c760:	40c00015 	stw	r3,0(r8)
    c764:	d8801c15 	stw	r2,112(sp)
    c768:	d9401b15 	stw	r5,108(sp)
    c76c:	00c001c4 	movi	r3,7
    c770:	1940070e 	bge	r3,r5,c790 <___vfiprintf_internal_r+0xd24>
    c774:	103e4826 	beq	r2,zero,c098 <__alt_mem_onchip_memory+0xf780c098>
    c778:	d9402117 	ldw	r5,132(sp)
    c77c:	d9002017 	ldw	r4,128(sp)
    c780:	d9801a04 	addi	r6,sp,104
    c784:	000b9580 	call	b958 <__sprint_r.part.0>
    c788:	10000c1e 	bne	r2,zero,c7bc <___vfiprintf_internal_r+0xd50>
    c78c:	d8801c17 	ldw	r2,112(sp)
    c790:	8c80010e 	bge	r17,r18,c798 <___vfiprintf_internal_r+0xd2c>
    c794:	9023883a 	mov	r17,r18
    c798:	da802317 	ldw	r10,140(sp)
    c79c:	5455883a 	add	r10,r10,r17
    c7a0:	da802315 	stw	r10,140(sp)
    c7a4:	103e4126 	beq	r2,zero,c0ac <__alt_mem_onchip_memory+0xf780c0ac>
    c7a8:	d9402117 	ldw	r5,132(sp)
    c7ac:	d9002017 	ldw	r4,128(sp)
    c7b0:	d9801a04 	addi	r6,sp,104
    c7b4:	000b9580 	call	b958 <__sprint_r.part.0>
    c7b8:	103e3c26 	beq	r2,zero,c0ac <__alt_mem_onchip_memory+0xf780c0ac>
    c7bc:	dd002117 	ldw	r20,132(sp)
    c7c0:	a080030b 	ldhu	r2,12(r20)
    c7c4:	1080100c 	andi	r2,r2,64
    c7c8:	1001231e 	bne	r2,zero,cc58 <___vfiprintf_internal_r+0x11ec>
    c7cc:	d8802317 	ldw	r2,140(sp)
    c7d0:	003d7b06 	br	bdc0 <__alt_mem_onchip_memory+0xf780bdc0>
    c7d4:	1000991e 	bne	r2,zero,ca3c <___vfiprintf_internal_r+0xfd0>
    c7d8:	00c00044 	movi	r3,1
    c7dc:	9805883a 	mov	r2,r19
    c7e0:	dd400015 	stw	r21,0(sp)
    c7e4:	dcc00115 	stw	r19,4(sp)
    c7e8:	dcc01c15 	stw	r19,112(sp)
    c7ec:	d8c01b15 	stw	r3,108(sp)
    c7f0:	d811883a 	mov	r8,sp
    c7f4:	42000204 	addi	r8,r8,8
    c7f8:	a2c0010c 	andi	r11,r20,4
    c7fc:	583fe426 	beq	r11,zero,c790 <__alt_mem_onchip_memory+0xf780c790>
    c800:	8ca7c83a 	sub	r19,r17,r18
    c804:	04ffe20e 	bge	zero,r19,c790 <__alt_mem_onchip_memory+0xf780c790>
    c808:	01c00404 	movi	r7,16
    c80c:	3cffcc0e 	bge	r7,r19,c740 <__alt_mem_onchip_memory+0xf780c740>
    c810:	02800074 	movhi	r10,1
    c814:	52863e04 	addi	r10,r10,6392
    c818:	d9001b17 	ldw	r4,108(sp)
    c81c:	da802415 	stw	r10,144(sp)
    c820:	382b883a 	mov	r21,r7
    c824:	050001c4 	movi	r20,7
    c828:	df002017 	ldw	fp,128(sp)
    c82c:	00000506 	br	c844 <___vfiprintf_internal_r+0xdd8>
    c830:	21400084 	addi	r5,r4,2
    c834:	42000204 	addi	r8,r8,8
    c838:	1809883a 	mov	r4,r3
    c83c:	9cfffc04 	addi	r19,r19,-16
    c840:	acffc40e 	bge	r21,r19,c754 <__alt_mem_onchip_memory+0xf780c754>
    c844:	10800404 	addi	r2,r2,16
    c848:	20c00044 	addi	r3,r4,1
    c84c:	45800015 	stw	r22,0(r8)
    c850:	45400115 	stw	r21,4(r8)
    c854:	d8801c15 	stw	r2,112(sp)
    c858:	d8c01b15 	stw	r3,108(sp)
    c85c:	a0fff40e 	bge	r20,r3,c830 <__alt_mem_onchip_memory+0xf780c830>
    c860:	1000041e 	bne	r2,zero,c874 <___vfiprintf_internal_r+0xe08>
    c864:	01400044 	movi	r5,1
    c868:	0009883a 	mov	r4,zero
    c86c:	d811883a 	mov	r8,sp
    c870:	003ff206 	br	c83c <__alt_mem_onchip_memory+0xf780c83c>
    c874:	d9402117 	ldw	r5,132(sp)
    c878:	d9801a04 	addi	r6,sp,104
    c87c:	e009883a 	mov	r4,fp
    c880:	000b9580 	call	b958 <__sprint_r.part.0>
    c884:	103fcd1e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    c888:	d9001b17 	ldw	r4,108(sp)
    c88c:	d8801c17 	ldw	r2,112(sp)
    c890:	d811883a 	mov	r8,sp
    c894:	21400044 	addi	r5,r4,1
    c898:	003fe806 	br	c83c <__alt_mem_onchip_memory+0xf780c83c>
    c89c:	d9402117 	ldw	r5,132(sp)
    c8a0:	d9002017 	ldw	r4,128(sp)
    c8a4:	d9801a04 	addi	r6,sp,104
    c8a8:	d9c02b15 	stw	r7,172(sp)
    c8ac:	db402a15 	stw	r13,168(sp)
    c8b0:	000b9580 	call	b958 <__sprint_r.part.0>
    c8b4:	d9c02b17 	ldw	r7,172(sp)
    c8b8:	db402a17 	ldw	r13,168(sp)
    c8bc:	103fbf1e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    c8c0:	d9401b17 	ldw	r5,108(sp)
    c8c4:	d8801c17 	ldw	r2,112(sp)
    c8c8:	d811883a 	mov	r8,sp
    c8cc:	29800044 	addi	r6,r5,1
    c8d0:	003dc406 	br	bfe4 <__alt_mem_onchip_memory+0xf780bfe4>
    c8d4:	1000d21e 	bne	r2,zero,cc20 <___vfiprintf_internal_r+0x11b4>
    c8d8:	d8c01d87 	ldb	r3,118(sp)
    c8dc:	18009526 	beq	r3,zero,cb34 <___vfiprintf_internal_r+0x10c8>
    c8e0:	00800044 	movi	r2,1
    c8e4:	d8c01d84 	addi	r3,sp,118
    c8e8:	1009883a 	mov	r4,r2
    c8ec:	d8c00015 	stw	r3,0(sp)
    c8f0:	d8800115 	stw	r2,4(sp)
    c8f4:	d811883a 	mov	r8,sp
    c8f8:	200b883a 	mov	r5,r4
    c8fc:	42000204 	addi	r8,r8,8
    c900:	21000044 	addi	r4,r4,1
    c904:	003d9706 	br	bf64 <__alt_mem_onchip_memory+0xf780bf64>
    c908:	d9001d04 	addi	r4,sp,116
    c90c:	00800084 	movi	r2,2
    c910:	d9000015 	stw	r4,0(sp)
    c914:	d8800115 	stw	r2,4(sp)
    c918:	1809883a 	mov	r4,r3
    c91c:	d811883a 	mov	r8,sp
    c920:	200b883a 	mov	r5,r4
    c924:	42000204 	addi	r8,r8,8
    c928:	21000044 	addi	r4,r4,1
    c92c:	003f4e06 	br	c668 <__alt_mem_onchip_memory+0xf780c668>
    c930:	d8001d85 	stb	zero,118(sp)
    c934:	48005016 	blt	r9,zero,ca78 <___vfiprintf_internal_r+0x100c>
    c938:	00ffdfc4 	movi	r3,-129
    c93c:	94c4b03a 	or	r2,r18,r19
    c940:	a0e8703a 	and	r20,r20,r3
    c944:	103d4426 	beq	r2,zero,be58 <__alt_mem_onchip_memory+0xf780be58>
    c948:	0039883a 	mov	fp,zero
    c94c:	d9002617 	ldw	r4,152(sp)
    c950:	dd401a04 	addi	r21,sp,104
    c954:	908003cc 	andi	r2,r18,15
    c958:	9806973a 	slli	r3,r19,28
    c95c:	2085883a 	add	r2,r4,r2
    c960:	9024d13a 	srli	r18,r18,4
    c964:	10800003 	ldbu	r2,0(r2)
    c968:	9826d13a 	srli	r19,r19,4
    c96c:	ad7fffc4 	addi	r21,r21,-1
    c970:	1ca4b03a 	or	r18,r3,r18
    c974:	a8800005 	stb	r2,0(r21)
    c978:	94c4b03a 	or	r2,r18,r19
    c97c:	103ff51e 	bne	r2,zero,c954 <__alt_mem_onchip_memory+0xf780c954>
    c980:	003e5906 	br	c2e8 <__alt_mem_onchip_memory+0xf780c2e8>
    c984:	d9402117 	ldw	r5,132(sp)
    c988:	d9002017 	ldw	r4,128(sp)
    c98c:	d9801a04 	addi	r6,sp,104
    c990:	000b9580 	call	b958 <__sprint_r.part.0>
    c994:	103f891e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    c998:	d8801c17 	ldw	r2,112(sp)
    c99c:	d811883a 	mov	r8,sp
    c9a0:	003f9506 	br	c7f8 <__alt_mem_onchip_memory+0xf780c7f8>
    c9a4:	d9402117 	ldw	r5,132(sp)
    c9a8:	d9002017 	ldw	r4,128(sp)
    c9ac:	d9801a04 	addi	r6,sp,104
    c9b0:	000b9580 	call	b958 <__sprint_r.part.0>
    c9b4:	103f811e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    c9b8:	d811883a 	mov	r8,sp
    c9bc:	003ced06 	br	bd74 <__alt_mem_onchip_memory+0xf780bd74>
    c9c0:	d9402117 	ldw	r5,132(sp)
    c9c4:	d9002017 	ldw	r4,128(sp)
    c9c8:	d9801a04 	addi	r6,sp,104
    c9cc:	da402c15 	stw	r9,176(sp)
    c9d0:	db802a15 	stw	r14,168(sp)
    c9d4:	000b9580 	call	b958 <__sprint_r.part.0>
    c9d8:	da402c17 	ldw	r9,176(sp)
    c9dc:	db802a17 	ldw	r14,168(sp)
    c9e0:	103f761e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    c9e4:	d9401b17 	ldw	r5,108(sp)
    c9e8:	d8801c17 	ldw	r2,112(sp)
    c9ec:	d811883a 	mov	r8,sp
    c9f0:	29000044 	addi	r4,r5,1
    c9f4:	003d5b06 	br	bf64 <__alt_mem_onchip_memory+0xf780bf64>
    c9f8:	d9402117 	ldw	r5,132(sp)
    c9fc:	d9002017 	ldw	r4,128(sp)
    ca00:	d9801a04 	addi	r6,sp,104
    ca04:	da402c15 	stw	r9,176(sp)
    ca08:	000b9580 	call	b958 <__sprint_r.part.0>
    ca0c:	da402c17 	ldw	r9,176(sp)
    ca10:	103f6a1e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    ca14:	d9401b17 	ldw	r5,108(sp)
    ca18:	d8801c17 	ldw	r2,112(sp)
    ca1c:	d811883a 	mov	r8,sp
    ca20:	29000044 	addi	r4,r5,1
    ca24:	003f1006 	br	c668 <__alt_mem_onchip_memory+0xf780c668>
    ca28:	1000c31e 	bne	r2,zero,cd38 <___vfiprintf_internal_r+0x12cc>
    ca2c:	01000044 	movi	r4,1
    ca30:	000b883a 	mov	r5,zero
    ca34:	d811883a 	mov	r8,sp
    ca38:	003f0d06 	br	c670 <__alt_mem_onchip_memory+0xf780c670>
    ca3c:	d9402117 	ldw	r5,132(sp)
    ca40:	d9002017 	ldw	r4,128(sp)
    ca44:	d9801a04 	addi	r6,sp,104
    ca48:	000b9580 	call	b958 <__sprint_r.part.0>
    ca4c:	103f5b1e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    ca50:	d9001b17 	ldw	r4,108(sp)
    ca54:	d8801c17 	ldw	r2,112(sp)
    ca58:	d811883a 	mov	r8,sp
    ca5c:	21000044 	addi	r4,r4,1
    ca60:	003d8006 	br	c064 <__alt_mem_onchip_memory+0xf780c064>
    ca64:	01000074 	movhi	r4,1
    ca68:	2105da04 	addi	r4,r4,5992
    ca6c:	d9002615 	stw	r4,152(sp)
    ca70:	d8c02215 	stw	r3,136(sp)
    ca74:	1029883a 	mov	r20,r2
    ca78:	94c4b03a 	or	r2,r18,r19
    ca7c:	103fb21e 	bne	r2,zero,c948 <__alt_mem_onchip_memory+0xf780c948>
    ca80:	0039883a 	mov	fp,zero
    ca84:	00800084 	movi	r2,2
    ca88:	003e6b06 	br	c438 <__alt_mem_onchip_memory+0xf780c438>
    ca8c:	da802217 	ldw	r10,136(sp)
    ca90:	d8001d85 	stb	zero,118(sp)
    ca94:	0027883a 	mov	r19,zero
    ca98:	50800104 	addi	r2,r10,4
    ca9c:	54800017 	ldw	r18,0(r10)
    caa0:	483e6016 	blt	r9,zero,c424 <__alt_mem_onchip_memory+0xf780c424>
    caa4:	00ffdfc4 	movi	r3,-129
    caa8:	d8802215 	stw	r2,136(sp)
    caac:	a0e8703a 	and	r20,r20,r3
    cab0:	0039883a 	mov	fp,zero
    cab4:	903ebb26 	beq	r18,zero,c5a4 <__alt_mem_onchip_memory+0xf780c5a4>
    cab8:	00800244 	movi	r2,9
    cabc:	14bdee36 	bltu	r2,r18,c278 <__alt_mem_onchip_memory+0xf780c278>
    cac0:	003eba06 	br	c5ac <__alt_mem_onchip_memory+0xf780c5ac>
    cac4:	00800c04 	movi	r2,48
    cac8:	d8c01d45 	stb	r3,117(sp)
    cacc:	d8801d05 	stb	r2,116(sp)
    cad0:	d8001d85 	stb	zero,118(sp)
    cad4:	a0c00094 	ori	r3,r20,2
    cad8:	4800a916 	blt	r9,zero,cd80 <___vfiprintf_internal_r+0x1314>
    cadc:	00bfdfc4 	movi	r2,-129
    cae0:	a096703a 	and	r11,r20,r2
    cae4:	5d000094 	ori	r20,r11,2
    cae8:	0039883a 	mov	fp,zero
    caec:	003f9706 	br	c94c <__alt_mem_onchip_memory+0xf780c94c>
    caf0:	8025883a 	mov	r18,r16
    caf4:	003c2e06 	br	bbb0 <__alt_mem_onchip_memory+0xf780bbb0>
    caf8:	00800074 	movhi	r2,1
    cafc:	1085da04 	addi	r2,r2,5992
    cb00:	0039883a 	mov	fp,zero
    cb04:	d8802615 	stw	r2,152(sp)
    cb08:	003f9006 	br	c94c <__alt_mem_onchip_memory+0xf780c94c>
    cb0c:	04a5c83a 	sub	r18,zero,r18
    cb10:	07000b44 	movi	fp,45
    cb14:	9004c03a 	cmpne	r2,r18,zero
    cb18:	04e7c83a 	sub	r19,zero,r19
    cb1c:	df001d85 	stb	fp,118(sp)
    cb20:	98a7c83a 	sub	r19,r19,r2
    cb24:	48009f16 	blt	r9,zero,cda4 <___vfiprintf_internal_r+0x1338>
    cb28:	00bfdfc4 	movi	r2,-129
    cb2c:	a0a8703a 	and	r20,r20,r2
    cb30:	003dd006 	br	c274 <__alt_mem_onchip_memory+0xf780c274>
    cb34:	70004c26 	beq	r14,zero,cc68 <___vfiprintf_internal_r+0x11fc>
    cb38:	00800084 	movi	r2,2
    cb3c:	d8c01d04 	addi	r3,sp,116
    cb40:	d8c00015 	stw	r3,0(sp)
    cb44:	d8800115 	stw	r2,4(sp)
    cb48:	01000044 	movi	r4,1
    cb4c:	d811883a 	mov	r8,sp
    cb50:	003f7306 	br	c920 <__alt_mem_onchip_memory+0xf780c920>
    cb54:	a080100c 	andi	r2,r20,64
    cb58:	da802217 	ldw	r10,136(sp)
    cb5c:	103e0626 	beq	r2,zero,c378 <__alt_mem_onchip_memory+0xf780c378>
    cb60:	5480000f 	ldh	r18,0(r10)
    cb64:	52800104 	addi	r10,r10,4
    cb68:	da802215 	stw	r10,136(sp)
    cb6c:	9027d7fa 	srai	r19,r18,31
    cb70:	9805883a 	mov	r2,r19
    cb74:	003db806 	br	c258 <__alt_mem_onchip_memory+0xf780c258>
    cb78:	a080040c 	andi	r2,r20,16
    cb7c:	1000091e 	bne	r2,zero,cba4 <___vfiprintf_internal_r+0x1138>
    cb80:	a2c0100c 	andi	r11,r20,64
    cb84:	58000726 	beq	r11,zero,cba4 <___vfiprintf_internal_r+0x1138>
    cb88:	da802217 	ldw	r10,136(sp)
    cb8c:	50800017 	ldw	r2,0(r10)
    cb90:	52800104 	addi	r10,r10,4
    cb94:	da802215 	stw	r10,136(sp)
    cb98:	da802317 	ldw	r10,140(sp)
    cb9c:	1280000d 	sth	r10,0(r2)
    cba0:	003be706 	br	bb40 <__alt_mem_onchip_memory+0xf780bb40>
    cba4:	da802217 	ldw	r10,136(sp)
    cba8:	50800017 	ldw	r2,0(r10)
    cbac:	52800104 	addi	r10,r10,4
    cbb0:	da802215 	stw	r10,136(sp)
    cbb4:	da802317 	ldw	r10,140(sp)
    cbb8:	12800015 	stw	r10,0(r2)
    cbbc:	003be006 	br	bb40 <__alt_mem_onchip_memory+0xf780bb40>
    cbc0:	a080100c 	andi	r2,r20,64
    cbc4:	da802217 	ldw	r10,136(sp)
    cbc8:	10003026 	beq	r2,zero,cc8c <___vfiprintf_internal_r+0x1220>
    cbcc:	5480000b 	ldhu	r18,0(r10)
    cbd0:	52800104 	addi	r10,r10,4
    cbd4:	0027883a 	mov	r19,zero
    cbd8:	da802215 	stw	r10,136(sp)
    cbdc:	003d8006 	br	c1e0 <__alt_mem_onchip_memory+0xf780c1e0>
    cbe0:	80c00007 	ldb	r3,0(r16)
    cbe4:	003c0006 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    cbe8:	a080100c 	andi	r2,r20,64
    cbec:	d8001d85 	stb	zero,118(sp)
    cbf0:	da802217 	ldw	r10,136(sp)
    cbf4:	1000201e 	bne	r2,zero,cc78 <___vfiprintf_internal_r+0x120c>
    cbf8:	50800104 	addi	r2,r10,4
    cbfc:	54800017 	ldw	r18,0(r10)
    cc00:	0027883a 	mov	r19,zero
    cc04:	483def0e 	bge	r9,zero,c3c4 <__alt_mem_onchip_memory+0xf780c3c4>
    cc08:	94c6b03a 	or	r3,r18,r19
    cc0c:	d8802215 	stw	r2,136(sp)
    cc10:	183d4e1e 	bne	r3,zero,c14c <__alt_mem_onchip_memory+0xf780c14c>
    cc14:	0039883a 	mov	fp,zero
    cc18:	0005883a 	mov	r2,zero
    cc1c:	003e0606 	br	c438 <__alt_mem_onchip_memory+0xf780c438>
    cc20:	d9402117 	ldw	r5,132(sp)
    cc24:	d9002017 	ldw	r4,128(sp)
    cc28:	d9801a04 	addi	r6,sp,104
    cc2c:	da402c15 	stw	r9,176(sp)
    cc30:	db802a15 	stw	r14,168(sp)
    cc34:	000b9580 	call	b958 <__sprint_r.part.0>
    cc38:	da402c17 	ldw	r9,176(sp)
    cc3c:	db802a17 	ldw	r14,168(sp)
    cc40:	103ede1e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    cc44:	d9401b17 	ldw	r5,108(sp)
    cc48:	d8801c17 	ldw	r2,112(sp)
    cc4c:	d811883a 	mov	r8,sp
    cc50:	29000044 	addi	r4,r5,1
    cc54:	003e7406 	br	c628 <__alt_mem_onchip_memory+0xf780c628>
    cc58:	00bfffc4 	movi	r2,-1
    cc5c:	003c5806 	br	bdc0 <__alt_mem_onchip_memory+0xf780bdc0>
    cc60:	d811883a 	mov	r8,sp
    cc64:	003ee806 	br	c808 <__alt_mem_onchip_memory+0xf780c808>
    cc68:	000b883a 	mov	r5,zero
    cc6c:	01000044 	movi	r4,1
    cc70:	d811883a 	mov	r8,sp
    cc74:	003e7c06 	br	c668 <__alt_mem_onchip_memory+0xf780c668>
    cc78:	50800104 	addi	r2,r10,4
    cc7c:	5480000b 	ldhu	r18,0(r10)
    cc80:	0027883a 	mov	r19,zero
    cc84:	483dcf0e 	bge	r9,zero,c3c4 <__alt_mem_onchip_memory+0xf780c3c4>
    cc88:	003fdf06 	br	cc08 <__alt_mem_onchip_memory+0xf780cc08>
    cc8c:	54800017 	ldw	r18,0(r10)
    cc90:	52800104 	addi	r10,r10,4
    cc94:	0027883a 	mov	r19,zero
    cc98:	da802215 	stw	r10,136(sp)
    cc9c:	003d5006 	br	c1e0 <__alt_mem_onchip_memory+0xf780c1e0>
    cca0:	50800104 	addi	r2,r10,4
    cca4:	5480000b 	ldhu	r18,0(r10)
    cca8:	0027883a 	mov	r19,zero
    ccac:	483f7d0e 	bge	r9,zero,caa4 <__alt_mem_onchip_memory+0xf780caa4>
    ccb0:	003ddc06 	br	c424 <__alt_mem_onchip_memory+0xf780c424>
    ccb4:	d8c02215 	stw	r3,136(sp)
    ccb8:	0039883a 	mov	fp,zero
    ccbc:	003ddb06 	br	c42c <__alt_mem_onchip_memory+0xf780c42c>
    ccc0:	02800074 	movhi	r10,1
    ccc4:	52863a04 	addi	r10,r10,6376
    ccc8:	da802415 	stw	r10,144(sp)
    cccc:	003e8306 	br	c6dc <__alt_mem_onchip_memory+0xf780c6dc>
    ccd0:	d8801c17 	ldw	r2,112(sp)
    ccd4:	dd002117 	ldw	r20,132(sp)
    ccd8:	103eb926 	beq	r2,zero,c7c0 <__alt_mem_onchip_memory+0xf780c7c0>
    ccdc:	d9002017 	ldw	r4,128(sp)
    cce0:	d9801a04 	addi	r6,sp,104
    cce4:	a00b883a 	mov	r5,r20
    cce8:	000b9580 	call	b958 <__sprint_r.part.0>
    ccec:	003eb406 	br	c7c0 <__alt_mem_onchip_memory+0xf780c7c0>
    ccf0:	80c00043 	ldbu	r3,1(r16)
    ccf4:	a5000814 	ori	r20,r20,32
    ccf8:	84000044 	addi	r16,r16,1
    ccfc:	18c03fcc 	andi	r3,r3,255
    cd00:	18c0201c 	xori	r3,r3,128
    cd04:	18ffe004 	addi	r3,r3,-128
    cd08:	003bb706 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    cd0c:	a809883a 	mov	r4,r21
    cd10:	d8c02a15 	stw	r3,168(sp)
    cd14:	da002b15 	stw	r8,172(sp)
    cd18:	00041c00 	call	41c0 <strlen>
    cd1c:	d8c02a17 	ldw	r3,168(sp)
    cd20:	1027883a 	mov	r19,r2
    cd24:	df001d83 	ldbu	fp,118(sp)
    cd28:	d8c02215 	stw	r3,136(sp)
    cd2c:	0013883a 	mov	r9,zero
    cd30:	da002b17 	ldw	r8,172(sp)
    cd34:	003c4d06 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    cd38:	d9402117 	ldw	r5,132(sp)
    cd3c:	d9002017 	ldw	r4,128(sp)
    cd40:	d9801a04 	addi	r6,sp,104
    cd44:	da402c15 	stw	r9,176(sp)
    cd48:	000b9580 	call	b958 <__sprint_r.part.0>
    cd4c:	da402c17 	ldw	r9,176(sp)
    cd50:	103e9a1e 	bne	r2,zero,c7bc <__alt_mem_onchip_memory+0xf780c7bc>
    cd54:	d9401b17 	ldw	r5,108(sp)
    cd58:	d8801c17 	ldw	r2,112(sp)
    cd5c:	d811883a 	mov	r8,sp
    cd60:	29000044 	addi	r4,r5,1
    cd64:	003e4206 	br	c670 <__alt_mem_onchip_memory+0xf780c670>
    cd68:	d9401b17 	ldw	r5,108(sp)
    cd6c:	01000074 	movhi	r4,1
    cd70:	21063e04 	addi	r4,r4,6392
    cd74:	d9002415 	stw	r4,144(sp)
    cd78:	29400044 	addi	r5,r5,1
    cd7c:	003c6d06 	br	bf34 <__alt_mem_onchip_memory+0xf780bf34>
    cd80:	0039883a 	mov	fp,zero
    cd84:	00800084 	movi	r2,2
    cd88:	10803fcc 	andi	r2,r2,255
    cd8c:	01000044 	movi	r4,1
    cd90:	11001e26 	beq	r2,r4,ce0c <___vfiprintf_internal_r+0x13a0>
    cd94:	01000084 	movi	r4,2
    cd98:	11001e1e 	bne	r2,r4,ce14 <___vfiprintf_internal_r+0x13a8>
    cd9c:	1829883a 	mov	r20,r3
    cda0:	003eea06 	br	c94c <__alt_mem_onchip_memory+0xf780c94c>
    cda4:	a007883a 	mov	r3,r20
    cda8:	00800044 	movi	r2,1
    cdac:	003ff606 	br	cd88 <__alt_mem_onchip_memory+0xf780cd88>
    cdb0:	00800184 	movi	r2,6
    cdb4:	1240012e 	bgeu	r2,r9,cdbc <___vfiprintf_internal_r+0x1350>
    cdb8:	1013883a 	mov	r9,r2
    cdbc:	4827883a 	mov	r19,r9
    cdc0:	4825883a 	mov	r18,r9
    cdc4:	48001516 	blt	r9,zero,ce1c <___vfiprintf_internal_r+0x13b0>
    cdc8:	05400074 	movhi	r21,1
    cdcc:	d8c02215 	stw	r3,136(sp)
    cdd0:	ad45df04 	addi	r21,r21,6012
    cdd4:	003d1406 	br	c228 <__alt_mem_onchip_memory+0xf780c228>
    cdd8:	02800074 	movhi	r10,1
    cddc:	52863a04 	addi	r10,r10,6376
    cde0:	da802415 	stw	r10,144(sp)
    cde4:	200d883a 	mov	r6,r4
    cde8:	003c9106 	br	c030 <__alt_mem_onchip_memory+0xf780c030>
    cdec:	5021883a 	mov	r16,r10
    cdf0:	0013883a 	mov	r9,zero
    cdf4:	003b7d06 	br	bbec <__alt_mem_onchip_memory+0xf780bbec>
    cdf8:	4827883a 	mov	r19,r9
    cdfc:	df001d83 	ldbu	fp,118(sp)
    ce00:	d8c02215 	stw	r3,136(sp)
    ce04:	0013883a 	mov	r9,zero
    ce08:	003c1806 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    ce0c:	1829883a 	mov	r20,r3
    ce10:	003d1806 	br	c274 <__alt_mem_onchip_memory+0xf780c274>
    ce14:	1829883a 	mov	r20,r3
    ce18:	003ccd06 	br	c150 <__alt_mem_onchip_memory+0xf780c150>
    ce1c:	0025883a 	mov	r18,zero
    ce20:	003fe906 	br	cdc8 <__alt_mem_onchip_memory+0xf780cdc8>
    ce24:	d8802217 	ldw	r2,136(sp)
    ce28:	80c00043 	ldbu	r3,1(r16)
    ce2c:	5021883a 	mov	r16,r10
    ce30:	12400017 	ldw	r9,0(r2)
    ce34:	10800104 	addi	r2,r2,4
    ce38:	d8802215 	stw	r2,136(sp)
    ce3c:	483faf0e 	bge	r9,zero,ccfc <__alt_mem_onchip_memory+0xf780ccfc>
    ce40:	18c03fcc 	andi	r3,r3,255
    ce44:	18c0201c 	xori	r3,r3,128
    ce48:	027fffc4 	movi	r9,-1
    ce4c:	18ffe004 	addi	r3,r3,-128
    ce50:	003b6506 	br	bbe8 <__alt_mem_onchip_memory+0xf780bbe8>
    ce54:	d9c01d85 	stb	r7,118(sp)
    ce58:	003ca006 	br	c0dc <__alt_mem_onchip_memory+0xf780c0dc>
    ce5c:	d9c01d85 	stb	r7,118(sp)
    ce60:	003cad06 	br	c118 <__alt_mem_onchip_memory+0xf780c118>
    ce64:	d9c01d85 	stb	r7,118(sp)
    ce68:	003d7d06 	br	c460 <__alt_mem_onchip_memory+0xf780c460>
    ce6c:	d9c01d85 	stb	r7,118(sp)
    ce70:	003d5f06 	br	c3f0 <__alt_mem_onchip_memory+0xf780c3f0>
    ce74:	a080004c 	andi	r2,r20,1
    ce78:	0039883a 	mov	fp,zero
    ce7c:	10000526 	beq	r2,zero,ce94 <___vfiprintf_internal_r+0x1428>
    ce80:	00800c04 	movi	r2,48
    ce84:	d88019c5 	stb	r2,103(sp)
    ce88:	dcc02717 	ldw	r19,156(sp)
    ce8c:	dd4019c4 	addi	r21,sp,103
    ce90:	003bf606 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    ce94:	0027883a 	mov	r19,zero
    ce98:	dd401a04 	addi	r21,sp,104
    ce9c:	003bf306 	br	be6c <__alt_mem_onchip_memory+0xf780be6c>
    cea0:	d9c01d85 	stb	r7,118(sp)
    cea4:	003dc806 	br	c5c8 <__alt_mem_onchip_memory+0xf780c5c8>
    cea8:	d9c01d85 	stb	r7,118(sp)
    ceac:	003d3a06 	br	c398 <__alt_mem_onchip_memory+0xf780c398>
    ceb0:	d9c01d85 	stb	r7,118(sp)
    ceb4:	003d2a06 	br	c360 <__alt_mem_onchip_memory+0xf780c360>
    ceb8:	d9c01d85 	stb	r7,118(sp)
    cebc:	003cde06 	br	c238 <__alt_mem_onchip_memory+0xf780c238>
    cec0:	d9c01d85 	stb	r7,118(sp)
    cec4:	003cbc06 	br	c1b8 <__alt_mem_onchip_memory+0xf780c1b8>

0000cec8 <__vfiprintf_internal>:
    cec8:	00800074 	movhi	r2,1
    cecc:	108d3e04 	addi	r2,r2,13560
    ced0:	300f883a 	mov	r7,r6
    ced4:	280d883a 	mov	r6,r5
    ced8:	200b883a 	mov	r5,r4
    cedc:	11000017 	ldw	r4,0(r2)
    cee0:	000ba6c1 	jmpi	ba6c <___vfiprintf_internal_r>

0000cee4 <__sbprintf>:
    cee4:	2880030b 	ldhu	r2,12(r5)
    cee8:	2ac01917 	ldw	r11,100(r5)
    ceec:	2a80038b 	ldhu	r10,14(r5)
    cef0:	2a400717 	ldw	r9,28(r5)
    cef4:	2a000917 	ldw	r8,36(r5)
    cef8:	defee204 	addi	sp,sp,-1144
    cefc:	00c10004 	movi	r3,1024
    cf00:	dc011a15 	stw	r16,1128(sp)
    cf04:	10bfff4c 	andi	r2,r2,65533
    cf08:	2821883a 	mov	r16,r5
    cf0c:	d8cb883a 	add	r5,sp,r3
    cf10:	dc811c15 	stw	r18,1136(sp)
    cf14:	dc411b15 	stw	r17,1132(sp)
    cf18:	dfc11d15 	stw	ra,1140(sp)
    cf1c:	2025883a 	mov	r18,r4
    cf20:	d881030d 	sth	r2,1036(sp)
    cf24:	dac11915 	stw	r11,1124(sp)
    cf28:	da81038d 	sth	r10,1038(sp)
    cf2c:	da410715 	stw	r9,1052(sp)
    cf30:	da010915 	stw	r8,1060(sp)
    cf34:	dec10015 	stw	sp,1024(sp)
    cf38:	dec10415 	stw	sp,1040(sp)
    cf3c:	d8c10215 	stw	r3,1032(sp)
    cf40:	d8c10515 	stw	r3,1044(sp)
    cf44:	d8010615 	stw	zero,1048(sp)
    cf48:	000ba6c0 	call	ba6c <___vfiprintf_internal_r>
    cf4c:	1023883a 	mov	r17,r2
    cf50:	10000416 	blt	r2,zero,cf64 <__sbprintf+0x80>
    cf54:	d9410004 	addi	r5,sp,1024
    cf58:	9009883a 	mov	r4,r18
    cf5c:	00081d00 	call	81d0 <_fflush_r>
    cf60:	10000d1e 	bne	r2,zero,cf98 <__sbprintf+0xb4>
    cf64:	d881030b 	ldhu	r2,1036(sp)
    cf68:	1080100c 	andi	r2,r2,64
    cf6c:	10000326 	beq	r2,zero,cf7c <__sbprintf+0x98>
    cf70:	8080030b 	ldhu	r2,12(r16)
    cf74:	10801014 	ori	r2,r2,64
    cf78:	8080030d 	sth	r2,12(r16)
    cf7c:	8805883a 	mov	r2,r17
    cf80:	dfc11d17 	ldw	ra,1140(sp)
    cf84:	dc811c17 	ldw	r18,1136(sp)
    cf88:	dc411b17 	ldw	r17,1132(sp)
    cf8c:	dc011a17 	ldw	r16,1128(sp)
    cf90:	dec11e04 	addi	sp,sp,1144
    cf94:	f800283a 	ret
    cf98:	047fffc4 	movi	r17,-1
    cf9c:	003ff106 	br	cf64 <__alt_mem_onchip_memory+0xf780cf64>

0000cfa0 <__swbuf_r>:
    cfa0:	defffb04 	addi	sp,sp,-20
    cfa4:	dcc00315 	stw	r19,12(sp)
    cfa8:	dc800215 	stw	r18,8(sp)
    cfac:	dc000015 	stw	r16,0(sp)
    cfb0:	dfc00415 	stw	ra,16(sp)
    cfb4:	dc400115 	stw	r17,4(sp)
    cfb8:	2025883a 	mov	r18,r4
    cfbc:	2827883a 	mov	r19,r5
    cfc0:	3021883a 	mov	r16,r6
    cfc4:	20000226 	beq	r4,zero,cfd0 <__swbuf_r+0x30>
    cfc8:	20800e17 	ldw	r2,56(r4)
    cfcc:	10004226 	beq	r2,zero,d0d8 <__swbuf_r+0x138>
    cfd0:	80800617 	ldw	r2,24(r16)
    cfd4:	8100030b 	ldhu	r4,12(r16)
    cfd8:	80800215 	stw	r2,8(r16)
    cfdc:	2080020c 	andi	r2,r4,8
    cfe0:	10003626 	beq	r2,zero,d0bc <__swbuf_r+0x11c>
    cfe4:	80c00417 	ldw	r3,16(r16)
    cfe8:	18003426 	beq	r3,zero,d0bc <__swbuf_r+0x11c>
    cfec:	2088000c 	andi	r2,r4,8192
    cff0:	9c403fcc 	andi	r17,r19,255
    cff4:	10001a26 	beq	r2,zero,d060 <__swbuf_r+0xc0>
    cff8:	80800017 	ldw	r2,0(r16)
    cffc:	81000517 	ldw	r4,20(r16)
    d000:	10c7c83a 	sub	r3,r2,r3
    d004:	1900200e 	bge	r3,r4,d088 <__swbuf_r+0xe8>
    d008:	18c00044 	addi	r3,r3,1
    d00c:	81000217 	ldw	r4,8(r16)
    d010:	11400044 	addi	r5,r2,1
    d014:	81400015 	stw	r5,0(r16)
    d018:	213fffc4 	addi	r4,r4,-1
    d01c:	81000215 	stw	r4,8(r16)
    d020:	14c00005 	stb	r19,0(r2)
    d024:	80800517 	ldw	r2,20(r16)
    d028:	10c01e26 	beq	r2,r3,d0a4 <__swbuf_r+0x104>
    d02c:	8080030b 	ldhu	r2,12(r16)
    d030:	1080004c 	andi	r2,r2,1
    d034:	10000226 	beq	r2,zero,d040 <__swbuf_r+0xa0>
    d038:	00800284 	movi	r2,10
    d03c:	88801926 	beq	r17,r2,d0a4 <__swbuf_r+0x104>
    d040:	8805883a 	mov	r2,r17
    d044:	dfc00417 	ldw	ra,16(sp)
    d048:	dcc00317 	ldw	r19,12(sp)
    d04c:	dc800217 	ldw	r18,8(sp)
    d050:	dc400117 	ldw	r17,4(sp)
    d054:	dc000017 	ldw	r16,0(sp)
    d058:	dec00504 	addi	sp,sp,20
    d05c:	f800283a 	ret
    d060:	81401917 	ldw	r5,100(r16)
    d064:	00b7ffc4 	movi	r2,-8193
    d068:	21080014 	ori	r4,r4,8192
    d06c:	2884703a 	and	r2,r5,r2
    d070:	80801915 	stw	r2,100(r16)
    d074:	80800017 	ldw	r2,0(r16)
    d078:	8100030d 	sth	r4,12(r16)
    d07c:	81000517 	ldw	r4,20(r16)
    d080:	10c7c83a 	sub	r3,r2,r3
    d084:	193fe016 	blt	r3,r4,d008 <__alt_mem_onchip_memory+0xf780d008>
    d088:	800b883a 	mov	r5,r16
    d08c:	9009883a 	mov	r4,r18
    d090:	00081d00 	call	81d0 <_fflush_r>
    d094:	1000071e 	bne	r2,zero,d0b4 <__swbuf_r+0x114>
    d098:	80800017 	ldw	r2,0(r16)
    d09c:	00c00044 	movi	r3,1
    d0a0:	003fda06 	br	d00c <__alt_mem_onchip_memory+0xf780d00c>
    d0a4:	800b883a 	mov	r5,r16
    d0a8:	9009883a 	mov	r4,r18
    d0ac:	00081d00 	call	81d0 <_fflush_r>
    d0b0:	103fe326 	beq	r2,zero,d040 <__alt_mem_onchip_memory+0xf780d040>
    d0b4:	00bfffc4 	movi	r2,-1
    d0b8:	003fe206 	br	d044 <__alt_mem_onchip_memory+0xf780d044>
    d0bc:	800b883a 	mov	r5,r16
    d0c0:	9009883a 	mov	r4,r18
    d0c4:	00065d80 	call	65d8 <__swsetup_r>
    d0c8:	103ffa1e 	bne	r2,zero,d0b4 <__alt_mem_onchip_memory+0xf780d0b4>
    d0cc:	8100030b 	ldhu	r4,12(r16)
    d0d0:	80c00417 	ldw	r3,16(r16)
    d0d4:	003fc506 	br	cfec <__alt_mem_onchip_memory+0xf780cfec>
    d0d8:	00085ac0 	call	85ac <__sinit>
    d0dc:	003fbc06 	br	cfd0 <__alt_mem_onchip_memory+0xf780cfd0>

0000d0e0 <__swbuf>:
    d0e0:	00800074 	movhi	r2,1
    d0e4:	108d3e04 	addi	r2,r2,13560
    d0e8:	280d883a 	mov	r6,r5
    d0ec:	200b883a 	mov	r5,r4
    d0f0:	11000017 	ldw	r4,0(r2)
    d0f4:	000cfa01 	jmpi	cfa0 <__swbuf_r>

0000d0f8 <_write_r>:
    d0f8:	defffd04 	addi	sp,sp,-12
    d0fc:	2805883a 	mov	r2,r5
    d100:	dc000015 	stw	r16,0(sp)
    d104:	04000074 	movhi	r16,1
    d108:	dc400115 	stw	r17,4(sp)
    d10c:	300b883a 	mov	r5,r6
    d110:	84141404 	addi	r16,r16,20560
    d114:	2023883a 	mov	r17,r4
    d118:	380d883a 	mov	r6,r7
    d11c:	1009883a 	mov	r4,r2
    d120:	dfc00215 	stw	ra,8(sp)
    d124:	80000015 	stw	zero,0(r16)
    d128:	000f3300 	call	f330 <write>
    d12c:	00ffffc4 	movi	r3,-1
    d130:	10c00526 	beq	r2,r3,d148 <_write_r+0x50>
    d134:	dfc00217 	ldw	ra,8(sp)
    d138:	dc400117 	ldw	r17,4(sp)
    d13c:	dc000017 	ldw	r16,0(sp)
    d140:	dec00304 	addi	sp,sp,12
    d144:	f800283a 	ret
    d148:	80c00017 	ldw	r3,0(r16)
    d14c:	183ff926 	beq	r3,zero,d134 <__alt_mem_onchip_memory+0xf780d134>
    d150:	88c00015 	stw	r3,0(r17)
    d154:	003ff706 	br	d134 <__alt_mem_onchip_memory+0xf780d134>

0000d158 <_close_r>:
    d158:	defffd04 	addi	sp,sp,-12
    d15c:	dc000015 	stw	r16,0(sp)
    d160:	04000074 	movhi	r16,1
    d164:	dc400115 	stw	r17,4(sp)
    d168:	84141404 	addi	r16,r16,20560
    d16c:	2023883a 	mov	r17,r4
    d170:	2809883a 	mov	r4,r5
    d174:	dfc00215 	stw	ra,8(sp)
    d178:	80000015 	stw	zero,0(r16)
    d17c:	000e7880 	call	e788 <close>
    d180:	00ffffc4 	movi	r3,-1
    d184:	10c00526 	beq	r2,r3,d19c <_close_r+0x44>
    d188:	dfc00217 	ldw	ra,8(sp)
    d18c:	dc400117 	ldw	r17,4(sp)
    d190:	dc000017 	ldw	r16,0(sp)
    d194:	dec00304 	addi	sp,sp,12
    d198:	f800283a 	ret
    d19c:	80c00017 	ldw	r3,0(r16)
    d1a0:	183ff926 	beq	r3,zero,d188 <__alt_mem_onchip_memory+0xf780d188>
    d1a4:	88c00015 	stw	r3,0(r17)
    d1a8:	003ff706 	br	d188 <__alt_mem_onchip_memory+0xf780d188>

0000d1ac <_calloc_r>:
    d1ac:	298b383a 	mul	r5,r5,r6
    d1b0:	defffe04 	addi	sp,sp,-8
    d1b4:	dfc00115 	stw	ra,4(sp)
    d1b8:	dc000015 	stw	r16,0(sp)
    d1bc:	00093680 	call	9368 <_malloc_r>
    d1c0:	10002926 	beq	r2,zero,d268 <_calloc_r+0xbc>
    d1c4:	11bfff17 	ldw	r6,-4(r2)
    d1c8:	1021883a 	mov	r16,r2
    d1cc:	00bfff04 	movi	r2,-4
    d1d0:	308c703a 	and	r6,r6,r2
    d1d4:	00c00904 	movi	r3,36
    d1d8:	308d883a 	add	r6,r6,r2
    d1dc:	19801636 	bltu	r3,r6,d238 <_calloc_r+0x8c>
    d1e0:	008004c4 	movi	r2,19
    d1e4:	11800b2e 	bgeu	r2,r6,d214 <_calloc_r+0x68>
    d1e8:	80000015 	stw	zero,0(r16)
    d1ec:	80000115 	stw	zero,4(r16)
    d1f0:	008006c4 	movi	r2,27
    d1f4:	11801a2e 	bgeu	r2,r6,d260 <_calloc_r+0xb4>
    d1f8:	80000215 	stw	zero,8(r16)
    d1fc:	80000315 	stw	zero,12(r16)
    d200:	30c0151e 	bne	r6,r3,d258 <_calloc_r+0xac>
    d204:	80000415 	stw	zero,16(r16)
    d208:	80800604 	addi	r2,r16,24
    d20c:	80000515 	stw	zero,20(r16)
    d210:	00000106 	br	d218 <_calloc_r+0x6c>
    d214:	8005883a 	mov	r2,r16
    d218:	10000015 	stw	zero,0(r2)
    d21c:	10000115 	stw	zero,4(r2)
    d220:	10000215 	stw	zero,8(r2)
    d224:	8005883a 	mov	r2,r16
    d228:	dfc00117 	ldw	ra,4(sp)
    d22c:	dc000017 	ldw	r16,0(sp)
    d230:	dec00204 	addi	sp,sp,8
    d234:	f800283a 	ret
    d238:	000b883a 	mov	r5,zero
    d23c:	8009883a 	mov	r4,r16
    d240:	0009efc0 	call	9efc <memset>
    d244:	8005883a 	mov	r2,r16
    d248:	dfc00117 	ldw	ra,4(sp)
    d24c:	dc000017 	ldw	r16,0(sp)
    d250:	dec00204 	addi	sp,sp,8
    d254:	f800283a 	ret
    d258:	80800404 	addi	r2,r16,16
    d25c:	003fee06 	br	d218 <__alt_mem_onchip_memory+0xf780d218>
    d260:	80800204 	addi	r2,r16,8
    d264:	003fec06 	br	d218 <__alt_mem_onchip_memory+0xf780d218>
    d268:	0005883a 	mov	r2,zero
    d26c:	003fee06 	br	d228 <__alt_mem_onchip_memory+0xf780d228>

0000d270 <_fclose_r>:
    d270:	28003926 	beq	r5,zero,d358 <_fclose_r+0xe8>
    d274:	defffc04 	addi	sp,sp,-16
    d278:	dc400115 	stw	r17,4(sp)
    d27c:	dc000015 	stw	r16,0(sp)
    d280:	dfc00315 	stw	ra,12(sp)
    d284:	dc800215 	stw	r18,8(sp)
    d288:	2023883a 	mov	r17,r4
    d28c:	2821883a 	mov	r16,r5
    d290:	20000226 	beq	r4,zero,d29c <_fclose_r+0x2c>
    d294:	20800e17 	ldw	r2,56(r4)
    d298:	10002726 	beq	r2,zero,d338 <_fclose_r+0xc8>
    d29c:	8080030f 	ldh	r2,12(r16)
    d2a0:	1000071e 	bne	r2,zero,d2c0 <_fclose_r+0x50>
    d2a4:	0005883a 	mov	r2,zero
    d2a8:	dfc00317 	ldw	ra,12(sp)
    d2ac:	dc800217 	ldw	r18,8(sp)
    d2b0:	dc400117 	ldw	r17,4(sp)
    d2b4:	dc000017 	ldw	r16,0(sp)
    d2b8:	dec00404 	addi	sp,sp,16
    d2bc:	f800283a 	ret
    d2c0:	800b883a 	mov	r5,r16
    d2c4:	8809883a 	mov	r4,r17
    d2c8:	0007fb40 	call	7fb4 <__sflush_r>
    d2cc:	1025883a 	mov	r18,r2
    d2d0:	80800b17 	ldw	r2,44(r16)
    d2d4:	10000426 	beq	r2,zero,d2e8 <_fclose_r+0x78>
    d2d8:	81400717 	ldw	r5,28(r16)
    d2dc:	8809883a 	mov	r4,r17
    d2e0:	103ee83a 	callr	r2
    d2e4:	10001616 	blt	r2,zero,d340 <_fclose_r+0xd0>
    d2e8:	8080030b 	ldhu	r2,12(r16)
    d2ec:	1080200c 	andi	r2,r2,128
    d2f0:	1000151e 	bne	r2,zero,d348 <_fclose_r+0xd8>
    d2f4:	81400c17 	ldw	r5,48(r16)
    d2f8:	28000526 	beq	r5,zero,d310 <_fclose_r+0xa0>
    d2fc:	80801004 	addi	r2,r16,64
    d300:	28800226 	beq	r5,r2,d30c <_fclose_r+0x9c>
    d304:	8809883a 	mov	r4,r17
    d308:	00087200 	call	8720 <_free_r>
    d30c:	80000c15 	stw	zero,48(r16)
    d310:	81401117 	ldw	r5,68(r16)
    d314:	28000326 	beq	r5,zero,d324 <_fclose_r+0xb4>
    d318:	8809883a 	mov	r4,r17
    d31c:	00087200 	call	8720 <_free_r>
    d320:	80001115 	stw	zero,68(r16)
    d324:	00085bc0 	call	85bc <__sfp_lock_acquire>
    d328:	8000030d 	sth	zero,12(r16)
    d32c:	00085c00 	call	85c0 <__sfp_lock_release>
    d330:	9005883a 	mov	r2,r18
    d334:	003fdc06 	br	d2a8 <__alt_mem_onchip_memory+0xf780d2a8>
    d338:	00085ac0 	call	85ac <__sinit>
    d33c:	003fd706 	br	d29c <__alt_mem_onchip_memory+0xf780d29c>
    d340:	04bfffc4 	movi	r18,-1
    d344:	003fe806 	br	d2e8 <__alt_mem_onchip_memory+0xf780d2e8>
    d348:	81400417 	ldw	r5,16(r16)
    d34c:	8809883a 	mov	r4,r17
    d350:	00087200 	call	8720 <_free_r>
    d354:	003fe706 	br	d2f4 <__alt_mem_onchip_memory+0xf780d2f4>
    d358:	0005883a 	mov	r2,zero
    d35c:	f800283a 	ret

0000d360 <fclose>:
    d360:	00800074 	movhi	r2,1
    d364:	108d3e04 	addi	r2,r2,13560
    d368:	200b883a 	mov	r5,r4
    d36c:	11000017 	ldw	r4,0(r2)
    d370:	000d2701 	jmpi	d270 <_fclose_r>

0000d374 <__fputwc>:
    d374:	defff804 	addi	sp,sp,-32
    d378:	dcc00415 	stw	r19,16(sp)
    d37c:	dc800315 	stw	r18,12(sp)
    d380:	dc000115 	stw	r16,4(sp)
    d384:	dfc00715 	stw	ra,28(sp)
    d388:	dd400615 	stw	r21,24(sp)
    d38c:	dd000515 	stw	r20,20(sp)
    d390:	dc400215 	stw	r17,8(sp)
    d394:	2027883a 	mov	r19,r4
    d398:	2825883a 	mov	r18,r5
    d39c:	3021883a 	mov	r16,r6
    d3a0:	00091580 	call	9158 <__locale_mb_cur_max>
    d3a4:	00c00044 	movi	r3,1
    d3a8:	10c03e26 	beq	r2,r3,d4a4 <__fputwc+0x130>
    d3ac:	81c01704 	addi	r7,r16,92
    d3b0:	900d883a 	mov	r6,r18
    d3b4:	d80b883a 	mov	r5,sp
    d3b8:	9809883a 	mov	r4,r19
    d3bc:	000d6ec0 	call	d6ec <_wcrtomb_r>
    d3c0:	1029883a 	mov	r20,r2
    d3c4:	00bfffc4 	movi	r2,-1
    d3c8:	a0802026 	beq	r20,r2,d44c <__fputwc+0xd8>
    d3cc:	d9400003 	ldbu	r5,0(sp)
    d3d0:	a0001c26 	beq	r20,zero,d444 <__fputwc+0xd0>
    d3d4:	0023883a 	mov	r17,zero
    d3d8:	05400284 	movi	r21,10
    d3dc:	00000906 	br	d404 <__fputwc+0x90>
    d3e0:	80800017 	ldw	r2,0(r16)
    d3e4:	11400005 	stb	r5,0(r2)
    d3e8:	80c00017 	ldw	r3,0(r16)
    d3ec:	18c00044 	addi	r3,r3,1
    d3f0:	80c00015 	stw	r3,0(r16)
    d3f4:	8c400044 	addi	r17,r17,1
    d3f8:	dc45883a 	add	r2,sp,r17
    d3fc:	8d00112e 	bgeu	r17,r20,d444 <__fputwc+0xd0>
    d400:	11400003 	ldbu	r5,0(r2)
    d404:	80c00217 	ldw	r3,8(r16)
    d408:	18ffffc4 	addi	r3,r3,-1
    d40c:	80c00215 	stw	r3,8(r16)
    d410:	183ff30e 	bge	r3,zero,d3e0 <__alt_mem_onchip_memory+0xf780d3e0>
    d414:	80800617 	ldw	r2,24(r16)
    d418:	18801916 	blt	r3,r2,d480 <__fputwc+0x10c>
    d41c:	80800017 	ldw	r2,0(r16)
    d420:	11400005 	stb	r5,0(r2)
    d424:	80800017 	ldw	r2,0(r16)
    d428:	10c00003 	ldbu	r3,0(r2)
    d42c:	10800044 	addi	r2,r2,1
    d430:	1d402326 	beq	r3,r21,d4c0 <__fputwc+0x14c>
    d434:	80800015 	stw	r2,0(r16)
    d438:	8c400044 	addi	r17,r17,1
    d43c:	dc45883a 	add	r2,sp,r17
    d440:	8d3fef36 	bltu	r17,r20,d400 <__alt_mem_onchip_memory+0xf780d400>
    d444:	9005883a 	mov	r2,r18
    d448:	00000406 	br	d45c <__fputwc+0xe8>
    d44c:	80c0030b 	ldhu	r3,12(r16)
    d450:	a005883a 	mov	r2,r20
    d454:	18c01014 	ori	r3,r3,64
    d458:	80c0030d 	sth	r3,12(r16)
    d45c:	dfc00717 	ldw	ra,28(sp)
    d460:	dd400617 	ldw	r21,24(sp)
    d464:	dd000517 	ldw	r20,20(sp)
    d468:	dcc00417 	ldw	r19,16(sp)
    d46c:	dc800317 	ldw	r18,12(sp)
    d470:	dc400217 	ldw	r17,8(sp)
    d474:	dc000117 	ldw	r16,4(sp)
    d478:	dec00804 	addi	sp,sp,32
    d47c:	f800283a 	ret
    d480:	800d883a 	mov	r6,r16
    d484:	29403fcc 	andi	r5,r5,255
    d488:	9809883a 	mov	r4,r19
    d48c:	000cfa00 	call	cfa0 <__swbuf_r>
    d490:	10bfffe0 	cmpeqi	r2,r2,-1
    d494:	10803fcc 	andi	r2,r2,255
    d498:	103fd626 	beq	r2,zero,d3f4 <__alt_mem_onchip_memory+0xf780d3f4>
    d49c:	00bfffc4 	movi	r2,-1
    d4a0:	003fee06 	br	d45c <__alt_mem_onchip_memory+0xf780d45c>
    d4a4:	90ffffc4 	addi	r3,r18,-1
    d4a8:	01003f84 	movi	r4,254
    d4ac:	20ffbf36 	bltu	r4,r3,d3ac <__alt_mem_onchip_memory+0xf780d3ac>
    d4b0:	900b883a 	mov	r5,r18
    d4b4:	dc800005 	stb	r18,0(sp)
    d4b8:	1029883a 	mov	r20,r2
    d4bc:	003fc506 	br	d3d4 <__alt_mem_onchip_memory+0xf780d3d4>
    d4c0:	800d883a 	mov	r6,r16
    d4c4:	a80b883a 	mov	r5,r21
    d4c8:	9809883a 	mov	r4,r19
    d4cc:	000cfa00 	call	cfa0 <__swbuf_r>
    d4d0:	10bfffe0 	cmpeqi	r2,r2,-1
    d4d4:	003fef06 	br	d494 <__alt_mem_onchip_memory+0xf780d494>

0000d4d8 <_fputwc_r>:
    d4d8:	3080030b 	ldhu	r2,12(r6)
    d4dc:	10c8000c 	andi	r3,r2,8192
    d4e0:	1800051e 	bne	r3,zero,d4f8 <_fputwc_r+0x20>
    d4e4:	30c01917 	ldw	r3,100(r6)
    d4e8:	10880014 	ori	r2,r2,8192
    d4ec:	3080030d 	sth	r2,12(r6)
    d4f0:	18880014 	ori	r2,r3,8192
    d4f4:	30801915 	stw	r2,100(r6)
    d4f8:	000d3741 	jmpi	d374 <__fputwc>

0000d4fc <fputwc>:
    d4fc:	00800074 	movhi	r2,1
    d500:	defffc04 	addi	sp,sp,-16
    d504:	108d3e04 	addi	r2,r2,13560
    d508:	dc000115 	stw	r16,4(sp)
    d50c:	14000017 	ldw	r16,0(r2)
    d510:	dc400215 	stw	r17,8(sp)
    d514:	dfc00315 	stw	ra,12(sp)
    d518:	2023883a 	mov	r17,r4
    d51c:	80000226 	beq	r16,zero,d528 <fputwc+0x2c>
    d520:	80800e17 	ldw	r2,56(r16)
    d524:	10001026 	beq	r2,zero,d568 <fputwc+0x6c>
    d528:	2880030b 	ldhu	r2,12(r5)
    d52c:	10c8000c 	andi	r3,r2,8192
    d530:	1800051e 	bne	r3,zero,d548 <fputwc+0x4c>
    d534:	28c01917 	ldw	r3,100(r5)
    d538:	10880014 	ori	r2,r2,8192
    d53c:	2880030d 	sth	r2,12(r5)
    d540:	18880014 	ori	r2,r3,8192
    d544:	28801915 	stw	r2,100(r5)
    d548:	280d883a 	mov	r6,r5
    d54c:	8009883a 	mov	r4,r16
    d550:	880b883a 	mov	r5,r17
    d554:	dfc00317 	ldw	ra,12(sp)
    d558:	dc400217 	ldw	r17,8(sp)
    d55c:	dc000117 	ldw	r16,4(sp)
    d560:	dec00404 	addi	sp,sp,16
    d564:	000d3741 	jmpi	d374 <__fputwc>
    d568:	8009883a 	mov	r4,r16
    d56c:	d9400015 	stw	r5,0(sp)
    d570:	00085ac0 	call	85ac <__sinit>
    d574:	d9400017 	ldw	r5,0(sp)
    d578:	003feb06 	br	d528 <__alt_mem_onchip_memory+0xf780d528>

0000d57c <_fstat_r>:
    d57c:	defffd04 	addi	sp,sp,-12
    d580:	2805883a 	mov	r2,r5
    d584:	dc000015 	stw	r16,0(sp)
    d588:	04000074 	movhi	r16,1
    d58c:	dc400115 	stw	r17,4(sp)
    d590:	84141404 	addi	r16,r16,20560
    d594:	2023883a 	mov	r17,r4
    d598:	300b883a 	mov	r5,r6
    d59c:	1009883a 	mov	r4,r2
    d5a0:	dfc00215 	stw	ra,8(sp)
    d5a4:	80000015 	stw	zero,0(r16)
    d5a8:	000e8c00 	call	e8c0 <fstat>
    d5ac:	00ffffc4 	movi	r3,-1
    d5b0:	10c00526 	beq	r2,r3,d5c8 <_fstat_r+0x4c>
    d5b4:	dfc00217 	ldw	ra,8(sp)
    d5b8:	dc400117 	ldw	r17,4(sp)
    d5bc:	dc000017 	ldw	r16,0(sp)
    d5c0:	dec00304 	addi	sp,sp,12
    d5c4:	f800283a 	ret
    d5c8:	80c00017 	ldw	r3,0(r16)
    d5cc:	183ff926 	beq	r3,zero,d5b4 <__alt_mem_onchip_memory+0xf780d5b4>
    d5d0:	88c00015 	stw	r3,0(r17)
    d5d4:	003ff706 	br	d5b4 <__alt_mem_onchip_memory+0xf780d5b4>

0000d5d8 <_isatty_r>:
    d5d8:	defffd04 	addi	sp,sp,-12
    d5dc:	dc000015 	stw	r16,0(sp)
    d5e0:	04000074 	movhi	r16,1
    d5e4:	dc400115 	stw	r17,4(sp)
    d5e8:	84141404 	addi	r16,r16,20560
    d5ec:	2023883a 	mov	r17,r4
    d5f0:	2809883a 	mov	r4,r5
    d5f4:	dfc00215 	stw	ra,8(sp)
    d5f8:	80000015 	stw	zero,0(r16)
    d5fc:	000eba00 	call	eba0 <isatty>
    d600:	00ffffc4 	movi	r3,-1
    d604:	10c00526 	beq	r2,r3,d61c <_isatty_r+0x44>
    d608:	dfc00217 	ldw	ra,8(sp)
    d60c:	dc400117 	ldw	r17,4(sp)
    d610:	dc000017 	ldw	r16,0(sp)
    d614:	dec00304 	addi	sp,sp,12
    d618:	f800283a 	ret
    d61c:	80c00017 	ldw	r3,0(r16)
    d620:	183ff926 	beq	r3,zero,d608 <__alt_mem_onchip_memory+0xf780d608>
    d624:	88c00015 	stw	r3,0(r17)
    d628:	003ff706 	br	d608 <__alt_mem_onchip_memory+0xf780d608>

0000d62c <_lseek_r>:
    d62c:	defffd04 	addi	sp,sp,-12
    d630:	2805883a 	mov	r2,r5
    d634:	dc000015 	stw	r16,0(sp)
    d638:	04000074 	movhi	r16,1
    d63c:	dc400115 	stw	r17,4(sp)
    d640:	300b883a 	mov	r5,r6
    d644:	84141404 	addi	r16,r16,20560
    d648:	2023883a 	mov	r17,r4
    d64c:	380d883a 	mov	r6,r7
    d650:	1009883a 	mov	r4,r2
    d654:	dfc00215 	stw	ra,8(sp)
    d658:	80000015 	stw	zero,0(r16)
    d65c:	000ed6c0 	call	ed6c <lseek>
    d660:	00ffffc4 	movi	r3,-1
    d664:	10c00526 	beq	r2,r3,d67c <_lseek_r+0x50>
    d668:	dfc00217 	ldw	ra,8(sp)
    d66c:	dc400117 	ldw	r17,4(sp)
    d670:	dc000017 	ldw	r16,0(sp)
    d674:	dec00304 	addi	sp,sp,12
    d678:	f800283a 	ret
    d67c:	80c00017 	ldw	r3,0(r16)
    d680:	183ff926 	beq	r3,zero,d668 <__alt_mem_onchip_memory+0xf780d668>
    d684:	88c00015 	stw	r3,0(r17)
    d688:	003ff706 	br	d668 <__alt_mem_onchip_memory+0xf780d668>

0000d68c <_read_r>:
    d68c:	defffd04 	addi	sp,sp,-12
    d690:	2805883a 	mov	r2,r5
    d694:	dc000015 	stw	r16,0(sp)
    d698:	04000074 	movhi	r16,1
    d69c:	dc400115 	stw	r17,4(sp)
    d6a0:	300b883a 	mov	r5,r6
    d6a4:	84141404 	addi	r16,r16,20560
    d6a8:	2023883a 	mov	r17,r4
    d6ac:	380d883a 	mov	r6,r7
    d6b0:	1009883a 	mov	r4,r2
    d6b4:	dfc00215 	stw	ra,8(sp)
    d6b8:	80000015 	stw	zero,0(r16)
    d6bc:	000ef400 	call	ef40 <read>
    d6c0:	00ffffc4 	movi	r3,-1
    d6c4:	10c00526 	beq	r2,r3,d6dc <_read_r+0x50>
    d6c8:	dfc00217 	ldw	ra,8(sp)
    d6cc:	dc400117 	ldw	r17,4(sp)
    d6d0:	dc000017 	ldw	r16,0(sp)
    d6d4:	dec00304 	addi	sp,sp,12
    d6d8:	f800283a 	ret
    d6dc:	80c00017 	ldw	r3,0(r16)
    d6e0:	183ff926 	beq	r3,zero,d6c8 <__alt_mem_onchip_memory+0xf780d6c8>
    d6e4:	88c00015 	stw	r3,0(r17)
    d6e8:	003ff706 	br	d6c8 <__alt_mem_onchip_memory+0xf780d6c8>

0000d6ec <_wcrtomb_r>:
    d6ec:	defff604 	addi	sp,sp,-40
    d6f0:	00800074 	movhi	r2,1
    d6f4:	dc800815 	stw	r18,32(sp)
    d6f8:	dc400715 	stw	r17,28(sp)
    d6fc:	dc000615 	stw	r16,24(sp)
    d700:	108d4204 	addi	r2,r2,13576
    d704:	dfc00915 	stw	ra,36(sp)
    d708:	2021883a 	mov	r16,r4
    d70c:	3823883a 	mov	r17,r7
    d710:	14800017 	ldw	r18,0(r2)
    d714:	28001426 	beq	r5,zero,d768 <_wcrtomb_r+0x7c>
    d718:	d9400415 	stw	r5,16(sp)
    d71c:	d9800515 	stw	r6,20(sp)
    d720:	000914c0 	call	914c <__locale_charset>
    d724:	d9800517 	ldw	r6,20(sp)
    d728:	d9400417 	ldw	r5,16(sp)
    d72c:	100f883a 	mov	r7,r2
    d730:	dc400015 	stw	r17,0(sp)
    d734:	8009883a 	mov	r4,r16
    d738:	903ee83a 	callr	r18
    d73c:	00ffffc4 	movi	r3,-1
    d740:	10c0031e 	bne	r2,r3,d750 <_wcrtomb_r+0x64>
    d744:	88000015 	stw	zero,0(r17)
    d748:	00c02284 	movi	r3,138
    d74c:	80c00015 	stw	r3,0(r16)
    d750:	dfc00917 	ldw	ra,36(sp)
    d754:	dc800817 	ldw	r18,32(sp)
    d758:	dc400717 	ldw	r17,28(sp)
    d75c:	dc000617 	ldw	r16,24(sp)
    d760:	dec00a04 	addi	sp,sp,40
    d764:	f800283a 	ret
    d768:	000914c0 	call	914c <__locale_charset>
    d76c:	100f883a 	mov	r7,r2
    d770:	dc400015 	stw	r17,0(sp)
    d774:	000d883a 	mov	r6,zero
    d778:	d9400104 	addi	r5,sp,4
    d77c:	8009883a 	mov	r4,r16
    d780:	903ee83a 	callr	r18
    d784:	003fed06 	br	d73c <__alt_mem_onchip_memory+0xf780d73c>

0000d788 <wcrtomb>:
    d788:	defff604 	addi	sp,sp,-40
    d78c:	00800074 	movhi	r2,1
    d790:	dc800615 	stw	r18,24(sp)
    d794:	dc400515 	stw	r17,20(sp)
    d798:	108d3e04 	addi	r2,r2,13560
    d79c:	dfc00915 	stw	ra,36(sp)
    d7a0:	dd000815 	stw	r20,32(sp)
    d7a4:	dcc00715 	stw	r19,28(sp)
    d7a8:	dc000415 	stw	r16,16(sp)
    d7ac:	3025883a 	mov	r18,r6
    d7b0:	14400017 	ldw	r17,0(r2)
    d7b4:	20001926 	beq	r4,zero,d81c <wcrtomb+0x94>
    d7b8:	00800074 	movhi	r2,1
    d7bc:	108d4204 	addi	r2,r2,13576
    d7c0:	15000017 	ldw	r20,0(r2)
    d7c4:	2021883a 	mov	r16,r4
    d7c8:	2827883a 	mov	r19,r5
    d7cc:	000914c0 	call	914c <__locale_charset>
    d7d0:	100f883a 	mov	r7,r2
    d7d4:	dc800015 	stw	r18,0(sp)
    d7d8:	980d883a 	mov	r6,r19
    d7dc:	800b883a 	mov	r5,r16
    d7e0:	8809883a 	mov	r4,r17
    d7e4:	a03ee83a 	callr	r20
    d7e8:	00ffffc4 	movi	r3,-1
    d7ec:	10c0031e 	bne	r2,r3,d7fc <wcrtomb+0x74>
    d7f0:	90000015 	stw	zero,0(r18)
    d7f4:	00c02284 	movi	r3,138
    d7f8:	88c00015 	stw	r3,0(r17)
    d7fc:	dfc00917 	ldw	ra,36(sp)
    d800:	dd000817 	ldw	r20,32(sp)
    d804:	dcc00717 	ldw	r19,28(sp)
    d808:	dc800617 	ldw	r18,24(sp)
    d80c:	dc400517 	ldw	r17,20(sp)
    d810:	dc000417 	ldw	r16,16(sp)
    d814:	dec00a04 	addi	sp,sp,40
    d818:	f800283a 	ret
    d81c:	00800074 	movhi	r2,1
    d820:	108d4204 	addi	r2,r2,13576
    d824:	14000017 	ldw	r16,0(r2)
    d828:	000914c0 	call	914c <__locale_charset>
    d82c:	100f883a 	mov	r7,r2
    d830:	dc800015 	stw	r18,0(sp)
    d834:	000d883a 	mov	r6,zero
    d838:	d9400104 	addi	r5,sp,4
    d83c:	8809883a 	mov	r4,r17
    d840:	803ee83a 	callr	r16
    d844:	003fe806 	br	d7e8 <__alt_mem_onchip_memory+0xf780d7e8>

0000d848 <__ascii_wctomb>:
    d848:	28000526 	beq	r5,zero,d860 <__ascii_wctomb+0x18>
    d84c:	00803fc4 	movi	r2,255
    d850:	11800536 	bltu	r2,r6,d868 <__ascii_wctomb+0x20>
    d854:	29800005 	stb	r6,0(r5)
    d858:	00800044 	movi	r2,1
    d85c:	f800283a 	ret
    d860:	0005883a 	mov	r2,zero
    d864:	f800283a 	ret
    d868:	00802284 	movi	r2,138
    d86c:	20800015 	stw	r2,0(r4)
    d870:	00bfffc4 	movi	r2,-1
    d874:	f800283a 	ret

0000d878 <_wctomb_r>:
    d878:	00800074 	movhi	r2,1
    d87c:	defff904 	addi	sp,sp,-28
    d880:	108d4204 	addi	r2,r2,13576
    d884:	dfc00615 	stw	ra,24(sp)
    d888:	dc400515 	stw	r17,20(sp)
    d88c:	dc000415 	stw	r16,16(sp)
    d890:	3823883a 	mov	r17,r7
    d894:	14000017 	ldw	r16,0(r2)
    d898:	d9000115 	stw	r4,4(sp)
    d89c:	d9400215 	stw	r5,8(sp)
    d8a0:	d9800315 	stw	r6,12(sp)
    d8a4:	000914c0 	call	914c <__locale_charset>
    d8a8:	d9800317 	ldw	r6,12(sp)
    d8ac:	d9400217 	ldw	r5,8(sp)
    d8b0:	d9000117 	ldw	r4,4(sp)
    d8b4:	100f883a 	mov	r7,r2
    d8b8:	dc400015 	stw	r17,0(sp)
    d8bc:	803ee83a 	callr	r16
    d8c0:	dfc00617 	ldw	ra,24(sp)
    d8c4:	dc400517 	ldw	r17,20(sp)
    d8c8:	dc000417 	ldw	r16,16(sp)
    d8cc:	dec00704 	addi	sp,sp,28
    d8d0:	f800283a 	ret

0000d8d4 <__muldi3>:
    d8d4:	223fffcc 	andi	r8,r4,65535
    d8d8:	2006d43a 	srli	r3,r4,16
    d8dc:	32bfffcc 	andi	r10,r6,65535
    d8e0:	3012d43a 	srli	r9,r6,16
    d8e4:	4297383a 	mul	r11,r8,r10
    d8e8:	1a95383a 	mul	r10,r3,r10
    d8ec:	4251383a 	mul	r8,r8,r9
    d8f0:	5804d43a 	srli	r2,r11,16
    d8f4:	4291883a 	add	r8,r8,r10
    d8f8:	1205883a 	add	r2,r2,r8
    d8fc:	1a51383a 	mul	r8,r3,r9
    d900:	1280022e 	bgeu	r2,r10,d90c <__muldi3+0x38>
    d904:	00c00074 	movhi	r3,1
    d908:	40d1883a 	add	r8,r8,r3
    d90c:	1006d43a 	srli	r3,r2,16
    d910:	21cf383a 	mul	r7,r4,r7
    d914:	314b383a 	mul	r5,r6,r5
    d918:	1004943a 	slli	r2,r2,16
    d91c:	1a11883a 	add	r8,r3,r8
    d920:	5affffcc 	andi	r11,r11,65535
    d924:	3947883a 	add	r3,r7,r5
    d928:	12c5883a 	add	r2,r2,r11
    d92c:	1a07883a 	add	r3,r3,r8
    d930:	f800283a 	ret

0000d934 <__udivdi3>:
    d934:	defff504 	addi	sp,sp,-44
    d938:	dcc00415 	stw	r19,16(sp)
    d93c:	dc000115 	stw	r16,4(sp)
    d940:	dfc00a15 	stw	ra,40(sp)
    d944:	df000915 	stw	fp,36(sp)
    d948:	ddc00815 	stw	r23,32(sp)
    d94c:	dd800715 	stw	r22,28(sp)
    d950:	dd400615 	stw	r21,24(sp)
    d954:	dd000515 	stw	r20,20(sp)
    d958:	dc800315 	stw	r18,12(sp)
    d95c:	dc400215 	stw	r17,8(sp)
    d960:	2027883a 	mov	r19,r4
    d964:	2821883a 	mov	r16,r5
    d968:	3800411e 	bne	r7,zero,da70 <__udivdi3+0x13c>
    d96c:	3023883a 	mov	r17,r6
    d970:	2025883a 	mov	r18,r4
    d974:	2980522e 	bgeu	r5,r6,dac0 <__udivdi3+0x18c>
    d978:	00bfffd4 	movui	r2,65535
    d97c:	282d883a 	mov	r22,r5
    d980:	1180a836 	bltu	r2,r6,dc24 <__udivdi3+0x2f0>
    d984:	00803fc4 	movi	r2,255
    d988:	1185803a 	cmpltu	r2,r2,r6
    d98c:	100490fa 	slli	r2,r2,3
    d990:	3086d83a 	srl	r3,r6,r2
    d994:	01000074 	movhi	r4,1
    d998:	21058e44 	addi	r4,r4,5689
    d99c:	20c7883a 	add	r3,r4,r3
    d9a0:	18c00003 	ldbu	r3,0(r3)
    d9a4:	1885883a 	add	r2,r3,r2
    d9a8:	00c00804 	movi	r3,32
    d9ac:	1887c83a 	sub	r3,r3,r2
    d9b0:	18000526 	beq	r3,zero,d9c8 <__udivdi3+0x94>
    d9b4:	80e0983a 	sll	r16,r16,r3
    d9b8:	9884d83a 	srl	r2,r19,r2
    d9bc:	30e2983a 	sll	r17,r6,r3
    d9c0:	98e4983a 	sll	r18,r19,r3
    d9c4:	142cb03a 	or	r22,r2,r16
    d9c8:	882ad43a 	srli	r21,r17,16
    d9cc:	b009883a 	mov	r4,r22
    d9d0:	8d3fffcc 	andi	r20,r17,65535
    d9d4:	a80b883a 	mov	r5,r21
    d9d8:	0003f7c0 	call	3f7c <__umodsi3>
    d9dc:	b009883a 	mov	r4,r22
    d9e0:	a80b883a 	mov	r5,r21
    d9e4:	1027883a 	mov	r19,r2
    d9e8:	0003f180 	call	3f18 <__udivsi3>
    d9ec:	102d883a 	mov	r22,r2
    d9f0:	9826943a 	slli	r19,r19,16
    d9f4:	9004d43a 	srli	r2,r18,16
    d9f8:	a5a1383a 	mul	r16,r20,r22
    d9fc:	14c4b03a 	or	r2,r2,r19
    da00:	1400052e 	bgeu	r2,r16,da18 <__udivdi3+0xe4>
    da04:	1445883a 	add	r2,r2,r17
    da08:	b0ffffc4 	addi	r3,r22,-1
    da0c:	14400136 	bltu	r2,r17,da14 <__udivdi3+0xe0>
    da10:	14012336 	bltu	r2,r16,dea0 <__udivdi3+0x56c>
    da14:	182d883a 	mov	r22,r3
    da18:	1421c83a 	sub	r16,r2,r16
    da1c:	a80b883a 	mov	r5,r21
    da20:	8009883a 	mov	r4,r16
    da24:	0003f7c0 	call	3f7c <__umodsi3>
    da28:	1027883a 	mov	r19,r2
    da2c:	a80b883a 	mov	r5,r21
    da30:	8009883a 	mov	r4,r16
    da34:	0003f180 	call	3f18 <__udivsi3>
    da38:	9826943a 	slli	r19,r19,16
    da3c:	a0a9383a 	mul	r20,r20,r2
    da40:	94bfffcc 	andi	r18,r18,65535
    da44:	94e4b03a 	or	r18,r18,r19
    da48:	9500052e 	bgeu	r18,r20,da60 <__udivdi3+0x12c>
    da4c:	8ca5883a 	add	r18,r17,r18
    da50:	10ffffc4 	addi	r3,r2,-1
    da54:	9440f136 	bltu	r18,r17,de1c <__udivdi3+0x4e8>
    da58:	9500f02e 	bgeu	r18,r20,de1c <__udivdi3+0x4e8>
    da5c:	10bfff84 	addi	r2,r2,-2
    da60:	b00c943a 	slli	r6,r22,16
    da64:	0007883a 	mov	r3,zero
    da68:	3084b03a 	or	r2,r6,r2
    da6c:	00005906 	br	dbd4 <__udivdi3+0x2a0>
    da70:	29c05636 	bltu	r5,r7,dbcc <__udivdi3+0x298>
    da74:	00bfffd4 	movui	r2,65535
    da78:	11c0622e 	bgeu	r2,r7,dc04 <__udivdi3+0x2d0>
    da7c:	00804034 	movhi	r2,256
    da80:	10bfffc4 	addi	r2,r2,-1
    da84:	11c0ee36 	bltu	r2,r7,de40 <__udivdi3+0x50c>
    da88:	00800404 	movi	r2,16
    da8c:	3886d83a 	srl	r3,r7,r2
    da90:	01000074 	movhi	r4,1
    da94:	21058e44 	addi	r4,r4,5689
    da98:	20c7883a 	add	r3,r4,r3
    da9c:	18c00003 	ldbu	r3,0(r3)
    daa0:	05400804 	movi	r21,32
    daa4:	1885883a 	add	r2,r3,r2
    daa8:	a8abc83a 	sub	r21,r21,r2
    daac:	a800621e 	bne	r21,zero,dc38 <__udivdi3+0x304>
    dab0:	3c00e936 	bltu	r7,r16,de58 <__udivdi3+0x524>
    dab4:	9985403a 	cmpgeu	r2,r19,r6
    dab8:	0007883a 	mov	r3,zero
    dabc:	00004506 	br	dbd4 <__udivdi3+0x2a0>
    dac0:	3000041e 	bne	r6,zero,dad4 <__udivdi3+0x1a0>
    dac4:	000b883a 	mov	r5,zero
    dac8:	01000044 	movi	r4,1
    dacc:	0003f180 	call	3f18 <__udivsi3>
    dad0:	1023883a 	mov	r17,r2
    dad4:	00bfffd4 	movui	r2,65535
    dad8:	14404e2e 	bgeu	r2,r17,dc14 <__udivdi3+0x2e0>
    dadc:	00804034 	movhi	r2,256
    dae0:	10bfffc4 	addi	r2,r2,-1
    dae4:	1440d836 	bltu	r2,r17,de48 <__udivdi3+0x514>
    dae8:	00800404 	movi	r2,16
    daec:	8886d83a 	srl	r3,r17,r2
    daf0:	01000074 	movhi	r4,1
    daf4:	21058e44 	addi	r4,r4,5689
    daf8:	20c7883a 	add	r3,r4,r3
    dafc:	18c00003 	ldbu	r3,0(r3)
    db00:	1885883a 	add	r2,r3,r2
    db04:	00c00804 	movi	r3,32
    db08:	1887c83a 	sub	r3,r3,r2
    db0c:	18008f1e 	bne	r3,zero,dd4c <__udivdi3+0x418>
    db10:	882ad43a 	srli	r21,r17,16
    db14:	8461c83a 	sub	r16,r16,r17
    db18:	8d3fffcc 	andi	r20,r17,65535
    db1c:	00c00044 	movi	r3,1
    db20:	8009883a 	mov	r4,r16
    db24:	a80b883a 	mov	r5,r21
    db28:	d8c00015 	stw	r3,0(sp)
    db2c:	0003f7c0 	call	3f7c <__umodsi3>
    db30:	8009883a 	mov	r4,r16
    db34:	a80b883a 	mov	r5,r21
    db38:	1027883a 	mov	r19,r2
    db3c:	0003f180 	call	3f18 <__udivsi3>
    db40:	9826943a 	slli	r19,r19,16
    db44:	9008d43a 	srli	r4,r18,16
    db48:	1521383a 	mul	r16,r2,r20
    db4c:	102d883a 	mov	r22,r2
    db50:	24c8b03a 	or	r4,r4,r19
    db54:	d8c00017 	ldw	r3,0(sp)
    db58:	2400052e 	bgeu	r4,r16,db70 <__udivdi3+0x23c>
    db5c:	2449883a 	add	r4,r4,r17
    db60:	b0bfffc4 	addi	r2,r22,-1
    db64:	24400136 	bltu	r4,r17,db6c <__udivdi3+0x238>
    db68:	2400ca36 	bltu	r4,r16,de94 <__udivdi3+0x560>
    db6c:	102d883a 	mov	r22,r2
    db70:	2421c83a 	sub	r16,r4,r16
    db74:	a80b883a 	mov	r5,r21
    db78:	8009883a 	mov	r4,r16
    db7c:	d8c00015 	stw	r3,0(sp)
    db80:	0003f7c0 	call	3f7c <__umodsi3>
    db84:	1027883a 	mov	r19,r2
    db88:	a80b883a 	mov	r5,r21
    db8c:	8009883a 	mov	r4,r16
    db90:	0003f180 	call	3f18 <__udivsi3>
    db94:	9826943a 	slli	r19,r19,16
    db98:	1529383a 	mul	r20,r2,r20
    db9c:	94bfffcc 	andi	r18,r18,65535
    dba0:	94e4b03a 	or	r18,r18,r19
    dba4:	d8c00017 	ldw	r3,0(sp)
    dba8:	9500052e 	bgeu	r18,r20,dbc0 <__udivdi3+0x28c>
    dbac:	8ca5883a 	add	r18,r17,r18
    dbb0:	113fffc4 	addi	r4,r2,-1
    dbb4:	94409736 	bltu	r18,r17,de14 <__udivdi3+0x4e0>
    dbb8:	9500962e 	bgeu	r18,r20,de14 <__udivdi3+0x4e0>
    dbbc:	10bfff84 	addi	r2,r2,-2
    dbc0:	b00c943a 	slli	r6,r22,16
    dbc4:	3084b03a 	or	r2,r6,r2
    dbc8:	00000206 	br	dbd4 <__udivdi3+0x2a0>
    dbcc:	0007883a 	mov	r3,zero
    dbd0:	0005883a 	mov	r2,zero
    dbd4:	dfc00a17 	ldw	ra,40(sp)
    dbd8:	df000917 	ldw	fp,36(sp)
    dbdc:	ddc00817 	ldw	r23,32(sp)
    dbe0:	dd800717 	ldw	r22,28(sp)
    dbe4:	dd400617 	ldw	r21,24(sp)
    dbe8:	dd000517 	ldw	r20,20(sp)
    dbec:	dcc00417 	ldw	r19,16(sp)
    dbf0:	dc800317 	ldw	r18,12(sp)
    dbf4:	dc400217 	ldw	r17,8(sp)
    dbf8:	dc000117 	ldw	r16,4(sp)
    dbfc:	dec00b04 	addi	sp,sp,44
    dc00:	f800283a 	ret
    dc04:	00803fc4 	movi	r2,255
    dc08:	11c5803a 	cmpltu	r2,r2,r7
    dc0c:	100490fa 	slli	r2,r2,3
    dc10:	003f9e06 	br	da8c <__alt_mem_onchip_memory+0xf780da8c>
    dc14:	00803fc4 	movi	r2,255
    dc18:	1445803a 	cmpltu	r2,r2,r17
    dc1c:	100490fa 	slli	r2,r2,3
    dc20:	003fb206 	br	daec <__alt_mem_onchip_memory+0xf780daec>
    dc24:	00804034 	movhi	r2,256
    dc28:	10bfffc4 	addi	r2,r2,-1
    dc2c:	11808836 	bltu	r2,r6,de50 <__udivdi3+0x51c>
    dc30:	00800404 	movi	r2,16
    dc34:	003f5606 	br	d990 <__alt_mem_onchip_memory+0xf780d990>
    dc38:	30aed83a 	srl	r23,r6,r2
    dc3c:	3d4e983a 	sll	r7,r7,r21
    dc40:	80acd83a 	srl	r22,r16,r2
    dc44:	9884d83a 	srl	r2,r19,r2
    dc48:	3deeb03a 	or	r23,r7,r23
    dc4c:	b824d43a 	srli	r18,r23,16
    dc50:	8560983a 	sll	r16,r16,r21
    dc54:	b009883a 	mov	r4,r22
    dc58:	900b883a 	mov	r5,r18
    dc5c:	3568983a 	sll	r20,r6,r21
    dc60:	1420b03a 	or	r16,r2,r16
    dc64:	0003f7c0 	call	3f7c <__umodsi3>
    dc68:	b009883a 	mov	r4,r22
    dc6c:	900b883a 	mov	r5,r18
    dc70:	1023883a 	mov	r17,r2
    dc74:	0003f180 	call	3f18 <__udivsi3>
    dc78:	8808943a 	slli	r4,r17,16
    dc7c:	bf3fffcc 	andi	fp,r23,65535
    dc80:	8006d43a 	srli	r3,r16,16
    dc84:	e0a3383a 	mul	r17,fp,r2
    dc88:	100d883a 	mov	r6,r2
    dc8c:	1906b03a 	or	r3,r3,r4
    dc90:	1c40042e 	bgeu	r3,r17,dca4 <__udivdi3+0x370>
    dc94:	1dc7883a 	add	r3,r3,r23
    dc98:	10bfffc4 	addi	r2,r2,-1
    dc9c:	1dc0752e 	bgeu	r3,r23,de74 <__udivdi3+0x540>
    dca0:	100d883a 	mov	r6,r2
    dca4:	1c63c83a 	sub	r17,r3,r17
    dca8:	900b883a 	mov	r5,r18
    dcac:	8809883a 	mov	r4,r17
    dcb0:	d9800015 	stw	r6,0(sp)
    dcb4:	0003f7c0 	call	3f7c <__umodsi3>
    dcb8:	102d883a 	mov	r22,r2
    dcbc:	8809883a 	mov	r4,r17
    dcc0:	900b883a 	mov	r5,r18
    dcc4:	0003f180 	call	3f18 <__udivsi3>
    dcc8:	b02c943a 	slli	r22,r22,16
    dccc:	e089383a 	mul	r4,fp,r2
    dcd0:	843fffcc 	andi	r16,r16,65535
    dcd4:	85a0b03a 	or	r16,r16,r22
    dcd8:	d9800017 	ldw	r6,0(sp)
    dcdc:	8100042e 	bgeu	r16,r4,dcf0 <__udivdi3+0x3bc>
    dce0:	85e1883a 	add	r16,r16,r23
    dce4:	10ffffc4 	addi	r3,r2,-1
    dce8:	85c05e2e 	bgeu	r16,r23,de64 <__udivdi3+0x530>
    dcec:	1805883a 	mov	r2,r3
    dcf0:	300c943a 	slli	r6,r6,16
    dcf4:	a17fffcc 	andi	r5,r20,65535
    dcf8:	a028d43a 	srli	r20,r20,16
    dcfc:	3084b03a 	or	r2,r6,r2
    dd00:	10ffffcc 	andi	r3,r2,65535
    dd04:	100cd43a 	srli	r6,r2,16
    dd08:	194f383a 	mul	r7,r3,r5
    dd0c:	1d07383a 	mul	r3,r3,r20
    dd10:	314b383a 	mul	r5,r6,r5
    dd14:	3810d43a 	srli	r8,r7,16
    dd18:	8121c83a 	sub	r16,r16,r4
    dd1c:	1947883a 	add	r3,r3,r5
    dd20:	40c7883a 	add	r3,r8,r3
    dd24:	350d383a 	mul	r6,r6,r20
    dd28:	1940022e 	bgeu	r3,r5,dd34 <__udivdi3+0x400>
    dd2c:	01000074 	movhi	r4,1
    dd30:	310d883a 	add	r6,r6,r4
    dd34:	1828d43a 	srli	r20,r3,16
    dd38:	a18d883a 	add	r6,r20,r6
    dd3c:	81803e36 	bltu	r16,r6,de38 <__udivdi3+0x504>
    dd40:	81803826 	beq	r16,r6,de24 <__udivdi3+0x4f0>
    dd44:	0007883a 	mov	r3,zero
    dd48:	003fa206 	br	dbd4 <__alt_mem_onchip_memory+0xf780dbd4>
    dd4c:	88e2983a 	sll	r17,r17,r3
    dd50:	80a8d83a 	srl	r20,r16,r2
    dd54:	80e0983a 	sll	r16,r16,r3
    dd58:	882ad43a 	srli	r21,r17,16
    dd5c:	9884d83a 	srl	r2,r19,r2
    dd60:	a009883a 	mov	r4,r20
    dd64:	a80b883a 	mov	r5,r21
    dd68:	142eb03a 	or	r23,r2,r16
    dd6c:	98e4983a 	sll	r18,r19,r3
    dd70:	0003f7c0 	call	3f7c <__umodsi3>
    dd74:	a009883a 	mov	r4,r20
    dd78:	a80b883a 	mov	r5,r21
    dd7c:	1021883a 	mov	r16,r2
    dd80:	0003f180 	call	3f18 <__udivsi3>
    dd84:	1039883a 	mov	fp,r2
    dd88:	8d3fffcc 	andi	r20,r17,65535
    dd8c:	8020943a 	slli	r16,r16,16
    dd90:	b804d43a 	srli	r2,r23,16
    dd94:	a72d383a 	mul	r22,r20,fp
    dd98:	1404b03a 	or	r2,r2,r16
    dd9c:	1580062e 	bgeu	r2,r22,ddb8 <__udivdi3+0x484>
    dda0:	1445883a 	add	r2,r2,r17
    dda4:	e0ffffc4 	addi	r3,fp,-1
    dda8:	14403836 	bltu	r2,r17,de8c <__udivdi3+0x558>
    ddac:	1580372e 	bgeu	r2,r22,de8c <__udivdi3+0x558>
    ddb0:	e73fff84 	addi	fp,fp,-2
    ddb4:	1445883a 	add	r2,r2,r17
    ddb8:	15adc83a 	sub	r22,r2,r22
    ddbc:	a80b883a 	mov	r5,r21
    ddc0:	b009883a 	mov	r4,r22
    ddc4:	0003f7c0 	call	3f7c <__umodsi3>
    ddc8:	1027883a 	mov	r19,r2
    ddcc:	b009883a 	mov	r4,r22
    ddd0:	a80b883a 	mov	r5,r21
    ddd4:	0003f180 	call	3f18 <__udivsi3>
    ddd8:	9826943a 	slli	r19,r19,16
    dddc:	a0a1383a 	mul	r16,r20,r2
    dde0:	b93fffcc 	andi	r4,r23,65535
    dde4:	24c8b03a 	or	r4,r4,r19
    dde8:	2400062e 	bgeu	r4,r16,de04 <__udivdi3+0x4d0>
    ddec:	2449883a 	add	r4,r4,r17
    ddf0:	10ffffc4 	addi	r3,r2,-1
    ddf4:	24402336 	bltu	r4,r17,de84 <__udivdi3+0x550>
    ddf8:	2400222e 	bgeu	r4,r16,de84 <__udivdi3+0x550>
    ddfc:	10bfff84 	addi	r2,r2,-2
    de00:	2449883a 	add	r4,r4,r17
    de04:	e038943a 	slli	fp,fp,16
    de08:	2421c83a 	sub	r16,r4,r16
    de0c:	e086b03a 	or	r3,fp,r2
    de10:	003f4306 	br	db20 <__alt_mem_onchip_memory+0xf780db20>
    de14:	2005883a 	mov	r2,r4
    de18:	003f6906 	br	dbc0 <__alt_mem_onchip_memory+0xf780dbc0>
    de1c:	1805883a 	mov	r2,r3
    de20:	003f0f06 	br	da60 <__alt_mem_onchip_memory+0xf780da60>
    de24:	1806943a 	slli	r3,r3,16
    de28:	9d66983a 	sll	r19,r19,r21
    de2c:	39ffffcc 	andi	r7,r7,65535
    de30:	19c7883a 	add	r3,r3,r7
    de34:	98ffc32e 	bgeu	r19,r3,dd44 <__alt_mem_onchip_memory+0xf780dd44>
    de38:	10bfffc4 	addi	r2,r2,-1
    de3c:	003fc106 	br	dd44 <__alt_mem_onchip_memory+0xf780dd44>
    de40:	00800604 	movi	r2,24
    de44:	003f1106 	br	da8c <__alt_mem_onchip_memory+0xf780da8c>
    de48:	00800604 	movi	r2,24
    de4c:	003f2706 	br	daec <__alt_mem_onchip_memory+0xf780daec>
    de50:	00800604 	movi	r2,24
    de54:	003ece06 	br	d990 <__alt_mem_onchip_memory+0xf780d990>
    de58:	0007883a 	mov	r3,zero
    de5c:	00800044 	movi	r2,1
    de60:	003f5c06 	br	dbd4 <__alt_mem_onchip_memory+0xf780dbd4>
    de64:	813fa12e 	bgeu	r16,r4,dcec <__alt_mem_onchip_memory+0xf780dcec>
    de68:	10bfff84 	addi	r2,r2,-2
    de6c:	85e1883a 	add	r16,r16,r23
    de70:	003f9f06 	br	dcf0 <__alt_mem_onchip_memory+0xf780dcf0>
    de74:	1c7f8a2e 	bgeu	r3,r17,dca0 <__alt_mem_onchip_memory+0xf780dca0>
    de78:	31bfff84 	addi	r6,r6,-2
    de7c:	1dc7883a 	add	r3,r3,r23
    de80:	003f8806 	br	dca4 <__alt_mem_onchip_memory+0xf780dca4>
    de84:	1805883a 	mov	r2,r3
    de88:	003fde06 	br	de04 <__alt_mem_onchip_memory+0xf780de04>
    de8c:	1839883a 	mov	fp,r3
    de90:	003fc906 	br	ddb8 <__alt_mem_onchip_memory+0xf780ddb8>
    de94:	b5bfff84 	addi	r22,r22,-2
    de98:	2449883a 	add	r4,r4,r17
    de9c:	003f3406 	br	db70 <__alt_mem_onchip_memory+0xf780db70>
    dea0:	b5bfff84 	addi	r22,r22,-2
    dea4:	1445883a 	add	r2,r2,r17
    dea8:	003edb06 	br	da18 <__alt_mem_onchip_memory+0xf780da18>

0000deac <__umoddi3>:
    deac:	defff404 	addi	sp,sp,-48
    deb0:	df000a15 	stw	fp,40(sp)
    deb4:	dc400315 	stw	r17,12(sp)
    deb8:	dc000215 	stw	r16,8(sp)
    debc:	dfc00b15 	stw	ra,44(sp)
    dec0:	ddc00915 	stw	r23,36(sp)
    dec4:	dd800815 	stw	r22,32(sp)
    dec8:	dd400715 	stw	r21,28(sp)
    decc:	dd000615 	stw	r20,24(sp)
    ded0:	dcc00515 	stw	r19,20(sp)
    ded4:	dc800415 	stw	r18,16(sp)
    ded8:	2021883a 	mov	r16,r4
    dedc:	2823883a 	mov	r17,r5
    dee0:	2839883a 	mov	fp,r5
    dee4:	38003c1e 	bne	r7,zero,dfd8 <__umoddi3+0x12c>
    dee8:	3027883a 	mov	r19,r6
    deec:	2029883a 	mov	r20,r4
    def0:	2980512e 	bgeu	r5,r6,e038 <__umoddi3+0x18c>
    def4:	00bfffd4 	movui	r2,65535
    def8:	11809a36 	bltu	r2,r6,e164 <__umoddi3+0x2b8>
    defc:	01003fc4 	movi	r4,255
    df00:	2189803a 	cmpltu	r4,r4,r6
    df04:	200890fa 	slli	r4,r4,3
    df08:	3104d83a 	srl	r2,r6,r4
    df0c:	00c00074 	movhi	r3,1
    df10:	18c58e44 	addi	r3,r3,5689
    df14:	1885883a 	add	r2,r3,r2
    df18:	10c00003 	ldbu	r3,0(r2)
    df1c:	00800804 	movi	r2,32
    df20:	1909883a 	add	r4,r3,r4
    df24:	1125c83a 	sub	r18,r2,r4
    df28:	90000526 	beq	r18,zero,df40 <__umoddi3+0x94>
    df2c:	8ca2983a 	sll	r17,r17,r18
    df30:	8108d83a 	srl	r4,r16,r4
    df34:	34a6983a 	sll	r19,r6,r18
    df38:	84a8983a 	sll	r20,r16,r18
    df3c:	2478b03a 	or	fp,r4,r17
    df40:	982ed43a 	srli	r23,r19,16
    df44:	e009883a 	mov	r4,fp
    df48:	9dbfffcc 	andi	r22,r19,65535
    df4c:	b80b883a 	mov	r5,r23
    df50:	0003f7c0 	call	3f7c <__umodsi3>
    df54:	e009883a 	mov	r4,fp
    df58:	b80b883a 	mov	r5,r23
    df5c:	102b883a 	mov	r21,r2
    df60:	0003f180 	call	3f18 <__udivsi3>
    df64:	a806943a 	slli	r3,r21,16
    df68:	a008d43a 	srli	r4,r20,16
    df6c:	b085383a 	mul	r2,r22,r2
    df70:	20c8b03a 	or	r4,r4,r3
    df74:	2080032e 	bgeu	r4,r2,df84 <__umoddi3+0xd8>
    df78:	24c9883a 	add	r4,r4,r19
    df7c:	24c00136 	bltu	r4,r19,df84 <__umoddi3+0xd8>
    df80:	20811036 	bltu	r4,r2,e3c4 <__umoddi3+0x518>
    df84:	20abc83a 	sub	r21,r4,r2
    df88:	b80b883a 	mov	r5,r23
    df8c:	a809883a 	mov	r4,r21
    df90:	0003f7c0 	call	3f7c <__umodsi3>
    df94:	1023883a 	mov	r17,r2
    df98:	b80b883a 	mov	r5,r23
    df9c:	a809883a 	mov	r4,r21
    dfa0:	0003f180 	call	3f18 <__udivsi3>
    dfa4:	8822943a 	slli	r17,r17,16
    dfa8:	b085383a 	mul	r2,r22,r2
    dfac:	a0ffffcc 	andi	r3,r20,65535
    dfb0:	1c46b03a 	or	r3,r3,r17
    dfb4:	1880042e 	bgeu	r3,r2,dfc8 <__umoddi3+0x11c>
    dfb8:	1cc7883a 	add	r3,r3,r19
    dfbc:	1cc00236 	bltu	r3,r19,dfc8 <__umoddi3+0x11c>
    dfc0:	1880012e 	bgeu	r3,r2,dfc8 <__umoddi3+0x11c>
    dfc4:	1cc7883a 	add	r3,r3,r19
    dfc8:	1885c83a 	sub	r2,r3,r2
    dfcc:	1484d83a 	srl	r2,r2,r18
    dfd0:	0007883a 	mov	r3,zero
    dfd4:	00004f06 	br	e114 <__umoddi3+0x268>
    dfd8:	29c04c36 	bltu	r5,r7,e10c <__umoddi3+0x260>
    dfdc:	00bfffd4 	movui	r2,65535
    dfe0:	11c0582e 	bgeu	r2,r7,e144 <__umoddi3+0x298>
    dfe4:	00804034 	movhi	r2,256
    dfe8:	10bfffc4 	addi	r2,r2,-1
    dfec:	11c0e736 	bltu	r2,r7,e38c <__umoddi3+0x4e0>
    dff0:	01000404 	movi	r4,16
    dff4:	3904d83a 	srl	r2,r7,r4
    dff8:	00c00074 	movhi	r3,1
    dffc:	18c58e44 	addi	r3,r3,5689
    e000:	1885883a 	add	r2,r3,r2
    e004:	14c00003 	ldbu	r19,0(r2)
    e008:	00c00804 	movi	r3,32
    e00c:	9927883a 	add	r19,r19,r4
    e010:	1ce9c83a 	sub	r20,r3,r19
    e014:	a000581e 	bne	r20,zero,e178 <__umoddi3+0x2cc>
    e018:	3c400136 	bltu	r7,r17,e020 <__umoddi3+0x174>
    e01c:	8180eb36 	bltu	r16,r6,e3cc <__umoddi3+0x520>
    e020:	8185c83a 	sub	r2,r16,r6
    e024:	89e3c83a 	sub	r17,r17,r7
    e028:	8089803a 	cmpltu	r4,r16,r2
    e02c:	8939c83a 	sub	fp,r17,r4
    e030:	e007883a 	mov	r3,fp
    e034:	00003706 	br	e114 <__umoddi3+0x268>
    e038:	3000041e 	bne	r6,zero,e04c <__umoddi3+0x1a0>
    e03c:	000b883a 	mov	r5,zero
    e040:	01000044 	movi	r4,1
    e044:	0003f180 	call	3f18 <__udivsi3>
    e048:	1027883a 	mov	r19,r2
    e04c:	00bfffd4 	movui	r2,65535
    e050:	14c0402e 	bgeu	r2,r19,e154 <__umoddi3+0x2a8>
    e054:	00804034 	movhi	r2,256
    e058:	10bfffc4 	addi	r2,r2,-1
    e05c:	14c0cd36 	bltu	r2,r19,e394 <__umoddi3+0x4e8>
    e060:	00800404 	movi	r2,16
    e064:	9886d83a 	srl	r3,r19,r2
    e068:	01000074 	movhi	r4,1
    e06c:	21058e44 	addi	r4,r4,5689
    e070:	20c7883a 	add	r3,r4,r3
    e074:	18c00003 	ldbu	r3,0(r3)
    e078:	1887883a 	add	r3,r3,r2
    e07c:	00800804 	movi	r2,32
    e080:	10e5c83a 	sub	r18,r2,r3
    e084:	9000901e 	bne	r18,zero,e2c8 <__umoddi3+0x41c>
    e088:	982cd43a 	srli	r22,r19,16
    e08c:	8ce3c83a 	sub	r17,r17,r19
    e090:	9d7fffcc 	andi	r21,r19,65535
    e094:	b00b883a 	mov	r5,r22
    e098:	8809883a 	mov	r4,r17
    e09c:	0003f7c0 	call	3f7c <__umodsi3>
    e0a0:	8809883a 	mov	r4,r17
    e0a4:	b00b883a 	mov	r5,r22
    e0a8:	1021883a 	mov	r16,r2
    e0ac:	0003f180 	call	3f18 <__udivsi3>
    e0b0:	8006943a 	slli	r3,r16,16
    e0b4:	a008d43a 	srli	r4,r20,16
    e0b8:	1545383a 	mul	r2,r2,r21
    e0bc:	20c8b03a 	or	r4,r4,r3
    e0c0:	2080042e 	bgeu	r4,r2,e0d4 <__umoddi3+0x228>
    e0c4:	24c9883a 	add	r4,r4,r19
    e0c8:	24c00236 	bltu	r4,r19,e0d4 <__umoddi3+0x228>
    e0cc:	2080012e 	bgeu	r4,r2,e0d4 <__umoddi3+0x228>
    e0d0:	24c9883a 	add	r4,r4,r19
    e0d4:	20a1c83a 	sub	r16,r4,r2
    e0d8:	b00b883a 	mov	r5,r22
    e0dc:	8009883a 	mov	r4,r16
    e0e0:	0003f7c0 	call	3f7c <__umodsi3>
    e0e4:	1023883a 	mov	r17,r2
    e0e8:	b00b883a 	mov	r5,r22
    e0ec:	8009883a 	mov	r4,r16
    e0f0:	0003f180 	call	3f18 <__udivsi3>
    e0f4:	8822943a 	slli	r17,r17,16
    e0f8:	1545383a 	mul	r2,r2,r21
    e0fc:	a53fffcc 	andi	r20,r20,65535
    e100:	a446b03a 	or	r3,r20,r17
    e104:	18bfb02e 	bgeu	r3,r2,dfc8 <__alt_mem_onchip_memory+0xf780dfc8>
    e108:	003fab06 	br	dfb8 <__alt_mem_onchip_memory+0xf780dfb8>
    e10c:	2005883a 	mov	r2,r4
    e110:	2807883a 	mov	r3,r5
    e114:	dfc00b17 	ldw	ra,44(sp)
    e118:	df000a17 	ldw	fp,40(sp)
    e11c:	ddc00917 	ldw	r23,36(sp)
    e120:	dd800817 	ldw	r22,32(sp)
    e124:	dd400717 	ldw	r21,28(sp)
    e128:	dd000617 	ldw	r20,24(sp)
    e12c:	dcc00517 	ldw	r19,20(sp)
    e130:	dc800417 	ldw	r18,16(sp)
    e134:	dc400317 	ldw	r17,12(sp)
    e138:	dc000217 	ldw	r16,8(sp)
    e13c:	dec00c04 	addi	sp,sp,48
    e140:	f800283a 	ret
    e144:	04c03fc4 	movi	r19,255
    e148:	99c9803a 	cmpltu	r4,r19,r7
    e14c:	200890fa 	slli	r4,r4,3
    e150:	003fa806 	br	dff4 <__alt_mem_onchip_memory+0xf780dff4>
    e154:	00803fc4 	movi	r2,255
    e158:	14c5803a 	cmpltu	r2,r2,r19
    e15c:	100490fa 	slli	r2,r2,3
    e160:	003fc006 	br	e064 <__alt_mem_onchip_memory+0xf780e064>
    e164:	00804034 	movhi	r2,256
    e168:	10bfffc4 	addi	r2,r2,-1
    e16c:	11808b36 	bltu	r2,r6,e39c <__umoddi3+0x4f0>
    e170:	01000404 	movi	r4,16
    e174:	003f6406 	br	df08 <__alt_mem_onchip_memory+0xf780df08>
    e178:	34c4d83a 	srl	r2,r6,r19
    e17c:	3d0e983a 	sll	r7,r7,r20
    e180:	8cf8d83a 	srl	fp,r17,r19
    e184:	8d10983a 	sll	r8,r17,r20
    e188:	38aab03a 	or	r21,r7,r2
    e18c:	a82cd43a 	srli	r22,r21,16
    e190:	84e2d83a 	srl	r17,r16,r19
    e194:	e009883a 	mov	r4,fp
    e198:	b00b883a 	mov	r5,r22
    e19c:	8a22b03a 	or	r17,r17,r8
    e1a0:	3524983a 	sll	r18,r6,r20
    e1a4:	0003f7c0 	call	3f7c <__umodsi3>
    e1a8:	e009883a 	mov	r4,fp
    e1ac:	b00b883a 	mov	r5,r22
    e1b0:	102f883a 	mov	r23,r2
    e1b4:	0003f180 	call	3f18 <__udivsi3>
    e1b8:	100d883a 	mov	r6,r2
    e1bc:	b808943a 	slli	r4,r23,16
    e1c0:	aa3fffcc 	andi	r8,r21,65535
    e1c4:	8804d43a 	srli	r2,r17,16
    e1c8:	41af383a 	mul	r23,r8,r6
    e1cc:	8520983a 	sll	r16,r16,r20
    e1d0:	1104b03a 	or	r2,r2,r4
    e1d4:	15c0042e 	bgeu	r2,r23,e1e8 <__umoddi3+0x33c>
    e1d8:	1545883a 	add	r2,r2,r21
    e1dc:	30ffffc4 	addi	r3,r6,-1
    e1e0:	1540742e 	bgeu	r2,r21,e3b4 <__umoddi3+0x508>
    e1e4:	180d883a 	mov	r6,r3
    e1e8:	15efc83a 	sub	r23,r2,r23
    e1ec:	b00b883a 	mov	r5,r22
    e1f0:	b809883a 	mov	r4,r23
    e1f4:	d9800115 	stw	r6,4(sp)
    e1f8:	da000015 	stw	r8,0(sp)
    e1fc:	0003f7c0 	call	3f7c <__umodsi3>
    e200:	b00b883a 	mov	r5,r22
    e204:	b809883a 	mov	r4,r23
    e208:	1039883a 	mov	fp,r2
    e20c:	0003f180 	call	3f18 <__udivsi3>
    e210:	da000017 	ldw	r8,0(sp)
    e214:	e038943a 	slli	fp,fp,16
    e218:	100b883a 	mov	r5,r2
    e21c:	4089383a 	mul	r4,r8,r2
    e220:	8a3fffcc 	andi	r8,r17,65535
    e224:	4710b03a 	or	r8,r8,fp
    e228:	d9800117 	ldw	r6,4(sp)
    e22c:	4100042e 	bgeu	r8,r4,e240 <__umoddi3+0x394>
    e230:	4551883a 	add	r8,r8,r21
    e234:	10bfffc4 	addi	r2,r2,-1
    e238:	45405a2e 	bgeu	r8,r21,e3a4 <__umoddi3+0x4f8>
    e23c:	100b883a 	mov	r5,r2
    e240:	300c943a 	slli	r6,r6,16
    e244:	91ffffcc 	andi	r7,r18,65535
    e248:	9004d43a 	srli	r2,r18,16
    e24c:	314cb03a 	or	r6,r6,r5
    e250:	317fffcc 	andi	r5,r6,65535
    e254:	300cd43a 	srli	r6,r6,16
    e258:	29d3383a 	mul	r9,r5,r7
    e25c:	288b383a 	mul	r5,r5,r2
    e260:	31cf383a 	mul	r7,r6,r7
    e264:	4806d43a 	srli	r3,r9,16
    e268:	4111c83a 	sub	r8,r8,r4
    e26c:	29cb883a 	add	r5,r5,r7
    e270:	194b883a 	add	r5,r3,r5
    e274:	3085383a 	mul	r2,r6,r2
    e278:	29c0022e 	bgeu	r5,r7,e284 <__umoddi3+0x3d8>
    e27c:	00c00074 	movhi	r3,1
    e280:	10c5883a 	add	r2,r2,r3
    e284:	2808d43a 	srli	r4,r5,16
    e288:	280a943a 	slli	r5,r5,16
    e28c:	4a7fffcc 	andi	r9,r9,65535
    e290:	2085883a 	add	r2,r4,r2
    e294:	2a4b883a 	add	r5,r5,r9
    e298:	40803636 	bltu	r8,r2,e374 <__umoddi3+0x4c8>
    e29c:	40804d26 	beq	r8,r2,e3d4 <__umoddi3+0x528>
    e2a0:	4089c83a 	sub	r4,r8,r2
    e2a4:	280f883a 	mov	r7,r5
    e2a8:	81cfc83a 	sub	r7,r16,r7
    e2ac:	81c7803a 	cmpltu	r3,r16,r7
    e2b0:	20c7c83a 	sub	r3,r4,r3
    e2b4:	1cc4983a 	sll	r2,r3,r19
    e2b8:	3d0ed83a 	srl	r7,r7,r20
    e2bc:	1d06d83a 	srl	r3,r3,r20
    e2c0:	11c4b03a 	or	r2,r2,r7
    e2c4:	003f9306 	br	e114 <__alt_mem_onchip_memory+0xf780e114>
    e2c8:	9ca6983a 	sll	r19,r19,r18
    e2cc:	88e8d83a 	srl	r20,r17,r3
    e2d0:	80c4d83a 	srl	r2,r16,r3
    e2d4:	982cd43a 	srli	r22,r19,16
    e2d8:	8ca2983a 	sll	r17,r17,r18
    e2dc:	a009883a 	mov	r4,r20
    e2e0:	b00b883a 	mov	r5,r22
    e2e4:	1478b03a 	or	fp,r2,r17
    e2e8:	0003f7c0 	call	3f7c <__umodsi3>
    e2ec:	a009883a 	mov	r4,r20
    e2f0:	b00b883a 	mov	r5,r22
    e2f4:	1023883a 	mov	r17,r2
    e2f8:	0003f180 	call	3f18 <__udivsi3>
    e2fc:	9d7fffcc 	andi	r21,r19,65535
    e300:	880a943a 	slli	r5,r17,16
    e304:	e008d43a 	srli	r4,fp,16
    e308:	a885383a 	mul	r2,r21,r2
    e30c:	84a8983a 	sll	r20,r16,r18
    e310:	2148b03a 	or	r4,r4,r5
    e314:	2080042e 	bgeu	r4,r2,e328 <__umoddi3+0x47c>
    e318:	24c9883a 	add	r4,r4,r19
    e31c:	24c00236 	bltu	r4,r19,e328 <__umoddi3+0x47c>
    e320:	2080012e 	bgeu	r4,r2,e328 <__umoddi3+0x47c>
    e324:	24c9883a 	add	r4,r4,r19
    e328:	20a3c83a 	sub	r17,r4,r2
    e32c:	b00b883a 	mov	r5,r22
    e330:	8809883a 	mov	r4,r17
    e334:	0003f7c0 	call	3f7c <__umodsi3>
    e338:	102f883a 	mov	r23,r2
    e33c:	8809883a 	mov	r4,r17
    e340:	b00b883a 	mov	r5,r22
    e344:	0003f180 	call	3f18 <__udivsi3>
    e348:	b82e943a 	slli	r23,r23,16
    e34c:	a885383a 	mul	r2,r21,r2
    e350:	e13fffcc 	andi	r4,fp,65535
    e354:	25c8b03a 	or	r4,r4,r23
    e358:	2080042e 	bgeu	r4,r2,e36c <__umoddi3+0x4c0>
    e35c:	24c9883a 	add	r4,r4,r19
    e360:	24c00236 	bltu	r4,r19,e36c <__umoddi3+0x4c0>
    e364:	2080012e 	bgeu	r4,r2,e36c <__umoddi3+0x4c0>
    e368:	24c9883a 	add	r4,r4,r19
    e36c:	20a3c83a 	sub	r17,r4,r2
    e370:	003f4806 	br	e094 <__alt_mem_onchip_memory+0xf780e094>
    e374:	2c8fc83a 	sub	r7,r5,r18
    e378:	1545c83a 	sub	r2,r2,r21
    e37c:	29cb803a 	cmpltu	r5,r5,r7
    e380:	1145c83a 	sub	r2,r2,r5
    e384:	4089c83a 	sub	r4,r8,r2
    e388:	003fc706 	br	e2a8 <__alt_mem_onchip_memory+0xf780e2a8>
    e38c:	01000604 	movi	r4,24
    e390:	003f1806 	br	dff4 <__alt_mem_onchip_memory+0xf780dff4>
    e394:	00800604 	movi	r2,24
    e398:	003f3206 	br	e064 <__alt_mem_onchip_memory+0xf780e064>
    e39c:	01000604 	movi	r4,24
    e3a0:	003ed906 	br	df08 <__alt_mem_onchip_memory+0xf780df08>
    e3a4:	413fa52e 	bgeu	r8,r4,e23c <__alt_mem_onchip_memory+0xf780e23c>
    e3a8:	297fff84 	addi	r5,r5,-2
    e3ac:	4551883a 	add	r8,r8,r21
    e3b0:	003fa306 	br	e240 <__alt_mem_onchip_memory+0xf780e240>
    e3b4:	15ff8b2e 	bgeu	r2,r23,e1e4 <__alt_mem_onchip_memory+0xf780e1e4>
    e3b8:	31bfff84 	addi	r6,r6,-2
    e3bc:	1545883a 	add	r2,r2,r21
    e3c0:	003f8906 	br	e1e8 <__alt_mem_onchip_memory+0xf780e1e8>
    e3c4:	24c9883a 	add	r4,r4,r19
    e3c8:	003eee06 	br	df84 <__alt_mem_onchip_memory+0xf780df84>
    e3cc:	8005883a 	mov	r2,r16
    e3d0:	003f1706 	br	e030 <__alt_mem_onchip_memory+0xf780e030>
    e3d4:	817fe736 	bltu	r16,r5,e374 <__alt_mem_onchip_memory+0xf780e374>
    e3d8:	280f883a 	mov	r7,r5
    e3dc:	0009883a 	mov	r4,zero
    e3e0:	003fb106 	br	e2a8 <__alt_mem_onchip_memory+0xf780e2a8>

0000e3e4 <__eqdf2>:
    e3e4:	2804d53a 	srli	r2,r5,20
    e3e8:	3806d53a 	srli	r3,r7,20
    e3ec:	02000434 	movhi	r8,16
    e3f0:	423fffc4 	addi	r8,r8,-1
    e3f4:	1081ffcc 	andi	r2,r2,2047
    e3f8:	0281ffc4 	movi	r10,2047
    e3fc:	2a12703a 	and	r9,r5,r8
    e400:	18c1ffcc 	andi	r3,r3,2047
    e404:	3a10703a 	and	r8,r7,r8
    e408:	280ad7fa 	srli	r5,r5,31
    e40c:	380ed7fa 	srli	r7,r7,31
    e410:	12801026 	beq	r2,r10,e454 <__eqdf2+0x70>
    e414:	0281ffc4 	movi	r10,2047
    e418:	1a800a26 	beq	r3,r10,e444 <__eqdf2+0x60>
    e41c:	10c00226 	beq	r2,r3,e428 <__eqdf2+0x44>
    e420:	00800044 	movi	r2,1
    e424:	f800283a 	ret
    e428:	4a3ffd1e 	bne	r9,r8,e420 <__alt_mem_onchip_memory+0xf780e420>
    e42c:	21bffc1e 	bne	r4,r6,e420 <__alt_mem_onchip_memory+0xf780e420>
    e430:	29c00c26 	beq	r5,r7,e464 <__eqdf2+0x80>
    e434:	103ffa1e 	bne	r2,zero,e420 <__alt_mem_onchip_memory+0xf780e420>
    e438:	2244b03a 	or	r2,r4,r9
    e43c:	1004c03a 	cmpne	r2,r2,zero
    e440:	f800283a 	ret
    e444:	3214b03a 	or	r10,r6,r8
    e448:	503ff426 	beq	r10,zero,e41c <__alt_mem_onchip_memory+0xf780e41c>
    e44c:	00800044 	movi	r2,1
    e450:	f800283a 	ret
    e454:	2254b03a 	or	r10,r4,r9
    e458:	503fee26 	beq	r10,zero,e414 <__alt_mem_onchip_memory+0xf780e414>
    e45c:	00800044 	movi	r2,1
    e460:	f800283a 	ret
    e464:	0005883a 	mov	r2,zero
    e468:	f800283a 	ret

0000e46c <__gedf2>:
    e46c:	2804d53a 	srli	r2,r5,20
    e470:	3806d53a 	srli	r3,r7,20
    e474:	02000434 	movhi	r8,16
    e478:	423fffc4 	addi	r8,r8,-1
    e47c:	1081ffcc 	andi	r2,r2,2047
    e480:	0241ffc4 	movi	r9,2047
    e484:	2a14703a 	and	r10,r5,r8
    e488:	18c1ffcc 	andi	r3,r3,2047
    e48c:	3a10703a 	and	r8,r7,r8
    e490:	280ad7fa 	srli	r5,r5,31
    e494:	380ed7fa 	srli	r7,r7,31
    e498:	12401d26 	beq	r2,r9,e510 <__gedf2+0xa4>
    e49c:	0241ffc4 	movi	r9,2047
    e4a0:	1a401226 	beq	r3,r9,e4ec <__gedf2+0x80>
    e4a4:	1000081e 	bne	r2,zero,e4c8 <__gedf2+0x5c>
    e4a8:	2296b03a 	or	r11,r4,r10
    e4ac:	5813003a 	cmpeq	r9,r11,zero
    e4b0:	1800091e 	bne	r3,zero,e4d8 <__gedf2+0x6c>
    e4b4:	3218b03a 	or	r12,r6,r8
    e4b8:	6000071e 	bne	r12,zero,e4d8 <__gedf2+0x6c>
    e4bc:	0005883a 	mov	r2,zero
    e4c0:	5800101e 	bne	r11,zero,e504 <__gedf2+0x98>
    e4c4:	f800283a 	ret
    e4c8:	18000c1e 	bne	r3,zero,e4fc <__gedf2+0x90>
    e4cc:	3212b03a 	or	r9,r6,r8
    e4d0:	48000c26 	beq	r9,zero,e504 <__gedf2+0x98>
    e4d4:	0013883a 	mov	r9,zero
    e4d8:	39c03fcc 	andi	r7,r7,255
    e4dc:	48000826 	beq	r9,zero,e500 <__gedf2+0x94>
    e4e0:	38000926 	beq	r7,zero,e508 <__gedf2+0x9c>
    e4e4:	00800044 	movi	r2,1
    e4e8:	f800283a 	ret
    e4ec:	3212b03a 	or	r9,r6,r8
    e4f0:	483fec26 	beq	r9,zero,e4a4 <__alt_mem_onchip_memory+0xf780e4a4>
    e4f4:	00bfff84 	movi	r2,-2
    e4f8:	f800283a 	ret
    e4fc:	39c03fcc 	andi	r7,r7,255
    e500:	29c00626 	beq	r5,r7,e51c <__gedf2+0xb0>
    e504:	283ff726 	beq	r5,zero,e4e4 <__alt_mem_onchip_memory+0xf780e4e4>
    e508:	00bfffc4 	movi	r2,-1
    e50c:	f800283a 	ret
    e510:	2292b03a 	or	r9,r4,r10
    e514:	483fe126 	beq	r9,zero,e49c <__alt_mem_onchip_memory+0xf780e49c>
    e518:	003ff606 	br	e4f4 <__alt_mem_onchip_memory+0xf780e4f4>
    e51c:	18bff916 	blt	r3,r2,e504 <__alt_mem_onchip_memory+0xf780e504>
    e520:	10c00316 	blt	r2,r3,e530 <__gedf2+0xc4>
    e524:	42bff736 	bltu	r8,r10,e504 <__alt_mem_onchip_memory+0xf780e504>
    e528:	52000326 	beq	r10,r8,e538 <__gedf2+0xcc>
    e52c:	5200042e 	bgeu	r10,r8,e540 <__gedf2+0xd4>
    e530:	283fec1e 	bne	r5,zero,e4e4 <__alt_mem_onchip_memory+0xf780e4e4>
    e534:	003ff406 	br	e508 <__alt_mem_onchip_memory+0xf780e508>
    e538:	313ff236 	bltu	r6,r4,e504 <__alt_mem_onchip_memory+0xf780e504>
    e53c:	21bffc36 	bltu	r4,r6,e530 <__alt_mem_onchip_memory+0xf780e530>
    e540:	0005883a 	mov	r2,zero
    e544:	f800283a 	ret

0000e548 <__fixdfsi>:
    e548:	280cd53a 	srli	r6,r5,20
    e54c:	00c00434 	movhi	r3,16
    e550:	18ffffc4 	addi	r3,r3,-1
    e554:	3181ffcc 	andi	r6,r6,2047
    e558:	01c0ff84 	movi	r7,1022
    e55c:	28c6703a 	and	r3,r5,r3
    e560:	280ad7fa 	srli	r5,r5,31
    e564:	3980120e 	bge	r7,r6,e5b0 <__fixdfsi+0x68>
    e568:	00810744 	movi	r2,1053
    e56c:	11800c16 	blt	r2,r6,e5a0 <__fixdfsi+0x58>
    e570:	00810cc4 	movi	r2,1075
    e574:	1185c83a 	sub	r2,r2,r6
    e578:	01c007c4 	movi	r7,31
    e57c:	18c00434 	orhi	r3,r3,16
    e580:	38800d16 	blt	r7,r2,e5b8 <__fixdfsi+0x70>
    e584:	31befb44 	addi	r6,r6,-1043
    e588:	2084d83a 	srl	r2,r4,r2
    e58c:	1986983a 	sll	r3,r3,r6
    e590:	1884b03a 	or	r2,r3,r2
    e594:	28000726 	beq	r5,zero,e5b4 <__fixdfsi+0x6c>
    e598:	0085c83a 	sub	r2,zero,r2
    e59c:	f800283a 	ret
    e5a0:	00a00034 	movhi	r2,32768
    e5a4:	10bfffc4 	addi	r2,r2,-1
    e5a8:	2885883a 	add	r2,r5,r2
    e5ac:	f800283a 	ret
    e5b0:	0005883a 	mov	r2,zero
    e5b4:	f800283a 	ret
    e5b8:	008104c4 	movi	r2,1043
    e5bc:	1185c83a 	sub	r2,r2,r6
    e5c0:	1884d83a 	srl	r2,r3,r2
    e5c4:	003ff306 	br	e594 <__alt_mem_onchip_memory+0xf780e594>

0000e5c8 <__floatsidf>:
    e5c8:	defffd04 	addi	sp,sp,-12
    e5cc:	dfc00215 	stw	ra,8(sp)
    e5d0:	dc400115 	stw	r17,4(sp)
    e5d4:	dc000015 	stw	r16,0(sp)
    e5d8:	20002b26 	beq	r4,zero,e688 <__floatsidf+0xc0>
    e5dc:	2023883a 	mov	r17,r4
    e5e0:	2020d7fa 	srli	r16,r4,31
    e5e4:	20002d16 	blt	r4,zero,e69c <__floatsidf+0xd4>
    e5e8:	8809883a 	mov	r4,r17
    e5ec:	0003dbc0 	call	3dbc <__clzsi2>
    e5f0:	01410784 	movi	r5,1054
    e5f4:	288bc83a 	sub	r5,r5,r2
    e5f8:	01010cc4 	movi	r4,1075
    e5fc:	2149c83a 	sub	r4,r4,r5
    e600:	00c007c4 	movi	r3,31
    e604:	1900160e 	bge	r3,r4,e660 <__floatsidf+0x98>
    e608:	00c104c4 	movi	r3,1043
    e60c:	1947c83a 	sub	r3,r3,r5
    e610:	88c6983a 	sll	r3,r17,r3
    e614:	00800434 	movhi	r2,16
    e618:	10bfffc4 	addi	r2,r2,-1
    e61c:	1886703a 	and	r3,r3,r2
    e620:	2941ffcc 	andi	r5,r5,2047
    e624:	800d883a 	mov	r6,r16
    e628:	0005883a 	mov	r2,zero
    e62c:	280a953a 	slli	r5,r5,20
    e630:	31803fcc 	andi	r6,r6,255
    e634:	01000434 	movhi	r4,16
    e638:	300c97fa 	slli	r6,r6,31
    e63c:	213fffc4 	addi	r4,r4,-1
    e640:	1906703a 	and	r3,r3,r4
    e644:	1946b03a 	or	r3,r3,r5
    e648:	1986b03a 	or	r3,r3,r6
    e64c:	dfc00217 	ldw	ra,8(sp)
    e650:	dc400117 	ldw	r17,4(sp)
    e654:	dc000017 	ldw	r16,0(sp)
    e658:	dec00304 	addi	sp,sp,12
    e65c:	f800283a 	ret
    e660:	00c002c4 	movi	r3,11
    e664:	1887c83a 	sub	r3,r3,r2
    e668:	88c6d83a 	srl	r3,r17,r3
    e66c:	8904983a 	sll	r2,r17,r4
    e670:	01000434 	movhi	r4,16
    e674:	213fffc4 	addi	r4,r4,-1
    e678:	2941ffcc 	andi	r5,r5,2047
    e67c:	1906703a 	and	r3,r3,r4
    e680:	800d883a 	mov	r6,r16
    e684:	003fe906 	br	e62c <__alt_mem_onchip_memory+0xf780e62c>
    e688:	000d883a 	mov	r6,zero
    e68c:	000b883a 	mov	r5,zero
    e690:	0007883a 	mov	r3,zero
    e694:	0005883a 	mov	r2,zero
    e698:	003fe406 	br	e62c <__alt_mem_onchip_memory+0xf780e62c>
    e69c:	0123c83a 	sub	r17,zero,r4
    e6a0:	003fd106 	br	e5e8 <__alt_mem_onchip_memory+0xf780e5e8>

0000e6a4 <__floatunsidf>:
    e6a4:	defffe04 	addi	sp,sp,-8
    e6a8:	dc000015 	stw	r16,0(sp)
    e6ac:	dfc00115 	stw	ra,4(sp)
    e6b0:	2021883a 	mov	r16,r4
    e6b4:	20002226 	beq	r4,zero,e740 <__floatunsidf+0x9c>
    e6b8:	0003dbc0 	call	3dbc <__clzsi2>
    e6bc:	01010784 	movi	r4,1054
    e6c0:	2089c83a 	sub	r4,r4,r2
    e6c4:	01810cc4 	movi	r6,1075
    e6c8:	310dc83a 	sub	r6,r6,r4
    e6cc:	00c007c4 	movi	r3,31
    e6d0:	1980120e 	bge	r3,r6,e71c <__floatunsidf+0x78>
    e6d4:	00c104c4 	movi	r3,1043
    e6d8:	1907c83a 	sub	r3,r3,r4
    e6dc:	80ca983a 	sll	r5,r16,r3
    e6e0:	00800434 	movhi	r2,16
    e6e4:	10bfffc4 	addi	r2,r2,-1
    e6e8:	2101ffcc 	andi	r4,r4,2047
    e6ec:	0021883a 	mov	r16,zero
    e6f0:	288a703a 	and	r5,r5,r2
    e6f4:	2008953a 	slli	r4,r4,20
    e6f8:	00c00434 	movhi	r3,16
    e6fc:	18ffffc4 	addi	r3,r3,-1
    e700:	28c6703a 	and	r3,r5,r3
    e704:	8005883a 	mov	r2,r16
    e708:	1906b03a 	or	r3,r3,r4
    e70c:	dfc00117 	ldw	ra,4(sp)
    e710:	dc000017 	ldw	r16,0(sp)
    e714:	dec00204 	addi	sp,sp,8
    e718:	f800283a 	ret
    e71c:	00c002c4 	movi	r3,11
    e720:	188bc83a 	sub	r5,r3,r2
    e724:	814ad83a 	srl	r5,r16,r5
    e728:	00c00434 	movhi	r3,16
    e72c:	18ffffc4 	addi	r3,r3,-1
    e730:	81a0983a 	sll	r16,r16,r6
    e734:	2101ffcc 	andi	r4,r4,2047
    e738:	28ca703a 	and	r5,r5,r3
    e73c:	003fed06 	br	e6f4 <__alt_mem_onchip_memory+0xf780e6f4>
    e740:	0009883a 	mov	r4,zero
    e744:	000b883a 	mov	r5,zero
    e748:	003fea06 	br	e6f4 <__alt_mem_onchip_memory+0xf780e6f4>

0000e74c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e74c:	defffe04 	addi	sp,sp,-8
    e750:	dfc00115 	stw	ra,4(sp)
    e754:	df000015 	stw	fp,0(sp)
    e758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e75c:	d0a01017 	ldw	r2,-32704(gp)
    e760:	10000326 	beq	r2,zero,e770 <alt_get_errno+0x24>
    e764:	d0a01017 	ldw	r2,-32704(gp)
    e768:	103ee83a 	callr	r2
    e76c:	00000106 	br	e774 <alt_get_errno+0x28>
    e770:	d0a6dc04 	addi	r2,gp,-25744
}
    e774:	e037883a 	mov	sp,fp
    e778:	dfc00117 	ldw	ra,4(sp)
    e77c:	df000017 	ldw	fp,0(sp)
    e780:	dec00204 	addi	sp,sp,8
    e784:	f800283a 	ret

0000e788 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e788:	defffb04 	addi	sp,sp,-20
    e78c:	dfc00415 	stw	ra,16(sp)
    e790:	df000315 	stw	fp,12(sp)
    e794:	df000304 	addi	fp,sp,12
    e798:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e79c:	e0bfff17 	ldw	r2,-4(fp)
    e7a0:	10000616 	blt	r2,zero,e7bc <close+0x34>
    e7a4:	e0bfff17 	ldw	r2,-4(fp)
    e7a8:	10c00324 	muli	r3,r2,12
    e7ac:	00800074 	movhi	r2,1
    e7b0:	1088c004 	addi	r2,r2,8960
    e7b4:	1885883a 	add	r2,r3,r2
    e7b8:	00000106 	br	e7c0 <close+0x38>
    e7bc:	0005883a 	mov	r2,zero
    e7c0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e7c4:	e0bffd17 	ldw	r2,-12(fp)
    e7c8:	10001926 	beq	r2,zero,e830 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e7cc:	e0bffd17 	ldw	r2,-12(fp)
    e7d0:	10800017 	ldw	r2,0(r2)
    e7d4:	10800417 	ldw	r2,16(r2)
    e7d8:	10000626 	beq	r2,zero,e7f4 <close+0x6c>
    e7dc:	e0bffd17 	ldw	r2,-12(fp)
    e7e0:	10800017 	ldw	r2,0(r2)
    e7e4:	10800417 	ldw	r2,16(r2)
    e7e8:	e13ffd17 	ldw	r4,-12(fp)
    e7ec:	103ee83a 	callr	r2
    e7f0:	00000106 	br	e7f8 <close+0x70>
    e7f4:	0005883a 	mov	r2,zero
    e7f8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e7fc:	e13fff17 	ldw	r4,-4(fp)
    e800:	000f03c0 	call	f03c <alt_release_fd>
    if (rval < 0)
    e804:	e0bffe17 	ldw	r2,-8(fp)
    e808:	1000070e 	bge	r2,zero,e828 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e80c:	000e74c0 	call	e74c <alt_get_errno>
    e810:	1007883a 	mov	r3,r2
    e814:	e0bffe17 	ldw	r2,-8(fp)
    e818:	0085c83a 	sub	r2,zero,r2
    e81c:	18800015 	stw	r2,0(r3)
      return -1;
    e820:	00bfffc4 	movi	r2,-1
    e824:	00000706 	br	e844 <close+0xbc>
    }
    return 0;
    e828:	0005883a 	mov	r2,zero
    e82c:	00000506 	br	e844 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e830:	000e74c0 	call	e74c <alt_get_errno>
    e834:	1007883a 	mov	r3,r2
    e838:	00801444 	movi	r2,81
    e83c:	18800015 	stw	r2,0(r3)
    return -1;
    e840:	00bfffc4 	movi	r2,-1
  }
}
    e844:	e037883a 	mov	sp,fp
    e848:	dfc00117 	ldw	ra,4(sp)
    e84c:	df000017 	ldw	fp,0(sp)
    e850:	dec00204 	addi	sp,sp,8
    e854:	f800283a 	ret

0000e858 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e858:	defffc04 	addi	sp,sp,-16
    e85c:	df000315 	stw	fp,12(sp)
    e860:	df000304 	addi	fp,sp,12
    e864:	e13ffd15 	stw	r4,-12(fp)
    e868:	e17ffe15 	stw	r5,-8(fp)
    e86c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e870:	e0bfff17 	ldw	r2,-4(fp)
}
    e874:	e037883a 	mov	sp,fp
    e878:	df000017 	ldw	fp,0(sp)
    e87c:	dec00104 	addi	sp,sp,4
    e880:	f800283a 	ret

0000e884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e884:	defffe04 	addi	sp,sp,-8
    e888:	dfc00115 	stw	ra,4(sp)
    e88c:	df000015 	stw	fp,0(sp)
    e890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e894:	d0a01017 	ldw	r2,-32704(gp)
    e898:	10000326 	beq	r2,zero,e8a8 <alt_get_errno+0x24>
    e89c:	d0a01017 	ldw	r2,-32704(gp)
    e8a0:	103ee83a 	callr	r2
    e8a4:	00000106 	br	e8ac <alt_get_errno+0x28>
    e8a8:	d0a6dc04 	addi	r2,gp,-25744
}
    e8ac:	e037883a 	mov	sp,fp
    e8b0:	dfc00117 	ldw	ra,4(sp)
    e8b4:	df000017 	ldw	fp,0(sp)
    e8b8:	dec00204 	addi	sp,sp,8
    e8bc:	f800283a 	ret

0000e8c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e8c0:	defffb04 	addi	sp,sp,-20
    e8c4:	dfc00415 	stw	ra,16(sp)
    e8c8:	df000315 	stw	fp,12(sp)
    e8cc:	df000304 	addi	fp,sp,12
    e8d0:	e13ffe15 	stw	r4,-8(fp)
    e8d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e8d8:	e0bffe17 	ldw	r2,-8(fp)
    e8dc:	10000616 	blt	r2,zero,e8f8 <fstat+0x38>
    e8e0:	e0bffe17 	ldw	r2,-8(fp)
    e8e4:	10c00324 	muli	r3,r2,12
    e8e8:	00800074 	movhi	r2,1
    e8ec:	1088c004 	addi	r2,r2,8960
    e8f0:	1885883a 	add	r2,r3,r2
    e8f4:	00000106 	br	e8fc <fstat+0x3c>
    e8f8:	0005883a 	mov	r2,zero
    e8fc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e900:	e0bffd17 	ldw	r2,-12(fp)
    e904:	10001026 	beq	r2,zero,e948 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e908:	e0bffd17 	ldw	r2,-12(fp)
    e90c:	10800017 	ldw	r2,0(r2)
    e910:	10800817 	ldw	r2,32(r2)
    e914:	10000726 	beq	r2,zero,e934 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e918:	e0bffd17 	ldw	r2,-12(fp)
    e91c:	10800017 	ldw	r2,0(r2)
    e920:	10800817 	ldw	r2,32(r2)
    e924:	e17fff17 	ldw	r5,-4(fp)
    e928:	e13ffd17 	ldw	r4,-12(fp)
    e92c:	103ee83a 	callr	r2
    e930:	00000a06 	br	e95c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e934:	e0bfff17 	ldw	r2,-4(fp)
    e938:	00c80004 	movi	r3,8192
    e93c:	10c00115 	stw	r3,4(r2)
      return 0;
    e940:	0005883a 	mov	r2,zero
    e944:	00000506 	br	e95c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e948:	000e8840 	call	e884 <alt_get_errno>
    e94c:	1007883a 	mov	r3,r2
    e950:	00801444 	movi	r2,81
    e954:	18800015 	stw	r2,0(r3)
    return -1;
    e958:	00bfffc4 	movi	r2,-1
  }
}
    e95c:	e037883a 	mov	sp,fp
    e960:	dfc00117 	ldw	ra,4(sp)
    e964:	df000017 	ldw	fp,0(sp)
    e968:	dec00204 	addi	sp,sp,8
    e96c:	f800283a 	ret

0000e970 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    e970:	defff404 	addi	sp,sp,-48
    e974:	dfc00b15 	stw	ra,44(sp)
    e978:	df000a15 	stw	fp,40(sp)
    e97c:	dd000915 	stw	r20,36(sp)
    e980:	dcc00815 	stw	r19,32(sp)
    e984:	dc800715 	stw	r18,28(sp)
    e988:	dc400615 	stw	r17,24(sp)
    e98c:	dc000515 	stw	r16,20(sp)
    e990:	df000a04 	addi	fp,sp,40
    e994:	e13ff915 	stw	r4,-28(fp)
    e998:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    e99c:	e0bffa17 	ldw	r2,-24(fp)
    e9a0:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e9a4:	d0a6eb17 	ldw	r2,-25684(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    e9a8:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e9ac:	d0a6ea17 	ldw	r2,-25688(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    e9b0:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    e9b4:	e0bff817 	ldw	r2,-32(fp)
    e9b8:	10005f26 	beq	r2,zero,eb38 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    e9bc:	d0a6e517 	ldw	r2,-25708(gp)
    e9c0:	1029883a 	mov	r20,r2
    e9c4:	e17ff817 	ldw	r5,-32(fp)
    e9c8:	e13ff717 	ldw	r4,-36(fp)
    e9cc:	0003f180 	call	3f18 <__udivsi3>
    e9d0:	a085883a 	add	r2,r20,r2
    e9d4:	1007883a 	mov	r3,r2
    e9d8:	e0bff917 	ldw	r2,-28(fp)
    e9dc:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    e9e0:	d0a6e617 	ldw	r2,-25704(gp)
    e9e4:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    e9e8:	e0bff717 	ldw	r2,-36(fp)
    e9ec:	1021883a 	mov	r16,r2
    e9f0:	0023883a 	mov	r17,zero
    e9f4:	e17ff817 	ldw	r5,-32(fp)
    e9f8:	010003f4 	movhi	r4,15
    e9fc:	21109004 	addi	r4,r4,16960
    ea00:	0003f180 	call	3f18 <__udivsi3>
    ea04:	1025883a 	mov	r18,r2
    ea08:	0027883a 	mov	r19,zero
    ea0c:	900d883a 	mov	r6,r18
    ea10:	980f883a 	mov	r7,r19
    ea14:	8009883a 	mov	r4,r16
    ea18:	880b883a 	mov	r5,r17
    ea1c:	000d8d40 	call	d8d4 <__muldi3>
    ea20:	1009883a 	mov	r4,r2
    ea24:	180b883a 	mov	r5,r3
    ea28:	2005883a 	mov	r2,r4
    ea2c:	2807883a 	mov	r3,r5
    ea30:	018003f4 	movhi	r6,15
    ea34:	31909004 	addi	r6,r6,16960
    ea38:	000f883a 	mov	r7,zero
    ea3c:	1009883a 	mov	r4,r2
    ea40:	180b883a 	mov	r5,r3
    ea44:	000deac0 	call	deac <__umoddi3>
    ea48:	1009883a 	mov	r4,r2
    ea4c:	180b883a 	mov	r5,r3
    ea50:	2005883a 	mov	r2,r4
    ea54:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    ea58:	a085883a 	add	r2,r20,r2
    ea5c:	1007883a 	mov	r3,r2
    ea60:	e0bff917 	ldw	r2,-28(fp)
    ea64:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    ea68:	00001406 	br	eabc <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
    ea6c:	e0bff917 	ldw	r2,-28(fp)
    ea70:	10800017 	ldw	r2,0(r2)
    ea74:	00800516 	blt	zero,r2,ea8c <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
    ea78:	e0bff917 	ldw	r2,-28(fp)
    ea7c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    ea80:	e0bff917 	ldw	r2,-28(fp)
    ea84:	10000115 	stw	zero,4(r2)
          break;
    ea88:	00000f06 	br	eac8 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
    ea8c:	e0bff917 	ldw	r2,-28(fp)
    ea90:	10800017 	ldw	r2,0(r2)
    ea94:	10ffffc4 	addi	r3,r2,-1
    ea98:	e0bff917 	ldw	r2,-28(fp)
    ea9c:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    eaa0:	e0bff917 	ldw	r2,-28(fp)
    eaa4:	10c00117 	ldw	r3,4(r2)
    eaa8:	008003f4 	movhi	r2,15
    eaac:	10909004 	addi	r2,r2,16960
    eab0:	1887883a 	add	r3,r3,r2
    eab4:	e0bff917 	ldw	r2,-28(fp)
    eab8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    eabc:	e0bff917 	ldw	r2,-28(fp)
    eac0:	10800117 	ldw	r2,4(r2)
    eac4:	103fe916 	blt	r2,zero,ea6c <__alt_mem_onchip_memory+0xf780ea6c>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    eac8:	00000c06 	br	eafc <gettimeofday+0x18c>
      ptimeval->tv_sec++;
    eacc:	e0bff917 	ldw	r2,-28(fp)
    ead0:	10800017 	ldw	r2,0(r2)
    ead4:	10c00044 	addi	r3,r2,1
    ead8:	e0bff917 	ldw	r2,-28(fp)
    eadc:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    eae0:	e0bff917 	ldw	r2,-28(fp)
    eae4:	10c00117 	ldw	r3,4(r2)
    eae8:	00bffc74 	movhi	r2,65521
    eaec:	10af7004 	addi	r2,r2,-16960
    eaf0:	1887883a 	add	r3,r3,r2
    eaf4:	e0bff917 	ldw	r2,-28(fp)
    eaf8:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    eafc:	e0bff917 	ldw	r2,-28(fp)
    eb00:	10c00117 	ldw	r3,4(r2)
    eb04:	008003f4 	movhi	r2,15
    eb08:	10908fc4 	addi	r2,r2,16959
    eb0c:	10ffef16 	blt	r2,r3,eacc <__alt_mem_onchip_memory+0xf780eacc>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    eb10:	e0bff617 	ldw	r2,-40(fp)
    eb14:	10000626 	beq	r2,zero,eb30 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    eb18:	d0e6e317 	ldw	r3,-25716(gp)
    eb1c:	e0bff617 	ldw	r2,-40(fp)
    eb20:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    eb24:	d0e6e417 	ldw	r3,-25712(gp)
    eb28:	e0bff617 	ldw	r2,-40(fp)
    eb2c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    eb30:	0005883a 	mov	r2,zero
    eb34:	00000106 	br	eb3c <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
    eb38:	00bfde84 	movi	r2,-134
}
    eb3c:	e6fffb04 	addi	sp,fp,-20
    eb40:	dfc00617 	ldw	ra,24(sp)
    eb44:	df000517 	ldw	fp,20(sp)
    eb48:	dd000417 	ldw	r20,16(sp)
    eb4c:	dcc00317 	ldw	r19,12(sp)
    eb50:	dc800217 	ldw	r18,8(sp)
    eb54:	dc400117 	ldw	r17,4(sp)
    eb58:	dc000017 	ldw	r16,0(sp)
    eb5c:	dec00704 	addi	sp,sp,28
    eb60:	f800283a 	ret

0000eb64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb64:	defffe04 	addi	sp,sp,-8
    eb68:	dfc00115 	stw	ra,4(sp)
    eb6c:	df000015 	stw	fp,0(sp)
    eb70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb74:	d0a01017 	ldw	r2,-32704(gp)
    eb78:	10000326 	beq	r2,zero,eb88 <alt_get_errno+0x24>
    eb7c:	d0a01017 	ldw	r2,-32704(gp)
    eb80:	103ee83a 	callr	r2
    eb84:	00000106 	br	eb8c <alt_get_errno+0x28>
    eb88:	d0a6dc04 	addi	r2,gp,-25744
}
    eb8c:	e037883a 	mov	sp,fp
    eb90:	dfc00117 	ldw	ra,4(sp)
    eb94:	df000017 	ldw	fp,0(sp)
    eb98:	dec00204 	addi	sp,sp,8
    eb9c:	f800283a 	ret

0000eba0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    eba0:	deffed04 	addi	sp,sp,-76
    eba4:	dfc01215 	stw	ra,72(sp)
    eba8:	df001115 	stw	fp,68(sp)
    ebac:	df001104 	addi	fp,sp,68
    ebb0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ebb4:	e0bfff17 	ldw	r2,-4(fp)
    ebb8:	10000616 	blt	r2,zero,ebd4 <isatty+0x34>
    ebbc:	e0bfff17 	ldw	r2,-4(fp)
    ebc0:	10c00324 	muli	r3,r2,12
    ebc4:	00800074 	movhi	r2,1
    ebc8:	1088c004 	addi	r2,r2,8960
    ebcc:	1885883a 	add	r2,r3,r2
    ebd0:	00000106 	br	ebd8 <isatty+0x38>
    ebd4:	0005883a 	mov	r2,zero
    ebd8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ebdc:	e0bfef17 	ldw	r2,-68(fp)
    ebe0:	10000e26 	beq	r2,zero,ec1c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ebe4:	e0bfef17 	ldw	r2,-68(fp)
    ebe8:	10800017 	ldw	r2,0(r2)
    ebec:	10800817 	ldw	r2,32(r2)
    ebf0:	1000021e 	bne	r2,zero,ebfc <isatty+0x5c>
    {
      return 1;
    ebf4:	00800044 	movi	r2,1
    ebf8:	00000d06 	br	ec30 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ebfc:	e0bff004 	addi	r2,fp,-64
    ec00:	100b883a 	mov	r5,r2
    ec04:	e13fff17 	ldw	r4,-4(fp)
    ec08:	000e8c00 	call	e8c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ec0c:	e0bff117 	ldw	r2,-60(fp)
    ec10:	10880020 	cmpeqi	r2,r2,8192
    ec14:	10803fcc 	andi	r2,r2,255
    ec18:	00000506 	br	ec30 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ec1c:	000eb640 	call	eb64 <alt_get_errno>
    ec20:	1007883a 	mov	r3,r2
    ec24:	00801444 	movi	r2,81
    ec28:	18800015 	stw	r2,0(r3)
    return 0;
    ec2c:	0005883a 	mov	r2,zero
  }
}
    ec30:	e037883a 	mov	sp,fp
    ec34:	dfc00117 	ldw	ra,4(sp)
    ec38:	df000017 	ldw	fp,0(sp)
    ec3c:	dec00204 	addi	sp,sp,8
    ec40:	f800283a 	ret

0000ec44 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ec44:	defffc04 	addi	sp,sp,-16
    ec48:	df000315 	stw	fp,12(sp)
    ec4c:	df000304 	addi	fp,sp,12
    ec50:	e13ffd15 	stw	r4,-12(fp)
    ec54:	e17ffe15 	stw	r5,-8(fp)
    ec58:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ec5c:	e0fffe17 	ldw	r3,-8(fp)
    ec60:	e0bffd17 	ldw	r2,-12(fp)
    ec64:	18800c26 	beq	r3,r2,ec98 <alt_load_section+0x54>
  {
    while( to != end )
    ec68:	00000806 	br	ec8c <alt_load_section+0x48>
    {
      *to++ = *from++;
    ec6c:	e0bffe17 	ldw	r2,-8(fp)
    ec70:	10c00104 	addi	r3,r2,4
    ec74:	e0fffe15 	stw	r3,-8(fp)
    ec78:	e0fffd17 	ldw	r3,-12(fp)
    ec7c:	19000104 	addi	r4,r3,4
    ec80:	e13ffd15 	stw	r4,-12(fp)
    ec84:	18c00017 	ldw	r3,0(r3)
    ec88:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ec8c:	e0fffe17 	ldw	r3,-8(fp)
    ec90:	e0bfff17 	ldw	r2,-4(fp)
    ec94:	18bff51e 	bne	r3,r2,ec6c <__alt_mem_onchip_memory+0xf780ec6c>
    {
      *to++ = *from++;
    }
  }
}
    ec98:	0001883a 	nop
    ec9c:	e037883a 	mov	sp,fp
    eca0:	df000017 	ldw	fp,0(sp)
    eca4:	dec00104 	addi	sp,sp,4
    eca8:	f800283a 	ret

0000ecac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ecac:	defffe04 	addi	sp,sp,-8
    ecb0:	dfc00115 	stw	ra,4(sp)
    ecb4:	df000015 	stw	fp,0(sp)
    ecb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ecbc:	01800074 	movhi	r6,1
    ecc0:	318d4d04 	addi	r6,r6,13620
    ecc4:	01400074 	movhi	r5,1
    ecc8:	29468d04 	addi	r5,r5,6708
    eccc:	01000074 	movhi	r4,1
    ecd0:	210d4d04 	addi	r4,r4,13620
    ecd4:	000ec440 	call	ec44 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ecd8:	01800034 	movhi	r6,0
    ecdc:	31809104 	addi	r6,r6,580
    ece0:	01400034 	movhi	r5,0
    ece4:	29400804 	addi	r5,r5,32
    ece8:	01000034 	movhi	r4,0
    ecec:	21000804 	addi	r4,r4,32
    ecf0:	000ec440 	call	ec44 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ecf4:	01800074 	movhi	r6,1
    ecf8:	31868d04 	addi	r6,r6,6708
    ecfc:	01400074 	movhi	r5,1
    ed00:	29455f04 	addi	r5,r5,5500
    ed04:	01000074 	movhi	r4,1
    ed08:	21055f04 	addi	r4,r4,5500
    ed0c:	000ec440 	call	ec44 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ed10:	00104100 	call	10410 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ed14:	00105f80 	call	105f8 <alt_icache_flush_all>
}
    ed18:	0001883a 	nop
    ed1c:	e037883a 	mov	sp,fp
    ed20:	dfc00117 	ldw	ra,4(sp)
    ed24:	df000017 	ldw	fp,0(sp)
    ed28:	dec00204 	addi	sp,sp,8
    ed2c:	f800283a 	ret

0000ed30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed30:	defffe04 	addi	sp,sp,-8
    ed34:	dfc00115 	stw	ra,4(sp)
    ed38:	df000015 	stw	fp,0(sp)
    ed3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed40:	d0a01017 	ldw	r2,-32704(gp)
    ed44:	10000326 	beq	r2,zero,ed54 <alt_get_errno+0x24>
    ed48:	d0a01017 	ldw	r2,-32704(gp)
    ed4c:	103ee83a 	callr	r2
    ed50:	00000106 	br	ed58 <alt_get_errno+0x28>
    ed54:	d0a6dc04 	addi	r2,gp,-25744
}
    ed58:	e037883a 	mov	sp,fp
    ed5c:	dfc00117 	ldw	ra,4(sp)
    ed60:	df000017 	ldw	fp,0(sp)
    ed64:	dec00204 	addi	sp,sp,8
    ed68:	f800283a 	ret

0000ed6c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ed6c:	defff904 	addi	sp,sp,-28
    ed70:	dfc00615 	stw	ra,24(sp)
    ed74:	df000515 	stw	fp,20(sp)
    ed78:	df000504 	addi	fp,sp,20
    ed7c:	e13ffd15 	stw	r4,-12(fp)
    ed80:	e17ffe15 	stw	r5,-8(fp)
    ed84:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ed88:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed8c:	e0bffd17 	ldw	r2,-12(fp)
    ed90:	10000616 	blt	r2,zero,edac <lseek+0x40>
    ed94:	e0bffd17 	ldw	r2,-12(fp)
    ed98:	10c00324 	muli	r3,r2,12
    ed9c:	00800074 	movhi	r2,1
    eda0:	1088c004 	addi	r2,r2,8960
    eda4:	1885883a 	add	r2,r3,r2
    eda8:	00000106 	br	edb0 <lseek+0x44>
    edac:	0005883a 	mov	r2,zero
    edb0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    edb4:	e0bffc17 	ldw	r2,-16(fp)
    edb8:	10001026 	beq	r2,zero,edfc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    edbc:	e0bffc17 	ldw	r2,-16(fp)
    edc0:	10800017 	ldw	r2,0(r2)
    edc4:	10800717 	ldw	r2,28(r2)
    edc8:	10000926 	beq	r2,zero,edf0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    edcc:	e0bffc17 	ldw	r2,-16(fp)
    edd0:	10800017 	ldw	r2,0(r2)
    edd4:	10800717 	ldw	r2,28(r2)
    edd8:	e1bfff17 	ldw	r6,-4(fp)
    eddc:	e17ffe17 	ldw	r5,-8(fp)
    ede0:	e13ffc17 	ldw	r4,-16(fp)
    ede4:	103ee83a 	callr	r2
    ede8:	e0bffb15 	stw	r2,-20(fp)
    edec:	00000506 	br	ee04 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    edf0:	00bfde84 	movi	r2,-134
    edf4:	e0bffb15 	stw	r2,-20(fp)
    edf8:	00000206 	br	ee04 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    edfc:	00bfebc4 	movi	r2,-81
    ee00:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ee04:	e0bffb17 	ldw	r2,-20(fp)
    ee08:	1000070e 	bge	r2,zero,ee28 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ee0c:	000ed300 	call	ed30 <alt_get_errno>
    ee10:	1007883a 	mov	r3,r2
    ee14:	e0bffb17 	ldw	r2,-20(fp)
    ee18:	0085c83a 	sub	r2,zero,r2
    ee1c:	18800015 	stw	r2,0(r3)
    rc = -1;
    ee20:	00bfffc4 	movi	r2,-1
    ee24:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ee28:	e0bffb17 	ldw	r2,-20(fp)
}
    ee2c:	e037883a 	mov	sp,fp
    ee30:	dfc00117 	ldw	ra,4(sp)
    ee34:	df000017 	ldw	fp,0(sp)
    ee38:	dec00204 	addi	sp,sp,8
    ee3c:	f800283a 	ret

0000ee40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ee40:	defffd04 	addi	sp,sp,-12
    ee44:	dfc00215 	stw	ra,8(sp)
    ee48:	df000115 	stw	fp,4(sp)
    ee4c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ee50:	0009883a 	mov	r4,zero
    ee54:	000f45c0 	call	f45c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ee58:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ee5c:	000f4940 	call	f494 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ee60:	01800074 	movhi	r6,1
    ee64:	31864504 	addi	r6,r6,6420
    ee68:	01400074 	movhi	r5,1
    ee6c:	29464504 	addi	r5,r5,6420
    ee70:	01000074 	movhi	r4,1
    ee74:	21064504 	addi	r4,r4,6420
    ee78:	00109900 	call	10990 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ee7c:	00105380 	call	10538 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ee80:	01000074 	movhi	r4,1
    ee84:	21016604 	addi	r4,r4,1432
    ee88:	00111780 	call	11178 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ee8c:	d0a6e717 	ldw	r2,-25700(gp)
    ee90:	d0e6e817 	ldw	r3,-25696(gp)
    ee94:	d126e917 	ldw	r4,-25692(gp)
    ee98:	200d883a 	mov	r6,r4
    ee9c:	180b883a 	mov	r5,r3
    eea0:	1009883a 	mov	r4,r2
    eea4:	00011e00 	call	11e0 <main>
    eea8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    eeac:	01000044 	movi	r4,1
    eeb0:	000e7880 	call	e788 <close>
  exit (result);
    eeb4:	e13fff17 	ldw	r4,-4(fp)
    eeb8:	001118c0 	call	1118c <exit>

0000eebc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    eebc:	defffe04 	addi	sp,sp,-8
    eec0:	df000115 	stw	fp,4(sp)
    eec4:	df000104 	addi	fp,sp,4
    eec8:	e13fff15 	stw	r4,-4(fp)
}
    eecc:	0001883a 	nop
    eed0:	e037883a 	mov	sp,fp
    eed4:	df000017 	ldw	fp,0(sp)
    eed8:	dec00104 	addi	sp,sp,4
    eedc:	f800283a 	ret

0000eee0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eee0:	defffe04 	addi	sp,sp,-8
    eee4:	df000115 	stw	fp,4(sp)
    eee8:	df000104 	addi	fp,sp,4
    eeec:	e13fff15 	stw	r4,-4(fp)
}
    eef0:	0001883a 	nop
    eef4:	e037883a 	mov	sp,fp
    eef8:	df000017 	ldw	fp,0(sp)
    eefc:	dec00104 	addi	sp,sp,4
    ef00:	f800283a 	ret

0000ef04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef04:	defffe04 	addi	sp,sp,-8
    ef08:	dfc00115 	stw	ra,4(sp)
    ef0c:	df000015 	stw	fp,0(sp)
    ef10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef14:	d0a01017 	ldw	r2,-32704(gp)
    ef18:	10000326 	beq	r2,zero,ef28 <alt_get_errno+0x24>
    ef1c:	d0a01017 	ldw	r2,-32704(gp)
    ef20:	103ee83a 	callr	r2
    ef24:	00000106 	br	ef2c <alt_get_errno+0x28>
    ef28:	d0a6dc04 	addi	r2,gp,-25744
}
    ef2c:	e037883a 	mov	sp,fp
    ef30:	dfc00117 	ldw	ra,4(sp)
    ef34:	df000017 	ldw	fp,0(sp)
    ef38:	dec00204 	addi	sp,sp,8
    ef3c:	f800283a 	ret

0000ef40 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ef40:	defff904 	addi	sp,sp,-28
    ef44:	dfc00615 	stw	ra,24(sp)
    ef48:	df000515 	stw	fp,20(sp)
    ef4c:	df000504 	addi	fp,sp,20
    ef50:	e13ffd15 	stw	r4,-12(fp)
    ef54:	e17ffe15 	stw	r5,-8(fp)
    ef58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ef5c:	e0bffd17 	ldw	r2,-12(fp)
    ef60:	10000616 	blt	r2,zero,ef7c <read+0x3c>
    ef64:	e0bffd17 	ldw	r2,-12(fp)
    ef68:	10c00324 	muli	r3,r2,12
    ef6c:	00800074 	movhi	r2,1
    ef70:	1088c004 	addi	r2,r2,8960
    ef74:	1885883a 	add	r2,r3,r2
    ef78:	00000106 	br	ef80 <read+0x40>
    ef7c:	0005883a 	mov	r2,zero
    ef80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ef84:	e0bffb17 	ldw	r2,-20(fp)
    ef88:	10002226 	beq	r2,zero,f014 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ef8c:	e0bffb17 	ldw	r2,-20(fp)
    ef90:	10800217 	ldw	r2,8(r2)
    ef94:	108000cc 	andi	r2,r2,3
    ef98:	10800060 	cmpeqi	r2,r2,1
    ef9c:	1000181e 	bne	r2,zero,f000 <read+0xc0>
        (fd->dev->read))
    efa0:	e0bffb17 	ldw	r2,-20(fp)
    efa4:	10800017 	ldw	r2,0(r2)
    efa8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    efac:	10001426 	beq	r2,zero,f000 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    efb0:	e0bffb17 	ldw	r2,-20(fp)
    efb4:	10800017 	ldw	r2,0(r2)
    efb8:	10800517 	ldw	r2,20(r2)
    efbc:	e0ffff17 	ldw	r3,-4(fp)
    efc0:	180d883a 	mov	r6,r3
    efc4:	e17ffe17 	ldw	r5,-8(fp)
    efc8:	e13ffb17 	ldw	r4,-20(fp)
    efcc:	103ee83a 	callr	r2
    efd0:	e0bffc15 	stw	r2,-16(fp)
    efd4:	e0bffc17 	ldw	r2,-16(fp)
    efd8:	1000070e 	bge	r2,zero,eff8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    efdc:	000ef040 	call	ef04 <alt_get_errno>
    efe0:	1007883a 	mov	r3,r2
    efe4:	e0bffc17 	ldw	r2,-16(fp)
    efe8:	0085c83a 	sub	r2,zero,r2
    efec:	18800015 	stw	r2,0(r3)
          return -1;
    eff0:	00bfffc4 	movi	r2,-1
    eff4:	00000c06 	br	f028 <read+0xe8>
        }
        return rval;
    eff8:	e0bffc17 	ldw	r2,-16(fp)
    effc:	00000a06 	br	f028 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f000:	000ef040 	call	ef04 <alt_get_errno>
    f004:	1007883a 	mov	r3,r2
    f008:	00800344 	movi	r2,13
    f00c:	18800015 	stw	r2,0(r3)
    f010:	00000406 	br	f024 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f014:	000ef040 	call	ef04 <alt_get_errno>
    f018:	1007883a 	mov	r3,r2
    f01c:	00801444 	movi	r2,81
    f020:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f024:	00bfffc4 	movi	r2,-1
}
    f028:	e037883a 	mov	sp,fp
    f02c:	dfc00117 	ldw	ra,4(sp)
    f030:	df000017 	ldw	fp,0(sp)
    f034:	dec00204 	addi	sp,sp,8
    f038:	f800283a 	ret

0000f03c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f03c:	defffe04 	addi	sp,sp,-8
    f040:	df000115 	stw	fp,4(sp)
    f044:	df000104 	addi	fp,sp,4
    f048:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f04c:	e0bfff17 	ldw	r2,-4(fp)
    f050:	108000d0 	cmplti	r2,r2,3
    f054:	10000d1e 	bne	r2,zero,f08c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f058:	00800074 	movhi	r2,1
    f05c:	1088c004 	addi	r2,r2,8960
    f060:	e0ffff17 	ldw	r3,-4(fp)
    f064:	18c00324 	muli	r3,r3,12
    f068:	10c5883a 	add	r2,r2,r3
    f06c:	10800204 	addi	r2,r2,8
    f070:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f074:	00800074 	movhi	r2,1
    f078:	1088c004 	addi	r2,r2,8960
    f07c:	e0ffff17 	ldw	r3,-4(fp)
    f080:	18c00324 	muli	r3,r3,12
    f084:	10c5883a 	add	r2,r2,r3
    f088:	10000015 	stw	zero,0(r2)
  }
}
    f08c:	0001883a 	nop
    f090:	e037883a 	mov	sp,fp
    f094:	df000017 	ldw	fp,0(sp)
    f098:	dec00104 	addi	sp,sp,4
    f09c:	f800283a 	ret

0000f0a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f0a0:	defff904 	addi	sp,sp,-28
    f0a4:	df000615 	stw	fp,24(sp)
    f0a8:	df000604 	addi	fp,sp,24
    f0ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0b0:	0005303a 	rdctl	r2,status
    f0b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0b8:	e0fffe17 	ldw	r3,-8(fp)
    f0bc:	00bfff84 	movi	r2,-2
    f0c0:	1884703a 	and	r2,r3,r2
    f0c4:	1001703a 	wrctl	status,r2
  
  return context;
    f0c8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f0cc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f0d0:	d0a01117 	ldw	r2,-32700(gp)
    f0d4:	10c000c4 	addi	r3,r2,3
    f0d8:	00bfff04 	movi	r2,-4
    f0dc:	1884703a 	and	r2,r3,r2
    f0e0:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f0e4:	d0e01117 	ldw	r3,-32700(gp)
    f0e8:	e0bfff17 	ldw	r2,-4(fp)
    f0ec:	1887883a 	add	r3,r3,r2
    f0f0:	00820034 	movhi	r2,2048
    f0f4:	10800004 	addi	r2,r2,0
    f0f8:	10c0062e 	bgeu	r2,r3,f114 <sbrk+0x74>
    f0fc:	e0bffb17 	ldw	r2,-20(fp)
    f100:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f104:	e0bffa17 	ldw	r2,-24(fp)
    f108:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f10c:	00bfffc4 	movi	r2,-1
    f110:	00000b06 	br	f140 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f114:	d0a01117 	ldw	r2,-32700(gp)
    f118:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f11c:	d0e01117 	ldw	r3,-32700(gp)
    f120:	e0bfff17 	ldw	r2,-4(fp)
    f124:	1885883a 	add	r2,r3,r2
    f128:	d0a01115 	stw	r2,-32700(gp)
    f12c:	e0bffb17 	ldw	r2,-20(fp)
    f130:	e0bffc15 	stw	r2,-16(fp)
    f134:	e0bffc17 	ldw	r2,-16(fp)
    f138:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f13c:	e0bffd17 	ldw	r2,-12(fp)
} 
    f140:	e037883a 	mov	sp,fp
    f144:	df000017 	ldw	fp,0(sp)
    f148:	dec00104 	addi	sp,sp,4
    f14c:	f800283a 	ret

0000f150 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f150:	defffa04 	addi	sp,sp,-24
    f154:	df000515 	stw	fp,20(sp)
    f158:	df000504 	addi	fp,sp,20
    f15c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f160:	0005303a 	rdctl	r2,status
    f164:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f168:	e0fffc17 	ldw	r3,-16(fp)
    f16c:	00bfff84 	movi	r2,-2
    f170:	1884703a 	and	r2,r3,r2
    f174:	1001703a 	wrctl	status,r2
  
  return context;
    f178:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f17c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f180:	e0bfff17 	ldw	r2,-4(fp)
    f184:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f188:	e0bffd17 	ldw	r2,-12(fp)
    f18c:	10800017 	ldw	r2,0(r2)
    f190:	e0fffd17 	ldw	r3,-12(fp)
    f194:	18c00117 	ldw	r3,4(r3)
    f198:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f19c:	e0bffd17 	ldw	r2,-12(fp)
    f1a0:	10800117 	ldw	r2,4(r2)
    f1a4:	e0fffd17 	ldw	r3,-12(fp)
    f1a8:	18c00017 	ldw	r3,0(r3)
    f1ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f1b0:	e0bffd17 	ldw	r2,-12(fp)
    f1b4:	e0fffd17 	ldw	r3,-12(fp)
    f1b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f1bc:	e0bffd17 	ldw	r2,-12(fp)
    f1c0:	e0fffd17 	ldw	r3,-12(fp)
    f1c4:	10c00015 	stw	r3,0(r2)
    f1c8:	e0bffb17 	ldw	r2,-20(fp)
    f1cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1d0:	e0bffe17 	ldw	r2,-8(fp)
    f1d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f1d8:	0001883a 	nop
    f1dc:	e037883a 	mov	sp,fp
    f1e0:	df000017 	ldw	fp,0(sp)
    f1e4:	dec00104 	addi	sp,sp,4
    f1e8:	f800283a 	ret

0000f1ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f1ec:	defffb04 	addi	sp,sp,-20
    f1f0:	dfc00415 	stw	ra,16(sp)
    f1f4:	df000315 	stw	fp,12(sp)
    f1f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f1fc:	d0a01217 	ldw	r2,-32696(gp)
    f200:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f204:	d0a6eb17 	ldw	r2,-25684(gp)
    f208:	10800044 	addi	r2,r2,1
    f20c:	d0a6eb15 	stw	r2,-25684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f210:	00002e06 	br	f2cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f214:	e0bffd17 	ldw	r2,-12(fp)
    f218:	10800017 	ldw	r2,0(r2)
    f21c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f220:	e0bffd17 	ldw	r2,-12(fp)
    f224:	10800403 	ldbu	r2,16(r2)
    f228:	10803fcc 	andi	r2,r2,255
    f22c:	10000426 	beq	r2,zero,f240 <alt_tick+0x54>
    f230:	d0a6eb17 	ldw	r2,-25684(gp)
    f234:	1000021e 	bne	r2,zero,f240 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f238:	e0bffd17 	ldw	r2,-12(fp)
    f23c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f240:	e0bffd17 	ldw	r2,-12(fp)
    f244:	10800217 	ldw	r2,8(r2)
    f248:	d0e6eb17 	ldw	r3,-25684(gp)
    f24c:	18801d36 	bltu	r3,r2,f2c4 <alt_tick+0xd8>
    f250:	e0bffd17 	ldw	r2,-12(fp)
    f254:	10800403 	ldbu	r2,16(r2)
    f258:	10803fcc 	andi	r2,r2,255
    f25c:	1000191e 	bne	r2,zero,f2c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f260:	e0bffd17 	ldw	r2,-12(fp)
    f264:	10800317 	ldw	r2,12(r2)
    f268:	e0fffd17 	ldw	r3,-12(fp)
    f26c:	18c00517 	ldw	r3,20(r3)
    f270:	1809883a 	mov	r4,r3
    f274:	103ee83a 	callr	r2
    f278:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f27c:	e0bfff17 	ldw	r2,-4(fp)
    f280:	1000031e 	bne	r2,zero,f290 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f284:	e13ffd17 	ldw	r4,-12(fp)
    f288:	000f1500 	call	f150 <alt_alarm_stop>
    f28c:	00000d06 	br	f2c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f290:	e0bffd17 	ldw	r2,-12(fp)
    f294:	10c00217 	ldw	r3,8(r2)
    f298:	e0bfff17 	ldw	r2,-4(fp)
    f29c:	1887883a 	add	r3,r3,r2
    f2a0:	e0bffd17 	ldw	r2,-12(fp)
    f2a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f2a8:	e0bffd17 	ldw	r2,-12(fp)
    f2ac:	10c00217 	ldw	r3,8(r2)
    f2b0:	d0a6eb17 	ldw	r2,-25684(gp)
    f2b4:	1880032e 	bgeu	r3,r2,f2c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f2b8:	e0bffd17 	ldw	r2,-12(fp)
    f2bc:	00c00044 	movi	r3,1
    f2c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f2c4:	e0bffe17 	ldw	r2,-8(fp)
    f2c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f2cc:	e0fffd17 	ldw	r3,-12(fp)
    f2d0:	d0a01204 	addi	r2,gp,-32696
    f2d4:	18bfcf1e 	bne	r3,r2,f214 <__alt_mem_onchip_memory+0xf780f214>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f2d8:	0001883a 	nop
}
    f2dc:	0001883a 	nop
    f2e0:	e037883a 	mov	sp,fp
    f2e4:	dfc00117 	ldw	ra,4(sp)
    f2e8:	df000017 	ldw	fp,0(sp)
    f2ec:	dec00204 	addi	sp,sp,8
    f2f0:	f800283a 	ret

0000f2f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2f4:	defffe04 	addi	sp,sp,-8
    f2f8:	dfc00115 	stw	ra,4(sp)
    f2fc:	df000015 	stw	fp,0(sp)
    f300:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f304:	d0a01017 	ldw	r2,-32704(gp)
    f308:	10000326 	beq	r2,zero,f318 <alt_get_errno+0x24>
    f30c:	d0a01017 	ldw	r2,-32704(gp)
    f310:	103ee83a 	callr	r2
    f314:	00000106 	br	f31c <alt_get_errno+0x28>
    f318:	d0a6dc04 	addi	r2,gp,-25744
}
    f31c:	e037883a 	mov	sp,fp
    f320:	dfc00117 	ldw	ra,4(sp)
    f324:	df000017 	ldw	fp,0(sp)
    f328:	dec00204 	addi	sp,sp,8
    f32c:	f800283a 	ret

0000f330 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f330:	defff904 	addi	sp,sp,-28
    f334:	dfc00615 	stw	ra,24(sp)
    f338:	df000515 	stw	fp,20(sp)
    f33c:	df000504 	addi	fp,sp,20
    f340:	e13ffd15 	stw	r4,-12(fp)
    f344:	e17ffe15 	stw	r5,-8(fp)
    f348:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f34c:	e0bffd17 	ldw	r2,-12(fp)
    f350:	10000616 	blt	r2,zero,f36c <write+0x3c>
    f354:	e0bffd17 	ldw	r2,-12(fp)
    f358:	10c00324 	muli	r3,r2,12
    f35c:	00800074 	movhi	r2,1
    f360:	1088c004 	addi	r2,r2,8960
    f364:	1885883a 	add	r2,r3,r2
    f368:	00000106 	br	f370 <write+0x40>
    f36c:	0005883a 	mov	r2,zero
    f370:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f374:	e0bffb17 	ldw	r2,-20(fp)
    f378:	10002126 	beq	r2,zero,f400 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f37c:	e0bffb17 	ldw	r2,-20(fp)
    f380:	10800217 	ldw	r2,8(r2)
    f384:	108000cc 	andi	r2,r2,3
    f388:	10001826 	beq	r2,zero,f3ec <write+0xbc>
    f38c:	e0bffb17 	ldw	r2,-20(fp)
    f390:	10800017 	ldw	r2,0(r2)
    f394:	10800617 	ldw	r2,24(r2)
    f398:	10001426 	beq	r2,zero,f3ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f39c:	e0bffb17 	ldw	r2,-20(fp)
    f3a0:	10800017 	ldw	r2,0(r2)
    f3a4:	10800617 	ldw	r2,24(r2)
    f3a8:	e0ffff17 	ldw	r3,-4(fp)
    f3ac:	180d883a 	mov	r6,r3
    f3b0:	e17ffe17 	ldw	r5,-8(fp)
    f3b4:	e13ffb17 	ldw	r4,-20(fp)
    f3b8:	103ee83a 	callr	r2
    f3bc:	e0bffc15 	stw	r2,-16(fp)
    f3c0:	e0bffc17 	ldw	r2,-16(fp)
    f3c4:	1000070e 	bge	r2,zero,f3e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f3c8:	000f2f40 	call	f2f4 <alt_get_errno>
    f3cc:	1007883a 	mov	r3,r2
    f3d0:	e0bffc17 	ldw	r2,-16(fp)
    f3d4:	0085c83a 	sub	r2,zero,r2
    f3d8:	18800015 	stw	r2,0(r3)
        return -1;
    f3dc:	00bfffc4 	movi	r2,-1
    f3e0:	00000c06 	br	f414 <write+0xe4>
      }
      return rval;
    f3e4:	e0bffc17 	ldw	r2,-16(fp)
    f3e8:	00000a06 	br	f414 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f3ec:	000f2f40 	call	f2f4 <alt_get_errno>
    f3f0:	1007883a 	mov	r3,r2
    f3f4:	00800344 	movi	r2,13
    f3f8:	18800015 	stw	r2,0(r3)
    f3fc:	00000406 	br	f410 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f400:	000f2f40 	call	f2f4 <alt_get_errno>
    f404:	1007883a 	mov	r3,r2
    f408:	00801444 	movi	r2,81
    f40c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f410:	00bfffc4 	movi	r2,-1
}
    f414:	e037883a 	mov	sp,fp
    f418:	dfc00117 	ldw	ra,4(sp)
    f41c:	df000017 	ldw	fp,0(sp)
    f420:	dec00204 	addi	sp,sp,8
    f424:	f800283a 	ret

0000f428 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f428:	defffd04 	addi	sp,sp,-12
    f42c:	dfc00215 	stw	ra,8(sp)
    f430:	df000115 	stw	fp,4(sp)
    f434:	df000104 	addi	fp,sp,4
    f438:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f43c:	d1600d04 	addi	r5,gp,-32716
    f440:	e13fff17 	ldw	r4,-4(fp)
    f444:	00104940 	call	10494 <alt_dev_llist_insert>
}
    f448:	e037883a 	mov	sp,fp
    f44c:	dfc00117 	ldw	ra,4(sp)
    f450:	df000017 	ldw	fp,0(sp)
    f454:	dec00204 	addi	sp,sp,8
    f458:	f800283a 	ret

0000f45c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f45c:	defffd04 	addi	sp,sp,-12
    f460:	dfc00215 	stw	ra,8(sp)
    f464:	df000115 	stw	fp,4(sp)
    f468:	df000104 	addi	fp,sp,4
    f46c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    f470:	0010c600 	call	10c60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f474:	00800044 	movi	r2,1
    f478:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f47c:	0001883a 	nop
    f480:	e037883a 	mov	sp,fp
    f484:	dfc00117 	ldw	ra,4(sp)
    f488:	df000017 	ldw	fp,0(sp)
    f48c:	dec00204 	addi	sp,sp,8
    f490:	f800283a 	ret

0000f494 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f494:	defffe04 	addi	sp,sp,-8
    f498:	dfc00115 	stw	ra,4(sp)
    f49c:	df000015 	stw	fp,0(sp)
    f4a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    f4a4:	01c0fa04 	movi	r7,1000
    f4a8:	000d883a 	mov	r6,zero
    f4ac:	000b883a 	mov	r5,zero
    f4b0:	01040034 	movhi	r4,4096
    f4b4:	21040804 	addi	r4,r4,4128
    f4b8:	000ffe80 	call	ffe8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f4bc:	01800204 	movi	r6,8
    f4c0:	000b883a 	mov	r5,zero
    f4c4:	01000074 	movhi	r4,1
    f4c8:	21092a04 	addi	r4,r4,9384
    f4cc:	000f66c0 	call	f66c <altera_avalon_jtag_uart_init>
    f4d0:	01000074 	movhi	r4,1
    f4d4:	21092004 	addi	r4,r4,9344
    f4d8:	000f4280 	call	f428 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    f4dc:	00c00044 	movi	r3,1
    f4e0:	00840034 	movhi	r2,4096
    f4e4:	10842004 	addi	r2,r2,4224
    f4e8:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f4ec:	0001883a 	nop
}
    f4f0:	0001883a 	nop
    f4f4:	e037883a 	mov	sp,fp
    f4f8:	dfc00117 	ldw	ra,4(sp)
    f4fc:	df000017 	ldw	fp,0(sp)
    f500:	dec00204 	addi	sp,sp,8
    f504:	f800283a 	ret

0000f508 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f508:	defffa04 	addi	sp,sp,-24
    f50c:	dfc00515 	stw	ra,20(sp)
    f510:	df000415 	stw	fp,16(sp)
    f514:	df000404 	addi	fp,sp,16
    f518:	e13ffd15 	stw	r4,-12(fp)
    f51c:	e17ffe15 	stw	r5,-8(fp)
    f520:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f524:	e0bffd17 	ldw	r2,-12(fp)
    f528:	10800017 	ldw	r2,0(r2)
    f52c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f530:	e0bffc17 	ldw	r2,-16(fp)
    f534:	10c00a04 	addi	r3,r2,40
    f538:	e0bffd17 	ldw	r2,-12(fp)
    f53c:	10800217 	ldw	r2,8(r2)
    f540:	100f883a 	mov	r7,r2
    f544:	e1bfff17 	ldw	r6,-4(fp)
    f548:	e17ffe17 	ldw	r5,-8(fp)
    f54c:	1809883a 	mov	r4,r3
    f550:	000fb300 	call	fb30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f554:	e037883a 	mov	sp,fp
    f558:	dfc00117 	ldw	ra,4(sp)
    f55c:	df000017 	ldw	fp,0(sp)
    f560:	dec00204 	addi	sp,sp,8
    f564:	f800283a 	ret

0000f568 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f568:	defffa04 	addi	sp,sp,-24
    f56c:	dfc00515 	stw	ra,20(sp)
    f570:	df000415 	stw	fp,16(sp)
    f574:	df000404 	addi	fp,sp,16
    f578:	e13ffd15 	stw	r4,-12(fp)
    f57c:	e17ffe15 	stw	r5,-8(fp)
    f580:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f584:	e0bffd17 	ldw	r2,-12(fp)
    f588:	10800017 	ldw	r2,0(r2)
    f58c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f590:	e0bffc17 	ldw	r2,-16(fp)
    f594:	10c00a04 	addi	r3,r2,40
    f598:	e0bffd17 	ldw	r2,-12(fp)
    f59c:	10800217 	ldw	r2,8(r2)
    f5a0:	100f883a 	mov	r7,r2
    f5a4:	e1bfff17 	ldw	r6,-4(fp)
    f5a8:	e17ffe17 	ldw	r5,-8(fp)
    f5ac:	1809883a 	mov	r4,r3
    f5b0:	000fd4c0 	call	fd4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f5b4:	e037883a 	mov	sp,fp
    f5b8:	dfc00117 	ldw	ra,4(sp)
    f5bc:	df000017 	ldw	fp,0(sp)
    f5c0:	dec00204 	addi	sp,sp,8
    f5c4:	f800283a 	ret

0000f5c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f5c8:	defffc04 	addi	sp,sp,-16
    f5cc:	dfc00315 	stw	ra,12(sp)
    f5d0:	df000215 	stw	fp,8(sp)
    f5d4:	df000204 	addi	fp,sp,8
    f5d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f5dc:	e0bfff17 	ldw	r2,-4(fp)
    f5e0:	10800017 	ldw	r2,0(r2)
    f5e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f5e8:	e0bffe17 	ldw	r2,-8(fp)
    f5ec:	10c00a04 	addi	r3,r2,40
    f5f0:	e0bfff17 	ldw	r2,-4(fp)
    f5f4:	10800217 	ldw	r2,8(r2)
    f5f8:	100b883a 	mov	r5,r2
    f5fc:	1809883a 	mov	r4,r3
    f600:	000f9d80 	call	f9d8 <altera_avalon_jtag_uart_close>
}
    f604:	e037883a 	mov	sp,fp
    f608:	dfc00117 	ldw	ra,4(sp)
    f60c:	df000017 	ldw	fp,0(sp)
    f610:	dec00204 	addi	sp,sp,8
    f614:	f800283a 	ret

0000f618 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f618:	defffa04 	addi	sp,sp,-24
    f61c:	dfc00515 	stw	ra,20(sp)
    f620:	df000415 	stw	fp,16(sp)
    f624:	df000404 	addi	fp,sp,16
    f628:	e13ffd15 	stw	r4,-12(fp)
    f62c:	e17ffe15 	stw	r5,-8(fp)
    f630:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f634:	e0bffd17 	ldw	r2,-12(fp)
    f638:	10800017 	ldw	r2,0(r2)
    f63c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f640:	e0bffc17 	ldw	r2,-16(fp)
    f644:	10800a04 	addi	r2,r2,40
    f648:	e1bfff17 	ldw	r6,-4(fp)
    f64c:	e17ffe17 	ldw	r5,-8(fp)
    f650:	1009883a 	mov	r4,r2
    f654:	000fa400 	call	fa40 <altera_avalon_jtag_uart_ioctl>
}
    f658:	e037883a 	mov	sp,fp
    f65c:	dfc00117 	ldw	ra,4(sp)
    f660:	df000017 	ldw	fp,0(sp)
    f664:	dec00204 	addi	sp,sp,8
    f668:	f800283a 	ret

0000f66c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f66c:	defffa04 	addi	sp,sp,-24
    f670:	dfc00515 	stw	ra,20(sp)
    f674:	df000415 	stw	fp,16(sp)
    f678:	df000404 	addi	fp,sp,16
    f67c:	e13ffd15 	stw	r4,-12(fp)
    f680:	e17ffe15 	stw	r5,-8(fp)
    f684:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f688:	e0bffd17 	ldw	r2,-12(fp)
    f68c:	00c00044 	movi	r3,1
    f690:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f694:	e0bffd17 	ldw	r2,-12(fp)
    f698:	10800017 	ldw	r2,0(r2)
    f69c:	10800104 	addi	r2,r2,4
    f6a0:	1007883a 	mov	r3,r2
    f6a4:	e0bffd17 	ldw	r2,-12(fp)
    f6a8:	10800817 	ldw	r2,32(r2)
    f6ac:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f6b0:	e0bffe17 	ldw	r2,-8(fp)
    f6b4:	e0ffff17 	ldw	r3,-4(fp)
    f6b8:	d8000015 	stw	zero,0(sp)
    f6bc:	e1fffd17 	ldw	r7,-12(fp)
    f6c0:	01800074 	movhi	r6,1
    f6c4:	31bdcb04 	addi	r6,r6,-2260
    f6c8:	180b883a 	mov	r5,r3
    f6cc:	1009883a 	mov	r4,r2
    f6d0:	001062c0 	call	1062c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f6d4:	e0bffd17 	ldw	r2,-12(fp)
    f6d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f6dc:	e0bffd17 	ldw	r2,-12(fp)
    f6e0:	10800204 	addi	r2,r2,8
    f6e4:	d0e6ea17 	ldw	r3,-25688(gp)
    f6e8:	e1fffd17 	ldw	r7,-12(fp)
    f6ec:	01800074 	movhi	r6,1
    f6f0:	31be4e04 	addi	r6,r6,-1736
    f6f4:	180b883a 	mov	r5,r3
    f6f8:	1009883a 	mov	r4,r2
    f6fc:	00102e40 	call	102e4 <alt_alarm_start>
    f700:	1000040e 	bge	r2,zero,f714 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f704:	e0fffd17 	ldw	r3,-12(fp)
    f708:	00a00034 	movhi	r2,32768
    f70c:	10bfffc4 	addi	r2,r2,-1
    f710:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f714:	0001883a 	nop
    f718:	e037883a 	mov	sp,fp
    f71c:	dfc00117 	ldw	ra,4(sp)
    f720:	df000017 	ldw	fp,0(sp)
    f724:	dec00204 	addi	sp,sp,8
    f728:	f800283a 	ret

0000f72c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f72c:	defff804 	addi	sp,sp,-32
    f730:	df000715 	stw	fp,28(sp)
    f734:	df000704 	addi	fp,sp,28
    f738:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f73c:	e0bfff17 	ldw	r2,-4(fp)
    f740:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f744:	e0bffb17 	ldw	r2,-20(fp)
    f748:	10800017 	ldw	r2,0(r2)
    f74c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f750:	e0bffc17 	ldw	r2,-16(fp)
    f754:	10800104 	addi	r2,r2,4
    f758:	10800037 	ldwio	r2,0(r2)
    f75c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f760:	e0bffd17 	ldw	r2,-12(fp)
    f764:	1080c00c 	andi	r2,r2,768
    f768:	10006d26 	beq	r2,zero,f920 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f76c:	e0bffd17 	ldw	r2,-12(fp)
    f770:	1080400c 	andi	r2,r2,256
    f774:	10003526 	beq	r2,zero,f84c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f778:	00800074 	movhi	r2,1
    f77c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f780:	e0bffb17 	ldw	r2,-20(fp)
    f784:	10800a17 	ldw	r2,40(r2)
    f788:	10800044 	addi	r2,r2,1
    f78c:	1081ffcc 	andi	r2,r2,2047
    f790:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f794:	e0bffb17 	ldw	r2,-20(fp)
    f798:	10c00b17 	ldw	r3,44(r2)
    f79c:	e0bffe17 	ldw	r2,-8(fp)
    f7a0:	18801526 	beq	r3,r2,f7f8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f7a4:	e0bffc17 	ldw	r2,-16(fp)
    f7a8:	10800037 	ldwio	r2,0(r2)
    f7ac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f7b0:	e0bff917 	ldw	r2,-28(fp)
    f7b4:	10a0000c 	andi	r2,r2,32768
    f7b8:	10001126 	beq	r2,zero,f800 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f7bc:	e0bffb17 	ldw	r2,-20(fp)
    f7c0:	10800a17 	ldw	r2,40(r2)
    f7c4:	e0fff917 	ldw	r3,-28(fp)
    f7c8:	1809883a 	mov	r4,r3
    f7cc:	e0fffb17 	ldw	r3,-20(fp)
    f7d0:	1885883a 	add	r2,r3,r2
    f7d4:	10800e04 	addi	r2,r2,56
    f7d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f7dc:	e0bffb17 	ldw	r2,-20(fp)
    f7e0:	10800a17 	ldw	r2,40(r2)
    f7e4:	10800044 	addi	r2,r2,1
    f7e8:	10c1ffcc 	andi	r3,r2,2047
    f7ec:	e0bffb17 	ldw	r2,-20(fp)
    f7f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f7f4:	003fe206 	br	f780 <__alt_mem_onchip_memory+0xf780f780>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f7f8:	0001883a 	nop
    f7fc:	00000106 	br	f804 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f800:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f804:	e0bff917 	ldw	r2,-28(fp)
    f808:	10bfffec 	andhi	r2,r2,65535
    f80c:	10000f26 	beq	r2,zero,f84c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f810:	e0bffb17 	ldw	r2,-20(fp)
    f814:	10c00817 	ldw	r3,32(r2)
    f818:	00bfff84 	movi	r2,-2
    f81c:	1886703a 	and	r3,r3,r2
    f820:	e0bffb17 	ldw	r2,-20(fp)
    f824:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f828:	e0bffc17 	ldw	r2,-16(fp)
    f82c:	10800104 	addi	r2,r2,4
    f830:	1007883a 	mov	r3,r2
    f834:	e0bffb17 	ldw	r2,-20(fp)
    f838:	10800817 	ldw	r2,32(r2)
    f83c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f840:	e0bffc17 	ldw	r2,-16(fp)
    f844:	10800104 	addi	r2,r2,4
    f848:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f84c:	e0bffd17 	ldw	r2,-12(fp)
    f850:	1080800c 	andi	r2,r2,512
    f854:	103fbe26 	beq	r2,zero,f750 <__alt_mem_onchip_memory+0xf780f750>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f858:	e0bffd17 	ldw	r2,-12(fp)
    f85c:	1004d43a 	srli	r2,r2,16
    f860:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f864:	00001406 	br	f8b8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f868:	e0bffc17 	ldw	r2,-16(fp)
    f86c:	e0fffb17 	ldw	r3,-20(fp)
    f870:	18c00d17 	ldw	r3,52(r3)
    f874:	e13ffb17 	ldw	r4,-20(fp)
    f878:	20c7883a 	add	r3,r4,r3
    f87c:	18c20e04 	addi	r3,r3,2104
    f880:	18c00003 	ldbu	r3,0(r3)
    f884:	18c03fcc 	andi	r3,r3,255
    f888:	18c0201c 	xori	r3,r3,128
    f88c:	18ffe004 	addi	r3,r3,-128
    f890:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f894:	e0bffb17 	ldw	r2,-20(fp)
    f898:	10800d17 	ldw	r2,52(r2)
    f89c:	10800044 	addi	r2,r2,1
    f8a0:	10c1ffcc 	andi	r3,r2,2047
    f8a4:	e0bffb17 	ldw	r2,-20(fp)
    f8a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f8ac:	e0bffa17 	ldw	r2,-24(fp)
    f8b0:	10bfffc4 	addi	r2,r2,-1
    f8b4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f8b8:	e0bffa17 	ldw	r2,-24(fp)
    f8bc:	10000526 	beq	r2,zero,f8d4 <altera_avalon_jtag_uart_irq+0x1a8>
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	10c00d17 	ldw	r3,52(r2)
    f8c8:	e0bffb17 	ldw	r2,-20(fp)
    f8cc:	10800c17 	ldw	r2,48(r2)
    f8d0:	18bfe51e 	bne	r3,r2,f868 <__alt_mem_onchip_memory+0xf780f868>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f8d4:	e0bffa17 	ldw	r2,-24(fp)
    f8d8:	103f9d26 	beq	r2,zero,f750 <__alt_mem_onchip_memory+0xf780f750>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f8dc:	e0bffb17 	ldw	r2,-20(fp)
    f8e0:	10c00817 	ldw	r3,32(r2)
    f8e4:	00bfff44 	movi	r2,-3
    f8e8:	1886703a 	and	r3,r3,r2
    f8ec:	e0bffb17 	ldw	r2,-20(fp)
    f8f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f8f4:	e0bffb17 	ldw	r2,-20(fp)
    f8f8:	10800017 	ldw	r2,0(r2)
    f8fc:	10800104 	addi	r2,r2,4
    f900:	1007883a 	mov	r3,r2
    f904:	e0bffb17 	ldw	r2,-20(fp)
    f908:	10800817 	ldw	r2,32(r2)
    f90c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f910:	e0bffc17 	ldw	r2,-16(fp)
    f914:	10800104 	addi	r2,r2,4
    f918:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f91c:	003f8c06 	br	f750 <__alt_mem_onchip_memory+0xf780f750>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f920:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f924:	0001883a 	nop
    f928:	e037883a 	mov	sp,fp
    f92c:	df000017 	ldw	fp,0(sp)
    f930:	dec00104 	addi	sp,sp,4
    f934:	f800283a 	ret

0000f938 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f938:	defff804 	addi	sp,sp,-32
    f93c:	df000715 	stw	fp,28(sp)
    f940:	df000704 	addi	fp,sp,28
    f944:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f948:	e0bffb17 	ldw	r2,-20(fp)
    f94c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f950:	e0bff917 	ldw	r2,-28(fp)
    f954:	10800017 	ldw	r2,0(r2)
    f958:	10800104 	addi	r2,r2,4
    f95c:	10800037 	ldwio	r2,0(r2)
    f960:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f964:	e0bffa17 	ldw	r2,-24(fp)
    f968:	1081000c 	andi	r2,r2,1024
    f96c:	10000b26 	beq	r2,zero,f99c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f970:	e0bff917 	ldw	r2,-28(fp)
    f974:	10800017 	ldw	r2,0(r2)
    f978:	10800104 	addi	r2,r2,4
    f97c:	1007883a 	mov	r3,r2
    f980:	e0bff917 	ldw	r2,-28(fp)
    f984:	10800817 	ldw	r2,32(r2)
    f988:	10810014 	ori	r2,r2,1024
    f98c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f990:	e0bff917 	ldw	r2,-28(fp)
    f994:	10000915 	stw	zero,36(r2)
    f998:	00000a06 	br	f9c4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f99c:	e0bff917 	ldw	r2,-28(fp)
    f9a0:	10c00917 	ldw	r3,36(r2)
    f9a4:	00a00034 	movhi	r2,32768
    f9a8:	10bfff04 	addi	r2,r2,-4
    f9ac:	10c00536 	bltu	r2,r3,f9c4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f9b0:	e0bff917 	ldw	r2,-28(fp)
    f9b4:	10800917 	ldw	r2,36(r2)
    f9b8:	10c00044 	addi	r3,r2,1
    f9bc:	e0bff917 	ldw	r2,-28(fp)
    f9c0:	10c00915 	stw	r3,36(r2)
    f9c4:	d0a6ea17 	ldw	r2,-25688(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f9c8:	e037883a 	mov	sp,fp
    f9cc:	df000017 	ldw	fp,0(sp)
    f9d0:	dec00104 	addi	sp,sp,4
    f9d4:	f800283a 	ret

0000f9d8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f9d8:	defffd04 	addi	sp,sp,-12
    f9dc:	df000215 	stw	fp,8(sp)
    f9e0:	df000204 	addi	fp,sp,8
    f9e4:	e13ffe15 	stw	r4,-8(fp)
    f9e8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f9ec:	00000506 	br	fa04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	1090000c 	andi	r2,r2,16384
    f9f8:	10000226 	beq	r2,zero,fa04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f9fc:	00bffd44 	movi	r2,-11
    fa00:	00000b06 	br	fa30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fa04:	e0bffe17 	ldw	r2,-8(fp)
    fa08:	10c00d17 	ldw	r3,52(r2)
    fa0c:	e0bffe17 	ldw	r2,-8(fp)
    fa10:	10800c17 	ldw	r2,48(r2)
    fa14:	18800526 	beq	r3,r2,fa2c <altera_avalon_jtag_uart_close+0x54>
    fa18:	e0bffe17 	ldw	r2,-8(fp)
    fa1c:	10c00917 	ldw	r3,36(r2)
    fa20:	e0bffe17 	ldw	r2,-8(fp)
    fa24:	10800117 	ldw	r2,4(r2)
    fa28:	18bff136 	bltu	r3,r2,f9f0 <__alt_mem_onchip_memory+0xf780f9f0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fa2c:	0005883a 	mov	r2,zero
}
    fa30:	e037883a 	mov	sp,fp
    fa34:	df000017 	ldw	fp,0(sp)
    fa38:	dec00104 	addi	sp,sp,4
    fa3c:	f800283a 	ret

0000fa40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fa40:	defffa04 	addi	sp,sp,-24
    fa44:	df000515 	stw	fp,20(sp)
    fa48:	df000504 	addi	fp,sp,20
    fa4c:	e13ffd15 	stw	r4,-12(fp)
    fa50:	e17ffe15 	stw	r5,-8(fp)
    fa54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fa58:	00bff9c4 	movi	r2,-25
    fa5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fa60:	e0bffe17 	ldw	r2,-8(fp)
    fa64:	10da8060 	cmpeqi	r3,r2,27137
    fa68:	1800031e 	bne	r3,zero,fa78 <altera_avalon_jtag_uart_ioctl+0x38>
    fa6c:	109a80a0 	cmpeqi	r2,r2,27138
    fa70:	1000181e 	bne	r2,zero,fad4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fa74:	00002906 	br	fb1c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fa78:	e0bffd17 	ldw	r2,-12(fp)
    fa7c:	10c00117 	ldw	r3,4(r2)
    fa80:	00a00034 	movhi	r2,32768
    fa84:	10bfffc4 	addi	r2,r2,-1
    fa88:	18802126 	beq	r3,r2,fb10 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fa8c:	e0bfff17 	ldw	r2,-4(fp)
    fa90:	10800017 	ldw	r2,0(r2)
    fa94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fa98:	e0bffc17 	ldw	r2,-16(fp)
    fa9c:	10800090 	cmplti	r2,r2,2
    faa0:	1000061e 	bne	r2,zero,fabc <altera_avalon_jtag_uart_ioctl+0x7c>
    faa4:	e0fffc17 	ldw	r3,-16(fp)
    faa8:	00a00034 	movhi	r2,32768
    faac:	10bfffc4 	addi	r2,r2,-1
    fab0:	18800226 	beq	r3,r2,fabc <altera_avalon_jtag_uart_ioctl+0x7c>
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	00000206 	br	fac4 <altera_avalon_jtag_uart_ioctl+0x84>
    fabc:	00a00034 	movhi	r2,32768
    fac0:	10bfff84 	addi	r2,r2,-2
    fac4:	e0fffd17 	ldw	r3,-12(fp)
    fac8:	18800115 	stw	r2,4(r3)
      rc = 0;
    facc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fad0:	00000f06 	br	fb10 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fad4:	e0bffd17 	ldw	r2,-12(fp)
    fad8:	10c00117 	ldw	r3,4(r2)
    fadc:	00a00034 	movhi	r2,32768
    fae0:	10bfffc4 	addi	r2,r2,-1
    fae4:	18800c26 	beq	r3,r2,fb18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fae8:	e0bffd17 	ldw	r2,-12(fp)
    faec:	10c00917 	ldw	r3,36(r2)
    faf0:	e0bffd17 	ldw	r2,-12(fp)
    faf4:	10800117 	ldw	r2,4(r2)
    faf8:	1885803a 	cmpltu	r2,r3,r2
    fafc:	10c03fcc 	andi	r3,r2,255
    fb00:	e0bfff17 	ldw	r2,-4(fp)
    fb04:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fb08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fb0c:	00000206 	br	fb18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fb10:	0001883a 	nop
    fb14:	00000106 	br	fb1c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fb18:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fb1c:	e0bffb17 	ldw	r2,-20(fp)
}
    fb20:	e037883a 	mov	sp,fp
    fb24:	df000017 	ldw	fp,0(sp)
    fb28:	dec00104 	addi	sp,sp,4
    fb2c:	f800283a 	ret

0000fb30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fb30:	defff304 	addi	sp,sp,-52
    fb34:	dfc00c15 	stw	ra,48(sp)
    fb38:	df000b15 	stw	fp,44(sp)
    fb3c:	df000b04 	addi	fp,sp,44
    fb40:	e13ffc15 	stw	r4,-16(fp)
    fb44:	e17ffd15 	stw	r5,-12(fp)
    fb48:	e1bffe15 	stw	r6,-8(fp)
    fb4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fb50:	e0bffd17 	ldw	r2,-12(fp)
    fb54:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fb58:	00004706 	br	fc78 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fb5c:	e0bffc17 	ldw	r2,-16(fp)
    fb60:	10800a17 	ldw	r2,40(r2)
    fb64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fb68:	e0bffc17 	ldw	r2,-16(fp)
    fb6c:	10800b17 	ldw	r2,44(r2)
    fb70:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fb74:	e0fff717 	ldw	r3,-36(fp)
    fb78:	e0bff817 	ldw	r2,-32(fp)
    fb7c:	18800536 	bltu	r3,r2,fb94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fb80:	e0fff717 	ldw	r3,-36(fp)
    fb84:	e0bff817 	ldw	r2,-32(fp)
    fb88:	1885c83a 	sub	r2,r3,r2
    fb8c:	e0bff615 	stw	r2,-40(fp)
    fb90:	00000406 	br	fba4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fb94:	00c20004 	movi	r3,2048
    fb98:	e0bff817 	ldw	r2,-32(fp)
    fb9c:	1885c83a 	sub	r2,r3,r2
    fba0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fba4:	e0bff617 	ldw	r2,-40(fp)
    fba8:	10001e26 	beq	r2,zero,fc24 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fbac:	e0fffe17 	ldw	r3,-8(fp)
    fbb0:	e0bff617 	ldw	r2,-40(fp)
    fbb4:	1880022e 	bgeu	r3,r2,fbc0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fbb8:	e0bffe17 	ldw	r2,-8(fp)
    fbbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fbc0:	e0bffc17 	ldw	r2,-16(fp)
    fbc4:	10c00e04 	addi	r3,r2,56
    fbc8:	e0bff817 	ldw	r2,-32(fp)
    fbcc:	1885883a 	add	r2,r3,r2
    fbd0:	e1bff617 	ldw	r6,-40(fp)
    fbd4:	100b883a 	mov	r5,r2
    fbd8:	e13ff517 	ldw	r4,-44(fp)
    fbdc:	0009c580 	call	9c58 <memcpy>
      ptr   += n;
    fbe0:	e0fff517 	ldw	r3,-44(fp)
    fbe4:	e0bff617 	ldw	r2,-40(fp)
    fbe8:	1885883a 	add	r2,r3,r2
    fbec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fbf0:	e0fffe17 	ldw	r3,-8(fp)
    fbf4:	e0bff617 	ldw	r2,-40(fp)
    fbf8:	1885c83a 	sub	r2,r3,r2
    fbfc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc00:	e0fff817 	ldw	r3,-32(fp)
    fc04:	e0bff617 	ldw	r2,-40(fp)
    fc08:	1885883a 	add	r2,r3,r2
    fc0c:	10c1ffcc 	andi	r3,r2,2047
    fc10:	e0bffc17 	ldw	r2,-16(fp)
    fc14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fc18:	e0bffe17 	ldw	r2,-8(fp)
    fc1c:	00bfcf16 	blt	zero,r2,fb5c <__alt_mem_onchip_memory+0xf780fb5c>
    fc20:	00000106 	br	fc28 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fc24:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fc28:	e0fff517 	ldw	r3,-44(fp)
    fc2c:	e0bffd17 	ldw	r2,-12(fp)
    fc30:	1880141e 	bne	r3,r2,fc84 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fc34:	e0bfff17 	ldw	r2,-4(fp)
    fc38:	1090000c 	andi	r2,r2,16384
    fc3c:	1000131e 	bne	r2,zero,fc8c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fc40:	0001883a 	nop
    fc44:	e0bffc17 	ldw	r2,-16(fp)
    fc48:	10c00a17 	ldw	r3,40(r2)
    fc4c:	e0bff717 	ldw	r2,-36(fp)
    fc50:	1880051e 	bne	r3,r2,fc68 <altera_avalon_jtag_uart_read+0x138>
    fc54:	e0bffc17 	ldw	r2,-16(fp)
    fc58:	10c00917 	ldw	r3,36(r2)
    fc5c:	e0bffc17 	ldw	r2,-16(fp)
    fc60:	10800117 	ldw	r2,4(r2)
    fc64:	18bff736 	bltu	r3,r2,fc44 <__alt_mem_onchip_memory+0xf780fc44>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fc68:	e0bffc17 	ldw	r2,-16(fp)
    fc6c:	10c00a17 	ldw	r3,40(r2)
    fc70:	e0bff717 	ldw	r2,-36(fp)
    fc74:	18800726 	beq	r3,r2,fc94 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fc78:	e0bffe17 	ldw	r2,-8(fp)
    fc7c:	00bfb716 	blt	zero,r2,fb5c <__alt_mem_onchip_memory+0xf780fb5c>
    fc80:	00000506 	br	fc98 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fc84:	0001883a 	nop
    fc88:	00000306 	br	fc98 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fc8c:	0001883a 	nop
    fc90:	00000106 	br	fc98 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fc94:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fc98:	e0fff517 	ldw	r3,-44(fp)
    fc9c:	e0bffd17 	ldw	r2,-12(fp)
    fca0:	18801826 	beq	r3,r2,fd04 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fca4:	0005303a 	rdctl	r2,status
    fca8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fcac:	e0fffb17 	ldw	r3,-20(fp)
    fcb0:	00bfff84 	movi	r2,-2
    fcb4:	1884703a 	and	r2,r3,r2
    fcb8:	1001703a 	wrctl	status,r2
  
  return context;
    fcbc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fcc0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
    fcc8:	10800817 	ldw	r2,32(r2)
    fccc:	10c00054 	ori	r3,r2,1
    fcd0:	e0bffc17 	ldw	r2,-16(fp)
    fcd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fcd8:	e0bffc17 	ldw	r2,-16(fp)
    fcdc:	10800017 	ldw	r2,0(r2)
    fce0:	10800104 	addi	r2,r2,4
    fce4:	1007883a 	mov	r3,r2
    fce8:	e0bffc17 	ldw	r2,-16(fp)
    fcec:	10800817 	ldw	r2,32(r2)
    fcf0:	18800035 	stwio	r2,0(r3)
    fcf4:	e0bffa17 	ldw	r2,-24(fp)
    fcf8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fcfc:	e0bff917 	ldw	r2,-28(fp)
    fd00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fd04:	e0fff517 	ldw	r3,-44(fp)
    fd08:	e0bffd17 	ldw	r2,-12(fp)
    fd0c:	18800426 	beq	r3,r2,fd20 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fd10:	e0fff517 	ldw	r3,-44(fp)
    fd14:	e0bffd17 	ldw	r2,-12(fp)
    fd18:	1885c83a 	sub	r2,r3,r2
    fd1c:	00000606 	br	fd38 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    fd20:	e0bfff17 	ldw	r2,-4(fp)
    fd24:	1090000c 	andi	r2,r2,16384
    fd28:	10000226 	beq	r2,zero,fd34 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fd2c:	00bffd44 	movi	r2,-11
    fd30:	00000106 	br	fd38 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fd34:	00bffec4 	movi	r2,-5
}
    fd38:	e037883a 	mov	sp,fp
    fd3c:	dfc00117 	ldw	ra,4(sp)
    fd40:	df000017 	ldw	fp,0(sp)
    fd44:	dec00204 	addi	sp,sp,8
    fd48:	f800283a 	ret

0000fd4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fd4c:	defff304 	addi	sp,sp,-52
    fd50:	dfc00c15 	stw	ra,48(sp)
    fd54:	df000b15 	stw	fp,44(sp)
    fd58:	df000b04 	addi	fp,sp,44
    fd5c:	e13ffc15 	stw	r4,-16(fp)
    fd60:	e17ffd15 	stw	r5,-12(fp)
    fd64:	e1bffe15 	stw	r6,-8(fp)
    fd68:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fd6c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fd70:	e0bffd17 	ldw	r2,-12(fp)
    fd74:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fd78:	00003706 	br	fe58 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fd7c:	e0bffc17 	ldw	r2,-16(fp)
    fd80:	10800c17 	ldw	r2,48(r2)
    fd84:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fd88:	e0bffc17 	ldw	r2,-16(fp)
    fd8c:	10800d17 	ldw	r2,52(r2)
    fd90:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fd94:	e0fff917 	ldw	r3,-28(fp)
    fd98:	e0bff517 	ldw	r2,-44(fp)
    fd9c:	1880062e 	bgeu	r3,r2,fdb8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fda0:	e0fff517 	ldw	r3,-44(fp)
    fda4:	e0bff917 	ldw	r2,-28(fp)
    fda8:	1885c83a 	sub	r2,r3,r2
    fdac:	10bfffc4 	addi	r2,r2,-1
    fdb0:	e0bff615 	stw	r2,-40(fp)
    fdb4:	00000b06 	br	fde4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fdb8:	e0bff517 	ldw	r2,-44(fp)
    fdbc:	10000526 	beq	r2,zero,fdd4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fdc0:	00c20004 	movi	r3,2048
    fdc4:	e0bff917 	ldw	r2,-28(fp)
    fdc8:	1885c83a 	sub	r2,r3,r2
    fdcc:	e0bff615 	stw	r2,-40(fp)
    fdd0:	00000406 	br	fde4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fdd4:	00c1ffc4 	movi	r3,2047
    fdd8:	e0bff917 	ldw	r2,-28(fp)
    fddc:	1885c83a 	sub	r2,r3,r2
    fde0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fde4:	e0bff617 	ldw	r2,-40(fp)
    fde8:	10001e26 	beq	r2,zero,fe64 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fdec:	e0fffe17 	ldw	r3,-8(fp)
    fdf0:	e0bff617 	ldw	r2,-40(fp)
    fdf4:	1880022e 	bgeu	r3,r2,fe00 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fdf8:	e0bffe17 	ldw	r2,-8(fp)
    fdfc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fe00:	e0bffc17 	ldw	r2,-16(fp)
    fe04:	10c20e04 	addi	r3,r2,2104
    fe08:	e0bff917 	ldw	r2,-28(fp)
    fe0c:	1885883a 	add	r2,r3,r2
    fe10:	e1bff617 	ldw	r6,-40(fp)
    fe14:	e17ffd17 	ldw	r5,-12(fp)
    fe18:	1009883a 	mov	r4,r2
    fe1c:	0009c580 	call	9c58 <memcpy>
      ptr   += n;
    fe20:	e0fffd17 	ldw	r3,-12(fp)
    fe24:	e0bff617 	ldw	r2,-40(fp)
    fe28:	1885883a 	add	r2,r3,r2
    fe2c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fe30:	e0fffe17 	ldw	r3,-8(fp)
    fe34:	e0bff617 	ldw	r2,-40(fp)
    fe38:	1885c83a 	sub	r2,r3,r2
    fe3c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fe40:	e0fff917 	ldw	r3,-28(fp)
    fe44:	e0bff617 	ldw	r2,-40(fp)
    fe48:	1885883a 	add	r2,r3,r2
    fe4c:	10c1ffcc 	andi	r3,r2,2047
    fe50:	e0bffc17 	ldw	r2,-16(fp)
    fe54:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fe58:	e0bffe17 	ldw	r2,-8(fp)
    fe5c:	00bfc716 	blt	zero,r2,fd7c <__alt_mem_onchip_memory+0xf780fd7c>
    fe60:	00000106 	br	fe68 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    fe64:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe68:	0005303a 	rdctl	r2,status
    fe6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe70:	e0fffb17 	ldw	r3,-20(fp)
    fe74:	00bfff84 	movi	r2,-2
    fe78:	1884703a 	and	r2,r3,r2
    fe7c:	1001703a 	wrctl	status,r2
  
  return context;
    fe80:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fe84:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fe88:	e0bffc17 	ldw	r2,-16(fp)
    fe8c:	10800817 	ldw	r2,32(r2)
    fe90:	10c00094 	ori	r3,r2,2
    fe94:	e0bffc17 	ldw	r2,-16(fp)
    fe98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fe9c:	e0bffc17 	ldw	r2,-16(fp)
    fea0:	10800017 	ldw	r2,0(r2)
    fea4:	10800104 	addi	r2,r2,4
    fea8:	1007883a 	mov	r3,r2
    feac:	e0bffc17 	ldw	r2,-16(fp)
    feb0:	10800817 	ldw	r2,32(r2)
    feb4:	18800035 	stwio	r2,0(r3)
    feb8:	e0bffa17 	ldw	r2,-24(fp)
    febc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fec0:	e0bff817 	ldw	r2,-32(fp)
    fec4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fec8:	e0bffe17 	ldw	r2,-8(fp)
    fecc:	0080100e 	bge	zero,r2,ff10 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    fed0:	e0bfff17 	ldw	r2,-4(fp)
    fed4:	1090000c 	andi	r2,r2,16384
    fed8:	1000101e 	bne	r2,zero,ff1c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fedc:	0001883a 	nop
    fee0:	e0bffc17 	ldw	r2,-16(fp)
    fee4:	10c00d17 	ldw	r3,52(r2)
    fee8:	e0bff517 	ldw	r2,-44(fp)
    feec:	1880051e 	bne	r3,r2,ff04 <altera_avalon_jtag_uart_write+0x1b8>
    fef0:	e0bffc17 	ldw	r2,-16(fp)
    fef4:	10c00917 	ldw	r3,36(r2)
    fef8:	e0bffc17 	ldw	r2,-16(fp)
    fefc:	10800117 	ldw	r2,4(r2)
    ff00:	18bff736 	bltu	r3,r2,fee0 <__alt_mem_onchip_memory+0xf780fee0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ff04:	e0bffc17 	ldw	r2,-16(fp)
    ff08:	10800917 	ldw	r2,36(r2)
    ff0c:	1000051e 	bne	r2,zero,ff24 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ff10:	e0bffe17 	ldw	r2,-8(fp)
    ff14:	00bfd016 	blt	zero,r2,fe58 <__alt_mem_onchip_memory+0xf780fe58>
    ff18:	00000306 	br	ff28 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ff1c:	0001883a 	nop
    ff20:	00000106 	br	ff28 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ff24:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    ff28:	e0fffd17 	ldw	r3,-12(fp)
    ff2c:	e0bff717 	ldw	r2,-36(fp)
    ff30:	18800426 	beq	r3,r2,ff44 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ff34:	e0fffd17 	ldw	r3,-12(fp)
    ff38:	e0bff717 	ldw	r2,-36(fp)
    ff3c:	1885c83a 	sub	r2,r3,r2
    ff40:	00000606 	br	ff5c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    ff44:	e0bfff17 	ldw	r2,-4(fp)
    ff48:	1090000c 	andi	r2,r2,16384
    ff4c:	10000226 	beq	r2,zero,ff58 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    ff50:	00bffd44 	movi	r2,-11
    ff54:	00000106 	br	ff5c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ff58:	00bffec4 	movi	r2,-5
}
    ff5c:	e037883a 	mov	sp,fp
    ff60:	dfc00117 	ldw	ra,4(sp)
    ff64:	df000017 	ldw	fp,0(sp)
    ff68:	dec00204 	addi	sp,sp,8
    ff6c:	f800283a 	ret

0000ff70 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ff70:	defffa04 	addi	sp,sp,-24
    ff74:	dfc00515 	stw	ra,20(sp)
    ff78:	df000415 	stw	fp,16(sp)
    ff7c:	df000404 	addi	fp,sp,16
    ff80:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ff84:	0007883a 	mov	r3,zero
    ff88:	e0bfff17 	ldw	r2,-4(fp)
    ff8c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ff90:	e0bfff17 	ldw	r2,-4(fp)
    ff94:	10800104 	addi	r2,r2,4
    ff98:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff9c:	0005303a 	rdctl	r2,status
    ffa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffa4:	e0fffd17 	ldw	r3,-12(fp)
    ffa8:	00bfff84 	movi	r2,-2
    ffac:	1884703a 	and	r2,r3,r2
    ffb0:	1001703a 	wrctl	status,r2
  
  return context;
    ffb4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ffb8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    ffbc:	000f1ec0 	call	f1ec <alt_tick>
    ffc0:	e0bffc17 	ldw	r2,-16(fp)
    ffc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffc8:	e0bffe17 	ldw	r2,-8(fp)
    ffcc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ffd0:	0001883a 	nop
    ffd4:	e037883a 	mov	sp,fp
    ffd8:	dfc00117 	ldw	ra,4(sp)
    ffdc:	df000017 	ldw	fp,0(sp)
    ffe0:	dec00204 	addi	sp,sp,8
    ffe4:	f800283a 	ret

0000ffe8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ffe8:	defff804 	addi	sp,sp,-32
    ffec:	dfc00715 	stw	ra,28(sp)
    fff0:	df000615 	stw	fp,24(sp)
    fff4:	df000604 	addi	fp,sp,24
    fff8:	e13ffc15 	stw	r4,-16(fp)
    fffc:	e17ffd15 	stw	r5,-12(fp)
   10000:	e1bffe15 	stw	r6,-8(fp)
   10004:	e1ffff15 	stw	r7,-4(fp)
   10008:	e0bfff17 	ldw	r2,-4(fp)
   1000c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10010:	d0a6ea17 	ldw	r2,-25688(gp)
   10014:	1000021e 	bne	r2,zero,10020 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10018:	e0bffb17 	ldw	r2,-20(fp)
   1001c:	d0a6ea15 	stw	r2,-25688(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10020:	e0bffc17 	ldw	r2,-16(fp)
   10024:	10800104 	addi	r2,r2,4
   10028:	00c001c4 	movi	r3,7
   1002c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10030:	d8000015 	stw	zero,0(sp)
   10034:	e1fffc17 	ldw	r7,-16(fp)
   10038:	01800074 	movhi	r6,1
   1003c:	31bfdc04 	addi	r6,r6,-144
   10040:	e17ffe17 	ldw	r5,-8(fp)
   10044:	e13ffd17 	ldw	r4,-12(fp)
   10048:	001062c0 	call	1062c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1004c:	0001883a 	nop
   10050:	e037883a 	mov	sp,fp
   10054:	dfc00117 	ldw	ra,4(sp)
   10058:	df000017 	ldw	fp,0(sp)
   1005c:	dec00204 	addi	sp,sp,8
   10060:	f800283a 	ret

00010064 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   10064:	deffe504 	addi	sp,sp,-108
   10068:	dfc01915 	stw	ra,100(sp)
   1006c:	df001815 	stw	fp,96(sp)
   10070:	dcc01715 	stw	r19,92(sp)
   10074:	dc801615 	stw	r18,88(sp)
   10078:	dc401515 	stw	r17,84(sp)
   1007c:	dc001415 	stw	r16,80(sp)
   10080:	df001804 	addi	fp,sp,96
   10084:	e13ff915 	stw	r4,-28(fp)
   10088:	e17ffa15 	stw	r5,-24(fp)
   1008c:	e1bffb15 	stw	r6,-20(fp)
   10090:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
   10094:	00800044 	movi	r2,1
   10098:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
   1009c:	00800074 	movhi	r2,1
   100a0:	10864d04 	addi	r2,r2,6452
   100a4:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
   100a8:	00800074 	movhi	r2,1
   100ac:	10865e04 	addi	r2,r2,6520
   100b0:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
   100b4:	0007883a 	mov	r3,zero
   100b8:	e0bff917 	ldw	r2,-28(fp)
   100bc:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
   100c0:	e0800204 	addi	r2,fp,8
   100c4:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
   100c8:	e13ff917 	ldw	r4,-28(fp)
   100cc:	0010d400 	call	10d40 <perf_get_total_time>
   100d0:	e0bff215 	stw	r2,-56(fp)
   100d4:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
   100d8:	e13ff217 	ldw	r4,-56(fp)
   100dc:	e17ff317 	ldw	r5,-52(fp)
   100e0:	00114d80 	call	114d8 <__floatundidf>
   100e4:	1021883a 	mov	r16,r2
   100e8:	1823883a 	mov	r17,r3
   100ec:	e13ffa17 	ldw	r4,-24(fp)
   100f0:	000e6a40 	call	e6a4 <__floatunsidf>
   100f4:	1009883a 	mov	r4,r2
   100f8:	180b883a 	mov	r5,r3
   100fc:	200d883a 	mov	r6,r4
   10100:	280f883a 	mov	r7,r5
   10104:	8009883a 	mov	r4,r16
   10108:	880b883a 	mov	r5,r17
   1010c:	00021140 	call	2114 <__divdf3>
   10110:	1009883a 	mov	r4,r2
   10114:	180b883a 	mov	r5,r3
   10118:	e13ff415 	stw	r4,-48(fp)
   1011c:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
   10120:	e0bff017 	ldw	r2,-64(fp)
   10124:	d8800315 	stw	r2,12(sp)
   10128:	e0bff117 	ldw	r2,-60(fp)
   1012c:	d8800215 	stw	r2,8(sp)
   10130:	e0bff017 	ldw	r2,-64(fp)
   10134:	d8800115 	stw	r2,4(sp)
   10138:	e0bff317 	ldw	r2,-52(fp)
   1013c:	d8800015 	stw	r2,0(sp)
   10140:	e1fff217 	ldw	r7,-56(fp)
   10144:	e17ff417 	ldw	r5,-48(fp)
   10148:	e1bff517 	ldw	r6,-44(fp)
   1014c:	01000074 	movhi	r4,1
   10150:	21066f04 	addi	r4,r4,6588
   10154:	00040140 	call	4014 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
   10158:	e0bff817 	ldw	r2,-32(fp)
   1015c:	10c00104 	addi	r3,r2,4
   10160:	e0fff815 	stw	r3,-32(fp)
   10164:	10800017 	ldw	r2,0(r2)
   10168:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
   1016c:	00800044 	movi	r2,1
   10170:	e0bfef15 	stw	r2,-68(fp)
   10174:	00004e06 	br	102b0 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
   10178:	e17fef17 	ldw	r5,-68(fp)
   1017c:	e13ff917 	ldw	r4,-28(fp)
   10180:	0010c840 	call	10c84 <perf_get_section_time>
   10184:	e0bff615 	stw	r2,-40(fp)
   10188:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
   1018c:	e13ff617 	ldw	r4,-40(fp)
   10190:	e17ff717 	ldw	r5,-36(fp)
   10194:	00114d80 	call	114d8 <__floatundidf>
   10198:	1011883a 	mov	r8,r2
   1019c:	1813883a 	mov	r9,r3
   101a0:	000d883a 	mov	r6,zero
   101a4:	01d01674 	movhi	r7,16473
   101a8:	4009883a 	mov	r4,r8
   101ac:	480b883a 	mov	r5,r9
   101b0:	0002af00 	call	2af0 <__muldf3>
   101b4:	1009883a 	mov	r4,r2
   101b8:	180b883a 	mov	r5,r3
   101bc:	2021883a 	mov	r16,r4
   101c0:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   101c4:	e13ff217 	ldw	r4,-56(fp)
   101c8:	e17ff317 	ldw	r5,-52(fp)
   101cc:	00114d80 	call	114d8 <__floatundidf>
   101d0:	1009883a 	mov	r4,r2
   101d4:	180b883a 	mov	r5,r3
   101d8:	200d883a 	mov	r6,r4
   101dc:	280f883a 	mov	r7,r5
   101e0:	8009883a 	mov	r4,r16
   101e4:	880b883a 	mov	r5,r17
   101e8:	00021140 	call	2114 <__divdf3>
   101ec:	1009883a 	mov	r4,r2
   101f0:	180b883a 	mov	r5,r3
   101f4:	2025883a 	mov	r18,r4
   101f8:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
   101fc:	e13ff617 	ldw	r4,-40(fp)
   10200:	e17ff717 	ldw	r5,-36(fp)
   10204:	00114d80 	call	114d8 <__floatundidf>
   10208:	1021883a 	mov	r16,r2
   1020c:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   10210:	e13ffa17 	ldw	r4,-24(fp)
   10214:	000e6a40 	call	e6a4 <__floatunsidf>
   10218:	1009883a 	mov	r4,r2
   1021c:	180b883a 	mov	r5,r3
   10220:	200d883a 	mov	r6,r4
   10224:	280f883a 	mov	r7,r5
   10228:	8009883a 	mov	r4,r16
   1022c:	880b883a 	mov	r5,r17
   10230:	00021140 	call	2114 <__divdf3>
   10234:	1009883a 	mov	r4,r2
   10238:	180b883a 	mov	r5,r3
   1023c:	2021883a 	mov	r16,r4
   10240:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
   10244:	e17fef17 	ldw	r5,-68(fp)
   10248:	e13ff917 	ldw	r4,-28(fp)
   1024c:	0010d8c0 	call	10d8c <perf_get_num_starts>
   10250:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   10254:	e0bff017 	ldw	r2,-64(fp)
   10258:	d8800515 	stw	r2,20(sp)
   1025c:	d8c00415 	stw	r3,16(sp)
   10260:	e0bff617 	ldw	r2,-40(fp)
   10264:	d8800215 	stw	r2,8(sp)
   10268:	e0bff717 	ldw	r2,-36(fp)
   1026c:	d8800315 	stw	r2,12(sp)
   10270:	dc000015 	stw	r16,0(sp)
   10274:	dc400115 	stw	r17,4(sp)
   10278:	900d883a 	mov	r6,r18
   1027c:	980f883a 	mov	r7,r19
   10280:	e17fee17 	ldw	r5,-72(fp)
   10284:	01000074 	movhi	r4,1
   10288:	21068404 	addi	r4,r4,6672
   1028c:	00040140 	call	4014 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
   10290:	e0bff817 	ldw	r2,-32(fp)
   10294:	10c00104 	addi	r3,r2,4
   10298:	e0fff815 	stw	r3,-32(fp)
   1029c:	10800017 	ldw	r2,0(r2)
   102a0:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
   102a4:	e0bfef17 	ldw	r2,-68(fp)
   102a8:	10800044 	addi	r2,r2,1
   102ac:	e0bfef15 	stw	r2,-68(fp)
   102b0:	e0bfef17 	ldw	r2,-68(fp)
   102b4:	e0fffb17 	ldw	r3,-20(fp)
   102b8:	18bfaf0e 	bge	r3,r2,10178 <__alt_mem_onchip_memory+0xf7810178>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
   102bc:	0005883a 	mov	r2,zero
}
   102c0:	e6fffc04 	addi	sp,fp,-16
   102c4:	dfc00517 	ldw	ra,20(sp)
   102c8:	df000417 	ldw	fp,16(sp)
   102cc:	dcc00317 	ldw	r19,12(sp)
   102d0:	dc800217 	ldw	r18,8(sp)
   102d4:	dc400117 	ldw	r17,4(sp)
   102d8:	dc000017 	ldw	r16,0(sp)
   102dc:	dec00704 	addi	sp,sp,28
   102e0:	f800283a 	ret

000102e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   102e4:	defff504 	addi	sp,sp,-44
   102e8:	df000a15 	stw	fp,40(sp)
   102ec:	df000a04 	addi	fp,sp,40
   102f0:	e13ffc15 	stw	r4,-16(fp)
   102f4:	e17ffd15 	stw	r5,-12(fp)
   102f8:	e1bffe15 	stw	r6,-8(fp)
   102fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10300:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10304:	d0a6ea17 	ldw	r2,-25688(gp)
  
  if (alt_ticks_per_second ())
   10308:	10003c26 	beq	r2,zero,103fc <alt_alarm_start+0x118>
  {
    if (alarm)
   1030c:	e0bffc17 	ldw	r2,-16(fp)
   10310:	10003826 	beq	r2,zero,103f4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10314:	e0bffc17 	ldw	r2,-16(fp)
   10318:	e0fffe17 	ldw	r3,-8(fp)
   1031c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10320:	e0bffc17 	ldw	r2,-16(fp)
   10324:	e0ffff17 	ldw	r3,-4(fp)
   10328:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1032c:	0005303a 	rdctl	r2,status
   10330:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10334:	e0fff917 	ldw	r3,-28(fp)
   10338:	00bfff84 	movi	r2,-2
   1033c:	1884703a 	and	r2,r3,r2
   10340:	1001703a 	wrctl	status,r2
  
  return context;
   10344:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10348:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1034c:	d0a6eb17 	ldw	r2,-25684(gp)
      
      current_nticks = alt_nticks();
   10350:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10354:	e0fffd17 	ldw	r3,-12(fp)
   10358:	e0bff617 	ldw	r2,-40(fp)
   1035c:	1885883a 	add	r2,r3,r2
   10360:	10c00044 	addi	r3,r2,1
   10364:	e0bffc17 	ldw	r2,-16(fp)
   10368:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1036c:	e0bffc17 	ldw	r2,-16(fp)
   10370:	10c00217 	ldw	r3,8(r2)
   10374:	e0bff617 	ldw	r2,-40(fp)
   10378:	1880042e 	bgeu	r3,r2,1038c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1037c:	e0bffc17 	ldw	r2,-16(fp)
   10380:	00c00044 	movi	r3,1
   10384:	10c00405 	stb	r3,16(r2)
   10388:	00000206 	br	10394 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1038c:	e0bffc17 	ldw	r2,-16(fp)
   10390:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	d0e01204 	addi	r3,gp,-32696
   1039c:	e0fffa15 	stw	r3,-24(fp)
   103a0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   103a4:	e0bffb17 	ldw	r2,-20(fp)
   103a8:	e0fffa17 	ldw	r3,-24(fp)
   103ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   103b0:	e0bffa17 	ldw	r2,-24(fp)
   103b4:	10c00017 	ldw	r3,0(r2)
   103b8:	e0bffb17 	ldw	r2,-20(fp)
   103bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   103c0:	e0bffa17 	ldw	r2,-24(fp)
   103c4:	10800017 	ldw	r2,0(r2)
   103c8:	e0fffb17 	ldw	r3,-20(fp)
   103cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   103d0:	e0bffa17 	ldw	r2,-24(fp)
   103d4:	e0fffb17 	ldw	r3,-20(fp)
   103d8:	10c00015 	stw	r3,0(r2)
   103dc:	e0bff817 	ldw	r2,-32(fp)
   103e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103e4:	e0bff717 	ldw	r2,-36(fp)
   103e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   103ec:	0005883a 	mov	r2,zero
   103f0:	00000306 	br	10400 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   103f4:	00bffa84 	movi	r2,-22
   103f8:	00000106 	br	10400 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   103fc:	00bfde84 	movi	r2,-134
  }
}
   10400:	e037883a 	mov	sp,fp
   10404:	df000017 	ldw	fp,0(sp)
   10408:	dec00104 	addi	sp,sp,4
   1040c:	f800283a 	ret

00010410 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10410:	defffe04 	addi	sp,sp,-8
   10414:	df000115 	stw	fp,4(sp)
   10418:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1041c:	e03fff15 	stw	zero,-4(fp)
   10420:	00000506 	br	10438 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10424:	e0bfff17 	ldw	r2,-4(fp)
   10428:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1042c:	e0bfff17 	ldw	r2,-4(fp)
   10430:	10800804 	addi	r2,r2,32
   10434:	e0bfff15 	stw	r2,-4(fp)
   10438:	e0bfff17 	ldw	r2,-4(fp)
   1043c:	10820030 	cmpltui	r2,r2,2048
   10440:	103ff81e 	bne	r2,zero,10424 <__alt_mem_onchip_memory+0xf7810424>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10444:	0001883a 	nop
   10448:	e037883a 	mov	sp,fp
   1044c:	df000017 	ldw	fp,0(sp)
   10450:	dec00104 	addi	sp,sp,4
   10454:	f800283a 	ret

00010458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10458:	defffe04 	addi	sp,sp,-8
   1045c:	dfc00115 	stw	ra,4(sp)
   10460:	df000015 	stw	fp,0(sp)
   10464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10468:	d0a01017 	ldw	r2,-32704(gp)
   1046c:	10000326 	beq	r2,zero,1047c <alt_get_errno+0x24>
   10470:	d0a01017 	ldw	r2,-32704(gp)
   10474:	103ee83a 	callr	r2
   10478:	00000106 	br	10480 <alt_get_errno+0x28>
   1047c:	d0a6dc04 	addi	r2,gp,-25744
}
   10480:	e037883a 	mov	sp,fp
   10484:	dfc00117 	ldw	ra,4(sp)
   10488:	df000017 	ldw	fp,0(sp)
   1048c:	dec00204 	addi	sp,sp,8
   10490:	f800283a 	ret

00010494 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10494:	defffa04 	addi	sp,sp,-24
   10498:	dfc00515 	stw	ra,20(sp)
   1049c:	df000415 	stw	fp,16(sp)
   104a0:	df000404 	addi	fp,sp,16
   104a4:	e13ffe15 	stw	r4,-8(fp)
   104a8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   104ac:	e0bffe17 	ldw	r2,-8(fp)
   104b0:	10000326 	beq	r2,zero,104c0 <alt_dev_llist_insert+0x2c>
   104b4:	e0bffe17 	ldw	r2,-8(fp)
   104b8:	10800217 	ldw	r2,8(r2)
   104bc:	1000061e 	bne	r2,zero,104d8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   104c0:	00104580 	call	10458 <alt_get_errno>
   104c4:	1007883a 	mov	r3,r2
   104c8:	00800584 	movi	r2,22
   104cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   104d0:	00bffa84 	movi	r2,-22
   104d4:	00001306 	br	10524 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   104d8:	e0bffe17 	ldw	r2,-8(fp)
   104dc:	e0ffff17 	ldw	r3,-4(fp)
   104e0:	e0fffc15 	stw	r3,-16(fp)
   104e4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   104e8:	e0bffd17 	ldw	r2,-12(fp)
   104ec:	e0fffc17 	ldw	r3,-16(fp)
   104f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   104f4:	e0bffc17 	ldw	r2,-16(fp)
   104f8:	10c00017 	ldw	r3,0(r2)
   104fc:	e0bffd17 	ldw	r2,-12(fp)
   10500:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10504:	e0bffc17 	ldw	r2,-16(fp)
   10508:	10800017 	ldw	r2,0(r2)
   1050c:	e0fffd17 	ldw	r3,-12(fp)
   10510:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10514:	e0bffc17 	ldw	r2,-16(fp)
   10518:	e0fffd17 	ldw	r3,-12(fp)
   1051c:	10c00015 	stw	r3,0(r2)

  return 0;  
   10520:	0005883a 	mov	r2,zero
}
   10524:	e037883a 	mov	sp,fp
   10528:	dfc00117 	ldw	ra,4(sp)
   1052c:	df000017 	ldw	fp,0(sp)
   10530:	dec00204 	addi	sp,sp,8
   10534:	f800283a 	ret

00010538 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10538:	defffd04 	addi	sp,sp,-12
   1053c:	dfc00215 	stw	ra,8(sp)
   10540:	df000115 	stw	fp,4(sp)
   10544:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10548:	00800074 	movhi	r2,1
   1054c:	10855e04 	addi	r2,r2,5496
   10550:	e0bfff15 	stw	r2,-4(fp)
   10554:	00000606 	br	10570 <_do_ctors+0x38>
        (*ctor) (); 
   10558:	e0bfff17 	ldw	r2,-4(fp)
   1055c:	10800017 	ldw	r2,0(r2)
   10560:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10564:	e0bfff17 	ldw	r2,-4(fp)
   10568:	10bfff04 	addi	r2,r2,-4
   1056c:	e0bfff15 	stw	r2,-4(fp)
   10570:	e0ffff17 	ldw	r3,-4(fp)
   10574:	00800074 	movhi	r2,1
   10578:	10855f04 	addi	r2,r2,5500
   1057c:	18bff62e 	bgeu	r3,r2,10558 <__alt_mem_onchip_memory+0xf7810558>
        (*ctor) (); 
}
   10580:	0001883a 	nop
   10584:	e037883a 	mov	sp,fp
   10588:	dfc00117 	ldw	ra,4(sp)
   1058c:	df000017 	ldw	fp,0(sp)
   10590:	dec00204 	addi	sp,sp,8
   10594:	f800283a 	ret

00010598 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10598:	defffd04 	addi	sp,sp,-12
   1059c:	dfc00215 	stw	ra,8(sp)
   105a0:	df000115 	stw	fp,4(sp)
   105a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   105a8:	00800074 	movhi	r2,1
   105ac:	10855e04 	addi	r2,r2,5496
   105b0:	e0bfff15 	stw	r2,-4(fp)
   105b4:	00000606 	br	105d0 <_do_dtors+0x38>
        (*dtor) (); 
   105b8:	e0bfff17 	ldw	r2,-4(fp)
   105bc:	10800017 	ldw	r2,0(r2)
   105c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10bfff04 	addi	r2,r2,-4
   105cc:	e0bfff15 	stw	r2,-4(fp)
   105d0:	e0ffff17 	ldw	r3,-4(fp)
   105d4:	00800074 	movhi	r2,1
   105d8:	10855f04 	addi	r2,r2,5500
   105dc:	18bff62e 	bgeu	r3,r2,105b8 <__alt_mem_onchip_memory+0xf78105b8>
        (*dtor) (); 
}
   105e0:	0001883a 	nop
   105e4:	e037883a 	mov	sp,fp
   105e8:	dfc00117 	ldw	ra,4(sp)
   105ec:	df000017 	ldw	fp,0(sp)
   105f0:	dec00204 	addi	sp,sp,8
   105f4:	f800283a 	ret

000105f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   105f8:	defffe04 	addi	sp,sp,-8
   105fc:	dfc00115 	stw	ra,4(sp)
   10600:	df000015 	stw	fp,0(sp)
   10604:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10608:	01440004 	movi	r5,4096
   1060c:	0009883a 	mov	r4,zero
   10610:	001104c0 	call	1104c <alt_icache_flush>
#endif
}
   10614:	0001883a 	nop
   10618:	e037883a 	mov	sp,fp
   1061c:	dfc00117 	ldw	ra,4(sp)
   10620:	df000017 	ldw	fp,0(sp)
   10624:	dec00204 	addi	sp,sp,8
   10628:	f800283a 	ret

0001062c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1062c:	defff904 	addi	sp,sp,-28
   10630:	dfc00615 	stw	ra,24(sp)
   10634:	df000515 	stw	fp,20(sp)
   10638:	df000504 	addi	fp,sp,20
   1063c:	e13ffc15 	stw	r4,-16(fp)
   10640:	e17ffd15 	stw	r5,-12(fp)
   10644:	e1bffe15 	stw	r6,-8(fp)
   10648:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1064c:	e0800217 	ldw	r2,8(fp)
   10650:	d8800015 	stw	r2,0(sp)
   10654:	e1ffff17 	ldw	r7,-4(fp)
   10658:	e1bffe17 	ldw	r6,-8(fp)
   1065c:	e17ffd17 	ldw	r5,-12(fp)
   10660:	e13ffc17 	ldw	r4,-16(fp)
   10664:	00107dc0 	call	107dc <alt_iic_isr_register>
}  
   10668:	e037883a 	mov	sp,fp
   1066c:	dfc00117 	ldw	ra,4(sp)
   10670:	df000017 	ldw	fp,0(sp)
   10674:	dec00204 	addi	sp,sp,8
   10678:	f800283a 	ret

0001067c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1067c:	defff904 	addi	sp,sp,-28
   10680:	df000615 	stw	fp,24(sp)
   10684:	df000604 	addi	fp,sp,24
   10688:	e13ffe15 	stw	r4,-8(fp)
   1068c:	e17fff15 	stw	r5,-4(fp)
   10690:	e0bfff17 	ldw	r2,-4(fp)
   10694:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10698:	0005303a 	rdctl	r2,status
   1069c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106a0:	e0fffb17 	ldw	r3,-20(fp)
   106a4:	00bfff84 	movi	r2,-2
   106a8:	1884703a 	and	r2,r3,r2
   106ac:	1001703a 	wrctl	status,r2
  
  return context;
   106b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   106b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   106b8:	00c00044 	movi	r3,1
   106bc:	e0bffa17 	ldw	r2,-24(fp)
   106c0:	1884983a 	sll	r2,r3,r2
   106c4:	1007883a 	mov	r3,r2
   106c8:	d0a6ec17 	ldw	r2,-25680(gp)
   106cc:	1884b03a 	or	r2,r3,r2
   106d0:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   106d4:	d0a6ec17 	ldw	r2,-25680(gp)
   106d8:	100170fa 	wrctl	ienable,r2
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106e4:	e0bffd17 	ldw	r2,-12(fp)
   106e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   106ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   106f0:	0001883a 	nop
}
   106f4:	e037883a 	mov	sp,fp
   106f8:	df000017 	ldw	fp,0(sp)
   106fc:	dec00104 	addi	sp,sp,4
   10700:	f800283a 	ret

00010704 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10704:	defff904 	addi	sp,sp,-28
   10708:	df000615 	stw	fp,24(sp)
   1070c:	df000604 	addi	fp,sp,24
   10710:	e13ffe15 	stw	r4,-8(fp)
   10714:	e17fff15 	stw	r5,-4(fp)
   10718:	e0bfff17 	ldw	r2,-4(fp)
   1071c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10720:	0005303a 	rdctl	r2,status
   10724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10728:	e0fffb17 	ldw	r3,-20(fp)
   1072c:	00bfff84 	movi	r2,-2
   10730:	1884703a 	and	r2,r3,r2
   10734:	1001703a 	wrctl	status,r2
  
  return context;
   10738:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1073c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10740:	00c00044 	movi	r3,1
   10744:	e0bffa17 	ldw	r2,-24(fp)
   10748:	1884983a 	sll	r2,r3,r2
   1074c:	0084303a 	nor	r2,zero,r2
   10750:	1007883a 	mov	r3,r2
   10754:	d0a6ec17 	ldw	r2,-25680(gp)
   10758:	1884703a 	and	r2,r3,r2
   1075c:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10760:	d0a6ec17 	ldw	r2,-25680(gp)
   10764:	100170fa 	wrctl	ienable,r2
   10768:	e0bffc17 	ldw	r2,-16(fp)
   1076c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10770:	e0bffd17 	ldw	r2,-12(fp)
   10774:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10778:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1077c:	0001883a 	nop
}
   10780:	e037883a 	mov	sp,fp
   10784:	df000017 	ldw	fp,0(sp)
   10788:	dec00104 	addi	sp,sp,4
   1078c:	f800283a 	ret

00010790 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10790:	defffc04 	addi	sp,sp,-16
   10794:	df000315 	stw	fp,12(sp)
   10798:	df000304 	addi	fp,sp,12
   1079c:	e13ffe15 	stw	r4,-8(fp)
   107a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   107a4:	000530fa 	rdctl	r2,ienable
   107a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   107ac:	00c00044 	movi	r3,1
   107b0:	e0bfff17 	ldw	r2,-4(fp)
   107b4:	1884983a 	sll	r2,r3,r2
   107b8:	1007883a 	mov	r3,r2
   107bc:	e0bffd17 	ldw	r2,-12(fp)
   107c0:	1884703a 	and	r2,r3,r2
   107c4:	1004c03a 	cmpne	r2,r2,zero
   107c8:	10803fcc 	andi	r2,r2,255
}
   107cc:	e037883a 	mov	sp,fp
   107d0:	df000017 	ldw	fp,0(sp)
   107d4:	dec00104 	addi	sp,sp,4
   107d8:	f800283a 	ret

000107dc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   107dc:	defff504 	addi	sp,sp,-44
   107e0:	dfc00a15 	stw	ra,40(sp)
   107e4:	df000915 	stw	fp,36(sp)
   107e8:	df000904 	addi	fp,sp,36
   107ec:	e13ffc15 	stw	r4,-16(fp)
   107f0:	e17ffd15 	stw	r5,-12(fp)
   107f4:	e1bffe15 	stw	r6,-8(fp)
   107f8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   107fc:	00bffa84 	movi	r2,-22
   10800:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10804:	e0bffd17 	ldw	r2,-12(fp)
   10808:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1080c:	e0bff817 	ldw	r2,-32(fp)
   10810:	10800808 	cmpgei	r2,r2,32
   10814:	1000271e 	bne	r2,zero,108b4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10818:	0005303a 	rdctl	r2,status
   1081c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10820:	e0fffb17 	ldw	r3,-20(fp)
   10824:	00bfff84 	movi	r2,-2
   10828:	1884703a 	and	r2,r3,r2
   1082c:	1001703a 	wrctl	status,r2
  
  return context;
   10830:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10834:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10838:	00800074 	movhi	r2,1
   1083c:	109e1004 	addi	r2,r2,30784
   10840:	e0fff817 	ldw	r3,-32(fp)
   10844:	180690fa 	slli	r3,r3,3
   10848:	10c5883a 	add	r2,r2,r3
   1084c:	e0fffe17 	ldw	r3,-8(fp)
   10850:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10854:	00800074 	movhi	r2,1
   10858:	109e1004 	addi	r2,r2,30784
   1085c:	e0fff817 	ldw	r3,-32(fp)
   10860:	180690fa 	slli	r3,r3,3
   10864:	10c5883a 	add	r2,r2,r3
   10868:	10800104 	addi	r2,r2,4
   1086c:	e0ffff17 	ldw	r3,-4(fp)
   10870:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10874:	e0bffe17 	ldw	r2,-8(fp)
   10878:	10000526 	beq	r2,zero,10890 <alt_iic_isr_register+0xb4>
   1087c:	e0bff817 	ldw	r2,-32(fp)
   10880:	100b883a 	mov	r5,r2
   10884:	e13ffc17 	ldw	r4,-16(fp)
   10888:	001067c0 	call	1067c <alt_ic_irq_enable>
   1088c:	00000406 	br	108a0 <alt_iic_isr_register+0xc4>
   10890:	e0bff817 	ldw	r2,-32(fp)
   10894:	100b883a 	mov	r5,r2
   10898:	e13ffc17 	ldw	r4,-16(fp)
   1089c:	00107040 	call	10704 <alt_ic_irq_disable>
   108a0:	e0bff715 	stw	r2,-36(fp)
   108a4:	e0bffa17 	ldw	r2,-24(fp)
   108a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108ac:	e0bff917 	ldw	r2,-28(fp)
   108b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   108b4:	e0bff717 	ldw	r2,-36(fp)
}
   108b8:	e037883a 	mov	sp,fp
   108bc:	dfc00117 	ldw	ra,4(sp)
   108c0:	df000017 	ldw	fp,0(sp)
   108c4:	dec00204 	addi	sp,sp,8
   108c8:	f800283a 	ret

000108cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   108cc:	defff904 	addi	sp,sp,-28
   108d0:	dfc00615 	stw	ra,24(sp)
   108d4:	df000515 	stw	fp,20(sp)
   108d8:	df000504 	addi	fp,sp,20
   108dc:	e13ffc15 	stw	r4,-16(fp)
   108e0:	e17ffd15 	stw	r5,-12(fp)
   108e4:	e1bffe15 	stw	r6,-8(fp)
   108e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   108ec:	e1bfff17 	ldw	r6,-4(fp)
   108f0:	e17ffe17 	ldw	r5,-8(fp)
   108f4:	e13ffd17 	ldw	r4,-12(fp)
   108f8:	0010b0c0 	call	10b0c <open>
   108fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10900:	e0bffb17 	ldw	r2,-20(fp)
   10904:	10001c16 	blt	r2,zero,10978 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10908:	00800074 	movhi	r2,1
   1090c:	1088c004 	addi	r2,r2,8960
   10910:	e0fffb17 	ldw	r3,-20(fp)
   10914:	18c00324 	muli	r3,r3,12
   10918:	10c5883a 	add	r2,r2,r3
   1091c:	10c00017 	ldw	r3,0(r2)
   10920:	e0bffc17 	ldw	r2,-16(fp)
   10924:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10928:	00800074 	movhi	r2,1
   1092c:	1088c004 	addi	r2,r2,8960
   10930:	e0fffb17 	ldw	r3,-20(fp)
   10934:	18c00324 	muli	r3,r3,12
   10938:	10c5883a 	add	r2,r2,r3
   1093c:	10800104 	addi	r2,r2,4
   10940:	10c00017 	ldw	r3,0(r2)
   10944:	e0bffc17 	ldw	r2,-16(fp)
   10948:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1094c:	00800074 	movhi	r2,1
   10950:	1088c004 	addi	r2,r2,8960
   10954:	e0fffb17 	ldw	r3,-20(fp)
   10958:	18c00324 	muli	r3,r3,12
   1095c:	10c5883a 	add	r2,r2,r3
   10960:	10800204 	addi	r2,r2,8
   10964:	10c00017 	ldw	r3,0(r2)
   10968:	e0bffc17 	ldw	r2,-16(fp)
   1096c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10970:	e13ffb17 	ldw	r4,-20(fp)
   10974:	000f03c0 	call	f03c <alt_release_fd>
  }
} 
   10978:	0001883a 	nop
   1097c:	e037883a 	mov	sp,fp
   10980:	dfc00117 	ldw	ra,4(sp)
   10984:	df000017 	ldw	fp,0(sp)
   10988:	dec00204 	addi	sp,sp,8
   1098c:	f800283a 	ret

00010990 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10990:	defffb04 	addi	sp,sp,-20
   10994:	dfc00415 	stw	ra,16(sp)
   10998:	df000315 	stw	fp,12(sp)
   1099c:	df000304 	addi	fp,sp,12
   109a0:	e13ffd15 	stw	r4,-12(fp)
   109a4:	e17ffe15 	stw	r5,-8(fp)
   109a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   109ac:	01c07fc4 	movi	r7,511
   109b0:	01800044 	movi	r6,1
   109b4:	e17ffd17 	ldw	r5,-12(fp)
   109b8:	01000074 	movhi	r4,1
   109bc:	2108c304 	addi	r4,r4,8972
   109c0:	00108cc0 	call	108cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   109c4:	01c07fc4 	movi	r7,511
   109c8:	000d883a 	mov	r6,zero
   109cc:	e17ffe17 	ldw	r5,-8(fp)
   109d0:	01000074 	movhi	r4,1
   109d4:	2108c004 	addi	r4,r4,8960
   109d8:	00108cc0 	call	108cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   109dc:	01c07fc4 	movi	r7,511
   109e0:	01800044 	movi	r6,1
   109e4:	e17fff17 	ldw	r5,-4(fp)
   109e8:	01000074 	movhi	r4,1
   109ec:	2108c604 	addi	r4,r4,8984
   109f0:	00108cc0 	call	108cc <alt_open_fd>
}  
   109f4:	0001883a 	nop
   109f8:	e037883a 	mov	sp,fp
   109fc:	dfc00117 	ldw	ra,4(sp)
   10a00:	df000017 	ldw	fp,0(sp)
   10a04:	dec00204 	addi	sp,sp,8
   10a08:	f800283a 	ret

00010a0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10a0c:	defffe04 	addi	sp,sp,-8
   10a10:	dfc00115 	stw	ra,4(sp)
   10a14:	df000015 	stw	fp,0(sp)
   10a18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10a1c:	d0a01017 	ldw	r2,-32704(gp)
   10a20:	10000326 	beq	r2,zero,10a30 <alt_get_errno+0x24>
   10a24:	d0a01017 	ldw	r2,-32704(gp)
   10a28:	103ee83a 	callr	r2
   10a2c:	00000106 	br	10a34 <alt_get_errno+0x28>
   10a30:	d0a6dc04 	addi	r2,gp,-25744
}
   10a34:	e037883a 	mov	sp,fp
   10a38:	dfc00117 	ldw	ra,4(sp)
   10a3c:	df000017 	ldw	fp,0(sp)
   10a40:	dec00204 	addi	sp,sp,8
   10a44:	f800283a 	ret

00010a48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10a48:	defffd04 	addi	sp,sp,-12
   10a4c:	df000215 	stw	fp,8(sp)
   10a50:	df000204 	addi	fp,sp,8
   10a54:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10a58:	e0bfff17 	ldw	r2,-4(fp)
   10a5c:	10800217 	ldw	r2,8(r2)
   10a60:	10d00034 	orhi	r3,r2,16384
   10a64:	e0bfff17 	ldw	r2,-4(fp)
   10a68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10a6c:	e03ffe15 	stw	zero,-8(fp)
   10a70:	00001d06 	br	10ae8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10a74:	00800074 	movhi	r2,1
   10a78:	1088c004 	addi	r2,r2,8960
   10a7c:	e0fffe17 	ldw	r3,-8(fp)
   10a80:	18c00324 	muli	r3,r3,12
   10a84:	10c5883a 	add	r2,r2,r3
   10a88:	10c00017 	ldw	r3,0(r2)
   10a8c:	e0bfff17 	ldw	r2,-4(fp)
   10a90:	10800017 	ldw	r2,0(r2)
   10a94:	1880111e 	bne	r3,r2,10adc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10a98:	00800074 	movhi	r2,1
   10a9c:	1088c004 	addi	r2,r2,8960
   10aa0:	e0fffe17 	ldw	r3,-8(fp)
   10aa4:	18c00324 	muli	r3,r3,12
   10aa8:	10c5883a 	add	r2,r2,r3
   10aac:	10800204 	addi	r2,r2,8
   10ab0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10ab4:	1000090e 	bge	r2,zero,10adc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10ab8:	e0bffe17 	ldw	r2,-8(fp)
   10abc:	10c00324 	muli	r3,r2,12
   10ac0:	00800074 	movhi	r2,1
   10ac4:	1088c004 	addi	r2,r2,8960
   10ac8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10acc:	e0bfff17 	ldw	r2,-4(fp)
   10ad0:	18800226 	beq	r3,r2,10adc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10ad4:	00bffcc4 	movi	r2,-13
   10ad8:	00000806 	br	10afc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10adc:	e0bffe17 	ldw	r2,-8(fp)
   10ae0:	10800044 	addi	r2,r2,1
   10ae4:	e0bffe15 	stw	r2,-8(fp)
   10ae8:	d0a00f17 	ldw	r2,-32708(gp)
   10aec:	1007883a 	mov	r3,r2
   10af0:	e0bffe17 	ldw	r2,-8(fp)
   10af4:	18bfdf2e 	bgeu	r3,r2,10a74 <__alt_mem_onchip_memory+0xf7810a74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10af8:	0005883a 	mov	r2,zero
}
   10afc:	e037883a 	mov	sp,fp
   10b00:	df000017 	ldw	fp,0(sp)
   10b04:	dec00104 	addi	sp,sp,4
   10b08:	f800283a 	ret

00010b0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10b0c:	defff604 	addi	sp,sp,-40
   10b10:	dfc00915 	stw	ra,36(sp)
   10b14:	df000815 	stw	fp,32(sp)
   10b18:	df000804 	addi	fp,sp,32
   10b1c:	e13ffd15 	stw	r4,-12(fp)
   10b20:	e17ffe15 	stw	r5,-8(fp)
   10b24:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10b28:	00bfffc4 	movi	r2,-1
   10b2c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10b30:	00bffb44 	movi	r2,-19
   10b34:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10b38:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10b3c:	d1600d04 	addi	r5,gp,-32716
   10b40:	e13ffd17 	ldw	r4,-12(fp)
   10b44:	0010e100 	call	10e10 <alt_find_dev>
   10b48:	e0bff815 	stw	r2,-32(fp)
   10b4c:	e0bff817 	ldw	r2,-32(fp)
   10b50:	1000051e 	bne	r2,zero,10b68 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10b54:	e13ffd17 	ldw	r4,-12(fp)
   10b58:	0010ea00 	call	10ea0 <alt_find_file>
   10b5c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10b60:	00800044 	movi	r2,1
   10b64:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10b68:	e0bff817 	ldw	r2,-32(fp)
   10b6c:	10002926 	beq	r2,zero,10c14 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10b70:	e13ff817 	ldw	r4,-32(fp)
   10b74:	0010fa80 	call	10fa8 <alt_get_fd>
   10b78:	e0bff915 	stw	r2,-28(fp)
   10b7c:	e0bff917 	ldw	r2,-28(fp)
   10b80:	1000030e 	bge	r2,zero,10b90 <open+0x84>
    {
      status = index;
   10b84:	e0bff917 	ldw	r2,-28(fp)
   10b88:	e0bffa15 	stw	r2,-24(fp)
   10b8c:	00002306 	br	10c1c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10b90:	e0bff917 	ldw	r2,-28(fp)
   10b94:	10c00324 	muli	r3,r2,12
   10b98:	00800074 	movhi	r2,1
   10b9c:	1088c004 	addi	r2,r2,8960
   10ba0:	1885883a 	add	r2,r3,r2
   10ba4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10ba8:	e0fffe17 	ldw	r3,-8(fp)
   10bac:	00900034 	movhi	r2,16384
   10bb0:	10bfffc4 	addi	r2,r2,-1
   10bb4:	1886703a 	and	r3,r3,r2
   10bb8:	e0bffc17 	ldw	r2,-16(fp)
   10bbc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10bc0:	e0bffb17 	ldw	r2,-20(fp)
   10bc4:	1000051e 	bne	r2,zero,10bdc <open+0xd0>
   10bc8:	e13ffc17 	ldw	r4,-16(fp)
   10bcc:	0010a480 	call	10a48 <alt_file_locked>
   10bd0:	e0bffa15 	stw	r2,-24(fp)
   10bd4:	e0bffa17 	ldw	r2,-24(fp)
   10bd8:	10001016 	blt	r2,zero,10c1c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10bdc:	e0bff817 	ldw	r2,-32(fp)
   10be0:	10800317 	ldw	r2,12(r2)
   10be4:	10000826 	beq	r2,zero,10c08 <open+0xfc>
   10be8:	e0bff817 	ldw	r2,-32(fp)
   10bec:	10800317 	ldw	r2,12(r2)
   10bf0:	e1ffff17 	ldw	r7,-4(fp)
   10bf4:	e1bffe17 	ldw	r6,-8(fp)
   10bf8:	e17ffd17 	ldw	r5,-12(fp)
   10bfc:	e13ffc17 	ldw	r4,-16(fp)
   10c00:	103ee83a 	callr	r2
   10c04:	00000106 	br	10c0c <open+0x100>
   10c08:	0005883a 	mov	r2,zero
   10c0c:	e0bffa15 	stw	r2,-24(fp)
   10c10:	00000206 	br	10c1c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10c14:	00bffb44 	movi	r2,-19
   10c18:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10c1c:	e0bffa17 	ldw	r2,-24(fp)
   10c20:	1000090e 	bge	r2,zero,10c48 <open+0x13c>
  {
    alt_release_fd (index);  
   10c24:	e13ff917 	ldw	r4,-28(fp)
   10c28:	000f03c0 	call	f03c <alt_release_fd>
    ALT_ERRNO = -status;
   10c2c:	0010a0c0 	call	10a0c <alt_get_errno>
   10c30:	1007883a 	mov	r3,r2
   10c34:	e0bffa17 	ldw	r2,-24(fp)
   10c38:	0085c83a 	sub	r2,zero,r2
   10c3c:	18800015 	stw	r2,0(r3)
    return -1;
   10c40:	00bfffc4 	movi	r2,-1
   10c44:	00000106 	br	10c4c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10c48:	e0bff917 	ldw	r2,-28(fp)
}
   10c4c:	e037883a 	mov	sp,fp
   10c50:	dfc00117 	ldw	ra,4(sp)
   10c54:	df000017 	ldw	fp,0(sp)
   10c58:	dec00204 	addi	sp,sp,8
   10c5c:	f800283a 	ret

00010c60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10c60:	deffff04 	addi	sp,sp,-4
   10c64:	df000015 	stw	fp,0(sp)
   10c68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10c6c:	000170fa 	wrctl	ienable,zero
}
   10c70:	0001883a 	nop
   10c74:	e037883a 	mov	sp,fp
   10c78:	df000017 	ldw	fp,0(sp)
   10c7c:	dec00104 	addi	sp,sp,4
   10c80:	f800283a 	ret

00010c84 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   10c84:	defff904 	addi	sp,sp,-28
   10c88:	df000615 	stw	fp,24(sp)
   10c8c:	df000604 	addi	fp,sp,24
   10c90:	e13ffe15 	stw	r4,-8(fp)
   10c94:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   10c98:	e03ffa15 	stw	zero,-24(fp)
   10c9c:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   10ca0:	000b883a 	mov	r5,zero
   10ca4:	e13ffe17 	ldw	r4,-8(fp)
   10ca8:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
   10cac:	e13fff17 	ldw	r4,-4(fp)
   10cb0:	2008913a 	slli	r4,r4,4
   10cb4:	200b883a 	mov	r5,r4
   10cb8:	e13ffe17 	ldw	r4,-8(fp)
   10cbc:	2149883a 	add	r4,r4,r5
   10cc0:	21000037 	ldwio	r4,0(r4)
   10cc4:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   10cc8:	e13fff17 	ldw	r4,-4(fp)
   10ccc:	2008913a 	slli	r4,r4,4
   10cd0:	21000104 	addi	r4,r4,4
   10cd4:	200b883a 	mov	r5,r4
   10cd8:	e13ffe17 	ldw	r4,-8(fp)
   10cdc:	2149883a 	add	r4,r4,r5
   10ce0:	21000037 	ldwio	r4,0(r4)
   10ce4:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   10ce8:	e13ffd17 	ldw	r4,-12(fp)
   10cec:	2011883a 	mov	r8,r4
   10cf0:	0013883a 	mov	r9,zero
   10cf4:	4006983a 	sll	r3,r8,zero
   10cf8:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
   10cfc:	e13ffc17 	ldw	r4,-16(fp)
   10d00:	200d883a 	mov	r6,r4
   10d04:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   10d08:	1188b03a 	or	r4,r2,r6
   10d0c:	e13ffa15 	stw	r4,-24(fp)
   10d10:	19c4b03a 	or	r2,r3,r7
   10d14:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   10d18:	e0bffa17 	ldw	r2,-24(fp)
   10d1c:	e0fffb17 	ldw	r3,-20(fp)
   10d20:	1009883a 	mov	r4,r2
   10d24:	180b883a 	mov	r5,r3
}
   10d28:	2005883a 	mov	r2,r4
   10d2c:	2807883a 	mov	r3,r5
   10d30:	e037883a 	mov	sp,fp
   10d34:	df000017 	ldw	fp,0(sp)
   10d38:	dec00104 	addi	sp,sp,4
   10d3c:	f800283a 	ret

00010d40 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   10d40:	defffd04 	addi	sp,sp,-12
   10d44:	dfc00215 	stw	ra,8(sp)
   10d48:	df000115 	stw	fp,4(sp)
   10d4c:	df000104 	addi	fp,sp,4
   10d50:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   10d54:	000b883a 	mov	r5,zero
   10d58:	e13fff17 	ldw	r4,-4(fp)
   10d5c:	0010c840 	call	10c84 <perf_get_section_time>
   10d60:	100b883a 	mov	r5,r2
   10d64:	180d883a 	mov	r6,r3
   10d68:	2807883a 	mov	r3,r5
   10d6c:	3009883a 	mov	r4,r6
}
   10d70:	1805883a 	mov	r2,r3
   10d74:	2007883a 	mov	r3,r4
   10d78:	e037883a 	mov	sp,fp
   10d7c:	dfc00117 	ldw	ra,4(sp)
   10d80:	df000017 	ldw	fp,0(sp)
   10d84:	dec00204 	addi	sp,sp,8
   10d88:	f800283a 	ret

00010d8c <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   10d8c:	defffd04 	addi	sp,sp,-12
   10d90:	df000215 	stw	fp,8(sp)
   10d94:	df000204 	addi	fp,sp,8
   10d98:	e13ffe15 	stw	r4,-8(fp)
   10d9c:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   10da0:	e0bfff17 	ldw	r2,-4(fp)
   10da4:	1004913a 	slli	r2,r2,4
   10da8:	10800204 	addi	r2,r2,8
   10dac:	1007883a 	mov	r3,r2
   10db0:	e0bffe17 	ldw	r2,-8(fp)
   10db4:	10c5883a 	add	r2,r2,r3
   10db8:	10800037 	ldwio	r2,0(r2)
}
   10dbc:	e037883a 	mov	sp,fp
   10dc0:	df000017 	ldw	fp,0(sp)
   10dc4:	dec00104 	addi	sp,sp,4
   10dc8:	f800283a 	ret

00010dcc <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   10dcc:	deffff04 	addi	sp,sp,-4
   10dd0:	df000015 	stw	fp,0(sp)
   10dd4:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
   10dd8:	0005883a 	mov	r2,zero
#endif
}
   10ddc:	e037883a 	mov	sp,fp
   10de0:	df000017 	ldw	fp,0(sp)
   10de4:	dec00104 	addi	sp,sp,4
   10de8:	f800283a 	ret

00010dec <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   10dec:	deffff04 	addi	sp,sp,-4
   10df0:	df000015 	stw	fp,0(sp)
   10df4:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   10df8:	0080bef4 	movhi	r2,763
   10dfc:	10bc2004 	addi	r2,r2,-3968
}
   10e00:	e037883a 	mov	sp,fp
   10e04:	df000017 	ldw	fp,0(sp)
   10e08:	dec00104 	addi	sp,sp,4
   10e0c:	f800283a 	ret

00010e10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10e10:	defffa04 	addi	sp,sp,-24
   10e14:	dfc00515 	stw	ra,20(sp)
   10e18:	df000415 	stw	fp,16(sp)
   10e1c:	df000404 	addi	fp,sp,16
   10e20:	e13ffe15 	stw	r4,-8(fp)
   10e24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10e28:	e0bfff17 	ldw	r2,-4(fp)
   10e2c:	10800017 	ldw	r2,0(r2)
   10e30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10e34:	e13ffe17 	ldw	r4,-8(fp)
   10e38:	00041c00 	call	41c0 <strlen>
   10e3c:	10800044 	addi	r2,r2,1
   10e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10e44:	00000d06 	br	10e7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	10800217 	ldw	r2,8(r2)
   10e50:	e0fffd17 	ldw	r3,-12(fp)
   10e54:	180d883a 	mov	r6,r3
   10e58:	e17ffe17 	ldw	r5,-8(fp)
   10e5c:	1009883a 	mov	r4,r2
   10e60:	00111c40 	call	111c4 <memcmp>
   10e64:	1000021e 	bne	r2,zero,10e70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10e68:	e0bffc17 	ldw	r2,-16(fp)
   10e6c:	00000706 	br	10e8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10e70:	e0bffc17 	ldw	r2,-16(fp)
   10e74:	10800017 	ldw	r2,0(r2)
   10e78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10e7c:	e0fffc17 	ldw	r3,-16(fp)
   10e80:	e0bfff17 	ldw	r2,-4(fp)
   10e84:	18bff01e 	bne	r3,r2,10e48 <__alt_mem_onchip_memory+0xf7810e48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10e88:	0005883a 	mov	r2,zero
}
   10e8c:	e037883a 	mov	sp,fp
   10e90:	dfc00117 	ldw	ra,4(sp)
   10e94:	df000017 	ldw	fp,0(sp)
   10e98:	dec00204 	addi	sp,sp,8
   10e9c:	f800283a 	ret

00010ea0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10ea0:	defffb04 	addi	sp,sp,-20
   10ea4:	dfc00415 	stw	ra,16(sp)
   10ea8:	df000315 	stw	fp,12(sp)
   10eac:	df000304 	addi	fp,sp,12
   10eb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10eb4:	d0a00b17 	ldw	r2,-32724(gp)
   10eb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10ebc:	00003106 	br	10f84 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10ec0:	e0bffd17 	ldw	r2,-12(fp)
   10ec4:	10800217 	ldw	r2,8(r2)
   10ec8:	1009883a 	mov	r4,r2
   10ecc:	00041c00 	call	41c0 <strlen>
   10ed0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10ed4:	e0bffd17 	ldw	r2,-12(fp)
   10ed8:	10c00217 	ldw	r3,8(r2)
   10edc:	e0bffe17 	ldw	r2,-8(fp)
   10ee0:	10bfffc4 	addi	r2,r2,-1
   10ee4:	1885883a 	add	r2,r3,r2
   10ee8:	10800003 	ldbu	r2,0(r2)
   10eec:	10803fcc 	andi	r2,r2,255
   10ef0:	1080201c 	xori	r2,r2,128
   10ef4:	10bfe004 	addi	r2,r2,-128
   10ef8:	10800bd8 	cmpnei	r2,r2,47
   10efc:	1000031e 	bne	r2,zero,10f0c <alt_find_file+0x6c>
    {
      len -= 1;
   10f00:	e0bffe17 	ldw	r2,-8(fp)
   10f04:	10bfffc4 	addi	r2,r2,-1
   10f08:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10f0c:	e0bffe17 	ldw	r2,-8(fp)
   10f10:	e0ffff17 	ldw	r3,-4(fp)
   10f14:	1885883a 	add	r2,r3,r2
   10f18:	10800003 	ldbu	r2,0(r2)
   10f1c:	10803fcc 	andi	r2,r2,255
   10f20:	1080201c 	xori	r2,r2,128
   10f24:	10bfe004 	addi	r2,r2,-128
   10f28:	10800be0 	cmpeqi	r2,r2,47
   10f2c:	1000081e 	bne	r2,zero,10f50 <alt_find_file+0xb0>
   10f30:	e0bffe17 	ldw	r2,-8(fp)
   10f34:	e0ffff17 	ldw	r3,-4(fp)
   10f38:	1885883a 	add	r2,r3,r2
   10f3c:	10800003 	ldbu	r2,0(r2)
   10f40:	10803fcc 	andi	r2,r2,255
   10f44:	1080201c 	xori	r2,r2,128
   10f48:	10bfe004 	addi	r2,r2,-128
   10f4c:	10000a1e 	bne	r2,zero,10f78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10f50:	e0bffd17 	ldw	r2,-12(fp)
   10f54:	10800217 	ldw	r2,8(r2)
   10f58:	e0fffe17 	ldw	r3,-8(fp)
   10f5c:	180d883a 	mov	r6,r3
   10f60:	e17fff17 	ldw	r5,-4(fp)
   10f64:	1009883a 	mov	r4,r2
   10f68:	00111c40 	call	111c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10f6c:	1000021e 	bne	r2,zero,10f78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10f70:	e0bffd17 	ldw	r2,-12(fp)
   10f74:	00000706 	br	10f94 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10f78:	e0bffd17 	ldw	r2,-12(fp)
   10f7c:	10800017 	ldw	r2,0(r2)
   10f80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10f84:	e0fffd17 	ldw	r3,-12(fp)
   10f88:	d0a00b04 	addi	r2,gp,-32724
   10f8c:	18bfcc1e 	bne	r3,r2,10ec0 <__alt_mem_onchip_memory+0xf7810ec0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10f90:	0005883a 	mov	r2,zero
}
   10f94:	e037883a 	mov	sp,fp
   10f98:	dfc00117 	ldw	ra,4(sp)
   10f9c:	df000017 	ldw	fp,0(sp)
   10fa0:	dec00204 	addi	sp,sp,8
   10fa4:	f800283a 	ret

00010fa8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10fa8:	defffc04 	addi	sp,sp,-16
   10fac:	df000315 	stw	fp,12(sp)
   10fb0:	df000304 	addi	fp,sp,12
   10fb4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10fb8:	00bffa04 	movi	r2,-24
   10fbc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10fc0:	e03ffd15 	stw	zero,-12(fp)
   10fc4:	00001906 	br	1102c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10fc8:	00800074 	movhi	r2,1
   10fcc:	1088c004 	addi	r2,r2,8960
   10fd0:	e0fffd17 	ldw	r3,-12(fp)
   10fd4:	18c00324 	muli	r3,r3,12
   10fd8:	10c5883a 	add	r2,r2,r3
   10fdc:	10800017 	ldw	r2,0(r2)
   10fe0:	10000f1e 	bne	r2,zero,11020 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10fe4:	00800074 	movhi	r2,1
   10fe8:	1088c004 	addi	r2,r2,8960
   10fec:	e0fffd17 	ldw	r3,-12(fp)
   10ff0:	18c00324 	muli	r3,r3,12
   10ff4:	10c5883a 	add	r2,r2,r3
   10ff8:	e0ffff17 	ldw	r3,-4(fp)
   10ffc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11000:	d0e00f17 	ldw	r3,-32708(gp)
   11004:	e0bffd17 	ldw	r2,-12(fp)
   11008:	1880020e 	bge	r3,r2,11014 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1100c:	e0bffd17 	ldw	r2,-12(fp)
   11010:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   11014:	e0bffd17 	ldw	r2,-12(fp)
   11018:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1101c:	00000606 	br	11038 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11020:	e0bffd17 	ldw	r2,-12(fp)
   11024:	10800044 	addi	r2,r2,1
   11028:	e0bffd15 	stw	r2,-12(fp)
   1102c:	e0bffd17 	ldw	r2,-12(fp)
   11030:	10800810 	cmplti	r2,r2,32
   11034:	103fe41e 	bne	r2,zero,10fc8 <__alt_mem_onchip_memory+0xf7810fc8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11038:	e0bffe17 	ldw	r2,-8(fp)
}
   1103c:	e037883a 	mov	sp,fp
   11040:	df000017 	ldw	fp,0(sp)
   11044:	dec00104 	addi	sp,sp,4
   11048:	f800283a 	ret

0001104c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1104c:	defffb04 	addi	sp,sp,-20
   11050:	df000415 	stw	fp,16(sp)
   11054:	df000404 	addi	fp,sp,16
   11058:	e13ffe15 	stw	r4,-8(fp)
   1105c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11060:	e0bfff17 	ldw	r2,-4(fp)
   11064:	10840070 	cmpltui	r2,r2,4097
   11068:	1000021e 	bne	r2,zero,11074 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1106c:	00840004 	movi	r2,4096
   11070:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11074:	e0fffe17 	ldw	r3,-8(fp)
   11078:	e0bfff17 	ldw	r2,-4(fp)
   1107c:	1885883a 	add	r2,r3,r2
   11080:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11084:	e0bffe17 	ldw	r2,-8(fp)
   11088:	e0bffc15 	stw	r2,-16(fp)
   1108c:	00000506 	br	110a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11090:	e0bffc17 	ldw	r2,-16(fp)
   11094:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11098:	e0bffc17 	ldw	r2,-16(fp)
   1109c:	10800804 	addi	r2,r2,32
   110a0:	e0bffc15 	stw	r2,-16(fp)
   110a4:	e0fffc17 	ldw	r3,-16(fp)
   110a8:	e0bffd17 	ldw	r2,-12(fp)
   110ac:	18bff836 	bltu	r3,r2,11090 <__alt_mem_onchip_memory+0xf7811090>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   110b0:	e0bffe17 	ldw	r2,-8(fp)
   110b4:	108007cc 	andi	r2,r2,31
   110b8:	10000226 	beq	r2,zero,110c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   110bc:	e0bffc17 	ldw	r2,-16(fp)
   110c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   110c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   110c8:	0001883a 	nop
   110cc:	e037883a 	mov	sp,fp
   110d0:	df000017 	ldw	fp,0(sp)
   110d4:	dec00104 	addi	sp,sp,4
   110d8:	f800283a 	ret

000110dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   110dc:	defffe04 	addi	sp,sp,-8
   110e0:	df000115 	stw	fp,4(sp)
   110e4:	df000104 	addi	fp,sp,4
   110e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   110ec:	e0bfff17 	ldw	r2,-4(fp)
   110f0:	10bffe84 	addi	r2,r2,-6
   110f4:	10c00428 	cmpgeui	r3,r2,16
   110f8:	18001a1e 	bne	r3,zero,11164 <alt_exception_cause_generated_bad_addr+0x88>
   110fc:	100690ba 	slli	r3,r2,2
   11100:	00800074 	movhi	r2,1
   11104:	10844504 	addi	r2,r2,4372
   11108:	1885883a 	add	r2,r3,r2
   1110c:	10800017 	ldw	r2,0(r2)
   11110:	1000683a 	jmp	r2
   11114:	00011154 	movui	zero,1093
   11118:	00011154 	movui	zero,1093
   1111c:	00011164 	muli	zero,zero,1093
   11120:	00011164 	muli	zero,zero,1093
   11124:	00011164 	muli	zero,zero,1093
   11128:	00011154 	movui	zero,1093
   1112c:	0001115c 	xori	zero,zero,1093
   11130:	00011164 	muli	zero,zero,1093
   11134:	00011154 	movui	zero,1093
   11138:	00011154 	movui	zero,1093
   1113c:	00011164 	muli	zero,zero,1093
   11140:	00011154 	movui	zero,1093
   11144:	0001115c 	xori	zero,zero,1093
   11148:	00011164 	muli	zero,zero,1093
   1114c:	00011164 	muli	zero,zero,1093
   11150:	00011154 	movui	zero,1093
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11154:	00800044 	movi	r2,1
   11158:	00000306 	br	11168 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1115c:	0005883a 	mov	r2,zero
   11160:	00000106 	br	11168 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11164:	0005883a 	mov	r2,zero
  }
}
   11168:	e037883a 	mov	sp,fp
   1116c:	df000017 	ldw	fp,0(sp)
   11170:	dec00104 	addi	sp,sp,4
   11174:	f800283a 	ret

00011178 <atexit>:
   11178:	200b883a 	mov	r5,r4
   1117c:	000f883a 	mov	r7,zero
   11180:	000d883a 	mov	r6,zero
   11184:	0009883a 	mov	r4,zero
   11188:	00112401 	jmpi	11240 <__register_exitproc>

0001118c <exit>:
   1118c:	defffe04 	addi	sp,sp,-8
   11190:	000b883a 	mov	r5,zero
   11194:	dc000015 	stw	r16,0(sp)
   11198:	dfc00115 	stw	ra,4(sp)
   1119c:	2021883a 	mov	r16,r4
   111a0:	00113580 	call	11358 <__call_exitprocs>
   111a4:	00800074 	movhi	r2,1
   111a8:	108d3d04 	addi	r2,r2,13556
   111ac:	11000017 	ldw	r4,0(r2)
   111b0:	20800f17 	ldw	r2,60(r4)
   111b4:	10000126 	beq	r2,zero,111bc <exit+0x30>
   111b8:	103ee83a 	callr	r2
   111bc:	8009883a 	mov	r4,r16
   111c0:	00115480 	call	11548 <_exit>

000111c4 <memcmp>:
   111c4:	01c000c4 	movi	r7,3
   111c8:	3980192e 	bgeu	r7,r6,11230 <memcmp+0x6c>
   111cc:	2144b03a 	or	r2,r4,r5
   111d0:	11c4703a 	and	r2,r2,r7
   111d4:	10000f26 	beq	r2,zero,11214 <memcmp+0x50>
   111d8:	20800003 	ldbu	r2,0(r4)
   111dc:	28c00003 	ldbu	r3,0(r5)
   111e0:	10c0151e 	bne	r2,r3,11238 <memcmp+0x74>
   111e4:	31bfff84 	addi	r6,r6,-2
   111e8:	01ffffc4 	movi	r7,-1
   111ec:	00000406 	br	11200 <memcmp+0x3c>
   111f0:	20800003 	ldbu	r2,0(r4)
   111f4:	28c00003 	ldbu	r3,0(r5)
   111f8:	31bfffc4 	addi	r6,r6,-1
   111fc:	10c00e1e 	bne	r2,r3,11238 <memcmp+0x74>
   11200:	21000044 	addi	r4,r4,1
   11204:	29400044 	addi	r5,r5,1
   11208:	31fff91e 	bne	r6,r7,111f0 <__alt_mem_onchip_memory+0xf78111f0>
   1120c:	0005883a 	mov	r2,zero
   11210:	f800283a 	ret
   11214:	20c00017 	ldw	r3,0(r4)
   11218:	28800017 	ldw	r2,0(r5)
   1121c:	18bfee1e 	bne	r3,r2,111d8 <__alt_mem_onchip_memory+0xf78111d8>
   11220:	31bfff04 	addi	r6,r6,-4
   11224:	21000104 	addi	r4,r4,4
   11228:	29400104 	addi	r5,r5,4
   1122c:	39bff936 	bltu	r7,r6,11214 <__alt_mem_onchip_memory+0xf7811214>
   11230:	303fe91e 	bne	r6,zero,111d8 <__alt_mem_onchip_memory+0xf78111d8>
   11234:	003ff506 	br	1120c <__alt_mem_onchip_memory+0xf781120c>
   11238:	10c5c83a 	sub	r2,r2,r3
   1123c:	f800283a 	ret

00011240 <__register_exitproc>:
   11240:	defffa04 	addi	sp,sp,-24
   11244:	dc000315 	stw	r16,12(sp)
   11248:	04000074 	movhi	r16,1
   1124c:	840d3d04 	addi	r16,r16,13556
   11250:	80c00017 	ldw	r3,0(r16)
   11254:	dc400415 	stw	r17,16(sp)
   11258:	dfc00515 	stw	ra,20(sp)
   1125c:	18805217 	ldw	r2,328(r3)
   11260:	2023883a 	mov	r17,r4
   11264:	10003726 	beq	r2,zero,11344 <__register_exitproc+0x104>
   11268:	10c00117 	ldw	r3,4(r2)
   1126c:	010007c4 	movi	r4,31
   11270:	20c00e16 	blt	r4,r3,112ac <__register_exitproc+0x6c>
   11274:	1a000044 	addi	r8,r3,1
   11278:	8800221e 	bne	r17,zero,11304 <__register_exitproc+0xc4>
   1127c:	18c00084 	addi	r3,r3,2
   11280:	18c7883a 	add	r3,r3,r3
   11284:	18c7883a 	add	r3,r3,r3
   11288:	12000115 	stw	r8,4(r2)
   1128c:	10c7883a 	add	r3,r2,r3
   11290:	19400015 	stw	r5,0(r3)
   11294:	0005883a 	mov	r2,zero
   11298:	dfc00517 	ldw	ra,20(sp)
   1129c:	dc400417 	ldw	r17,16(sp)
   112a0:	dc000317 	ldw	r16,12(sp)
   112a4:	dec00604 	addi	sp,sp,24
   112a8:	f800283a 	ret
   112ac:	00800034 	movhi	r2,0
   112b0:	10800004 	addi	r2,r2,0
   112b4:	10002626 	beq	r2,zero,11350 <__register_exitproc+0x110>
   112b8:	01006404 	movi	r4,400
   112bc:	d9400015 	stw	r5,0(sp)
   112c0:	d9800115 	stw	r6,4(sp)
   112c4:	d9c00215 	stw	r7,8(sp)
   112c8:	00000000 	call	0 <__alt_mem_sdram>
   112cc:	d9400017 	ldw	r5,0(sp)
   112d0:	d9800117 	ldw	r6,4(sp)
   112d4:	d9c00217 	ldw	r7,8(sp)
   112d8:	10001d26 	beq	r2,zero,11350 <__register_exitproc+0x110>
   112dc:	81000017 	ldw	r4,0(r16)
   112e0:	10000115 	stw	zero,4(r2)
   112e4:	02000044 	movi	r8,1
   112e8:	22405217 	ldw	r9,328(r4)
   112ec:	0007883a 	mov	r3,zero
   112f0:	12400015 	stw	r9,0(r2)
   112f4:	20805215 	stw	r2,328(r4)
   112f8:	10006215 	stw	zero,392(r2)
   112fc:	10006315 	stw	zero,396(r2)
   11300:	883fde26 	beq	r17,zero,1127c <__alt_mem_onchip_memory+0xf781127c>
   11304:	18c9883a 	add	r4,r3,r3
   11308:	2109883a 	add	r4,r4,r4
   1130c:	1109883a 	add	r4,r2,r4
   11310:	21802215 	stw	r6,136(r4)
   11314:	01800044 	movi	r6,1
   11318:	12406217 	ldw	r9,392(r2)
   1131c:	30cc983a 	sll	r6,r6,r3
   11320:	4992b03a 	or	r9,r9,r6
   11324:	12406215 	stw	r9,392(r2)
   11328:	21c04215 	stw	r7,264(r4)
   1132c:	01000084 	movi	r4,2
   11330:	893fd21e 	bne	r17,r4,1127c <__alt_mem_onchip_memory+0xf781127c>
   11334:	11006317 	ldw	r4,396(r2)
   11338:	218cb03a 	or	r6,r4,r6
   1133c:	11806315 	stw	r6,396(r2)
   11340:	003fce06 	br	1127c <__alt_mem_onchip_memory+0xf781127c>
   11344:	18805304 	addi	r2,r3,332
   11348:	18805215 	stw	r2,328(r3)
   1134c:	003fc606 	br	11268 <__alt_mem_onchip_memory+0xf7811268>
   11350:	00bfffc4 	movi	r2,-1
   11354:	003fd006 	br	11298 <__alt_mem_onchip_memory+0xf7811298>

00011358 <__call_exitprocs>:
   11358:	defff504 	addi	sp,sp,-44
   1135c:	df000915 	stw	fp,36(sp)
   11360:	dd400615 	stw	r21,24(sp)
   11364:	dc800315 	stw	r18,12(sp)
   11368:	dfc00a15 	stw	ra,40(sp)
   1136c:	ddc00815 	stw	r23,32(sp)
   11370:	dd800715 	stw	r22,28(sp)
   11374:	dd000515 	stw	r20,20(sp)
   11378:	dcc00415 	stw	r19,16(sp)
   1137c:	dc400215 	stw	r17,8(sp)
   11380:	dc000115 	stw	r16,4(sp)
   11384:	d9000015 	stw	r4,0(sp)
   11388:	2839883a 	mov	fp,r5
   1138c:	04800044 	movi	r18,1
   11390:	057fffc4 	movi	r21,-1
   11394:	00800074 	movhi	r2,1
   11398:	108d3d04 	addi	r2,r2,13556
   1139c:	12000017 	ldw	r8,0(r2)
   113a0:	45005217 	ldw	r20,328(r8)
   113a4:	44c05204 	addi	r19,r8,328
   113a8:	a0001c26 	beq	r20,zero,1141c <__call_exitprocs+0xc4>
   113ac:	a0800117 	ldw	r2,4(r20)
   113b0:	15ffffc4 	addi	r23,r2,-1
   113b4:	b8000d16 	blt	r23,zero,113ec <__call_exitprocs+0x94>
   113b8:	14000044 	addi	r16,r2,1
   113bc:	8421883a 	add	r16,r16,r16
   113c0:	8421883a 	add	r16,r16,r16
   113c4:	84402004 	addi	r17,r16,128
   113c8:	a463883a 	add	r17,r20,r17
   113cc:	a421883a 	add	r16,r20,r16
   113d0:	e0001e26 	beq	fp,zero,1144c <__call_exitprocs+0xf4>
   113d4:	80804017 	ldw	r2,256(r16)
   113d8:	e0801c26 	beq	fp,r2,1144c <__call_exitprocs+0xf4>
   113dc:	bdffffc4 	addi	r23,r23,-1
   113e0:	843fff04 	addi	r16,r16,-4
   113e4:	8c7fff04 	addi	r17,r17,-4
   113e8:	bd7ff91e 	bne	r23,r21,113d0 <__alt_mem_onchip_memory+0xf78113d0>
   113ec:	00800034 	movhi	r2,0
   113f0:	10800004 	addi	r2,r2,0
   113f4:	10000926 	beq	r2,zero,1141c <__call_exitprocs+0xc4>
   113f8:	a0800117 	ldw	r2,4(r20)
   113fc:	1000301e 	bne	r2,zero,114c0 <__call_exitprocs+0x168>
   11400:	a0800017 	ldw	r2,0(r20)
   11404:	10003226 	beq	r2,zero,114d0 <__call_exitprocs+0x178>
   11408:	a009883a 	mov	r4,r20
   1140c:	98800015 	stw	r2,0(r19)
   11410:	00000000 	call	0 <__alt_mem_sdram>
   11414:	9d000017 	ldw	r20,0(r19)
   11418:	a03fe41e 	bne	r20,zero,113ac <__alt_mem_onchip_memory+0xf78113ac>
   1141c:	dfc00a17 	ldw	ra,40(sp)
   11420:	df000917 	ldw	fp,36(sp)
   11424:	ddc00817 	ldw	r23,32(sp)
   11428:	dd800717 	ldw	r22,28(sp)
   1142c:	dd400617 	ldw	r21,24(sp)
   11430:	dd000517 	ldw	r20,20(sp)
   11434:	dcc00417 	ldw	r19,16(sp)
   11438:	dc800317 	ldw	r18,12(sp)
   1143c:	dc400217 	ldw	r17,8(sp)
   11440:	dc000117 	ldw	r16,4(sp)
   11444:	dec00b04 	addi	sp,sp,44
   11448:	f800283a 	ret
   1144c:	a0800117 	ldw	r2,4(r20)
   11450:	80c00017 	ldw	r3,0(r16)
   11454:	10bfffc4 	addi	r2,r2,-1
   11458:	15c01426 	beq	r2,r23,114ac <__call_exitprocs+0x154>
   1145c:	80000015 	stw	zero,0(r16)
   11460:	183fde26 	beq	r3,zero,113dc <__alt_mem_onchip_memory+0xf78113dc>
   11464:	95c8983a 	sll	r4,r18,r23
   11468:	a0806217 	ldw	r2,392(r20)
   1146c:	a5800117 	ldw	r22,4(r20)
   11470:	2084703a 	and	r2,r4,r2
   11474:	10000b26 	beq	r2,zero,114a4 <__call_exitprocs+0x14c>
   11478:	a0806317 	ldw	r2,396(r20)
   1147c:	2088703a 	and	r4,r4,r2
   11480:	20000c1e 	bne	r4,zero,114b4 <__call_exitprocs+0x15c>
   11484:	89400017 	ldw	r5,0(r17)
   11488:	d9000017 	ldw	r4,0(sp)
   1148c:	183ee83a 	callr	r3
   11490:	a0800117 	ldw	r2,4(r20)
   11494:	15bfbf1e 	bne	r2,r22,11394 <__alt_mem_onchip_memory+0xf7811394>
   11498:	98800017 	ldw	r2,0(r19)
   1149c:	153fcf26 	beq	r2,r20,113dc <__alt_mem_onchip_memory+0xf78113dc>
   114a0:	003fbc06 	br	11394 <__alt_mem_onchip_memory+0xf7811394>
   114a4:	183ee83a 	callr	r3
   114a8:	003ff906 	br	11490 <__alt_mem_onchip_memory+0xf7811490>
   114ac:	a5c00115 	stw	r23,4(r20)
   114b0:	003feb06 	br	11460 <__alt_mem_onchip_memory+0xf7811460>
   114b4:	89000017 	ldw	r4,0(r17)
   114b8:	183ee83a 	callr	r3
   114bc:	003ff406 	br	11490 <__alt_mem_onchip_memory+0xf7811490>
   114c0:	a0800017 	ldw	r2,0(r20)
   114c4:	a027883a 	mov	r19,r20
   114c8:	1029883a 	mov	r20,r2
   114cc:	003fb606 	br	113a8 <__alt_mem_onchip_memory+0xf78113a8>
   114d0:	0005883a 	mov	r2,zero
   114d4:	003ffb06 	br	114c4 <__alt_mem_onchip_memory+0xf78114c4>

000114d8 <__floatundidf>:
   114d8:	defffc04 	addi	sp,sp,-16
   114dc:	dc800215 	stw	r18,8(sp)
   114e0:	2025883a 	mov	r18,r4
   114e4:	2809883a 	mov	r4,r5
   114e8:	dfc00315 	stw	ra,12(sp)
   114ec:	dc400115 	stw	r17,4(sp)
   114f0:	dc000015 	stw	r16,0(sp)
   114f4:	000e6a40 	call	e6a4 <__floatunsidf>
   114f8:	000d883a 	mov	r6,zero
   114fc:	01d07c34 	movhi	r7,16880
   11500:	180b883a 	mov	r5,r3
   11504:	1009883a 	mov	r4,r2
   11508:	0002af00 	call	2af0 <__muldf3>
   1150c:	9009883a 	mov	r4,r18
   11510:	1023883a 	mov	r17,r2
   11514:	1821883a 	mov	r16,r3
   11518:	000e6a40 	call	e6a4 <__floatunsidf>
   1151c:	880d883a 	mov	r6,r17
   11520:	800f883a 	mov	r7,r16
   11524:	1009883a 	mov	r4,r2
   11528:	180b883a 	mov	r5,r3
   1152c:	00018680 	call	1868 <__adddf3>
   11530:	dfc00317 	ldw	ra,12(sp)
   11534:	dc800217 	ldw	r18,8(sp)
   11538:	dc400117 	ldw	r17,4(sp)
   1153c:	dc000017 	ldw	r16,0(sp)
   11540:	dec00404 	addi	sp,sp,16
   11544:	f800283a 	ret

00011548 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11548:	defffd04 	addi	sp,sp,-12
   1154c:	df000215 	stw	fp,8(sp)
   11550:	df000204 	addi	fp,sp,8
   11554:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11558:	0001883a 	nop
   1155c:	e0bfff17 	ldw	r2,-4(fp)
   11560:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11564:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11568:	10000226 	beq	r2,zero,11574 <_exit+0x2c>
    ALT_SIM_FAIL();
   1156c:	002af070 	cmpltui	zero,zero,43969
   11570:	00000106 	br	11578 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11574:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11578:	003fff06 	br	11578 <__alt_mem_onchip_memory+0xf7811578>
