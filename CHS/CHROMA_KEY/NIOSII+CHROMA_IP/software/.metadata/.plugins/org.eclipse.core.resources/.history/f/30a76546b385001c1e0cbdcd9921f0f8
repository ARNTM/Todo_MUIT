#include "key_codes.h" 	// define los valores de KEY1, KEY2, KEY3
#include "system.h"
#include <stdio.h>
#include <stdint.h>
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma.h"

/* funciones */
void LCD_cursor( int, int );
void LCD_text( char * );
void LCD_cursor_off( void );
void MTL_text (int, int, char *);
void MTL_clean();
void MTL_scroll();
void MTL_box(int , int , int , int , short);
void readBMPFile(int);

/* variables externas */
//volatile int hour = 0;
//volatile int min = 0;
//volatile int sec = 0;
//volatile int timerTelepronter = 0;
//volatile int timerReloj = 0;
//volatile int linea = 0;
//volatile int pausaTelepronter = 0;

/* interrupciones */
void pushbutton_ISR( );
void switches_ISR ( );

int main(void)
{
	printf("Hola desde Nios III\n");
	volatile int * KEY_ptr = (int *) PUSHBUTTONS_BASE;	// Dirección pulsadores KEY
	volatile int * slider_switch_ptr = (int *) SWITCHES_BASE;	// Dirección switches
	volatile int * red_LED_ptr = (int *) RED_LEDS_BASE;

	//int counter = 0x2625a0*4;				// 1/(50 MHz) x (0x2625a0) = 200 msec
	//*(interval_timer_ptr + 0x1) = counter;
	//*(interval_timer_ptr + 0x3) = counter/2;

	/* comienza el timer y habilita las interrupciones */
	//*(interval_timer_ptr) = 0x1;	// START = 0x1

	//alt_irq_register(MYTIMER_0_IRQ, NULL, interval_timer_isr);

	*(KEY_ptr + 2) = 0xE; 		/* Mascara de los pulsadores (bit 0 es reset) */
	*(KEY_ptr + 3) = 0;
	alt_irq_register(PUSHBUTTONS_IRQ, NULL, pushbutton_ISR);

	*(slider_switch_ptr + 2) = 0xFF;
	alt_irq_register(SWITCHES_IRQ, NULL, switches_ISR);

	char text_bottom_row[40] = "Geri y Andres\0";
	int fileCounter = 0;

	LCD_cursor (0,1);						// fija el cursor del LCD en la fila inferior
	LCD_text (text_bottom_row);
	LCD_cursor_off ();

	MTL_clean();
	char buffer[50];
	int readFile = 0;
	char ch;

	readBMPFile(readFile);


	while(1)
	{
		*(red_LED_ptr) = *(slider_switch_ptr);

		// RELOJ

		/*num27d((int)hour/10,hour%10,(int)min/10,min%10,(int)sec/10,sec%10);

		char text_top_row[40] = "Hora: ";
		char hStr[10];
		if(hour < 10) sprintf(hStr, "0%d", hour);
		else sprintf(hStr, "%d", hour);

		char mStr[10];
		if(min < 10) sprintf(mStr, "0%d", min);
		else sprintf(mStr, "%d", min);

		char sStr[10];
		if(sec < 10) sprintf(sStr, "0%d", sec);
		else sprintf(sStr, "%d", sec);

		strcat(text_top_row, hStr);
		strcat(text_top_row, ":");
		strcat(text_top_row, mStr);
		strcat(text_top_row, ":");
		strcat(text_top_row, sStr);
		strcat(text_top_row, "\0");
		LCD_cursor (0,0);
		LCD_text (text_top_row);
		LCD_cursor_off ();

		// TELEPRONTER

		if(readFile == 0) {
			MTL_clean();
			char news[22];
			sprintf(news, "/mnt/rozipfs/new0%d.txt", fileCounter);
			fp = fopen(news, "r");
			fileCounter++;
			if (fileCounter == 3) fileCounter = 0;
			readFile = 1;
		}

		if(linea == 1){
			linea = 0;
			MTL_scroll();
			if(fp){
				for (int i = 0; i< 50 ; i++) buffer[i] = ' ';
				for (int i = 0 ; i < 50; i++){
					ch = getc(fp);
					if(ch != EOF) {
						if(ch != '\n') buffer[i] = ch;
						else {
							MTL_text(0,29,buffer);
							break;
						}
					}
					else {
						readFile = 0;
						MTL_text(0,29, buffer);
						fclose(fp);
						break;
					}
				}
				MTL_text(0,29, buffer);
			}
		}*/
	}
}

/****************************************************************************************
 * Subrutina para mover el cursor del LCD
****************************************************************************************/
void LCD_cursor(int x, int y)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// 16x2 character display
	char instruction;

	instruction = x;
	if (y != 0) instruction |= 0x40;			// activar el bit 6 para la fila inferior
	instruction |= 0x80;						// hay que activar el bit 7 para indicar el lugar
	*(LCD_display_ptr) = instruction;			// escribe registro de instrucciones del LCD
}

/****************************************************************************************
 * Subrutina para enviar una cadena de texto al LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// 16x2 character display

	while ( *(text_ptr) )
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// escribe los datos en el LCD
		++text_ptr;
	}
}

/****************************************************************************************
 * Subrutina para apagar el cursor del LCD
****************************************************************************************/
void LCD_cursor_off(void)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_BASE;	// 16x2 character display
	*(LCD_display_ptr) = 0x0C;										// desactiva el curso del LCD
}

/****************************************************************************************
 * Subrutina para enviar una cadena de texto a la pantalla MTL
****************************************************************************************/
void MTL_text(int x, int y, char * text_ptr)
{
	int offset;
  	volatile char * character_buffer = (char *)  MTL_CHAR_BUFFER_AVALON_CHAR_BUFFER_SLAVE_BASE;	// MTL character buffer

  	/* asume que la cadena de texto comienza en la primera fila */
	offset = (y << 6) + x;
	while ( *(text_ptr) )
	{
		*(character_buffer + offset) = *(text_ptr);	// escribe en el buffer
		++text_ptr;
		++offset;
	}
}

/****************************************************************************************
 * Subrutina para leer buffer
****************************************************************************************/
void MTL_scroll()
{
	int offset_new;
	int offset_old;
	volatile char * character_buffer = (char *)  MTL_CHAR_BUFFER_AVALON_CHAR_BUFFER_SLAVE_BASE;	// MTL character buffer

	for(int y = 1; y <= 30 ; y++){
		for(int x = 0 ; x < 50 ; x++){
			offset_old = (y << 6) + x;
			offset_new = ((y-2) << 6) + x;
			*(character_buffer + offset_new) = *(character_buffer + offset_old);
		}
	}
}

/****************************************************************************************
 * Subrutina para limpiar pantalla
****************************************************************************************/
void MTL_clean()
{
	alt_up_char_buffer_dev *char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/mtl_char_buffer");
	alt_up_pixel_buffer_dma_dev* pixel_buffer_dev_MTL = alt_up_pixel_buffer_dma_open_dev("/dev/mtl_pixel_buffer_dma");
	alt_up_char_buffer_clear(char_buffer_dev);
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev_MTL,0);
}

/****************************************************************************************
 * Dibujar un rectangulo en la pantalla MTL
****************************************************************************************/
void MTL_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	int offset, row, col;
	int SRAM_BASE_SIN_CACHE = (SRAM_BASE + 0x080000000);  //Activando el bit más significativo se elude la cache de datos
  	volatile short * pixel_buffer = (short *) SRAM_BASE_SIN_CACHE;	// MTL pixel buffer

  	/* se asume que las coordenadas del rectangulo son correctas */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
		{
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	//procesa mitad direcciones
			++col;
		}
	}
}
/****************************************************************************************
 * Leer imagen y escribirla en la SRAM
****************************************************************************************/
void readBMPFile(int x)
{
	int offset, row, col;
	int SRAM_BASE_SIN_CACHE = (SRAM_BASE + 0x0100000 + 0x080000000);  //Activando el bit más significativo se elude la cache de datos
  	volatile short * pixel_buffer = (short *) SRAM_BASE_SIN_CACHE;	// MTL pixel buffer
  	printf("Read File");
  	char file[22];

  	sprintf(file, "/mnt/rozipfs/imagen0%d.bmp", x);

  	fp = fopen(file, "r");

  	/* se asume que las coordenadas del rectangulo son correctas */
	/*for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
		{
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	//procesa mitad direcciones
			++col;
		}
	}*/

  	fclose(fp);
}


