#include "key_codes.h" 	// define los valores de KEY1, KEY2, KEY3
#include "system.h"
#include "sys/alt_irq.h"

extern volatile int image;

void pushbutton_ISR( )
{
	volatile int * KEY_ptr = (int *) PUSHBUTTONS_BASE;
	int press;

	press = *(KEY_ptr + 3);					// lee el registro de los pulsadores
	*(KEY_ptr + 3) = 0; 					// borra la interrupción

	if (press & 0x2)				// KEY1
		printf("KEY1");
	else if (press & 0x4)				// KEY2
		printf("KEY2");
	else if (press & 0x8)					// KEY3
		printf("KEY3");

	return;
}

void readBMPFile(int x)
{
	FILE *fp;
	int offset, row, col;
	int SRAM_BASE_SIN_CACHE = (SRAM_BASE + 0x0100000 + 0x080000000);  //Activando el bit más significativo se elude la cache de datos
  	volatile short * pixel_buffer = (short *) SRAM_BASE_SIN_CACHE;	// MTL pixel buffer
  	printf("Read File\n");
  	char file[22];

  	sprintf(file, "/mnt/rozipfs/imagen0%d.bmp", x);
  	fp = fopen(file, "rb");
  	if (fp == (FILE *)0){
  	   printf("File opening error ocurred. Exiting program.\n");
  	}
  	int byte;
  	for(int i=0;i<54;i++) byte = getc(fp);  // strip out BMP header
  	for (row = 239; row >= 0; row--) {
  		for (col = 0; col <= 399; col++) {
  			offset = (row << 9) + col;
  			int r = getc(fp) >> 3;
  			int g = getc(fp) >> 2;
  			int b = getc(fp) >> 3;
  			//printf("[%d]\n", byte1 << 9 ||);
  			*(pixel_buffer + offset) = (r << 11 | g << 5 | b);	//procesa mitad direcciones
  		}
  	}

  	fclose(fp);

  	printf("Imagen leida");

}
