
backpropagation_Tecnica2.elf:     file format elf32-littlenios2
backpropagation_Tecnica2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011af8 memsz 0x00011af8 flags r-x
    LOAD off    0x00012b18 vaddr 0x00011b18 paddr 0x00013618 align 2**12
         filesz 0x00001b00 memsz 0x00001b00 flags rw-
    LOAD off    0x00015118 vaddr 0x00015118 paddr 0x00015118 align 2**12
         filesz 0x00000000 memsz 0x0000290c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001141c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b8  00011660  00011660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b00  00011b18  00013618  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000290c  00015118  00015118  00015118  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00017a24  00017a24  00014618  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08800000  08800000  00014618  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014618  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001110  00000000  00000000  00014640  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028bb7  00000000  00000000  00015750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a7fb  00000000  00000000  0003e307  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cee1  00000000  00000000  00048b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002700  00000000  00000000  000559e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000042cb  00000000  00000000  000580e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001898f  00000000  00000000  0005c3af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00074d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a68  00000000  00000000  00074d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007a262  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007a265  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007a268  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007a269  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007a26a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007a26e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007a272  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007a276  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007a27f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007a288  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  0007a291  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000029  00000000  00000000  0007a29f  2**0
                  CONTENTS, READONLY
 30 .jdi          00003a07  00000000  00000000  0007a2c8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005550b  00000000  00000000  0007dccf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011660 l    d  .rodata	00000000 .rodata
00011b18 l    d  .rwdata	00000000 .rwdata
00015118 l    d  .bss	00000000 .bss
00017a24 l    d  .sdram	00000000 .sdram
08800000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../backpropagation_Tecnica2_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0000034c l     F .text	00000058 tanh_component.3633
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00011b18 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001186a l     O .rodata	00000010 zeroes.4404
00006600 l     F .text	000000bc __sbprintf
0001187a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006810 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008340 l     F .text	00000008 __fp_unlock
00008354 l     F .text	0000019c __sinit.part.1
000084f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011f5c l     O .rwdata	00000020 lc_ctype_charset
00011f3c l     O .rwdata	00000020 lc_message_charset
00011f7c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000118a8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ba3c l     F .text	000000fc __sprint_r.part.0
000119dc l     O .rodata	00000010 blanks.4348
000119cc l     O .rodata	00000010 zeroes.4349
0000cfc8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e93c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ec48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ed28 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ee14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000efe8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013608 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f3d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f50c l     F .text	00000034 alt_dev_reg
00012564 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f810 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fa1c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010054 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001053c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000109b0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010af0 l     F .text	0000003c alt_get_errno
00010b2c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015178 g     O .bss	00000004 alt_instruction_exception_handler
0000413c g     F .text	00000018 putchar
0000af8c g     F .text	00000074 _mprec_log10
0000b078 g     F .text	0000008c __any_on
0000d6bc g     F .text	00000054 _isatty_r
000118b4 g     O .rodata	00000028 __mprec_tinytens
0000ef24 g     F .text	0000007c alt_main
00004154 g     F .text	000000c0 _puts_r
00017924 g     O .bss	00000100 alt_irq
0000d710 g     F .text	00000060 _lseek_r
00001518 g     F .text	00000130 sqrt
00013618 g       *ABS*	00000000 __flash_rwdata_start
0000e4c8 g     F .text	00000088 .hidden __eqdf2
00009158 g     F .text	0000005c _gettimeofday_r
00017a24 g       *ABS*	00000000 __alt_heap_start
000040f8 g     F .text	0000003c printf
0000d7d0 g     F .text	0000009c _wcrtomb_r
0000b8fc g     F .text	0000005c __sseek
00008690 g     F .text	00000010 __sinit
00010ed0 g     F .text	00000024 alt_get_cpu_freq
0000d084 g     F .text	00000140 __swbuf_r
000091b4 g     F .text	0000007c _setlocale_r
000084f8 g     F .text	00000068 __sfmoreglue
0000efc4 g     F .text	00000024 __malloc_unlock
00009e84 g     F .text	0000015c memmove
00010148 g     F .text	00000280 perf_print_formatted_report
00008678 g     F .text	00000018 _cleanup
00015118 g     O .bss	00000004 patNum
0000a108 g     F .text	000000a8 _Balloc
0000e550 g     F .text	000000dc .hidden __gtdf2
00010d44 g     F .text	00000024 altera_nios2_gen2_irq_init
000040b8 g     F .text	00000010 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000d660 g     F .text	0000005c _fstat_r
00015134 g     O .bss	00000004 errno
0000b878 g     F .text	00000008 __seofread
00015164 g     O .bss	00000004 alt_argv
0001b5c4 g       *ABS*	00000000 _gp
0001511c g     O .bss	00000004 errThisPat
00015124 g     O .bss	00000004 RMSerror
000123e4 g     O .rwdata	00000180 alt_fd_list
0000073c g     F .text	00000040 WeightChangesH2O
0000086c g     F .text	000000cc WeightChangesH1H2
00004134 g     F .text	00000008 _putchar_r
00010ef4 g     F .text	00000090 alt_find_dev
00009d3c g     F .text	00000148 memcpy
00008348 g     F .text	0000000c _cleanup_r
0000e6ac g     F .text	000000dc .hidden __floatsidf
00010a74 g     F .text	0000007c alt_io_redirect
00002ae0 g     F .text	000000f4 .hidden __ltdf2
00011660 g       *ABS*	00000000 __DTOR_END__
00004214 g     F .text	00000014 puts
000111c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000018d0 g     F .text	00000074 __fpclassifyd
0000aee8 g     F .text	000000a4 __ratio
0000436c g     F .text	00000030 system
0000cfac g     F .text	0000001c __vfiprintf_internal
0000fc14 g     F .text	0000021c altera_avalon_jtag_uart_read
000040c8 g     F .text	00000030 _printf_r
00003ffc g     F .text	00000064 .hidden __udivsi3
0000ec84 g     F .text	000000a4 isatty
00011904 g     O .rodata	000000c8 __mprec_tens
00009230 g     F .text	0000000c __locale_charset
00015150 g     O .bss	00000008 alt_timezone
00011130 g     F .text	00000090 alt_icache_flush
0001514c g     O .bss	00000004 __malloc_top_pad
00010e70 g     F .text	00000040 perf_get_num_starts
000135e0 g     O .rwdata	00000004 __mb_cur_max
00009260 g     F .text	0000000c _localeconv_r
000135cc g     O .rwdata	00000004 LR_H2O
0000a514 g     F .text	0000003c __i2b
00008b14 g     F .text	000004bc __sfvwrite_r
0000b7d0 g     F .text	00000054 _sbrk_r
00000a94 g     F .text	00000128 WeightChangesIH1
00000bbc g     F .text	00000120 WeightUpdatesIH1
0000d770 g     F .text	00000060 _read_r
00013600 g     O .rwdata	00000004 alt_max_fd
0000d354 g     F .text	000000f0 _fclose_r
00008310 g     F .text	00000030 fflush
00015148 g     O .bss	00000004 __malloc_max_sbrked_mem
00003be8 g     F .text	00000110 .hidden __extendsfdf2
0000433c g     F .text	00000030 _system_r
0000194c g     F .text	000008ac .hidden __adddf3
0000112c g     F .text	000000d8 displayResults
000135c8 g     O .rwdata	00000004 LR_IH1
0000ac90 g     F .text	0000010c __b2d
0000df90 g     F .text	00000538 .hidden __umoddi3
0000ee50 g     F .text	000000d4 lseek
000135d4 g     O .rwdata	00000004 __fdlib_version
000151a4 g     O .bss	00000050 hiddenVal2
000135d8 g     O .rwdata	00000004 _global_impure_ptr
000003a4 g     F .text	00000398 calcNet
0000b26c g     F .text	00000564 _realloc_r
00017a24 g       *ABS*	00000000 __bss_end
000108c0 g     F .text	000000f0 alt_iic_isr_register
0000f2d0 g     F .text	00000108 alt_tick
0000da18 g     F .text	00000578 .hidden __udivdi3
0000d5bc g     F .text	00000024 _fputwc_r
000118dc g     O .rodata	00000028 __mprec_bigtens
0000a2f8 g     F .text	00000104 __s2b
0000e788 g     F .text	000000a8 .hidden __floatunsidf
0000a9d0 g     F .text	00000060 __mcmp
000086b0 g     F .text	00000018 __fp_lock_all
00010874 g     F .text	0000004c alt_ic_irq_enabled
0000f234 g     F .text	0000009c alt_alarm_stop
00001204 g     F .text	000000c0 calcOverallError
00015174 g     O .bss	00000004 alt_irq_active
000135d0 g     O .rwdata	00000004 LR_H1H2
000000fc g     F .exceptions	000000d4 alt_irq_handler
000123bc g     O .rwdata	00000028 alt_dev_null
000104f4 g     F .text	00000048 alt_dcache_flush_all
0000a3fc g     F .text	00000068 __hi0bits
0000e62c g     F .text	00000080 .hidden __fixdfsi
00013618 g       *ABS*	00000000 __ram_rwdata_end
000151f4 g     O .bss	00000050 delta_h2
08800000 g       *ABS*	00000000 __alt_mem_onchip_memory
000135f8 g     O .rwdata	00000008 alt_dev_list
0000f414 g     F .text	000000f8 write
0000b104 g     F .text	000000a0 _putc_r
00015244 g     O .bss	00000054 weightsH2O
00011b18 g       *ABS*	00000000 __ram_rodata_end
0000e9a4 g     F .text	000000b0 fstat
00002ae0 g     F .text	000000f4 .hidden __ledf2
00000938 g     F .text	0000015c WeightUpdatesH1H2
0000a748 g     F .text	00000140 __pow5mult
0000bb50 g     F .text	0000145c ___vfiprintf_internal_r
00015140 g     O .bss	00000004 __nlocale_changed
00004060 g     F .text	00000058 .hidden __umodsi3
00017a24 g       *ABS*	00000000 end
0000f750 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00011660 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
000100cc g     F .text	0000007c alt_avalon_timer_sc_init
00003ea0 g     F .text	00000064 .hidden __clzsi2
0000fe30 g     F .text	00000224 altera_avalon_jtag_uart_write
000086a0 g     F .text	00000004 __sfp_lock_acquire
00000fa8 g     F .text	00000184 initData
00009c58 g     F .text	000000e4 memchr
000043ec g     F .text	000021f8 ___vfprintf_internal_r
0000077c g     F .text	000000f0 WeightUpdatesH2O
00008804 g     F .text	00000310 _free_r
00000290 g     F .text	000000bc print_array
0000923c g     F .text	00000010 __locale_mb_cur_max
0001143c g     F .text	00000180 __call_exitprocs
0001513c g     O .bss	00000004 __mlocale_changed
000135e4 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
0001516c g     O .bss	00000004 _alt_tick_rate
000135c4 g     O .rwdata	00000004 numEpochs
00015298 g     O .bss	000000c8 ponderacion1
000115bc g     F .text	00000070 .hidden __floatundidf
00004240 g     F .text	00000064 rand
0000a888 g     F .text	00000148 __lshift
00015170 g     O .bss	00000004 _alt_nticks
0000f024 g     F .text	000000fc read
0000f578 g     F .text	00000074 alt_sys_init
00011324 g     F .text	00000118 __register_exitproc
0000a550 g     F .text	000001f8 __multiply
0000fabc g     F .text	00000068 altera_avalon_jtag_uart_close
00011b18 g       *ABS*	00000000 __ram_rwdata_start
00011660 g       *ABS*	00000000 __ram_rodata_start
0001517c g     O .bss	00000028 __malloc_current_mallinfo
00015360 g     O .bss	000000c8 der_hiddenVal1
0000ad9c g     F .text	0000014c __d2b
00015128 g     O .bss	00000004 outPred
0000f5ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001108c g     F .text	000000a4 alt_get_fd
00000cdc g     F .text	0000003c getRand
0000d23c g     F .text	00000054 _close_r
00010d68 g     F .text	000000bc perf_get_section_time
0001512c g     O .bss	00000004 ponderacion3
000112a8 g     F .text	0000007c memcmp
0000f6ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00017a24 g       *ABS*	00000000 __alt_stack_base
0000f6fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000066bc g     F .text	00000154 __swsetup_r
000021f8 g     F .text	000008e8 .hidden __divdf3
00008560 g     F .text	00000118 __sfp
0000b000 g     F .text	00000078 __copybits
00010e24 g     F .text	0000004c perf_get_total_time
00015428 g     O .bss	00000ff0 weightsH1H2_old
00011fb4 g     O .rwdata	00000408 __malloc_av_
000086ac g     F .text	00000004 __sinit_lock_release
00002bd4 g     F .text	00000718 .hidden __muldf3
0000b824 g     F .text	00000054 __sread
00010f84 g     F .text	00000108 alt_find_file
00010578 g     F .text	000000a4 alt_dev_llist_insert
0000efa0 g     F .text	00000024 __malloc_lock
0000f184 g     F .text	000000b0 sbrk
000082b4 g     F .text	0000005c _fflush_r
0000d290 g     F .text	000000c4 _calloc_r
0000ea54 g     F .text	000001f4 gettimeofday
00015118 g       *ABS*	00000000 __bss_start
00009fe0 g     F .text	00000128 memset
00000d18 g     F .text	00000290 initWeights
000012c4 g     F .text	00000254 main
00015168 g     O .bss	00000004 alt_envp
00015144 g     O .bss	00000004 __malloc_max_total_mem
0000f64c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d1c4 g     F .text	00000018 __swbuf
00004228 g     F .text	00000018 srand
0000b958 g     F .text	00000008 __sclose
00001944 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0000d444 g     F .text	00000014 fclose
00003cf8 g     F .text	000001a8 .hidden __truncdfsf2
00006a10 g     F .text	00001688 _dtoa_r
0000944c g     F .text	0000080c _malloc_r
0000d92c g     F .text	00000030 __ascii_wctomb
0000439c g     F .text	00000050 time
00013604 g     O .rwdata	00000004 alt_errno
00008fd0 g     F .text	000000c4 _fwalk
0000b1a4 g     F .text	000000c8 putc
00003f04 g     F .text	00000084 .hidden __divsi3
000086e0 g     F .text	00000124 _malloc_trim_r
00011660 g       *ABS*	00000000 __CTOR_END__
0000b960 g     F .text	000000dc strcmp
00011660 g       *ABS*	00000000 __flash_rodata_start
00016418 g     O .bss	000000c8 hiddenVal1
00011660 g       *ABS*	00000000 __DTOR_LIST__
0000e4c8 g     F .text	00000088 .hidden __nedf2
0000f540 g     F .text	00000038 alt_irq_init
0000f120 g     F .text	00000064 alt_release_fd
0001171d g     O .rodata	00000100 .hidden __clz_tab
00015138 g     O .bss	00000004 _PathLocale
0001125c g     F .text	00000014 atexit
0000d1dc g     F .text	00000060 _write_r
0000926c g     F .text	00000018 setlocale
000135dc g     O .rwdata	00000004 _impure_ptr
00015160 g     O .bss	00000004 alt_argc
00008098 g     F .text	0000021c __sflush_r
0001067c g     F .text	00000060 _do_dtors
00009258 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000ac2c g     F .text	00000064 __ulp
000086c8 g     F .text	00000018 __fp_unlock_all
000135f0 g     O .rwdata	00000008 alt_fs_list
000164e0 g     O .bss	00000258 weightsIH1
00016738 g     O .bss	00000054 weightsH2O_old
00015130 g     O .bss	00000004 der_outPred
00015158 g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009284 g     F .text	0000000c localeconv
00001648 g     F .text	00000288 __ieee754_sqrt
00010710 g     F .text	00000050 alt_ic_isr_register
00013618 g       *ABS*	00000000 _edata
00017a24 g       *ABS*	00000000 _end
0000d458 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fb24 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000107e8 g     F .text	0000008c alt_ic_irq_disable
0001678c g     O .bss	00000030 trainInputs
0000b880 g     F .text	0000007c __swrite
000135e8 g     O .rwdata	00000004 __malloc_trim_threshold
00010eb0 g     F .text	00000020 alt_get_performance_counter_base
0000924c g     F .text	0000000c __locale_msgcharset
00011270 g     F .text	00000038 exit
00009094 g     F .text	000000c4 _fwalk_reent
0000aa30 g     F .text	000001fc __mdiff
00003f88 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000086a4 g     F .text	00000004 __sfp_lock_release
000167bc g     O .bss	00000010 trainOutput
00000000 g       *ABS*	00000000 __alt_mem_sdram
000167cc g     O .bss	00000050 ponderacion2
0001681c g     O .bss	00000ff0 weightsH1H2
0001162c g     F .text	00000034 _exit
000103c8 g     F .text	0000012c alt_alarm_start
00015120 g     O .bss	00000004 delta_o
0000d9b8 g     F .text	00000060 .hidden __muldi3
00009290 g     F .text	000001bc __smakebuf_r
000042a4 g     F .text	00000098 strlen
00010bf0 g     F .text	00000154 open
0000e550 g     F .text	000000dc .hidden __gedf2
0001780c g     O .bss	00000050 der_hiddenVal2
000135ec g     O .rwdata	00000004 __wctomb
0000bb38 g     F .text	00000018 __sprint_r
000106dc g     F .text	00000034 alt_icache_flush_all
00013614 g     O .rwdata	00000004 alt_priority_mask
0001785c g     O .bss	000000c8 delta_h1
00010760 g     F .text	00000088 alt_ic_irq_enable
000065e4 g     F .text	0000001c __vfprintf_internal
0000d95c g     F .text	0000005c _wctomb_r
000032ec g     F .text	000008fc .hidden __subdf3
0000a464 g     F .text	000000b0 __lo0bits
0001360c g     O .rwdata	00000008 alt_alarm_list
0001061c g     F .text	00000060 _do_ctors
0000d86c g     F .text	000000c0 wcrtomb
0000e86c g     F .text	000000d0 close
0000ed90 g     F .text	00000084 alt_load
0000d5e0 g     F .text	00000080 fputwc
000086a8 g     F .text	00000004 __sinit_lock_acquire
0000a1d8 g     F .text	00000120 __multadd
0000a1b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory+0xf7800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109e4904 	addi	r2,r2,31012
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109e4904 	addi	r2,r2,31012
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory+0xf780012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory+0xf7800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6ed17 	ldw	r2,-25676(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6ed17 	ldw	r2,-25676(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_onchip_memory+0xf7800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ad7114 	ori	gp,gp,46532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10944614 	ori	r2,r2,20760

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18de8914 	ori	r3,r3,31268

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_onchip_memory+0xf7800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000ed900 	call	ed90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000ef240 	call	ef24 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_onchip_memory+0xf780028c>

00000290 <print_array>:

//==============================================================
//************** function definitions **************************
//==============================================================
void print_array(float data[], int n)
{
     290:	defffb04 	addi	sp,sp,-20
     294:	dfc00415 	stw	ra,16(sp)
     298:	df000315 	stw	fp,12(sp)
     29c:	df000304 	addi	fp,sp,12
     2a0:	e13ffe15 	stw	r4,-8(fp)
     2a4:	e17fff15 	stw	r5,-4(fp)
    int i;

    printf("[");
     2a8:	010016c4 	movi	r4,91
     2ac:	000413c0 	call	413c <putchar>
    for (i = 0; i < n; i++)
     2b0:	e03ffd15 	stw	zero,-12(fp)
     2b4:	00001906 	br	31c <print_array+0x8c>
    {

        printf("%f",data[i]);
     2b8:	e0bffd17 	ldw	r2,-12(fp)
     2bc:	1085883a 	add	r2,r2,r2
     2c0:	1085883a 	add	r2,r2,r2
     2c4:	1007883a 	mov	r3,r2
     2c8:	e0bffe17 	ldw	r2,-8(fp)
     2cc:	10c5883a 	add	r2,r2,r3
     2d0:	10c00017 	ldw	r3,0(r2)
     2d4:	1809883a 	mov	r4,r3
     2d8:	0003be80 	call	3be8 <__extendsfdf2>
     2dc:	100d883a 	mov	r6,r2
     2e0:	180f883a 	mov	r7,r3
     2e4:	300b883a 	mov	r5,r6
     2e8:	380d883a 	mov	r6,r7
     2ec:	01000074 	movhi	r4,1
     2f0:	21059804 	addi	r4,r4,5728
     2f4:	00040f80 	call	40f8 <printf>
        if (i != n-1)
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	10ffffc4 	addi	r3,r2,-1
     300:	e0bffd17 	ldw	r2,-12(fp)
     304:	18800226 	beq	r3,r2,310 <print_array+0x80>
        {
            printf(",");
     308:	01000b04 	movi	r4,44
     30c:	000413c0 	call	413c <putchar>
void print_array(float data[], int n)
{
    int i;

    printf("[");
    for (i = 0; i < n; i++)
     310:	e0bffd17 	ldw	r2,-12(fp)
     314:	10800044 	addi	r2,r2,1
     318:	e0bffd15 	stw	r2,-12(fp)
     31c:	e0fffd17 	ldw	r3,-12(fp)
     320:	e0bfff17 	ldw	r2,-4(fp)
     324:	18bfe416 	blt	r3,r2,2b8 <__alt_mem_onchip_memory+0xf78002b8>
        if (i != n-1)
        {
            printf(",");
        }
    }
    printf("]\n");
     328:	01000074 	movhi	r4,1
     32c:	21059904 	addi	r4,r4,5732
     330:	00042140 	call	4214 <puts>
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <tanh_component.3633>:
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh_component
    int i = 0;
    int j =0;

    inline float tanh_component(float x){
     34c:	defffc04 	addi	sp,sp,-16
     350:	df000315 	stw	fp,12(sp)
     354:	df000304 	addi	fp,sp,12
     358:	e13ffe15 	stw	r4,-8(fp)
     35c:	e33fff15 	stw	r12,-4(fp)
    	union conversion auxU;
    	auxU.vFloat = x;
     360:	e0bffe17 	ldw	r2,-8(fp)
     364:	e0bffd15 	stw	r2,-12(fp)
    	IOWR(TANH_0_BASE, 3, auxU.vInt);
     368:	e0fffd17 	ldw	r3,-12(fp)
     36c:	00840034 	movhi	r2,4096
     370:	10844304 	addi	r2,r2,4364
     374:	10c00035 	stwio	r3,0(r2)
    	auxU.vInt = IORD(TANH_0_BASE,0);
     378:	00840034 	movhi	r2,4096
     37c:	10844004 	addi	r2,r2,4352
     380:	10800037 	ldwio	r2,0(r2)
     384:	e0bffd15 	stw	r2,-12(fp)
    	return auxU.vFloat;
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	1007883a 	mov	r3,r2
    }
     390:	1805883a 	mov	r2,r3
     394:	e037883a 	mov	sp,fp
     398:	df000017 	ldw	fp,0(sp)
     39c:	dec00104 	addi	sp,sp,4
     3a0:	f800283a 	ret

000003a4 <calcNet>:
}

//***********************************
// calculates the network output
void calcNet(void)
{
     3a4:	defffc04 	addi	sp,sp,-16
     3a8:	dfc00315 	stw	ra,12(sp)
     3ac:	df000215 	stw	fp,8(sp)
     3b0:	df000204 	addi	fp,sp,8
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh_component
    int i = 0;
     3b4:	e03ffe15 	stw	zero,-8(fp)
    int j =0;
     3b8:	e03fff15 	stw	zero,-4(fp)
    	IOWR(TANH_0_BASE, 3, auxU.vInt);
    	auxU.vInt = IORD(TANH_0_BASE,0);
    	return auxU.vFloat;
    }

    for(i = 0;i<numHidden1;i++)
     3bc:	e03ffe15 	stw	zero,-8(fp)
     3c0:	00005306 	br	510 <calcNet+0x16c>
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];
     3c4:	00800074 	movhi	r2,1
     3c8:	10993804 	addi	r2,r2,25824
     3cc:	e0fffe17 	ldw	r3,-8(fp)
     3d0:	18c01904 	addi	r3,r3,100
     3d4:	18c7883a 	add	r3,r3,r3
     3d8:	18c7883a 	add	r3,r3,r3
     3dc:	10c5883a 	add	r2,r2,r3
     3e0:	11000017 	ldw	r4,0(r2)
     3e4:	00800074 	movhi	r2,1
     3e8:	1094a604 	addi	r2,r2,21144
     3ec:	e0fffe17 	ldw	r3,-8(fp)
     3f0:	18c7883a 	add	r3,r3,r3
     3f4:	18c7883a 	add	r3,r3,r3
     3f8:	10c5883a 	add	r2,r2,r3
     3fc:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numInputs;j++)
     400:	e03fff15 	stw	zero,-4(fp)
     404:	00002906 	br	4ac <calcNet+0x108>
        {

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);
     408:	00800074 	movhi	r2,1
     40c:	1094a604 	addi	r2,r2,21144
     410:	e0fffe17 	ldw	r3,-8(fp)
     414:	18c7883a 	add	r3,r3,r3
     418:	18c7883a 	add	r3,r3,r3
     41c:	10c5883a 	add	r2,r2,r3
     420:	11400017 	ldw	r5,0(r2)
     424:	d126d517 	ldw	r4,-25772(gp)
     428:	00c00074 	movhi	r3,1
     42c:	18d9e304 	addi	r3,r3,26508
     430:	2005883a 	mov	r2,r4
     434:	1085883a 	add	r2,r2,r2
     438:	1105883a 	add	r2,r2,r4
     43c:	e13fff17 	ldw	r4,-4(fp)
     440:	1105883a 	add	r2,r2,r4
     444:	1085883a 	add	r2,r2,r2
     448:	1085883a 	add	r2,r2,r2
     44c:	1885883a 	add	r2,r3,r2
     450:	11000017 	ldw	r4,0(r2)
     454:	00800074 	movhi	r2,1
     458:	10993804 	addi	r2,r2,25824
     45c:	e0ffff17 	ldw	r3,-4(fp)
     460:	19800ca4 	muli	r6,r3,50
     464:	e0fffe17 	ldw	r3,-8(fp)
     468:	30c7883a 	add	r3,r6,r3
     46c:	18c7883a 	add	r3,r3,r3
     470:	18c7883a 	add	r3,r3,r3
     474:	10c7883a 	add	r3,r2,r3
     478:	18800017 	ldw	r2,0(r3)
     47c:	2085ff32 	custom	252,r2,r4,r2
     480:	2889ff72 	custom	253,r4,r5,r2
     484:	00800074 	movhi	r2,1
     488:	1094a604 	addi	r2,r2,21144
     48c:	e0fffe17 	ldw	r3,-8(fp)
     490:	18c7883a 	add	r3,r3,r3
     494:	18c7883a 	add	r3,r3,r3
     498:	10c5883a 	add	r2,r2,r3
     49c:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden1;i++)
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];

        for(j = 0;j<numInputs;j++)
     4a0:	e0bfff17 	ldw	r2,-4(fp)
     4a4:	10800044 	addi	r2,r2,1
     4a8:	e0bfff15 	stw	r2,-4(fp)
     4ac:	e0bfff17 	ldw	r2,-4(fp)
     4b0:	10800090 	cmplti	r2,r2,2
     4b4:	103fd41e 	bne	r2,zero,408 <__alt_mem_onchip_memory+0xf7800408>

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);

        }

			hiddenVal1[i] = tanh_component(ponderacion1[i]);
     4b8:	00800074 	movhi	r2,1
     4bc:	1094a604 	addi	r2,r2,21144
     4c0:	e0fffe17 	ldw	r3,-8(fp)
     4c4:	18c7883a 	add	r3,r3,r3
     4c8:	18c7883a 	add	r3,r3,r3
     4cc:	10c5883a 	add	r2,r2,r3
     4d0:	10c00017 	ldw	r3,0(r2)
     4d4:	e005883a 	mov	r2,fp
     4d8:	1019883a 	mov	r12,r2
     4dc:	1809883a 	mov	r4,r3
     4e0:	000034c0 	call	34c <tanh_component.3633>
     4e4:	1009883a 	mov	r4,r2
     4e8:	00800074 	movhi	r2,1
     4ec:	10990604 	addi	r2,r2,25624
     4f0:	e0fffe17 	ldw	r3,-8(fp)
     4f4:	18c7883a 	add	r3,r3,r3
     4f8:	18c7883a 	add	r3,r3,r3
     4fc:	10c5883a 	add	r2,r2,r3
     500:	11000015 	stw	r4,0(r2)
    	IOWR(TANH_0_BASE, 3, auxU.vInt);
    	auxU.vInt = IORD(TANH_0_BASE,0);
    	return auxU.vFloat;
    }

    for(i = 0;i<numHidden1;i++)
     504:	e0bffe17 	ldw	r2,-8(fp)
     508:	10800044 	addi	r2,r2,1
     50c:	e0bffe15 	stw	r2,-8(fp)
     510:	e0bffe17 	ldw	r2,-8(fp)
     514:	10800c90 	cmplti	r2,r2,50
     518:	103faa1e 	bne	r2,zero,3c4 <__alt_mem_onchip_memory+0xf78003c4>
			hiddenVal1[i] = tanh_component(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     51c:	e03ffe15 	stw	zero,-8(fp)
     520:	00004e06 	br	65c <calcNet+0x2b8>
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];
     524:	00800074 	movhi	r2,1
     528:	109a0704 	addi	r2,r2,26652
     52c:	e0fffe17 	ldw	r3,-8(fp)
     530:	18c0fa04 	addi	r3,r3,1000
     534:	18c7883a 	add	r3,r3,r3
     538:	18c7883a 	add	r3,r3,r3
     53c:	10c5883a 	add	r2,r2,r3
     540:	11000017 	ldw	r4,0(r2)
     544:	00800074 	movhi	r2,1
     548:	1099f304 	addi	r2,r2,26572
     54c:	e0fffe17 	ldw	r3,-8(fp)
     550:	18c7883a 	add	r3,r3,r3
     554:	18c7883a 	add	r3,r3,r3
     558:	10c5883a 	add	r2,r2,r3
     55c:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numHidden1;j++)
     560:	e03fff15 	stw	zero,-4(fp)
     564:	00002406 	br	5f8 <calcNet+0x254>
        {

        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);
     568:	00800074 	movhi	r2,1
     56c:	1099f304 	addi	r2,r2,26572
     570:	e0fffe17 	ldw	r3,-8(fp)
     574:	18c7883a 	add	r3,r3,r3
     578:	18c7883a 	add	r3,r3,r3
     57c:	10c5883a 	add	r2,r2,r3
     580:	11000017 	ldw	r4,0(r2)
     584:	00800074 	movhi	r2,1
     588:	10990604 	addi	r2,r2,25624
     58c:	e0ffff17 	ldw	r3,-4(fp)
     590:	18c7883a 	add	r3,r3,r3
     594:	18c7883a 	add	r3,r3,r3
     598:	10c5883a 	add	r2,r2,r3
     59c:	11400017 	ldw	r5,0(r2)
     5a0:	00800074 	movhi	r2,1
     5a4:	109a0704 	addi	r2,r2,26652
     5a8:	e0ffff17 	ldw	r3,-4(fp)
     5ac:	19800524 	muli	r6,r3,20
     5b0:	e0fffe17 	ldw	r3,-8(fp)
     5b4:	30c7883a 	add	r3,r6,r3
     5b8:	18c7883a 	add	r3,r3,r3
     5bc:	18c7883a 	add	r3,r3,r3
     5c0:	10c7883a 	add	r3,r2,r3
     5c4:	18800017 	ldw	r2,0(r3)
     5c8:	2885ff32 	custom	252,r2,r5,r2
     5cc:	2089ff72 	custom	253,r4,r4,r2
     5d0:	00800074 	movhi	r2,1
     5d4:	1099f304 	addi	r2,r2,26572
     5d8:	e0fffe17 	ldw	r3,-8(fp)
     5dc:	18c7883a 	add	r3,r3,r3
     5e0:	18c7883a 	add	r3,r3,r3
     5e4:	10c5883a 	add	r2,r2,r3
     5e8:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden2;i++)
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];

        for(j = 0;j<numHidden1;j++)
     5ec:	e0bfff17 	ldw	r2,-4(fp)
     5f0:	10800044 	addi	r2,r2,1
     5f4:	e0bfff15 	stw	r2,-4(fp)
     5f8:	e0bfff17 	ldw	r2,-4(fp)
     5fc:	10800c90 	cmplti	r2,r2,50
     600:	103fd91e 	bne	r2,zero,568 <__alt_mem_onchip_memory+0xf7800568>
        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);

        }


			hiddenVal2[i] = tanh_component(ponderacion2[i]);
     604:	00800074 	movhi	r2,1
     608:	1099f304 	addi	r2,r2,26572
     60c:	e0fffe17 	ldw	r3,-8(fp)
     610:	18c7883a 	add	r3,r3,r3
     614:	18c7883a 	add	r3,r3,r3
     618:	10c5883a 	add	r2,r2,r3
     61c:	10c00017 	ldw	r3,0(r2)
     620:	e005883a 	mov	r2,fp
     624:	1019883a 	mov	r12,r2
     628:	1809883a 	mov	r4,r3
     62c:	000034c0 	call	34c <tanh_component.3633>
     630:	1009883a 	mov	r4,r2
     634:	00800074 	movhi	r2,1
     638:	10946904 	addi	r2,r2,20900
     63c:	e0fffe17 	ldw	r3,-8(fp)
     640:	18c7883a 	add	r3,r3,r3
     644:	18c7883a 	add	r3,r3,r3
     648:	10c5883a 	add	r2,r2,r3
     64c:	11000015 	stw	r4,0(r2)
			hiddenVal1[i] = tanh_component(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     650:	e0bffe17 	ldw	r2,-8(fp)
     654:	10800044 	addi	r2,r2,1
     658:	e0bffe15 	stw	r2,-8(fp)
     65c:	e0bffe17 	ldw	r2,-8(fp)
     660:	10800510 	cmplti	r2,r2,20
     664:	103faf1e 	bne	r2,zero,524 <__alt_mem_onchip_memory+0xf7800524>

    }
   //calculate the output of the network
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];
     668:	00800074 	movhi	r2,1
     66c:	10949104 	addi	r2,r2,21060
     670:	10c01417 	ldw	r3,80(r2)
     674:	d0e6da15 	stw	r3,-25752(gp)


   for(i = 0;i<numHidden2;i++)
     678:	e03ffe15 	stw	zero,-8(fp)
     67c:	00001506 	br	6d4 <calcNet+0x330>
   {

    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];
     680:	00800074 	movhi	r2,1
     684:	10946904 	addi	r2,r2,20900
     688:	e0fffe17 	ldw	r3,-8(fp)
     68c:	18c7883a 	add	r3,r3,r3
     690:	18c7883a 	add	r3,r3,r3
     694:	10c5883a 	add	r2,r2,r3
     698:	11000017 	ldw	r4,0(r2)
     69c:	00800074 	movhi	r2,1
     6a0:	10949104 	addi	r2,r2,21060
     6a4:	e0fffe17 	ldw	r3,-8(fp)
     6a8:	18c7883a 	add	r3,r3,r3
     6ac:	18c7883a 	add	r3,r3,r3
     6b0:	10c7883a 	add	r3,r2,r3
     6b4:	18800017 	ldw	r2,0(r3)
     6b8:	2087ff32 	custom	252,r3,r4,r2
     6bc:	d0a6da17 	ldw	r2,-25752(gp)
     6c0:	1885ff72 	custom	253,r2,r3,r2
     6c4:	d0a6da15 	stw	r2,-25752(gp)
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];


   for(i = 0;i<numHidden2;i++)
     6c8:	e0bffe17 	ldw	r2,-8(fp)
     6cc:	10800044 	addi	r2,r2,1
     6d0:	e0bffe15 	stw	r2,-8(fp)
     6d4:	e0bffe17 	ldw	r2,-8(fp)
     6d8:	10800510 	cmplti	r2,r2,20
     6dc:	103fe81e 	bne	r2,zero,680 <__alt_mem_onchip_memory+0xf7800680>
    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];

   }


        outPred  = tanh_component(ponderacion3);
     6e0:	d0a6da17 	ldw	r2,-25752(gp)
     6e4:	e007883a 	mov	r3,fp
     6e8:	1819883a 	mov	r12,r3
     6ec:	1009883a 	mov	r4,r2
     6f0:	000034c0 	call	34c <tanh_component.3633>
     6f4:	1007883a 	mov	r3,r2
     6f8:	d0e6d915 	stw	r3,-25756(gp)

    //calculate the error
    errThisPat = trainOutput[patNum]-outPred;
     6fc:	d0e6d517 	ldw	r3,-25772(gp)
     700:	00800074 	movhi	r2,1
     704:	1099ef04 	addi	r2,r2,26556
     708:	18c7883a 	add	r3,r3,r3
     70c:	18c7883a 	add	r3,r3,r3
     710:	10c5883a 	add	r2,r2,r3
     714:	10c00017 	ldw	r3,0(r2)
     718:	d0a6d917 	ldw	r2,-25756(gp)
     71c:	1885ffb2 	custom	254,r2,r3,r2
     720:	d0a6d615 	stw	r2,-25768(gp)

}
     724:	0001883a 	nop
     728:	e037883a 	mov	sp,fp
     72c:	dfc00117 	ldw	ra,4(sp)
     730:	df000017 	ldw	fp,0(sp)
     734:	dec00204 	addi	sp,sp,8
     738:	f800283a 	ret

0000073c <WeightChangesH2O>:


//************************************
//adjust the weights hidden-output
void WeightChangesH2O(void)
{
     73c:	deffff04 	addi	sp,sp,-4
     740:	df000015 	stw	fp,0(sp)
     744:	d839883a 	mov	fp,sp


		delta_o = (1 - (outPred * outPred))* errThisPat;
     748:	d0e6d917 	ldw	r3,-25756(gp)
     74c:	d0a6d917 	ldw	r2,-25756(gp)
     750:	1885ff32 	custom	252,r2,r3,r2
     754:	00cfe034 	movhi	r3,16256
     758:	1887ffb2 	custom	254,r3,r3,r2
     75c:	d0a6d617 	ldw	r2,-25768(gp)
     760:	1885ff32 	custom	252,r2,r3,r2
     764:	d0a6d715 	stw	r2,-25764(gp)


 }
     768:	0001883a 	nop
     76c:	e037883a 	mov	sp,fp
     770:	df000017 	ldw	fp,0(sp)
     774:	dec00104 	addi	sp,sp,4
     778:	f800283a 	ret

0000077c <WeightUpdatesH2O>:

//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
     77c:	defffd04 	addi	sp,sp,-12
     780:	df000215 	stw	fp,8(sp)
     784:	df000204 	addi	fp,sp,8
    int k=0;
     788:	e03ffe15 	stw	zero,-8(fp)
   for(k = 0;k<numHidden2+1;k++)
     78c:	e03ffe15 	stw	zero,-8(fp)
     790:	00002e06 	br	84c <WeightUpdatesH2O+0xd0>
   {
    float weightChange =delta_o * LR_H2O * hiddenVal2[k];
     794:	d0e6d717 	ldw	r3,-25764(gp)
     798:	008f7374 	movhi	r2,15821
     79c:	10b33344 	addi	r2,r2,-13107
     7a0:	1889ff32 	custom	252,r4,r3,r2
     7a4:	00800074 	movhi	r2,1
     7a8:	10946904 	addi	r2,r2,20900
     7ac:	e0fffe17 	ldw	r3,-8(fp)
     7b0:	18c7883a 	add	r3,r3,r3
     7b4:	18c7883a 	add	r3,r3,r3
     7b8:	10c7883a 	add	r3,r2,r3
     7bc:	18800017 	ldw	r2,0(r3)
     7c0:	2085ff32 	custom	252,r2,r4,r2
     7c4:	e0bfff15 	stw	r2,-4(fp)

    weightsH2O_old[k] = weightsH2O[k] ;
     7c8:	00800074 	movhi	r2,1
     7cc:	10949104 	addi	r2,r2,21060
     7d0:	e0fffe17 	ldw	r3,-8(fp)
     7d4:	18c7883a 	add	r3,r3,r3
     7d8:	18c7883a 	add	r3,r3,r3
     7dc:	10c5883a 	add	r2,r2,r3
     7e0:	11000017 	ldw	r4,0(r2)
     7e4:	00800074 	movhi	r2,1
     7e8:	1099ce04 	addi	r2,r2,26424
     7ec:	e0fffe17 	ldw	r3,-8(fp)
     7f0:	18c7883a 	add	r3,r3,r3
     7f4:	18c7883a 	add	r3,r3,r3
     7f8:	10c5883a 	add	r2,r2,r3
     7fc:	11000015 	stw	r4,0(r2)
    weightsH2O[k] = weightsH2O[k] + weightChange;
     800:	00800074 	movhi	r2,1
     804:	10949104 	addi	r2,r2,21060
     808:	e0fffe17 	ldw	r3,-8(fp)
     80c:	18c7883a 	add	r3,r3,r3
     810:	18c7883a 	add	r3,r3,r3
     814:	10c5883a 	add	r2,r2,r3
     818:	10c00017 	ldw	r3,0(r2)
     81c:	e0bfff17 	ldw	r2,-4(fp)
     820:	1889ff72 	custom	253,r4,r3,r2
     824:	00800074 	movhi	r2,1
     828:	10949104 	addi	r2,r2,21060
     82c:	e0fffe17 	ldw	r3,-8(fp)
     830:	18c7883a 	add	r3,r3,r3
     834:	18c7883a 	add	r3,r3,r3
     838:	10c5883a 	add	r2,r2,r3
     83c:	11000015 	stw	r4,0(r2)
//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
    int k=0;
   for(k = 0;k<numHidden2+1;k++)
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	10800044 	addi	r2,r2,1
     848:	e0bffe15 	stw	r2,-8(fp)
     84c:	e0bffe17 	ldw	r2,-8(fp)
     850:	10800550 	cmplti	r2,r2,21
     854:	103fcf1e 	bne	r2,zero,794 <__alt_mem_onchip_memory+0xf7800794>
    weightsH2O_old[k] = weightsH2O[k] ;
    weightsH2O[k] = weightsH2O[k] + weightChange;

   }

 }
     858:	0001883a 	nop
     85c:	e037883a 	mov	sp,fp
     860:	df000017 	ldw	fp,0(sp)
     864:	dec00104 	addi	sp,sp,4
     868:	f800283a 	ret

0000086c <WeightChangesH1H2>:

//************************************
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{
     86c:	defffe04 	addi	sp,sp,-8
     870:	df000115 	stw	fp,4(sp)
     874:	df000104 	addi	fp,sp,4

  int i=0;
     878:	e03fff15 	stw	zero,-4(fp)
  for(i = 0;i<numHidden2;i++)
     87c:	e03fff15 	stw	zero,-4(fp)
     880:	00002506 	br	918 <WeightChangesH1H2+0xac>
  {

		delta_h2[i] = (1 - (hiddenVal2[i] * hiddenVal2[i]))* delta_o* weightsH2O_old[i];
     884:	00800074 	movhi	r2,1
     888:	10946904 	addi	r2,r2,20900
     88c:	e0ffff17 	ldw	r3,-4(fp)
     890:	18c7883a 	add	r3,r3,r3
     894:	18c7883a 	add	r3,r3,r3
     898:	10c5883a 	add	r2,r2,r3
     89c:	11000017 	ldw	r4,0(r2)
     8a0:	00800074 	movhi	r2,1
     8a4:	10946904 	addi	r2,r2,20900
     8a8:	e0ffff17 	ldw	r3,-4(fp)
     8ac:	18c7883a 	add	r3,r3,r3
     8b0:	18c7883a 	add	r3,r3,r3
     8b4:	10c7883a 	add	r3,r2,r3
     8b8:	18800017 	ldw	r2,0(r3)
     8bc:	2085ff32 	custom	252,r2,r4,r2
     8c0:	00cfe034 	movhi	r3,16256
     8c4:	1887ffb2 	custom	254,r3,r3,r2
     8c8:	d0a6d717 	ldw	r2,-25764(gp)
     8cc:	1889ff32 	custom	252,r4,r3,r2
     8d0:	00800074 	movhi	r2,1
     8d4:	1099ce04 	addi	r2,r2,26424
     8d8:	e0ffff17 	ldw	r3,-4(fp)
     8dc:	18c7883a 	add	r3,r3,r3
     8e0:	18c7883a 	add	r3,r3,r3
     8e4:	10c7883a 	add	r3,r2,r3
     8e8:	18800017 	ldw	r2,0(r3)
     8ec:	2089ff32 	custom	252,r4,r4,r2
     8f0:	00800074 	movhi	r2,1
     8f4:	10947d04 	addi	r2,r2,20980
     8f8:	e0ffff17 	ldw	r3,-4(fp)
     8fc:	18c7883a 	add	r3,r3,r3
     900:	18c7883a 	add	r3,r3,r3
     904:	10c5883a 	add	r2,r2,r3
     908:	11000015 	stw	r4,0(r2)
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     90c:	e0bfff17 	ldw	r2,-4(fp)
     910:	10800044 	addi	r2,r2,1
     914:	e0bfff15 	stw	r2,-4(fp)
     918:	e0bfff17 	ldw	r2,-4(fp)
     91c:	10800510 	cmplti	r2,r2,20
     920:	103fd81e 	bne	r2,zero,884 <__alt_mem_onchip_memory+0xf7800884>



  }

}
     924:	0001883a 	nop
     928:	e037883a 	mov	sp,fp
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00104 	addi	sp,sp,4
     934:	f800283a 	ret

00000938 <WeightUpdatesH1H2>:

//************************************
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{
     938:	defffc04 	addi	sp,sp,-16
     93c:	df000315 	stw	fp,12(sp)
     940:	df000304 	addi	fp,sp,12

  int i=0;
     944:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden2;i++)
     948:	e03ffd15 	stw	zero,-12(fp)
     94c:	00004906 	br	a74 <WeightUpdatesH1H2+0x13c>
  {
   int k=0;
     950:	e03ffe15 	stw	zero,-8(fp)
   for( k = 0;k<numHidden1+1;k++)
     954:	e03ffe15 	stw	zero,-8(fp)
     958:	00004006 	br	a5c <WeightUpdatesH1H2+0x124>
   {
    float weightChange = delta_h2[i] * LR_H1H2 * hiddenVal1[k];
     95c:	00800074 	movhi	r2,1
     960:	10947d04 	addi	r2,r2,20980
     964:	e0fffd17 	ldw	r3,-12(fp)
     968:	18c7883a 	add	r3,r3,r3
     96c:	18c7883a 	add	r3,r3,r3
     970:	10c5883a 	add	r2,r2,r3
     974:	10c00017 	ldw	r3,0(r2)
     978:	008f7374 	movhi	r2,15821
     97c:	10b33344 	addi	r2,r2,-13107
     980:	1889ff32 	custom	252,r4,r3,r2
     984:	00800074 	movhi	r2,1
     988:	10990604 	addi	r2,r2,25624
     98c:	e0fffe17 	ldw	r3,-8(fp)
     990:	18c7883a 	add	r3,r3,r3
     994:	18c7883a 	add	r3,r3,r3
     998:	10c7883a 	add	r3,r2,r3
     99c:	18800017 	ldw	r2,0(r3)
     9a0:	2085ff32 	custom	252,r2,r4,r2
     9a4:	e0bfff15 	stw	r2,-4(fp)

   weightsH1H2_old[k][i] = weightsH1H2[k][i];
     9a8:	00800074 	movhi	r2,1
     9ac:	109a0704 	addi	r2,r2,26652
     9b0:	e0fffe17 	ldw	r3,-8(fp)
     9b4:	19000524 	muli	r4,r3,20
     9b8:	e0fffd17 	ldw	r3,-12(fp)
     9bc:	20c7883a 	add	r3,r4,r3
     9c0:	18c7883a 	add	r3,r3,r3
     9c4:	18c7883a 	add	r3,r3,r3
     9c8:	10c5883a 	add	r2,r2,r3
     9cc:	11000017 	ldw	r4,0(r2)
     9d0:	00800074 	movhi	r2,1
     9d4:	10950a04 	addi	r2,r2,21544
     9d8:	e0fffe17 	ldw	r3,-8(fp)
     9dc:	19400524 	muli	r5,r3,20
     9e0:	e0fffd17 	ldw	r3,-12(fp)
     9e4:	28c7883a 	add	r3,r5,r3
     9e8:	18c7883a 	add	r3,r3,r3
     9ec:	18c7883a 	add	r3,r3,r3
     9f0:	10c5883a 	add	r2,r2,r3
     9f4:	11000015 	stw	r4,0(r2)
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;
     9f8:	00800074 	movhi	r2,1
     9fc:	109a0704 	addi	r2,r2,26652
     a00:	e0fffe17 	ldw	r3,-8(fp)
     a04:	19000524 	muli	r4,r3,20
     a08:	e0fffd17 	ldw	r3,-12(fp)
     a0c:	20c7883a 	add	r3,r4,r3
     a10:	18c7883a 	add	r3,r3,r3
     a14:	18c7883a 	add	r3,r3,r3
     a18:	10c5883a 	add	r2,r2,r3
     a1c:	10c00017 	ldw	r3,0(r2)
     a20:	e0bfff17 	ldw	r2,-4(fp)
     a24:	1889ff72 	custom	253,r4,r3,r2
     a28:	00800074 	movhi	r2,1
     a2c:	109a0704 	addi	r2,r2,26652
     a30:	e0fffe17 	ldw	r3,-8(fp)
     a34:	19400524 	muli	r5,r3,20
     a38:	e0fffd17 	ldw	r3,-12(fp)
     a3c:	28c7883a 	add	r3,r5,r3
     a40:	18c7883a 	add	r3,r3,r3
     a44:	18c7883a 	add	r3,r3,r3
     a48:	10c5883a 	add	r2,r2,r3
     a4c:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden2;i++)
  {
   int k=0;
   for( k = 0;k<numHidden1+1;k++)
     a50:	e0bffe17 	ldw	r2,-8(fp)
     a54:	10800044 	addi	r2,r2,1
     a58:	e0bffe15 	stw	r2,-8(fp)
     a5c:	e0bffe17 	ldw	r2,-8(fp)
     a60:	10800cd0 	cmplti	r2,r2,51
     a64:	103fbd1e 	bne	r2,zero,95c <__alt_mem_onchip_memory+0xf780095c>
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     a68:	e0bffd17 	ldw	r2,-12(fp)
     a6c:	10800044 	addi	r2,r2,1
     a70:	e0bffd15 	stw	r2,-12(fp)
     a74:	e0bffd17 	ldw	r2,-12(fp)
     a78:	10800510 	cmplti	r2,r2,20
     a7c:	103fb41e 	bne	r2,zero,950 <__alt_mem_onchip_memory+0xf7800950>
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;

   }
  }

}
     a80:	0001883a 	nop
     a84:	e037883a 	mov	sp,fp
     a88:	df000017 	ldw	fp,0(sp)
     a8c:	dec00104 	addi	sp,sp,4
     a90:	f800283a 	ret

00000a94 <WeightChangesIH1>:
//************************************
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{
     a94:	defffc04 	addi	sp,sp,-16
     a98:	df000315 	stw	fp,12(sp)
     a9c:	df000304 	addi	fp,sp,12

  int i=0;
     aa0:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     aa4:	e03ffd15 	stw	zero,-12(fp)
     aa8:	00003c06 	br	b9c <WeightChangesIH1+0x108>
  {

    int j=0;
     aac:	e03ffe15 	stw	zero,-8(fp)
    float sum_delta=0.0;
     ab0:	e03fff15 	stw	zero,-4(fp)
    for ( j = 0;j<numHidden2;j++)
     ab4:	e03ffe15 	stw	zero,-8(fp)
     ab8:	00001806 	br	b1c <WeightChangesIH1+0x88>
    {

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];
     abc:	00800074 	movhi	r2,1
     ac0:	10947d04 	addi	r2,r2,20980
     ac4:	e0fffe17 	ldw	r3,-8(fp)
     ac8:	18c7883a 	add	r3,r3,r3
     acc:	18c7883a 	add	r3,r3,r3
     ad0:	10c5883a 	add	r2,r2,r3
     ad4:	11000017 	ldw	r4,0(r2)
     ad8:	00800074 	movhi	r2,1
     adc:	10950a04 	addi	r2,r2,21544
     ae0:	e0fffd17 	ldw	r3,-12(fp)
     ae4:	19400524 	muli	r5,r3,20
     ae8:	e0fffe17 	ldw	r3,-8(fp)
     aec:	28c7883a 	add	r3,r5,r3
     af0:	18c7883a 	add	r3,r3,r3
     af4:	18c7883a 	add	r3,r3,r3
     af8:	10c7883a 	add	r3,r2,r3
     afc:	18800017 	ldw	r2,0(r3)
     b00:	2085ff32 	custom	252,r2,r4,r2
     b04:	e0ffff17 	ldw	r3,-4(fp)
     b08:	1885ff72 	custom	253,r2,r3,r2
     b0c:	e0bfff15 	stw	r2,-4(fp)
  for(i = 0;i<numHidden1;i++)
  {

    int j=0;
    float sum_delta=0.0;
    for ( j = 0;j<numHidden2;j++)
     b10:	e0bffe17 	ldw	r2,-8(fp)
     b14:	10800044 	addi	r2,r2,1
     b18:	e0bffe15 	stw	r2,-8(fp)
     b1c:	e0bffe17 	ldw	r2,-8(fp)
     b20:	10800510 	cmplti	r2,r2,20
     b24:	103fe51e 	bne	r2,zero,abc <__alt_mem_onchip_memory+0xf7800abc>

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];

    }

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;
     b28:	00800074 	movhi	r2,1
     b2c:	10990604 	addi	r2,r2,25624
     b30:	e0fffd17 	ldw	r3,-12(fp)
     b34:	18c7883a 	add	r3,r3,r3
     b38:	18c7883a 	add	r3,r3,r3
     b3c:	10c5883a 	add	r2,r2,r3
     b40:	11000017 	ldw	r4,0(r2)
     b44:	00800074 	movhi	r2,1
     b48:	10990604 	addi	r2,r2,25624
     b4c:	e0fffd17 	ldw	r3,-12(fp)
     b50:	18c7883a 	add	r3,r3,r3
     b54:	18c7883a 	add	r3,r3,r3
     b58:	10c7883a 	add	r3,r2,r3
     b5c:	18800017 	ldw	r2,0(r3)
     b60:	2085ff32 	custom	252,r2,r4,r2
     b64:	00cfe034 	movhi	r3,16256
     b68:	1887ffb2 	custom	254,r3,r3,r2
     b6c:	e0bfff17 	ldw	r2,-4(fp)
     b70:	1889ff32 	custom	252,r4,r3,r2
     b74:	00800074 	movhi	r2,1
     b78:	109e1704 	addi	r2,r2,30812
     b7c:	e0fffd17 	ldw	r3,-12(fp)
     b80:	18c7883a 	add	r3,r3,r3
     b84:	18c7883a 	add	r3,r3,r3
     b88:	10c5883a 	add	r2,r2,r3
     b8c:	11000015 	stw	r4,0(r2)
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     b90:	e0bffd17 	ldw	r2,-12(fp)
     b94:	10800044 	addi	r2,r2,1
     b98:	e0bffd15 	stw	r2,-12(fp)
     b9c:	e0bffd17 	ldw	r2,-12(fp)
     ba0:	10800c90 	cmplti	r2,r2,50
     ba4:	103fc11e 	bne	r2,zero,aac <__alt_mem_onchip_memory+0xf7800aac>

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;

  }

}
     ba8:	0001883a 	nop
     bac:	e037883a 	mov	sp,fp
     bb0:	df000017 	ldw	fp,0(sp)
     bb4:	dec00104 	addi	sp,sp,4
     bb8:	f800283a 	ret

00000bbc <WeightUpdatesIH1>:

//************************************
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{
     bbc:	defffc04 	addi	sp,sp,-16
     bc0:	df000315 	stw	fp,12(sp)
     bc4:	df000304 	addi	fp,sp,12

  int i=0;
     bc8:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     bcc:	e03ffd15 	stw	zero,-12(fp)
     bd0:	00003a06 	br	cbc <WeightUpdatesIH1+0x100>
  {
    int k=0;
     bd4:	e03ffe15 	stw	zero,-8(fp)
	for( k = 0;k<numInputs+1;k++)
     bd8:	e03ffe15 	stw	zero,-8(fp)
     bdc:	00003106 	br	ca4 <WeightUpdatesIH1+0xe8>
	{
    float weightChange = delta_h1[i] * LR_IH1 * trainInputs[patNum][k];
     be0:	00800074 	movhi	r2,1
     be4:	109e1704 	addi	r2,r2,30812
     be8:	e0fffd17 	ldw	r3,-12(fp)
     bec:	18c7883a 	add	r3,r3,r3
     bf0:	18c7883a 	add	r3,r3,r3
     bf4:	10c5883a 	add	r2,r2,r3
     bf8:	10c00017 	ldw	r3,0(r2)
     bfc:	008f7374 	movhi	r2,15821
     c00:	10b33344 	addi	r2,r2,-13107
     c04:	188bff32 	custom	252,r5,r3,r2
     c08:	d126d517 	ldw	r4,-25772(gp)
     c0c:	00c00074 	movhi	r3,1
     c10:	18d9e304 	addi	r3,r3,26508
     c14:	2005883a 	mov	r2,r4
     c18:	1085883a 	add	r2,r2,r2
     c1c:	1105883a 	add	r2,r2,r4
     c20:	e13ffe17 	ldw	r4,-8(fp)
     c24:	1105883a 	add	r2,r2,r4
     c28:	1085883a 	add	r2,r2,r2
     c2c:	1085883a 	add	r2,r2,r2
     c30:	1887883a 	add	r3,r3,r2
     c34:	18800017 	ldw	r2,0(r3)
     c38:	2885ff32 	custom	252,r2,r5,r2
     c3c:	e0bfff15 	stw	r2,-4(fp)

     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;
     c40:	00800074 	movhi	r2,1
     c44:	10993804 	addi	r2,r2,25824
     c48:	e0fffe17 	ldw	r3,-8(fp)
     c4c:	19000ca4 	muli	r4,r3,50
     c50:	e0fffd17 	ldw	r3,-12(fp)
     c54:	20c7883a 	add	r3,r4,r3
     c58:	18c7883a 	add	r3,r3,r3
     c5c:	18c7883a 	add	r3,r3,r3
     c60:	10c5883a 	add	r2,r2,r3
     c64:	10c00017 	ldw	r3,0(r2)
     c68:	e0bfff17 	ldw	r2,-4(fp)
     c6c:	1889ff72 	custom	253,r4,r3,r2
     c70:	00800074 	movhi	r2,1
     c74:	10993804 	addi	r2,r2,25824
     c78:	e0fffe17 	ldw	r3,-8(fp)
     c7c:	19400ca4 	muli	r5,r3,50
     c80:	e0fffd17 	ldw	r3,-12(fp)
     c84:	28c7883a 	add	r3,r5,r3
     c88:	18c7883a 	add	r3,r3,r3
     c8c:	18c7883a 	add	r3,r3,r3
     c90:	10c5883a 	add	r2,r2,r3
     c94:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden1;i++)
  {
    int k=0;
	for( k = 0;k<numInputs+1;k++)
     c98:	e0bffe17 	ldw	r2,-8(fp)
     c9c:	10800044 	addi	r2,r2,1
     ca0:	e0bffe15 	stw	r2,-8(fp)
     ca4:	e0bffe17 	ldw	r2,-8(fp)
     ca8:	108000d0 	cmplti	r2,r2,3
     cac:	103fcc1e 	bne	r2,zero,be0 <__alt_mem_onchip_memory+0xf7800be0>
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     cb0:	e0bffd17 	ldw	r2,-12(fp)
     cb4:	10800044 	addi	r2,r2,1
     cb8:	e0bffd15 	stw	r2,-12(fp)
     cbc:	e0bffd17 	ldw	r2,-12(fp)
     cc0:	10800c90 	cmplti	r2,r2,50
     cc4:	103fc31e 	bne	r2,zero,bd4 <__alt_mem_onchip_memory+0xf7800bd4>
     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;

   }
  }

}
     cc8:	0001883a 	nop
     ccc:	e037883a 	mov	sp,fp
     cd0:	df000017 	ldw	fp,0(sp)
     cd4:	dec00104 	addi	sp,sp,4
     cd8:	f800283a 	ret

00000cdc <getRand>:

//************************************
// generates a random number
float getRand(void)
{
     cdc:	defffe04 	addi	sp,sp,-8
     ce0:	dfc00115 	stw	ra,4(sp)
     ce4:	df000015 	stw	fp,0(sp)
     ce8:	d839883a 	mov	fp,sp
 return ((float)rand())/(float)RAND_MAX;
     cec:	00042400 	call	4240 <rand>
     cf0:	1007feb2 	custom	250,r3,r2,zero
     cf4:	0093c034 	movhi	r2,20224
     cf8:	1885fff2 	custom	255,r2,r3,r2
     cfc:	1007883a 	mov	r3,r2
}
     d00:	1805883a 	mov	r2,r3
     d04:	e037883a 	mov	sp,fp
     d08:	dfc00117 	ldw	ra,4(sp)
     d0c:	df000017 	ldw	fp,0(sp)
     d10:	dec00204 	addi	sp,sp,8
     d14:	f800283a 	ret

00000d18 <initWeights>:


//************************************
// set weights to random numbers
void initWeights(void)
{
     d18:	defffb04 	addi	sp,sp,-20
     d1c:	dfc00415 	stw	ra,16(sp)
     d20:	df000315 	stw	fp,12(sp)
     d24:	df000304 	addi	fp,sp,12
 int j=0;
     d28:	e03ffd15 	stw	zero,-12(fp)
 int i=0;
     d2c:	e03ffe15 	stw	zero,-8(fp)
 int k=0;
     d30:	e03fff15 	stw	zero,-4(fp)

 for( j = 0;j<numHidden2+1;j++)
     d34:	e03ffd15 	stw	zero,-12(fp)
     d38:	00002606 	br	dd4 <initWeights+0xbc>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
     d3c:	0000cdc0 	call	cdc <getRand>
     d40:	1007883a 	mov	r3,r2
     d44:	1809883a 	mov	r4,r3
     d48:	0003be80 	call	3be8 <__extendsfdf2>
     d4c:	1011883a 	mov	r8,r2
     d50:	1813883a 	mov	r9,r3
     d54:	000d883a 	mov	r6,zero
     d58:	01cff834 	movhi	r7,16352
     d5c:	4009883a 	mov	r4,r8
     d60:	480b883a 	mov	r5,r9
     d64:	00032ec0 	call	32ec <__subdf3>
     d68:	1009883a 	mov	r4,r2
     d6c:	180b883a 	mov	r5,r3
     d70:	2005883a 	mov	r2,r4
     d74:	2807883a 	mov	r3,r5
     d78:	000d883a 	mov	r6,zero
     d7c:	01d00034 	movhi	r7,16384
     d80:	1009883a 	mov	r4,r2
     d84:	180b883a 	mov	r5,r3
     d88:	00021f80 	call	21f8 <__divdf3>
     d8c:	1009883a 	mov	r4,r2
     d90:	180b883a 	mov	r5,r3
     d94:	2005883a 	mov	r2,r4
     d98:	2807883a 	mov	r3,r5
     d9c:	1009883a 	mov	r4,r2
     da0:	180b883a 	mov	r5,r3
     da4:	0003cf80 	call	3cf8 <__truncdfsf2>
     da8:	1009883a 	mov	r4,r2
     dac:	00800074 	movhi	r2,1
     db0:	10949104 	addi	r2,r2,21060
     db4:	e0fffd17 	ldw	r3,-12(fp)
     db8:	18c7883a 	add	r3,r3,r3
     dbc:	18c7883a 	add	r3,r3,r3
     dc0:	10c5883a 	add	r2,r2,r3
     dc4:	11000015 	stw	r4,0(r2)
{
 int j=0;
 int i=0;
 int k=0;

 for( j = 0;j<numHidden2+1;j++)
     dc8:	e0bffd17 	ldw	r2,-12(fp)
     dcc:	10800044 	addi	r2,r2,1
     dd0:	e0bffd15 	stw	r2,-12(fp)
     dd4:	e0bffd17 	ldw	r2,-12(fp)
     dd8:	10800550 	cmplti	r2,r2,21
     ddc:	103fd71e 	bne	r2,zero,d3c <__alt_mem_onchip_memory+0xf7800d3c>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
     de0:	e03fff15 	stw	zero,-4(fp)
     de4:	00003106 	br	eac <initWeights+0x194>
   {
    for( i = 0;i<numHidden1+1;i++)
     de8:	e03ffe15 	stw	zero,-8(fp)
     dec:	00002906 	br	e94 <initWeights+0x17c>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     df0:	0000cdc0 	call	cdc <getRand>
     df4:	1007883a 	mov	r3,r2
     df8:	1809883a 	mov	r4,r3
     dfc:	0003be80 	call	3be8 <__extendsfdf2>
     e00:	1011883a 	mov	r8,r2
     e04:	1813883a 	mov	r9,r3
     e08:	000d883a 	mov	r6,zero
     e0c:	01cff834 	movhi	r7,16352
     e10:	4009883a 	mov	r4,r8
     e14:	480b883a 	mov	r5,r9
     e18:	00032ec0 	call	32ec <__subdf3>
     e1c:	1009883a 	mov	r4,r2
     e20:	180b883a 	mov	r5,r3
     e24:	2005883a 	mov	r2,r4
     e28:	2807883a 	mov	r3,r5
     e2c:	000d883a 	mov	r6,zero
     e30:	01d00034 	movhi	r7,16384
     e34:	1009883a 	mov	r4,r2
     e38:	180b883a 	mov	r5,r3
     e3c:	00021f80 	call	21f8 <__divdf3>
     e40:	1009883a 	mov	r4,r2
     e44:	180b883a 	mov	r5,r3
     e48:	2005883a 	mov	r2,r4
     e4c:	2807883a 	mov	r3,r5
     e50:	1009883a 	mov	r4,r2
     e54:	180b883a 	mov	r5,r3
     e58:	0003cf80 	call	3cf8 <__truncdfsf2>
     e5c:	100b883a 	mov	r5,r2
     e60:	00800074 	movhi	r2,1
     e64:	109a0704 	addi	r2,r2,26652
     e68:	e0fffe17 	ldw	r3,-8(fp)
     e6c:	19000524 	muli	r4,r3,20
     e70:	e0ffff17 	ldw	r3,-4(fp)
     e74:	20c7883a 	add	r3,r4,r3
     e78:	18c7883a 	add	r3,r3,r3
     e7c:	18c7883a 	add	r3,r3,r3
     e80:	10c5883a 	add	r2,r2,r3
     e84:	11400015 	stw	r5,0(r2)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
   {
    for( i = 0;i<numHidden1+1;i++)
     e88:	e0bffe17 	ldw	r2,-8(fp)
     e8c:	10800044 	addi	r2,r2,1
     e90:	e0bffe15 	stw	r2,-8(fp)
     e94:	e0bffe17 	ldw	r2,-8(fp)
     e98:	10800cd0 	cmplti	r2,r2,51
     e9c:	103fd41e 	bne	r2,zero,df0 <__alt_mem_onchip_memory+0xf7800df0>

 for( j = 0;j<numHidden2+1;j++)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
     ea0:	e0bfff17 	ldw	r2,-4(fp)
     ea4:	10800044 	addi	r2,r2,1
     ea8:	e0bfff15 	stw	r2,-4(fp)
     eac:	e0bfff17 	ldw	r2,-4(fp)
     eb0:	10800510 	cmplti	r2,r2,20
     eb4:	103fcc1e 	bne	r2,zero,de8 <__alt_mem_onchip_memory+0xf7800de8>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
     eb8:	e03fff15 	stw	zero,-4(fp)
     ebc:	00003106 	br	f84 <initWeights+0x26c>
   {
    for( i = 0;i<numInputs+1;i++)
     ec0:	e03ffe15 	stw	zero,-8(fp)
     ec4:	00002906 	br	f6c <initWeights+0x254>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     ec8:	0000cdc0 	call	cdc <getRand>
     ecc:	1007883a 	mov	r3,r2
     ed0:	1809883a 	mov	r4,r3
     ed4:	0003be80 	call	3be8 <__extendsfdf2>
     ed8:	1011883a 	mov	r8,r2
     edc:	1813883a 	mov	r9,r3
     ee0:	000d883a 	mov	r6,zero
     ee4:	01cff834 	movhi	r7,16352
     ee8:	4009883a 	mov	r4,r8
     eec:	480b883a 	mov	r5,r9
     ef0:	00032ec0 	call	32ec <__subdf3>
     ef4:	1009883a 	mov	r4,r2
     ef8:	180b883a 	mov	r5,r3
     efc:	2005883a 	mov	r2,r4
     f00:	2807883a 	mov	r3,r5
     f04:	000d883a 	mov	r6,zero
     f08:	01d00034 	movhi	r7,16384
     f0c:	1009883a 	mov	r4,r2
     f10:	180b883a 	mov	r5,r3
     f14:	00021f80 	call	21f8 <__divdf3>
     f18:	1009883a 	mov	r4,r2
     f1c:	180b883a 	mov	r5,r3
     f20:	2005883a 	mov	r2,r4
     f24:	2807883a 	mov	r3,r5
     f28:	1009883a 	mov	r4,r2
     f2c:	180b883a 	mov	r5,r3
     f30:	0003cf80 	call	3cf8 <__truncdfsf2>
     f34:	100b883a 	mov	r5,r2
     f38:	00800074 	movhi	r2,1
     f3c:	10993804 	addi	r2,r2,25824
     f40:	e0fffe17 	ldw	r3,-8(fp)
     f44:	19000ca4 	muli	r4,r3,50
     f48:	e0ffff17 	ldw	r3,-4(fp)
     f4c:	20c7883a 	add	r3,r4,r3
     f50:	18c7883a 	add	r3,r3,r3
     f54:	18c7883a 	add	r3,r3,r3
     f58:	10c5883a 	add	r2,r2,r3
     f5c:	11400015 	stw	r5,0(r2)
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
   {
    for( i = 0;i<numInputs+1;i++)
     f60:	e0bffe17 	ldw	r2,-8(fp)
     f64:	10800044 	addi	r2,r2,1
     f68:	e0bffe15 	stw	r2,-8(fp)
     f6c:	e0bffe17 	ldw	r2,-8(fp)
     f70:	108000d0 	cmplti	r2,r2,3
     f74:	103fd41e 	bne	r2,zero,ec8 <__alt_mem_onchip_memory+0xf7800ec8>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
     f78:	e0bfff17 	ldw	r2,-4(fp)
     f7c:	10800044 	addi	r2,r2,1
     f80:	e0bfff15 	stw	r2,-4(fp)
     f84:	e0bfff17 	ldw	r2,-4(fp)
     f88:	10800c90 	cmplti	r2,r2,50
     f8c:	103fcc1e 	bne	r2,zero,ec0 <__alt_mem_onchip_memory+0xf7800ec0>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsIH1[i][k]);
    }
   }
}
     f90:	0001883a 	nop
     f94:	e037883a 	mov	sp,fp
     f98:	dfc00117 	ldw	ra,4(sp)
     f9c:	df000017 	ldw	fp,0(sp)
     fa0:	dec00204 	addi	sp,sp,8
     fa4:	f800283a 	ret

00000fa8 <initData>:


//************************************
// read in the data
void initData(void)
{
     fa8:	defffe04 	addi	sp,sp,-8
     fac:	dfc00115 	stw	ra,4(sp)
     fb0:	df000015 	stw	fp,0(sp)
     fb4:	d839883a 	mov	fp,sp
    printf("initialising data\n");
     fb8:	01000074 	movhi	r4,1
     fbc:	21059a04 	addi	r4,r4,5736
     fc0:	00042140 	call	4214 <puts>
    // [-1][1]
    // an extra input valued 1 is also added
    // to act as the bias
    // the output must lie in the range -1 to 1

    trainInputs[0][0]  = 0.95;
     fc4:	00800074 	movhi	r2,1
     fc8:	1099e304 	addi	r2,r2,26508
     fcc:	00cfdcf4 	movhi	r3,16243
     fd0:	18ccccc4 	addi	r3,r3,13107
     fd4:	10c00015 	stw	r3,0(r2)
    trainInputs[0][1]  = -0.95;
     fd8:	00800074 	movhi	r2,1
     fdc:	1099e304 	addi	r2,r2,26508
     fe0:	00efdcf4 	movhi	r3,49011
     fe4:	18ccccc4 	addi	r3,r3,13107
     fe8:	10c00115 	stw	r3,4(r2)
    trainInputs[0][2]  = 1;    //bias
     fec:	00800074 	movhi	r2,1
     ff0:	1099e304 	addi	r2,r2,26508
     ff4:	00cfe034 	movhi	r3,16256
     ff8:	10c00215 	stw	r3,8(r2)
    trainOutput[0] = 0.95;
     ffc:	00800074 	movhi	r2,1
    1000:	1099ef04 	addi	r2,r2,26556
    1004:	00cfdcf4 	movhi	r3,16243
    1008:	18ccccc4 	addi	r3,r3,13107
    100c:	10c00015 	stw	r3,0(r2)

    trainInputs[1][0]  = -0.95;
    1010:	00800074 	movhi	r2,1
    1014:	1099e304 	addi	r2,r2,26508
    1018:	00efdcf4 	movhi	r3,49011
    101c:	18ccccc4 	addi	r3,r3,13107
    1020:	10c00315 	stw	r3,12(r2)
    trainInputs[1][1]  = 0.95;
    1024:	00800074 	movhi	r2,1
    1028:	1099e304 	addi	r2,r2,26508
    102c:	00cfdcf4 	movhi	r3,16243
    1030:	18ccccc4 	addi	r3,r3,13107
    1034:	10c00415 	stw	r3,16(r2)
    trainInputs[1][2]  = 1;       //bias
    1038:	00800074 	movhi	r2,1
    103c:	1099e304 	addi	r2,r2,26508
    1040:	00cfe034 	movhi	r3,16256
    1044:	10c00515 	stw	r3,20(r2)
    trainOutput[1] = 0.95;
    1048:	00800074 	movhi	r2,1
    104c:	1099ef04 	addi	r2,r2,26556
    1050:	00cfdcf4 	movhi	r3,16243
    1054:	18ccccc4 	addi	r3,r3,13107
    1058:	10c00115 	stw	r3,4(r2)

    trainInputs[2][0]  = 0.95;
    105c:	00800074 	movhi	r2,1
    1060:	1099e304 	addi	r2,r2,26508
    1064:	00cfdcf4 	movhi	r3,16243
    1068:	18ccccc4 	addi	r3,r3,13107
    106c:	10c00615 	stw	r3,24(r2)
    trainInputs[2][1]  = 0.95;
    1070:	00800074 	movhi	r2,1
    1074:	1099e304 	addi	r2,r2,26508
    1078:	00cfdcf4 	movhi	r3,16243
    107c:	18ccccc4 	addi	r3,r3,13107
    1080:	10c00715 	stw	r3,28(r2)
   trainInputs[2][2]  = 1;        //bias
    1084:	00800074 	movhi	r2,1
    1088:	1099e304 	addi	r2,r2,26508
    108c:	00cfe034 	movhi	r3,16256
    1090:	10c00815 	stw	r3,32(r2)
    trainOutput[2] = -0.95;
    1094:	00800074 	movhi	r2,1
    1098:	1099ef04 	addi	r2,r2,26556
    109c:	00efdcf4 	movhi	r3,49011
    10a0:	18ccccc4 	addi	r3,r3,13107
    10a4:	10c00215 	stw	r3,8(r2)

    trainInputs[3][0]  = -0.95;
    10a8:	00800074 	movhi	r2,1
    10ac:	1099e304 	addi	r2,r2,26508
    10b0:	00efdcf4 	movhi	r3,49011
    10b4:	18ccccc4 	addi	r3,r3,13107
    10b8:	10c00915 	stw	r3,36(r2)
    trainInputs[3][1]  = -0.95;
    10bc:	00800074 	movhi	r2,1
    10c0:	1099e304 	addi	r2,r2,26508
    10c4:	00efdcf4 	movhi	r3,49011
    10c8:	18ccccc4 	addi	r3,r3,13107
    10cc:	10c00a15 	stw	r3,40(r2)
    trainInputs[3][2]  = 1;     //bias
    10d0:	00800074 	movhi	r2,1
    10d4:	1099e304 	addi	r2,r2,26508
    10d8:	00cfe034 	movhi	r3,16256
    10dc:	10c00b15 	stw	r3,44(r2)
    trainOutput[3] = -0.95;
    10e0:	00800074 	movhi	r2,1
    10e4:	1099ef04 	addi	r2,r2,26556
    10e8:	00efdcf4 	movhi	r3,49011
    10ec:	18ccccc4 	addi	r3,r3,13107
    10f0:	10c00315 	stw	r3,12(r2)
hiddenVal1[numHidden1]=1;//bias capa oculta1
    10f4:	00800074 	movhi	r2,1
    10f8:	10990604 	addi	r2,r2,25624
    10fc:	00cfe034 	movhi	r3,16256
    1100:	10c03215 	stw	r3,200(r2)
hiddenVal2[numHidden2]=1;//bias capa oculta2
    1104:	00800074 	movhi	r2,1
    1108:	10946904 	addi	r2,r2,20900
    110c:	00cfe034 	movhi	r3,16256
    1110:	10c01415 	stw	r3,80(r2)
}
    1114:	0001883a 	nop
    1118:	e037883a 	mov	sp,fp
    111c:	dfc00117 	ldw	ra,4(sp)
    1120:	df000017 	ldw	fp,0(sp)
    1124:	dec00204 	addi	sp,sp,8
    1128:	f800283a 	ret

0000112c <displayResults>:


//************************************
// display results
void displayResults(void)
{
    112c:	defff804 	addi	sp,sp,-32
    1130:	dfc00715 	stw	ra,28(sp)
    1134:	df000615 	stw	fp,24(sp)
    1138:	dc800515 	stw	r18,20(sp)
    113c:	dc400415 	stw	r17,16(sp)
    1140:	dc000315 	stw	r16,12(sp)
    1144:	df000604 	addi	fp,sp,24
 int i=0;
    1148:	e03ffc15 	stw	zero,-16(fp)
 for( i = 0;i<numPatterns;i++)
    114c:	e03ffc15 	stw	zero,-16(fp)
    1150:	00002006 	br	11d4 <displayResults+0xa8>
 {
  patNum = i;
    1154:	e0bffc17 	ldw	r2,-16(fp)
    1158:	d0a6d515 	stw	r2,-25772(gp)
  calcNet();
    115c:	00003a40 	call	3a4 <calcNet>
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
    1160:	d0a6d517 	ldw	r2,-25772(gp)
    1164:	14800044 	addi	r18,r2,1
    1168:	d0e6d517 	ldw	r3,-25772(gp)
    116c:	00800074 	movhi	r2,1
    1170:	1099ef04 	addi	r2,r2,26556
    1174:	18c7883a 	add	r3,r3,r3
    1178:	18c7883a 	add	r3,r3,r3
    117c:	10c5883a 	add	r2,r2,r3
    1180:	10c00017 	ldw	r3,0(r2)
    1184:	1809883a 	mov	r4,r3
    1188:	0003be80 	call	3be8 <__extendsfdf2>
    118c:	1021883a 	mov	r16,r2
    1190:	1823883a 	mov	r17,r3
    1194:	d0a6d917 	ldw	r2,-25756(gp)
    1198:	1009883a 	mov	r4,r2
    119c:	0003be80 	call	3be8 <__extendsfdf2>
    11a0:	1009883a 	mov	r4,r2
    11a4:	180b883a 	mov	r5,r3
    11a8:	d9000015 	stw	r4,0(sp)
    11ac:	d9400115 	stw	r5,4(sp)
    11b0:	800d883a 	mov	r6,r16
    11b4:	880f883a 	mov	r7,r17
    11b8:	900b883a 	mov	r5,r18
    11bc:	01000074 	movhi	r4,1
    11c0:	21059f04 	addi	r4,r4,5756
    11c4:	00040f80 	call	40f8 <printf>
//************************************
// display results
void displayResults(void)
{
 int i=0;
 for( i = 0;i<numPatterns;i++)
    11c8:	e0bffc17 	ldw	r2,-16(fp)
    11cc:	10800044 	addi	r2,r2,1
    11d0:	e0bffc15 	stw	r2,-16(fp)
    11d4:	e0bffc17 	ldw	r2,-16(fp)
    11d8:	10800110 	cmplti	r2,r2,4
    11dc:	103fdd1e 	bne	r2,zero,1154 <__alt_mem_onchip_memory+0xf7801154>
 {
  patNum = i;
  calcNet();
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 }
}
    11e0:	0001883a 	nop
    11e4:	e6fffd04 	addi	sp,fp,-12
    11e8:	dfc00417 	ldw	ra,16(sp)
    11ec:	df000317 	ldw	fp,12(sp)
    11f0:	dc800217 	ldw	r18,8(sp)
    11f4:	dc400117 	ldw	r17,4(sp)
    11f8:	dc000017 	ldw	r16,0(sp)
    11fc:	dec00504 	addi	sp,sp,20
    1200:	f800283a 	ret

00001204 <calcOverallError>:


//************************************
// calculate the overall error
void calcOverallError(void)
{
    1204:	defffd04 	addi	sp,sp,-12
    1208:	dfc00215 	stw	ra,8(sp)
    120c:	df000115 	stw	fp,4(sp)
    1210:	df000104 	addi	fp,sp,4
     int i=0;
    1214:	e03fff15 	stw	zero,-4(fp)
     RMSerror = 0.0;
    1218:	d026d815 	stw	zero,-25760(gp)
     for(i = 0;i<numPatterns;i++)
    121c:	e03fff15 	stw	zero,-4(fp)
    1220:	00000c06 	br	1254 <calcOverallError+0x50>
        {
         patNum = i;
    1224:	e0bfff17 	ldw	r2,-4(fp)
    1228:	d0a6d515 	stw	r2,-25772(gp)
         calcNet();
    122c:	00003a40 	call	3a4 <calcNet>
         RMSerror = RMSerror + (errThisPat * errThisPat);
    1230:	d0e6d617 	ldw	r3,-25768(gp)
    1234:	d0a6d617 	ldw	r2,-25768(gp)
    1238:	1887ff32 	custom	252,r3,r3,r2
    123c:	d0a6d817 	ldw	r2,-25760(gp)
    1240:	1885ff72 	custom	253,r2,r3,r2
    1244:	d0a6d815 	stw	r2,-25760(gp)
// calculate the overall error
void calcOverallError(void)
{
     int i=0;
     RMSerror = 0.0;
     for(i = 0;i<numPatterns;i++)
    1248:	e0bfff17 	ldw	r2,-4(fp)
    124c:	10800044 	addi	r2,r2,1
    1250:	e0bfff15 	stw	r2,-4(fp)
    1254:	e0bfff17 	ldw	r2,-4(fp)
    1258:	10800110 	cmplti	r2,r2,4
    125c:	103ff11e 	bne	r2,zero,1224 <__alt_mem_onchip_memory+0xf7801224>
        {
         patNum = i;
         calcNet();
         RMSerror = RMSerror + (errThisPat * errThisPat);
        }
     RMSerror = RMSerror/numPatterns;
    1260:	d0e6d817 	ldw	r3,-25760(gp)
    1264:	00902034 	movhi	r2,16512
    1268:	1885fff2 	custom	255,r2,r3,r2
    126c:	d0a6d815 	stw	r2,-25760(gp)
     RMSerror = sqrt(RMSerror);
    1270:	d0a6d817 	ldw	r2,-25760(gp)
    1274:	1009883a 	mov	r4,r2
    1278:	0003be80 	call	3be8 <__extendsfdf2>
    127c:	100b883a 	mov	r5,r2
    1280:	180d883a 	mov	r6,r3
    1284:	2809883a 	mov	r4,r5
    1288:	300b883a 	mov	r5,r6
    128c:	00015180 	call	1518 <sqrt>
    1290:	100b883a 	mov	r5,r2
    1294:	180d883a 	mov	r6,r3
    1298:	2809883a 	mov	r4,r5
    129c:	300b883a 	mov	r5,r6
    12a0:	0003cf80 	call	3cf8 <__truncdfsf2>
    12a4:	1007883a 	mov	r3,r2
    12a8:	d0e6d815 	stw	r3,-25760(gp)
}
    12ac:	0001883a 	nop
    12b0:	e037883a 	mov	sp,fp
    12b4:	dfc00117 	ldw	ra,4(sp)
    12b8:	df000017 	ldw	fp,0(sp)
    12bc:	dec00204 	addi	sp,sp,8
    12c0:	f800283a 	ret

000012c4 <main>:
//********** THIS IS THE MAIN PROGRAM **************************
//==============================================================


int main(void)
{
    12c4:	defff704 	addi	sp,sp,-36
    12c8:	dfc00815 	stw	ra,32(sp)
    12cc:	df000715 	stw	fp,28(sp)
    12d0:	df000704 	addi	fp,sp,28
 // seed random number function
 srand ( time(NULL) );
    12d4:	0009883a 	mov	r4,zero
    12d8:	000439c0 	call	439c <time>
    12dc:	1009883a 	mov	r4,r2
    12e0:	00042280 	call	4228 <srand>
  PERF_RESET(PERFORMANCE_COUNTER_BASE);
    12e4:	00c00044 	movi	r3,1
    12e8:	00840034 	movhi	r2,4096
    12ec:	10842004 	addi	r2,r2,4224
    12f0:	10c00035 	stwio	r3,0(r2)
  PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
    12f4:	0007883a 	mov	r3,zero
    12f8:	00840034 	movhi	r2,4096
    12fc:	10842104 	addi	r2,r2,4228
    1300:	10c00035 	stwio	r3,0(r2)
 // initiate the weights
  PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 1);
    1304:	0007883a 	mov	r3,zero
    1308:	00840034 	movhi	r2,4096
    130c:	10842504 	addi	r2,r2,4244
    1310:	10c00035 	stwio	r3,0(r2)
 initWeights();
    1314:	0000d180 	call	d18 <initWeights>
 // load in the data
 initData();
    1318:	0000fa80 	call	fa8 <initData>
   PERF_END (PERFORMANCE_COUNTER_BASE, 1);
    131c:	0007883a 	mov	r3,zero
    1320:	00840034 	movhi	r2,4096
    1324:	10842404 	addi	r2,r2,4240
    1328:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    132c:	e03ffe15 	stw	zero,-8(fp)
    1330:	00004906 	br	1458 <main+0x194>
    {
        for(i = 0;i<numPatterns;i++)
    1334:	e03fff15 	stw	zero,-4(fp)
    1338:	00002d06 	br	13f0 <main+0x12c>
        {
          //select a pattern at random
          patNum = rand()%numPatterns;
    133c:	00042400 	call	4240 <rand>
    1340:	1007883a 	mov	r3,r2
    1344:	00a00034 	movhi	r2,32768
    1348:	108000c4 	addi	r2,r2,3
    134c:	1884703a 	and	r2,r3,r2
    1350:	1000040e 	bge	r2,zero,1364 <main+0xa0>
    1354:	10bfffc4 	addi	r2,r2,-1
    1358:	00ffff04 	movi	r3,-4
    135c:	10c4b03a 	or	r2,r2,r3
    1360:	10800044 	addi	r2,r2,1
    1364:	d0a6d515 	stw	r2,-25772(gp)

          //calculate the current network output
          //and error for this pattern
          //phase forward

          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 2);
    1368:	0007883a 	mov	r3,zero
    136c:	00840034 	movhi	r2,4096
    1370:	10842904 	addi	r2,r2,4260
    1374:	10c00035 	stwio	r3,0(r2)
          calcNet();
    1378:	00003a40 	call	3a4 <calcNet>
          PERF_END (PERFORMANCE_COUNTER_BASE, 2);
    137c:	0007883a 	mov	r3,zero
    1380:	00840034 	movhi	r2,4096
    1384:	10842804 	addi	r2,r2,4256
    1388:	10c00035 	stwio	r3,0(r2)
          //change network weights
          //phase backward and update weights
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 3);
    138c:	0007883a 	mov	r3,zero
    1390:	00840034 	movhi	r2,4096
    1394:	10842d04 	addi	r2,r2,4276
    1398:	10c00035 	stwio	r3,0(r2)
          WeightChangesH2O();
    139c:	000073c0 	call	73c <WeightChangesH2O>
          WeightChangesH1H2();
    13a0:	000086c0 	call	86c <WeightChangesH1H2>
          WeightChangesIH1();
    13a4:	0000a940 	call	a94 <WeightChangesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 3);
    13a8:	0007883a 	mov	r3,zero
    13ac:	00840034 	movhi	r2,4096
    13b0:	10842c04 	addi	r2,r2,4272
    13b4:	10c00035 	stwio	r3,0(r2)
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 4);
    13b8:	0007883a 	mov	r3,zero
    13bc:	00840034 	movhi	r2,4096
    13c0:	10843104 	addi	r2,r2,4292
    13c4:	10c00035 	stwio	r3,0(r2)
          WeightUpdatesH2O();
    13c8:	000077c0 	call	77c <WeightUpdatesH2O>
          WeightUpdatesH1H2();
    13cc:	00009380 	call	938 <WeightUpdatesH1H2>
          WeightUpdatesIH1();
    13d0:	0000bbc0 	call	bbc <WeightUpdatesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
    13d4:	0007883a 	mov	r3,zero
    13d8:	00840034 	movhi	r2,4096
    13dc:	10843004 	addi	r2,r2,4288
    13e0:	10c00035 	stwio	r3,0(r2)


 // train the network
    for(j = 0;j <= numEpochs;j++)
    {
        for(i = 0;i<numPatterns;i++)
    13e4:	e0bfff17 	ldw	r2,-4(fp)
    13e8:	10800044 	addi	r2,r2,1
    13ec:	e0bfff15 	stw	r2,-4(fp)
    13f0:	e0bfff17 	ldw	r2,-4(fp)
    13f4:	10800110 	cmplti	r2,r2,4
    13f8:	103fd01e 	bne	r2,zero,133c <__alt_mem_onchip_memory+0xf780133c>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
        }

        //display the overall network error
        //after each epoch
        PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 5);
    13fc:	0007883a 	mov	r3,zero
    1400:	00840034 	movhi	r2,4096
    1404:	10843504 	addi	r2,r2,4308
    1408:	10c00035 	stwio	r3,0(r2)
        calcOverallError();
    140c:	00012040 	call	1204 <calcOverallError>
        printf("epoch = %d RMS Error = %f\n",j,RMSerror);
    1410:	d0a6d817 	ldw	r2,-25760(gp)
    1414:	1009883a 	mov	r4,r2
    1418:	0003be80 	call	3be8 <__extendsfdf2>
    141c:	1009883a 	mov	r4,r2
    1420:	180b883a 	mov	r5,r3
    1424:	200d883a 	mov	r6,r4
    1428:	280f883a 	mov	r7,r5
    142c:	e17ffe17 	ldw	r5,-8(fp)
    1430:	01000074 	movhi	r4,1
    1434:	2105a904 	addi	r4,r4,5796
    1438:	00040f80 	call	40f8 <printf>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    143c:	0007883a 	mov	r3,zero
    1440:	00840034 	movhi	r2,4096
    1444:	10843404 	addi	r2,r2,4304
    1448:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    144c:	e0bffe17 	ldw	r2,-8(fp)
    1450:	10800044 	addi	r2,r2,1
    1454:	e0bffe15 	stw	r2,-8(fp)
    1458:	00c03204 	movi	r3,200
    145c:	e0bffe17 	ldw	r2,-8(fp)
    1460:	18bfb40e 	bge	r3,r2,1334 <__alt_mem_onchip_memory+0xf7801334>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    }

 //training has finished
 //display the results
 PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 6);
    1464:	0007883a 	mov	r3,zero
    1468:	00840034 	movhi	r2,4096
    146c:	10843904 	addi	r2,r2,4324
    1470:	10c00035 	stwio	r3,0(r2)
 displayResults();
    1474:	000112c0 	call	112c <displayResults>
 PERF_END (PERFORMANCE_COUNTER_BASE, 6);
    1478:	0007883a 	mov	r3,zero
    147c:	00840034 	movhi	r2,4096
    1480:	10843804 	addi	r2,r2,4320
    1484:	10c00035 	stwio	r3,0(r2)

 PERF_STOP_MEASURING(PERFORMANCE_COUNTER_BASE);
    1488:	0007883a 	mov	r3,zero
    148c:	00840034 	movhi	r2,4096
    1490:	10842004 	addi	r2,r2,4224
    1494:	10c00035 	stwio	r3,0(r2)

  perf_print_formatted_report((void *)PERFORMANCE_COUNTER_BASE,
    1498:	00800074 	movhi	r2,1
    149c:	1085b204 	addi	r2,r2,5832
    14a0:	d8800415 	stw	r2,16(sp)
    14a4:	00800074 	movhi	r2,1
    14a8:	1085b504 	addi	r2,r2,5844
    14ac:	d8800315 	stw	r2,12(sp)
    14b0:	00800074 	movhi	r2,1
    14b4:	1085b904 	addi	r2,r2,5860
    14b8:	d8800215 	stw	r2,8(sp)
    14bc:	00800074 	movhi	r2,1
    14c0:	1085bc04 	addi	r2,r2,5872
    14c4:	d8800115 	stw	r2,4(sp)
    14c8:	00800074 	movhi	r2,1
    14cc:	1085c004 	addi	r2,r2,5888
    14d0:	d8800015 	stw	r2,0(sp)
    14d4:	01c00074 	movhi	r7,1
    14d8:	39c5b004 	addi	r7,r7,5824
    14dc:	01800184 	movi	r6,6
    14e0:	0140bef4 	movhi	r5,763
    14e4:	297c2004 	addi	r5,r5,-3968
    14e8:	01040034 	movhi	r4,4096
    14ec:	21042004 	addi	r4,r4,4224
    14f0:	00101480 	call	10148 <perf_print_formatted_report>
							  "FASE UPDATE",
                              "CALCULO ERROR",
                              "TEST FINAL"
                              );

 system("PAUSE");
    14f4:	01000074 	movhi	r4,1
    14f8:	2105c404 	addi	r4,r4,5904
    14fc:	000436c0 	call	436c <system>
 return 0;
    1500:	0005883a 	mov	r2,zero
}
    1504:	e037883a 	mov	sp,fp
    1508:	dfc00117 	ldw	ra,4(sp)
    150c:	df000017 	ldw	fp,0(sp)
    1510:	dec00204 	addi	sp,sp,8
    1514:	f800283a 	ret

00001518 <sqrt>:
    1518:	defff104 	addi	sp,sp,-60
    151c:	dd000d15 	stw	r20,52(sp)
    1520:	05000074 	movhi	r20,1
    1524:	dcc00c15 	stw	r19,48(sp)
    1528:	dc800b15 	stw	r18,44(sp)
    152c:	dc400a15 	stw	r17,40(sp)
    1530:	dc000915 	stw	r16,36(sp)
    1534:	dfc00e15 	stw	ra,56(sp)
    1538:	a50d7504 	addi	r20,r20,13780
    153c:	2027883a 	mov	r19,r4
    1540:	2825883a 	mov	r18,r5
    1544:	00016480 	call	1648 <__ieee754_sqrt>
    1548:	1821883a 	mov	r16,r3
    154c:	a0c00017 	ldw	r3,0(r20)
    1550:	1023883a 	mov	r17,r2
    1554:	00bfffc4 	movi	r2,-1
    1558:	18800a26 	beq	r3,r2,1584 <sqrt+0x6c>
    155c:	9809883a 	mov	r4,r19
    1560:	900b883a 	mov	r5,r18
    1564:	00018d00 	call	18d0 <__fpclassifyd>
    1568:	10000626 	beq	r2,zero,1584 <sqrt+0x6c>
    156c:	000d883a 	mov	r6,zero
    1570:	000f883a 	mov	r7,zero
    1574:	9809883a 	mov	r4,r19
    1578:	900b883a 	mov	r5,r18
    157c:	0002ae00 	call	2ae0 <__ledf2>
    1580:	10000a16 	blt	r2,zero,15ac <sqrt+0x94>
    1584:	8805883a 	mov	r2,r17
    1588:	8007883a 	mov	r3,r16
    158c:	dfc00e17 	ldw	ra,56(sp)
    1590:	dd000d17 	ldw	r20,52(sp)
    1594:	dcc00c17 	ldw	r19,48(sp)
    1598:	dc800b17 	ldw	r18,44(sp)
    159c:	dc400a17 	ldw	r17,40(sp)
    15a0:	dc000917 	ldw	r16,36(sp)
    15a4:	dec00f04 	addi	sp,sp,60
    15a8:	f800283a 	ret
    15ac:	00800044 	movi	r2,1
    15b0:	d8800015 	stw	r2,0(sp)
    15b4:	a4000017 	ldw	r16,0(r20)
    15b8:	00800074 	movhi	r2,1
    15bc:	1085c604 	addi	r2,r2,5912
    15c0:	d8800115 	stw	r2,4(sp)
    15c4:	d8000815 	stw	zero,32(sp)
    15c8:	dcc00415 	stw	r19,16(sp)
    15cc:	dc800515 	stw	r18,20(sp)
    15d0:	dcc00215 	stw	r19,8(sp)
    15d4:	dc800315 	stw	r18,12(sp)
    15d8:	80000a1e 	bne	r16,zero,1604 <sqrt+0xec>
    15dc:	d8000615 	stw	zero,24(sp)
    15e0:	d8000715 	stw	zero,28(sp)
    15e4:	d809883a 	mov	r4,sp
    15e8:	00019440 	call	1944 <matherr>
    15ec:	10000e26 	beq	r2,zero,1628 <sqrt+0x110>
    15f0:	d8800817 	ldw	r2,32(sp)
    15f4:	1000101e 	bne	r2,zero,1638 <sqrt+0x120>
    15f8:	d8800617 	ldw	r2,24(sp)
    15fc:	d8c00717 	ldw	r3,28(sp)
    1600:	003fe206 	br	158c <__alt_mem_onchip_memory+0xf780158c>
    1604:	000d883a 	mov	r6,zero
    1608:	000f883a 	mov	r7,zero
    160c:	0009883a 	mov	r4,zero
    1610:	000b883a 	mov	r5,zero
    1614:	00021f80 	call	21f8 <__divdf3>
    1618:	d8800615 	stw	r2,24(sp)
    161c:	d8c00715 	stw	r3,28(sp)
    1620:	00800084 	movi	r2,2
    1624:	80bfef1e 	bne	r16,r2,15e4 <__alt_mem_onchip_memory+0xf78015e4>
    1628:	00040b80 	call	40b8 <__errno>
    162c:	00c00844 	movi	r3,33
    1630:	10c00015 	stw	r3,0(r2)
    1634:	003fee06 	br	15f0 <__alt_mem_onchip_memory+0xf78015f0>
    1638:	00040b80 	call	40b8 <__errno>
    163c:	d8c00817 	ldw	r3,32(sp)
    1640:	10c00015 	stw	r3,0(r2)
    1644:	003fec06 	br	15f8 <__alt_mem_onchip_memory+0xf78015f8>

00001648 <__ieee754_sqrt>:
    1648:	defffd04 	addi	sp,sp,-12
    164c:	dc400115 	stw	r17,4(sp)
    1650:	dc000015 	stw	r16,0(sp)
    1654:	dfc00215 	stw	ra,8(sp)
    1658:	28dffc2c 	andhi	r3,r5,32752
    165c:	009ffc34 	movhi	r2,32752
    1660:	2821883a 	mov	r16,r5
    1664:	2023883a 	mov	r17,r4
    1668:	200d883a 	mov	r6,r4
    166c:	18807b26 	beq	r3,r2,185c <__ieee754_sqrt+0x214>
    1670:	01405f0e 	bge	zero,r5,17f0 <__ieee754_sqrt+0x1a8>
    1674:	2815d53a 	srai	r10,r5,20
    1678:	50006a26 	beq	r10,zero,1824 <__ieee754_sqrt+0x1dc>
    167c:	00c00434 	movhi	r3,16
    1680:	52bf0044 	addi	r10,r10,-1023
    1684:	18ffffc4 	addi	r3,r3,-1
    1688:	80c6703a 	and	r3,r16,r3
    168c:	5080004c 	andi	r2,r10,1
    1690:	18c00434 	orhi	r3,r3,16
    1694:	1000511e 	bne	r2,zero,17dc <__ieee754_sqrt+0x194>
    1698:	3004d7fa 	srli	r2,r6,31
    169c:	5015d07a 	srai	r10,r10,1
    16a0:	18c7883a 	add	r3,r3,r3
    16a4:	10c5883a 	add	r2,r2,r3
    16a8:	01400584 	movi	r5,22
    16ac:	3187883a 	add	r3,r6,r6
    16b0:	0013883a 	mov	r9,zero
    16b4:	000f883a 	mov	r7,zero
    16b8:	01000834 	movhi	r4,32
    16bc:	390d883a 	add	r6,r7,r4
    16c0:	1810d7fa 	srli	r8,r3,31
    16c4:	297fffc4 	addi	r5,r5,-1
    16c8:	11800316 	blt	r2,r6,16d8 <__ieee754_sqrt+0x90>
    16cc:	1185c83a 	sub	r2,r2,r6
    16d0:	310f883a 	add	r7,r6,r4
    16d4:	4913883a 	add	r9,r9,r4
    16d8:	1085883a 	add	r2,r2,r2
    16dc:	4085883a 	add	r2,r8,r2
    16e0:	18c7883a 	add	r3,r3,r3
    16e4:	2008d07a 	srli	r4,r4,1
    16e8:	283ff41e 	bne	r5,zero,16bc <__alt_mem_onchip_memory+0xf78016bc>
    16ec:	01200034 	movhi	r4,32768
    16f0:	01800804 	movi	r6,32
    16f4:	0011883a 	mov	r8,zero
    16f8:	0019883a 	mov	r12,zero
    16fc:	201b883a 	mov	r13,r4
    1700:	00000806 	br	1724 <__ieee754_sqrt+0xdc>
    1704:	38801726 	beq	r7,r2,1764 <__ieee754_sqrt+0x11c>
    1708:	180ad7fa 	srli	r5,r3,31
    170c:	1085883a 	add	r2,r2,r2
    1710:	31bfffc4 	addi	r6,r6,-1
    1714:	2885883a 	add	r2,r5,r2
    1718:	18c7883a 	add	r3,r3,r3
    171c:	2008d07a 	srli	r4,r4,1
    1720:	30001726 	beq	r6,zero,1780 <__ieee754_sqrt+0x138>
    1724:	230b883a 	add	r5,r4,r12
    1728:	38bff60e 	bge	r7,r2,1704 <__alt_mem_onchip_memory+0xf7801704>
    172c:	2ae0002c 	andhi	r11,r5,32768
    1730:	2919883a 	add	r12,r5,r4
    1734:	5b400826 	beq	r11,r13,1758 <__ieee754_sqrt+0x110>
    1738:	3817883a 	mov	r11,r7
    173c:	11c5c83a 	sub	r2,r2,r7
    1740:	1940012e 	bgeu	r3,r5,1748 <__ieee754_sqrt+0x100>
    1744:	10bfffc4 	addi	r2,r2,-1
    1748:	1947c83a 	sub	r3,r3,r5
    174c:	4111883a 	add	r8,r8,r4
    1750:	580f883a 	mov	r7,r11
    1754:	003fec06 	br	1708 <__alt_mem_onchip_memory+0xf7801708>
    1758:	603ff716 	blt	r12,zero,1738 <__alt_mem_onchip_memory+0xf7801738>
    175c:	3ac00044 	addi	r11,r7,1
    1760:	003ff606 	br	173c <__alt_mem_onchip_memory+0xf780173c>
    1764:	19401936 	bltu	r3,r5,17cc <__ieee754_sqrt+0x184>
    1768:	2ae0002c 	andhi	r11,r5,32768
    176c:	2919883a 	add	r12,r5,r4
    1770:	5b404526 	beq	r11,r13,1888 <__ieee754_sqrt+0x240>
    1774:	1017883a 	mov	r11,r2
    1778:	0005883a 	mov	r2,zero
    177c:	003ff206 	br	1748 <__alt_mem_onchip_memory+0xf7801748>
    1780:	10c4b03a 	or	r2,r2,r3
    1784:	10000426 	beq	r2,zero,1798 <__ieee754_sqrt+0x150>
    1788:	00bfffc4 	movi	r2,-1
    178c:	40804026 	beq	r8,r2,1890 <__ieee754_sqrt+0x248>
    1790:	4080004c 	andi	r2,r8,1
    1794:	4091883a 	add	r8,r8,r2
    1798:	4004d07a 	srli	r2,r8,1
    179c:	4807d07a 	srai	r3,r9,1
    17a0:	010ff834 	movhi	r4,16352
    17a4:	4a40004c 	andi	r9,r9,1
    17a8:	1909883a 	add	r4,r3,r4
    17ac:	4800091e 	bne	r9,zero,17d4 <__ieee754_sqrt+0x18c>
    17b0:	5006953a 	slli	r3,r10,20
    17b4:	1907883a 	add	r3,r3,r4
    17b8:	dfc00217 	ldw	ra,8(sp)
    17bc:	dc400117 	ldw	r17,4(sp)
    17c0:	dc000017 	ldw	r16,0(sp)
    17c4:	dec00304 	addi	sp,sp,12
    17c8:	f800283a 	ret
    17cc:	3805883a 	mov	r2,r7
    17d0:	003fcd06 	br	1708 <__alt_mem_onchip_memory+0xf7801708>
    17d4:	10a00034 	orhi	r2,r2,32768
    17d8:	003ff506 	br	17b0 <__alt_mem_onchip_memory+0xf78017b0>
    17dc:	3004d7fa 	srli	r2,r6,31
    17e0:	18c7883a 	add	r3,r3,r3
    17e4:	318d883a 	add	r6,r6,r6
    17e8:	10c7883a 	add	r3,r2,r3
    17ec:	003faa06 	br	1698 <__alt_mem_onchip_memory+0xf7801698>
    17f0:	00a00034 	movhi	r2,32768
    17f4:	10bfffc4 	addi	r2,r2,-1
    17f8:	2884703a 	and	r2,r5,r2
    17fc:	1104b03a 	or	r2,r2,r4
    1800:	10001e26 	beq	r2,zero,187c <__ieee754_sqrt+0x234>
    1804:	2800291e 	bne	r5,zero,18ac <__ieee754_sqrt+0x264>
    1808:	0015883a 	mov	r10,zero
    180c:	3020d2fa 	srli	r16,r6,11
    1810:	52bffac4 	addi	r10,r10,-21
    1814:	300c957a 	slli	r6,r6,21
    1818:	803ffc26 	beq	r16,zero,180c <__alt_mem_onchip_memory+0xf780180c>
    181c:	8080042c 	andhi	r2,r16,16
    1820:	10001e1e 	bne	r2,zero,189c <__ieee754_sqrt+0x254>
    1824:	0005883a 	mov	r2,zero
    1828:	00000106 	br	1830 <__ieee754_sqrt+0x1e8>
    182c:	1805883a 	mov	r2,r3
    1830:	8421883a 	add	r16,r16,r16
    1834:	8100042c 	andhi	r4,r16,16
    1838:	10c00044 	addi	r3,r2,1
    183c:	203ffb26 	beq	r4,zero,182c <__alt_mem_onchip_memory+0xf780182c>
    1840:	01000804 	movi	r4,32
    1844:	20c9c83a 	sub	r4,r4,r3
    1848:	3108d83a 	srl	r4,r6,r4
    184c:	5095c83a 	sub	r10,r10,r2
    1850:	30cc983a 	sll	r6,r6,r3
    1854:	2420b03a 	or	r16,r4,r16
    1858:	003f8806 	br	167c <__alt_mem_onchip_memory+0xf780167c>
    185c:	280f883a 	mov	r7,r5
    1860:	0002bd40 	call	2bd4 <__muldf3>
    1864:	880d883a 	mov	r6,r17
    1868:	800f883a 	mov	r7,r16
    186c:	1009883a 	mov	r4,r2
    1870:	180b883a 	mov	r5,r3
    1874:	000194c0 	call	194c <__adddf3>
    1878:	003fcf06 	br	17b8 <__alt_mem_onchip_memory+0xf78017b8>
    187c:	2005883a 	mov	r2,r4
    1880:	2807883a 	mov	r3,r5
    1884:	003fcc06 	br	17b8 <__alt_mem_onchip_memory+0xf78017b8>
    1888:	603fba16 	blt	r12,zero,1774 <__alt_mem_onchip_memory+0xf7801774>
    188c:	003fb306 	br	175c <__alt_mem_onchip_memory+0xf780175c>
    1890:	4a400044 	addi	r9,r9,1
    1894:	0005883a 	mov	r2,zero
    1898:	003fc006 	br	179c <__alt_mem_onchip_memory+0xf780179c>
    189c:	01000804 	movi	r4,32
    18a0:	00bfffc4 	movi	r2,-1
    18a4:	0007883a 	mov	r3,zero
    18a8:	003fe706 	br	1848 <__alt_mem_onchip_memory+0xf7801848>
    18ac:	200d883a 	mov	r6,r4
    18b0:	280f883a 	mov	r7,r5
    18b4:	00032ec0 	call	32ec <__subdf3>
    18b8:	100d883a 	mov	r6,r2
    18bc:	180f883a 	mov	r7,r3
    18c0:	1009883a 	mov	r4,r2
    18c4:	180b883a 	mov	r5,r3
    18c8:	00021f80 	call	21f8 <__divdf3>
    18cc:	003fba06 	br	17b8 <__alt_mem_onchip_memory+0xf78017b8>

000018d0 <__fpclassifyd>:
    18d0:	00a00034 	movhi	r2,32768
    18d4:	10bfffc4 	addi	r2,r2,-1
    18d8:	2884703a 	and	r2,r5,r2
    18dc:	10000726 	beq	r2,zero,18fc <__fpclassifyd+0x2c>
    18e0:	00fffc34 	movhi	r3,65520
    18e4:	019ff834 	movhi	r6,32736
    18e8:	28c7883a 	add	r3,r5,r3
    18ec:	31bfffc4 	addi	r6,r6,-1
    18f0:	30c00536 	bltu	r6,r3,1908 <__fpclassifyd+0x38>
    18f4:	00800104 	movi	r2,4
    18f8:	f800283a 	ret
    18fc:	2000021e 	bne	r4,zero,1908 <__fpclassifyd+0x38>
    1900:	00800084 	movi	r2,2
    1904:	f800283a 	ret
    1908:	00dffc34 	movhi	r3,32752
    190c:	019ff834 	movhi	r6,32736
    1910:	28cb883a 	add	r5,r5,r3
    1914:	31bfffc4 	addi	r6,r6,-1
    1918:	317ff62e 	bgeu	r6,r5,18f4 <__alt_mem_onchip_memory+0xf78018f4>
    191c:	01400434 	movhi	r5,16
    1920:	297fffc4 	addi	r5,r5,-1
    1924:	28800236 	bltu	r5,r2,1930 <__fpclassifyd+0x60>
    1928:	008000c4 	movi	r2,3
    192c:	f800283a 	ret
    1930:	10c00226 	beq	r2,r3,193c <__fpclassifyd+0x6c>
    1934:	0005883a 	mov	r2,zero
    1938:	f800283a 	ret
    193c:	2005003a 	cmpeq	r2,r4,zero
    1940:	f800283a 	ret

00001944 <matherr>:
    1944:	0005883a 	mov	r2,zero
    1948:	f800283a 	ret

0000194c <__adddf3>:
    194c:	02c00434 	movhi	r11,16
    1950:	5affffc4 	addi	r11,r11,-1
    1954:	2806d7fa 	srli	r3,r5,31
    1958:	2ad4703a 	and	r10,r5,r11
    195c:	3ad2703a 	and	r9,r7,r11
    1960:	3804d53a 	srli	r2,r7,20
    1964:	3018d77a 	srli	r12,r6,29
    1968:	280ad53a 	srli	r5,r5,20
    196c:	501490fa 	slli	r10,r10,3
    1970:	2010d77a 	srli	r8,r4,29
    1974:	481290fa 	slli	r9,r9,3
    1978:	380ed7fa 	srli	r7,r7,31
    197c:	defffb04 	addi	sp,sp,-20
    1980:	dc800215 	stw	r18,8(sp)
    1984:	dc400115 	stw	r17,4(sp)
    1988:	dc000015 	stw	r16,0(sp)
    198c:	dfc00415 	stw	ra,16(sp)
    1990:	dcc00315 	stw	r19,12(sp)
    1994:	1c803fcc 	andi	r18,r3,255
    1998:	2c01ffcc 	andi	r16,r5,2047
    199c:	5210b03a 	or	r8,r10,r8
    19a0:	202290fa 	slli	r17,r4,3
    19a4:	1081ffcc 	andi	r2,r2,2047
    19a8:	4b12b03a 	or	r9,r9,r12
    19ac:	300c90fa 	slli	r6,r6,3
    19b0:	91c07526 	beq	r18,r7,1b88 <__adddf3+0x23c>
    19b4:	8087c83a 	sub	r3,r16,r2
    19b8:	00c0ab0e 	bge	zero,r3,1c68 <__adddf3+0x31c>
    19bc:	10002a1e 	bne	r2,zero,1a68 <__adddf3+0x11c>
    19c0:	4984b03a 	or	r2,r9,r6
    19c4:	1000961e 	bne	r2,zero,1c20 <__adddf3+0x2d4>
    19c8:	888001cc 	andi	r2,r17,7
    19cc:	10000726 	beq	r2,zero,19ec <__adddf3+0xa0>
    19d0:	888003cc 	andi	r2,r17,15
    19d4:	00c00104 	movi	r3,4
    19d8:	10c00426 	beq	r2,r3,19ec <__adddf3+0xa0>
    19dc:	88c7883a 	add	r3,r17,r3
    19e0:	1c63803a 	cmpltu	r17,r3,r17
    19e4:	4451883a 	add	r8,r8,r17
    19e8:	1823883a 	mov	r17,r3
    19ec:	4080202c 	andhi	r2,r8,128
    19f0:	10005926 	beq	r2,zero,1b58 <__adddf3+0x20c>
    19f4:	84000044 	addi	r16,r16,1
    19f8:	0081ffc4 	movi	r2,2047
    19fc:	8080ba26 	beq	r16,r2,1ce8 <__adddf3+0x39c>
    1a00:	00bfe034 	movhi	r2,65408
    1a04:	10bfffc4 	addi	r2,r2,-1
    1a08:	4090703a 	and	r8,r8,r2
    1a0c:	4004977a 	slli	r2,r8,29
    1a10:	4010927a 	slli	r8,r8,9
    1a14:	8822d0fa 	srli	r17,r17,3
    1a18:	8401ffcc 	andi	r16,r16,2047
    1a1c:	4010d33a 	srli	r8,r8,12
    1a20:	9007883a 	mov	r3,r18
    1a24:	1444b03a 	or	r2,r2,r17
    1a28:	8401ffcc 	andi	r16,r16,2047
    1a2c:	8020953a 	slli	r16,r16,20
    1a30:	18c03fcc 	andi	r3,r3,255
    1a34:	01000434 	movhi	r4,16
    1a38:	213fffc4 	addi	r4,r4,-1
    1a3c:	180697fa 	slli	r3,r3,31
    1a40:	4110703a 	and	r8,r8,r4
    1a44:	4410b03a 	or	r8,r8,r16
    1a48:	40c6b03a 	or	r3,r8,r3
    1a4c:	dfc00417 	ldw	ra,16(sp)
    1a50:	dcc00317 	ldw	r19,12(sp)
    1a54:	dc800217 	ldw	r18,8(sp)
    1a58:	dc400117 	ldw	r17,4(sp)
    1a5c:	dc000017 	ldw	r16,0(sp)
    1a60:	dec00504 	addi	sp,sp,20
    1a64:	f800283a 	ret
    1a68:	0081ffc4 	movi	r2,2047
    1a6c:	80bfd626 	beq	r16,r2,19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1a70:	4a402034 	orhi	r9,r9,128
    1a74:	00800e04 	movi	r2,56
    1a78:	10c09f16 	blt	r2,r3,1cf8 <__adddf3+0x3ac>
    1a7c:	008007c4 	movi	r2,31
    1a80:	10c0c216 	blt	r2,r3,1d8c <__adddf3+0x440>
    1a84:	00800804 	movi	r2,32
    1a88:	10c5c83a 	sub	r2,r2,r3
    1a8c:	488a983a 	sll	r5,r9,r2
    1a90:	30c8d83a 	srl	r4,r6,r3
    1a94:	3084983a 	sll	r2,r6,r2
    1a98:	48c6d83a 	srl	r3,r9,r3
    1a9c:	290cb03a 	or	r6,r5,r4
    1aa0:	1004c03a 	cmpne	r2,r2,zero
    1aa4:	308cb03a 	or	r6,r6,r2
    1aa8:	898dc83a 	sub	r6,r17,r6
    1aac:	89a3803a 	cmpltu	r17,r17,r6
    1ab0:	40d1c83a 	sub	r8,r8,r3
    1ab4:	4451c83a 	sub	r8,r8,r17
    1ab8:	3023883a 	mov	r17,r6
    1abc:	4080202c 	andhi	r2,r8,128
    1ac0:	10002326 	beq	r2,zero,1b50 <__adddf3+0x204>
    1ac4:	04c02034 	movhi	r19,128
    1ac8:	9cffffc4 	addi	r19,r19,-1
    1acc:	44e6703a 	and	r19,r8,r19
    1ad0:	98007626 	beq	r19,zero,1cac <__adddf3+0x360>
    1ad4:	9809883a 	mov	r4,r19
    1ad8:	0003ea00 	call	3ea0 <__clzsi2>
    1adc:	10fffe04 	addi	r3,r2,-8
    1ae0:	010007c4 	movi	r4,31
    1ae4:	20c07716 	blt	r4,r3,1cc4 <__adddf3+0x378>
    1ae8:	00800804 	movi	r2,32
    1aec:	10c5c83a 	sub	r2,r2,r3
    1af0:	8884d83a 	srl	r2,r17,r2
    1af4:	98d0983a 	sll	r8,r19,r3
    1af8:	88e2983a 	sll	r17,r17,r3
    1afc:	1204b03a 	or	r2,r2,r8
    1b00:	1c007416 	blt	r3,r16,1cd4 <__adddf3+0x388>
    1b04:	1c21c83a 	sub	r16,r3,r16
    1b08:	82000044 	addi	r8,r16,1
    1b0c:	00c007c4 	movi	r3,31
    1b10:	1a009116 	blt	r3,r8,1d58 <__adddf3+0x40c>
    1b14:	00c00804 	movi	r3,32
    1b18:	1a07c83a 	sub	r3,r3,r8
    1b1c:	8a08d83a 	srl	r4,r17,r8
    1b20:	88e2983a 	sll	r17,r17,r3
    1b24:	10c6983a 	sll	r3,r2,r3
    1b28:	1210d83a 	srl	r8,r2,r8
    1b2c:	8804c03a 	cmpne	r2,r17,zero
    1b30:	1906b03a 	or	r3,r3,r4
    1b34:	18a2b03a 	or	r17,r3,r2
    1b38:	0021883a 	mov	r16,zero
    1b3c:	003fa206 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1b40:	1890b03a 	or	r8,r3,r2
    1b44:	40017d26 	beq	r8,zero,213c <__adddf3+0x7f0>
    1b48:	1011883a 	mov	r8,r2
    1b4c:	1823883a 	mov	r17,r3
    1b50:	888001cc 	andi	r2,r17,7
    1b54:	103f9e1e 	bne	r2,zero,19d0 <__alt_mem_onchip_memory+0xf78019d0>
    1b58:	4004977a 	slli	r2,r8,29
    1b5c:	8822d0fa 	srli	r17,r17,3
    1b60:	4010d0fa 	srli	r8,r8,3
    1b64:	9007883a 	mov	r3,r18
    1b68:	1444b03a 	or	r2,r2,r17
    1b6c:	0101ffc4 	movi	r4,2047
    1b70:	81002426 	beq	r16,r4,1c04 <__adddf3+0x2b8>
    1b74:	8120703a 	and	r16,r16,r4
    1b78:	01000434 	movhi	r4,16
    1b7c:	213fffc4 	addi	r4,r4,-1
    1b80:	4110703a 	and	r8,r8,r4
    1b84:	003fa806 	br	1a28 <__alt_mem_onchip_memory+0xf7801a28>
    1b88:	8089c83a 	sub	r4,r16,r2
    1b8c:	01005e0e 	bge	zero,r4,1d08 <__adddf3+0x3bc>
    1b90:	10002b26 	beq	r2,zero,1c40 <__adddf3+0x2f4>
    1b94:	0081ffc4 	movi	r2,2047
    1b98:	80bf8b26 	beq	r16,r2,19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1b9c:	4a402034 	orhi	r9,r9,128
    1ba0:	00800e04 	movi	r2,56
    1ba4:	1100a40e 	bge	r2,r4,1e38 <__adddf3+0x4ec>
    1ba8:	498cb03a 	or	r6,r9,r6
    1bac:	300ac03a 	cmpne	r5,r6,zero
    1bb0:	0013883a 	mov	r9,zero
    1bb4:	2c4b883a 	add	r5,r5,r17
    1bb8:	2c63803a 	cmpltu	r17,r5,r17
    1bbc:	4a11883a 	add	r8,r9,r8
    1bc0:	8a11883a 	add	r8,r17,r8
    1bc4:	2823883a 	mov	r17,r5
    1bc8:	4080202c 	andhi	r2,r8,128
    1bcc:	103fe026 	beq	r2,zero,1b50 <__alt_mem_onchip_memory+0xf7801b50>
    1bd0:	84000044 	addi	r16,r16,1
    1bd4:	0081ffc4 	movi	r2,2047
    1bd8:	8080d226 	beq	r16,r2,1f24 <__adddf3+0x5d8>
    1bdc:	00bfe034 	movhi	r2,65408
    1be0:	10bfffc4 	addi	r2,r2,-1
    1be4:	4090703a 	and	r8,r8,r2
    1be8:	880ad07a 	srli	r5,r17,1
    1bec:	400897fa 	slli	r4,r8,31
    1bf0:	88c0004c 	andi	r3,r17,1
    1bf4:	28e2b03a 	or	r17,r5,r3
    1bf8:	4010d07a 	srli	r8,r8,1
    1bfc:	2462b03a 	or	r17,r4,r17
    1c00:	003f7106 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1c04:	4088b03a 	or	r4,r8,r2
    1c08:	20014526 	beq	r4,zero,2120 <__adddf3+0x7d4>
    1c0c:	01000434 	movhi	r4,16
    1c10:	42000234 	orhi	r8,r8,8
    1c14:	213fffc4 	addi	r4,r4,-1
    1c18:	4110703a 	and	r8,r8,r4
    1c1c:	003f8206 	br	1a28 <__alt_mem_onchip_memory+0xf7801a28>
    1c20:	18ffffc4 	addi	r3,r3,-1
    1c24:	1800491e 	bne	r3,zero,1d4c <__adddf3+0x400>
    1c28:	898bc83a 	sub	r5,r17,r6
    1c2c:	8963803a 	cmpltu	r17,r17,r5
    1c30:	4251c83a 	sub	r8,r8,r9
    1c34:	4451c83a 	sub	r8,r8,r17
    1c38:	2823883a 	mov	r17,r5
    1c3c:	003f9f06 	br	1abc <__alt_mem_onchip_memory+0xf7801abc>
    1c40:	4984b03a 	or	r2,r9,r6
    1c44:	103f6026 	beq	r2,zero,19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1c48:	213fffc4 	addi	r4,r4,-1
    1c4c:	2000931e 	bne	r4,zero,1e9c <__adddf3+0x550>
    1c50:	898d883a 	add	r6,r17,r6
    1c54:	3463803a 	cmpltu	r17,r6,r17
    1c58:	4251883a 	add	r8,r8,r9
    1c5c:	8a11883a 	add	r8,r17,r8
    1c60:	3023883a 	mov	r17,r6
    1c64:	003fd806 	br	1bc8 <__alt_mem_onchip_memory+0xf7801bc8>
    1c68:	1800541e 	bne	r3,zero,1dbc <__adddf3+0x470>
    1c6c:	80800044 	addi	r2,r16,1
    1c70:	1081ffcc 	andi	r2,r2,2047
    1c74:	00c00044 	movi	r3,1
    1c78:	1880a00e 	bge	r3,r2,1efc <__adddf3+0x5b0>
    1c7c:	8989c83a 	sub	r4,r17,r6
    1c80:	8905803a 	cmpltu	r2,r17,r4
    1c84:	4267c83a 	sub	r19,r8,r9
    1c88:	98a7c83a 	sub	r19,r19,r2
    1c8c:	9880202c 	andhi	r2,r19,128
    1c90:	10006326 	beq	r2,zero,1e20 <__adddf3+0x4d4>
    1c94:	3463c83a 	sub	r17,r6,r17
    1c98:	4a07c83a 	sub	r3,r9,r8
    1c9c:	344d803a 	cmpltu	r6,r6,r17
    1ca0:	19a7c83a 	sub	r19,r3,r6
    1ca4:	3825883a 	mov	r18,r7
    1ca8:	983f8a1e 	bne	r19,zero,1ad4 <__alt_mem_onchip_memory+0xf7801ad4>
    1cac:	8809883a 	mov	r4,r17
    1cb0:	0003ea00 	call	3ea0 <__clzsi2>
    1cb4:	10800804 	addi	r2,r2,32
    1cb8:	10fffe04 	addi	r3,r2,-8
    1cbc:	010007c4 	movi	r4,31
    1cc0:	20ff890e 	bge	r4,r3,1ae8 <__alt_mem_onchip_memory+0xf7801ae8>
    1cc4:	10bff604 	addi	r2,r2,-40
    1cc8:	8884983a 	sll	r2,r17,r2
    1ccc:	0023883a 	mov	r17,zero
    1cd0:	1c3f8c0e 	bge	r3,r16,1b04 <__alt_mem_onchip_memory+0xf7801b04>
    1cd4:	023fe034 	movhi	r8,65408
    1cd8:	423fffc4 	addi	r8,r8,-1
    1cdc:	80e1c83a 	sub	r16,r16,r3
    1ce0:	1210703a 	and	r8,r2,r8
    1ce4:	003f3806 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1ce8:	9007883a 	mov	r3,r18
    1cec:	0011883a 	mov	r8,zero
    1cf0:	0005883a 	mov	r2,zero
    1cf4:	003f4c06 	br	1a28 <__alt_mem_onchip_memory+0xf7801a28>
    1cf8:	498cb03a 	or	r6,r9,r6
    1cfc:	300cc03a 	cmpne	r6,r6,zero
    1d00:	0007883a 	mov	r3,zero
    1d04:	003f6806 	br	1aa8 <__alt_mem_onchip_memory+0xf7801aa8>
    1d08:	20009c1e 	bne	r4,zero,1f7c <__adddf3+0x630>
    1d0c:	80800044 	addi	r2,r16,1
    1d10:	1141ffcc 	andi	r5,r2,2047
    1d14:	01000044 	movi	r4,1
    1d18:	2140670e 	bge	r4,r5,1eb8 <__adddf3+0x56c>
    1d1c:	0101ffc4 	movi	r4,2047
    1d20:	11007f26 	beq	r2,r4,1f20 <__adddf3+0x5d4>
    1d24:	898d883a 	add	r6,r17,r6
    1d28:	4247883a 	add	r3,r8,r9
    1d2c:	3451803a 	cmpltu	r8,r6,r17
    1d30:	40d1883a 	add	r8,r8,r3
    1d34:	402297fa 	slli	r17,r8,31
    1d38:	300cd07a 	srli	r6,r6,1
    1d3c:	4010d07a 	srli	r8,r8,1
    1d40:	1021883a 	mov	r16,r2
    1d44:	89a2b03a 	or	r17,r17,r6
    1d48:	003f1f06 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1d4c:	0081ffc4 	movi	r2,2047
    1d50:	80bf481e 	bne	r16,r2,1a74 <__alt_mem_onchip_memory+0xf7801a74>
    1d54:	003f1c06 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1d58:	843ff844 	addi	r16,r16,-31
    1d5c:	01000804 	movi	r4,32
    1d60:	1406d83a 	srl	r3,r2,r16
    1d64:	41005026 	beq	r8,r4,1ea8 <__adddf3+0x55c>
    1d68:	01001004 	movi	r4,64
    1d6c:	2211c83a 	sub	r8,r4,r8
    1d70:	1204983a 	sll	r2,r2,r8
    1d74:	88a2b03a 	or	r17,r17,r2
    1d78:	8822c03a 	cmpne	r17,r17,zero
    1d7c:	1c62b03a 	or	r17,r3,r17
    1d80:	0011883a 	mov	r8,zero
    1d84:	0021883a 	mov	r16,zero
    1d88:	003f7106 	br	1b50 <__alt_mem_onchip_memory+0xf7801b50>
    1d8c:	193ff804 	addi	r4,r3,-32
    1d90:	00800804 	movi	r2,32
    1d94:	4908d83a 	srl	r4,r9,r4
    1d98:	18804526 	beq	r3,r2,1eb0 <__adddf3+0x564>
    1d9c:	00801004 	movi	r2,64
    1da0:	10c5c83a 	sub	r2,r2,r3
    1da4:	4886983a 	sll	r3,r9,r2
    1da8:	198cb03a 	or	r6,r3,r6
    1dac:	300cc03a 	cmpne	r6,r6,zero
    1db0:	218cb03a 	or	r6,r4,r6
    1db4:	0007883a 	mov	r3,zero
    1db8:	003f3b06 	br	1aa8 <__alt_mem_onchip_memory+0xf7801aa8>
    1dbc:	80002a26 	beq	r16,zero,1e68 <__adddf3+0x51c>
    1dc0:	0101ffc4 	movi	r4,2047
    1dc4:	11006826 	beq	r2,r4,1f68 <__adddf3+0x61c>
    1dc8:	00c7c83a 	sub	r3,zero,r3
    1dcc:	42002034 	orhi	r8,r8,128
    1dd0:	01000e04 	movi	r4,56
    1dd4:	20c07c16 	blt	r4,r3,1fc8 <__adddf3+0x67c>
    1dd8:	010007c4 	movi	r4,31
    1ddc:	20c0da16 	blt	r4,r3,2148 <__adddf3+0x7fc>
    1de0:	01000804 	movi	r4,32
    1de4:	20c9c83a 	sub	r4,r4,r3
    1de8:	4114983a 	sll	r10,r8,r4
    1dec:	88cad83a 	srl	r5,r17,r3
    1df0:	8908983a 	sll	r4,r17,r4
    1df4:	40c6d83a 	srl	r3,r8,r3
    1df8:	5162b03a 	or	r17,r10,r5
    1dfc:	2008c03a 	cmpne	r4,r4,zero
    1e00:	8922b03a 	or	r17,r17,r4
    1e04:	3463c83a 	sub	r17,r6,r17
    1e08:	48c7c83a 	sub	r3,r9,r3
    1e0c:	344d803a 	cmpltu	r6,r6,r17
    1e10:	1991c83a 	sub	r8,r3,r6
    1e14:	1021883a 	mov	r16,r2
    1e18:	3825883a 	mov	r18,r7
    1e1c:	003f2706 	br	1abc <__alt_mem_onchip_memory+0xf7801abc>
    1e20:	24d0b03a 	or	r8,r4,r19
    1e24:	40001b1e 	bne	r8,zero,1e94 <__adddf3+0x548>
    1e28:	0005883a 	mov	r2,zero
    1e2c:	0007883a 	mov	r3,zero
    1e30:	0021883a 	mov	r16,zero
    1e34:	003f4d06 	br	1b6c <__alt_mem_onchip_memory+0xf7801b6c>
    1e38:	008007c4 	movi	r2,31
    1e3c:	11003c16 	blt	r2,r4,1f30 <__adddf3+0x5e4>
    1e40:	00800804 	movi	r2,32
    1e44:	1105c83a 	sub	r2,r2,r4
    1e48:	488e983a 	sll	r7,r9,r2
    1e4c:	310ad83a 	srl	r5,r6,r4
    1e50:	3084983a 	sll	r2,r6,r2
    1e54:	4912d83a 	srl	r9,r9,r4
    1e58:	394ab03a 	or	r5,r7,r5
    1e5c:	1004c03a 	cmpne	r2,r2,zero
    1e60:	288ab03a 	or	r5,r5,r2
    1e64:	003f5306 	br	1bb4 <__alt_mem_onchip_memory+0xf7801bb4>
    1e68:	4448b03a 	or	r4,r8,r17
    1e6c:	20003e26 	beq	r4,zero,1f68 <__adddf3+0x61c>
    1e70:	00c6303a 	nor	r3,zero,r3
    1e74:	18003a1e 	bne	r3,zero,1f60 <__adddf3+0x614>
    1e78:	3463c83a 	sub	r17,r6,r17
    1e7c:	4a07c83a 	sub	r3,r9,r8
    1e80:	344d803a 	cmpltu	r6,r6,r17
    1e84:	1991c83a 	sub	r8,r3,r6
    1e88:	1021883a 	mov	r16,r2
    1e8c:	3825883a 	mov	r18,r7
    1e90:	003f0a06 	br	1abc <__alt_mem_onchip_memory+0xf7801abc>
    1e94:	2023883a 	mov	r17,r4
    1e98:	003f0d06 	br	1ad0 <__alt_mem_onchip_memory+0xf7801ad0>
    1e9c:	0081ffc4 	movi	r2,2047
    1ea0:	80bf3f1e 	bne	r16,r2,1ba0 <__alt_mem_onchip_memory+0xf7801ba0>
    1ea4:	003ec806 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1ea8:	0005883a 	mov	r2,zero
    1eac:	003fb106 	br	1d74 <__alt_mem_onchip_memory+0xf7801d74>
    1eb0:	0007883a 	mov	r3,zero
    1eb4:	003fbc06 	br	1da8 <__alt_mem_onchip_memory+0xf7801da8>
    1eb8:	4444b03a 	or	r2,r8,r17
    1ebc:	8000871e 	bne	r16,zero,20dc <__adddf3+0x790>
    1ec0:	1000ba26 	beq	r2,zero,21ac <__adddf3+0x860>
    1ec4:	4984b03a 	or	r2,r9,r6
    1ec8:	103ebf26 	beq	r2,zero,19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1ecc:	8985883a 	add	r2,r17,r6
    1ed0:	4247883a 	add	r3,r8,r9
    1ed4:	1451803a 	cmpltu	r8,r2,r17
    1ed8:	40d1883a 	add	r8,r8,r3
    1edc:	40c0202c 	andhi	r3,r8,128
    1ee0:	1023883a 	mov	r17,r2
    1ee4:	183f1a26 	beq	r3,zero,1b50 <__alt_mem_onchip_memory+0xf7801b50>
    1ee8:	00bfe034 	movhi	r2,65408
    1eec:	10bfffc4 	addi	r2,r2,-1
    1ef0:	2021883a 	mov	r16,r4
    1ef4:	4090703a 	and	r8,r8,r2
    1ef8:	003eb306 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1efc:	4444b03a 	or	r2,r8,r17
    1f00:	8000291e 	bne	r16,zero,1fa8 <__adddf3+0x65c>
    1f04:	10004b1e 	bne	r2,zero,2034 <__adddf3+0x6e8>
    1f08:	4990b03a 	or	r8,r9,r6
    1f0c:	40008b26 	beq	r8,zero,213c <__adddf3+0x7f0>
    1f10:	4811883a 	mov	r8,r9
    1f14:	3023883a 	mov	r17,r6
    1f18:	3825883a 	mov	r18,r7
    1f1c:	003eaa06 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1f20:	1021883a 	mov	r16,r2
    1f24:	0011883a 	mov	r8,zero
    1f28:	0005883a 	mov	r2,zero
    1f2c:	003f0f06 	br	1b6c <__alt_mem_onchip_memory+0xf7801b6c>
    1f30:	217ff804 	addi	r5,r4,-32
    1f34:	00800804 	movi	r2,32
    1f38:	494ad83a 	srl	r5,r9,r5
    1f3c:	20807d26 	beq	r4,r2,2134 <__adddf3+0x7e8>
    1f40:	00801004 	movi	r2,64
    1f44:	1109c83a 	sub	r4,r2,r4
    1f48:	4912983a 	sll	r9,r9,r4
    1f4c:	498cb03a 	or	r6,r9,r6
    1f50:	300cc03a 	cmpne	r6,r6,zero
    1f54:	298ab03a 	or	r5,r5,r6
    1f58:	0013883a 	mov	r9,zero
    1f5c:	003f1506 	br	1bb4 <__alt_mem_onchip_memory+0xf7801bb4>
    1f60:	0101ffc4 	movi	r4,2047
    1f64:	113f9a1e 	bne	r2,r4,1dd0 <__alt_mem_onchip_memory+0xf7801dd0>
    1f68:	4811883a 	mov	r8,r9
    1f6c:	3023883a 	mov	r17,r6
    1f70:	1021883a 	mov	r16,r2
    1f74:	3825883a 	mov	r18,r7
    1f78:	003e9306 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1f7c:	8000161e 	bne	r16,zero,1fd8 <__adddf3+0x68c>
    1f80:	444ab03a 	or	r5,r8,r17
    1f84:	28005126 	beq	r5,zero,20cc <__adddf3+0x780>
    1f88:	0108303a 	nor	r4,zero,r4
    1f8c:	20004d1e 	bne	r4,zero,20c4 <__adddf3+0x778>
    1f90:	89a3883a 	add	r17,r17,r6
    1f94:	4253883a 	add	r9,r8,r9
    1f98:	898d803a 	cmpltu	r6,r17,r6
    1f9c:	3251883a 	add	r8,r6,r9
    1fa0:	1021883a 	mov	r16,r2
    1fa4:	003f0806 	br	1bc8 <__alt_mem_onchip_memory+0xf7801bc8>
    1fa8:	1000301e 	bne	r2,zero,206c <__adddf3+0x720>
    1fac:	4984b03a 	or	r2,r9,r6
    1fb0:	10007126 	beq	r2,zero,2178 <__adddf3+0x82c>
    1fb4:	4811883a 	mov	r8,r9
    1fb8:	3023883a 	mov	r17,r6
    1fbc:	3825883a 	mov	r18,r7
    1fc0:	0401ffc4 	movi	r16,2047
    1fc4:	003e8006 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    1fc8:	4462b03a 	or	r17,r8,r17
    1fcc:	8822c03a 	cmpne	r17,r17,zero
    1fd0:	0007883a 	mov	r3,zero
    1fd4:	003f8b06 	br	1e04 <__alt_mem_onchip_memory+0xf7801e04>
    1fd8:	0141ffc4 	movi	r5,2047
    1fdc:	11403b26 	beq	r2,r5,20cc <__adddf3+0x780>
    1fe0:	0109c83a 	sub	r4,zero,r4
    1fe4:	42002034 	orhi	r8,r8,128
    1fe8:	01400e04 	movi	r5,56
    1fec:	29006716 	blt	r5,r4,218c <__adddf3+0x840>
    1ff0:	014007c4 	movi	r5,31
    1ff4:	29007016 	blt	r5,r4,21b8 <__adddf3+0x86c>
    1ff8:	01400804 	movi	r5,32
    1ffc:	290bc83a 	sub	r5,r5,r4
    2000:	4154983a 	sll	r10,r8,r5
    2004:	890ed83a 	srl	r7,r17,r4
    2008:	894a983a 	sll	r5,r17,r5
    200c:	4108d83a 	srl	r4,r8,r4
    2010:	51e2b03a 	or	r17,r10,r7
    2014:	280ac03a 	cmpne	r5,r5,zero
    2018:	8962b03a 	or	r17,r17,r5
    201c:	89a3883a 	add	r17,r17,r6
    2020:	2253883a 	add	r9,r4,r9
    2024:	898d803a 	cmpltu	r6,r17,r6
    2028:	3251883a 	add	r8,r6,r9
    202c:	1021883a 	mov	r16,r2
    2030:	003ee506 	br	1bc8 <__alt_mem_onchip_memory+0xf7801bc8>
    2034:	4984b03a 	or	r2,r9,r6
    2038:	103e6326 	beq	r2,zero,19c8 <__alt_mem_onchip_memory+0xf78019c8>
    203c:	8987c83a 	sub	r3,r17,r6
    2040:	88c9803a 	cmpltu	r4,r17,r3
    2044:	4245c83a 	sub	r2,r8,r9
    2048:	1105c83a 	sub	r2,r2,r4
    204c:	1100202c 	andhi	r4,r2,128
    2050:	203ebb26 	beq	r4,zero,1b40 <__alt_mem_onchip_memory+0xf7801b40>
    2054:	3463c83a 	sub	r17,r6,r17
    2058:	4a07c83a 	sub	r3,r9,r8
    205c:	344d803a 	cmpltu	r6,r6,r17
    2060:	1991c83a 	sub	r8,r3,r6
    2064:	3825883a 	mov	r18,r7
    2068:	003e5706 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    206c:	4984b03a 	or	r2,r9,r6
    2070:	10002e26 	beq	r2,zero,212c <__adddf3+0x7e0>
    2074:	4004d0fa 	srli	r2,r8,3
    2078:	8822d0fa 	srli	r17,r17,3
    207c:	4010977a 	slli	r8,r8,29
    2080:	10c0022c 	andhi	r3,r2,8
    2084:	4462b03a 	or	r17,r8,r17
    2088:	18000826 	beq	r3,zero,20ac <__adddf3+0x760>
    208c:	4808d0fa 	srli	r4,r9,3
    2090:	20c0022c 	andhi	r3,r4,8
    2094:	1800051e 	bne	r3,zero,20ac <__adddf3+0x760>
    2098:	300cd0fa 	srli	r6,r6,3
    209c:	4806977a 	slli	r3,r9,29
    20a0:	2005883a 	mov	r2,r4
    20a4:	3825883a 	mov	r18,r7
    20a8:	19a2b03a 	or	r17,r3,r6
    20ac:	8810d77a 	srli	r8,r17,29
    20b0:	100490fa 	slli	r2,r2,3
    20b4:	882290fa 	slli	r17,r17,3
    20b8:	0401ffc4 	movi	r16,2047
    20bc:	4090b03a 	or	r8,r8,r2
    20c0:	003e4106 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    20c4:	0141ffc4 	movi	r5,2047
    20c8:	117fc71e 	bne	r2,r5,1fe8 <__alt_mem_onchip_memory+0xf7801fe8>
    20cc:	4811883a 	mov	r8,r9
    20d0:	3023883a 	mov	r17,r6
    20d4:	1021883a 	mov	r16,r2
    20d8:	003e3b06 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    20dc:	10002f26 	beq	r2,zero,219c <__adddf3+0x850>
    20e0:	4984b03a 	or	r2,r9,r6
    20e4:	10001126 	beq	r2,zero,212c <__adddf3+0x7e0>
    20e8:	4004d0fa 	srli	r2,r8,3
    20ec:	8822d0fa 	srli	r17,r17,3
    20f0:	4010977a 	slli	r8,r8,29
    20f4:	10c0022c 	andhi	r3,r2,8
    20f8:	4462b03a 	or	r17,r8,r17
    20fc:	183feb26 	beq	r3,zero,20ac <__alt_mem_onchip_memory+0xf78020ac>
    2100:	4808d0fa 	srli	r4,r9,3
    2104:	20c0022c 	andhi	r3,r4,8
    2108:	183fe81e 	bne	r3,zero,20ac <__alt_mem_onchip_memory+0xf78020ac>
    210c:	300cd0fa 	srli	r6,r6,3
    2110:	4806977a 	slli	r3,r9,29
    2114:	2005883a 	mov	r2,r4
    2118:	19a2b03a 	or	r17,r3,r6
    211c:	003fe306 	br	20ac <__alt_mem_onchip_memory+0xf78020ac>
    2120:	0011883a 	mov	r8,zero
    2124:	0005883a 	mov	r2,zero
    2128:	003e3f06 	br	1a28 <__alt_mem_onchip_memory+0xf7801a28>
    212c:	0401ffc4 	movi	r16,2047
    2130:	003e2506 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    2134:	0013883a 	mov	r9,zero
    2138:	003f8406 	br	1f4c <__alt_mem_onchip_memory+0xf7801f4c>
    213c:	0005883a 	mov	r2,zero
    2140:	0007883a 	mov	r3,zero
    2144:	003e8906 	br	1b6c <__alt_mem_onchip_memory+0xf7801b6c>
    2148:	197ff804 	addi	r5,r3,-32
    214c:	01000804 	movi	r4,32
    2150:	414ad83a 	srl	r5,r8,r5
    2154:	19002426 	beq	r3,r4,21e8 <__adddf3+0x89c>
    2158:	01001004 	movi	r4,64
    215c:	20c7c83a 	sub	r3,r4,r3
    2160:	40c6983a 	sll	r3,r8,r3
    2164:	1c46b03a 	or	r3,r3,r17
    2168:	1806c03a 	cmpne	r3,r3,zero
    216c:	28e2b03a 	or	r17,r5,r3
    2170:	0007883a 	mov	r3,zero
    2174:	003f2306 	br	1e04 <__alt_mem_onchip_memory+0xf7801e04>
    2178:	0007883a 	mov	r3,zero
    217c:	5811883a 	mov	r8,r11
    2180:	00bfffc4 	movi	r2,-1
    2184:	0401ffc4 	movi	r16,2047
    2188:	003e7806 	br	1b6c <__alt_mem_onchip_memory+0xf7801b6c>
    218c:	4462b03a 	or	r17,r8,r17
    2190:	8822c03a 	cmpne	r17,r17,zero
    2194:	0009883a 	mov	r4,zero
    2198:	003fa006 	br	201c <__alt_mem_onchip_memory+0xf780201c>
    219c:	4811883a 	mov	r8,r9
    21a0:	3023883a 	mov	r17,r6
    21a4:	0401ffc4 	movi	r16,2047
    21a8:	003e0706 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    21ac:	4811883a 	mov	r8,r9
    21b0:	3023883a 	mov	r17,r6
    21b4:	003e0406 	br	19c8 <__alt_mem_onchip_memory+0xf78019c8>
    21b8:	21fff804 	addi	r7,r4,-32
    21bc:	01400804 	movi	r5,32
    21c0:	41ced83a 	srl	r7,r8,r7
    21c4:	21400a26 	beq	r4,r5,21f0 <__adddf3+0x8a4>
    21c8:	01401004 	movi	r5,64
    21cc:	2909c83a 	sub	r4,r5,r4
    21d0:	4108983a 	sll	r4,r8,r4
    21d4:	2448b03a 	or	r4,r4,r17
    21d8:	2008c03a 	cmpne	r4,r4,zero
    21dc:	3922b03a 	or	r17,r7,r4
    21e0:	0009883a 	mov	r4,zero
    21e4:	003f8d06 	br	201c <__alt_mem_onchip_memory+0xf780201c>
    21e8:	0007883a 	mov	r3,zero
    21ec:	003fdd06 	br	2164 <__alt_mem_onchip_memory+0xf7802164>
    21f0:	0009883a 	mov	r4,zero
    21f4:	003ff706 	br	21d4 <__alt_mem_onchip_memory+0xf78021d4>

000021f8 <__divdf3>:
    21f8:	defff204 	addi	sp,sp,-56
    21fc:	dd400915 	stw	r21,36(sp)
    2200:	282ad53a 	srli	r21,r5,20
    2204:	dd000815 	stw	r20,32(sp)
    2208:	2828d7fa 	srli	r20,r5,31
    220c:	dc000415 	stw	r16,16(sp)
    2210:	04000434 	movhi	r16,16
    2214:	df000c15 	stw	fp,48(sp)
    2218:	843fffc4 	addi	r16,r16,-1
    221c:	dfc00d15 	stw	ra,52(sp)
    2220:	ddc00b15 	stw	r23,44(sp)
    2224:	dd800a15 	stw	r22,40(sp)
    2228:	dcc00715 	stw	r19,28(sp)
    222c:	dc800615 	stw	r18,24(sp)
    2230:	dc400515 	stw	r17,20(sp)
    2234:	ad41ffcc 	andi	r21,r21,2047
    2238:	2c20703a 	and	r16,r5,r16
    223c:	a7003fcc 	andi	fp,r20,255
    2240:	a8006126 	beq	r21,zero,23c8 <__divdf3+0x1d0>
    2244:	0081ffc4 	movi	r2,2047
    2248:	2025883a 	mov	r18,r4
    224c:	a8803726 	beq	r21,r2,232c <__divdf3+0x134>
    2250:	80800434 	orhi	r2,r16,16
    2254:	100490fa 	slli	r2,r2,3
    2258:	2020d77a 	srli	r16,r4,29
    225c:	202490fa 	slli	r18,r4,3
    2260:	ad7f0044 	addi	r21,r21,-1023
    2264:	80a0b03a 	or	r16,r16,r2
    2268:	0027883a 	mov	r19,zero
    226c:	0013883a 	mov	r9,zero
    2270:	3804d53a 	srli	r2,r7,20
    2274:	382cd7fa 	srli	r22,r7,31
    2278:	04400434 	movhi	r17,16
    227c:	8c7fffc4 	addi	r17,r17,-1
    2280:	1081ffcc 	andi	r2,r2,2047
    2284:	3011883a 	mov	r8,r6
    2288:	3c62703a 	and	r17,r7,r17
    228c:	b5c03fcc 	andi	r23,r22,255
    2290:	10006c26 	beq	r2,zero,2444 <__divdf3+0x24c>
    2294:	00c1ffc4 	movi	r3,2047
    2298:	10c06426 	beq	r2,r3,242c <__divdf3+0x234>
    229c:	88c00434 	orhi	r3,r17,16
    22a0:	180690fa 	slli	r3,r3,3
    22a4:	3022d77a 	srli	r17,r6,29
    22a8:	301090fa 	slli	r8,r6,3
    22ac:	10bf0044 	addi	r2,r2,-1023
    22b0:	88e2b03a 	or	r17,r17,r3
    22b4:	000f883a 	mov	r7,zero
    22b8:	a58cf03a 	xor	r6,r20,r22
    22bc:	3cc8b03a 	or	r4,r7,r19
    22c0:	a8abc83a 	sub	r21,r21,r2
    22c4:	008003c4 	movi	r2,15
    22c8:	3007883a 	mov	r3,r6
    22cc:	34c03fcc 	andi	r19,r6,255
    22d0:	11009036 	bltu	r2,r4,2514 <__divdf3+0x31c>
    22d4:	200890ba 	slli	r4,r4,2
    22d8:	00800034 	movhi	r2,0
    22dc:	1088bb04 	addi	r2,r2,8940
    22e0:	2089883a 	add	r4,r4,r2
    22e4:	20800017 	ldw	r2,0(r4)
    22e8:	1000683a 	jmp	r2
    22ec:	00002514 	movui	zero,148
    22f0:	00002364 	muli	zero,zero,141
    22f4:	00002504 	movi	zero,148
    22f8:	00002358 	cmpnei	zero,zero,141
    22fc:	00002504 	movi	zero,148
    2300:	000024d8 	cmpnei	zero,zero,147
    2304:	00002504 	movi	zero,148
    2308:	00002358 	cmpnei	zero,zero,141
    230c:	00002364 	muli	zero,zero,141
    2310:	00002364 	muli	zero,zero,141
    2314:	000024d8 	cmpnei	zero,zero,147
    2318:	00002358 	cmpnei	zero,zero,141
    231c:	00002348 	cmpgei	zero,zero,141
    2320:	00002348 	cmpgei	zero,zero,141
    2324:	00002348 	cmpgei	zero,zero,141
    2328:	000027f8 	rdprs	zero,zero,159
    232c:	2404b03a 	or	r2,r4,r16
    2330:	1000661e 	bne	r2,zero,24cc <__divdf3+0x2d4>
    2334:	04c00204 	movi	r19,8
    2338:	0021883a 	mov	r16,zero
    233c:	0025883a 	mov	r18,zero
    2340:	02400084 	movi	r9,2
    2344:	003fca06 	br	2270 <__alt_mem_onchip_memory+0xf7802270>
    2348:	8023883a 	mov	r17,r16
    234c:	9011883a 	mov	r8,r18
    2350:	e02f883a 	mov	r23,fp
    2354:	480f883a 	mov	r7,r9
    2358:	00800084 	movi	r2,2
    235c:	3881311e 	bne	r7,r2,2824 <__divdf3+0x62c>
    2360:	b827883a 	mov	r19,r23
    2364:	98c0004c 	andi	r3,r19,1
    2368:	0081ffc4 	movi	r2,2047
    236c:	000b883a 	mov	r5,zero
    2370:	0025883a 	mov	r18,zero
    2374:	1004953a 	slli	r2,r2,20
    2378:	18c03fcc 	andi	r3,r3,255
    237c:	04400434 	movhi	r17,16
    2380:	8c7fffc4 	addi	r17,r17,-1
    2384:	180697fa 	slli	r3,r3,31
    2388:	2c4a703a 	and	r5,r5,r17
    238c:	288ab03a 	or	r5,r5,r2
    2390:	28c6b03a 	or	r3,r5,r3
    2394:	9005883a 	mov	r2,r18
    2398:	dfc00d17 	ldw	ra,52(sp)
    239c:	df000c17 	ldw	fp,48(sp)
    23a0:	ddc00b17 	ldw	r23,44(sp)
    23a4:	dd800a17 	ldw	r22,40(sp)
    23a8:	dd400917 	ldw	r21,36(sp)
    23ac:	dd000817 	ldw	r20,32(sp)
    23b0:	dcc00717 	ldw	r19,28(sp)
    23b4:	dc800617 	ldw	r18,24(sp)
    23b8:	dc400517 	ldw	r17,20(sp)
    23bc:	dc000417 	ldw	r16,16(sp)
    23c0:	dec00e04 	addi	sp,sp,56
    23c4:	f800283a 	ret
    23c8:	2404b03a 	or	r2,r4,r16
    23cc:	2027883a 	mov	r19,r4
    23d0:	10003926 	beq	r2,zero,24b8 <__divdf3+0x2c0>
    23d4:	80012e26 	beq	r16,zero,2890 <__divdf3+0x698>
    23d8:	8009883a 	mov	r4,r16
    23dc:	d9800315 	stw	r6,12(sp)
    23e0:	d9c00215 	stw	r7,8(sp)
    23e4:	0003ea00 	call	3ea0 <__clzsi2>
    23e8:	d9800317 	ldw	r6,12(sp)
    23ec:	d9c00217 	ldw	r7,8(sp)
    23f0:	113ffd44 	addi	r4,r2,-11
    23f4:	00c00704 	movi	r3,28
    23f8:	19012116 	blt	r3,r4,2880 <__divdf3+0x688>
    23fc:	00c00744 	movi	r3,29
    2400:	147ffe04 	addi	r17,r2,-8
    2404:	1907c83a 	sub	r3,r3,r4
    2408:	8460983a 	sll	r16,r16,r17
    240c:	98c6d83a 	srl	r3,r19,r3
    2410:	9c64983a 	sll	r18,r19,r17
    2414:	1c20b03a 	or	r16,r3,r16
    2418:	1080fcc4 	addi	r2,r2,1011
    241c:	00abc83a 	sub	r21,zero,r2
    2420:	0027883a 	mov	r19,zero
    2424:	0013883a 	mov	r9,zero
    2428:	003f9106 	br	2270 <__alt_mem_onchip_memory+0xf7802270>
    242c:	3446b03a 	or	r3,r6,r17
    2430:	18001f1e 	bne	r3,zero,24b0 <__divdf3+0x2b8>
    2434:	0023883a 	mov	r17,zero
    2438:	0011883a 	mov	r8,zero
    243c:	01c00084 	movi	r7,2
    2440:	003f9d06 	br	22b8 <__alt_mem_onchip_memory+0xf78022b8>
    2444:	3446b03a 	or	r3,r6,r17
    2448:	18001526 	beq	r3,zero,24a0 <__divdf3+0x2a8>
    244c:	88011b26 	beq	r17,zero,28bc <__divdf3+0x6c4>
    2450:	8809883a 	mov	r4,r17
    2454:	d9800315 	stw	r6,12(sp)
    2458:	da400115 	stw	r9,4(sp)
    245c:	0003ea00 	call	3ea0 <__clzsi2>
    2460:	d9800317 	ldw	r6,12(sp)
    2464:	da400117 	ldw	r9,4(sp)
    2468:	113ffd44 	addi	r4,r2,-11
    246c:	00c00704 	movi	r3,28
    2470:	19010e16 	blt	r3,r4,28ac <__divdf3+0x6b4>
    2474:	00c00744 	movi	r3,29
    2478:	123ffe04 	addi	r8,r2,-8
    247c:	1907c83a 	sub	r3,r3,r4
    2480:	8a22983a 	sll	r17,r17,r8
    2484:	30c6d83a 	srl	r3,r6,r3
    2488:	3210983a 	sll	r8,r6,r8
    248c:	1c62b03a 	or	r17,r3,r17
    2490:	1080fcc4 	addi	r2,r2,1011
    2494:	0085c83a 	sub	r2,zero,r2
    2498:	000f883a 	mov	r7,zero
    249c:	003f8606 	br	22b8 <__alt_mem_onchip_memory+0xf78022b8>
    24a0:	0023883a 	mov	r17,zero
    24a4:	0011883a 	mov	r8,zero
    24a8:	01c00044 	movi	r7,1
    24ac:	003f8206 	br	22b8 <__alt_mem_onchip_memory+0xf78022b8>
    24b0:	01c000c4 	movi	r7,3
    24b4:	003f8006 	br	22b8 <__alt_mem_onchip_memory+0xf78022b8>
    24b8:	04c00104 	movi	r19,4
    24bc:	0021883a 	mov	r16,zero
    24c0:	0025883a 	mov	r18,zero
    24c4:	02400044 	movi	r9,1
    24c8:	003f6906 	br	2270 <__alt_mem_onchip_memory+0xf7802270>
    24cc:	04c00304 	movi	r19,12
    24d0:	024000c4 	movi	r9,3
    24d4:	003f6606 	br	2270 <__alt_mem_onchip_memory+0xf7802270>
    24d8:	01400434 	movhi	r5,16
    24dc:	0007883a 	mov	r3,zero
    24e0:	297fffc4 	addi	r5,r5,-1
    24e4:	04bfffc4 	movi	r18,-1
    24e8:	0081ffc4 	movi	r2,2047
    24ec:	003fa106 	br	2374 <__alt_mem_onchip_memory+0xf7802374>
    24f0:	00c00044 	movi	r3,1
    24f4:	1887c83a 	sub	r3,r3,r2
    24f8:	01000e04 	movi	r4,56
    24fc:	20c1210e 	bge	r4,r3,2984 <__divdf3+0x78c>
    2500:	98c0004c 	andi	r3,r19,1
    2504:	0005883a 	mov	r2,zero
    2508:	000b883a 	mov	r5,zero
    250c:	0025883a 	mov	r18,zero
    2510:	003f9806 	br	2374 <__alt_mem_onchip_memory+0xf7802374>
    2514:	8c00fd36 	bltu	r17,r16,290c <__divdf3+0x714>
    2518:	8440fb26 	beq	r16,r17,2908 <__divdf3+0x710>
    251c:	8007883a 	mov	r3,r16
    2520:	ad7fffc4 	addi	r21,r21,-1
    2524:	0021883a 	mov	r16,zero
    2528:	4004d63a 	srli	r2,r8,24
    252c:	8822923a 	slli	r17,r17,8
    2530:	1809883a 	mov	r4,r3
    2534:	402c923a 	slli	r22,r8,8
    2538:	88b8b03a 	or	fp,r17,r2
    253c:	e028d43a 	srli	r20,fp,16
    2540:	d8c00015 	stw	r3,0(sp)
    2544:	e5ffffcc 	andi	r23,fp,65535
    2548:	a00b883a 	mov	r5,r20
    254c:	0003ffc0 	call	3ffc <__udivsi3>
    2550:	d8c00017 	ldw	r3,0(sp)
    2554:	a00b883a 	mov	r5,r20
    2558:	d8800315 	stw	r2,12(sp)
    255c:	1809883a 	mov	r4,r3
    2560:	00040600 	call	4060 <__umodsi3>
    2564:	d9800317 	ldw	r6,12(sp)
    2568:	1006943a 	slli	r3,r2,16
    256c:	9004d43a 	srli	r2,r18,16
    2570:	b9a3383a 	mul	r17,r23,r6
    2574:	10c4b03a 	or	r2,r2,r3
    2578:	1440062e 	bgeu	r2,r17,2594 <__divdf3+0x39c>
    257c:	1705883a 	add	r2,r2,fp
    2580:	30ffffc4 	addi	r3,r6,-1
    2584:	1700ee36 	bltu	r2,fp,2940 <__divdf3+0x748>
    2588:	1440ed2e 	bgeu	r2,r17,2940 <__divdf3+0x748>
    258c:	31bfff84 	addi	r6,r6,-2
    2590:	1705883a 	add	r2,r2,fp
    2594:	1463c83a 	sub	r17,r2,r17
    2598:	a00b883a 	mov	r5,r20
    259c:	8809883a 	mov	r4,r17
    25a0:	d9800315 	stw	r6,12(sp)
    25a4:	0003ffc0 	call	3ffc <__udivsi3>
    25a8:	a00b883a 	mov	r5,r20
    25ac:	8809883a 	mov	r4,r17
    25b0:	d8800215 	stw	r2,8(sp)
    25b4:	00040600 	call	4060 <__umodsi3>
    25b8:	d9c00217 	ldw	r7,8(sp)
    25bc:	1004943a 	slli	r2,r2,16
    25c0:	94bfffcc 	andi	r18,r18,65535
    25c4:	b9d1383a 	mul	r8,r23,r7
    25c8:	90a4b03a 	or	r18,r18,r2
    25cc:	d9800317 	ldw	r6,12(sp)
    25d0:	9200062e 	bgeu	r18,r8,25ec <__divdf3+0x3f4>
    25d4:	9725883a 	add	r18,r18,fp
    25d8:	38bfffc4 	addi	r2,r7,-1
    25dc:	9700d636 	bltu	r18,fp,2938 <__divdf3+0x740>
    25e0:	9200d52e 	bgeu	r18,r8,2938 <__divdf3+0x740>
    25e4:	39ffff84 	addi	r7,r7,-2
    25e8:	9725883a 	add	r18,r18,fp
    25ec:	3004943a 	slli	r2,r6,16
    25f0:	b012d43a 	srli	r9,r22,16
    25f4:	b1bfffcc 	andi	r6,r22,65535
    25f8:	11e2b03a 	or	r17,r2,r7
    25fc:	8806d43a 	srli	r3,r17,16
    2600:	893fffcc 	andi	r4,r17,65535
    2604:	218b383a 	mul	r5,r4,r6
    2608:	30c5383a 	mul	r2,r6,r3
    260c:	2249383a 	mul	r4,r4,r9
    2610:	280ed43a 	srli	r7,r5,16
    2614:	9225c83a 	sub	r18,r18,r8
    2618:	2089883a 	add	r4,r4,r2
    261c:	3909883a 	add	r4,r7,r4
    2620:	1a47383a 	mul	r3,r3,r9
    2624:	2080022e 	bgeu	r4,r2,2630 <__divdf3+0x438>
    2628:	00800074 	movhi	r2,1
    262c:	1887883a 	add	r3,r3,r2
    2630:	2004d43a 	srli	r2,r4,16
    2634:	2008943a 	slli	r4,r4,16
    2638:	297fffcc 	andi	r5,r5,65535
    263c:	10c7883a 	add	r3,r2,r3
    2640:	2149883a 	add	r4,r4,r5
    2644:	90c0a536 	bltu	r18,r3,28dc <__divdf3+0x6e4>
    2648:	90c0bf26 	beq	r18,r3,2948 <__divdf3+0x750>
    264c:	90c7c83a 	sub	r3,r18,r3
    2650:	810fc83a 	sub	r7,r16,r4
    2654:	81e5803a 	cmpltu	r18,r16,r7
    2658:	1ca5c83a 	sub	r18,r3,r18
    265c:	e480c126 	beq	fp,r18,2964 <__divdf3+0x76c>
    2660:	a00b883a 	mov	r5,r20
    2664:	9009883a 	mov	r4,r18
    2668:	d9800315 	stw	r6,12(sp)
    266c:	d9c00215 	stw	r7,8(sp)
    2670:	da400115 	stw	r9,4(sp)
    2674:	0003ffc0 	call	3ffc <__udivsi3>
    2678:	a00b883a 	mov	r5,r20
    267c:	9009883a 	mov	r4,r18
    2680:	d8800015 	stw	r2,0(sp)
    2684:	00040600 	call	4060 <__umodsi3>
    2688:	d9c00217 	ldw	r7,8(sp)
    268c:	da000017 	ldw	r8,0(sp)
    2690:	1006943a 	slli	r3,r2,16
    2694:	3804d43a 	srli	r2,r7,16
    2698:	ba21383a 	mul	r16,r23,r8
    269c:	d9800317 	ldw	r6,12(sp)
    26a0:	10c4b03a 	or	r2,r2,r3
    26a4:	da400117 	ldw	r9,4(sp)
    26a8:	1400062e 	bgeu	r2,r16,26c4 <__divdf3+0x4cc>
    26ac:	1705883a 	add	r2,r2,fp
    26b0:	40ffffc4 	addi	r3,r8,-1
    26b4:	1700ad36 	bltu	r2,fp,296c <__divdf3+0x774>
    26b8:	1400ac2e 	bgeu	r2,r16,296c <__divdf3+0x774>
    26bc:	423fff84 	addi	r8,r8,-2
    26c0:	1705883a 	add	r2,r2,fp
    26c4:	1421c83a 	sub	r16,r2,r16
    26c8:	a00b883a 	mov	r5,r20
    26cc:	8009883a 	mov	r4,r16
    26d0:	d9800315 	stw	r6,12(sp)
    26d4:	d9c00215 	stw	r7,8(sp)
    26d8:	da000015 	stw	r8,0(sp)
    26dc:	da400115 	stw	r9,4(sp)
    26e0:	0003ffc0 	call	3ffc <__udivsi3>
    26e4:	8009883a 	mov	r4,r16
    26e8:	a00b883a 	mov	r5,r20
    26ec:	1025883a 	mov	r18,r2
    26f0:	00040600 	call	4060 <__umodsi3>
    26f4:	d9c00217 	ldw	r7,8(sp)
    26f8:	1004943a 	slli	r2,r2,16
    26fc:	bcaf383a 	mul	r23,r23,r18
    2700:	393fffcc 	andi	r4,r7,65535
    2704:	2088b03a 	or	r4,r4,r2
    2708:	d9800317 	ldw	r6,12(sp)
    270c:	da000017 	ldw	r8,0(sp)
    2710:	da400117 	ldw	r9,4(sp)
    2714:	25c0062e 	bgeu	r4,r23,2730 <__divdf3+0x538>
    2718:	2709883a 	add	r4,r4,fp
    271c:	90bfffc4 	addi	r2,r18,-1
    2720:	27009436 	bltu	r4,fp,2974 <__divdf3+0x77c>
    2724:	25c0932e 	bgeu	r4,r23,2974 <__divdf3+0x77c>
    2728:	94bfff84 	addi	r18,r18,-2
    272c:	2709883a 	add	r4,r4,fp
    2730:	4004943a 	slli	r2,r8,16
    2734:	25efc83a 	sub	r23,r4,r23
    2738:	1490b03a 	or	r8,r2,r18
    273c:	4008d43a 	srli	r4,r8,16
    2740:	40ffffcc 	andi	r3,r8,65535
    2744:	30c5383a 	mul	r2,r6,r3
    2748:	1a47383a 	mul	r3,r3,r9
    274c:	310d383a 	mul	r6,r6,r4
    2750:	100ad43a 	srli	r5,r2,16
    2754:	4913383a 	mul	r9,r9,r4
    2758:	1987883a 	add	r3,r3,r6
    275c:	28c7883a 	add	r3,r5,r3
    2760:	1980022e 	bgeu	r3,r6,276c <__divdf3+0x574>
    2764:	01000074 	movhi	r4,1
    2768:	4913883a 	add	r9,r9,r4
    276c:	1808d43a 	srli	r4,r3,16
    2770:	1806943a 	slli	r3,r3,16
    2774:	10bfffcc 	andi	r2,r2,65535
    2778:	2253883a 	add	r9,r4,r9
    277c:	1887883a 	add	r3,r3,r2
    2780:	ba403836 	bltu	r23,r9,2864 <__divdf3+0x66c>
    2784:	ba403626 	beq	r23,r9,2860 <__divdf3+0x668>
    2788:	42000054 	ori	r8,r8,1
    278c:	a880ffc4 	addi	r2,r21,1023
    2790:	00bf570e 	bge	zero,r2,24f0 <__alt_mem_onchip_memory+0xf78024f0>
    2794:	40c001cc 	andi	r3,r8,7
    2798:	18000726 	beq	r3,zero,27b8 <__divdf3+0x5c0>
    279c:	40c003cc 	andi	r3,r8,15
    27a0:	01000104 	movi	r4,4
    27a4:	19000426 	beq	r3,r4,27b8 <__divdf3+0x5c0>
    27a8:	4107883a 	add	r3,r8,r4
    27ac:	1a11803a 	cmpltu	r8,r3,r8
    27b0:	8a23883a 	add	r17,r17,r8
    27b4:	1811883a 	mov	r8,r3
    27b8:	88c0402c 	andhi	r3,r17,256
    27bc:	18000426 	beq	r3,zero,27d0 <__divdf3+0x5d8>
    27c0:	00ffc034 	movhi	r3,65280
    27c4:	18ffffc4 	addi	r3,r3,-1
    27c8:	a8810004 	addi	r2,r21,1024
    27cc:	88e2703a 	and	r17,r17,r3
    27d0:	00c1ff84 	movi	r3,2046
    27d4:	18bee316 	blt	r3,r2,2364 <__alt_mem_onchip_memory+0xf7802364>
    27d8:	8824977a 	slli	r18,r17,29
    27dc:	4010d0fa 	srli	r8,r8,3
    27e0:	8822927a 	slli	r17,r17,9
    27e4:	1081ffcc 	andi	r2,r2,2047
    27e8:	9224b03a 	or	r18,r18,r8
    27ec:	880ad33a 	srli	r5,r17,12
    27f0:	98c0004c 	andi	r3,r19,1
    27f4:	003edf06 	br	2374 <__alt_mem_onchip_memory+0xf7802374>
    27f8:	8080022c 	andhi	r2,r16,8
    27fc:	10001226 	beq	r2,zero,2848 <__divdf3+0x650>
    2800:	8880022c 	andhi	r2,r17,8
    2804:	1000101e 	bne	r2,zero,2848 <__divdf3+0x650>
    2808:	00800434 	movhi	r2,16
    280c:	89400234 	orhi	r5,r17,8
    2810:	10bfffc4 	addi	r2,r2,-1
    2814:	b007883a 	mov	r3,r22
    2818:	288a703a 	and	r5,r5,r2
    281c:	4025883a 	mov	r18,r8
    2820:	003f3106 	br	24e8 <__alt_mem_onchip_memory+0xf78024e8>
    2824:	008000c4 	movi	r2,3
    2828:	3880a626 	beq	r7,r2,2ac4 <__divdf3+0x8cc>
    282c:	00800044 	movi	r2,1
    2830:	3880521e 	bne	r7,r2,297c <__divdf3+0x784>
    2834:	b807883a 	mov	r3,r23
    2838:	0005883a 	mov	r2,zero
    283c:	000b883a 	mov	r5,zero
    2840:	0025883a 	mov	r18,zero
    2844:	003ecb06 	br	2374 <__alt_mem_onchip_memory+0xf7802374>
    2848:	00800434 	movhi	r2,16
    284c:	81400234 	orhi	r5,r16,8
    2850:	10bfffc4 	addi	r2,r2,-1
    2854:	a007883a 	mov	r3,r20
    2858:	288a703a 	and	r5,r5,r2
    285c:	003f2206 	br	24e8 <__alt_mem_onchip_memory+0xf78024e8>
    2860:	183fca26 	beq	r3,zero,278c <__alt_mem_onchip_memory+0xf780278c>
    2864:	e5ef883a 	add	r23,fp,r23
    2868:	40bfffc4 	addi	r2,r8,-1
    286c:	bf00392e 	bgeu	r23,fp,2954 <__divdf3+0x75c>
    2870:	1011883a 	mov	r8,r2
    2874:	ba7fc41e 	bne	r23,r9,2788 <__alt_mem_onchip_memory+0xf7802788>
    2878:	b0ffc31e 	bne	r22,r3,2788 <__alt_mem_onchip_memory+0xf7802788>
    287c:	003fc306 	br	278c <__alt_mem_onchip_memory+0xf780278c>
    2880:	143ff604 	addi	r16,r2,-40
    2884:	9c20983a 	sll	r16,r19,r16
    2888:	0025883a 	mov	r18,zero
    288c:	003ee206 	br	2418 <__alt_mem_onchip_memory+0xf7802418>
    2890:	d9800315 	stw	r6,12(sp)
    2894:	d9c00215 	stw	r7,8(sp)
    2898:	0003ea00 	call	3ea0 <__clzsi2>
    289c:	10800804 	addi	r2,r2,32
    28a0:	d9c00217 	ldw	r7,8(sp)
    28a4:	d9800317 	ldw	r6,12(sp)
    28a8:	003ed106 	br	23f0 <__alt_mem_onchip_memory+0xf78023f0>
    28ac:	147ff604 	addi	r17,r2,-40
    28b0:	3462983a 	sll	r17,r6,r17
    28b4:	0011883a 	mov	r8,zero
    28b8:	003ef506 	br	2490 <__alt_mem_onchip_memory+0xf7802490>
    28bc:	3009883a 	mov	r4,r6
    28c0:	d9800315 	stw	r6,12(sp)
    28c4:	da400115 	stw	r9,4(sp)
    28c8:	0003ea00 	call	3ea0 <__clzsi2>
    28cc:	10800804 	addi	r2,r2,32
    28d0:	da400117 	ldw	r9,4(sp)
    28d4:	d9800317 	ldw	r6,12(sp)
    28d8:	003ee306 	br	2468 <__alt_mem_onchip_memory+0xf7802468>
    28dc:	85a1883a 	add	r16,r16,r22
    28e0:	8585803a 	cmpltu	r2,r16,r22
    28e4:	1705883a 	add	r2,r2,fp
    28e8:	14a5883a 	add	r18,r2,r18
    28ec:	88bfffc4 	addi	r2,r17,-1
    28f0:	e4800c2e 	bgeu	fp,r18,2924 <__divdf3+0x72c>
    28f4:	90c03e36 	bltu	r18,r3,29f0 <__divdf3+0x7f8>
    28f8:	1c806926 	beq	r3,r18,2aa0 <__divdf3+0x8a8>
    28fc:	90c7c83a 	sub	r3,r18,r3
    2900:	1023883a 	mov	r17,r2
    2904:	003f5206 	br	2650 <__alt_mem_onchip_memory+0xf7802650>
    2908:	923f0436 	bltu	r18,r8,251c <__alt_mem_onchip_memory+0xf780251c>
    290c:	800897fa 	slli	r4,r16,31
    2910:	9004d07a 	srli	r2,r18,1
    2914:	8006d07a 	srli	r3,r16,1
    2918:	902097fa 	slli	r16,r18,31
    291c:	20a4b03a 	or	r18,r4,r2
    2920:	003f0106 	br	2528 <__alt_mem_onchip_memory+0xf7802528>
    2924:	e4bff51e 	bne	fp,r18,28fc <__alt_mem_onchip_memory+0xf78028fc>
    2928:	85bff22e 	bgeu	r16,r22,28f4 <__alt_mem_onchip_memory+0xf78028f4>
    292c:	e0c7c83a 	sub	r3,fp,r3
    2930:	1023883a 	mov	r17,r2
    2934:	003f4606 	br	2650 <__alt_mem_onchip_memory+0xf7802650>
    2938:	100f883a 	mov	r7,r2
    293c:	003f2b06 	br	25ec <__alt_mem_onchip_memory+0xf78025ec>
    2940:	180d883a 	mov	r6,r3
    2944:	003f1306 	br	2594 <__alt_mem_onchip_memory+0xf7802594>
    2948:	813fe436 	bltu	r16,r4,28dc <__alt_mem_onchip_memory+0xf78028dc>
    294c:	0007883a 	mov	r3,zero
    2950:	003f3f06 	br	2650 <__alt_mem_onchip_memory+0xf7802650>
    2954:	ba402c36 	bltu	r23,r9,2a08 <__divdf3+0x810>
    2958:	4dc05426 	beq	r9,r23,2aac <__divdf3+0x8b4>
    295c:	1011883a 	mov	r8,r2
    2960:	003f8906 	br	2788 <__alt_mem_onchip_memory+0xf7802788>
    2964:	023fffc4 	movi	r8,-1
    2968:	003f8806 	br	278c <__alt_mem_onchip_memory+0xf780278c>
    296c:	1811883a 	mov	r8,r3
    2970:	003f5406 	br	26c4 <__alt_mem_onchip_memory+0xf78026c4>
    2974:	1025883a 	mov	r18,r2
    2978:	003f6d06 	br	2730 <__alt_mem_onchip_memory+0xf7802730>
    297c:	b827883a 	mov	r19,r23
    2980:	003f8206 	br	278c <__alt_mem_onchip_memory+0xf780278c>
    2984:	010007c4 	movi	r4,31
    2988:	20c02616 	blt	r4,r3,2a24 <__divdf3+0x82c>
    298c:	00800804 	movi	r2,32
    2990:	10c5c83a 	sub	r2,r2,r3
    2994:	888a983a 	sll	r5,r17,r2
    2998:	40c8d83a 	srl	r4,r8,r3
    299c:	4084983a 	sll	r2,r8,r2
    29a0:	88e2d83a 	srl	r17,r17,r3
    29a4:	2906b03a 	or	r3,r5,r4
    29a8:	1004c03a 	cmpne	r2,r2,zero
    29ac:	1886b03a 	or	r3,r3,r2
    29b0:	188001cc 	andi	r2,r3,7
    29b4:	10000726 	beq	r2,zero,29d4 <__divdf3+0x7dc>
    29b8:	188003cc 	andi	r2,r3,15
    29bc:	01000104 	movi	r4,4
    29c0:	11000426 	beq	r2,r4,29d4 <__divdf3+0x7dc>
    29c4:	1805883a 	mov	r2,r3
    29c8:	10c00104 	addi	r3,r2,4
    29cc:	1885803a 	cmpltu	r2,r3,r2
    29d0:	88a3883a 	add	r17,r17,r2
    29d4:	8880202c 	andhi	r2,r17,128
    29d8:	10002726 	beq	r2,zero,2a78 <__divdf3+0x880>
    29dc:	98c0004c 	andi	r3,r19,1
    29e0:	00800044 	movi	r2,1
    29e4:	000b883a 	mov	r5,zero
    29e8:	0025883a 	mov	r18,zero
    29ec:	003e6106 	br	2374 <__alt_mem_onchip_memory+0xf7802374>
    29f0:	85a1883a 	add	r16,r16,r22
    29f4:	8585803a 	cmpltu	r2,r16,r22
    29f8:	1705883a 	add	r2,r2,fp
    29fc:	14a5883a 	add	r18,r2,r18
    2a00:	8c7fff84 	addi	r17,r17,-2
    2a04:	003f1106 	br	264c <__alt_mem_onchip_memory+0xf780264c>
    2a08:	b589883a 	add	r4,r22,r22
    2a0c:	25ad803a 	cmpltu	r22,r4,r22
    2a10:	b739883a 	add	fp,r22,fp
    2a14:	40bfff84 	addi	r2,r8,-2
    2a18:	bf2f883a 	add	r23,r23,fp
    2a1c:	202d883a 	mov	r22,r4
    2a20:	003f9306 	br	2870 <__alt_mem_onchip_memory+0xf7802870>
    2a24:	013ff844 	movi	r4,-31
    2a28:	2085c83a 	sub	r2,r4,r2
    2a2c:	8888d83a 	srl	r4,r17,r2
    2a30:	00800804 	movi	r2,32
    2a34:	18802126 	beq	r3,r2,2abc <__divdf3+0x8c4>
    2a38:	00801004 	movi	r2,64
    2a3c:	10c5c83a 	sub	r2,r2,r3
    2a40:	8884983a 	sll	r2,r17,r2
    2a44:	1204b03a 	or	r2,r2,r8
    2a48:	1004c03a 	cmpne	r2,r2,zero
    2a4c:	2084b03a 	or	r2,r4,r2
    2a50:	144001cc 	andi	r17,r2,7
    2a54:	88000d1e 	bne	r17,zero,2a8c <__divdf3+0x894>
    2a58:	000b883a 	mov	r5,zero
    2a5c:	1024d0fa 	srli	r18,r2,3
    2a60:	98c0004c 	andi	r3,r19,1
    2a64:	0005883a 	mov	r2,zero
    2a68:	9464b03a 	or	r18,r18,r17
    2a6c:	003e4106 	br	2374 <__alt_mem_onchip_memory+0xf7802374>
    2a70:	1007883a 	mov	r3,r2
    2a74:	0023883a 	mov	r17,zero
    2a78:	880a927a 	slli	r5,r17,9
    2a7c:	1805883a 	mov	r2,r3
    2a80:	8822977a 	slli	r17,r17,29
    2a84:	280ad33a 	srli	r5,r5,12
    2a88:	003ff406 	br	2a5c <__alt_mem_onchip_memory+0xf7802a5c>
    2a8c:	10c003cc 	andi	r3,r2,15
    2a90:	01000104 	movi	r4,4
    2a94:	193ff626 	beq	r3,r4,2a70 <__alt_mem_onchip_memory+0xf7802a70>
    2a98:	0023883a 	mov	r17,zero
    2a9c:	003fca06 	br	29c8 <__alt_mem_onchip_memory+0xf78029c8>
    2aa0:	813fd336 	bltu	r16,r4,29f0 <__alt_mem_onchip_memory+0xf78029f0>
    2aa4:	1023883a 	mov	r17,r2
    2aa8:	003fa806 	br	294c <__alt_mem_onchip_memory+0xf780294c>
    2aac:	b0ffd636 	bltu	r22,r3,2a08 <__alt_mem_onchip_memory+0xf7802a08>
    2ab0:	1011883a 	mov	r8,r2
    2ab4:	b0ff341e 	bne	r22,r3,2788 <__alt_mem_onchip_memory+0xf7802788>
    2ab8:	003f3406 	br	278c <__alt_mem_onchip_memory+0xf780278c>
    2abc:	0005883a 	mov	r2,zero
    2ac0:	003fe006 	br	2a44 <__alt_mem_onchip_memory+0xf7802a44>
    2ac4:	00800434 	movhi	r2,16
    2ac8:	89400234 	orhi	r5,r17,8
    2acc:	10bfffc4 	addi	r2,r2,-1
    2ad0:	b807883a 	mov	r3,r23
    2ad4:	288a703a 	and	r5,r5,r2
    2ad8:	4025883a 	mov	r18,r8
    2adc:	003e8206 	br	24e8 <__alt_mem_onchip_memory+0xf78024e8>

00002ae0 <__ledf2>:
    2ae0:	2804d53a 	srli	r2,r5,20
    2ae4:	3810d53a 	srli	r8,r7,20
    2ae8:	00c00434 	movhi	r3,16
    2aec:	18ffffc4 	addi	r3,r3,-1
    2af0:	1081ffcc 	andi	r2,r2,2047
    2af4:	0241ffc4 	movi	r9,2047
    2af8:	28d4703a 	and	r10,r5,r3
    2afc:	4201ffcc 	andi	r8,r8,2047
    2b00:	38c6703a 	and	r3,r7,r3
    2b04:	280ad7fa 	srli	r5,r5,31
    2b08:	380ed7fa 	srli	r7,r7,31
    2b0c:	12401f26 	beq	r2,r9,2b8c <__ledf2+0xac>
    2b10:	0241ffc4 	movi	r9,2047
    2b14:	42401426 	beq	r8,r9,2b68 <__ledf2+0x88>
    2b18:	1000091e 	bne	r2,zero,2b40 <__ledf2+0x60>
    2b1c:	2296b03a 	or	r11,r4,r10
    2b20:	5813003a 	cmpeq	r9,r11,zero
    2b24:	29403fcc 	andi	r5,r5,255
    2b28:	40000a1e 	bne	r8,zero,2b54 <__ledf2+0x74>
    2b2c:	30d8b03a 	or	r12,r6,r3
    2b30:	6000081e 	bne	r12,zero,2b54 <__ledf2+0x74>
    2b34:	0005883a 	mov	r2,zero
    2b38:	5800111e 	bne	r11,zero,2b80 <__ledf2+0xa0>
    2b3c:	f800283a 	ret
    2b40:	29403fcc 	andi	r5,r5,255
    2b44:	40000c1e 	bne	r8,zero,2b78 <__ledf2+0x98>
    2b48:	30d2b03a 	or	r9,r6,r3
    2b4c:	48000c26 	beq	r9,zero,2b80 <__ledf2+0xa0>
    2b50:	0013883a 	mov	r9,zero
    2b54:	39c03fcc 	andi	r7,r7,255
    2b58:	48000826 	beq	r9,zero,2b7c <__ledf2+0x9c>
    2b5c:	38001126 	beq	r7,zero,2ba4 <__ledf2+0xc4>
    2b60:	00800044 	movi	r2,1
    2b64:	f800283a 	ret
    2b68:	30d2b03a 	or	r9,r6,r3
    2b6c:	483fea26 	beq	r9,zero,2b18 <__alt_mem_onchip_memory+0xf7802b18>
    2b70:	00800084 	movi	r2,2
    2b74:	f800283a 	ret
    2b78:	39c03fcc 	andi	r7,r7,255
    2b7c:	39400726 	beq	r7,r5,2b9c <__ledf2+0xbc>
    2b80:	2800081e 	bne	r5,zero,2ba4 <__ledf2+0xc4>
    2b84:	00800044 	movi	r2,1
    2b88:	f800283a 	ret
    2b8c:	2292b03a 	or	r9,r4,r10
    2b90:	483fdf26 	beq	r9,zero,2b10 <__alt_mem_onchip_memory+0xf7802b10>
    2b94:	00800084 	movi	r2,2
    2b98:	f800283a 	ret
    2b9c:	4080030e 	bge	r8,r2,2bac <__ledf2+0xcc>
    2ba0:	383fef26 	beq	r7,zero,2b60 <__alt_mem_onchip_memory+0xf7802b60>
    2ba4:	00bfffc4 	movi	r2,-1
    2ba8:	f800283a 	ret
    2bac:	123feb16 	blt	r2,r8,2b5c <__alt_mem_onchip_memory+0xf7802b5c>
    2bb0:	1abff336 	bltu	r3,r10,2b80 <__alt_mem_onchip_memory+0xf7802b80>
    2bb4:	50c00326 	beq	r10,r3,2bc4 <__ledf2+0xe4>
    2bb8:	50c0042e 	bgeu	r10,r3,2bcc <__ledf2+0xec>
    2bbc:	283fe81e 	bne	r5,zero,2b60 <__alt_mem_onchip_memory+0xf7802b60>
    2bc0:	003ff806 	br	2ba4 <__alt_mem_onchip_memory+0xf7802ba4>
    2bc4:	313fee36 	bltu	r6,r4,2b80 <__alt_mem_onchip_memory+0xf7802b80>
    2bc8:	21bffc36 	bltu	r4,r6,2bbc <__alt_mem_onchip_memory+0xf7802bbc>
    2bcc:	0005883a 	mov	r2,zero
    2bd0:	f800283a 	ret

00002bd4 <__muldf3>:
    2bd4:	defff304 	addi	sp,sp,-52
    2bd8:	2804d53a 	srli	r2,r5,20
    2bdc:	dd800915 	stw	r22,36(sp)
    2be0:	282cd7fa 	srli	r22,r5,31
    2be4:	dc000315 	stw	r16,12(sp)
    2be8:	04000434 	movhi	r16,16
    2bec:	dd400815 	stw	r21,32(sp)
    2bf0:	dc800515 	stw	r18,20(sp)
    2bf4:	843fffc4 	addi	r16,r16,-1
    2bf8:	dfc00c15 	stw	ra,48(sp)
    2bfc:	df000b15 	stw	fp,44(sp)
    2c00:	ddc00a15 	stw	r23,40(sp)
    2c04:	dd000715 	stw	r20,28(sp)
    2c08:	dcc00615 	stw	r19,24(sp)
    2c0c:	dc400415 	stw	r17,16(sp)
    2c10:	1481ffcc 	andi	r18,r2,2047
    2c14:	2c20703a 	and	r16,r5,r16
    2c18:	b02b883a 	mov	r21,r22
    2c1c:	b2403fcc 	andi	r9,r22,255
    2c20:	90006026 	beq	r18,zero,2da4 <__muldf3+0x1d0>
    2c24:	0081ffc4 	movi	r2,2047
    2c28:	2029883a 	mov	r20,r4
    2c2c:	90803626 	beq	r18,r2,2d08 <__muldf3+0x134>
    2c30:	80800434 	orhi	r2,r16,16
    2c34:	100490fa 	slli	r2,r2,3
    2c38:	2020d77a 	srli	r16,r4,29
    2c3c:	202890fa 	slli	r20,r4,3
    2c40:	94bf0044 	addi	r18,r18,-1023
    2c44:	80a0b03a 	or	r16,r16,r2
    2c48:	0027883a 	mov	r19,zero
    2c4c:	0039883a 	mov	fp,zero
    2c50:	3804d53a 	srli	r2,r7,20
    2c54:	382ed7fa 	srli	r23,r7,31
    2c58:	04400434 	movhi	r17,16
    2c5c:	8c7fffc4 	addi	r17,r17,-1
    2c60:	1081ffcc 	andi	r2,r2,2047
    2c64:	3011883a 	mov	r8,r6
    2c68:	3c62703a 	and	r17,r7,r17
    2c6c:	ba803fcc 	andi	r10,r23,255
    2c70:	10006d26 	beq	r2,zero,2e28 <__muldf3+0x254>
    2c74:	00c1ffc4 	movi	r3,2047
    2c78:	10c06526 	beq	r2,r3,2e10 <__muldf3+0x23c>
    2c7c:	88c00434 	orhi	r3,r17,16
    2c80:	180690fa 	slli	r3,r3,3
    2c84:	3022d77a 	srli	r17,r6,29
    2c88:	301090fa 	slli	r8,r6,3
    2c8c:	10bf0044 	addi	r2,r2,-1023
    2c90:	88e2b03a 	or	r17,r17,r3
    2c94:	000b883a 	mov	r5,zero
    2c98:	9085883a 	add	r2,r18,r2
    2c9c:	2cc8b03a 	or	r4,r5,r19
    2ca0:	00c003c4 	movi	r3,15
    2ca4:	bdacf03a 	xor	r22,r23,r22
    2ca8:	12c00044 	addi	r11,r2,1
    2cac:	19009936 	bltu	r3,r4,2f14 <__muldf3+0x340>
    2cb0:	200890ba 	slli	r4,r4,2
    2cb4:	00c00034 	movhi	r3,0
    2cb8:	18cb3204 	addi	r3,r3,11464
    2cbc:	20c9883a 	add	r4,r4,r3
    2cc0:	20c00017 	ldw	r3,0(r4)
    2cc4:	1800683a 	jmp	r3
    2cc8:	00002f14 	movui	zero,188
    2ccc:	00002d28 	cmpgeui	zero,zero,180
    2cd0:	00002d28 	cmpgeui	zero,zero,180
    2cd4:	00002d24 	muli	zero,zero,180
    2cd8:	00002ef0 	cmpltui	zero,zero,187
    2cdc:	00002ef0 	cmpltui	zero,zero,187
    2ce0:	00002ed8 	cmpnei	zero,zero,187
    2ce4:	00002d24 	muli	zero,zero,180
    2ce8:	00002ef0 	cmpltui	zero,zero,187
    2cec:	00002ed8 	cmpnei	zero,zero,187
    2cf0:	00002ef0 	cmpltui	zero,zero,187
    2cf4:	00002d24 	muli	zero,zero,180
    2cf8:	00002f00 	call	2f0 <print_array+0x60>
    2cfc:	00002f00 	call	2f0 <print_array+0x60>
    2d00:	00002f00 	call	2f0 <print_array+0x60>
    2d04:	0000311c 	xori	zero,zero,196
    2d08:	2404b03a 	or	r2,r4,r16
    2d0c:	10006f1e 	bne	r2,zero,2ecc <__muldf3+0x2f8>
    2d10:	04c00204 	movi	r19,8
    2d14:	0021883a 	mov	r16,zero
    2d18:	0029883a 	mov	r20,zero
    2d1c:	07000084 	movi	fp,2
    2d20:	003fcb06 	br	2c50 <__alt_mem_onchip_memory+0xf7802c50>
    2d24:	502d883a 	mov	r22,r10
    2d28:	00800084 	movi	r2,2
    2d2c:	28805726 	beq	r5,r2,2e8c <__muldf3+0x2b8>
    2d30:	008000c4 	movi	r2,3
    2d34:	28816626 	beq	r5,r2,32d0 <__muldf3+0x6fc>
    2d38:	00800044 	movi	r2,1
    2d3c:	2881411e 	bne	r5,r2,3244 <__muldf3+0x670>
    2d40:	b02b883a 	mov	r21,r22
    2d44:	0005883a 	mov	r2,zero
    2d48:	000b883a 	mov	r5,zero
    2d4c:	0029883a 	mov	r20,zero
    2d50:	1004953a 	slli	r2,r2,20
    2d54:	a8c03fcc 	andi	r3,r21,255
    2d58:	04400434 	movhi	r17,16
    2d5c:	8c7fffc4 	addi	r17,r17,-1
    2d60:	180697fa 	slli	r3,r3,31
    2d64:	2c4a703a 	and	r5,r5,r17
    2d68:	288ab03a 	or	r5,r5,r2
    2d6c:	28c6b03a 	or	r3,r5,r3
    2d70:	a005883a 	mov	r2,r20
    2d74:	dfc00c17 	ldw	ra,48(sp)
    2d78:	df000b17 	ldw	fp,44(sp)
    2d7c:	ddc00a17 	ldw	r23,40(sp)
    2d80:	dd800917 	ldw	r22,36(sp)
    2d84:	dd400817 	ldw	r21,32(sp)
    2d88:	dd000717 	ldw	r20,28(sp)
    2d8c:	dcc00617 	ldw	r19,24(sp)
    2d90:	dc800517 	ldw	r18,20(sp)
    2d94:	dc400417 	ldw	r17,16(sp)
    2d98:	dc000317 	ldw	r16,12(sp)
    2d9c:	dec00d04 	addi	sp,sp,52
    2da0:	f800283a 	ret
    2da4:	2404b03a 	or	r2,r4,r16
    2da8:	2027883a 	mov	r19,r4
    2dac:	10004226 	beq	r2,zero,2eb8 <__muldf3+0x2e4>
    2db0:	8000fc26 	beq	r16,zero,31a4 <__muldf3+0x5d0>
    2db4:	8009883a 	mov	r4,r16
    2db8:	d9800215 	stw	r6,8(sp)
    2dbc:	d9c00015 	stw	r7,0(sp)
    2dc0:	da400115 	stw	r9,4(sp)
    2dc4:	0003ea00 	call	3ea0 <__clzsi2>
    2dc8:	d9800217 	ldw	r6,8(sp)
    2dcc:	d9c00017 	ldw	r7,0(sp)
    2dd0:	da400117 	ldw	r9,4(sp)
    2dd4:	113ffd44 	addi	r4,r2,-11
    2dd8:	00c00704 	movi	r3,28
    2ddc:	1900ed16 	blt	r3,r4,3194 <__muldf3+0x5c0>
    2de0:	00c00744 	movi	r3,29
    2de4:	147ffe04 	addi	r17,r2,-8
    2de8:	1907c83a 	sub	r3,r3,r4
    2dec:	8460983a 	sll	r16,r16,r17
    2df0:	98c6d83a 	srl	r3,r19,r3
    2df4:	9c68983a 	sll	r20,r19,r17
    2df8:	1c20b03a 	or	r16,r3,r16
    2dfc:	1080fcc4 	addi	r2,r2,1011
    2e00:	00a5c83a 	sub	r18,zero,r2
    2e04:	0027883a 	mov	r19,zero
    2e08:	0039883a 	mov	fp,zero
    2e0c:	003f9006 	br	2c50 <__alt_mem_onchip_memory+0xf7802c50>
    2e10:	3446b03a 	or	r3,r6,r17
    2e14:	1800261e 	bne	r3,zero,2eb0 <__muldf3+0x2dc>
    2e18:	0023883a 	mov	r17,zero
    2e1c:	0011883a 	mov	r8,zero
    2e20:	01400084 	movi	r5,2
    2e24:	003f9c06 	br	2c98 <__alt_mem_onchip_memory+0xf7802c98>
    2e28:	3446b03a 	or	r3,r6,r17
    2e2c:	18001c26 	beq	r3,zero,2ea0 <__muldf3+0x2cc>
    2e30:	8800ce26 	beq	r17,zero,316c <__muldf3+0x598>
    2e34:	8809883a 	mov	r4,r17
    2e38:	d9800215 	stw	r6,8(sp)
    2e3c:	da400115 	stw	r9,4(sp)
    2e40:	da800015 	stw	r10,0(sp)
    2e44:	0003ea00 	call	3ea0 <__clzsi2>
    2e48:	d9800217 	ldw	r6,8(sp)
    2e4c:	da400117 	ldw	r9,4(sp)
    2e50:	da800017 	ldw	r10,0(sp)
    2e54:	113ffd44 	addi	r4,r2,-11
    2e58:	00c00704 	movi	r3,28
    2e5c:	1900bf16 	blt	r3,r4,315c <__muldf3+0x588>
    2e60:	00c00744 	movi	r3,29
    2e64:	123ffe04 	addi	r8,r2,-8
    2e68:	1907c83a 	sub	r3,r3,r4
    2e6c:	8a22983a 	sll	r17,r17,r8
    2e70:	30c6d83a 	srl	r3,r6,r3
    2e74:	3210983a 	sll	r8,r6,r8
    2e78:	1c62b03a 	or	r17,r3,r17
    2e7c:	1080fcc4 	addi	r2,r2,1011
    2e80:	0085c83a 	sub	r2,zero,r2
    2e84:	000b883a 	mov	r5,zero
    2e88:	003f8306 	br	2c98 <__alt_mem_onchip_memory+0xf7802c98>
    2e8c:	b02b883a 	mov	r21,r22
    2e90:	0081ffc4 	movi	r2,2047
    2e94:	000b883a 	mov	r5,zero
    2e98:	0029883a 	mov	r20,zero
    2e9c:	003fac06 	br	2d50 <__alt_mem_onchip_memory+0xf7802d50>
    2ea0:	0023883a 	mov	r17,zero
    2ea4:	0011883a 	mov	r8,zero
    2ea8:	01400044 	movi	r5,1
    2eac:	003f7a06 	br	2c98 <__alt_mem_onchip_memory+0xf7802c98>
    2eb0:	014000c4 	movi	r5,3
    2eb4:	003f7806 	br	2c98 <__alt_mem_onchip_memory+0xf7802c98>
    2eb8:	04c00104 	movi	r19,4
    2ebc:	0021883a 	mov	r16,zero
    2ec0:	0029883a 	mov	r20,zero
    2ec4:	07000044 	movi	fp,1
    2ec8:	003f6106 	br	2c50 <__alt_mem_onchip_memory+0xf7802c50>
    2ecc:	04c00304 	movi	r19,12
    2ed0:	070000c4 	movi	fp,3
    2ed4:	003f5e06 	br	2c50 <__alt_mem_onchip_memory+0xf7802c50>
    2ed8:	01400434 	movhi	r5,16
    2edc:	002b883a 	mov	r21,zero
    2ee0:	297fffc4 	addi	r5,r5,-1
    2ee4:	053fffc4 	movi	r20,-1
    2ee8:	0081ffc4 	movi	r2,2047
    2eec:	003f9806 	br	2d50 <__alt_mem_onchip_memory+0xf7802d50>
    2ef0:	8023883a 	mov	r17,r16
    2ef4:	a011883a 	mov	r8,r20
    2ef8:	e00b883a 	mov	r5,fp
    2efc:	003f8a06 	br	2d28 <__alt_mem_onchip_memory+0xf7802d28>
    2f00:	8023883a 	mov	r17,r16
    2f04:	a011883a 	mov	r8,r20
    2f08:	482d883a 	mov	r22,r9
    2f0c:	e00b883a 	mov	r5,fp
    2f10:	003f8506 	br	2d28 <__alt_mem_onchip_memory+0xf7802d28>
    2f14:	a00ad43a 	srli	r5,r20,16
    2f18:	401ad43a 	srli	r13,r8,16
    2f1c:	a53fffcc 	andi	r20,r20,65535
    2f20:	423fffcc 	andi	r8,r8,65535
    2f24:	4519383a 	mul	r12,r8,r20
    2f28:	4147383a 	mul	r3,r8,r5
    2f2c:	6d09383a 	mul	r4,r13,r20
    2f30:	600cd43a 	srli	r6,r12,16
    2f34:	2b5d383a 	mul	r14,r5,r13
    2f38:	20c9883a 	add	r4,r4,r3
    2f3c:	310d883a 	add	r6,r6,r4
    2f40:	30c0022e 	bgeu	r6,r3,2f4c <__muldf3+0x378>
    2f44:	00c00074 	movhi	r3,1
    2f48:	70dd883a 	add	r14,r14,r3
    2f4c:	8826d43a 	srli	r19,r17,16
    2f50:	8bffffcc 	andi	r15,r17,65535
    2f54:	7d23383a 	mul	r17,r15,r20
    2f58:	7949383a 	mul	r4,r15,r5
    2f5c:	9d29383a 	mul	r20,r19,r20
    2f60:	8814d43a 	srli	r10,r17,16
    2f64:	3012943a 	slli	r9,r6,16
    2f68:	a129883a 	add	r20,r20,r4
    2f6c:	633fffcc 	andi	r12,r12,65535
    2f70:	5515883a 	add	r10,r10,r20
    2f74:	3006d43a 	srli	r3,r6,16
    2f78:	4b13883a 	add	r9,r9,r12
    2f7c:	2ccb383a 	mul	r5,r5,r19
    2f80:	5100022e 	bgeu	r10,r4,2f8c <__muldf3+0x3b8>
    2f84:	01000074 	movhi	r4,1
    2f88:	290b883a 	add	r5,r5,r4
    2f8c:	802ad43a 	srli	r21,r16,16
    2f90:	843fffcc 	andi	r16,r16,65535
    2f94:	440d383a 	mul	r6,r8,r16
    2f98:	4565383a 	mul	r18,r8,r21
    2f9c:	8349383a 	mul	r4,r16,r13
    2fa0:	500e943a 	slli	r7,r10,16
    2fa4:	3010d43a 	srli	r8,r6,16
    2fa8:	5028d43a 	srli	r20,r10,16
    2fac:	2489883a 	add	r4,r4,r18
    2fb0:	8abfffcc 	andi	r10,r17,65535
    2fb4:	3a95883a 	add	r10,r7,r10
    2fb8:	4119883a 	add	r12,r8,r4
    2fbc:	a169883a 	add	r20,r20,r5
    2fc0:	1a87883a 	add	r3,r3,r10
    2fc4:	6d5b383a 	mul	r13,r13,r21
    2fc8:	6480022e 	bgeu	r12,r18,2fd4 <__muldf3+0x400>
    2fcc:	01000074 	movhi	r4,1
    2fd0:	691b883a 	add	r13,r13,r4
    2fd4:	7c25383a 	mul	r18,r15,r16
    2fd8:	7d4b383a 	mul	r5,r15,r21
    2fdc:	84cf383a 	mul	r7,r16,r19
    2fe0:	901ed43a 	srli	r15,r18,16
    2fe4:	6008d43a 	srli	r4,r12,16
    2fe8:	6010943a 	slli	r8,r12,16
    2fec:	394f883a 	add	r7,r7,r5
    2ff0:	333fffcc 	andi	r12,r6,65535
    2ff4:	79df883a 	add	r15,r15,r7
    2ff8:	235b883a 	add	r13,r4,r13
    2ffc:	9d63383a 	mul	r17,r19,r21
    3000:	4309883a 	add	r4,r8,r12
    3004:	7940022e 	bgeu	r15,r5,3010 <__muldf3+0x43c>
    3008:	01400074 	movhi	r5,1
    300c:	8963883a 	add	r17,r17,r5
    3010:	780a943a 	slli	r5,r15,16
    3014:	91bfffcc 	andi	r6,r18,65535
    3018:	70c7883a 	add	r3,r14,r3
    301c:	298d883a 	add	r6,r5,r6
    3020:	1a8f803a 	cmpltu	r7,r3,r10
    3024:	350b883a 	add	r5,r6,r20
    3028:	20c7883a 	add	r3,r4,r3
    302c:	3955883a 	add	r10,r7,r5
    3030:	1909803a 	cmpltu	r4,r3,r4
    3034:	6a91883a 	add	r8,r13,r10
    3038:	780cd43a 	srli	r6,r15,16
    303c:	2219883a 	add	r12,r4,r8
    3040:	2d0b803a 	cmpltu	r5,r5,r20
    3044:	51cf803a 	cmpltu	r7,r10,r7
    3048:	29ceb03a 	or	r7,r5,r7
    304c:	4351803a 	cmpltu	r8,r8,r13
    3050:	610b803a 	cmpltu	r5,r12,r4
    3054:	4148b03a 	or	r4,r8,r5
    3058:	398f883a 	add	r7,r7,r6
    305c:	3909883a 	add	r4,r7,r4
    3060:	1810927a 	slli	r8,r3,9
    3064:	2449883a 	add	r4,r4,r17
    3068:	2008927a 	slli	r4,r4,9
    306c:	6022d5fa 	srli	r17,r12,23
    3070:	1806d5fa 	srli	r3,r3,23
    3074:	4252b03a 	or	r9,r8,r9
    3078:	600a927a 	slli	r5,r12,9
    307c:	4810c03a 	cmpne	r8,r9,zero
    3080:	2462b03a 	or	r17,r4,r17
    3084:	40c6b03a 	or	r3,r8,r3
    3088:	8900402c 	andhi	r4,r17,256
    308c:	1950b03a 	or	r8,r3,r5
    3090:	20000726 	beq	r4,zero,30b0 <__muldf3+0x4dc>
    3094:	4006d07a 	srli	r3,r8,1
    3098:	880497fa 	slli	r2,r17,31
    309c:	4200004c 	andi	r8,r8,1
    30a0:	8822d07a 	srli	r17,r17,1
    30a4:	1a10b03a 	or	r8,r3,r8
    30a8:	1210b03a 	or	r8,r2,r8
    30ac:	5805883a 	mov	r2,r11
    30b0:	1140ffc4 	addi	r5,r2,1023
    30b4:	0140440e 	bge	zero,r5,31c8 <__muldf3+0x5f4>
    30b8:	40c001cc 	andi	r3,r8,7
    30bc:	18000726 	beq	r3,zero,30dc <__muldf3+0x508>
    30c0:	40c003cc 	andi	r3,r8,15
    30c4:	01000104 	movi	r4,4
    30c8:	19000426 	beq	r3,r4,30dc <__muldf3+0x508>
    30cc:	4107883a 	add	r3,r8,r4
    30d0:	1a11803a 	cmpltu	r8,r3,r8
    30d4:	8a23883a 	add	r17,r17,r8
    30d8:	1811883a 	mov	r8,r3
    30dc:	88c0402c 	andhi	r3,r17,256
    30e0:	18000426 	beq	r3,zero,30f4 <__muldf3+0x520>
    30e4:	11410004 	addi	r5,r2,1024
    30e8:	00bfc034 	movhi	r2,65280
    30ec:	10bfffc4 	addi	r2,r2,-1
    30f0:	88a2703a 	and	r17,r17,r2
    30f4:	0081ff84 	movi	r2,2046
    30f8:	117f6416 	blt	r2,r5,2e8c <__alt_mem_onchip_memory+0xf7802e8c>
    30fc:	8828977a 	slli	r20,r17,29
    3100:	4010d0fa 	srli	r8,r8,3
    3104:	8822927a 	slli	r17,r17,9
    3108:	2881ffcc 	andi	r2,r5,2047
    310c:	a228b03a 	or	r20,r20,r8
    3110:	880ad33a 	srli	r5,r17,12
    3114:	b02b883a 	mov	r21,r22
    3118:	003f0d06 	br	2d50 <__alt_mem_onchip_memory+0xf7802d50>
    311c:	8080022c 	andhi	r2,r16,8
    3120:	10000926 	beq	r2,zero,3148 <__muldf3+0x574>
    3124:	8880022c 	andhi	r2,r17,8
    3128:	1000071e 	bne	r2,zero,3148 <__muldf3+0x574>
    312c:	00800434 	movhi	r2,16
    3130:	89400234 	orhi	r5,r17,8
    3134:	10bfffc4 	addi	r2,r2,-1
    3138:	b82b883a 	mov	r21,r23
    313c:	288a703a 	and	r5,r5,r2
    3140:	4029883a 	mov	r20,r8
    3144:	003f6806 	br	2ee8 <__alt_mem_onchip_memory+0xf7802ee8>
    3148:	00800434 	movhi	r2,16
    314c:	81400234 	orhi	r5,r16,8
    3150:	10bfffc4 	addi	r2,r2,-1
    3154:	288a703a 	and	r5,r5,r2
    3158:	003f6306 	br	2ee8 <__alt_mem_onchip_memory+0xf7802ee8>
    315c:	147ff604 	addi	r17,r2,-40
    3160:	3462983a 	sll	r17,r6,r17
    3164:	0011883a 	mov	r8,zero
    3168:	003f4406 	br	2e7c <__alt_mem_onchip_memory+0xf7802e7c>
    316c:	3009883a 	mov	r4,r6
    3170:	d9800215 	stw	r6,8(sp)
    3174:	da400115 	stw	r9,4(sp)
    3178:	da800015 	stw	r10,0(sp)
    317c:	0003ea00 	call	3ea0 <__clzsi2>
    3180:	10800804 	addi	r2,r2,32
    3184:	da800017 	ldw	r10,0(sp)
    3188:	da400117 	ldw	r9,4(sp)
    318c:	d9800217 	ldw	r6,8(sp)
    3190:	003f3006 	br	2e54 <__alt_mem_onchip_memory+0xf7802e54>
    3194:	143ff604 	addi	r16,r2,-40
    3198:	9c20983a 	sll	r16,r19,r16
    319c:	0029883a 	mov	r20,zero
    31a0:	003f1606 	br	2dfc <__alt_mem_onchip_memory+0xf7802dfc>
    31a4:	d9800215 	stw	r6,8(sp)
    31a8:	d9c00015 	stw	r7,0(sp)
    31ac:	da400115 	stw	r9,4(sp)
    31b0:	0003ea00 	call	3ea0 <__clzsi2>
    31b4:	10800804 	addi	r2,r2,32
    31b8:	da400117 	ldw	r9,4(sp)
    31bc:	d9c00017 	ldw	r7,0(sp)
    31c0:	d9800217 	ldw	r6,8(sp)
    31c4:	003f0306 	br	2dd4 <__alt_mem_onchip_memory+0xf7802dd4>
    31c8:	00c00044 	movi	r3,1
    31cc:	1947c83a 	sub	r3,r3,r5
    31d0:	00800e04 	movi	r2,56
    31d4:	10feda16 	blt	r2,r3,2d40 <__alt_mem_onchip_memory+0xf7802d40>
    31d8:	008007c4 	movi	r2,31
    31dc:	10c01b16 	blt	r2,r3,324c <__muldf3+0x678>
    31e0:	00800804 	movi	r2,32
    31e4:	10c5c83a 	sub	r2,r2,r3
    31e8:	888a983a 	sll	r5,r17,r2
    31ec:	40c8d83a 	srl	r4,r8,r3
    31f0:	4084983a 	sll	r2,r8,r2
    31f4:	88e2d83a 	srl	r17,r17,r3
    31f8:	2906b03a 	or	r3,r5,r4
    31fc:	1004c03a 	cmpne	r2,r2,zero
    3200:	1886b03a 	or	r3,r3,r2
    3204:	188001cc 	andi	r2,r3,7
    3208:	10000726 	beq	r2,zero,3228 <__muldf3+0x654>
    320c:	188003cc 	andi	r2,r3,15
    3210:	01000104 	movi	r4,4
    3214:	11000426 	beq	r2,r4,3228 <__muldf3+0x654>
    3218:	1805883a 	mov	r2,r3
    321c:	10c00104 	addi	r3,r2,4
    3220:	1885803a 	cmpltu	r2,r3,r2
    3224:	88a3883a 	add	r17,r17,r2
    3228:	8880202c 	andhi	r2,r17,128
    322c:	10001c26 	beq	r2,zero,32a0 <__muldf3+0x6cc>
    3230:	b02b883a 	mov	r21,r22
    3234:	00800044 	movi	r2,1
    3238:	000b883a 	mov	r5,zero
    323c:	0029883a 	mov	r20,zero
    3240:	003ec306 	br	2d50 <__alt_mem_onchip_memory+0xf7802d50>
    3244:	5805883a 	mov	r2,r11
    3248:	003f9906 	br	30b0 <__alt_mem_onchip_memory+0xf78030b0>
    324c:	00bff844 	movi	r2,-31
    3250:	1145c83a 	sub	r2,r2,r5
    3254:	8888d83a 	srl	r4,r17,r2
    3258:	00800804 	movi	r2,32
    325c:	18801a26 	beq	r3,r2,32c8 <__muldf3+0x6f4>
    3260:	00801004 	movi	r2,64
    3264:	10c5c83a 	sub	r2,r2,r3
    3268:	8884983a 	sll	r2,r17,r2
    326c:	1204b03a 	or	r2,r2,r8
    3270:	1004c03a 	cmpne	r2,r2,zero
    3274:	2084b03a 	or	r2,r4,r2
    3278:	144001cc 	andi	r17,r2,7
    327c:	88000d1e 	bne	r17,zero,32b4 <__muldf3+0x6e0>
    3280:	000b883a 	mov	r5,zero
    3284:	1028d0fa 	srli	r20,r2,3
    3288:	b02b883a 	mov	r21,r22
    328c:	0005883a 	mov	r2,zero
    3290:	a468b03a 	or	r20,r20,r17
    3294:	003eae06 	br	2d50 <__alt_mem_onchip_memory+0xf7802d50>
    3298:	1007883a 	mov	r3,r2
    329c:	0023883a 	mov	r17,zero
    32a0:	880a927a 	slli	r5,r17,9
    32a4:	1805883a 	mov	r2,r3
    32a8:	8822977a 	slli	r17,r17,29
    32ac:	280ad33a 	srli	r5,r5,12
    32b0:	003ff406 	br	3284 <__alt_mem_onchip_memory+0xf7803284>
    32b4:	10c003cc 	andi	r3,r2,15
    32b8:	01000104 	movi	r4,4
    32bc:	193ff626 	beq	r3,r4,3298 <__alt_mem_onchip_memory+0xf7803298>
    32c0:	0023883a 	mov	r17,zero
    32c4:	003fd506 	br	321c <__alt_mem_onchip_memory+0xf780321c>
    32c8:	0005883a 	mov	r2,zero
    32cc:	003fe706 	br	326c <__alt_mem_onchip_memory+0xf780326c>
    32d0:	00800434 	movhi	r2,16
    32d4:	89400234 	orhi	r5,r17,8
    32d8:	10bfffc4 	addi	r2,r2,-1
    32dc:	b02b883a 	mov	r21,r22
    32e0:	288a703a 	and	r5,r5,r2
    32e4:	4029883a 	mov	r20,r8
    32e8:	003eff06 	br	2ee8 <__alt_mem_onchip_memory+0xf7802ee8>

000032ec <__subdf3>:
    32ec:	02000434 	movhi	r8,16
    32f0:	423fffc4 	addi	r8,r8,-1
    32f4:	defffb04 	addi	sp,sp,-20
    32f8:	2a14703a 	and	r10,r5,r8
    32fc:	3812d53a 	srli	r9,r7,20
    3300:	3a10703a 	and	r8,r7,r8
    3304:	2006d77a 	srli	r3,r4,29
    3308:	3004d77a 	srli	r2,r6,29
    330c:	dc000015 	stw	r16,0(sp)
    3310:	501490fa 	slli	r10,r10,3
    3314:	2820d53a 	srli	r16,r5,20
    3318:	401090fa 	slli	r8,r8,3
    331c:	dc800215 	stw	r18,8(sp)
    3320:	dc400115 	stw	r17,4(sp)
    3324:	dfc00415 	stw	ra,16(sp)
    3328:	202290fa 	slli	r17,r4,3
    332c:	dcc00315 	stw	r19,12(sp)
    3330:	4a41ffcc 	andi	r9,r9,2047
    3334:	0101ffc4 	movi	r4,2047
    3338:	2824d7fa 	srli	r18,r5,31
    333c:	8401ffcc 	andi	r16,r16,2047
    3340:	50c6b03a 	or	r3,r10,r3
    3344:	380ed7fa 	srli	r7,r7,31
    3348:	408ab03a 	or	r5,r8,r2
    334c:	300c90fa 	slli	r6,r6,3
    3350:	49009626 	beq	r9,r4,35ac <__subdf3+0x2c0>
    3354:	39c0005c 	xori	r7,r7,1
    3358:	8245c83a 	sub	r2,r16,r9
    335c:	3c807426 	beq	r7,r18,3530 <__subdf3+0x244>
    3360:	0080af0e 	bge	zero,r2,3620 <__subdf3+0x334>
    3364:	48002a1e 	bne	r9,zero,3410 <__subdf3+0x124>
    3368:	2988b03a 	or	r4,r5,r6
    336c:	20009a1e 	bne	r4,zero,35d8 <__subdf3+0x2ec>
    3370:	888001cc 	andi	r2,r17,7
    3374:	10000726 	beq	r2,zero,3394 <__subdf3+0xa8>
    3378:	888003cc 	andi	r2,r17,15
    337c:	01000104 	movi	r4,4
    3380:	11000426 	beq	r2,r4,3394 <__subdf3+0xa8>
    3384:	890b883a 	add	r5,r17,r4
    3388:	2c63803a 	cmpltu	r17,r5,r17
    338c:	1c47883a 	add	r3,r3,r17
    3390:	2823883a 	mov	r17,r5
    3394:	1880202c 	andhi	r2,r3,128
    3398:	10005926 	beq	r2,zero,3500 <__subdf3+0x214>
    339c:	84000044 	addi	r16,r16,1
    33a0:	0081ffc4 	movi	r2,2047
    33a4:	8080be26 	beq	r16,r2,36a0 <__subdf3+0x3b4>
    33a8:	017fe034 	movhi	r5,65408
    33ac:	297fffc4 	addi	r5,r5,-1
    33b0:	1946703a 	and	r3,r3,r5
    33b4:	1804977a 	slli	r2,r3,29
    33b8:	1806927a 	slli	r3,r3,9
    33bc:	8822d0fa 	srli	r17,r17,3
    33c0:	8401ffcc 	andi	r16,r16,2047
    33c4:	180ad33a 	srli	r5,r3,12
    33c8:	9100004c 	andi	r4,r18,1
    33cc:	1444b03a 	or	r2,r2,r17
    33d0:	80c1ffcc 	andi	r3,r16,2047
    33d4:	1820953a 	slli	r16,r3,20
    33d8:	20c03fcc 	andi	r3,r4,255
    33dc:	180897fa 	slli	r4,r3,31
    33e0:	00c00434 	movhi	r3,16
    33e4:	18ffffc4 	addi	r3,r3,-1
    33e8:	28c6703a 	and	r3,r5,r3
    33ec:	1c06b03a 	or	r3,r3,r16
    33f0:	1906b03a 	or	r3,r3,r4
    33f4:	dfc00417 	ldw	ra,16(sp)
    33f8:	dcc00317 	ldw	r19,12(sp)
    33fc:	dc800217 	ldw	r18,8(sp)
    3400:	dc400117 	ldw	r17,4(sp)
    3404:	dc000017 	ldw	r16,0(sp)
    3408:	dec00504 	addi	sp,sp,20
    340c:	f800283a 	ret
    3410:	0101ffc4 	movi	r4,2047
    3414:	813fd626 	beq	r16,r4,3370 <__alt_mem_onchip_memory+0xf7803370>
    3418:	29402034 	orhi	r5,r5,128
    341c:	01000e04 	movi	r4,56
    3420:	2080a316 	blt	r4,r2,36b0 <__subdf3+0x3c4>
    3424:	010007c4 	movi	r4,31
    3428:	2080c616 	blt	r4,r2,3744 <__subdf3+0x458>
    342c:	01000804 	movi	r4,32
    3430:	2089c83a 	sub	r4,r4,r2
    3434:	2910983a 	sll	r8,r5,r4
    3438:	308ed83a 	srl	r7,r6,r2
    343c:	3108983a 	sll	r4,r6,r4
    3440:	2884d83a 	srl	r2,r5,r2
    3444:	41ccb03a 	or	r6,r8,r7
    3448:	2008c03a 	cmpne	r4,r4,zero
    344c:	310cb03a 	or	r6,r6,r4
    3450:	898dc83a 	sub	r6,r17,r6
    3454:	89a3803a 	cmpltu	r17,r17,r6
    3458:	1887c83a 	sub	r3,r3,r2
    345c:	1c47c83a 	sub	r3,r3,r17
    3460:	3023883a 	mov	r17,r6
    3464:	1880202c 	andhi	r2,r3,128
    3468:	10002326 	beq	r2,zero,34f8 <__subdf3+0x20c>
    346c:	04c02034 	movhi	r19,128
    3470:	9cffffc4 	addi	r19,r19,-1
    3474:	1ce6703a 	and	r19,r3,r19
    3478:	98007a26 	beq	r19,zero,3664 <__subdf3+0x378>
    347c:	9809883a 	mov	r4,r19
    3480:	0003ea00 	call	3ea0 <__clzsi2>
    3484:	113ffe04 	addi	r4,r2,-8
    3488:	00c007c4 	movi	r3,31
    348c:	19007b16 	blt	r3,r4,367c <__subdf3+0x390>
    3490:	00800804 	movi	r2,32
    3494:	1105c83a 	sub	r2,r2,r4
    3498:	8884d83a 	srl	r2,r17,r2
    349c:	9906983a 	sll	r3,r19,r4
    34a0:	8922983a 	sll	r17,r17,r4
    34a4:	10c4b03a 	or	r2,r2,r3
    34a8:	24007816 	blt	r4,r16,368c <__subdf3+0x3a0>
    34ac:	2421c83a 	sub	r16,r4,r16
    34b0:	80c00044 	addi	r3,r16,1
    34b4:	010007c4 	movi	r4,31
    34b8:	20c09516 	blt	r4,r3,3710 <__subdf3+0x424>
    34bc:	01400804 	movi	r5,32
    34c0:	28cbc83a 	sub	r5,r5,r3
    34c4:	88c8d83a 	srl	r4,r17,r3
    34c8:	8962983a 	sll	r17,r17,r5
    34cc:	114a983a 	sll	r5,r2,r5
    34d0:	10c6d83a 	srl	r3,r2,r3
    34d4:	8804c03a 	cmpne	r2,r17,zero
    34d8:	290ab03a 	or	r5,r5,r4
    34dc:	28a2b03a 	or	r17,r5,r2
    34e0:	0021883a 	mov	r16,zero
    34e4:	003fa206 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    34e8:	2090b03a 	or	r8,r4,r2
    34ec:	40018e26 	beq	r8,zero,3b28 <__subdf3+0x83c>
    34f0:	1007883a 	mov	r3,r2
    34f4:	2023883a 	mov	r17,r4
    34f8:	888001cc 	andi	r2,r17,7
    34fc:	103f9e1e 	bne	r2,zero,3378 <__alt_mem_onchip_memory+0xf7803378>
    3500:	1804977a 	slli	r2,r3,29
    3504:	8822d0fa 	srli	r17,r17,3
    3508:	1810d0fa 	srli	r8,r3,3
    350c:	9100004c 	andi	r4,r18,1
    3510:	1444b03a 	or	r2,r2,r17
    3514:	00c1ffc4 	movi	r3,2047
    3518:	80c02826 	beq	r16,r3,35bc <__subdf3+0x2d0>
    351c:	01400434 	movhi	r5,16
    3520:	297fffc4 	addi	r5,r5,-1
    3524:	80e0703a 	and	r16,r16,r3
    3528:	414a703a 	and	r5,r8,r5
    352c:	003fa806 	br	33d0 <__alt_mem_onchip_memory+0xf78033d0>
    3530:	0080630e 	bge	zero,r2,36c0 <__subdf3+0x3d4>
    3534:	48003026 	beq	r9,zero,35f8 <__subdf3+0x30c>
    3538:	0101ffc4 	movi	r4,2047
    353c:	813f8c26 	beq	r16,r4,3370 <__alt_mem_onchip_memory+0xf7803370>
    3540:	29402034 	orhi	r5,r5,128
    3544:	01000e04 	movi	r4,56
    3548:	2080a90e 	bge	r4,r2,37f0 <__subdf3+0x504>
    354c:	298cb03a 	or	r6,r5,r6
    3550:	3012c03a 	cmpne	r9,r6,zero
    3554:	0005883a 	mov	r2,zero
    3558:	4c53883a 	add	r9,r9,r17
    355c:	4c63803a 	cmpltu	r17,r9,r17
    3560:	10c7883a 	add	r3,r2,r3
    3564:	88c7883a 	add	r3,r17,r3
    3568:	4823883a 	mov	r17,r9
    356c:	1880202c 	andhi	r2,r3,128
    3570:	1000d026 	beq	r2,zero,38b4 <__subdf3+0x5c8>
    3574:	84000044 	addi	r16,r16,1
    3578:	0081ffc4 	movi	r2,2047
    357c:	8080fe26 	beq	r16,r2,3978 <__subdf3+0x68c>
    3580:	00bfe034 	movhi	r2,65408
    3584:	10bfffc4 	addi	r2,r2,-1
    3588:	1886703a 	and	r3,r3,r2
    358c:	880ad07a 	srli	r5,r17,1
    3590:	180497fa 	slli	r2,r3,31
    3594:	8900004c 	andi	r4,r17,1
    3598:	2922b03a 	or	r17,r5,r4
    359c:	1806d07a 	srli	r3,r3,1
    35a0:	1462b03a 	or	r17,r2,r17
    35a4:	3825883a 	mov	r18,r7
    35a8:	003f7106 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    35ac:	2984b03a 	or	r2,r5,r6
    35b0:	103f6826 	beq	r2,zero,3354 <__alt_mem_onchip_memory+0xf7803354>
    35b4:	39c03fcc 	andi	r7,r7,255
    35b8:	003f6706 	br	3358 <__alt_mem_onchip_memory+0xf7803358>
    35bc:	4086b03a 	or	r3,r8,r2
    35c0:	18015226 	beq	r3,zero,3b0c <__subdf3+0x820>
    35c4:	00c00434 	movhi	r3,16
    35c8:	41400234 	orhi	r5,r8,8
    35cc:	18ffffc4 	addi	r3,r3,-1
    35d0:	28ca703a 	and	r5,r5,r3
    35d4:	003f7e06 	br	33d0 <__alt_mem_onchip_memory+0xf78033d0>
    35d8:	10bfffc4 	addi	r2,r2,-1
    35dc:	1000491e 	bne	r2,zero,3704 <__subdf3+0x418>
    35e0:	898fc83a 	sub	r7,r17,r6
    35e4:	89e3803a 	cmpltu	r17,r17,r7
    35e8:	1947c83a 	sub	r3,r3,r5
    35ec:	1c47c83a 	sub	r3,r3,r17
    35f0:	3823883a 	mov	r17,r7
    35f4:	003f9b06 	br	3464 <__alt_mem_onchip_memory+0xf7803464>
    35f8:	2988b03a 	or	r4,r5,r6
    35fc:	203f5c26 	beq	r4,zero,3370 <__alt_mem_onchip_memory+0xf7803370>
    3600:	10bfffc4 	addi	r2,r2,-1
    3604:	1000931e 	bne	r2,zero,3854 <__subdf3+0x568>
    3608:	898d883a 	add	r6,r17,r6
    360c:	3463803a 	cmpltu	r17,r6,r17
    3610:	1947883a 	add	r3,r3,r5
    3614:	88c7883a 	add	r3,r17,r3
    3618:	3023883a 	mov	r17,r6
    361c:	003fd306 	br	356c <__alt_mem_onchip_memory+0xf780356c>
    3620:	1000541e 	bne	r2,zero,3774 <__subdf3+0x488>
    3624:	80800044 	addi	r2,r16,1
    3628:	1081ffcc 	andi	r2,r2,2047
    362c:	01000044 	movi	r4,1
    3630:	2080a20e 	bge	r4,r2,38bc <__subdf3+0x5d0>
    3634:	8989c83a 	sub	r4,r17,r6
    3638:	8905803a 	cmpltu	r2,r17,r4
    363c:	1967c83a 	sub	r19,r3,r5
    3640:	98a7c83a 	sub	r19,r19,r2
    3644:	9880202c 	andhi	r2,r19,128
    3648:	10006326 	beq	r2,zero,37d8 <__subdf3+0x4ec>
    364c:	3463c83a 	sub	r17,r6,r17
    3650:	28c7c83a 	sub	r3,r5,r3
    3654:	344d803a 	cmpltu	r6,r6,r17
    3658:	19a7c83a 	sub	r19,r3,r6
    365c:	3825883a 	mov	r18,r7
    3660:	983f861e 	bne	r19,zero,347c <__alt_mem_onchip_memory+0xf780347c>
    3664:	8809883a 	mov	r4,r17
    3668:	0003ea00 	call	3ea0 <__clzsi2>
    366c:	10800804 	addi	r2,r2,32
    3670:	113ffe04 	addi	r4,r2,-8
    3674:	00c007c4 	movi	r3,31
    3678:	193f850e 	bge	r3,r4,3490 <__alt_mem_onchip_memory+0xf7803490>
    367c:	10bff604 	addi	r2,r2,-40
    3680:	8884983a 	sll	r2,r17,r2
    3684:	0023883a 	mov	r17,zero
    3688:	243f880e 	bge	r4,r16,34ac <__alt_mem_onchip_memory+0xf78034ac>
    368c:	00ffe034 	movhi	r3,65408
    3690:	18ffffc4 	addi	r3,r3,-1
    3694:	8121c83a 	sub	r16,r16,r4
    3698:	10c6703a 	and	r3,r2,r3
    369c:	003f3406 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    36a0:	9100004c 	andi	r4,r18,1
    36a4:	000b883a 	mov	r5,zero
    36a8:	0005883a 	mov	r2,zero
    36ac:	003f4806 	br	33d0 <__alt_mem_onchip_memory+0xf78033d0>
    36b0:	298cb03a 	or	r6,r5,r6
    36b4:	300cc03a 	cmpne	r6,r6,zero
    36b8:	0005883a 	mov	r2,zero
    36bc:	003f6406 	br	3450 <__alt_mem_onchip_memory+0xf7803450>
    36c0:	10009a1e 	bne	r2,zero,392c <__subdf3+0x640>
    36c4:	82400044 	addi	r9,r16,1
    36c8:	4881ffcc 	andi	r2,r9,2047
    36cc:	02800044 	movi	r10,1
    36d0:	5080670e 	bge	r10,r2,3870 <__subdf3+0x584>
    36d4:	0081ffc4 	movi	r2,2047
    36d8:	4880af26 	beq	r9,r2,3998 <__subdf3+0x6ac>
    36dc:	898d883a 	add	r6,r17,r6
    36e0:	1945883a 	add	r2,r3,r5
    36e4:	3447803a 	cmpltu	r3,r6,r17
    36e8:	1887883a 	add	r3,r3,r2
    36ec:	182297fa 	slli	r17,r3,31
    36f0:	300cd07a 	srli	r6,r6,1
    36f4:	1806d07a 	srli	r3,r3,1
    36f8:	4821883a 	mov	r16,r9
    36fc:	89a2b03a 	or	r17,r17,r6
    3700:	003f1b06 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3704:	0101ffc4 	movi	r4,2047
    3708:	813f441e 	bne	r16,r4,341c <__alt_mem_onchip_memory+0xf780341c>
    370c:	003f1806 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3710:	843ff844 	addi	r16,r16,-31
    3714:	01400804 	movi	r5,32
    3718:	1408d83a 	srl	r4,r2,r16
    371c:	19405026 	beq	r3,r5,3860 <__subdf3+0x574>
    3720:	01401004 	movi	r5,64
    3724:	28c7c83a 	sub	r3,r5,r3
    3728:	10c4983a 	sll	r2,r2,r3
    372c:	88a2b03a 	or	r17,r17,r2
    3730:	8822c03a 	cmpne	r17,r17,zero
    3734:	2462b03a 	or	r17,r4,r17
    3738:	0007883a 	mov	r3,zero
    373c:	0021883a 	mov	r16,zero
    3740:	003f6d06 	br	34f8 <__alt_mem_onchip_memory+0xf78034f8>
    3744:	11fff804 	addi	r7,r2,-32
    3748:	01000804 	movi	r4,32
    374c:	29ced83a 	srl	r7,r5,r7
    3750:	11004526 	beq	r2,r4,3868 <__subdf3+0x57c>
    3754:	01001004 	movi	r4,64
    3758:	2089c83a 	sub	r4,r4,r2
    375c:	2904983a 	sll	r2,r5,r4
    3760:	118cb03a 	or	r6,r2,r6
    3764:	300cc03a 	cmpne	r6,r6,zero
    3768:	398cb03a 	or	r6,r7,r6
    376c:	0005883a 	mov	r2,zero
    3770:	003f3706 	br	3450 <__alt_mem_onchip_memory+0xf7803450>
    3774:	80002a26 	beq	r16,zero,3820 <__subdf3+0x534>
    3778:	0101ffc4 	movi	r4,2047
    377c:	49006626 	beq	r9,r4,3918 <__subdf3+0x62c>
    3780:	0085c83a 	sub	r2,zero,r2
    3784:	18c02034 	orhi	r3,r3,128
    3788:	01000e04 	movi	r4,56
    378c:	20807e16 	blt	r4,r2,3988 <__subdf3+0x69c>
    3790:	010007c4 	movi	r4,31
    3794:	2080e716 	blt	r4,r2,3b34 <__subdf3+0x848>
    3798:	01000804 	movi	r4,32
    379c:	2089c83a 	sub	r4,r4,r2
    37a0:	1914983a 	sll	r10,r3,r4
    37a4:	8890d83a 	srl	r8,r17,r2
    37a8:	8908983a 	sll	r4,r17,r4
    37ac:	1884d83a 	srl	r2,r3,r2
    37b0:	5222b03a 	or	r17,r10,r8
    37b4:	2006c03a 	cmpne	r3,r4,zero
    37b8:	88e2b03a 	or	r17,r17,r3
    37bc:	3463c83a 	sub	r17,r6,r17
    37c0:	2885c83a 	sub	r2,r5,r2
    37c4:	344d803a 	cmpltu	r6,r6,r17
    37c8:	1187c83a 	sub	r3,r2,r6
    37cc:	4821883a 	mov	r16,r9
    37d0:	3825883a 	mov	r18,r7
    37d4:	003f2306 	br	3464 <__alt_mem_onchip_memory+0xf7803464>
    37d8:	24d0b03a 	or	r8,r4,r19
    37dc:	40001b1e 	bne	r8,zero,384c <__subdf3+0x560>
    37e0:	0005883a 	mov	r2,zero
    37e4:	0009883a 	mov	r4,zero
    37e8:	0021883a 	mov	r16,zero
    37ec:	003f4906 	br	3514 <__alt_mem_onchip_memory+0xf7803514>
    37f0:	010007c4 	movi	r4,31
    37f4:	20803a16 	blt	r4,r2,38e0 <__subdf3+0x5f4>
    37f8:	01000804 	movi	r4,32
    37fc:	2089c83a 	sub	r4,r4,r2
    3800:	2912983a 	sll	r9,r5,r4
    3804:	3090d83a 	srl	r8,r6,r2
    3808:	3108983a 	sll	r4,r6,r4
    380c:	2884d83a 	srl	r2,r5,r2
    3810:	4a12b03a 	or	r9,r9,r8
    3814:	2008c03a 	cmpne	r4,r4,zero
    3818:	4912b03a 	or	r9,r9,r4
    381c:	003f4e06 	br	3558 <__alt_mem_onchip_memory+0xf7803558>
    3820:	1c48b03a 	or	r4,r3,r17
    3824:	20003c26 	beq	r4,zero,3918 <__subdf3+0x62c>
    3828:	0084303a 	nor	r2,zero,r2
    382c:	1000381e 	bne	r2,zero,3910 <__subdf3+0x624>
    3830:	3463c83a 	sub	r17,r6,r17
    3834:	28c5c83a 	sub	r2,r5,r3
    3838:	344d803a 	cmpltu	r6,r6,r17
    383c:	1187c83a 	sub	r3,r2,r6
    3840:	4821883a 	mov	r16,r9
    3844:	3825883a 	mov	r18,r7
    3848:	003f0606 	br	3464 <__alt_mem_onchip_memory+0xf7803464>
    384c:	2023883a 	mov	r17,r4
    3850:	003f0906 	br	3478 <__alt_mem_onchip_memory+0xf7803478>
    3854:	0101ffc4 	movi	r4,2047
    3858:	813f3a1e 	bne	r16,r4,3544 <__alt_mem_onchip_memory+0xf7803544>
    385c:	003ec406 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3860:	0005883a 	mov	r2,zero
    3864:	003fb106 	br	372c <__alt_mem_onchip_memory+0xf780372c>
    3868:	0005883a 	mov	r2,zero
    386c:	003fbc06 	br	3760 <__alt_mem_onchip_memory+0xf7803760>
    3870:	1c44b03a 	or	r2,r3,r17
    3874:	80008e1e 	bne	r16,zero,3ab0 <__subdf3+0x7c4>
    3878:	1000c826 	beq	r2,zero,3b9c <__subdf3+0x8b0>
    387c:	2984b03a 	or	r2,r5,r6
    3880:	103ebb26 	beq	r2,zero,3370 <__alt_mem_onchip_memory+0xf7803370>
    3884:	8989883a 	add	r4,r17,r6
    3888:	1945883a 	add	r2,r3,r5
    388c:	2447803a 	cmpltu	r3,r4,r17
    3890:	1887883a 	add	r3,r3,r2
    3894:	1880202c 	andhi	r2,r3,128
    3898:	2023883a 	mov	r17,r4
    389c:	103f1626 	beq	r2,zero,34f8 <__alt_mem_onchip_memory+0xf78034f8>
    38a0:	00bfe034 	movhi	r2,65408
    38a4:	10bfffc4 	addi	r2,r2,-1
    38a8:	5021883a 	mov	r16,r10
    38ac:	1886703a 	and	r3,r3,r2
    38b0:	003eaf06 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    38b4:	3825883a 	mov	r18,r7
    38b8:	003f0f06 	br	34f8 <__alt_mem_onchip_memory+0xf78034f8>
    38bc:	1c44b03a 	or	r2,r3,r17
    38c0:	8000251e 	bne	r16,zero,3958 <__subdf3+0x66c>
    38c4:	1000661e 	bne	r2,zero,3a60 <__subdf3+0x774>
    38c8:	2990b03a 	or	r8,r5,r6
    38cc:	40009626 	beq	r8,zero,3b28 <__subdf3+0x83c>
    38d0:	2807883a 	mov	r3,r5
    38d4:	3023883a 	mov	r17,r6
    38d8:	3825883a 	mov	r18,r7
    38dc:	003ea406 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    38e0:	127ff804 	addi	r9,r2,-32
    38e4:	01000804 	movi	r4,32
    38e8:	2a52d83a 	srl	r9,r5,r9
    38ec:	11008c26 	beq	r2,r4,3b20 <__subdf3+0x834>
    38f0:	01001004 	movi	r4,64
    38f4:	2085c83a 	sub	r2,r4,r2
    38f8:	2884983a 	sll	r2,r5,r2
    38fc:	118cb03a 	or	r6,r2,r6
    3900:	300cc03a 	cmpne	r6,r6,zero
    3904:	4992b03a 	or	r9,r9,r6
    3908:	0005883a 	mov	r2,zero
    390c:	003f1206 	br	3558 <__alt_mem_onchip_memory+0xf7803558>
    3910:	0101ffc4 	movi	r4,2047
    3914:	493f9c1e 	bne	r9,r4,3788 <__alt_mem_onchip_memory+0xf7803788>
    3918:	2807883a 	mov	r3,r5
    391c:	3023883a 	mov	r17,r6
    3920:	4821883a 	mov	r16,r9
    3924:	3825883a 	mov	r18,r7
    3928:	003e9106 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    392c:	80001f1e 	bne	r16,zero,39ac <__subdf3+0x6c0>
    3930:	1c48b03a 	or	r4,r3,r17
    3934:	20005a26 	beq	r4,zero,3aa0 <__subdf3+0x7b4>
    3938:	0084303a 	nor	r2,zero,r2
    393c:	1000561e 	bne	r2,zero,3a98 <__subdf3+0x7ac>
    3940:	89a3883a 	add	r17,r17,r6
    3944:	1945883a 	add	r2,r3,r5
    3948:	898d803a 	cmpltu	r6,r17,r6
    394c:	3087883a 	add	r3,r6,r2
    3950:	4821883a 	mov	r16,r9
    3954:	003f0506 	br	356c <__alt_mem_onchip_memory+0xf780356c>
    3958:	10002b1e 	bne	r2,zero,3a08 <__subdf3+0x71c>
    395c:	2984b03a 	or	r2,r5,r6
    3960:	10008026 	beq	r2,zero,3b64 <__subdf3+0x878>
    3964:	2807883a 	mov	r3,r5
    3968:	3023883a 	mov	r17,r6
    396c:	3825883a 	mov	r18,r7
    3970:	0401ffc4 	movi	r16,2047
    3974:	003e7e06 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3978:	3809883a 	mov	r4,r7
    397c:	0011883a 	mov	r8,zero
    3980:	0005883a 	mov	r2,zero
    3984:	003ee306 	br	3514 <__alt_mem_onchip_memory+0xf7803514>
    3988:	1c62b03a 	or	r17,r3,r17
    398c:	8822c03a 	cmpne	r17,r17,zero
    3990:	0005883a 	mov	r2,zero
    3994:	003f8906 	br	37bc <__alt_mem_onchip_memory+0xf78037bc>
    3998:	3809883a 	mov	r4,r7
    399c:	4821883a 	mov	r16,r9
    39a0:	0011883a 	mov	r8,zero
    39a4:	0005883a 	mov	r2,zero
    39a8:	003eda06 	br	3514 <__alt_mem_onchip_memory+0xf7803514>
    39ac:	0101ffc4 	movi	r4,2047
    39b0:	49003b26 	beq	r9,r4,3aa0 <__subdf3+0x7b4>
    39b4:	0085c83a 	sub	r2,zero,r2
    39b8:	18c02034 	orhi	r3,r3,128
    39bc:	01000e04 	movi	r4,56
    39c0:	20806e16 	blt	r4,r2,3b7c <__subdf3+0x890>
    39c4:	010007c4 	movi	r4,31
    39c8:	20807716 	blt	r4,r2,3ba8 <__subdf3+0x8bc>
    39cc:	01000804 	movi	r4,32
    39d0:	2089c83a 	sub	r4,r4,r2
    39d4:	1914983a 	sll	r10,r3,r4
    39d8:	8890d83a 	srl	r8,r17,r2
    39dc:	8908983a 	sll	r4,r17,r4
    39e0:	1884d83a 	srl	r2,r3,r2
    39e4:	5222b03a 	or	r17,r10,r8
    39e8:	2006c03a 	cmpne	r3,r4,zero
    39ec:	88e2b03a 	or	r17,r17,r3
    39f0:	89a3883a 	add	r17,r17,r6
    39f4:	1145883a 	add	r2,r2,r5
    39f8:	898d803a 	cmpltu	r6,r17,r6
    39fc:	3087883a 	add	r3,r6,r2
    3a00:	4821883a 	mov	r16,r9
    3a04:	003ed906 	br	356c <__alt_mem_onchip_memory+0xf780356c>
    3a08:	2984b03a 	or	r2,r5,r6
    3a0c:	10004226 	beq	r2,zero,3b18 <__subdf3+0x82c>
    3a10:	1808d0fa 	srli	r4,r3,3
    3a14:	8822d0fa 	srli	r17,r17,3
    3a18:	1806977a 	slli	r3,r3,29
    3a1c:	2080022c 	andhi	r2,r4,8
    3a20:	1c62b03a 	or	r17,r3,r17
    3a24:	10000826 	beq	r2,zero,3a48 <__subdf3+0x75c>
    3a28:	2812d0fa 	srli	r9,r5,3
    3a2c:	4880022c 	andhi	r2,r9,8
    3a30:	1000051e 	bne	r2,zero,3a48 <__subdf3+0x75c>
    3a34:	300cd0fa 	srli	r6,r6,3
    3a38:	2804977a 	slli	r2,r5,29
    3a3c:	4809883a 	mov	r4,r9
    3a40:	3825883a 	mov	r18,r7
    3a44:	11a2b03a 	or	r17,r2,r6
    3a48:	8806d77a 	srli	r3,r17,29
    3a4c:	200890fa 	slli	r4,r4,3
    3a50:	882290fa 	slli	r17,r17,3
    3a54:	0401ffc4 	movi	r16,2047
    3a58:	1906b03a 	or	r3,r3,r4
    3a5c:	003e4406 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3a60:	2984b03a 	or	r2,r5,r6
    3a64:	103e4226 	beq	r2,zero,3370 <__alt_mem_onchip_memory+0xf7803370>
    3a68:	8989c83a 	sub	r4,r17,r6
    3a6c:	8911803a 	cmpltu	r8,r17,r4
    3a70:	1945c83a 	sub	r2,r3,r5
    3a74:	1205c83a 	sub	r2,r2,r8
    3a78:	1200202c 	andhi	r8,r2,128
    3a7c:	403e9a26 	beq	r8,zero,34e8 <__alt_mem_onchip_memory+0xf78034e8>
    3a80:	3463c83a 	sub	r17,r6,r17
    3a84:	28c5c83a 	sub	r2,r5,r3
    3a88:	344d803a 	cmpltu	r6,r6,r17
    3a8c:	1187c83a 	sub	r3,r2,r6
    3a90:	3825883a 	mov	r18,r7
    3a94:	003e3606 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3a98:	0101ffc4 	movi	r4,2047
    3a9c:	493fc71e 	bne	r9,r4,39bc <__alt_mem_onchip_memory+0xf78039bc>
    3aa0:	2807883a 	mov	r3,r5
    3aa4:	3023883a 	mov	r17,r6
    3aa8:	4821883a 	mov	r16,r9
    3aac:	003e3006 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3ab0:	10003626 	beq	r2,zero,3b8c <__subdf3+0x8a0>
    3ab4:	2984b03a 	or	r2,r5,r6
    3ab8:	10001726 	beq	r2,zero,3b18 <__subdf3+0x82c>
    3abc:	1808d0fa 	srli	r4,r3,3
    3ac0:	8822d0fa 	srli	r17,r17,3
    3ac4:	1806977a 	slli	r3,r3,29
    3ac8:	2080022c 	andhi	r2,r4,8
    3acc:	1c62b03a 	or	r17,r3,r17
    3ad0:	10000726 	beq	r2,zero,3af0 <__subdf3+0x804>
    3ad4:	2812d0fa 	srli	r9,r5,3
    3ad8:	4880022c 	andhi	r2,r9,8
    3adc:	1000041e 	bne	r2,zero,3af0 <__subdf3+0x804>
    3ae0:	300cd0fa 	srli	r6,r6,3
    3ae4:	2804977a 	slli	r2,r5,29
    3ae8:	4809883a 	mov	r4,r9
    3aec:	11a2b03a 	or	r17,r2,r6
    3af0:	8806d77a 	srli	r3,r17,29
    3af4:	200890fa 	slli	r4,r4,3
    3af8:	882290fa 	slli	r17,r17,3
    3afc:	3825883a 	mov	r18,r7
    3b00:	1906b03a 	or	r3,r3,r4
    3b04:	0401ffc4 	movi	r16,2047
    3b08:	003e1906 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3b0c:	000b883a 	mov	r5,zero
    3b10:	0005883a 	mov	r2,zero
    3b14:	003e2e06 	br	33d0 <__alt_mem_onchip_memory+0xf78033d0>
    3b18:	0401ffc4 	movi	r16,2047
    3b1c:	003e1406 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3b20:	0005883a 	mov	r2,zero
    3b24:	003f7506 	br	38fc <__alt_mem_onchip_memory+0xf78038fc>
    3b28:	0005883a 	mov	r2,zero
    3b2c:	0009883a 	mov	r4,zero
    3b30:	003e7806 	br	3514 <__alt_mem_onchip_memory+0xf7803514>
    3b34:	123ff804 	addi	r8,r2,-32
    3b38:	01000804 	movi	r4,32
    3b3c:	1a10d83a 	srl	r8,r3,r8
    3b40:	11002526 	beq	r2,r4,3bd8 <__subdf3+0x8ec>
    3b44:	01001004 	movi	r4,64
    3b48:	2085c83a 	sub	r2,r4,r2
    3b4c:	1884983a 	sll	r2,r3,r2
    3b50:	1444b03a 	or	r2,r2,r17
    3b54:	1004c03a 	cmpne	r2,r2,zero
    3b58:	40a2b03a 	or	r17,r8,r2
    3b5c:	0005883a 	mov	r2,zero
    3b60:	003f1606 	br	37bc <__alt_mem_onchip_memory+0xf78037bc>
    3b64:	02000434 	movhi	r8,16
    3b68:	0009883a 	mov	r4,zero
    3b6c:	423fffc4 	addi	r8,r8,-1
    3b70:	00bfffc4 	movi	r2,-1
    3b74:	0401ffc4 	movi	r16,2047
    3b78:	003e6606 	br	3514 <__alt_mem_onchip_memory+0xf7803514>
    3b7c:	1c62b03a 	or	r17,r3,r17
    3b80:	8822c03a 	cmpne	r17,r17,zero
    3b84:	0005883a 	mov	r2,zero
    3b88:	003f9906 	br	39f0 <__alt_mem_onchip_memory+0xf78039f0>
    3b8c:	2807883a 	mov	r3,r5
    3b90:	3023883a 	mov	r17,r6
    3b94:	0401ffc4 	movi	r16,2047
    3b98:	003df506 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3b9c:	2807883a 	mov	r3,r5
    3ba0:	3023883a 	mov	r17,r6
    3ba4:	003df206 	br	3370 <__alt_mem_onchip_memory+0xf7803370>
    3ba8:	123ff804 	addi	r8,r2,-32
    3bac:	01000804 	movi	r4,32
    3bb0:	1a10d83a 	srl	r8,r3,r8
    3bb4:	11000a26 	beq	r2,r4,3be0 <__subdf3+0x8f4>
    3bb8:	01001004 	movi	r4,64
    3bbc:	2085c83a 	sub	r2,r4,r2
    3bc0:	1884983a 	sll	r2,r3,r2
    3bc4:	1444b03a 	or	r2,r2,r17
    3bc8:	1004c03a 	cmpne	r2,r2,zero
    3bcc:	40a2b03a 	or	r17,r8,r2
    3bd0:	0005883a 	mov	r2,zero
    3bd4:	003f8606 	br	39f0 <__alt_mem_onchip_memory+0xf78039f0>
    3bd8:	0005883a 	mov	r2,zero
    3bdc:	003fdc06 	br	3b50 <__alt_mem_onchip_memory+0xf7803b50>
    3be0:	0005883a 	mov	r2,zero
    3be4:	003ff706 	br	3bc4 <__alt_mem_onchip_memory+0xf7803bc4>

00003be8 <__extendsfdf2>:
    3be8:	200ad5fa 	srli	r5,r4,23
    3bec:	defffd04 	addi	sp,sp,-12
    3bf0:	dc400115 	stw	r17,4(sp)
    3bf4:	29403fcc 	andi	r5,r5,255
    3bf8:	29800044 	addi	r6,r5,1
    3bfc:	04402034 	movhi	r17,128
    3c00:	dc000015 	stw	r16,0(sp)
    3c04:	8c7fffc4 	addi	r17,r17,-1
    3c08:	dfc00215 	stw	ra,8(sp)
    3c0c:	31803fcc 	andi	r6,r6,255
    3c10:	00800044 	movi	r2,1
    3c14:	8922703a 	and	r17,r17,r4
    3c18:	2020d7fa 	srli	r16,r4,31
    3c1c:	1180110e 	bge	r2,r6,3c64 <__extendsfdf2+0x7c>
    3c20:	880cd0fa 	srli	r6,r17,3
    3c24:	8822977a 	slli	r17,r17,29
    3c28:	2940e004 	addi	r5,r5,896
    3c2c:	2941ffcc 	andi	r5,r5,2047
    3c30:	2804953a 	slli	r2,r5,20
    3c34:	01400434 	movhi	r5,16
    3c38:	800697fa 	slli	r3,r16,31
    3c3c:	297fffc4 	addi	r5,r5,-1
    3c40:	314a703a 	and	r5,r6,r5
    3c44:	288ab03a 	or	r5,r5,r2
    3c48:	28c6b03a 	or	r3,r5,r3
    3c4c:	8805883a 	mov	r2,r17
    3c50:	dfc00217 	ldw	ra,8(sp)
    3c54:	dc400117 	ldw	r17,4(sp)
    3c58:	dc000017 	ldw	r16,0(sp)
    3c5c:	dec00304 	addi	sp,sp,12
    3c60:	f800283a 	ret
    3c64:	2800111e 	bne	r5,zero,3cac <__extendsfdf2+0xc4>
    3c68:	88001c26 	beq	r17,zero,3cdc <__extendsfdf2+0xf4>
    3c6c:	8809883a 	mov	r4,r17
    3c70:	0003ea00 	call	3ea0 <__clzsi2>
    3c74:	00c00284 	movi	r3,10
    3c78:	18801b16 	blt	r3,r2,3ce8 <__extendsfdf2+0x100>
    3c7c:	018002c4 	movi	r6,11
    3c80:	308dc83a 	sub	r6,r6,r2
    3c84:	11000544 	addi	r4,r2,21
    3c88:	8986d83a 	srl	r3,r17,r6
    3c8c:	8922983a 	sll	r17,r17,r4
    3c90:	0180e244 	movi	r6,905
    3c94:	01400434 	movhi	r5,16
    3c98:	3085c83a 	sub	r2,r6,r2
    3c9c:	297fffc4 	addi	r5,r5,-1
    3ca0:	194c703a 	and	r6,r3,r5
    3ca4:	1141ffcc 	andi	r5,r2,2047
    3ca8:	003fe006 	br	3c2c <__alt_mem_onchip_memory+0xf7803c2c>
    3cac:	88000826 	beq	r17,zero,3cd0 <__extendsfdf2+0xe8>
    3cb0:	880cd0fa 	srli	r6,r17,3
    3cb4:	00800434 	movhi	r2,16
    3cb8:	10bfffc4 	addi	r2,r2,-1
    3cbc:	31800234 	orhi	r6,r6,8
    3cc0:	8822977a 	slli	r17,r17,29
    3cc4:	308c703a 	and	r6,r6,r2
    3cc8:	0141ffc4 	movi	r5,2047
    3ccc:	003fd706 	br	3c2c <__alt_mem_onchip_memory+0xf7803c2c>
    3cd0:	0141ffc4 	movi	r5,2047
    3cd4:	000d883a 	mov	r6,zero
    3cd8:	003fd406 	br	3c2c <__alt_mem_onchip_memory+0xf7803c2c>
    3cdc:	000b883a 	mov	r5,zero
    3ce0:	000d883a 	mov	r6,zero
    3ce4:	003fd106 	br	3c2c <__alt_mem_onchip_memory+0xf7803c2c>
    3ce8:	11bffd44 	addi	r6,r2,-11
    3cec:	8986983a 	sll	r3,r17,r6
    3cf0:	0023883a 	mov	r17,zero
    3cf4:	003fe606 	br	3c90 <__alt_mem_onchip_memory+0xf7803c90>

00003cf8 <__truncdfsf2>:
    3cf8:	2810d53a 	srli	r8,r5,20
    3cfc:	01c00434 	movhi	r7,16
    3d00:	39ffffc4 	addi	r7,r7,-1
    3d04:	29ce703a 	and	r7,r5,r7
    3d08:	4201ffcc 	andi	r8,r8,2047
    3d0c:	380e90fa 	slli	r7,r7,3
    3d10:	200cd77a 	srli	r6,r4,29
    3d14:	42400044 	addi	r9,r8,1
    3d18:	4a41ffcc 	andi	r9,r9,2047
    3d1c:	00c00044 	movi	r3,1
    3d20:	280ad7fa 	srli	r5,r5,31
    3d24:	31ceb03a 	or	r7,r6,r7
    3d28:	200490fa 	slli	r2,r4,3
    3d2c:	1a40230e 	bge	r3,r9,3dbc <__truncdfsf2+0xc4>
    3d30:	40ff2004 	addi	r3,r8,-896
    3d34:	01803f84 	movi	r6,254
    3d38:	30c01516 	blt	r6,r3,3d90 <__truncdfsf2+0x98>
    3d3c:	00c0380e 	bge	zero,r3,3e20 <__truncdfsf2+0x128>
    3d40:	200c91ba 	slli	r6,r4,6
    3d44:	380e90fa 	slli	r7,r7,3
    3d48:	1004d77a 	srli	r2,r2,29
    3d4c:	300cc03a 	cmpne	r6,r6,zero
    3d50:	31ccb03a 	or	r6,r6,r7
    3d54:	308cb03a 	or	r6,r6,r2
    3d58:	308001cc 	andi	r2,r6,7
    3d5c:	10000426 	beq	r2,zero,3d70 <__truncdfsf2+0x78>
    3d60:	308003cc 	andi	r2,r6,15
    3d64:	01000104 	movi	r4,4
    3d68:	11000126 	beq	r2,r4,3d70 <__truncdfsf2+0x78>
    3d6c:	31800104 	addi	r6,r6,4
    3d70:	3081002c 	andhi	r2,r6,1024
    3d74:	10001626 	beq	r2,zero,3dd0 <__truncdfsf2+0xd8>
    3d78:	18c00044 	addi	r3,r3,1
    3d7c:	00803fc4 	movi	r2,255
    3d80:	18800326 	beq	r3,r2,3d90 <__truncdfsf2+0x98>
    3d84:	300c91ba 	slli	r6,r6,6
    3d88:	300cd27a 	srli	r6,r6,9
    3d8c:	00000206 	br	3d98 <__truncdfsf2+0xa0>
    3d90:	00ffffc4 	movi	r3,-1
    3d94:	000d883a 	mov	r6,zero
    3d98:	18c03fcc 	andi	r3,r3,255
    3d9c:	180895fa 	slli	r4,r3,23
    3da0:	00c02034 	movhi	r3,128
    3da4:	280a97fa 	slli	r5,r5,31
    3da8:	18ffffc4 	addi	r3,r3,-1
    3dac:	30c6703a 	and	r3,r6,r3
    3db0:	1906b03a 	or	r3,r3,r4
    3db4:	1944b03a 	or	r2,r3,r5
    3db8:	f800283a 	ret
    3dbc:	40000b1e 	bne	r8,zero,3dec <__truncdfsf2+0xf4>
    3dc0:	388cb03a 	or	r6,r7,r2
    3dc4:	0007883a 	mov	r3,zero
    3dc8:	30000426 	beq	r6,zero,3ddc <__truncdfsf2+0xe4>
    3dcc:	01800144 	movi	r6,5
    3dd0:	00803fc4 	movi	r2,255
    3dd4:	300cd0fa 	srli	r6,r6,3
    3dd8:	18800a26 	beq	r3,r2,3e04 <__truncdfsf2+0x10c>
    3ddc:	00802034 	movhi	r2,128
    3de0:	10bfffc4 	addi	r2,r2,-1
    3de4:	308c703a 	and	r6,r6,r2
    3de8:	003feb06 	br	3d98 <__alt_mem_onchip_memory+0xf7803d98>
    3dec:	3888b03a 	or	r4,r7,r2
    3df0:	203fe726 	beq	r4,zero,3d90 <__alt_mem_onchip_memory+0xf7803d90>
    3df4:	380c90fa 	slli	r6,r7,3
    3df8:	00c03fc4 	movi	r3,255
    3dfc:	31808034 	orhi	r6,r6,512
    3e00:	003fd506 	br	3d58 <__alt_mem_onchip_memory+0xf7803d58>
    3e04:	303fe226 	beq	r6,zero,3d90 <__alt_mem_onchip_memory+0xf7803d90>
    3e08:	00802034 	movhi	r2,128
    3e0c:	31801034 	orhi	r6,r6,64
    3e10:	10bfffc4 	addi	r2,r2,-1
    3e14:	00ffffc4 	movi	r3,-1
    3e18:	308c703a 	and	r6,r6,r2
    3e1c:	003fde06 	br	3d98 <__alt_mem_onchip_memory+0xf7803d98>
    3e20:	013ffa44 	movi	r4,-23
    3e24:	19000e16 	blt	r3,r4,3e60 <__truncdfsf2+0x168>
    3e28:	01000784 	movi	r4,30
    3e2c:	20c9c83a 	sub	r4,r4,r3
    3e30:	018007c4 	movi	r6,31
    3e34:	39c02034 	orhi	r7,r7,128
    3e38:	31000b16 	blt	r6,r4,3e68 <__truncdfsf2+0x170>
    3e3c:	423f2084 	addi	r8,r8,-894
    3e40:	120c983a 	sll	r6,r2,r8
    3e44:	3a0e983a 	sll	r7,r7,r8
    3e48:	1104d83a 	srl	r2,r2,r4
    3e4c:	300cc03a 	cmpne	r6,r6,zero
    3e50:	31ceb03a 	or	r7,r6,r7
    3e54:	388cb03a 	or	r6,r7,r2
    3e58:	0007883a 	mov	r3,zero
    3e5c:	003fbe06 	br	3d58 <__alt_mem_onchip_memory+0xf7803d58>
    3e60:	0007883a 	mov	r3,zero
    3e64:	003fd906 	br	3dcc <__alt_mem_onchip_memory+0xf7803dcc>
    3e68:	01bfff84 	movi	r6,-2
    3e6c:	30cdc83a 	sub	r6,r6,r3
    3e70:	00c00804 	movi	r3,32
    3e74:	398cd83a 	srl	r6,r7,r6
    3e78:	20c00726 	beq	r4,r3,3e98 <__truncdfsf2+0x1a0>
    3e7c:	423f2884 	addi	r8,r8,-862
    3e80:	3a0e983a 	sll	r7,r7,r8
    3e84:	3884b03a 	or	r2,r7,r2
    3e88:	1004c03a 	cmpne	r2,r2,zero
    3e8c:	118cb03a 	or	r6,r2,r6
    3e90:	0007883a 	mov	r3,zero
    3e94:	003fb006 	br	3d58 <__alt_mem_onchip_memory+0xf7803d58>
    3e98:	000f883a 	mov	r7,zero
    3e9c:	003ff906 	br	3e84 <__alt_mem_onchip_memory+0xf7803e84>

00003ea0 <__clzsi2>:
    3ea0:	00bfffd4 	movui	r2,65535
    3ea4:	11000536 	bltu	r2,r4,3ebc <__clzsi2+0x1c>
    3ea8:	00803fc4 	movi	r2,255
    3eac:	11000f36 	bltu	r2,r4,3eec <__clzsi2+0x4c>
    3eb0:	00800804 	movi	r2,32
    3eb4:	0007883a 	mov	r3,zero
    3eb8:	00000506 	br	3ed0 <__clzsi2+0x30>
    3ebc:	00804034 	movhi	r2,256
    3ec0:	10bfffc4 	addi	r2,r2,-1
    3ec4:	11000c2e 	bgeu	r2,r4,3ef8 <__clzsi2+0x58>
    3ec8:	00800204 	movi	r2,8
    3ecc:	00c00604 	movi	r3,24
    3ed0:	20c8d83a 	srl	r4,r4,r3
    3ed4:	00c00074 	movhi	r3,1
    3ed8:	18c5c744 	addi	r3,r3,5917
    3edc:	1909883a 	add	r4,r3,r4
    3ee0:	20c00003 	ldbu	r3,0(r4)
    3ee4:	10c5c83a 	sub	r2,r2,r3
    3ee8:	f800283a 	ret
    3eec:	00800604 	movi	r2,24
    3ef0:	00c00204 	movi	r3,8
    3ef4:	003ff606 	br	3ed0 <__alt_mem_onchip_memory+0xf7803ed0>
    3ef8:	00800404 	movi	r2,16
    3efc:	1007883a 	mov	r3,r2
    3f00:	003ff306 	br	3ed0 <__alt_mem_onchip_memory+0xf7803ed0>

00003f04 <__divsi3>:
    3f04:	20001b16 	blt	r4,zero,3f74 <__divsi3+0x70>
    3f08:	000f883a 	mov	r7,zero
    3f0c:	28001616 	blt	r5,zero,3f68 <__divsi3+0x64>
    3f10:	200d883a 	mov	r6,r4
    3f14:	29001a2e 	bgeu	r5,r4,3f80 <__divsi3+0x7c>
    3f18:	00800804 	movi	r2,32
    3f1c:	00c00044 	movi	r3,1
    3f20:	00000106 	br	3f28 <__divsi3+0x24>
    3f24:	10000d26 	beq	r2,zero,3f5c <__divsi3+0x58>
    3f28:	294b883a 	add	r5,r5,r5
    3f2c:	10bfffc4 	addi	r2,r2,-1
    3f30:	18c7883a 	add	r3,r3,r3
    3f34:	293ffb36 	bltu	r5,r4,3f24 <__alt_mem_onchip_memory+0xf7803f24>
    3f38:	0005883a 	mov	r2,zero
    3f3c:	18000726 	beq	r3,zero,3f5c <__divsi3+0x58>
    3f40:	0005883a 	mov	r2,zero
    3f44:	31400236 	bltu	r6,r5,3f50 <__divsi3+0x4c>
    3f48:	314dc83a 	sub	r6,r6,r5
    3f4c:	10c4b03a 	or	r2,r2,r3
    3f50:	1806d07a 	srli	r3,r3,1
    3f54:	280ad07a 	srli	r5,r5,1
    3f58:	183ffa1e 	bne	r3,zero,3f44 <__alt_mem_onchip_memory+0xf7803f44>
    3f5c:	38000126 	beq	r7,zero,3f64 <__divsi3+0x60>
    3f60:	0085c83a 	sub	r2,zero,r2
    3f64:	f800283a 	ret
    3f68:	014bc83a 	sub	r5,zero,r5
    3f6c:	39c0005c 	xori	r7,r7,1
    3f70:	003fe706 	br	3f10 <__alt_mem_onchip_memory+0xf7803f10>
    3f74:	0109c83a 	sub	r4,zero,r4
    3f78:	01c00044 	movi	r7,1
    3f7c:	003fe306 	br	3f0c <__alt_mem_onchip_memory+0xf7803f0c>
    3f80:	00c00044 	movi	r3,1
    3f84:	003fee06 	br	3f40 <__alt_mem_onchip_memory+0xf7803f40>

00003f88 <__modsi3>:
    3f88:	20001716 	blt	r4,zero,3fe8 <__modsi3+0x60>
    3f8c:	000f883a 	mov	r7,zero
    3f90:	2005883a 	mov	r2,r4
    3f94:	28001216 	blt	r5,zero,3fe0 <__modsi3+0x58>
    3f98:	2900162e 	bgeu	r5,r4,3ff4 <__modsi3+0x6c>
    3f9c:	01800804 	movi	r6,32
    3fa0:	00c00044 	movi	r3,1
    3fa4:	00000106 	br	3fac <__modsi3+0x24>
    3fa8:	30000a26 	beq	r6,zero,3fd4 <__modsi3+0x4c>
    3fac:	294b883a 	add	r5,r5,r5
    3fb0:	31bfffc4 	addi	r6,r6,-1
    3fb4:	18c7883a 	add	r3,r3,r3
    3fb8:	293ffb36 	bltu	r5,r4,3fa8 <__alt_mem_onchip_memory+0xf7803fa8>
    3fbc:	18000526 	beq	r3,zero,3fd4 <__modsi3+0x4c>
    3fc0:	1806d07a 	srli	r3,r3,1
    3fc4:	11400136 	bltu	r2,r5,3fcc <__modsi3+0x44>
    3fc8:	1145c83a 	sub	r2,r2,r5
    3fcc:	280ad07a 	srli	r5,r5,1
    3fd0:	183ffb1e 	bne	r3,zero,3fc0 <__alt_mem_onchip_memory+0xf7803fc0>
    3fd4:	38000126 	beq	r7,zero,3fdc <__modsi3+0x54>
    3fd8:	0085c83a 	sub	r2,zero,r2
    3fdc:	f800283a 	ret
    3fe0:	014bc83a 	sub	r5,zero,r5
    3fe4:	003fec06 	br	3f98 <__alt_mem_onchip_memory+0xf7803f98>
    3fe8:	0109c83a 	sub	r4,zero,r4
    3fec:	01c00044 	movi	r7,1
    3ff0:	003fe706 	br	3f90 <__alt_mem_onchip_memory+0xf7803f90>
    3ff4:	00c00044 	movi	r3,1
    3ff8:	003ff106 	br	3fc0 <__alt_mem_onchip_memory+0xf7803fc0>

00003ffc <__udivsi3>:
    3ffc:	200d883a 	mov	r6,r4
    4000:	2900152e 	bgeu	r5,r4,4058 <__udivsi3+0x5c>
    4004:	28001416 	blt	r5,zero,4058 <__udivsi3+0x5c>
    4008:	00800804 	movi	r2,32
    400c:	00c00044 	movi	r3,1
    4010:	00000206 	br	401c <__udivsi3+0x20>
    4014:	10000e26 	beq	r2,zero,4050 <__udivsi3+0x54>
    4018:	28000516 	blt	r5,zero,4030 <__udivsi3+0x34>
    401c:	294b883a 	add	r5,r5,r5
    4020:	10bfffc4 	addi	r2,r2,-1
    4024:	18c7883a 	add	r3,r3,r3
    4028:	293ffa36 	bltu	r5,r4,4014 <__alt_mem_onchip_memory+0xf7804014>
    402c:	18000826 	beq	r3,zero,4050 <__udivsi3+0x54>
    4030:	0005883a 	mov	r2,zero
    4034:	31400236 	bltu	r6,r5,4040 <__udivsi3+0x44>
    4038:	314dc83a 	sub	r6,r6,r5
    403c:	10c4b03a 	or	r2,r2,r3
    4040:	1806d07a 	srli	r3,r3,1
    4044:	280ad07a 	srli	r5,r5,1
    4048:	183ffa1e 	bne	r3,zero,4034 <__alt_mem_onchip_memory+0xf7804034>
    404c:	f800283a 	ret
    4050:	0005883a 	mov	r2,zero
    4054:	f800283a 	ret
    4058:	00c00044 	movi	r3,1
    405c:	003ff406 	br	4030 <__alt_mem_onchip_memory+0xf7804030>

00004060 <__umodsi3>:
    4060:	2005883a 	mov	r2,r4
    4064:	2900122e 	bgeu	r5,r4,40b0 <__umodsi3+0x50>
    4068:	28001116 	blt	r5,zero,40b0 <__umodsi3+0x50>
    406c:	01800804 	movi	r6,32
    4070:	00c00044 	movi	r3,1
    4074:	00000206 	br	4080 <__umodsi3+0x20>
    4078:	30000c26 	beq	r6,zero,40ac <__umodsi3+0x4c>
    407c:	28000516 	blt	r5,zero,4094 <__umodsi3+0x34>
    4080:	294b883a 	add	r5,r5,r5
    4084:	31bfffc4 	addi	r6,r6,-1
    4088:	18c7883a 	add	r3,r3,r3
    408c:	293ffa36 	bltu	r5,r4,4078 <__alt_mem_onchip_memory+0xf7804078>
    4090:	18000626 	beq	r3,zero,40ac <__umodsi3+0x4c>
    4094:	1806d07a 	srli	r3,r3,1
    4098:	11400136 	bltu	r2,r5,40a0 <__umodsi3+0x40>
    409c:	1145c83a 	sub	r2,r2,r5
    40a0:	280ad07a 	srli	r5,r5,1
    40a4:	183ffb1e 	bne	r3,zero,4094 <__alt_mem_onchip_memory+0xf7804094>
    40a8:	f800283a 	ret
    40ac:	f800283a 	ret
    40b0:	00c00044 	movi	r3,1
    40b4:	003ff706 	br	4094 <__alt_mem_onchip_memory+0xf7804094>

000040b8 <__errno>:
    40b8:	00800074 	movhi	r2,1
    40bc:	108d7704 	addi	r2,r2,13788
    40c0:	10800017 	ldw	r2,0(r2)
    40c4:	f800283a 	ret

000040c8 <_printf_r>:
    40c8:	defffd04 	addi	sp,sp,-12
    40cc:	2805883a 	mov	r2,r5
    40d0:	dfc00015 	stw	ra,0(sp)
    40d4:	d9800115 	stw	r6,4(sp)
    40d8:	d9c00215 	stw	r7,8(sp)
    40dc:	21400217 	ldw	r5,8(r4)
    40e0:	d9c00104 	addi	r7,sp,4
    40e4:	100d883a 	mov	r6,r2
    40e8:	00043ec0 	call	43ec <___vfprintf_internal_r>
    40ec:	dfc00017 	ldw	ra,0(sp)
    40f0:	dec00304 	addi	sp,sp,12
    40f4:	f800283a 	ret

000040f8 <printf>:
    40f8:	defffc04 	addi	sp,sp,-16
    40fc:	dfc00015 	stw	ra,0(sp)
    4100:	d9400115 	stw	r5,4(sp)
    4104:	d9800215 	stw	r6,8(sp)
    4108:	d9c00315 	stw	r7,12(sp)
    410c:	00800074 	movhi	r2,1
    4110:	108d7704 	addi	r2,r2,13788
    4114:	10800017 	ldw	r2,0(r2)
    4118:	200b883a 	mov	r5,r4
    411c:	d9800104 	addi	r6,sp,4
    4120:	11000217 	ldw	r4,8(r2)
    4124:	00065e40 	call	65e4 <__vfprintf_internal>
    4128:	dfc00017 	ldw	ra,0(sp)
    412c:	dec00404 	addi	sp,sp,16
    4130:	f800283a 	ret

00004134 <_putchar_r>:
    4134:	21800217 	ldw	r6,8(r4)
    4138:	000b1041 	jmpi	b104 <_putc_r>

0000413c <putchar>:
    413c:	00800074 	movhi	r2,1
    4140:	108d7704 	addi	r2,r2,13788
    4144:	200b883a 	mov	r5,r4
    4148:	11000017 	ldw	r4,0(r2)
    414c:	21800217 	ldw	r6,8(r4)
    4150:	000b1041 	jmpi	b104 <_putc_r>

00004154 <_puts_r>:
    4154:	defff604 	addi	sp,sp,-40
    4158:	dc000715 	stw	r16,28(sp)
    415c:	2021883a 	mov	r16,r4
    4160:	2809883a 	mov	r4,r5
    4164:	dc400815 	stw	r17,32(sp)
    4168:	dfc00915 	stw	ra,36(sp)
    416c:	2823883a 	mov	r17,r5
    4170:	00042a40 	call	42a4 <strlen>
    4174:	10c00044 	addi	r3,r2,1
    4178:	d8800115 	stw	r2,4(sp)
    417c:	00800074 	movhi	r2,1
    4180:	10860904 	addi	r2,r2,6180
    4184:	d8800215 	stw	r2,8(sp)
    4188:	00800044 	movi	r2,1
    418c:	d8800315 	stw	r2,12(sp)
    4190:	00800084 	movi	r2,2
    4194:	dc400015 	stw	r17,0(sp)
    4198:	d8c00615 	stw	r3,24(sp)
    419c:	dec00415 	stw	sp,16(sp)
    41a0:	d8800515 	stw	r2,20(sp)
    41a4:	80000226 	beq	r16,zero,41b0 <_puts_r+0x5c>
    41a8:	80800e17 	ldw	r2,56(r16)
    41ac:	10001426 	beq	r2,zero,4200 <_puts_r+0xac>
    41b0:	81400217 	ldw	r5,8(r16)
    41b4:	2880030b 	ldhu	r2,12(r5)
    41b8:	10c8000c 	andi	r3,r2,8192
    41bc:	1800061e 	bne	r3,zero,41d8 <_puts_r+0x84>
    41c0:	29001917 	ldw	r4,100(r5)
    41c4:	00f7ffc4 	movi	r3,-8193
    41c8:	10880014 	ori	r2,r2,8192
    41cc:	20c6703a 	and	r3,r4,r3
    41d0:	2880030d 	sth	r2,12(r5)
    41d4:	28c01915 	stw	r3,100(r5)
    41d8:	d9800404 	addi	r6,sp,16
    41dc:	8009883a 	mov	r4,r16
    41e0:	0008b140 	call	8b14 <__sfvwrite_r>
    41e4:	1000091e 	bne	r2,zero,420c <_puts_r+0xb8>
    41e8:	00800284 	movi	r2,10
    41ec:	dfc00917 	ldw	ra,36(sp)
    41f0:	dc400817 	ldw	r17,32(sp)
    41f4:	dc000717 	ldw	r16,28(sp)
    41f8:	dec00a04 	addi	sp,sp,40
    41fc:	f800283a 	ret
    4200:	8009883a 	mov	r4,r16
    4204:	00086900 	call	8690 <__sinit>
    4208:	003fe906 	br	41b0 <__alt_mem_onchip_memory+0xf78041b0>
    420c:	00bfffc4 	movi	r2,-1
    4210:	003ff606 	br	41ec <__alt_mem_onchip_memory+0xf78041ec>

00004214 <puts>:
    4214:	00800074 	movhi	r2,1
    4218:	108d7704 	addi	r2,r2,13788
    421c:	200b883a 	mov	r5,r4
    4220:	11000017 	ldw	r4,0(r2)
    4224:	00041541 	jmpi	4154 <_puts_r>

00004228 <srand>:
    4228:	00800074 	movhi	r2,1
    422c:	108d7704 	addi	r2,r2,13788
    4230:	10800017 	ldw	r2,0(r2)
    4234:	11002915 	stw	r4,164(r2)
    4238:	10002a15 	stw	zero,168(r2)
    423c:	f800283a 	ret

00004240 <rand>:
    4240:	00800074 	movhi	r2,1
    4244:	defffe04 	addi	sp,sp,-8
    4248:	108d7704 	addi	r2,r2,13788
    424c:	dc000015 	stw	r16,0(sp)
    4250:	14000017 	ldw	r16,0(r2)
    4254:	dfc00115 	stw	ra,4(sp)
    4258:	01932574 	movhi	r6,19605
    425c:	81002917 	ldw	r4,164(r16)
    4260:	81402a17 	ldw	r5,168(r16)
    4264:	01d614b4 	movhi	r7,22610
    4268:	319fcb44 	addi	r6,r6,32557
    426c:	39fd0b44 	addi	r7,r7,-3027
    4270:	000d9b80 	call	d9b8 <__muldi3>
    4274:	11000044 	addi	r4,r2,1
    4278:	2085803a 	cmpltu	r2,r4,r2
    427c:	10c7883a 	add	r3,r2,r3
    4280:	00a00034 	movhi	r2,32768
    4284:	10bfffc4 	addi	r2,r2,-1
    4288:	1884703a 	and	r2,r3,r2
    428c:	81002915 	stw	r4,164(r16)
    4290:	80c02a15 	stw	r3,168(r16)
    4294:	dfc00117 	ldw	ra,4(sp)
    4298:	dc000017 	ldw	r16,0(sp)
    429c:	dec00204 	addi	sp,sp,8
    42a0:	f800283a 	ret

000042a4 <strlen>:
    42a4:	208000cc 	andi	r2,r4,3
    42a8:	10002026 	beq	r2,zero,432c <strlen+0x88>
    42ac:	20800007 	ldb	r2,0(r4)
    42b0:	10002026 	beq	r2,zero,4334 <strlen+0x90>
    42b4:	2005883a 	mov	r2,r4
    42b8:	00000206 	br	42c4 <strlen+0x20>
    42bc:	10c00007 	ldb	r3,0(r2)
    42c0:	18001826 	beq	r3,zero,4324 <strlen+0x80>
    42c4:	10800044 	addi	r2,r2,1
    42c8:	10c000cc 	andi	r3,r2,3
    42cc:	183ffb1e 	bne	r3,zero,42bc <__alt_mem_onchip_memory+0xf78042bc>
    42d0:	10c00017 	ldw	r3,0(r2)
    42d4:	01ffbff4 	movhi	r7,65279
    42d8:	39ffbfc4 	addi	r7,r7,-257
    42dc:	00ca303a 	nor	r5,zero,r3
    42e0:	01a02074 	movhi	r6,32897
    42e4:	19c7883a 	add	r3,r3,r7
    42e8:	31a02004 	addi	r6,r6,-32640
    42ec:	1946703a 	and	r3,r3,r5
    42f0:	1986703a 	and	r3,r3,r6
    42f4:	1800091e 	bne	r3,zero,431c <strlen+0x78>
    42f8:	10800104 	addi	r2,r2,4
    42fc:	10c00017 	ldw	r3,0(r2)
    4300:	19cb883a 	add	r5,r3,r7
    4304:	00c6303a 	nor	r3,zero,r3
    4308:	28c6703a 	and	r3,r5,r3
    430c:	1986703a 	and	r3,r3,r6
    4310:	183ff926 	beq	r3,zero,42f8 <__alt_mem_onchip_memory+0xf78042f8>
    4314:	00000106 	br	431c <strlen+0x78>
    4318:	10800044 	addi	r2,r2,1
    431c:	10c00007 	ldb	r3,0(r2)
    4320:	183ffd1e 	bne	r3,zero,4318 <__alt_mem_onchip_memory+0xf7804318>
    4324:	1105c83a 	sub	r2,r2,r4
    4328:	f800283a 	ret
    432c:	2005883a 	mov	r2,r4
    4330:	003fe706 	br	42d0 <__alt_mem_onchip_memory+0xf78042d0>
    4334:	0005883a 	mov	r2,zero
    4338:	f800283a 	ret

0000433c <_system_r>:
    433c:	2800021e 	bne	r5,zero,4348 <_system_r+0xc>
    4340:	0005883a 	mov	r2,zero
    4344:	f800283a 	ret
    4348:	deffff04 	addi	sp,sp,-4
    434c:	dfc00015 	stw	ra,0(sp)
    4350:	00040b80 	call	40b8 <__errno>
    4354:	00c01604 	movi	r3,88
    4358:	10c00015 	stw	r3,0(r2)
    435c:	00bfffc4 	movi	r2,-1
    4360:	dfc00017 	ldw	ra,0(sp)
    4364:	dec00104 	addi	sp,sp,4
    4368:	f800283a 	ret

0000436c <system>:
    436c:	20000926 	beq	r4,zero,4394 <system+0x28>
    4370:	deffff04 	addi	sp,sp,-4
    4374:	dfc00015 	stw	ra,0(sp)
    4378:	00040b80 	call	40b8 <__errno>
    437c:	00c01604 	movi	r3,88
    4380:	10c00015 	stw	r3,0(r2)
    4384:	00bfffc4 	movi	r2,-1
    4388:	dfc00017 	ldw	ra,0(sp)
    438c:	dec00104 	addi	sp,sp,4
    4390:	f800283a 	ret
    4394:	0005883a 	mov	r2,zero
    4398:	f800283a 	ret

0000439c <time>:
    439c:	00800074 	movhi	r2,1
    43a0:	defffc04 	addi	sp,sp,-16
    43a4:	108d7704 	addi	r2,r2,13788
    43a8:	dc000215 	stw	r16,8(sp)
    43ac:	2021883a 	mov	r16,r4
    43b0:	11000017 	ldw	r4,0(r2)
    43b4:	000d883a 	mov	r6,zero
    43b8:	d80b883a 	mov	r5,sp
    43bc:	dfc00315 	stw	ra,12(sp)
    43c0:	00091580 	call	9158 <_gettimeofday_r>
    43c4:	10000716 	blt	r2,zero,43e4 <time+0x48>
    43c8:	d8800017 	ldw	r2,0(sp)
    43cc:	80000126 	beq	r16,zero,43d4 <time+0x38>
    43d0:	80800015 	stw	r2,0(r16)
    43d4:	dfc00317 	ldw	ra,12(sp)
    43d8:	dc000217 	ldw	r16,8(sp)
    43dc:	dec00404 	addi	sp,sp,16
    43e0:	f800283a 	ret
    43e4:	00bfffc4 	movi	r2,-1
    43e8:	003ffa06 	br	43d4 <__alt_mem_onchip_memory+0xf78043d4>

000043ec <___vfprintf_internal_r>:
    43ec:	deffb804 	addi	sp,sp,-288
    43f0:	dfc04715 	stw	ra,284(sp)
    43f4:	ddc04515 	stw	r23,276(sp)
    43f8:	dd404315 	stw	r21,268(sp)
    43fc:	d9002c15 	stw	r4,176(sp)
    4400:	282f883a 	mov	r23,r5
    4404:	302b883a 	mov	r21,r6
    4408:	d9c02d15 	stw	r7,180(sp)
    440c:	df004615 	stw	fp,280(sp)
    4410:	dd804415 	stw	r22,272(sp)
    4414:	dd004215 	stw	r20,264(sp)
    4418:	dcc04115 	stw	r19,260(sp)
    441c:	dc804015 	stw	r18,256(sp)
    4420:	dc403f15 	stw	r17,252(sp)
    4424:	dc003e15 	stw	r16,248(sp)
    4428:	00092600 	call	9260 <_localeconv_r>
    442c:	10800017 	ldw	r2,0(r2)
    4430:	1009883a 	mov	r4,r2
    4434:	d8803415 	stw	r2,208(sp)
    4438:	00042a40 	call	42a4 <strlen>
    443c:	d8803715 	stw	r2,220(sp)
    4440:	d8802c17 	ldw	r2,176(sp)
    4444:	10000226 	beq	r2,zero,4450 <___vfprintf_internal_r+0x64>
    4448:	10800e17 	ldw	r2,56(r2)
    444c:	1000f926 	beq	r2,zero,4834 <___vfprintf_internal_r+0x448>
    4450:	b880030b 	ldhu	r2,12(r23)
    4454:	10c8000c 	andi	r3,r2,8192
    4458:	1800061e 	bne	r3,zero,4474 <___vfprintf_internal_r+0x88>
    445c:	b9001917 	ldw	r4,100(r23)
    4460:	00f7ffc4 	movi	r3,-8193
    4464:	10880014 	ori	r2,r2,8192
    4468:	20c6703a 	and	r3,r4,r3
    446c:	b880030d 	sth	r2,12(r23)
    4470:	b8c01915 	stw	r3,100(r23)
    4474:	10c0020c 	andi	r3,r2,8
    4478:	1800c126 	beq	r3,zero,4780 <___vfprintf_internal_r+0x394>
    447c:	b8c00417 	ldw	r3,16(r23)
    4480:	1800bf26 	beq	r3,zero,4780 <___vfprintf_internal_r+0x394>
    4484:	1080068c 	andi	r2,r2,26
    4488:	00c00284 	movi	r3,10
    448c:	10c0c426 	beq	r2,r3,47a0 <___vfprintf_internal_r+0x3b4>
    4490:	d8c00404 	addi	r3,sp,16
    4494:	05000074 	movhi	r20,1
    4498:	d9001e04 	addi	r4,sp,120
    449c:	a5061a84 	addi	r20,r20,6250
    44a0:	d8c01e15 	stw	r3,120(sp)
    44a4:	d8002015 	stw	zero,128(sp)
    44a8:	d8001f15 	stw	zero,124(sp)
    44ac:	d8003315 	stw	zero,204(sp)
    44b0:	d8003615 	stw	zero,216(sp)
    44b4:	d8003815 	stw	zero,224(sp)
    44b8:	1811883a 	mov	r8,r3
    44bc:	d8003915 	stw	zero,228(sp)
    44c0:	d8003a15 	stw	zero,232(sp)
    44c4:	d8002f15 	stw	zero,188(sp)
    44c8:	d9002815 	stw	r4,160(sp)
    44cc:	a8800007 	ldb	r2,0(r21)
    44d0:	10027b26 	beq	r2,zero,4ec0 <___vfprintf_internal_r+0xad4>
    44d4:	00c00944 	movi	r3,37
    44d8:	a821883a 	mov	r16,r21
    44dc:	10c0021e 	bne	r2,r3,44e8 <___vfprintf_internal_r+0xfc>
    44e0:	00001406 	br	4534 <___vfprintf_internal_r+0x148>
    44e4:	10c00326 	beq	r2,r3,44f4 <___vfprintf_internal_r+0x108>
    44e8:	84000044 	addi	r16,r16,1
    44ec:	80800007 	ldb	r2,0(r16)
    44f0:	103ffc1e 	bne	r2,zero,44e4 <__alt_mem_onchip_memory+0xf78044e4>
    44f4:	8563c83a 	sub	r17,r16,r21
    44f8:	88000e26 	beq	r17,zero,4534 <___vfprintf_internal_r+0x148>
    44fc:	d8c02017 	ldw	r3,128(sp)
    4500:	d8801f17 	ldw	r2,124(sp)
    4504:	45400015 	stw	r21,0(r8)
    4508:	1c47883a 	add	r3,r3,r17
    450c:	10800044 	addi	r2,r2,1
    4510:	d8c02015 	stw	r3,128(sp)
    4514:	44400115 	stw	r17,4(r8)
    4518:	d8801f15 	stw	r2,124(sp)
    451c:	00c001c4 	movi	r3,7
    4520:	1880a716 	blt	r3,r2,47c0 <___vfprintf_internal_r+0x3d4>
    4524:	42000204 	addi	r8,r8,8
    4528:	d9402f17 	ldw	r5,188(sp)
    452c:	2c4b883a 	add	r5,r5,r17
    4530:	d9402f15 	stw	r5,188(sp)
    4534:	80800007 	ldb	r2,0(r16)
    4538:	1000a826 	beq	r2,zero,47dc <___vfprintf_internal_r+0x3f0>
    453c:	84400047 	ldb	r17,1(r16)
    4540:	00bfffc4 	movi	r2,-1
    4544:	85400044 	addi	r21,r16,1
    4548:	d8002785 	stb	zero,158(sp)
    454c:	0007883a 	mov	r3,zero
    4550:	000f883a 	mov	r7,zero
    4554:	d8802915 	stw	r2,164(sp)
    4558:	d8003115 	stw	zero,196(sp)
    455c:	0025883a 	mov	r18,zero
    4560:	01401604 	movi	r5,88
    4564:	01800244 	movi	r6,9
    4568:	02800a84 	movi	r10,42
    456c:	02401b04 	movi	r9,108
    4570:	ad400044 	addi	r21,r21,1
    4574:	88bff804 	addi	r2,r17,-32
    4578:	28830436 	bltu	r5,r2,518c <___vfprintf_internal_r+0xda0>
    457c:	100490ba 	slli	r2,r2,2
    4580:	01000034 	movhi	r4,0
    4584:	21116504 	addi	r4,r4,17812
    4588:	1105883a 	add	r2,r2,r4
    458c:	10800017 	ldw	r2,0(r2)
    4590:	1000683a 	jmp	r2
    4594:	000050ac 	andhi	zero,zero,322
    4598:	0000518c 	andi	zero,zero,326
    459c:	0000518c 	andi	zero,zero,326
    45a0:	000050cc 	andi	zero,zero,323
    45a4:	0000518c 	andi	zero,zero,326
    45a8:	0000518c 	andi	zero,zero,326
    45ac:	0000518c 	andi	zero,zero,326
    45b0:	0000518c 	andi	zero,zero,326
    45b4:	0000518c 	andi	zero,zero,326
    45b8:	0000518c 	andi	zero,zero,326
    45bc:	00004840 	call	484 <calcNet+0xe0>
    45c0:	00004fe8 	cmpgeui	zero,zero,319
    45c4:	0000518c 	andi	zero,zero,326
    45c8:	00004708 	cmpgei	zero,zero,284
    45cc:	00004868 	cmpgeui	zero,zero,289
    45d0:	0000518c 	andi	zero,zero,326
    45d4:	000048a8 	cmpgeui	zero,zero,290
    45d8:	000048b4 	movhi	zero,290
    45dc:	000048b4 	movhi	zero,290
    45e0:	000048b4 	movhi	zero,290
    45e4:	000048b4 	movhi	zero,290
    45e8:	000048b4 	movhi	zero,290
    45ec:	000048b4 	movhi	zero,290
    45f0:	000048b4 	movhi	zero,290
    45f4:	000048b4 	movhi	zero,290
    45f8:	000048b4 	movhi	zero,290
    45fc:	0000518c 	andi	zero,zero,326
    4600:	0000518c 	andi	zero,zero,326
    4604:	0000518c 	andi	zero,zero,326
    4608:	0000518c 	andi	zero,zero,326
    460c:	0000518c 	andi	zero,zero,326
    4610:	0000518c 	andi	zero,zero,326
    4614:	0000518c 	andi	zero,zero,326
    4618:	0000518c 	andi	zero,zero,326
    461c:	0000518c 	andi	zero,zero,326
    4620:	0000518c 	andi	zero,zero,326
    4624:	000048e8 	cmpgeui	zero,zero,291
    4628:	000049a4 	muli	zero,zero,294
    462c:	0000518c 	andi	zero,zero,326
    4630:	000049a4 	muli	zero,zero,294
    4634:	0000518c 	andi	zero,zero,326
    4638:	0000518c 	andi	zero,zero,326
    463c:	0000518c 	andi	zero,zero,326
    4640:	0000518c 	andi	zero,zero,326
    4644:	00004a44 	movi	zero,297
    4648:	0000518c 	andi	zero,zero,326
    464c:	0000518c 	andi	zero,zero,326
    4650:	00004a50 	cmplti	zero,zero,297
    4654:	0000518c 	andi	zero,zero,326
    4658:	0000518c 	andi	zero,zero,326
    465c:	0000518c 	andi	zero,zero,326
    4660:	0000518c 	andi	zero,zero,326
    4664:	0000518c 	andi	zero,zero,326
    4668:	00004ec8 	cmpgei	zero,zero,315
    466c:	0000518c 	andi	zero,zero,326
    4670:	0000518c 	andi	zero,zero,326
    4674:	00004f28 	cmpgeui	zero,zero,316
    4678:	0000518c 	andi	zero,zero,326
    467c:	0000518c 	andi	zero,zero,326
    4680:	0000518c 	andi	zero,zero,326
    4684:	0000518c 	andi	zero,zero,326
    4688:	0000518c 	andi	zero,zero,326
    468c:	0000518c 	andi	zero,zero,326
    4690:	0000518c 	andi	zero,zero,326
    4694:	0000518c 	andi	zero,zero,326
    4698:	0000518c 	andi	zero,zero,326
    469c:	0000518c 	andi	zero,zero,326
    46a0:	00005138 	rdprs	zero,zero,324
    46a4:	000050d8 	cmpnei	zero,zero,323
    46a8:	000049a4 	muli	zero,zero,294
    46ac:	000049a4 	muli	zero,zero,294
    46b0:	000049a4 	muli	zero,zero,294
    46b4:	000050e8 	cmpgeui	zero,zero,323
    46b8:	000050d8 	cmpnei	zero,zero,323
    46bc:	0000518c 	andi	zero,zero,326
    46c0:	0000518c 	andi	zero,zero,326
    46c4:	000050f4 	movhi	zero,323
    46c8:	0000518c 	andi	zero,zero,326
    46cc:	00005104 	movi	zero,324
    46d0:	00004fd8 	cmpnei	zero,zero,319
    46d4:	00004714 	movui	zero,284
    46d8:	00004ff8 	rdprs	zero,zero,319
    46dc:	0000518c 	andi	zero,zero,326
    46e0:	00005004 	movi	zero,320
    46e4:	0000518c 	andi	zero,zero,326
    46e8:	00005060 	cmpeqi	zero,zero,321
    46ec:	0000518c 	andi	zero,zero,326
    46f0:	0000518c 	andi	zero,zero,326
    46f4:	00005070 	cmpltui	zero,zero,321
    46f8:	d9003117 	ldw	r4,196(sp)
    46fc:	d8802d15 	stw	r2,180(sp)
    4700:	0109c83a 	sub	r4,zero,r4
    4704:	d9003115 	stw	r4,196(sp)
    4708:	94800114 	ori	r18,r18,4
    470c:	ac400007 	ldb	r17,0(r21)
    4710:	003f9706 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    4714:	00800c04 	movi	r2,48
    4718:	d9002d17 	ldw	r4,180(sp)
    471c:	d9402917 	ldw	r5,164(sp)
    4720:	d8802705 	stb	r2,156(sp)
    4724:	00801e04 	movi	r2,120
    4728:	d8802745 	stb	r2,157(sp)
    472c:	d8002785 	stb	zero,158(sp)
    4730:	20c00104 	addi	r3,r4,4
    4734:	24c00017 	ldw	r19,0(r4)
    4738:	002d883a 	mov	r22,zero
    473c:	90800094 	ori	r2,r18,2
    4740:	28029a16 	blt	r5,zero,51ac <___vfprintf_internal_r+0xdc0>
    4744:	00bfdfc4 	movi	r2,-129
    4748:	90a4703a 	and	r18,r18,r2
    474c:	d8c02d15 	stw	r3,180(sp)
    4750:	94800094 	ori	r18,r18,2
    4754:	9802871e 	bne	r19,zero,5174 <___vfprintf_internal_r+0xd88>
    4758:	00800074 	movhi	r2,1
    475c:	10861304 	addi	r2,r2,6220
    4760:	d8803915 	stw	r2,228(sp)
    4764:	04401e04 	movi	r17,120
    4768:	d8802917 	ldw	r2,164(sp)
    476c:	0039883a 	mov	fp,zero
    4770:	1001e926 	beq	r2,zero,4f18 <___vfprintf_internal_r+0xb2c>
    4774:	0027883a 	mov	r19,zero
    4778:	002d883a 	mov	r22,zero
    477c:	00020506 	br	4f94 <___vfprintf_internal_r+0xba8>
    4780:	d9002c17 	ldw	r4,176(sp)
    4784:	b80b883a 	mov	r5,r23
    4788:	00066bc0 	call	66bc <__swsetup_r>
    478c:	1005ac1e 	bne	r2,zero,5e40 <___vfprintf_internal_r+0x1a54>
    4790:	b880030b 	ldhu	r2,12(r23)
    4794:	00c00284 	movi	r3,10
    4798:	1080068c 	andi	r2,r2,26
    479c:	10ff3c1e 	bne	r2,r3,4490 <__alt_mem_onchip_memory+0xf7804490>
    47a0:	b880038f 	ldh	r2,14(r23)
    47a4:	103f3a16 	blt	r2,zero,4490 <__alt_mem_onchip_memory+0xf7804490>
    47a8:	d9c02d17 	ldw	r7,180(sp)
    47ac:	d9002c17 	ldw	r4,176(sp)
    47b0:	a80d883a 	mov	r6,r21
    47b4:	b80b883a 	mov	r5,r23
    47b8:	00066000 	call	6600 <__sbprintf>
    47bc:	00001106 	br	4804 <___vfprintf_internal_r+0x418>
    47c0:	d9002c17 	ldw	r4,176(sp)
    47c4:	d9801e04 	addi	r6,sp,120
    47c8:	b80b883a 	mov	r5,r23
    47cc:	000bb380 	call	bb38 <__sprint_r>
    47d0:	1000081e 	bne	r2,zero,47f4 <___vfprintf_internal_r+0x408>
    47d4:	da000404 	addi	r8,sp,16
    47d8:	003f5306 	br	4528 <__alt_mem_onchip_memory+0xf7804528>
    47dc:	d8802017 	ldw	r2,128(sp)
    47e0:	10000426 	beq	r2,zero,47f4 <___vfprintf_internal_r+0x408>
    47e4:	d9002c17 	ldw	r4,176(sp)
    47e8:	d9801e04 	addi	r6,sp,120
    47ec:	b80b883a 	mov	r5,r23
    47f0:	000bb380 	call	bb38 <__sprint_r>
    47f4:	b880030b 	ldhu	r2,12(r23)
    47f8:	1080100c 	andi	r2,r2,64
    47fc:	1005901e 	bne	r2,zero,5e40 <___vfprintf_internal_r+0x1a54>
    4800:	d8802f17 	ldw	r2,188(sp)
    4804:	dfc04717 	ldw	ra,284(sp)
    4808:	df004617 	ldw	fp,280(sp)
    480c:	ddc04517 	ldw	r23,276(sp)
    4810:	dd804417 	ldw	r22,272(sp)
    4814:	dd404317 	ldw	r21,268(sp)
    4818:	dd004217 	ldw	r20,264(sp)
    481c:	dcc04117 	ldw	r19,260(sp)
    4820:	dc804017 	ldw	r18,256(sp)
    4824:	dc403f17 	ldw	r17,252(sp)
    4828:	dc003e17 	ldw	r16,248(sp)
    482c:	dec04804 	addi	sp,sp,288
    4830:	f800283a 	ret
    4834:	d9002c17 	ldw	r4,176(sp)
    4838:	00086900 	call	8690 <__sinit>
    483c:	003f0406 	br	4450 <__alt_mem_onchip_memory+0xf7804450>
    4840:	d8802d17 	ldw	r2,180(sp)
    4844:	d9002d17 	ldw	r4,180(sp)
    4848:	10800017 	ldw	r2,0(r2)
    484c:	d8803115 	stw	r2,196(sp)
    4850:	20800104 	addi	r2,r4,4
    4854:	d9003117 	ldw	r4,196(sp)
    4858:	203fa716 	blt	r4,zero,46f8 <__alt_mem_onchip_memory+0xf78046f8>
    485c:	d8802d15 	stw	r2,180(sp)
    4860:	ac400007 	ldb	r17,0(r21)
    4864:	003f4206 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    4868:	ac400007 	ldb	r17,0(r21)
    486c:	aac00044 	addi	r11,r21,1
    4870:	8a872826 	beq	r17,r10,6514 <___vfprintf_internal_r+0x2128>
    4874:	88bff404 	addi	r2,r17,-48
    4878:	0009883a 	mov	r4,zero
    487c:	30867d36 	bltu	r6,r2,6274 <___vfprintf_internal_r+0x1e88>
    4880:	5c400007 	ldb	r17,0(r11)
    4884:	210002a4 	muli	r4,r4,10
    4888:	5d400044 	addi	r21,r11,1
    488c:	a817883a 	mov	r11,r21
    4890:	2089883a 	add	r4,r4,r2
    4894:	88bff404 	addi	r2,r17,-48
    4898:	30bff92e 	bgeu	r6,r2,4880 <__alt_mem_onchip_memory+0xf7804880>
    489c:	2005c916 	blt	r4,zero,5fc4 <___vfprintf_internal_r+0x1bd8>
    48a0:	d9002915 	stw	r4,164(sp)
    48a4:	003f3306 	br	4574 <__alt_mem_onchip_memory+0xf7804574>
    48a8:	94802014 	ori	r18,r18,128
    48ac:	ac400007 	ldb	r17,0(r21)
    48b0:	003f2f06 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    48b4:	a809883a 	mov	r4,r21
    48b8:	d8003115 	stw	zero,196(sp)
    48bc:	88bff404 	addi	r2,r17,-48
    48c0:	0017883a 	mov	r11,zero
    48c4:	24400007 	ldb	r17,0(r4)
    48c8:	5ac002a4 	muli	r11,r11,10
    48cc:	ad400044 	addi	r21,r21,1
    48d0:	a809883a 	mov	r4,r21
    48d4:	12d7883a 	add	r11,r2,r11
    48d8:	88bff404 	addi	r2,r17,-48
    48dc:	30bff92e 	bgeu	r6,r2,48c4 <__alt_mem_onchip_memory+0xf78048c4>
    48e0:	dac03115 	stw	r11,196(sp)
    48e4:	003f2306 	br	4574 <__alt_mem_onchip_memory+0xf7804574>
    48e8:	18c03fcc 	andi	r3,r3,255
    48ec:	18072b1e 	bne	r3,zero,659c <___vfprintf_internal_r+0x21b0>
    48f0:	94800414 	ori	r18,r18,16
    48f4:	9080080c 	andi	r2,r18,32
    48f8:	10037b26 	beq	r2,zero,56e8 <___vfprintf_internal_r+0x12fc>
    48fc:	d9402d17 	ldw	r5,180(sp)
    4900:	28800117 	ldw	r2,4(r5)
    4904:	2cc00017 	ldw	r19,0(r5)
    4908:	29400204 	addi	r5,r5,8
    490c:	d9402d15 	stw	r5,180(sp)
    4910:	102d883a 	mov	r22,r2
    4914:	10044b16 	blt	r2,zero,5a44 <___vfprintf_internal_r+0x1658>
    4918:	d9402917 	ldw	r5,164(sp)
    491c:	df002783 	ldbu	fp,158(sp)
    4920:	2803bc16 	blt	r5,zero,5814 <___vfprintf_internal_r+0x1428>
    4924:	00ffdfc4 	movi	r3,-129
    4928:	9d84b03a 	or	r2,r19,r22
    492c:	90e4703a 	and	r18,r18,r3
    4930:	10017726 	beq	r2,zero,4f10 <___vfprintf_internal_r+0xb24>
    4934:	b0038326 	beq	r22,zero,5744 <___vfprintf_internal_r+0x1358>
    4938:	dc402a15 	stw	r17,168(sp)
    493c:	dc001e04 	addi	r16,sp,120
    4940:	b023883a 	mov	r17,r22
    4944:	402d883a 	mov	r22,r8
    4948:	9809883a 	mov	r4,r19
    494c:	880b883a 	mov	r5,r17
    4950:	01800284 	movi	r6,10
    4954:	000f883a 	mov	r7,zero
    4958:	000df900 	call	df90 <__umoddi3>
    495c:	10800c04 	addi	r2,r2,48
    4960:	843fffc4 	addi	r16,r16,-1
    4964:	9809883a 	mov	r4,r19
    4968:	880b883a 	mov	r5,r17
    496c:	80800005 	stb	r2,0(r16)
    4970:	01800284 	movi	r6,10
    4974:	000f883a 	mov	r7,zero
    4978:	000da180 	call	da18 <__udivdi3>
    497c:	1027883a 	mov	r19,r2
    4980:	10c4b03a 	or	r2,r2,r3
    4984:	1823883a 	mov	r17,r3
    4988:	103fef1e 	bne	r2,zero,4948 <__alt_mem_onchip_memory+0xf7804948>
    498c:	d8c02817 	ldw	r3,160(sp)
    4990:	dc402a17 	ldw	r17,168(sp)
    4994:	b011883a 	mov	r8,r22
    4998:	1c07c83a 	sub	r3,r3,r16
    499c:	d8c02e15 	stw	r3,184(sp)
    49a0:	00005906 	br	4b08 <___vfprintf_internal_r+0x71c>
    49a4:	18c03fcc 	andi	r3,r3,255
    49a8:	1806fa1e 	bne	r3,zero,6594 <___vfprintf_internal_r+0x21a8>
    49ac:	9080020c 	andi	r2,r18,8
    49b0:	10048a26 	beq	r2,zero,5bdc <___vfprintf_internal_r+0x17f0>
    49b4:	d8c02d17 	ldw	r3,180(sp)
    49b8:	d9002d17 	ldw	r4,180(sp)
    49bc:	d9402d17 	ldw	r5,180(sp)
    49c0:	18c00017 	ldw	r3,0(r3)
    49c4:	21000117 	ldw	r4,4(r4)
    49c8:	29400204 	addi	r5,r5,8
    49cc:	d8c03615 	stw	r3,216(sp)
    49d0:	d9003815 	stw	r4,224(sp)
    49d4:	d9402d15 	stw	r5,180(sp)
    49d8:	d9003617 	ldw	r4,216(sp)
    49dc:	d9403817 	ldw	r5,224(sp)
    49e0:	da003d15 	stw	r8,244(sp)
    49e4:	04000044 	movi	r16,1
    49e8:	00018d00 	call	18d0 <__fpclassifyd>
    49ec:	da003d17 	ldw	r8,244(sp)
    49f0:	14041f1e 	bne	r2,r16,5a70 <___vfprintf_internal_r+0x1684>
    49f4:	d9003617 	ldw	r4,216(sp)
    49f8:	d9403817 	ldw	r5,224(sp)
    49fc:	000d883a 	mov	r6,zero
    4a00:	000f883a 	mov	r7,zero
    4a04:	0002ae00 	call	2ae0 <__ledf2>
    4a08:	da003d17 	ldw	r8,244(sp)
    4a0c:	1005be16 	blt	r2,zero,6108 <___vfprintf_internal_r+0x1d1c>
    4a10:	df002783 	ldbu	fp,158(sp)
    4a14:	008011c4 	movi	r2,71
    4a18:	1445330e 	bge	r2,r17,5ee8 <___vfprintf_internal_r+0x1afc>
    4a1c:	04000074 	movhi	r16,1
    4a20:	84060b04 	addi	r16,r16,6188
    4a24:	00c000c4 	movi	r3,3
    4a28:	00bfdfc4 	movi	r2,-129
    4a2c:	d8c02a15 	stw	r3,168(sp)
    4a30:	90a4703a 	and	r18,r18,r2
    4a34:	d8c02e15 	stw	r3,184(sp)
    4a38:	d8002915 	stw	zero,164(sp)
    4a3c:	d8003215 	stw	zero,200(sp)
    4a40:	00003706 	br	4b20 <___vfprintf_internal_r+0x734>
    4a44:	94800214 	ori	r18,r18,8
    4a48:	ac400007 	ldb	r17,0(r21)
    4a4c:	003ec806 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    4a50:	18c03fcc 	andi	r3,r3,255
    4a54:	1806db1e 	bne	r3,zero,65c4 <___vfprintf_internal_r+0x21d8>
    4a58:	94800414 	ori	r18,r18,16
    4a5c:	9080080c 	andi	r2,r18,32
    4a60:	1002d826 	beq	r2,zero,55c4 <___vfprintf_internal_r+0x11d8>
    4a64:	d9402d17 	ldw	r5,180(sp)
    4a68:	d8c02917 	ldw	r3,164(sp)
    4a6c:	d8002785 	stb	zero,158(sp)
    4a70:	28800204 	addi	r2,r5,8
    4a74:	2cc00017 	ldw	r19,0(r5)
    4a78:	2d800117 	ldw	r22,4(r5)
    4a7c:	18048f16 	blt	r3,zero,5cbc <___vfprintf_internal_r+0x18d0>
    4a80:	013fdfc4 	movi	r4,-129
    4a84:	9d86b03a 	or	r3,r19,r22
    4a88:	d8802d15 	stw	r2,180(sp)
    4a8c:	9124703a 	and	r18,r18,r4
    4a90:	1802d91e 	bne	r3,zero,55f8 <___vfprintf_internal_r+0x120c>
    4a94:	d8c02917 	ldw	r3,164(sp)
    4a98:	0039883a 	mov	fp,zero
    4a9c:	1805c326 	beq	r3,zero,61ac <___vfprintf_internal_r+0x1dc0>
    4aa0:	0027883a 	mov	r19,zero
    4aa4:	002d883a 	mov	r22,zero
    4aa8:	dc001e04 	addi	r16,sp,120
    4aac:	9806d0fa 	srli	r3,r19,3
    4ab0:	b008977a 	slli	r4,r22,29
    4ab4:	b02cd0fa 	srli	r22,r22,3
    4ab8:	9cc001cc 	andi	r19,r19,7
    4abc:	98800c04 	addi	r2,r19,48
    4ac0:	843fffc4 	addi	r16,r16,-1
    4ac4:	20e6b03a 	or	r19,r4,r3
    4ac8:	80800005 	stb	r2,0(r16)
    4acc:	9d86b03a 	or	r3,r19,r22
    4ad0:	183ff61e 	bne	r3,zero,4aac <__alt_mem_onchip_memory+0xf7804aac>
    4ad4:	90c0004c 	andi	r3,r18,1
    4ad8:	18013b26 	beq	r3,zero,4fc8 <___vfprintf_internal_r+0xbdc>
    4adc:	10803fcc 	andi	r2,r2,255
    4ae0:	1080201c 	xori	r2,r2,128
    4ae4:	10bfe004 	addi	r2,r2,-128
    4ae8:	00c00c04 	movi	r3,48
    4aec:	10c13626 	beq	r2,r3,4fc8 <___vfprintf_internal_r+0xbdc>
    4af0:	80ffffc5 	stb	r3,-1(r16)
    4af4:	d8c02817 	ldw	r3,160(sp)
    4af8:	80bfffc4 	addi	r2,r16,-1
    4afc:	1021883a 	mov	r16,r2
    4b00:	1887c83a 	sub	r3,r3,r2
    4b04:	d8c02e15 	stw	r3,184(sp)
    4b08:	d8802e17 	ldw	r2,184(sp)
    4b0c:	d9002917 	ldw	r4,164(sp)
    4b10:	1100010e 	bge	r2,r4,4b18 <___vfprintf_internal_r+0x72c>
    4b14:	2005883a 	mov	r2,r4
    4b18:	d8802a15 	stw	r2,168(sp)
    4b1c:	d8003215 	stw	zero,200(sp)
    4b20:	e7003fcc 	andi	fp,fp,255
    4b24:	e700201c 	xori	fp,fp,128
    4b28:	e73fe004 	addi	fp,fp,-128
    4b2c:	e0000326 	beq	fp,zero,4b3c <___vfprintf_internal_r+0x750>
    4b30:	d8c02a17 	ldw	r3,168(sp)
    4b34:	18c00044 	addi	r3,r3,1
    4b38:	d8c02a15 	stw	r3,168(sp)
    4b3c:	90c0008c 	andi	r3,r18,2
    4b40:	d8c02b15 	stw	r3,172(sp)
    4b44:	18000326 	beq	r3,zero,4b54 <___vfprintf_internal_r+0x768>
    4b48:	d8c02a17 	ldw	r3,168(sp)
    4b4c:	18c00084 	addi	r3,r3,2
    4b50:	d8c02a15 	stw	r3,168(sp)
    4b54:	90c0210c 	andi	r3,r18,132
    4b58:	d8c03015 	stw	r3,192(sp)
    4b5c:	1801a31e 	bne	r3,zero,51ec <___vfprintf_internal_r+0xe00>
    4b60:	d9003117 	ldw	r4,196(sp)
    4b64:	d8c02a17 	ldw	r3,168(sp)
    4b68:	20e7c83a 	sub	r19,r4,r3
    4b6c:	04c19f0e 	bge	zero,r19,51ec <___vfprintf_internal_r+0xe00>
    4b70:	02400404 	movi	r9,16
    4b74:	d8c02017 	ldw	r3,128(sp)
    4b78:	d8801f17 	ldw	r2,124(sp)
    4b7c:	4cc50d0e 	bge	r9,r19,5fb4 <___vfprintf_internal_r+0x1bc8>
    4b80:	01400074 	movhi	r5,1
    4b84:	29461e84 	addi	r5,r5,6266
    4b88:	dc403b15 	stw	r17,236(sp)
    4b8c:	d9403515 	stw	r5,212(sp)
    4b90:	9823883a 	mov	r17,r19
    4b94:	482d883a 	mov	r22,r9
    4b98:	9027883a 	mov	r19,r18
    4b9c:	070001c4 	movi	fp,7
    4ba0:	8025883a 	mov	r18,r16
    4ba4:	dc002c17 	ldw	r16,176(sp)
    4ba8:	00000306 	br	4bb8 <___vfprintf_internal_r+0x7cc>
    4bac:	8c7ffc04 	addi	r17,r17,-16
    4bb0:	42000204 	addi	r8,r8,8
    4bb4:	b440130e 	bge	r22,r17,4c04 <___vfprintf_internal_r+0x818>
    4bb8:	01000074 	movhi	r4,1
    4bbc:	18c00404 	addi	r3,r3,16
    4bc0:	10800044 	addi	r2,r2,1
    4bc4:	21061e84 	addi	r4,r4,6266
    4bc8:	41000015 	stw	r4,0(r8)
    4bcc:	45800115 	stw	r22,4(r8)
    4bd0:	d8c02015 	stw	r3,128(sp)
    4bd4:	d8801f15 	stw	r2,124(sp)
    4bd8:	e0bff40e 	bge	fp,r2,4bac <__alt_mem_onchip_memory+0xf7804bac>
    4bdc:	d9801e04 	addi	r6,sp,120
    4be0:	b80b883a 	mov	r5,r23
    4be4:	8009883a 	mov	r4,r16
    4be8:	000bb380 	call	bb38 <__sprint_r>
    4bec:	103f011e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    4bf0:	8c7ffc04 	addi	r17,r17,-16
    4bf4:	d8c02017 	ldw	r3,128(sp)
    4bf8:	d8801f17 	ldw	r2,124(sp)
    4bfc:	da000404 	addi	r8,sp,16
    4c00:	b47fed16 	blt	r22,r17,4bb8 <__alt_mem_onchip_memory+0xf7804bb8>
    4c04:	9021883a 	mov	r16,r18
    4c08:	9825883a 	mov	r18,r19
    4c0c:	8827883a 	mov	r19,r17
    4c10:	dc403b17 	ldw	r17,236(sp)
    4c14:	d9403517 	ldw	r5,212(sp)
    4c18:	98c7883a 	add	r3,r19,r3
    4c1c:	10800044 	addi	r2,r2,1
    4c20:	41400015 	stw	r5,0(r8)
    4c24:	44c00115 	stw	r19,4(r8)
    4c28:	d8c02015 	stw	r3,128(sp)
    4c2c:	d8801f15 	stw	r2,124(sp)
    4c30:	010001c4 	movi	r4,7
    4c34:	2082a316 	blt	r4,r2,56c4 <___vfprintf_internal_r+0x12d8>
    4c38:	df002787 	ldb	fp,158(sp)
    4c3c:	42000204 	addi	r8,r8,8
    4c40:	e0000c26 	beq	fp,zero,4c74 <___vfprintf_internal_r+0x888>
    4c44:	d8801f17 	ldw	r2,124(sp)
    4c48:	d9002784 	addi	r4,sp,158
    4c4c:	18c00044 	addi	r3,r3,1
    4c50:	10800044 	addi	r2,r2,1
    4c54:	41000015 	stw	r4,0(r8)
    4c58:	01000044 	movi	r4,1
    4c5c:	41000115 	stw	r4,4(r8)
    4c60:	d8c02015 	stw	r3,128(sp)
    4c64:	d8801f15 	stw	r2,124(sp)
    4c68:	010001c4 	movi	r4,7
    4c6c:	20823c16 	blt	r4,r2,5560 <___vfprintf_internal_r+0x1174>
    4c70:	42000204 	addi	r8,r8,8
    4c74:	d8802b17 	ldw	r2,172(sp)
    4c78:	10000c26 	beq	r2,zero,4cac <___vfprintf_internal_r+0x8c0>
    4c7c:	d8801f17 	ldw	r2,124(sp)
    4c80:	d9002704 	addi	r4,sp,156
    4c84:	18c00084 	addi	r3,r3,2
    4c88:	10800044 	addi	r2,r2,1
    4c8c:	41000015 	stw	r4,0(r8)
    4c90:	01000084 	movi	r4,2
    4c94:	41000115 	stw	r4,4(r8)
    4c98:	d8c02015 	stw	r3,128(sp)
    4c9c:	d8801f15 	stw	r2,124(sp)
    4ca0:	010001c4 	movi	r4,7
    4ca4:	20823616 	blt	r4,r2,5580 <___vfprintf_internal_r+0x1194>
    4ca8:	42000204 	addi	r8,r8,8
    4cac:	d9003017 	ldw	r4,192(sp)
    4cb0:	00802004 	movi	r2,128
    4cb4:	20819926 	beq	r4,r2,531c <___vfprintf_internal_r+0xf30>
    4cb8:	d9402917 	ldw	r5,164(sp)
    4cbc:	d8802e17 	ldw	r2,184(sp)
    4cc0:	28adc83a 	sub	r22,r5,r2
    4cc4:	0580310e 	bge	zero,r22,4d8c <___vfprintf_internal_r+0x9a0>
    4cc8:	07000404 	movi	fp,16
    4ccc:	d8801f17 	ldw	r2,124(sp)
    4cd0:	e584140e 	bge	fp,r22,5d24 <___vfprintf_internal_r+0x1938>
    4cd4:	01400074 	movhi	r5,1
    4cd8:	29461a84 	addi	r5,r5,6250
    4cdc:	dc402915 	stw	r17,164(sp)
    4ce0:	d9402b15 	stw	r5,172(sp)
    4ce4:	b023883a 	mov	r17,r22
    4ce8:	04c001c4 	movi	r19,7
    4cec:	a82d883a 	mov	r22,r21
    4cf0:	902b883a 	mov	r21,r18
    4cf4:	8025883a 	mov	r18,r16
    4cf8:	dc002c17 	ldw	r16,176(sp)
    4cfc:	00000306 	br	4d0c <___vfprintf_internal_r+0x920>
    4d00:	8c7ffc04 	addi	r17,r17,-16
    4d04:	42000204 	addi	r8,r8,8
    4d08:	e440110e 	bge	fp,r17,4d50 <___vfprintf_internal_r+0x964>
    4d0c:	18c00404 	addi	r3,r3,16
    4d10:	10800044 	addi	r2,r2,1
    4d14:	45000015 	stw	r20,0(r8)
    4d18:	47000115 	stw	fp,4(r8)
    4d1c:	d8c02015 	stw	r3,128(sp)
    4d20:	d8801f15 	stw	r2,124(sp)
    4d24:	98bff60e 	bge	r19,r2,4d00 <__alt_mem_onchip_memory+0xf7804d00>
    4d28:	d9801e04 	addi	r6,sp,120
    4d2c:	b80b883a 	mov	r5,r23
    4d30:	8009883a 	mov	r4,r16
    4d34:	000bb380 	call	bb38 <__sprint_r>
    4d38:	103eae1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    4d3c:	8c7ffc04 	addi	r17,r17,-16
    4d40:	d8c02017 	ldw	r3,128(sp)
    4d44:	d8801f17 	ldw	r2,124(sp)
    4d48:	da000404 	addi	r8,sp,16
    4d4c:	e47fef16 	blt	fp,r17,4d0c <__alt_mem_onchip_memory+0xf7804d0c>
    4d50:	9021883a 	mov	r16,r18
    4d54:	a825883a 	mov	r18,r21
    4d58:	b02b883a 	mov	r21,r22
    4d5c:	882d883a 	mov	r22,r17
    4d60:	dc402917 	ldw	r17,164(sp)
    4d64:	d9002b17 	ldw	r4,172(sp)
    4d68:	1d87883a 	add	r3,r3,r22
    4d6c:	10800044 	addi	r2,r2,1
    4d70:	41000015 	stw	r4,0(r8)
    4d74:	45800115 	stw	r22,4(r8)
    4d78:	d8c02015 	stw	r3,128(sp)
    4d7c:	d8801f15 	stw	r2,124(sp)
    4d80:	010001c4 	movi	r4,7
    4d84:	2081ee16 	blt	r4,r2,5540 <___vfprintf_internal_r+0x1154>
    4d88:	42000204 	addi	r8,r8,8
    4d8c:	9080400c 	andi	r2,r18,256
    4d90:	1001181e 	bne	r2,zero,51f4 <___vfprintf_internal_r+0xe08>
    4d94:	d9402e17 	ldw	r5,184(sp)
    4d98:	d8801f17 	ldw	r2,124(sp)
    4d9c:	44000015 	stw	r16,0(r8)
    4da0:	1947883a 	add	r3,r3,r5
    4da4:	10800044 	addi	r2,r2,1
    4da8:	41400115 	stw	r5,4(r8)
    4dac:	d8c02015 	stw	r3,128(sp)
    4db0:	d8801f15 	stw	r2,124(sp)
    4db4:	010001c4 	movi	r4,7
    4db8:	2081d316 	blt	r4,r2,5508 <___vfprintf_internal_r+0x111c>
    4dbc:	42000204 	addi	r8,r8,8
    4dc0:	9480010c 	andi	r18,r18,4
    4dc4:	90003226 	beq	r18,zero,4e90 <___vfprintf_internal_r+0xaa4>
    4dc8:	d9403117 	ldw	r5,196(sp)
    4dcc:	d8802a17 	ldw	r2,168(sp)
    4dd0:	28a1c83a 	sub	r16,r5,r2
    4dd4:	04002e0e 	bge	zero,r16,4e90 <___vfprintf_internal_r+0xaa4>
    4dd8:	04400404 	movi	r17,16
    4ddc:	d8801f17 	ldw	r2,124(sp)
    4de0:	8c04a20e 	bge	r17,r16,606c <___vfprintf_internal_r+0x1c80>
    4de4:	01400074 	movhi	r5,1
    4de8:	29461e84 	addi	r5,r5,6266
    4dec:	d9403515 	stw	r5,212(sp)
    4df0:	048001c4 	movi	r18,7
    4df4:	dcc02c17 	ldw	r19,176(sp)
    4df8:	00000306 	br	4e08 <___vfprintf_internal_r+0xa1c>
    4dfc:	843ffc04 	addi	r16,r16,-16
    4e00:	42000204 	addi	r8,r8,8
    4e04:	8c00130e 	bge	r17,r16,4e54 <___vfprintf_internal_r+0xa68>
    4e08:	01000074 	movhi	r4,1
    4e0c:	18c00404 	addi	r3,r3,16
    4e10:	10800044 	addi	r2,r2,1
    4e14:	21061e84 	addi	r4,r4,6266
    4e18:	41000015 	stw	r4,0(r8)
    4e1c:	44400115 	stw	r17,4(r8)
    4e20:	d8c02015 	stw	r3,128(sp)
    4e24:	d8801f15 	stw	r2,124(sp)
    4e28:	90bff40e 	bge	r18,r2,4dfc <__alt_mem_onchip_memory+0xf7804dfc>
    4e2c:	d9801e04 	addi	r6,sp,120
    4e30:	b80b883a 	mov	r5,r23
    4e34:	9809883a 	mov	r4,r19
    4e38:	000bb380 	call	bb38 <__sprint_r>
    4e3c:	103e6d1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    4e40:	843ffc04 	addi	r16,r16,-16
    4e44:	d8c02017 	ldw	r3,128(sp)
    4e48:	d8801f17 	ldw	r2,124(sp)
    4e4c:	da000404 	addi	r8,sp,16
    4e50:	8c3fed16 	blt	r17,r16,4e08 <__alt_mem_onchip_memory+0xf7804e08>
    4e54:	d9403517 	ldw	r5,212(sp)
    4e58:	1c07883a 	add	r3,r3,r16
    4e5c:	10800044 	addi	r2,r2,1
    4e60:	41400015 	stw	r5,0(r8)
    4e64:	44000115 	stw	r16,4(r8)
    4e68:	d8c02015 	stw	r3,128(sp)
    4e6c:	d8801f15 	stw	r2,124(sp)
    4e70:	010001c4 	movi	r4,7
    4e74:	2080060e 	bge	r4,r2,4e90 <___vfprintf_internal_r+0xaa4>
    4e78:	d9002c17 	ldw	r4,176(sp)
    4e7c:	d9801e04 	addi	r6,sp,120
    4e80:	b80b883a 	mov	r5,r23
    4e84:	000bb380 	call	bb38 <__sprint_r>
    4e88:	103e5a1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    4e8c:	d8c02017 	ldw	r3,128(sp)
    4e90:	d8803117 	ldw	r2,196(sp)
    4e94:	d9002a17 	ldw	r4,168(sp)
    4e98:	1100010e 	bge	r2,r4,4ea0 <___vfprintf_internal_r+0xab4>
    4e9c:	2005883a 	mov	r2,r4
    4ea0:	d9402f17 	ldw	r5,188(sp)
    4ea4:	288b883a 	add	r5,r5,r2
    4ea8:	d9402f15 	stw	r5,188(sp)
    4eac:	18019e1e 	bne	r3,zero,5528 <___vfprintf_internal_r+0x113c>
    4eb0:	a8800007 	ldb	r2,0(r21)
    4eb4:	d8001f15 	stw	zero,124(sp)
    4eb8:	da000404 	addi	r8,sp,16
    4ebc:	103d851e 	bne	r2,zero,44d4 <__alt_mem_onchip_memory+0xf78044d4>
    4ec0:	a821883a 	mov	r16,r21
    4ec4:	003d9b06 	br	4534 <__alt_mem_onchip_memory+0xf7804534>
    4ec8:	18c03fcc 	andi	r3,r3,255
    4ecc:	1805c11e 	bne	r3,zero,65d4 <___vfprintf_internal_r+0x21e8>
    4ed0:	94800414 	ori	r18,r18,16
    4ed4:	9080080c 	andi	r2,r18,32
    4ed8:	10020c26 	beq	r2,zero,570c <___vfprintf_internal_r+0x1320>
    4edc:	d8802d17 	ldw	r2,180(sp)
    4ee0:	d9002917 	ldw	r4,164(sp)
    4ee4:	d8002785 	stb	zero,158(sp)
    4ee8:	10c00204 	addi	r3,r2,8
    4eec:	14c00017 	ldw	r19,0(r2)
    4ef0:	15800117 	ldw	r22,4(r2)
    4ef4:	20040f16 	blt	r4,zero,5f34 <___vfprintf_internal_r+0x1b48>
    4ef8:	013fdfc4 	movi	r4,-129
    4efc:	9d84b03a 	or	r2,r19,r22
    4f00:	d8c02d15 	stw	r3,180(sp)
    4f04:	9124703a 	and	r18,r18,r4
    4f08:	0039883a 	mov	fp,zero
    4f0c:	103e891e 	bne	r2,zero,4934 <__alt_mem_onchip_memory+0xf7804934>
    4f10:	d9002917 	ldw	r4,164(sp)
    4f14:	2002c11e 	bne	r4,zero,5a1c <___vfprintf_internal_r+0x1630>
    4f18:	d8002915 	stw	zero,164(sp)
    4f1c:	d8002e15 	stw	zero,184(sp)
    4f20:	dc001e04 	addi	r16,sp,120
    4f24:	003ef806 	br	4b08 <__alt_mem_onchip_memory+0xf7804b08>
    4f28:	18c03fcc 	andi	r3,r3,255
    4f2c:	18059d1e 	bne	r3,zero,65a4 <___vfprintf_internal_r+0x21b8>
    4f30:	01400074 	movhi	r5,1
    4f34:	29460e04 	addi	r5,r5,6200
    4f38:	d9403915 	stw	r5,228(sp)
    4f3c:	9080080c 	andi	r2,r18,32
    4f40:	10005226 	beq	r2,zero,508c <___vfprintf_internal_r+0xca0>
    4f44:	d8802d17 	ldw	r2,180(sp)
    4f48:	14c00017 	ldw	r19,0(r2)
    4f4c:	15800117 	ldw	r22,4(r2)
    4f50:	10800204 	addi	r2,r2,8
    4f54:	d8802d15 	stw	r2,180(sp)
    4f58:	9080004c 	andi	r2,r18,1
    4f5c:	10019026 	beq	r2,zero,55a0 <___vfprintf_internal_r+0x11b4>
    4f60:	9d84b03a 	or	r2,r19,r22
    4f64:	10036926 	beq	r2,zero,5d0c <___vfprintf_internal_r+0x1920>
    4f68:	d8c02917 	ldw	r3,164(sp)
    4f6c:	00800c04 	movi	r2,48
    4f70:	d8802705 	stb	r2,156(sp)
    4f74:	dc402745 	stb	r17,157(sp)
    4f78:	d8002785 	stb	zero,158(sp)
    4f7c:	90800094 	ori	r2,r18,2
    4f80:	18045d16 	blt	r3,zero,60f8 <___vfprintf_internal_r+0x1d0c>
    4f84:	00bfdfc4 	movi	r2,-129
    4f88:	90a4703a 	and	r18,r18,r2
    4f8c:	94800094 	ori	r18,r18,2
    4f90:	0039883a 	mov	fp,zero
    4f94:	d9003917 	ldw	r4,228(sp)
    4f98:	dc001e04 	addi	r16,sp,120
    4f9c:	988003cc 	andi	r2,r19,15
    4fa0:	b006973a 	slli	r3,r22,28
    4fa4:	2085883a 	add	r2,r4,r2
    4fa8:	9826d13a 	srli	r19,r19,4
    4fac:	10800003 	ldbu	r2,0(r2)
    4fb0:	b02cd13a 	srli	r22,r22,4
    4fb4:	843fffc4 	addi	r16,r16,-1
    4fb8:	1ce6b03a 	or	r19,r3,r19
    4fbc:	80800005 	stb	r2,0(r16)
    4fc0:	9d84b03a 	or	r2,r19,r22
    4fc4:	103ff51e 	bne	r2,zero,4f9c <__alt_mem_onchip_memory+0xf7804f9c>
    4fc8:	d8c02817 	ldw	r3,160(sp)
    4fcc:	1c07c83a 	sub	r3,r3,r16
    4fd0:	d8c02e15 	stw	r3,184(sp)
    4fd4:	003ecc06 	br	4b08 <__alt_mem_onchip_memory+0xf7804b08>
    4fd8:	18c03fcc 	andi	r3,r3,255
    4fdc:	183e9f26 	beq	r3,zero,4a5c <__alt_mem_onchip_memory+0xf7804a5c>
    4fe0:	d9c02785 	stb	r7,158(sp)
    4fe4:	003e9d06 	br	4a5c <__alt_mem_onchip_memory+0xf7804a5c>
    4fe8:	00c00044 	movi	r3,1
    4fec:	01c00ac4 	movi	r7,43
    4ff0:	ac400007 	ldb	r17,0(r21)
    4ff4:	003d5e06 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    4ff8:	94800814 	ori	r18,r18,32
    4ffc:	ac400007 	ldb	r17,0(r21)
    5000:	003d5b06 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    5004:	d8c02d17 	ldw	r3,180(sp)
    5008:	d8002785 	stb	zero,158(sp)
    500c:	1c000017 	ldw	r16,0(r3)
    5010:	1cc00104 	addi	r19,r3,4
    5014:	80041926 	beq	r16,zero,607c <___vfprintf_internal_r+0x1c90>
    5018:	d9002917 	ldw	r4,164(sp)
    501c:	2003d016 	blt	r4,zero,5f60 <___vfprintf_internal_r+0x1b74>
    5020:	200d883a 	mov	r6,r4
    5024:	000b883a 	mov	r5,zero
    5028:	8009883a 	mov	r4,r16
    502c:	da003d15 	stw	r8,244(sp)
    5030:	0009c580 	call	9c58 <memchr>
    5034:	da003d17 	ldw	r8,244(sp)
    5038:	10045426 	beq	r2,zero,618c <___vfprintf_internal_r+0x1da0>
    503c:	1405c83a 	sub	r2,r2,r16
    5040:	d8802e15 	stw	r2,184(sp)
    5044:	1003cc16 	blt	r2,zero,5f78 <___vfprintf_internal_r+0x1b8c>
    5048:	df002783 	ldbu	fp,158(sp)
    504c:	d8802a15 	stw	r2,168(sp)
    5050:	dcc02d15 	stw	r19,180(sp)
    5054:	d8002915 	stw	zero,164(sp)
    5058:	d8003215 	stw	zero,200(sp)
    505c:	003eb006 	br	4b20 <__alt_mem_onchip_memory+0xf7804b20>
    5060:	18c03fcc 	andi	r3,r3,255
    5064:	183f9b26 	beq	r3,zero,4ed4 <__alt_mem_onchip_memory+0xf7804ed4>
    5068:	d9c02785 	stb	r7,158(sp)
    506c:	003f9906 	br	4ed4 <__alt_mem_onchip_memory+0xf7804ed4>
    5070:	18c03fcc 	andi	r3,r3,255
    5074:	1805551e 	bne	r3,zero,65cc <___vfprintf_internal_r+0x21e0>
    5078:	01400074 	movhi	r5,1
    507c:	29461304 	addi	r5,r5,6220
    5080:	d9403915 	stw	r5,228(sp)
    5084:	9080080c 	andi	r2,r18,32
    5088:	103fae1e 	bne	r2,zero,4f44 <__alt_mem_onchip_memory+0xf7804f44>
    508c:	9080040c 	andi	r2,r18,16
    5090:	1002de26 	beq	r2,zero,5c0c <___vfprintf_internal_r+0x1820>
    5094:	d8c02d17 	ldw	r3,180(sp)
    5098:	002d883a 	mov	r22,zero
    509c:	1cc00017 	ldw	r19,0(r3)
    50a0:	18c00104 	addi	r3,r3,4
    50a4:	d8c02d15 	stw	r3,180(sp)
    50a8:	003fab06 	br	4f58 <__alt_mem_onchip_memory+0xf7804f58>
    50ac:	38803fcc 	andi	r2,r7,255
    50b0:	1080201c 	xori	r2,r2,128
    50b4:	10bfe004 	addi	r2,r2,-128
    50b8:	1002d21e 	bne	r2,zero,5c04 <___vfprintf_internal_r+0x1818>
    50bc:	00c00044 	movi	r3,1
    50c0:	01c00804 	movi	r7,32
    50c4:	ac400007 	ldb	r17,0(r21)
    50c8:	003d2906 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    50cc:	94800054 	ori	r18,r18,1
    50d0:	ac400007 	ldb	r17,0(r21)
    50d4:	003d2606 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    50d8:	18c03fcc 	andi	r3,r3,255
    50dc:	183e0526 	beq	r3,zero,48f4 <__alt_mem_onchip_memory+0xf78048f4>
    50e0:	d9c02785 	stb	r7,158(sp)
    50e4:	003e0306 	br	48f4 <__alt_mem_onchip_memory+0xf78048f4>
    50e8:	94801014 	ori	r18,r18,64
    50ec:	ac400007 	ldb	r17,0(r21)
    50f0:	003d1f06 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    50f4:	ac400007 	ldb	r17,0(r21)
    50f8:	8a438726 	beq	r17,r9,5f18 <___vfprintf_internal_r+0x1b2c>
    50fc:	94800414 	ori	r18,r18,16
    5100:	003d1b06 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    5104:	18c03fcc 	andi	r3,r3,255
    5108:	1805341e 	bne	r3,zero,65dc <___vfprintf_internal_r+0x21f0>
    510c:	9080080c 	andi	r2,r18,32
    5110:	1002cd26 	beq	r2,zero,5c48 <___vfprintf_internal_r+0x185c>
    5114:	d9402d17 	ldw	r5,180(sp)
    5118:	d9002f17 	ldw	r4,188(sp)
    511c:	28800017 	ldw	r2,0(r5)
    5120:	2007d7fa 	srai	r3,r4,31
    5124:	29400104 	addi	r5,r5,4
    5128:	d9402d15 	stw	r5,180(sp)
    512c:	11000015 	stw	r4,0(r2)
    5130:	10c00115 	stw	r3,4(r2)
    5134:	003ce506 	br	44cc <__alt_mem_onchip_memory+0xf78044cc>
    5138:	d8c02d17 	ldw	r3,180(sp)
    513c:	d9002d17 	ldw	r4,180(sp)
    5140:	d8002785 	stb	zero,158(sp)
    5144:	18800017 	ldw	r2,0(r3)
    5148:	21000104 	addi	r4,r4,4
    514c:	00c00044 	movi	r3,1
    5150:	d8c02a15 	stw	r3,168(sp)
    5154:	d8801405 	stb	r2,80(sp)
    5158:	d9002d15 	stw	r4,180(sp)
    515c:	d8c02e15 	stw	r3,184(sp)
    5160:	d8002915 	stw	zero,164(sp)
    5164:	d8003215 	stw	zero,200(sp)
    5168:	dc001404 	addi	r16,sp,80
    516c:	0039883a 	mov	fp,zero
    5170:	003e7206 	br	4b3c <__alt_mem_onchip_memory+0xf7804b3c>
    5174:	01000074 	movhi	r4,1
    5178:	21061304 	addi	r4,r4,6220
    517c:	0039883a 	mov	fp,zero
    5180:	d9003915 	stw	r4,228(sp)
    5184:	04401e04 	movi	r17,120
    5188:	003f8206 	br	4f94 <__alt_mem_onchip_memory+0xf7804f94>
    518c:	18c03fcc 	andi	r3,r3,255
    5190:	1805061e 	bne	r3,zero,65ac <___vfprintf_internal_r+0x21c0>
    5194:	883d9126 	beq	r17,zero,47dc <__alt_mem_onchip_memory+0xf78047dc>
    5198:	00c00044 	movi	r3,1
    519c:	d8c02a15 	stw	r3,168(sp)
    51a0:	dc401405 	stb	r17,80(sp)
    51a4:	d8002785 	stb	zero,158(sp)
    51a8:	003fec06 	br	515c <__alt_mem_onchip_memory+0xf780515c>
    51ac:	01400074 	movhi	r5,1
    51b0:	29461304 	addi	r5,r5,6220
    51b4:	d9403915 	stw	r5,228(sp)
    51b8:	d8c02d15 	stw	r3,180(sp)
    51bc:	1025883a 	mov	r18,r2
    51c0:	04401e04 	movi	r17,120
    51c4:	9d84b03a 	or	r2,r19,r22
    51c8:	1000fc1e 	bne	r2,zero,55bc <___vfprintf_internal_r+0x11d0>
    51cc:	0039883a 	mov	fp,zero
    51d0:	00800084 	movi	r2,2
    51d4:	10803fcc 	andi	r2,r2,255
    51d8:	00c00044 	movi	r3,1
    51dc:	10c20f26 	beq	r2,r3,5a1c <___vfprintf_internal_r+0x1630>
    51e0:	00c00084 	movi	r3,2
    51e4:	10fd6326 	beq	r2,r3,4774 <__alt_mem_onchip_memory+0xf7804774>
    51e8:	003e2d06 	br	4aa0 <__alt_mem_onchip_memory+0xf7804aa0>
    51ec:	d8c02017 	ldw	r3,128(sp)
    51f0:	003e9306 	br	4c40 <__alt_mem_onchip_memory+0xf7804c40>
    51f4:	00801944 	movi	r2,101
    51f8:	14407e0e 	bge	r2,r17,53f4 <___vfprintf_internal_r+0x1008>
    51fc:	d9003617 	ldw	r4,216(sp)
    5200:	d9403817 	ldw	r5,224(sp)
    5204:	000d883a 	mov	r6,zero
    5208:	000f883a 	mov	r7,zero
    520c:	d8c03c15 	stw	r3,240(sp)
    5210:	da003d15 	stw	r8,244(sp)
    5214:	000e4c80 	call	e4c8 <__eqdf2>
    5218:	d8c03c17 	ldw	r3,240(sp)
    521c:	da003d17 	ldw	r8,244(sp)
    5220:	1000f71e 	bne	r2,zero,5600 <___vfprintf_internal_r+0x1214>
    5224:	d8801f17 	ldw	r2,124(sp)
    5228:	01000074 	movhi	r4,1
    522c:	21061a04 	addi	r4,r4,6248
    5230:	18c00044 	addi	r3,r3,1
    5234:	10800044 	addi	r2,r2,1
    5238:	41000015 	stw	r4,0(r8)
    523c:	01000044 	movi	r4,1
    5240:	41000115 	stw	r4,4(r8)
    5244:	d8c02015 	stw	r3,128(sp)
    5248:	d8801f15 	stw	r2,124(sp)
    524c:	010001c4 	movi	r4,7
    5250:	2082b816 	blt	r4,r2,5d34 <___vfprintf_internal_r+0x1948>
    5254:	42000204 	addi	r8,r8,8
    5258:	d8802617 	ldw	r2,152(sp)
    525c:	d9403317 	ldw	r5,204(sp)
    5260:	11400216 	blt	r2,r5,526c <___vfprintf_internal_r+0xe80>
    5264:	9080004c 	andi	r2,r18,1
    5268:	103ed526 	beq	r2,zero,4dc0 <__alt_mem_onchip_memory+0xf7804dc0>
    526c:	d8803717 	ldw	r2,220(sp)
    5270:	d9003417 	ldw	r4,208(sp)
    5274:	d9403717 	ldw	r5,220(sp)
    5278:	1887883a 	add	r3,r3,r2
    527c:	d8801f17 	ldw	r2,124(sp)
    5280:	41000015 	stw	r4,0(r8)
    5284:	41400115 	stw	r5,4(r8)
    5288:	10800044 	addi	r2,r2,1
    528c:	d8c02015 	stw	r3,128(sp)
    5290:	d8801f15 	stw	r2,124(sp)
    5294:	010001c4 	movi	r4,7
    5298:	20832916 	blt	r4,r2,5f40 <___vfprintf_internal_r+0x1b54>
    529c:	42000204 	addi	r8,r8,8
    52a0:	d8803317 	ldw	r2,204(sp)
    52a4:	143fffc4 	addi	r16,r2,-1
    52a8:	043ec50e 	bge	zero,r16,4dc0 <__alt_mem_onchip_memory+0xf7804dc0>
    52ac:	04400404 	movi	r17,16
    52b0:	d8801f17 	ldw	r2,124(sp)
    52b4:	8c00880e 	bge	r17,r16,54d8 <___vfprintf_internal_r+0x10ec>
    52b8:	01400074 	movhi	r5,1
    52bc:	29461a84 	addi	r5,r5,6250
    52c0:	d9402b15 	stw	r5,172(sp)
    52c4:	058001c4 	movi	r22,7
    52c8:	dcc02c17 	ldw	r19,176(sp)
    52cc:	00000306 	br	52dc <___vfprintf_internal_r+0xef0>
    52d0:	42000204 	addi	r8,r8,8
    52d4:	843ffc04 	addi	r16,r16,-16
    52d8:	8c00820e 	bge	r17,r16,54e4 <___vfprintf_internal_r+0x10f8>
    52dc:	18c00404 	addi	r3,r3,16
    52e0:	10800044 	addi	r2,r2,1
    52e4:	45000015 	stw	r20,0(r8)
    52e8:	44400115 	stw	r17,4(r8)
    52ec:	d8c02015 	stw	r3,128(sp)
    52f0:	d8801f15 	stw	r2,124(sp)
    52f4:	b0bff60e 	bge	r22,r2,52d0 <__alt_mem_onchip_memory+0xf78052d0>
    52f8:	d9801e04 	addi	r6,sp,120
    52fc:	b80b883a 	mov	r5,r23
    5300:	9809883a 	mov	r4,r19
    5304:	000bb380 	call	bb38 <__sprint_r>
    5308:	103d3a1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    530c:	d8c02017 	ldw	r3,128(sp)
    5310:	d8801f17 	ldw	r2,124(sp)
    5314:	da000404 	addi	r8,sp,16
    5318:	003fee06 	br	52d4 <__alt_mem_onchip_memory+0xf78052d4>
    531c:	d9403117 	ldw	r5,196(sp)
    5320:	d8802a17 	ldw	r2,168(sp)
    5324:	28adc83a 	sub	r22,r5,r2
    5328:	05be630e 	bge	zero,r22,4cb8 <__alt_mem_onchip_memory+0xf7804cb8>
    532c:	07000404 	movi	fp,16
    5330:	d8801f17 	ldw	r2,124(sp)
    5334:	e5838f0e 	bge	fp,r22,6174 <___vfprintf_internal_r+0x1d88>
    5338:	01400074 	movhi	r5,1
    533c:	29461a84 	addi	r5,r5,6250
    5340:	dc403015 	stw	r17,192(sp)
    5344:	d9402b15 	stw	r5,172(sp)
    5348:	b023883a 	mov	r17,r22
    534c:	04c001c4 	movi	r19,7
    5350:	a82d883a 	mov	r22,r21
    5354:	902b883a 	mov	r21,r18
    5358:	8025883a 	mov	r18,r16
    535c:	dc002c17 	ldw	r16,176(sp)
    5360:	00000306 	br	5370 <___vfprintf_internal_r+0xf84>
    5364:	8c7ffc04 	addi	r17,r17,-16
    5368:	42000204 	addi	r8,r8,8
    536c:	e440110e 	bge	fp,r17,53b4 <___vfprintf_internal_r+0xfc8>
    5370:	18c00404 	addi	r3,r3,16
    5374:	10800044 	addi	r2,r2,1
    5378:	45000015 	stw	r20,0(r8)
    537c:	47000115 	stw	fp,4(r8)
    5380:	d8c02015 	stw	r3,128(sp)
    5384:	d8801f15 	stw	r2,124(sp)
    5388:	98bff60e 	bge	r19,r2,5364 <__alt_mem_onchip_memory+0xf7805364>
    538c:	d9801e04 	addi	r6,sp,120
    5390:	b80b883a 	mov	r5,r23
    5394:	8009883a 	mov	r4,r16
    5398:	000bb380 	call	bb38 <__sprint_r>
    539c:	103d151e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    53a0:	8c7ffc04 	addi	r17,r17,-16
    53a4:	d8c02017 	ldw	r3,128(sp)
    53a8:	d8801f17 	ldw	r2,124(sp)
    53ac:	da000404 	addi	r8,sp,16
    53b0:	e47fef16 	blt	fp,r17,5370 <__alt_mem_onchip_memory+0xf7805370>
    53b4:	9021883a 	mov	r16,r18
    53b8:	a825883a 	mov	r18,r21
    53bc:	b02b883a 	mov	r21,r22
    53c0:	882d883a 	mov	r22,r17
    53c4:	dc403017 	ldw	r17,192(sp)
    53c8:	d9002b17 	ldw	r4,172(sp)
    53cc:	1d87883a 	add	r3,r3,r22
    53d0:	10800044 	addi	r2,r2,1
    53d4:	41000015 	stw	r4,0(r8)
    53d8:	45800115 	stw	r22,4(r8)
    53dc:	d8c02015 	stw	r3,128(sp)
    53e0:	d8801f15 	stw	r2,124(sp)
    53e4:	010001c4 	movi	r4,7
    53e8:	20818e16 	blt	r4,r2,5a24 <___vfprintf_internal_r+0x1638>
    53ec:	42000204 	addi	r8,r8,8
    53f0:	003e3106 	br	4cb8 <__alt_mem_onchip_memory+0xf7804cb8>
    53f4:	d9403317 	ldw	r5,204(sp)
    53f8:	00800044 	movi	r2,1
    53fc:	18c00044 	addi	r3,r3,1
    5400:	1141530e 	bge	r2,r5,5950 <___vfprintf_internal_r+0x1564>
    5404:	dc401f17 	ldw	r17,124(sp)
    5408:	00800044 	movi	r2,1
    540c:	40800115 	stw	r2,4(r8)
    5410:	8c400044 	addi	r17,r17,1
    5414:	44000015 	stw	r16,0(r8)
    5418:	d8c02015 	stw	r3,128(sp)
    541c:	dc401f15 	stw	r17,124(sp)
    5420:	008001c4 	movi	r2,7
    5424:	14416b16 	blt	r2,r17,59d4 <___vfprintf_internal_r+0x15e8>
    5428:	42000204 	addi	r8,r8,8
    542c:	d8803717 	ldw	r2,220(sp)
    5430:	d9003417 	ldw	r4,208(sp)
    5434:	8c400044 	addi	r17,r17,1
    5438:	10c7883a 	add	r3,r2,r3
    543c:	40800115 	stw	r2,4(r8)
    5440:	41000015 	stw	r4,0(r8)
    5444:	d8c02015 	stw	r3,128(sp)
    5448:	dc401f15 	stw	r17,124(sp)
    544c:	008001c4 	movi	r2,7
    5450:	14416916 	blt	r2,r17,59f8 <___vfprintf_internal_r+0x160c>
    5454:	45800204 	addi	r22,r8,8
    5458:	d9003617 	ldw	r4,216(sp)
    545c:	d9403817 	ldw	r5,224(sp)
    5460:	000d883a 	mov	r6,zero
    5464:	000f883a 	mov	r7,zero
    5468:	d8c03c15 	stw	r3,240(sp)
    546c:	000e4c80 	call	e4c8 <__eqdf2>
    5470:	d8c03c17 	ldw	r3,240(sp)
    5474:	1000bc26 	beq	r2,zero,5768 <___vfprintf_internal_r+0x137c>
    5478:	d9403317 	ldw	r5,204(sp)
    547c:	84000044 	addi	r16,r16,1
    5480:	8c400044 	addi	r17,r17,1
    5484:	28bfffc4 	addi	r2,r5,-1
    5488:	1887883a 	add	r3,r3,r2
    548c:	b0800115 	stw	r2,4(r22)
    5490:	b4000015 	stw	r16,0(r22)
    5494:	d8c02015 	stw	r3,128(sp)
    5498:	dc401f15 	stw	r17,124(sp)
    549c:	008001c4 	movi	r2,7
    54a0:	14414316 	blt	r2,r17,59b0 <___vfprintf_internal_r+0x15c4>
    54a4:	b5800204 	addi	r22,r22,8
    54a8:	d9003a17 	ldw	r4,232(sp)
    54ac:	df0022c4 	addi	fp,sp,139
    54b0:	8c400044 	addi	r17,r17,1
    54b4:	20c7883a 	add	r3,r4,r3
    54b8:	b7000015 	stw	fp,0(r22)
    54bc:	b1000115 	stw	r4,4(r22)
    54c0:	d8c02015 	stw	r3,128(sp)
    54c4:	dc401f15 	stw	r17,124(sp)
    54c8:	008001c4 	movi	r2,7
    54cc:	14400e16 	blt	r2,r17,5508 <___vfprintf_internal_r+0x111c>
    54d0:	b2000204 	addi	r8,r22,8
    54d4:	003e3a06 	br	4dc0 <__alt_mem_onchip_memory+0xf7804dc0>
    54d8:	01000074 	movhi	r4,1
    54dc:	21061a84 	addi	r4,r4,6250
    54e0:	d9002b15 	stw	r4,172(sp)
    54e4:	d9002b17 	ldw	r4,172(sp)
    54e8:	1c07883a 	add	r3,r3,r16
    54ec:	44000115 	stw	r16,4(r8)
    54f0:	41000015 	stw	r4,0(r8)
    54f4:	10800044 	addi	r2,r2,1
    54f8:	d8c02015 	stw	r3,128(sp)
    54fc:	d8801f15 	stw	r2,124(sp)
    5500:	010001c4 	movi	r4,7
    5504:	20be2d0e 	bge	r4,r2,4dbc <__alt_mem_onchip_memory+0xf7804dbc>
    5508:	d9002c17 	ldw	r4,176(sp)
    550c:	d9801e04 	addi	r6,sp,120
    5510:	b80b883a 	mov	r5,r23
    5514:	000bb380 	call	bb38 <__sprint_r>
    5518:	103cb61e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    551c:	d8c02017 	ldw	r3,128(sp)
    5520:	da000404 	addi	r8,sp,16
    5524:	003e2606 	br	4dc0 <__alt_mem_onchip_memory+0xf7804dc0>
    5528:	d9002c17 	ldw	r4,176(sp)
    552c:	d9801e04 	addi	r6,sp,120
    5530:	b80b883a 	mov	r5,r23
    5534:	000bb380 	call	bb38 <__sprint_r>
    5538:	103e5d26 	beq	r2,zero,4eb0 <__alt_mem_onchip_memory+0xf7804eb0>
    553c:	003cad06 	br	47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5540:	d9002c17 	ldw	r4,176(sp)
    5544:	d9801e04 	addi	r6,sp,120
    5548:	b80b883a 	mov	r5,r23
    554c:	000bb380 	call	bb38 <__sprint_r>
    5550:	103ca81e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5554:	d8c02017 	ldw	r3,128(sp)
    5558:	da000404 	addi	r8,sp,16
    555c:	003e0b06 	br	4d8c <__alt_mem_onchip_memory+0xf7804d8c>
    5560:	d9002c17 	ldw	r4,176(sp)
    5564:	d9801e04 	addi	r6,sp,120
    5568:	b80b883a 	mov	r5,r23
    556c:	000bb380 	call	bb38 <__sprint_r>
    5570:	103ca01e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5574:	d8c02017 	ldw	r3,128(sp)
    5578:	da000404 	addi	r8,sp,16
    557c:	003dbd06 	br	4c74 <__alt_mem_onchip_memory+0xf7804c74>
    5580:	d9002c17 	ldw	r4,176(sp)
    5584:	d9801e04 	addi	r6,sp,120
    5588:	b80b883a 	mov	r5,r23
    558c:	000bb380 	call	bb38 <__sprint_r>
    5590:	103c981e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5594:	d8c02017 	ldw	r3,128(sp)
    5598:	da000404 	addi	r8,sp,16
    559c:	003dc306 	br	4cac <__alt_mem_onchip_memory+0xf7804cac>
    55a0:	d8802917 	ldw	r2,164(sp)
    55a4:	d8002785 	stb	zero,158(sp)
    55a8:	103f0616 	blt	r2,zero,51c4 <__alt_mem_onchip_memory+0xf78051c4>
    55ac:	00ffdfc4 	movi	r3,-129
    55b0:	9d84b03a 	or	r2,r19,r22
    55b4:	90e4703a 	and	r18,r18,r3
    55b8:	103c6b26 	beq	r2,zero,4768 <__alt_mem_onchip_memory+0xf7804768>
    55bc:	0039883a 	mov	fp,zero
    55c0:	003e7406 	br	4f94 <__alt_mem_onchip_memory+0xf7804f94>
    55c4:	9080040c 	andi	r2,r18,16
    55c8:	1001b326 	beq	r2,zero,5c98 <___vfprintf_internal_r+0x18ac>
    55cc:	d9002d17 	ldw	r4,180(sp)
    55d0:	d9402917 	ldw	r5,164(sp)
    55d4:	d8002785 	stb	zero,158(sp)
    55d8:	20800104 	addi	r2,r4,4
    55dc:	24c00017 	ldw	r19,0(r4)
    55e0:	002d883a 	mov	r22,zero
    55e4:	2801b516 	blt	r5,zero,5cbc <___vfprintf_internal_r+0x18d0>
    55e8:	00ffdfc4 	movi	r3,-129
    55ec:	d8802d15 	stw	r2,180(sp)
    55f0:	90e4703a 	and	r18,r18,r3
    55f4:	983d2726 	beq	r19,zero,4a94 <__alt_mem_onchip_memory+0xf7804a94>
    55f8:	0039883a 	mov	fp,zero
    55fc:	003d2a06 	br	4aa8 <__alt_mem_onchip_memory+0xf7804aa8>
    5600:	dc402617 	ldw	r17,152(sp)
    5604:	0441d30e 	bge	zero,r17,5d54 <___vfprintf_internal_r+0x1968>
    5608:	dc403217 	ldw	r17,200(sp)
    560c:	d8803317 	ldw	r2,204(sp)
    5610:	1440010e 	bge	r2,r17,5618 <___vfprintf_internal_r+0x122c>
    5614:	1023883a 	mov	r17,r2
    5618:	04400a0e 	bge	zero,r17,5644 <___vfprintf_internal_r+0x1258>
    561c:	d8801f17 	ldw	r2,124(sp)
    5620:	1c47883a 	add	r3,r3,r17
    5624:	44000015 	stw	r16,0(r8)
    5628:	10800044 	addi	r2,r2,1
    562c:	44400115 	stw	r17,4(r8)
    5630:	d8c02015 	stw	r3,128(sp)
    5634:	d8801f15 	stw	r2,124(sp)
    5638:	010001c4 	movi	r4,7
    563c:	20826516 	blt	r4,r2,5fd4 <___vfprintf_internal_r+0x1be8>
    5640:	42000204 	addi	r8,r8,8
    5644:	88026116 	blt	r17,zero,5fcc <___vfprintf_internal_r+0x1be0>
    5648:	d9003217 	ldw	r4,200(sp)
    564c:	2463c83a 	sub	r17,r4,r17
    5650:	04407b0e 	bge	zero,r17,5840 <___vfprintf_internal_r+0x1454>
    5654:	05800404 	movi	r22,16
    5658:	d8801f17 	ldw	r2,124(sp)
    565c:	b4419d0e 	bge	r22,r17,5cd4 <___vfprintf_internal_r+0x18e8>
    5660:	01000074 	movhi	r4,1
    5664:	21061a84 	addi	r4,r4,6250
    5668:	d9002b15 	stw	r4,172(sp)
    566c:	070001c4 	movi	fp,7
    5670:	dcc02c17 	ldw	r19,176(sp)
    5674:	00000306 	br	5684 <___vfprintf_internal_r+0x1298>
    5678:	42000204 	addi	r8,r8,8
    567c:	8c7ffc04 	addi	r17,r17,-16
    5680:	b441970e 	bge	r22,r17,5ce0 <___vfprintf_internal_r+0x18f4>
    5684:	18c00404 	addi	r3,r3,16
    5688:	10800044 	addi	r2,r2,1
    568c:	45000015 	stw	r20,0(r8)
    5690:	45800115 	stw	r22,4(r8)
    5694:	d8c02015 	stw	r3,128(sp)
    5698:	d8801f15 	stw	r2,124(sp)
    569c:	e0bff60e 	bge	fp,r2,5678 <__alt_mem_onchip_memory+0xf7805678>
    56a0:	d9801e04 	addi	r6,sp,120
    56a4:	b80b883a 	mov	r5,r23
    56a8:	9809883a 	mov	r4,r19
    56ac:	000bb380 	call	bb38 <__sprint_r>
    56b0:	103c501e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    56b4:	d8c02017 	ldw	r3,128(sp)
    56b8:	d8801f17 	ldw	r2,124(sp)
    56bc:	da000404 	addi	r8,sp,16
    56c0:	003fee06 	br	567c <__alt_mem_onchip_memory+0xf780567c>
    56c4:	d9002c17 	ldw	r4,176(sp)
    56c8:	d9801e04 	addi	r6,sp,120
    56cc:	b80b883a 	mov	r5,r23
    56d0:	000bb380 	call	bb38 <__sprint_r>
    56d4:	103c471e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    56d8:	d8c02017 	ldw	r3,128(sp)
    56dc:	df002787 	ldb	fp,158(sp)
    56e0:	da000404 	addi	r8,sp,16
    56e4:	003d5606 	br	4c40 <__alt_mem_onchip_memory+0xf7804c40>
    56e8:	9080040c 	andi	r2,r18,16
    56ec:	10016126 	beq	r2,zero,5c74 <___vfprintf_internal_r+0x1888>
    56f0:	d8802d17 	ldw	r2,180(sp)
    56f4:	14c00017 	ldw	r19,0(r2)
    56f8:	10800104 	addi	r2,r2,4
    56fc:	d8802d15 	stw	r2,180(sp)
    5700:	982dd7fa 	srai	r22,r19,31
    5704:	b005883a 	mov	r2,r22
    5708:	003c8206 	br	4914 <__alt_mem_onchip_memory+0xf7804914>
    570c:	9080040c 	andi	r2,r18,16
    5710:	10003526 	beq	r2,zero,57e8 <___vfprintf_internal_r+0x13fc>
    5714:	d9402d17 	ldw	r5,180(sp)
    5718:	d8c02917 	ldw	r3,164(sp)
    571c:	d8002785 	stb	zero,158(sp)
    5720:	28800104 	addi	r2,r5,4
    5724:	2cc00017 	ldw	r19,0(r5)
    5728:	002d883a 	mov	r22,zero
    572c:	18003716 	blt	r3,zero,580c <___vfprintf_internal_r+0x1420>
    5730:	00ffdfc4 	movi	r3,-129
    5734:	d8802d15 	stw	r2,180(sp)
    5738:	90e4703a 	and	r18,r18,r3
    573c:	0039883a 	mov	fp,zero
    5740:	983df326 	beq	r19,zero,4f10 <__alt_mem_onchip_memory+0xf7804f10>
    5744:	00800244 	movi	r2,9
    5748:	14fc7b36 	bltu	r2,r19,4938 <__alt_mem_onchip_memory+0xf7804938>
    574c:	d8c02817 	ldw	r3,160(sp)
    5750:	dc001dc4 	addi	r16,sp,119
    5754:	9cc00c04 	addi	r19,r19,48
    5758:	1c07c83a 	sub	r3,r3,r16
    575c:	dcc01dc5 	stb	r19,119(sp)
    5760:	d8c02e15 	stw	r3,184(sp)
    5764:	003ce806 	br	4b08 <__alt_mem_onchip_memory+0xf7804b08>
    5768:	d8803317 	ldw	r2,204(sp)
    576c:	143fffc4 	addi	r16,r2,-1
    5770:	043f4d0e 	bge	zero,r16,54a8 <__alt_mem_onchip_memory+0xf78054a8>
    5774:	07000404 	movi	fp,16
    5778:	e400810e 	bge	fp,r16,5980 <___vfprintf_internal_r+0x1594>
    577c:	01400074 	movhi	r5,1
    5780:	29461a84 	addi	r5,r5,6250
    5784:	d9402b15 	stw	r5,172(sp)
    5788:	01c001c4 	movi	r7,7
    578c:	dcc02c17 	ldw	r19,176(sp)
    5790:	00000306 	br	57a0 <___vfprintf_internal_r+0x13b4>
    5794:	b5800204 	addi	r22,r22,8
    5798:	843ffc04 	addi	r16,r16,-16
    579c:	e4007b0e 	bge	fp,r16,598c <___vfprintf_internal_r+0x15a0>
    57a0:	18c00404 	addi	r3,r3,16
    57a4:	8c400044 	addi	r17,r17,1
    57a8:	b5000015 	stw	r20,0(r22)
    57ac:	b7000115 	stw	fp,4(r22)
    57b0:	d8c02015 	stw	r3,128(sp)
    57b4:	dc401f15 	stw	r17,124(sp)
    57b8:	3c7ff60e 	bge	r7,r17,5794 <__alt_mem_onchip_memory+0xf7805794>
    57bc:	d9801e04 	addi	r6,sp,120
    57c0:	b80b883a 	mov	r5,r23
    57c4:	9809883a 	mov	r4,r19
    57c8:	d9c03c15 	stw	r7,240(sp)
    57cc:	000bb380 	call	bb38 <__sprint_r>
    57d0:	d9c03c17 	ldw	r7,240(sp)
    57d4:	103c071e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    57d8:	d8c02017 	ldw	r3,128(sp)
    57dc:	dc401f17 	ldw	r17,124(sp)
    57e0:	dd800404 	addi	r22,sp,16
    57e4:	003fec06 	br	5798 <__alt_mem_onchip_memory+0xf7805798>
    57e8:	9080100c 	andi	r2,r18,64
    57ec:	d8002785 	stb	zero,158(sp)
    57f0:	10010e26 	beq	r2,zero,5c2c <___vfprintf_internal_r+0x1840>
    57f4:	d9002d17 	ldw	r4,180(sp)
    57f8:	d9402917 	ldw	r5,164(sp)
    57fc:	002d883a 	mov	r22,zero
    5800:	20800104 	addi	r2,r4,4
    5804:	24c0000b 	ldhu	r19,0(r4)
    5808:	283fc90e 	bge	r5,zero,5730 <__alt_mem_onchip_memory+0xf7805730>
    580c:	d8802d15 	stw	r2,180(sp)
    5810:	0039883a 	mov	fp,zero
    5814:	9d84b03a 	or	r2,r19,r22
    5818:	103c461e 	bne	r2,zero,4934 <__alt_mem_onchip_memory+0xf7804934>
    581c:	00800044 	movi	r2,1
    5820:	003e6c06 	br	51d4 <__alt_mem_onchip_memory+0xf78051d4>
    5824:	d9002c17 	ldw	r4,176(sp)
    5828:	d9801e04 	addi	r6,sp,120
    582c:	b80b883a 	mov	r5,r23
    5830:	000bb380 	call	bb38 <__sprint_r>
    5834:	103bef1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5838:	d8c02017 	ldw	r3,128(sp)
    583c:	da000404 	addi	r8,sp,16
    5840:	d9003217 	ldw	r4,200(sp)
    5844:	d8802617 	ldw	r2,152(sp)
    5848:	d9403317 	ldw	r5,204(sp)
    584c:	8123883a 	add	r17,r16,r4
    5850:	11400216 	blt	r2,r5,585c <___vfprintf_internal_r+0x1470>
    5854:	9100004c 	andi	r4,r18,1
    5858:	20000d26 	beq	r4,zero,5890 <___vfprintf_internal_r+0x14a4>
    585c:	d9003717 	ldw	r4,220(sp)
    5860:	d9403417 	ldw	r5,208(sp)
    5864:	1907883a 	add	r3,r3,r4
    5868:	d9001f17 	ldw	r4,124(sp)
    586c:	41400015 	stw	r5,0(r8)
    5870:	d9403717 	ldw	r5,220(sp)
    5874:	21000044 	addi	r4,r4,1
    5878:	d8c02015 	stw	r3,128(sp)
    587c:	41400115 	stw	r5,4(r8)
    5880:	d9001f15 	stw	r4,124(sp)
    5884:	014001c4 	movi	r5,7
    5888:	2901e816 	blt	r5,r4,602c <___vfprintf_internal_r+0x1c40>
    588c:	42000204 	addi	r8,r8,8
    5890:	d9003317 	ldw	r4,204(sp)
    5894:	8121883a 	add	r16,r16,r4
    5898:	2085c83a 	sub	r2,r4,r2
    589c:	8461c83a 	sub	r16,r16,r17
    58a0:	1400010e 	bge	r2,r16,58a8 <___vfprintf_internal_r+0x14bc>
    58a4:	1021883a 	mov	r16,r2
    58a8:	04000a0e 	bge	zero,r16,58d4 <___vfprintf_internal_r+0x14e8>
    58ac:	d9001f17 	ldw	r4,124(sp)
    58b0:	1c07883a 	add	r3,r3,r16
    58b4:	44400015 	stw	r17,0(r8)
    58b8:	21000044 	addi	r4,r4,1
    58bc:	44000115 	stw	r16,4(r8)
    58c0:	d8c02015 	stw	r3,128(sp)
    58c4:	d9001f15 	stw	r4,124(sp)
    58c8:	014001c4 	movi	r5,7
    58cc:	2901fb16 	blt	r5,r4,60bc <___vfprintf_internal_r+0x1cd0>
    58d0:	42000204 	addi	r8,r8,8
    58d4:	8001f716 	blt	r16,zero,60b4 <___vfprintf_internal_r+0x1cc8>
    58d8:	1421c83a 	sub	r16,r2,r16
    58dc:	043d380e 	bge	zero,r16,4dc0 <__alt_mem_onchip_memory+0xf7804dc0>
    58e0:	04400404 	movi	r17,16
    58e4:	d8801f17 	ldw	r2,124(sp)
    58e8:	8c3efb0e 	bge	r17,r16,54d8 <__alt_mem_onchip_memory+0xf78054d8>
    58ec:	01400074 	movhi	r5,1
    58f0:	29461a84 	addi	r5,r5,6250
    58f4:	d9402b15 	stw	r5,172(sp)
    58f8:	058001c4 	movi	r22,7
    58fc:	dcc02c17 	ldw	r19,176(sp)
    5900:	00000306 	br	5910 <___vfprintf_internal_r+0x1524>
    5904:	42000204 	addi	r8,r8,8
    5908:	843ffc04 	addi	r16,r16,-16
    590c:	8c3ef50e 	bge	r17,r16,54e4 <__alt_mem_onchip_memory+0xf78054e4>
    5910:	18c00404 	addi	r3,r3,16
    5914:	10800044 	addi	r2,r2,1
    5918:	45000015 	stw	r20,0(r8)
    591c:	44400115 	stw	r17,4(r8)
    5920:	d8c02015 	stw	r3,128(sp)
    5924:	d8801f15 	stw	r2,124(sp)
    5928:	b0bff60e 	bge	r22,r2,5904 <__alt_mem_onchip_memory+0xf7805904>
    592c:	d9801e04 	addi	r6,sp,120
    5930:	b80b883a 	mov	r5,r23
    5934:	9809883a 	mov	r4,r19
    5938:	000bb380 	call	bb38 <__sprint_r>
    593c:	103bad1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5940:	d8c02017 	ldw	r3,128(sp)
    5944:	d8801f17 	ldw	r2,124(sp)
    5948:	da000404 	addi	r8,sp,16
    594c:	003fee06 	br	5908 <__alt_mem_onchip_memory+0xf7805908>
    5950:	9088703a 	and	r4,r18,r2
    5954:	203eab1e 	bne	r4,zero,5404 <__alt_mem_onchip_memory+0xf7805404>
    5958:	dc401f17 	ldw	r17,124(sp)
    595c:	40800115 	stw	r2,4(r8)
    5960:	44000015 	stw	r16,0(r8)
    5964:	8c400044 	addi	r17,r17,1
    5968:	d8c02015 	stw	r3,128(sp)
    596c:	dc401f15 	stw	r17,124(sp)
    5970:	008001c4 	movi	r2,7
    5974:	14400e16 	blt	r2,r17,59b0 <___vfprintf_internal_r+0x15c4>
    5978:	45800204 	addi	r22,r8,8
    597c:	003eca06 	br	54a8 <__alt_mem_onchip_memory+0xf78054a8>
    5980:	01000074 	movhi	r4,1
    5984:	21061a84 	addi	r4,r4,6250
    5988:	d9002b15 	stw	r4,172(sp)
    598c:	d8802b17 	ldw	r2,172(sp)
    5990:	1c07883a 	add	r3,r3,r16
    5994:	8c400044 	addi	r17,r17,1
    5998:	b0800015 	stw	r2,0(r22)
    599c:	b4000115 	stw	r16,4(r22)
    59a0:	d8c02015 	stw	r3,128(sp)
    59a4:	dc401f15 	stw	r17,124(sp)
    59a8:	008001c4 	movi	r2,7
    59ac:	147ebd0e 	bge	r2,r17,54a4 <__alt_mem_onchip_memory+0xf78054a4>
    59b0:	d9002c17 	ldw	r4,176(sp)
    59b4:	d9801e04 	addi	r6,sp,120
    59b8:	b80b883a 	mov	r5,r23
    59bc:	000bb380 	call	bb38 <__sprint_r>
    59c0:	103b8c1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    59c4:	d8c02017 	ldw	r3,128(sp)
    59c8:	dc401f17 	ldw	r17,124(sp)
    59cc:	dd800404 	addi	r22,sp,16
    59d0:	003eb506 	br	54a8 <__alt_mem_onchip_memory+0xf78054a8>
    59d4:	d9002c17 	ldw	r4,176(sp)
    59d8:	d9801e04 	addi	r6,sp,120
    59dc:	b80b883a 	mov	r5,r23
    59e0:	000bb380 	call	bb38 <__sprint_r>
    59e4:	103b831e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    59e8:	d8c02017 	ldw	r3,128(sp)
    59ec:	dc401f17 	ldw	r17,124(sp)
    59f0:	da000404 	addi	r8,sp,16
    59f4:	003e8d06 	br	542c <__alt_mem_onchip_memory+0xf780542c>
    59f8:	d9002c17 	ldw	r4,176(sp)
    59fc:	d9801e04 	addi	r6,sp,120
    5a00:	b80b883a 	mov	r5,r23
    5a04:	000bb380 	call	bb38 <__sprint_r>
    5a08:	103b7a1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5a0c:	d8c02017 	ldw	r3,128(sp)
    5a10:	dc401f17 	ldw	r17,124(sp)
    5a14:	dd800404 	addi	r22,sp,16
    5a18:	003e8f06 	br	5458 <__alt_mem_onchip_memory+0xf7805458>
    5a1c:	0027883a 	mov	r19,zero
    5a20:	003f4a06 	br	574c <__alt_mem_onchip_memory+0xf780574c>
    5a24:	d9002c17 	ldw	r4,176(sp)
    5a28:	d9801e04 	addi	r6,sp,120
    5a2c:	b80b883a 	mov	r5,r23
    5a30:	000bb380 	call	bb38 <__sprint_r>
    5a34:	103b6f1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5a38:	d8c02017 	ldw	r3,128(sp)
    5a3c:	da000404 	addi	r8,sp,16
    5a40:	003c9d06 	br	4cb8 <__alt_mem_onchip_memory+0xf7804cb8>
    5a44:	04e7c83a 	sub	r19,zero,r19
    5a48:	9804c03a 	cmpne	r2,r19,zero
    5a4c:	05adc83a 	sub	r22,zero,r22
    5a50:	b0adc83a 	sub	r22,r22,r2
    5a54:	d8802917 	ldw	r2,164(sp)
    5a58:	07000b44 	movi	fp,45
    5a5c:	df002785 	stb	fp,158(sp)
    5a60:	10017b16 	blt	r2,zero,6050 <___vfprintf_internal_r+0x1c64>
    5a64:	00bfdfc4 	movi	r2,-129
    5a68:	90a4703a 	and	r18,r18,r2
    5a6c:	003bb106 	br	4934 <__alt_mem_onchip_memory+0xf7804934>
    5a70:	d9003617 	ldw	r4,216(sp)
    5a74:	d9403817 	ldw	r5,224(sp)
    5a78:	da003d15 	stw	r8,244(sp)
    5a7c:	00018d00 	call	18d0 <__fpclassifyd>
    5a80:	da003d17 	ldw	r8,244(sp)
    5a84:	1000f026 	beq	r2,zero,5e48 <___vfprintf_internal_r+0x1a5c>
    5a88:	d9002917 	ldw	r4,164(sp)
    5a8c:	05bff7c4 	movi	r22,-33
    5a90:	00bfffc4 	movi	r2,-1
    5a94:	8dac703a 	and	r22,r17,r22
    5a98:	20820026 	beq	r4,r2,629c <___vfprintf_internal_r+0x1eb0>
    5a9c:	008011c4 	movi	r2,71
    5aa0:	b081f726 	beq	r22,r2,6280 <___vfprintf_internal_r+0x1e94>
    5aa4:	d9003817 	ldw	r4,224(sp)
    5aa8:	90c04014 	ori	r3,r18,256
    5aac:	d8c02b15 	stw	r3,172(sp)
    5ab0:	20021516 	blt	r4,zero,6308 <___vfprintf_internal_r+0x1f1c>
    5ab4:	dcc03817 	ldw	r19,224(sp)
    5ab8:	d8002a05 	stb	zero,168(sp)
    5abc:	00801984 	movi	r2,102
    5ac0:	8881f926 	beq	r17,r2,62a8 <___vfprintf_internal_r+0x1ebc>
    5ac4:	00801184 	movi	r2,70
    5ac8:	88821c26 	beq	r17,r2,633c <___vfprintf_internal_r+0x1f50>
    5acc:	00801144 	movi	r2,69
    5ad0:	b081ef26 	beq	r22,r2,6290 <___vfprintf_internal_r+0x1ea4>
    5ad4:	d8c02917 	ldw	r3,164(sp)
    5ad8:	d8802104 	addi	r2,sp,132
    5adc:	d8800315 	stw	r2,12(sp)
    5ae0:	d9403617 	ldw	r5,216(sp)
    5ae4:	d8802504 	addi	r2,sp,148
    5ae8:	d9002c17 	ldw	r4,176(sp)
    5aec:	d8800215 	stw	r2,8(sp)
    5af0:	d8802604 	addi	r2,sp,152
    5af4:	d8c00015 	stw	r3,0(sp)
    5af8:	d8800115 	stw	r2,4(sp)
    5afc:	01c00084 	movi	r7,2
    5b00:	980d883a 	mov	r6,r19
    5b04:	d8c03c15 	stw	r3,240(sp)
    5b08:	da003d15 	stw	r8,244(sp)
    5b0c:	0006a100 	call	6a10 <_dtoa_r>
    5b10:	1021883a 	mov	r16,r2
    5b14:	008019c4 	movi	r2,103
    5b18:	d8c03c17 	ldw	r3,240(sp)
    5b1c:	da003d17 	ldw	r8,244(sp)
    5b20:	88817126 	beq	r17,r2,60e8 <___vfprintf_internal_r+0x1cfc>
    5b24:	008011c4 	movi	r2,71
    5b28:	88829226 	beq	r17,r2,6574 <___vfprintf_internal_r+0x2188>
    5b2c:	80f9883a 	add	fp,r16,r3
    5b30:	d9003617 	ldw	r4,216(sp)
    5b34:	000d883a 	mov	r6,zero
    5b38:	000f883a 	mov	r7,zero
    5b3c:	980b883a 	mov	r5,r19
    5b40:	da003d15 	stw	r8,244(sp)
    5b44:	000e4c80 	call	e4c8 <__eqdf2>
    5b48:	da003d17 	ldw	r8,244(sp)
    5b4c:	10018d26 	beq	r2,zero,6184 <___vfprintf_internal_r+0x1d98>
    5b50:	d8802117 	ldw	r2,132(sp)
    5b54:	1700062e 	bgeu	r2,fp,5b70 <___vfprintf_internal_r+0x1784>
    5b58:	01000c04 	movi	r4,48
    5b5c:	10c00044 	addi	r3,r2,1
    5b60:	d8c02115 	stw	r3,132(sp)
    5b64:	11000005 	stb	r4,0(r2)
    5b68:	d8802117 	ldw	r2,132(sp)
    5b6c:	173ffb36 	bltu	r2,fp,5b5c <__alt_mem_onchip_memory+0xf7805b5c>
    5b70:	1405c83a 	sub	r2,r2,r16
    5b74:	d8803315 	stw	r2,204(sp)
    5b78:	008011c4 	movi	r2,71
    5b7c:	b0817626 	beq	r22,r2,6158 <___vfprintf_internal_r+0x1d6c>
    5b80:	00801944 	movi	r2,101
    5b84:	1442810e 	bge	r2,r17,658c <___vfprintf_internal_r+0x21a0>
    5b88:	d8c02617 	ldw	r3,152(sp)
    5b8c:	00801984 	movi	r2,102
    5b90:	d8c03215 	stw	r3,200(sp)
    5b94:	8881fe26 	beq	r17,r2,6390 <___vfprintf_internal_r+0x1fa4>
    5b98:	d8c03217 	ldw	r3,200(sp)
    5b9c:	d9003317 	ldw	r4,204(sp)
    5ba0:	1901dd16 	blt	r3,r4,6318 <___vfprintf_internal_r+0x1f2c>
    5ba4:	9480004c 	andi	r18,r18,1
    5ba8:	90022b1e 	bne	r18,zero,6458 <___vfprintf_internal_r+0x206c>
    5bac:	1805883a 	mov	r2,r3
    5bb0:	18028016 	blt	r3,zero,65b4 <___vfprintf_internal_r+0x21c8>
    5bb4:	d8c03217 	ldw	r3,200(sp)
    5bb8:	044019c4 	movi	r17,103
    5bbc:	d8c02e15 	stw	r3,184(sp)
    5bc0:	df002a07 	ldb	fp,168(sp)
    5bc4:	e001531e 	bne	fp,zero,6114 <___vfprintf_internal_r+0x1d28>
    5bc8:	df002783 	ldbu	fp,158(sp)
    5bcc:	d8802a15 	stw	r2,168(sp)
    5bd0:	dc802b17 	ldw	r18,172(sp)
    5bd4:	d8002915 	stw	zero,164(sp)
    5bd8:	003bd106 	br	4b20 <__alt_mem_onchip_memory+0xf7804b20>
    5bdc:	d8802d17 	ldw	r2,180(sp)
    5be0:	d8c02d17 	ldw	r3,180(sp)
    5be4:	d9002d17 	ldw	r4,180(sp)
    5be8:	10800017 	ldw	r2,0(r2)
    5bec:	18c00117 	ldw	r3,4(r3)
    5bf0:	21000204 	addi	r4,r4,8
    5bf4:	d8803615 	stw	r2,216(sp)
    5bf8:	d8c03815 	stw	r3,224(sp)
    5bfc:	d9002d15 	stw	r4,180(sp)
    5c00:	003b7506 	br	49d8 <__alt_mem_onchip_memory+0xf78049d8>
    5c04:	ac400007 	ldb	r17,0(r21)
    5c08:	003a5906 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    5c0c:	9080100c 	andi	r2,r18,64
    5c10:	1000a826 	beq	r2,zero,5eb4 <___vfprintf_internal_r+0x1ac8>
    5c14:	d9002d17 	ldw	r4,180(sp)
    5c18:	002d883a 	mov	r22,zero
    5c1c:	24c0000b 	ldhu	r19,0(r4)
    5c20:	21000104 	addi	r4,r4,4
    5c24:	d9002d15 	stw	r4,180(sp)
    5c28:	003ccb06 	br	4f58 <__alt_mem_onchip_memory+0xf7804f58>
    5c2c:	d8c02d17 	ldw	r3,180(sp)
    5c30:	d9002917 	ldw	r4,164(sp)
    5c34:	002d883a 	mov	r22,zero
    5c38:	18800104 	addi	r2,r3,4
    5c3c:	1cc00017 	ldw	r19,0(r3)
    5c40:	203ebb0e 	bge	r4,zero,5730 <__alt_mem_onchip_memory+0xf7805730>
    5c44:	003ef106 	br	580c <__alt_mem_onchip_memory+0xf780580c>
    5c48:	9080040c 	andi	r2,r18,16
    5c4c:	1000921e 	bne	r2,zero,5e98 <___vfprintf_internal_r+0x1aac>
    5c50:	9480100c 	andi	r18,r18,64
    5c54:	90013926 	beq	r18,zero,613c <___vfprintf_internal_r+0x1d50>
    5c58:	d9002d17 	ldw	r4,180(sp)
    5c5c:	d9402f17 	ldw	r5,188(sp)
    5c60:	20800017 	ldw	r2,0(r4)
    5c64:	21000104 	addi	r4,r4,4
    5c68:	d9002d15 	stw	r4,180(sp)
    5c6c:	1140000d 	sth	r5,0(r2)
    5c70:	003a1606 	br	44cc <__alt_mem_onchip_memory+0xf78044cc>
    5c74:	9080100c 	andi	r2,r18,64
    5c78:	10008026 	beq	r2,zero,5e7c <___vfprintf_internal_r+0x1a90>
    5c7c:	d8c02d17 	ldw	r3,180(sp)
    5c80:	1cc0000f 	ldh	r19,0(r3)
    5c84:	18c00104 	addi	r3,r3,4
    5c88:	d8c02d15 	stw	r3,180(sp)
    5c8c:	982dd7fa 	srai	r22,r19,31
    5c90:	b005883a 	mov	r2,r22
    5c94:	003b1f06 	br	4914 <__alt_mem_onchip_memory+0xf7804914>
    5c98:	9080100c 	andi	r2,r18,64
    5c9c:	d8002785 	stb	zero,158(sp)
    5ca0:	10008a1e 	bne	r2,zero,5ecc <___vfprintf_internal_r+0x1ae0>
    5ca4:	d9402d17 	ldw	r5,180(sp)
    5ca8:	d8c02917 	ldw	r3,164(sp)
    5cac:	002d883a 	mov	r22,zero
    5cb0:	28800104 	addi	r2,r5,4
    5cb4:	2cc00017 	ldw	r19,0(r5)
    5cb8:	183e4b0e 	bge	r3,zero,55e8 <__alt_mem_onchip_memory+0xf78055e8>
    5cbc:	9d86b03a 	or	r3,r19,r22
    5cc0:	d8802d15 	stw	r2,180(sp)
    5cc4:	183e4c1e 	bne	r3,zero,55f8 <__alt_mem_onchip_memory+0xf78055f8>
    5cc8:	0039883a 	mov	fp,zero
    5ccc:	0005883a 	mov	r2,zero
    5cd0:	003d4006 	br	51d4 <__alt_mem_onchip_memory+0xf78051d4>
    5cd4:	01400074 	movhi	r5,1
    5cd8:	29461a84 	addi	r5,r5,6250
    5cdc:	d9402b15 	stw	r5,172(sp)
    5ce0:	d9402b17 	ldw	r5,172(sp)
    5ce4:	1c47883a 	add	r3,r3,r17
    5ce8:	10800044 	addi	r2,r2,1
    5cec:	41400015 	stw	r5,0(r8)
    5cf0:	44400115 	stw	r17,4(r8)
    5cf4:	d8c02015 	stw	r3,128(sp)
    5cf8:	d8801f15 	stw	r2,124(sp)
    5cfc:	010001c4 	movi	r4,7
    5d00:	20bec816 	blt	r4,r2,5824 <__alt_mem_onchip_memory+0xf7805824>
    5d04:	42000204 	addi	r8,r8,8
    5d08:	003ecd06 	br	5840 <__alt_mem_onchip_memory+0xf7805840>
    5d0c:	d9002917 	ldw	r4,164(sp)
    5d10:	d8002785 	stb	zero,158(sp)
    5d14:	203d2d16 	blt	r4,zero,51cc <__alt_mem_onchip_memory+0xf78051cc>
    5d18:	00bfdfc4 	movi	r2,-129
    5d1c:	90a4703a 	and	r18,r18,r2
    5d20:	003a9106 	br	4768 <__alt_mem_onchip_memory+0xf7804768>
    5d24:	01000074 	movhi	r4,1
    5d28:	21061a84 	addi	r4,r4,6250
    5d2c:	d9002b15 	stw	r4,172(sp)
    5d30:	003c0c06 	br	4d64 <__alt_mem_onchip_memory+0xf7804d64>
    5d34:	d9002c17 	ldw	r4,176(sp)
    5d38:	d9801e04 	addi	r6,sp,120
    5d3c:	b80b883a 	mov	r5,r23
    5d40:	000bb380 	call	bb38 <__sprint_r>
    5d44:	103aab1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5d48:	d8c02017 	ldw	r3,128(sp)
    5d4c:	da000404 	addi	r8,sp,16
    5d50:	003d4106 	br	5258 <__alt_mem_onchip_memory+0xf7805258>
    5d54:	d8801f17 	ldw	r2,124(sp)
    5d58:	01400074 	movhi	r5,1
    5d5c:	01000044 	movi	r4,1
    5d60:	18c00044 	addi	r3,r3,1
    5d64:	10800044 	addi	r2,r2,1
    5d68:	29461a04 	addi	r5,r5,6248
    5d6c:	41000115 	stw	r4,4(r8)
    5d70:	41400015 	stw	r5,0(r8)
    5d74:	d8c02015 	stw	r3,128(sp)
    5d78:	d8801f15 	stw	r2,124(sp)
    5d7c:	010001c4 	movi	r4,7
    5d80:	20805c16 	blt	r4,r2,5ef4 <___vfprintf_internal_r+0x1b08>
    5d84:	42000204 	addi	r8,r8,8
    5d88:	8800041e 	bne	r17,zero,5d9c <___vfprintf_internal_r+0x19b0>
    5d8c:	d8803317 	ldw	r2,204(sp)
    5d90:	1000021e 	bne	r2,zero,5d9c <___vfprintf_internal_r+0x19b0>
    5d94:	9080004c 	andi	r2,r18,1
    5d98:	103c0926 	beq	r2,zero,4dc0 <__alt_mem_onchip_memory+0xf7804dc0>
    5d9c:	d9003717 	ldw	r4,220(sp)
    5da0:	d8801f17 	ldw	r2,124(sp)
    5da4:	d9403417 	ldw	r5,208(sp)
    5da8:	20c7883a 	add	r3,r4,r3
    5dac:	10800044 	addi	r2,r2,1
    5db0:	41000115 	stw	r4,4(r8)
    5db4:	41400015 	stw	r5,0(r8)
    5db8:	d8c02015 	stw	r3,128(sp)
    5dbc:	d8801f15 	stw	r2,124(sp)
    5dc0:	010001c4 	movi	r4,7
    5dc4:	20812116 	blt	r4,r2,624c <___vfprintf_internal_r+0x1e60>
    5dc8:	42000204 	addi	r8,r8,8
    5dcc:	0463c83a 	sub	r17,zero,r17
    5dd0:	0440730e 	bge	zero,r17,5fa0 <___vfprintf_internal_r+0x1bb4>
    5dd4:	05800404 	movi	r22,16
    5dd8:	b440860e 	bge	r22,r17,5ff4 <___vfprintf_internal_r+0x1c08>
    5ddc:	01400074 	movhi	r5,1
    5de0:	29461a84 	addi	r5,r5,6250
    5de4:	d9402b15 	stw	r5,172(sp)
    5de8:	070001c4 	movi	fp,7
    5dec:	dcc02c17 	ldw	r19,176(sp)
    5df0:	00000306 	br	5e00 <___vfprintf_internal_r+0x1a14>
    5df4:	42000204 	addi	r8,r8,8
    5df8:	8c7ffc04 	addi	r17,r17,-16
    5dfc:	b440800e 	bge	r22,r17,6000 <___vfprintf_internal_r+0x1c14>
    5e00:	18c00404 	addi	r3,r3,16
    5e04:	10800044 	addi	r2,r2,1
    5e08:	45000015 	stw	r20,0(r8)
    5e0c:	45800115 	stw	r22,4(r8)
    5e10:	d8c02015 	stw	r3,128(sp)
    5e14:	d8801f15 	stw	r2,124(sp)
    5e18:	e0bff60e 	bge	fp,r2,5df4 <__alt_mem_onchip_memory+0xf7805df4>
    5e1c:	d9801e04 	addi	r6,sp,120
    5e20:	b80b883a 	mov	r5,r23
    5e24:	9809883a 	mov	r4,r19
    5e28:	000bb380 	call	bb38 <__sprint_r>
    5e2c:	103a711e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5e30:	d8c02017 	ldw	r3,128(sp)
    5e34:	d8801f17 	ldw	r2,124(sp)
    5e38:	da000404 	addi	r8,sp,16
    5e3c:	003fee06 	br	5df8 <__alt_mem_onchip_memory+0xf7805df8>
    5e40:	00bfffc4 	movi	r2,-1
    5e44:	003a6f06 	br	4804 <__alt_mem_onchip_memory+0xf7804804>
    5e48:	008011c4 	movi	r2,71
    5e4c:	1440b816 	blt	r2,r17,6130 <___vfprintf_internal_r+0x1d44>
    5e50:	04000074 	movhi	r16,1
    5e54:	84060c04 	addi	r16,r16,6192
    5e58:	00c000c4 	movi	r3,3
    5e5c:	00bfdfc4 	movi	r2,-129
    5e60:	d8c02a15 	stw	r3,168(sp)
    5e64:	90a4703a 	and	r18,r18,r2
    5e68:	df002783 	ldbu	fp,158(sp)
    5e6c:	d8c02e15 	stw	r3,184(sp)
    5e70:	d8002915 	stw	zero,164(sp)
    5e74:	d8003215 	stw	zero,200(sp)
    5e78:	003b2906 	br	4b20 <__alt_mem_onchip_memory+0xf7804b20>
    5e7c:	d9002d17 	ldw	r4,180(sp)
    5e80:	24c00017 	ldw	r19,0(r4)
    5e84:	21000104 	addi	r4,r4,4
    5e88:	d9002d15 	stw	r4,180(sp)
    5e8c:	982dd7fa 	srai	r22,r19,31
    5e90:	b005883a 	mov	r2,r22
    5e94:	003a9f06 	br	4914 <__alt_mem_onchip_memory+0xf7804914>
    5e98:	d9402d17 	ldw	r5,180(sp)
    5e9c:	d8c02f17 	ldw	r3,188(sp)
    5ea0:	28800017 	ldw	r2,0(r5)
    5ea4:	29400104 	addi	r5,r5,4
    5ea8:	d9402d15 	stw	r5,180(sp)
    5eac:	10c00015 	stw	r3,0(r2)
    5eb0:	00398606 	br	44cc <__alt_mem_onchip_memory+0xf78044cc>
    5eb4:	d9402d17 	ldw	r5,180(sp)
    5eb8:	002d883a 	mov	r22,zero
    5ebc:	2cc00017 	ldw	r19,0(r5)
    5ec0:	29400104 	addi	r5,r5,4
    5ec4:	d9402d15 	stw	r5,180(sp)
    5ec8:	003c2306 	br	4f58 <__alt_mem_onchip_memory+0xf7804f58>
    5ecc:	d8c02d17 	ldw	r3,180(sp)
    5ed0:	d9002917 	ldw	r4,164(sp)
    5ed4:	002d883a 	mov	r22,zero
    5ed8:	18800104 	addi	r2,r3,4
    5edc:	1cc0000b 	ldhu	r19,0(r3)
    5ee0:	203dc10e 	bge	r4,zero,55e8 <__alt_mem_onchip_memory+0xf78055e8>
    5ee4:	003f7506 	br	5cbc <__alt_mem_onchip_memory+0xf7805cbc>
    5ee8:	04000074 	movhi	r16,1
    5eec:	84060a04 	addi	r16,r16,6184
    5ef0:	003acc06 	br	4a24 <__alt_mem_onchip_memory+0xf7804a24>
    5ef4:	d9002c17 	ldw	r4,176(sp)
    5ef8:	d9801e04 	addi	r6,sp,120
    5efc:	b80b883a 	mov	r5,r23
    5f00:	000bb380 	call	bb38 <__sprint_r>
    5f04:	103a3b1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5f08:	dc402617 	ldw	r17,152(sp)
    5f0c:	d8c02017 	ldw	r3,128(sp)
    5f10:	da000404 	addi	r8,sp,16
    5f14:	003f9c06 	br	5d88 <__alt_mem_onchip_memory+0xf7805d88>
    5f18:	ac400043 	ldbu	r17,1(r21)
    5f1c:	94800814 	ori	r18,r18,32
    5f20:	ad400044 	addi	r21,r21,1
    5f24:	8c403fcc 	andi	r17,r17,255
    5f28:	8c40201c 	xori	r17,r17,128
    5f2c:	8c7fe004 	addi	r17,r17,-128
    5f30:	00398f06 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    5f34:	d8c02d15 	stw	r3,180(sp)
    5f38:	0039883a 	mov	fp,zero
    5f3c:	003e3506 	br	5814 <__alt_mem_onchip_memory+0xf7805814>
    5f40:	d9002c17 	ldw	r4,176(sp)
    5f44:	d9801e04 	addi	r6,sp,120
    5f48:	b80b883a 	mov	r5,r23
    5f4c:	000bb380 	call	bb38 <__sprint_r>
    5f50:	103a281e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5f54:	d8c02017 	ldw	r3,128(sp)
    5f58:	da000404 	addi	r8,sp,16
    5f5c:	003cd006 	br	52a0 <__alt_mem_onchip_memory+0xf78052a0>
    5f60:	8009883a 	mov	r4,r16
    5f64:	da003d15 	stw	r8,244(sp)
    5f68:	00042a40 	call	42a4 <strlen>
    5f6c:	d8802e15 	stw	r2,184(sp)
    5f70:	da003d17 	ldw	r8,244(sp)
    5f74:	103c340e 	bge	r2,zero,5048 <__alt_mem_onchip_memory+0xf7805048>
    5f78:	0005883a 	mov	r2,zero
    5f7c:	003c3206 	br	5048 <__alt_mem_onchip_memory+0xf7805048>
    5f80:	d9002c17 	ldw	r4,176(sp)
    5f84:	d9801e04 	addi	r6,sp,120
    5f88:	b80b883a 	mov	r5,r23
    5f8c:	000bb380 	call	bb38 <__sprint_r>
    5f90:	103a181e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5f94:	d8c02017 	ldw	r3,128(sp)
    5f98:	d8801f17 	ldw	r2,124(sp)
    5f9c:	da000404 	addi	r8,sp,16
    5fa0:	d9403317 	ldw	r5,204(sp)
    5fa4:	10800044 	addi	r2,r2,1
    5fa8:	44000015 	stw	r16,0(r8)
    5fac:	28c7883a 	add	r3,r5,r3
    5fb0:	003b7d06 	br	4da8 <__alt_mem_onchip_memory+0xf7804da8>
    5fb4:	01000074 	movhi	r4,1
    5fb8:	21061e84 	addi	r4,r4,6266
    5fbc:	d9003515 	stw	r4,212(sp)
    5fc0:	003b1406 	br	4c14 <__alt_mem_onchip_memory+0xf7804c14>
    5fc4:	013fffc4 	movi	r4,-1
    5fc8:	003a3506 	br	48a0 <__alt_mem_onchip_memory+0xf78048a0>
    5fcc:	0023883a 	mov	r17,zero
    5fd0:	003d9d06 	br	5648 <__alt_mem_onchip_memory+0xf7805648>
    5fd4:	d9002c17 	ldw	r4,176(sp)
    5fd8:	d9801e04 	addi	r6,sp,120
    5fdc:	b80b883a 	mov	r5,r23
    5fe0:	000bb380 	call	bb38 <__sprint_r>
    5fe4:	103a031e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    5fe8:	d8c02017 	ldw	r3,128(sp)
    5fec:	da000404 	addi	r8,sp,16
    5ff0:	003d9406 	br	5644 <__alt_mem_onchip_memory+0xf7805644>
    5ff4:	01000074 	movhi	r4,1
    5ff8:	21061a84 	addi	r4,r4,6250
    5ffc:	d9002b15 	stw	r4,172(sp)
    6000:	d9002b17 	ldw	r4,172(sp)
    6004:	1c47883a 	add	r3,r3,r17
    6008:	10800044 	addi	r2,r2,1
    600c:	41000015 	stw	r4,0(r8)
    6010:	44400115 	stw	r17,4(r8)
    6014:	d8c02015 	stw	r3,128(sp)
    6018:	d8801f15 	stw	r2,124(sp)
    601c:	010001c4 	movi	r4,7
    6020:	20bfd716 	blt	r4,r2,5f80 <__alt_mem_onchip_memory+0xf7805f80>
    6024:	42000204 	addi	r8,r8,8
    6028:	003fdd06 	br	5fa0 <__alt_mem_onchip_memory+0xf7805fa0>
    602c:	d9002c17 	ldw	r4,176(sp)
    6030:	d9801e04 	addi	r6,sp,120
    6034:	b80b883a 	mov	r5,r23
    6038:	000bb380 	call	bb38 <__sprint_r>
    603c:	1039ed1e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    6040:	d8802617 	ldw	r2,152(sp)
    6044:	d8c02017 	ldw	r3,128(sp)
    6048:	da000404 	addi	r8,sp,16
    604c:	003e1006 	br	5890 <__alt_mem_onchip_memory+0xf7805890>
    6050:	00800044 	movi	r2,1
    6054:	10803fcc 	andi	r2,r2,255
    6058:	00c00044 	movi	r3,1
    605c:	10fa3526 	beq	r2,r3,4934 <__alt_mem_onchip_memory+0xf7804934>
    6060:	00c00084 	movi	r3,2
    6064:	10fbcb26 	beq	r2,r3,4f94 <__alt_mem_onchip_memory+0xf7804f94>
    6068:	003a8f06 	br	4aa8 <__alt_mem_onchip_memory+0xf7804aa8>
    606c:	01000074 	movhi	r4,1
    6070:	21061e84 	addi	r4,r4,6266
    6074:	d9003515 	stw	r4,212(sp)
    6078:	003b7606 	br	4e54 <__alt_mem_onchip_memory+0xf7804e54>
    607c:	d8802917 	ldw	r2,164(sp)
    6080:	00c00184 	movi	r3,6
    6084:	1880012e 	bgeu	r3,r2,608c <___vfprintf_internal_r+0x1ca0>
    6088:	1805883a 	mov	r2,r3
    608c:	d8802e15 	stw	r2,184(sp)
    6090:	1000ef16 	blt	r2,zero,6450 <___vfprintf_internal_r+0x2064>
    6094:	04000074 	movhi	r16,1
    6098:	d8802a15 	stw	r2,168(sp)
    609c:	dcc02d15 	stw	r19,180(sp)
    60a0:	d8002915 	stw	zero,164(sp)
    60a4:	d8003215 	stw	zero,200(sp)
    60a8:	84061804 	addi	r16,r16,6240
    60ac:	0039883a 	mov	fp,zero
    60b0:	003aa206 	br	4b3c <__alt_mem_onchip_memory+0xf7804b3c>
    60b4:	0021883a 	mov	r16,zero
    60b8:	003e0706 	br	58d8 <__alt_mem_onchip_memory+0xf78058d8>
    60bc:	d9002c17 	ldw	r4,176(sp)
    60c0:	d9801e04 	addi	r6,sp,120
    60c4:	b80b883a 	mov	r5,r23
    60c8:	000bb380 	call	bb38 <__sprint_r>
    60cc:	1039c91e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    60d0:	d8802617 	ldw	r2,152(sp)
    60d4:	d9403317 	ldw	r5,204(sp)
    60d8:	d8c02017 	ldw	r3,128(sp)
    60dc:	da000404 	addi	r8,sp,16
    60e0:	2885c83a 	sub	r2,r5,r2
    60e4:	003dfb06 	br	58d4 <__alt_mem_onchip_memory+0xf78058d4>
    60e8:	9080004c 	andi	r2,r18,1
    60ec:	103e8f1e 	bne	r2,zero,5b2c <__alt_mem_onchip_memory+0xf7805b2c>
    60f0:	d8802117 	ldw	r2,132(sp)
    60f4:	003e9e06 	br	5b70 <__alt_mem_onchip_memory+0xf7805b70>
    60f8:	1025883a 	mov	r18,r2
    60fc:	0039883a 	mov	fp,zero
    6100:	00800084 	movi	r2,2
    6104:	003fd306 	br	6054 <__alt_mem_onchip_memory+0xf7806054>
    6108:	07000b44 	movi	fp,45
    610c:	df002785 	stb	fp,158(sp)
    6110:	003a4006 	br	4a14 <__alt_mem_onchip_memory+0xf7804a14>
    6114:	00c00b44 	movi	r3,45
    6118:	d8c02785 	stb	r3,158(sp)
    611c:	d8802a15 	stw	r2,168(sp)
    6120:	dc802b17 	ldw	r18,172(sp)
    6124:	d8002915 	stw	zero,164(sp)
    6128:	07000b44 	movi	fp,45
    612c:	003a8006 	br	4b30 <__alt_mem_onchip_memory+0xf7804b30>
    6130:	04000074 	movhi	r16,1
    6134:	84060d04 	addi	r16,r16,6196
    6138:	003f4706 	br	5e58 <__alt_mem_onchip_memory+0xf7805e58>
    613c:	d8c02d17 	ldw	r3,180(sp)
    6140:	d9002f17 	ldw	r4,188(sp)
    6144:	18800017 	ldw	r2,0(r3)
    6148:	18c00104 	addi	r3,r3,4
    614c:	d8c02d15 	stw	r3,180(sp)
    6150:	11000015 	stw	r4,0(r2)
    6154:	0038dd06 	br	44cc <__alt_mem_onchip_memory+0xf78044cc>
    6158:	dd802617 	ldw	r22,152(sp)
    615c:	00bfff44 	movi	r2,-3
    6160:	b0801c16 	blt	r22,r2,61d4 <___vfprintf_internal_r+0x1de8>
    6164:	d9402917 	ldw	r5,164(sp)
    6168:	2d801a16 	blt	r5,r22,61d4 <___vfprintf_internal_r+0x1de8>
    616c:	dd803215 	stw	r22,200(sp)
    6170:	003e8906 	br	5b98 <__alt_mem_onchip_memory+0xf7805b98>
    6174:	01000074 	movhi	r4,1
    6178:	21061a84 	addi	r4,r4,6250
    617c:	d9002b15 	stw	r4,172(sp)
    6180:	003c9106 	br	53c8 <__alt_mem_onchip_memory+0xf78053c8>
    6184:	e005883a 	mov	r2,fp
    6188:	003e7906 	br	5b70 <__alt_mem_onchip_memory+0xf7805b70>
    618c:	d9402917 	ldw	r5,164(sp)
    6190:	df002783 	ldbu	fp,158(sp)
    6194:	dcc02d15 	stw	r19,180(sp)
    6198:	d9402a15 	stw	r5,168(sp)
    619c:	d9402e15 	stw	r5,184(sp)
    61a0:	d8002915 	stw	zero,164(sp)
    61a4:	d8003215 	stw	zero,200(sp)
    61a8:	003a5d06 	br	4b20 <__alt_mem_onchip_memory+0xf7804b20>
    61ac:	9080004c 	andi	r2,r18,1
    61b0:	0039883a 	mov	fp,zero
    61b4:	10000426 	beq	r2,zero,61c8 <___vfprintf_internal_r+0x1ddc>
    61b8:	00800c04 	movi	r2,48
    61bc:	dc001dc4 	addi	r16,sp,119
    61c0:	d8801dc5 	stb	r2,119(sp)
    61c4:	003b8006 	br	4fc8 <__alt_mem_onchip_memory+0xf7804fc8>
    61c8:	d8002e15 	stw	zero,184(sp)
    61cc:	dc001e04 	addi	r16,sp,120
    61d0:	003a4d06 	br	4b08 <__alt_mem_onchip_memory+0xf7804b08>
    61d4:	8c7fff84 	addi	r17,r17,-2
    61d8:	b5bfffc4 	addi	r22,r22,-1
    61dc:	dd802615 	stw	r22,152(sp)
    61e0:	dc4022c5 	stb	r17,139(sp)
    61e4:	b000bf16 	blt	r22,zero,64e4 <___vfprintf_internal_r+0x20f8>
    61e8:	00800ac4 	movi	r2,43
    61ec:	d8802305 	stb	r2,140(sp)
    61f0:	00800244 	movi	r2,9
    61f4:	15807016 	blt	r2,r22,63b8 <___vfprintf_internal_r+0x1fcc>
    61f8:	00800c04 	movi	r2,48
    61fc:	b5800c04 	addi	r22,r22,48
    6200:	d8802345 	stb	r2,141(sp)
    6204:	dd802385 	stb	r22,142(sp)
    6208:	d88023c4 	addi	r2,sp,143
    620c:	df0022c4 	addi	fp,sp,139
    6210:	d8c03317 	ldw	r3,204(sp)
    6214:	1739c83a 	sub	fp,r2,fp
    6218:	d9003317 	ldw	r4,204(sp)
    621c:	e0c7883a 	add	r3,fp,r3
    6220:	df003a15 	stw	fp,232(sp)
    6224:	d8c02e15 	stw	r3,184(sp)
    6228:	00800044 	movi	r2,1
    622c:	1100b30e 	bge	r2,r4,64fc <___vfprintf_internal_r+0x2110>
    6230:	d8c02e17 	ldw	r3,184(sp)
    6234:	18c00044 	addi	r3,r3,1
    6238:	d8c02e15 	stw	r3,184(sp)
    623c:	1805883a 	mov	r2,r3
    6240:	1800ac16 	blt	r3,zero,64f4 <___vfprintf_internal_r+0x2108>
    6244:	d8003215 	stw	zero,200(sp)
    6248:	003e5d06 	br	5bc0 <__alt_mem_onchip_memory+0xf7805bc0>
    624c:	d9002c17 	ldw	r4,176(sp)
    6250:	d9801e04 	addi	r6,sp,120
    6254:	b80b883a 	mov	r5,r23
    6258:	000bb380 	call	bb38 <__sprint_r>
    625c:	1039651e 	bne	r2,zero,47f4 <__alt_mem_onchip_memory+0xf78047f4>
    6260:	dc402617 	ldw	r17,152(sp)
    6264:	d8c02017 	ldw	r3,128(sp)
    6268:	d8801f17 	ldw	r2,124(sp)
    626c:	da000404 	addi	r8,sp,16
    6270:	003ed606 	br	5dcc <__alt_mem_onchip_memory+0xf7805dcc>
    6274:	582b883a 	mov	r21,r11
    6278:	d8002915 	stw	zero,164(sp)
    627c:	0038bd06 	br	4574 <__alt_mem_onchip_memory+0xf7804574>
    6280:	d8802917 	ldw	r2,164(sp)
    6284:	103e071e 	bne	r2,zero,5aa4 <__alt_mem_onchip_memory+0xf7805aa4>
    6288:	dc002915 	stw	r16,164(sp)
    628c:	003e0506 	br	5aa4 <__alt_mem_onchip_memory+0xf7805aa4>
    6290:	d9002917 	ldw	r4,164(sp)
    6294:	20c00044 	addi	r3,r4,1
    6298:	003e0f06 	br	5ad8 <__alt_mem_onchip_memory+0xf7805ad8>
    629c:	01400184 	movi	r5,6
    62a0:	d9402915 	stw	r5,164(sp)
    62a4:	003dff06 	br	5aa4 <__alt_mem_onchip_memory+0xf7805aa4>
    62a8:	d8802104 	addi	r2,sp,132
    62ac:	d8800315 	stw	r2,12(sp)
    62b0:	d8802504 	addi	r2,sp,148
    62b4:	d8800215 	stw	r2,8(sp)
    62b8:	d8802604 	addi	r2,sp,152
    62bc:	d8800115 	stw	r2,4(sp)
    62c0:	d8802917 	ldw	r2,164(sp)
    62c4:	d9403617 	ldw	r5,216(sp)
    62c8:	d9002c17 	ldw	r4,176(sp)
    62cc:	d8800015 	stw	r2,0(sp)
    62d0:	01c000c4 	movi	r7,3
    62d4:	980d883a 	mov	r6,r19
    62d8:	da003d15 	stw	r8,244(sp)
    62dc:	0006a100 	call	6a10 <_dtoa_r>
    62e0:	d8c02917 	ldw	r3,164(sp)
    62e4:	da003d17 	ldw	r8,244(sp)
    62e8:	1021883a 	mov	r16,r2
    62ec:	10f9883a 	add	fp,r2,r3
    62f0:	81000007 	ldb	r4,0(r16)
    62f4:	00800c04 	movi	r2,48
    62f8:	20805e26 	beq	r4,r2,6474 <___vfprintf_internal_r+0x2088>
    62fc:	d8c02617 	ldw	r3,152(sp)
    6300:	e0f9883a 	add	fp,fp,r3
    6304:	003e0a06 	br	5b30 <__alt_mem_onchip_memory+0xf7805b30>
    6308:	00c00b44 	movi	r3,45
    630c:	24e0003c 	xorhi	r19,r4,32768
    6310:	d8c02a05 	stb	r3,168(sp)
    6314:	003de906 	br	5abc <__alt_mem_onchip_memory+0xf7805abc>
    6318:	d8c03217 	ldw	r3,200(sp)
    631c:	00c07a0e 	bge	zero,r3,6508 <___vfprintf_internal_r+0x211c>
    6320:	00800044 	movi	r2,1
    6324:	d9003317 	ldw	r4,204(sp)
    6328:	1105883a 	add	r2,r2,r4
    632c:	d8802e15 	stw	r2,184(sp)
    6330:	10004e16 	blt	r2,zero,646c <___vfprintf_internal_r+0x2080>
    6334:	044019c4 	movi	r17,103
    6338:	003e2106 	br	5bc0 <__alt_mem_onchip_memory+0xf7805bc0>
    633c:	d9002917 	ldw	r4,164(sp)
    6340:	d8802104 	addi	r2,sp,132
    6344:	d8800315 	stw	r2,12(sp)
    6348:	d9000015 	stw	r4,0(sp)
    634c:	d8802504 	addi	r2,sp,148
    6350:	d9403617 	ldw	r5,216(sp)
    6354:	d9002c17 	ldw	r4,176(sp)
    6358:	d8800215 	stw	r2,8(sp)
    635c:	d8802604 	addi	r2,sp,152
    6360:	d8800115 	stw	r2,4(sp)
    6364:	01c000c4 	movi	r7,3
    6368:	980d883a 	mov	r6,r19
    636c:	da003d15 	stw	r8,244(sp)
    6370:	0006a100 	call	6a10 <_dtoa_r>
    6374:	d8c02917 	ldw	r3,164(sp)
    6378:	da003d17 	ldw	r8,244(sp)
    637c:	1021883a 	mov	r16,r2
    6380:	00801184 	movi	r2,70
    6384:	80f9883a 	add	fp,r16,r3
    6388:	88bfd926 	beq	r17,r2,62f0 <__alt_mem_onchip_memory+0xf78062f0>
    638c:	003de806 	br	5b30 <__alt_mem_onchip_memory+0xf7805b30>
    6390:	d9002917 	ldw	r4,164(sp)
    6394:	00c04d0e 	bge	zero,r3,64cc <___vfprintf_internal_r+0x20e0>
    6398:	2000441e 	bne	r4,zero,64ac <___vfprintf_internal_r+0x20c0>
    639c:	9480004c 	andi	r18,r18,1
    63a0:	9000421e 	bne	r18,zero,64ac <___vfprintf_internal_r+0x20c0>
    63a4:	1805883a 	mov	r2,r3
    63a8:	18007016 	blt	r3,zero,656c <___vfprintf_internal_r+0x2180>
    63ac:	d8c03217 	ldw	r3,200(sp)
    63b0:	d8c02e15 	stw	r3,184(sp)
    63b4:	003e0206 	br	5bc0 <__alt_mem_onchip_memory+0xf7805bc0>
    63b8:	df0022c4 	addi	fp,sp,139
    63bc:	dc002915 	stw	r16,164(sp)
    63c0:	4027883a 	mov	r19,r8
    63c4:	e021883a 	mov	r16,fp
    63c8:	b009883a 	mov	r4,r22
    63cc:	01400284 	movi	r5,10
    63d0:	0003f880 	call	3f88 <__modsi3>
    63d4:	10800c04 	addi	r2,r2,48
    63d8:	843fffc4 	addi	r16,r16,-1
    63dc:	b009883a 	mov	r4,r22
    63e0:	01400284 	movi	r5,10
    63e4:	80800005 	stb	r2,0(r16)
    63e8:	0003f040 	call	3f04 <__divsi3>
    63ec:	102d883a 	mov	r22,r2
    63f0:	00800244 	movi	r2,9
    63f4:	15bff416 	blt	r2,r22,63c8 <__alt_mem_onchip_memory+0xf78063c8>
    63f8:	9811883a 	mov	r8,r19
    63fc:	b0800c04 	addi	r2,r22,48
    6400:	8027883a 	mov	r19,r16
    6404:	997fffc4 	addi	r5,r19,-1
    6408:	98bfffc5 	stb	r2,-1(r19)
    640c:	dc002917 	ldw	r16,164(sp)
    6410:	2f006a2e 	bgeu	r5,fp,65bc <___vfprintf_internal_r+0x21d0>
    6414:	d9c02384 	addi	r7,sp,142
    6418:	3ccfc83a 	sub	r7,r7,r19
    641c:	d9002344 	addi	r4,sp,141
    6420:	e1cf883a 	add	r7,fp,r7
    6424:	00000106 	br	642c <___vfprintf_internal_r+0x2040>
    6428:	28800003 	ldbu	r2,0(r5)
    642c:	20800005 	stb	r2,0(r4)
    6430:	21000044 	addi	r4,r4,1
    6434:	29400044 	addi	r5,r5,1
    6438:	393ffb1e 	bne	r7,r4,6428 <__alt_mem_onchip_memory+0xf7806428>
    643c:	d8802304 	addi	r2,sp,140
    6440:	14c5c83a 	sub	r2,r2,r19
    6444:	d8c02344 	addi	r3,sp,141
    6448:	1885883a 	add	r2,r3,r2
    644c:	003f7006 	br	6210 <__alt_mem_onchip_memory+0xf7806210>
    6450:	0005883a 	mov	r2,zero
    6454:	003f0f06 	br	6094 <__alt_mem_onchip_memory+0xf7806094>
    6458:	d8c03217 	ldw	r3,200(sp)
    645c:	18c00044 	addi	r3,r3,1
    6460:	d8c02e15 	stw	r3,184(sp)
    6464:	1805883a 	mov	r2,r3
    6468:	183fb20e 	bge	r3,zero,6334 <__alt_mem_onchip_memory+0xf7806334>
    646c:	0005883a 	mov	r2,zero
    6470:	003fb006 	br	6334 <__alt_mem_onchip_memory+0xf7806334>
    6474:	d9003617 	ldw	r4,216(sp)
    6478:	000d883a 	mov	r6,zero
    647c:	000f883a 	mov	r7,zero
    6480:	980b883a 	mov	r5,r19
    6484:	d8c03c15 	stw	r3,240(sp)
    6488:	da003d15 	stw	r8,244(sp)
    648c:	000e4c80 	call	e4c8 <__eqdf2>
    6490:	d8c03c17 	ldw	r3,240(sp)
    6494:	da003d17 	ldw	r8,244(sp)
    6498:	103f9826 	beq	r2,zero,62fc <__alt_mem_onchip_memory+0xf78062fc>
    649c:	00800044 	movi	r2,1
    64a0:	10c7c83a 	sub	r3,r2,r3
    64a4:	d8c02615 	stw	r3,152(sp)
    64a8:	003f9506 	br	6300 <__alt_mem_onchip_memory+0xf7806300>
    64ac:	d9002917 	ldw	r4,164(sp)
    64b0:	d8c03217 	ldw	r3,200(sp)
    64b4:	20800044 	addi	r2,r4,1
    64b8:	1885883a 	add	r2,r3,r2
    64bc:	d8802e15 	stw	r2,184(sp)
    64c0:	103dbf0e 	bge	r2,zero,5bc0 <__alt_mem_onchip_memory+0xf7805bc0>
    64c4:	0005883a 	mov	r2,zero
    64c8:	003dbd06 	br	5bc0 <__alt_mem_onchip_memory+0xf7805bc0>
    64cc:	2000211e 	bne	r4,zero,6554 <___vfprintf_internal_r+0x2168>
    64d0:	9480004c 	andi	r18,r18,1
    64d4:	90001f1e 	bne	r18,zero,6554 <___vfprintf_internal_r+0x2168>
    64d8:	00800044 	movi	r2,1
    64dc:	d8802e15 	stw	r2,184(sp)
    64e0:	003db706 	br	5bc0 <__alt_mem_onchip_memory+0xf7805bc0>
    64e4:	00800b44 	movi	r2,45
    64e8:	05adc83a 	sub	r22,zero,r22
    64ec:	d8802305 	stb	r2,140(sp)
    64f0:	003f3f06 	br	61f0 <__alt_mem_onchip_memory+0xf78061f0>
    64f4:	0005883a 	mov	r2,zero
    64f8:	003f5206 	br	6244 <__alt_mem_onchip_memory+0xf7806244>
    64fc:	90a4703a 	and	r18,r18,r2
    6500:	903f4e26 	beq	r18,zero,623c <__alt_mem_onchip_memory+0xf780623c>
    6504:	003f4a06 	br	6230 <__alt_mem_onchip_memory+0xf7806230>
    6508:	00800084 	movi	r2,2
    650c:	10c5c83a 	sub	r2,r2,r3
    6510:	003f8406 	br	6324 <__alt_mem_onchip_memory+0xf7806324>
    6514:	d8802d17 	ldw	r2,180(sp)
    6518:	d9002d17 	ldw	r4,180(sp)
    651c:	ac400043 	ldbu	r17,1(r21)
    6520:	10800017 	ldw	r2,0(r2)
    6524:	582b883a 	mov	r21,r11
    6528:	d8802915 	stw	r2,164(sp)
    652c:	20800104 	addi	r2,r4,4
    6530:	d9002917 	ldw	r4,164(sp)
    6534:	d8802d15 	stw	r2,180(sp)
    6538:	203e7a0e 	bge	r4,zero,5f24 <__alt_mem_onchip_memory+0xf7805f24>
    653c:	8c403fcc 	andi	r17,r17,255
    6540:	00bfffc4 	movi	r2,-1
    6544:	8c40201c 	xori	r17,r17,128
    6548:	d8802915 	stw	r2,164(sp)
    654c:	8c7fe004 	addi	r17,r17,-128
    6550:	00380706 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    6554:	d8c02917 	ldw	r3,164(sp)
    6558:	18c00084 	addi	r3,r3,2
    655c:	d8c02e15 	stw	r3,184(sp)
    6560:	1805883a 	mov	r2,r3
    6564:	183d960e 	bge	r3,zero,5bc0 <__alt_mem_onchip_memory+0xf7805bc0>
    6568:	003fd606 	br	64c4 <__alt_mem_onchip_memory+0xf78064c4>
    656c:	0005883a 	mov	r2,zero
    6570:	003f8e06 	br	63ac <__alt_mem_onchip_memory+0xf78063ac>
    6574:	9080004c 	andi	r2,r18,1
    6578:	103f811e 	bne	r2,zero,6380 <__alt_mem_onchip_memory+0xf7806380>
    657c:	d8802117 	ldw	r2,132(sp)
    6580:	1405c83a 	sub	r2,r2,r16
    6584:	d8803315 	stw	r2,204(sp)
    6588:	b47ef326 	beq	r22,r17,6158 <__alt_mem_onchip_memory+0xf7806158>
    658c:	dd802617 	ldw	r22,152(sp)
    6590:	003f1106 	br	61d8 <__alt_mem_onchip_memory+0xf78061d8>
    6594:	d9c02785 	stb	r7,158(sp)
    6598:	00390406 	br	49ac <__alt_mem_onchip_memory+0xf78049ac>
    659c:	d9c02785 	stb	r7,158(sp)
    65a0:	0038d306 	br	48f0 <__alt_mem_onchip_memory+0xf78048f0>
    65a4:	d9c02785 	stb	r7,158(sp)
    65a8:	003a6106 	br	4f30 <__alt_mem_onchip_memory+0xf7804f30>
    65ac:	d9c02785 	stb	r7,158(sp)
    65b0:	003af806 	br	5194 <__alt_mem_onchip_memory+0xf7805194>
    65b4:	0005883a 	mov	r2,zero
    65b8:	003d7e06 	br	5bb4 <__alt_mem_onchip_memory+0xf7805bb4>
    65bc:	d8802344 	addi	r2,sp,141
    65c0:	003f1306 	br	6210 <__alt_mem_onchip_memory+0xf7806210>
    65c4:	d9c02785 	stb	r7,158(sp)
    65c8:	00392306 	br	4a58 <__alt_mem_onchip_memory+0xf7804a58>
    65cc:	d9c02785 	stb	r7,158(sp)
    65d0:	003aa906 	br	5078 <__alt_mem_onchip_memory+0xf7805078>
    65d4:	d9c02785 	stb	r7,158(sp)
    65d8:	003a3d06 	br	4ed0 <__alt_mem_onchip_memory+0xf7804ed0>
    65dc:	d9c02785 	stb	r7,158(sp)
    65e0:	003aca06 	br	510c <__alt_mem_onchip_memory+0xf780510c>

000065e4 <__vfprintf_internal>:
    65e4:	00800074 	movhi	r2,1
    65e8:	108d7704 	addi	r2,r2,13788
    65ec:	300f883a 	mov	r7,r6
    65f0:	280d883a 	mov	r6,r5
    65f4:	200b883a 	mov	r5,r4
    65f8:	11000017 	ldw	r4,0(r2)
    65fc:	00043ec1 	jmpi	43ec <___vfprintf_internal_r>

00006600 <__sbprintf>:
    6600:	2880030b 	ldhu	r2,12(r5)
    6604:	2ac01917 	ldw	r11,100(r5)
    6608:	2a80038b 	ldhu	r10,14(r5)
    660c:	2a400717 	ldw	r9,28(r5)
    6610:	2a000917 	ldw	r8,36(r5)
    6614:	defee204 	addi	sp,sp,-1144
    6618:	00c10004 	movi	r3,1024
    661c:	dc011a15 	stw	r16,1128(sp)
    6620:	10bfff4c 	andi	r2,r2,65533
    6624:	2821883a 	mov	r16,r5
    6628:	d8cb883a 	add	r5,sp,r3
    662c:	dc811c15 	stw	r18,1136(sp)
    6630:	dc411b15 	stw	r17,1132(sp)
    6634:	dfc11d15 	stw	ra,1140(sp)
    6638:	2025883a 	mov	r18,r4
    663c:	d881030d 	sth	r2,1036(sp)
    6640:	dac11915 	stw	r11,1124(sp)
    6644:	da81038d 	sth	r10,1038(sp)
    6648:	da410715 	stw	r9,1052(sp)
    664c:	da010915 	stw	r8,1060(sp)
    6650:	dec10015 	stw	sp,1024(sp)
    6654:	dec10415 	stw	sp,1040(sp)
    6658:	d8c10215 	stw	r3,1032(sp)
    665c:	d8c10515 	stw	r3,1044(sp)
    6660:	d8010615 	stw	zero,1048(sp)
    6664:	00043ec0 	call	43ec <___vfprintf_internal_r>
    6668:	1023883a 	mov	r17,r2
    666c:	10000416 	blt	r2,zero,6680 <__sbprintf+0x80>
    6670:	d9410004 	addi	r5,sp,1024
    6674:	9009883a 	mov	r4,r18
    6678:	00082b40 	call	82b4 <_fflush_r>
    667c:	10000d1e 	bne	r2,zero,66b4 <__sbprintf+0xb4>
    6680:	d881030b 	ldhu	r2,1036(sp)
    6684:	1080100c 	andi	r2,r2,64
    6688:	10000326 	beq	r2,zero,6698 <__sbprintf+0x98>
    668c:	8080030b 	ldhu	r2,12(r16)
    6690:	10801014 	ori	r2,r2,64
    6694:	8080030d 	sth	r2,12(r16)
    6698:	8805883a 	mov	r2,r17
    669c:	dfc11d17 	ldw	ra,1140(sp)
    66a0:	dc811c17 	ldw	r18,1136(sp)
    66a4:	dc411b17 	ldw	r17,1132(sp)
    66a8:	dc011a17 	ldw	r16,1128(sp)
    66ac:	dec11e04 	addi	sp,sp,1144
    66b0:	f800283a 	ret
    66b4:	047fffc4 	movi	r17,-1
    66b8:	003ff106 	br	6680 <__alt_mem_onchip_memory+0xf7806680>

000066bc <__swsetup_r>:
    66bc:	00800074 	movhi	r2,1
    66c0:	defffd04 	addi	sp,sp,-12
    66c4:	108d7704 	addi	r2,r2,13788
    66c8:	dc400115 	stw	r17,4(sp)
    66cc:	2023883a 	mov	r17,r4
    66d0:	11000017 	ldw	r4,0(r2)
    66d4:	dc000015 	stw	r16,0(sp)
    66d8:	dfc00215 	stw	ra,8(sp)
    66dc:	2821883a 	mov	r16,r5
    66e0:	20000226 	beq	r4,zero,66ec <__swsetup_r+0x30>
    66e4:	20800e17 	ldw	r2,56(r4)
    66e8:	10003126 	beq	r2,zero,67b0 <__swsetup_r+0xf4>
    66ec:	8080030b 	ldhu	r2,12(r16)
    66f0:	10c0020c 	andi	r3,r2,8
    66f4:	1009883a 	mov	r4,r2
    66f8:	18000f26 	beq	r3,zero,6738 <__swsetup_r+0x7c>
    66fc:	80c00417 	ldw	r3,16(r16)
    6700:	18001526 	beq	r3,zero,6758 <__swsetup_r+0x9c>
    6704:	1100004c 	andi	r4,r2,1
    6708:	20001c1e 	bne	r4,zero,677c <__swsetup_r+0xc0>
    670c:	1080008c 	andi	r2,r2,2
    6710:	1000291e 	bne	r2,zero,67b8 <__swsetup_r+0xfc>
    6714:	80800517 	ldw	r2,20(r16)
    6718:	80800215 	stw	r2,8(r16)
    671c:	18001c26 	beq	r3,zero,6790 <__swsetup_r+0xd4>
    6720:	0005883a 	mov	r2,zero
    6724:	dfc00217 	ldw	ra,8(sp)
    6728:	dc400117 	ldw	r17,4(sp)
    672c:	dc000017 	ldw	r16,0(sp)
    6730:	dec00304 	addi	sp,sp,12
    6734:	f800283a 	ret
    6738:	2080040c 	andi	r2,r4,16
    673c:	10002e26 	beq	r2,zero,67f8 <__swsetup_r+0x13c>
    6740:	2080010c 	andi	r2,r4,4
    6744:	10001e1e 	bne	r2,zero,67c0 <__swsetup_r+0x104>
    6748:	80c00417 	ldw	r3,16(r16)
    674c:	20800214 	ori	r2,r4,8
    6750:	8080030d 	sth	r2,12(r16)
    6754:	183feb1e 	bne	r3,zero,6704 <__alt_mem_onchip_memory+0xf7806704>
    6758:	1100a00c 	andi	r4,r2,640
    675c:	01408004 	movi	r5,512
    6760:	217fe826 	beq	r4,r5,6704 <__alt_mem_onchip_memory+0xf7806704>
    6764:	800b883a 	mov	r5,r16
    6768:	8809883a 	mov	r4,r17
    676c:	00092900 	call	9290 <__smakebuf_r>
    6770:	8080030b 	ldhu	r2,12(r16)
    6774:	80c00417 	ldw	r3,16(r16)
    6778:	003fe206 	br	6704 <__alt_mem_onchip_memory+0xf7806704>
    677c:	80800517 	ldw	r2,20(r16)
    6780:	80000215 	stw	zero,8(r16)
    6784:	0085c83a 	sub	r2,zero,r2
    6788:	80800615 	stw	r2,24(r16)
    678c:	183fe41e 	bne	r3,zero,6720 <__alt_mem_onchip_memory+0xf7806720>
    6790:	80c0030b 	ldhu	r3,12(r16)
    6794:	0005883a 	mov	r2,zero
    6798:	1900200c 	andi	r4,r3,128
    679c:	203fe126 	beq	r4,zero,6724 <__alt_mem_onchip_memory+0xf7806724>
    67a0:	18c01014 	ori	r3,r3,64
    67a4:	80c0030d 	sth	r3,12(r16)
    67a8:	00bfffc4 	movi	r2,-1
    67ac:	003fdd06 	br	6724 <__alt_mem_onchip_memory+0xf7806724>
    67b0:	00086900 	call	8690 <__sinit>
    67b4:	003fcd06 	br	66ec <__alt_mem_onchip_memory+0xf78066ec>
    67b8:	0005883a 	mov	r2,zero
    67bc:	003fd606 	br	6718 <__alt_mem_onchip_memory+0xf7806718>
    67c0:	81400c17 	ldw	r5,48(r16)
    67c4:	28000626 	beq	r5,zero,67e0 <__swsetup_r+0x124>
    67c8:	80801004 	addi	r2,r16,64
    67cc:	28800326 	beq	r5,r2,67dc <__swsetup_r+0x120>
    67d0:	8809883a 	mov	r4,r17
    67d4:	00088040 	call	8804 <_free_r>
    67d8:	8100030b 	ldhu	r4,12(r16)
    67dc:	80000c15 	stw	zero,48(r16)
    67e0:	80c00417 	ldw	r3,16(r16)
    67e4:	00bff6c4 	movi	r2,-37
    67e8:	1108703a 	and	r4,r2,r4
    67ec:	80000115 	stw	zero,4(r16)
    67f0:	80c00015 	stw	r3,0(r16)
    67f4:	003fd506 	br	674c <__alt_mem_onchip_memory+0xf780674c>
    67f8:	00800244 	movi	r2,9
    67fc:	88800015 	stw	r2,0(r17)
    6800:	20801014 	ori	r2,r4,64
    6804:	8080030d 	sth	r2,12(r16)
    6808:	00bfffc4 	movi	r2,-1
    680c:	003fc506 	br	6724 <__alt_mem_onchip_memory+0xf7806724>

00006810 <quorem>:
    6810:	defff704 	addi	sp,sp,-36
    6814:	dc800215 	stw	r18,8(sp)
    6818:	20800417 	ldw	r2,16(r4)
    681c:	2c800417 	ldw	r18,16(r5)
    6820:	dfc00815 	stw	ra,32(sp)
    6824:	ddc00715 	stw	r23,28(sp)
    6828:	dd800615 	stw	r22,24(sp)
    682c:	dd400515 	stw	r21,20(sp)
    6830:	dd000415 	stw	r20,16(sp)
    6834:	dcc00315 	stw	r19,12(sp)
    6838:	dc400115 	stw	r17,4(sp)
    683c:	dc000015 	stw	r16,0(sp)
    6840:	14807116 	blt	r2,r18,6a08 <quorem+0x1f8>
    6844:	94bfffc4 	addi	r18,r18,-1
    6848:	94ad883a 	add	r22,r18,r18
    684c:	b5ad883a 	add	r22,r22,r22
    6850:	2c400504 	addi	r17,r5,20
    6854:	8da9883a 	add	r20,r17,r22
    6858:	25400504 	addi	r21,r4,20
    685c:	282f883a 	mov	r23,r5
    6860:	adad883a 	add	r22,r21,r22
    6864:	a1400017 	ldw	r5,0(r20)
    6868:	2021883a 	mov	r16,r4
    686c:	b1000017 	ldw	r4,0(r22)
    6870:	29400044 	addi	r5,r5,1
    6874:	0003ffc0 	call	3ffc <__udivsi3>
    6878:	1027883a 	mov	r19,r2
    687c:	10002c26 	beq	r2,zero,6930 <quorem+0x120>
    6880:	a813883a 	mov	r9,r21
    6884:	880b883a 	mov	r5,r17
    6888:	0009883a 	mov	r4,zero
    688c:	000d883a 	mov	r6,zero
    6890:	2a000017 	ldw	r8,0(r5)
    6894:	49c00017 	ldw	r7,0(r9)
    6898:	29400104 	addi	r5,r5,4
    689c:	40bfffcc 	andi	r2,r8,65535
    68a0:	14c5383a 	mul	r2,r2,r19
    68a4:	4010d43a 	srli	r8,r8,16
    68a8:	38ffffcc 	andi	r3,r7,65535
    68ac:	1105883a 	add	r2,r2,r4
    68b0:	1008d43a 	srli	r4,r2,16
    68b4:	44d1383a 	mul	r8,r8,r19
    68b8:	198d883a 	add	r6,r3,r6
    68bc:	10ffffcc 	andi	r3,r2,65535
    68c0:	30c7c83a 	sub	r3,r6,r3
    68c4:	380ed43a 	srli	r7,r7,16
    68c8:	4105883a 	add	r2,r8,r4
    68cc:	180dd43a 	srai	r6,r3,16
    68d0:	113fffcc 	andi	r4,r2,65535
    68d4:	390fc83a 	sub	r7,r7,r4
    68d8:	398d883a 	add	r6,r7,r6
    68dc:	300e943a 	slli	r7,r6,16
    68e0:	18ffffcc 	andi	r3,r3,65535
    68e4:	1008d43a 	srli	r4,r2,16
    68e8:	38ceb03a 	or	r7,r7,r3
    68ec:	49c00015 	stw	r7,0(r9)
    68f0:	300dd43a 	srai	r6,r6,16
    68f4:	4a400104 	addi	r9,r9,4
    68f8:	a17fe52e 	bgeu	r20,r5,6890 <__alt_mem_onchip_memory+0xf7806890>
    68fc:	b0800017 	ldw	r2,0(r22)
    6900:	10000b1e 	bne	r2,zero,6930 <quorem+0x120>
    6904:	b0bfff04 	addi	r2,r22,-4
    6908:	a880082e 	bgeu	r21,r2,692c <quorem+0x11c>
    690c:	b0ffff17 	ldw	r3,-4(r22)
    6910:	18000326 	beq	r3,zero,6920 <quorem+0x110>
    6914:	00000506 	br	692c <quorem+0x11c>
    6918:	10c00017 	ldw	r3,0(r2)
    691c:	1800031e 	bne	r3,zero,692c <quorem+0x11c>
    6920:	10bfff04 	addi	r2,r2,-4
    6924:	94bfffc4 	addi	r18,r18,-1
    6928:	a8bffb36 	bltu	r21,r2,6918 <__alt_mem_onchip_memory+0xf7806918>
    692c:	84800415 	stw	r18,16(r16)
    6930:	b80b883a 	mov	r5,r23
    6934:	8009883a 	mov	r4,r16
    6938:	000a9d00 	call	a9d0 <__mcmp>
    693c:	10002616 	blt	r2,zero,69d8 <quorem+0x1c8>
    6940:	9cc00044 	addi	r19,r19,1
    6944:	a805883a 	mov	r2,r21
    6948:	000b883a 	mov	r5,zero
    694c:	11000017 	ldw	r4,0(r2)
    6950:	89800017 	ldw	r6,0(r17)
    6954:	10800104 	addi	r2,r2,4
    6958:	20ffffcc 	andi	r3,r4,65535
    695c:	194b883a 	add	r5,r3,r5
    6960:	30ffffcc 	andi	r3,r6,65535
    6964:	28c7c83a 	sub	r3,r5,r3
    6968:	300cd43a 	srli	r6,r6,16
    696c:	2008d43a 	srli	r4,r4,16
    6970:	180bd43a 	srai	r5,r3,16
    6974:	18ffffcc 	andi	r3,r3,65535
    6978:	2189c83a 	sub	r4,r4,r6
    697c:	2149883a 	add	r4,r4,r5
    6980:	200c943a 	slli	r6,r4,16
    6984:	8c400104 	addi	r17,r17,4
    6988:	200bd43a 	srai	r5,r4,16
    698c:	30c6b03a 	or	r3,r6,r3
    6990:	10ffff15 	stw	r3,-4(r2)
    6994:	a47fed2e 	bgeu	r20,r17,694c <__alt_mem_onchip_memory+0xf780694c>
    6998:	9485883a 	add	r2,r18,r18
    699c:	1085883a 	add	r2,r2,r2
    69a0:	a887883a 	add	r3,r21,r2
    69a4:	18800017 	ldw	r2,0(r3)
    69a8:	10000b1e 	bne	r2,zero,69d8 <quorem+0x1c8>
    69ac:	18bfff04 	addi	r2,r3,-4
    69b0:	a880082e 	bgeu	r21,r2,69d4 <quorem+0x1c4>
    69b4:	18ffff17 	ldw	r3,-4(r3)
    69b8:	18000326 	beq	r3,zero,69c8 <quorem+0x1b8>
    69bc:	00000506 	br	69d4 <quorem+0x1c4>
    69c0:	10c00017 	ldw	r3,0(r2)
    69c4:	1800031e 	bne	r3,zero,69d4 <quorem+0x1c4>
    69c8:	10bfff04 	addi	r2,r2,-4
    69cc:	94bfffc4 	addi	r18,r18,-1
    69d0:	a8bffb36 	bltu	r21,r2,69c0 <__alt_mem_onchip_memory+0xf78069c0>
    69d4:	84800415 	stw	r18,16(r16)
    69d8:	9805883a 	mov	r2,r19
    69dc:	dfc00817 	ldw	ra,32(sp)
    69e0:	ddc00717 	ldw	r23,28(sp)
    69e4:	dd800617 	ldw	r22,24(sp)
    69e8:	dd400517 	ldw	r21,20(sp)
    69ec:	dd000417 	ldw	r20,16(sp)
    69f0:	dcc00317 	ldw	r19,12(sp)
    69f4:	dc800217 	ldw	r18,8(sp)
    69f8:	dc400117 	ldw	r17,4(sp)
    69fc:	dc000017 	ldw	r16,0(sp)
    6a00:	dec00904 	addi	sp,sp,36
    6a04:	f800283a 	ret
    6a08:	0005883a 	mov	r2,zero
    6a0c:	003ff306 	br	69dc <__alt_mem_onchip_memory+0xf78069dc>

00006a10 <_dtoa_r>:
    6a10:	20801017 	ldw	r2,64(r4)
    6a14:	deffde04 	addi	sp,sp,-136
    6a18:	df002015 	stw	fp,128(sp)
    6a1c:	dcc01b15 	stw	r19,108(sp)
    6a20:	dc801a15 	stw	r18,104(sp)
    6a24:	dc401915 	stw	r17,100(sp)
    6a28:	dc001815 	stw	r16,96(sp)
    6a2c:	dfc02115 	stw	ra,132(sp)
    6a30:	ddc01f15 	stw	r23,124(sp)
    6a34:	dd801e15 	stw	r22,120(sp)
    6a38:	dd401d15 	stw	r21,116(sp)
    6a3c:	dd001c15 	stw	r20,112(sp)
    6a40:	d9c00315 	stw	r7,12(sp)
    6a44:	2039883a 	mov	fp,r4
    6a48:	3023883a 	mov	r17,r6
    6a4c:	2825883a 	mov	r18,r5
    6a50:	dc002417 	ldw	r16,144(sp)
    6a54:	3027883a 	mov	r19,r6
    6a58:	10000826 	beq	r2,zero,6a7c <_dtoa_r+0x6c>
    6a5c:	21801117 	ldw	r6,68(r4)
    6a60:	00c00044 	movi	r3,1
    6a64:	100b883a 	mov	r5,r2
    6a68:	1986983a 	sll	r3,r3,r6
    6a6c:	11800115 	stw	r6,4(r2)
    6a70:	10c00215 	stw	r3,8(r2)
    6a74:	000a1b00 	call	a1b0 <_Bfree>
    6a78:	e0001015 	stw	zero,64(fp)
    6a7c:	88002e16 	blt	r17,zero,6b38 <_dtoa_r+0x128>
    6a80:	80000015 	stw	zero,0(r16)
    6a84:	889ffc2c 	andhi	r2,r17,32752
    6a88:	00dffc34 	movhi	r3,32752
    6a8c:	10c01c26 	beq	r2,r3,6b00 <_dtoa_r+0xf0>
    6a90:	000d883a 	mov	r6,zero
    6a94:	000f883a 	mov	r7,zero
    6a98:	9009883a 	mov	r4,r18
    6a9c:	980b883a 	mov	r5,r19
    6aa0:	000e4c80 	call	e4c8 <__eqdf2>
    6aa4:	10002b1e 	bne	r2,zero,6b54 <_dtoa_r+0x144>
    6aa8:	d9c02317 	ldw	r7,140(sp)
    6aac:	00800044 	movi	r2,1
    6ab0:	38800015 	stw	r2,0(r7)
    6ab4:	d8802517 	ldw	r2,148(sp)
    6ab8:	10019e26 	beq	r2,zero,7134 <_dtoa_r+0x724>
    6abc:	d8c02517 	ldw	r3,148(sp)
    6ac0:	00800074 	movhi	r2,1
    6ac4:	10861a44 	addi	r2,r2,6249
    6ac8:	18800015 	stw	r2,0(r3)
    6acc:	10bfffc4 	addi	r2,r2,-1
    6ad0:	dfc02117 	ldw	ra,132(sp)
    6ad4:	df002017 	ldw	fp,128(sp)
    6ad8:	ddc01f17 	ldw	r23,124(sp)
    6adc:	dd801e17 	ldw	r22,120(sp)
    6ae0:	dd401d17 	ldw	r21,116(sp)
    6ae4:	dd001c17 	ldw	r20,112(sp)
    6ae8:	dcc01b17 	ldw	r19,108(sp)
    6aec:	dc801a17 	ldw	r18,104(sp)
    6af0:	dc401917 	ldw	r17,100(sp)
    6af4:	dc001817 	ldw	r16,96(sp)
    6af8:	dec02204 	addi	sp,sp,136
    6afc:	f800283a 	ret
    6b00:	d8c02317 	ldw	r3,140(sp)
    6b04:	0089c3c4 	movi	r2,9999
    6b08:	18800015 	stw	r2,0(r3)
    6b0c:	90017726 	beq	r18,zero,70ec <_dtoa_r+0x6dc>
    6b10:	00800074 	movhi	r2,1
    6b14:	10862604 	addi	r2,r2,6296
    6b18:	d9002517 	ldw	r4,148(sp)
    6b1c:	203fec26 	beq	r4,zero,6ad0 <__alt_mem_onchip_memory+0xf7806ad0>
    6b20:	10c000c7 	ldb	r3,3(r2)
    6b24:	1801781e 	bne	r3,zero,7108 <_dtoa_r+0x6f8>
    6b28:	10c000c4 	addi	r3,r2,3
    6b2c:	d9802517 	ldw	r6,148(sp)
    6b30:	30c00015 	stw	r3,0(r6)
    6b34:	003fe606 	br	6ad0 <__alt_mem_onchip_memory+0xf7806ad0>
    6b38:	04e00034 	movhi	r19,32768
    6b3c:	9cffffc4 	addi	r19,r19,-1
    6b40:	00800044 	movi	r2,1
    6b44:	8ce6703a 	and	r19,r17,r19
    6b48:	80800015 	stw	r2,0(r16)
    6b4c:	9823883a 	mov	r17,r19
    6b50:	003fcc06 	br	6a84 <__alt_mem_onchip_memory+0xf7806a84>
    6b54:	d8800204 	addi	r2,sp,8
    6b58:	d8800015 	stw	r2,0(sp)
    6b5c:	d9c00104 	addi	r7,sp,4
    6b60:	900b883a 	mov	r5,r18
    6b64:	980d883a 	mov	r6,r19
    6b68:	e009883a 	mov	r4,fp
    6b6c:	8820d53a 	srli	r16,r17,20
    6b70:	000ad9c0 	call	ad9c <__d2b>
    6b74:	d8800915 	stw	r2,36(sp)
    6b78:	8001651e 	bne	r16,zero,7110 <_dtoa_r+0x700>
    6b7c:	dd800217 	ldw	r22,8(sp)
    6b80:	dc000117 	ldw	r16,4(sp)
    6b84:	00800804 	movi	r2,32
    6b88:	b421883a 	add	r16,r22,r16
    6b8c:	80c10c84 	addi	r3,r16,1074
    6b90:	10c2d10e 	bge	r2,r3,76d8 <_dtoa_r+0xcc8>
    6b94:	00801004 	movi	r2,64
    6b98:	81010484 	addi	r4,r16,1042
    6b9c:	10c7c83a 	sub	r3,r2,r3
    6ba0:	9108d83a 	srl	r4,r18,r4
    6ba4:	88e2983a 	sll	r17,r17,r3
    6ba8:	2448b03a 	or	r4,r4,r17
    6bac:	000e7880 	call	e788 <__floatunsidf>
    6bb0:	017f8434 	movhi	r5,65040
    6bb4:	01800044 	movi	r6,1
    6bb8:	1009883a 	mov	r4,r2
    6bbc:	194b883a 	add	r5,r3,r5
    6bc0:	843fffc4 	addi	r16,r16,-1
    6bc4:	d9801115 	stw	r6,68(sp)
    6bc8:	000d883a 	mov	r6,zero
    6bcc:	01cffe34 	movhi	r7,16376
    6bd0:	00032ec0 	call	32ec <__subdf3>
    6bd4:	0198dbf4 	movhi	r6,25455
    6bd8:	01cff4f4 	movhi	r7,16339
    6bdc:	3190d844 	addi	r6,r6,17249
    6be0:	39e1e9c4 	addi	r7,r7,-30809
    6be4:	1009883a 	mov	r4,r2
    6be8:	180b883a 	mov	r5,r3
    6bec:	0002bd40 	call	2bd4 <__muldf3>
    6bf0:	01a2d874 	movhi	r6,35681
    6bf4:	01cff1f4 	movhi	r7,16327
    6bf8:	31b22cc4 	addi	r6,r6,-14157
    6bfc:	39e28a04 	addi	r7,r7,-30168
    6c00:	180b883a 	mov	r5,r3
    6c04:	1009883a 	mov	r4,r2
    6c08:	000194c0 	call	194c <__adddf3>
    6c0c:	8009883a 	mov	r4,r16
    6c10:	1029883a 	mov	r20,r2
    6c14:	1823883a 	mov	r17,r3
    6c18:	000e6ac0 	call	e6ac <__floatsidf>
    6c1c:	019427f4 	movhi	r6,20639
    6c20:	01cff4f4 	movhi	r7,16339
    6c24:	319e7ec4 	addi	r6,r6,31227
    6c28:	39d104c4 	addi	r7,r7,17427
    6c2c:	1009883a 	mov	r4,r2
    6c30:	180b883a 	mov	r5,r3
    6c34:	0002bd40 	call	2bd4 <__muldf3>
    6c38:	100d883a 	mov	r6,r2
    6c3c:	180f883a 	mov	r7,r3
    6c40:	a009883a 	mov	r4,r20
    6c44:	880b883a 	mov	r5,r17
    6c48:	000194c0 	call	194c <__adddf3>
    6c4c:	1009883a 	mov	r4,r2
    6c50:	180b883a 	mov	r5,r3
    6c54:	1029883a 	mov	r20,r2
    6c58:	1823883a 	mov	r17,r3
    6c5c:	000e62c0 	call	e62c <__fixdfsi>
    6c60:	000d883a 	mov	r6,zero
    6c64:	000f883a 	mov	r7,zero
    6c68:	a009883a 	mov	r4,r20
    6c6c:	880b883a 	mov	r5,r17
    6c70:	d8800515 	stw	r2,20(sp)
    6c74:	0002ae00 	call	2ae0 <__ledf2>
    6c78:	10028716 	blt	r2,zero,7698 <_dtoa_r+0xc88>
    6c7c:	d8c00517 	ldw	r3,20(sp)
    6c80:	00800584 	movi	r2,22
    6c84:	10c27536 	bltu	r2,r3,765c <_dtoa_r+0xc4c>
    6c88:	180490fa 	slli	r2,r3,3
    6c8c:	00c00074 	movhi	r3,1
    6c90:	18c64104 	addi	r3,r3,6404
    6c94:	1885883a 	add	r2,r3,r2
    6c98:	11000017 	ldw	r4,0(r2)
    6c9c:	11400117 	ldw	r5,4(r2)
    6ca0:	900d883a 	mov	r6,r18
    6ca4:	980f883a 	mov	r7,r19
    6ca8:	000e5500 	call	e550 <__gedf2>
    6cac:	00828d0e 	bge	zero,r2,76e4 <_dtoa_r+0xcd4>
    6cb0:	d9000517 	ldw	r4,20(sp)
    6cb4:	d8000e15 	stw	zero,56(sp)
    6cb8:	213fffc4 	addi	r4,r4,-1
    6cbc:	d9000515 	stw	r4,20(sp)
    6cc0:	b42dc83a 	sub	r22,r22,r16
    6cc4:	b5bfffc4 	addi	r22,r22,-1
    6cc8:	b0026f16 	blt	r22,zero,7688 <_dtoa_r+0xc78>
    6ccc:	d8000815 	stw	zero,32(sp)
    6cd0:	d9c00517 	ldw	r7,20(sp)
    6cd4:	38026416 	blt	r7,zero,7668 <_dtoa_r+0xc58>
    6cd8:	b1ed883a 	add	r22,r22,r7
    6cdc:	d9c00d15 	stw	r7,52(sp)
    6ce0:	d8000a15 	stw	zero,40(sp)
    6ce4:	d9800317 	ldw	r6,12(sp)
    6ce8:	00800244 	movi	r2,9
    6cec:	11811436 	bltu	r2,r6,7140 <_dtoa_r+0x730>
    6cf0:	00800144 	movi	r2,5
    6cf4:	1184e10e 	bge	r2,r6,807c <_dtoa_r+0x166c>
    6cf8:	31bfff04 	addi	r6,r6,-4
    6cfc:	d9800315 	stw	r6,12(sp)
    6d00:	0023883a 	mov	r17,zero
    6d04:	d9800317 	ldw	r6,12(sp)
    6d08:	008000c4 	movi	r2,3
    6d0c:	30836726 	beq	r6,r2,7aac <_dtoa_r+0x109c>
    6d10:	1183410e 	bge	r2,r6,7a18 <_dtoa_r+0x1008>
    6d14:	d9c00317 	ldw	r7,12(sp)
    6d18:	00800104 	movi	r2,4
    6d1c:	38827c26 	beq	r7,r2,7710 <_dtoa_r+0xd00>
    6d20:	00800144 	movi	r2,5
    6d24:	3884c41e 	bne	r7,r2,8038 <_dtoa_r+0x1628>
    6d28:	00800044 	movi	r2,1
    6d2c:	d8800b15 	stw	r2,44(sp)
    6d30:	d8c00517 	ldw	r3,20(sp)
    6d34:	d9002217 	ldw	r4,136(sp)
    6d38:	1907883a 	add	r3,r3,r4
    6d3c:	19800044 	addi	r6,r3,1
    6d40:	d8c00c15 	stw	r3,48(sp)
    6d44:	d9800615 	stw	r6,24(sp)
    6d48:	0183a40e 	bge	zero,r6,7bdc <_dtoa_r+0x11cc>
    6d4c:	d9800617 	ldw	r6,24(sp)
    6d50:	3021883a 	mov	r16,r6
    6d54:	e0001115 	stw	zero,68(fp)
    6d58:	008005c4 	movi	r2,23
    6d5c:	1184c92e 	bgeu	r2,r6,8084 <_dtoa_r+0x1674>
    6d60:	00c00044 	movi	r3,1
    6d64:	00800104 	movi	r2,4
    6d68:	1085883a 	add	r2,r2,r2
    6d6c:	11000504 	addi	r4,r2,20
    6d70:	180b883a 	mov	r5,r3
    6d74:	18c00044 	addi	r3,r3,1
    6d78:	313ffb2e 	bgeu	r6,r4,6d68 <__alt_mem_onchip_memory+0xf7806d68>
    6d7c:	e1401115 	stw	r5,68(fp)
    6d80:	e009883a 	mov	r4,fp
    6d84:	000a1080 	call	a108 <_Balloc>
    6d88:	d8800715 	stw	r2,28(sp)
    6d8c:	e0801015 	stw	r2,64(fp)
    6d90:	00800384 	movi	r2,14
    6d94:	1400f736 	bltu	r2,r16,7174 <_dtoa_r+0x764>
    6d98:	8800f626 	beq	r17,zero,7174 <_dtoa_r+0x764>
    6d9c:	d9c00517 	ldw	r7,20(sp)
    6da0:	01c39a0e 	bge	zero,r7,7c0c <_dtoa_r+0x11fc>
    6da4:	388003cc 	andi	r2,r7,15
    6da8:	100490fa 	slli	r2,r2,3
    6dac:	382bd13a 	srai	r21,r7,4
    6db0:	00c00074 	movhi	r3,1
    6db4:	18c64104 	addi	r3,r3,6404
    6db8:	1885883a 	add	r2,r3,r2
    6dbc:	a8c0040c 	andi	r3,r21,16
    6dc0:	12400017 	ldw	r9,0(r2)
    6dc4:	12000117 	ldw	r8,4(r2)
    6dc8:	18037926 	beq	r3,zero,7bb0 <_dtoa_r+0x11a0>
    6dcc:	00800074 	movhi	r2,1
    6dd0:	10863704 	addi	r2,r2,6364
    6dd4:	11800817 	ldw	r6,32(r2)
    6dd8:	11c00917 	ldw	r7,36(r2)
    6ddc:	9009883a 	mov	r4,r18
    6de0:	980b883a 	mov	r5,r19
    6de4:	da001715 	stw	r8,92(sp)
    6de8:	da401615 	stw	r9,88(sp)
    6dec:	00021f80 	call	21f8 <__divdf3>
    6df0:	da001717 	ldw	r8,92(sp)
    6df4:	da401617 	ldw	r9,88(sp)
    6df8:	ad4003cc 	andi	r21,r21,15
    6dfc:	040000c4 	movi	r16,3
    6e00:	1023883a 	mov	r17,r2
    6e04:	1829883a 	mov	r20,r3
    6e08:	a8001126 	beq	r21,zero,6e50 <_dtoa_r+0x440>
    6e0c:	05c00074 	movhi	r23,1
    6e10:	bdc63704 	addi	r23,r23,6364
    6e14:	4805883a 	mov	r2,r9
    6e18:	4007883a 	mov	r3,r8
    6e1c:	a980004c 	andi	r6,r21,1
    6e20:	1009883a 	mov	r4,r2
    6e24:	a82bd07a 	srai	r21,r21,1
    6e28:	180b883a 	mov	r5,r3
    6e2c:	30000426 	beq	r6,zero,6e40 <_dtoa_r+0x430>
    6e30:	b9800017 	ldw	r6,0(r23)
    6e34:	b9c00117 	ldw	r7,4(r23)
    6e38:	84000044 	addi	r16,r16,1
    6e3c:	0002bd40 	call	2bd4 <__muldf3>
    6e40:	bdc00204 	addi	r23,r23,8
    6e44:	a83ff51e 	bne	r21,zero,6e1c <__alt_mem_onchip_memory+0xf7806e1c>
    6e48:	1013883a 	mov	r9,r2
    6e4c:	1811883a 	mov	r8,r3
    6e50:	480d883a 	mov	r6,r9
    6e54:	400f883a 	mov	r7,r8
    6e58:	8809883a 	mov	r4,r17
    6e5c:	a00b883a 	mov	r5,r20
    6e60:	00021f80 	call	21f8 <__divdf3>
    6e64:	d8800f15 	stw	r2,60(sp)
    6e68:	d8c01015 	stw	r3,64(sp)
    6e6c:	d8c00e17 	ldw	r3,56(sp)
    6e70:	18000626 	beq	r3,zero,6e8c <_dtoa_r+0x47c>
    6e74:	d9000f17 	ldw	r4,60(sp)
    6e78:	d9401017 	ldw	r5,64(sp)
    6e7c:	000d883a 	mov	r6,zero
    6e80:	01cffc34 	movhi	r7,16368
    6e84:	0002ae00 	call	2ae0 <__ledf2>
    6e88:	10040b16 	blt	r2,zero,7eb8 <_dtoa_r+0x14a8>
    6e8c:	8009883a 	mov	r4,r16
    6e90:	000e6ac0 	call	e6ac <__floatsidf>
    6e94:	d9800f17 	ldw	r6,60(sp)
    6e98:	d9c01017 	ldw	r7,64(sp)
    6e9c:	1009883a 	mov	r4,r2
    6ea0:	180b883a 	mov	r5,r3
    6ea4:	0002bd40 	call	2bd4 <__muldf3>
    6ea8:	000d883a 	mov	r6,zero
    6eac:	01d00734 	movhi	r7,16412
    6eb0:	1009883a 	mov	r4,r2
    6eb4:	180b883a 	mov	r5,r3
    6eb8:	000194c0 	call	194c <__adddf3>
    6ebc:	1021883a 	mov	r16,r2
    6ec0:	d8800617 	ldw	r2,24(sp)
    6ec4:	047f3034 	movhi	r17,64704
    6ec8:	1c63883a 	add	r17,r3,r17
    6ecc:	10031826 	beq	r2,zero,7b30 <_dtoa_r+0x1120>
    6ed0:	d8c00517 	ldw	r3,20(sp)
    6ed4:	db000617 	ldw	r12,24(sp)
    6ed8:	d8c01315 	stw	r3,76(sp)
    6edc:	d9000b17 	ldw	r4,44(sp)
    6ee0:	20038f26 	beq	r4,zero,7d20 <_dtoa_r+0x1310>
    6ee4:	60bfffc4 	addi	r2,r12,-1
    6ee8:	100490fa 	slli	r2,r2,3
    6eec:	00c00074 	movhi	r3,1
    6ef0:	18c64104 	addi	r3,r3,6404
    6ef4:	1885883a 	add	r2,r3,r2
    6ef8:	11800017 	ldw	r6,0(r2)
    6efc:	11c00117 	ldw	r7,4(r2)
    6f00:	d8800717 	ldw	r2,28(sp)
    6f04:	0009883a 	mov	r4,zero
    6f08:	014ff834 	movhi	r5,16352
    6f0c:	db001615 	stw	r12,88(sp)
    6f10:	15c00044 	addi	r23,r2,1
    6f14:	00021f80 	call	21f8 <__divdf3>
    6f18:	800d883a 	mov	r6,r16
    6f1c:	880f883a 	mov	r7,r17
    6f20:	1009883a 	mov	r4,r2
    6f24:	180b883a 	mov	r5,r3
    6f28:	00032ec0 	call	32ec <__subdf3>
    6f2c:	d9401017 	ldw	r5,64(sp)
    6f30:	d9000f17 	ldw	r4,60(sp)
    6f34:	102b883a 	mov	r21,r2
    6f38:	d8c01215 	stw	r3,72(sp)
    6f3c:	000e62c0 	call	e62c <__fixdfsi>
    6f40:	1009883a 	mov	r4,r2
    6f44:	1029883a 	mov	r20,r2
    6f48:	000e6ac0 	call	e6ac <__floatsidf>
    6f4c:	d9000f17 	ldw	r4,60(sp)
    6f50:	d9401017 	ldw	r5,64(sp)
    6f54:	100d883a 	mov	r6,r2
    6f58:	180f883a 	mov	r7,r3
    6f5c:	00032ec0 	call	32ec <__subdf3>
    6f60:	1823883a 	mov	r17,r3
    6f64:	d8c00717 	ldw	r3,28(sp)
    6f68:	d9401217 	ldw	r5,72(sp)
    6f6c:	a2000c04 	addi	r8,r20,48
    6f70:	1021883a 	mov	r16,r2
    6f74:	1a000005 	stb	r8,0(r3)
    6f78:	800d883a 	mov	r6,r16
    6f7c:	880f883a 	mov	r7,r17
    6f80:	a809883a 	mov	r4,r21
    6f84:	4029883a 	mov	r20,r8
    6f88:	000e5500 	call	e550 <__gedf2>
    6f8c:	00841d16 	blt	zero,r2,8004 <_dtoa_r+0x15f4>
    6f90:	800d883a 	mov	r6,r16
    6f94:	880f883a 	mov	r7,r17
    6f98:	0009883a 	mov	r4,zero
    6f9c:	014ffc34 	movhi	r5,16368
    6fa0:	00032ec0 	call	32ec <__subdf3>
    6fa4:	d9401217 	ldw	r5,72(sp)
    6fa8:	100d883a 	mov	r6,r2
    6fac:	180f883a 	mov	r7,r3
    6fb0:	a809883a 	mov	r4,r21
    6fb4:	000e5500 	call	e550 <__gedf2>
    6fb8:	db001617 	ldw	r12,88(sp)
    6fbc:	00840e16 	blt	zero,r2,7ff8 <_dtoa_r+0x15e8>
    6fc0:	00800044 	movi	r2,1
    6fc4:	13006b0e 	bge	r2,r12,7174 <_dtoa_r+0x764>
    6fc8:	d9000717 	ldw	r4,28(sp)
    6fcc:	dd800f15 	stw	r22,60(sp)
    6fd0:	dcc01015 	stw	r19,64(sp)
    6fd4:	2319883a 	add	r12,r4,r12
    6fd8:	dcc01217 	ldw	r19,72(sp)
    6fdc:	602d883a 	mov	r22,r12
    6fe0:	dc801215 	stw	r18,72(sp)
    6fe4:	b825883a 	mov	r18,r23
    6fe8:	00000906 	br	7010 <_dtoa_r+0x600>
    6fec:	00032ec0 	call	32ec <__subdf3>
    6ff0:	a80d883a 	mov	r6,r21
    6ff4:	980f883a 	mov	r7,r19
    6ff8:	1009883a 	mov	r4,r2
    6ffc:	180b883a 	mov	r5,r3
    7000:	0002ae00 	call	2ae0 <__ledf2>
    7004:	1003e816 	blt	r2,zero,7fa8 <_dtoa_r+0x1598>
    7008:	b825883a 	mov	r18,r23
    700c:	bd83e926 	beq	r23,r22,7fb4 <_dtoa_r+0x15a4>
    7010:	a809883a 	mov	r4,r21
    7014:	980b883a 	mov	r5,r19
    7018:	000d883a 	mov	r6,zero
    701c:	01d00934 	movhi	r7,16420
    7020:	0002bd40 	call	2bd4 <__muldf3>
    7024:	000d883a 	mov	r6,zero
    7028:	01d00934 	movhi	r7,16420
    702c:	8009883a 	mov	r4,r16
    7030:	880b883a 	mov	r5,r17
    7034:	102b883a 	mov	r21,r2
    7038:	1827883a 	mov	r19,r3
    703c:	0002bd40 	call	2bd4 <__muldf3>
    7040:	180b883a 	mov	r5,r3
    7044:	1009883a 	mov	r4,r2
    7048:	1821883a 	mov	r16,r3
    704c:	1023883a 	mov	r17,r2
    7050:	000e62c0 	call	e62c <__fixdfsi>
    7054:	1009883a 	mov	r4,r2
    7058:	1029883a 	mov	r20,r2
    705c:	000e6ac0 	call	e6ac <__floatsidf>
    7060:	8809883a 	mov	r4,r17
    7064:	800b883a 	mov	r5,r16
    7068:	100d883a 	mov	r6,r2
    706c:	180f883a 	mov	r7,r3
    7070:	00032ec0 	call	32ec <__subdf3>
    7074:	a5000c04 	addi	r20,r20,48
    7078:	a80d883a 	mov	r6,r21
    707c:	980f883a 	mov	r7,r19
    7080:	1009883a 	mov	r4,r2
    7084:	180b883a 	mov	r5,r3
    7088:	95000005 	stb	r20,0(r18)
    708c:	1021883a 	mov	r16,r2
    7090:	1823883a 	mov	r17,r3
    7094:	0002ae00 	call	2ae0 <__ledf2>
    7098:	bdc00044 	addi	r23,r23,1
    709c:	800d883a 	mov	r6,r16
    70a0:	880f883a 	mov	r7,r17
    70a4:	0009883a 	mov	r4,zero
    70a8:	014ffc34 	movhi	r5,16368
    70ac:	103fcf0e 	bge	r2,zero,6fec <__alt_mem_onchip_memory+0xf7806fec>
    70b0:	d8c01317 	ldw	r3,76(sp)
    70b4:	d8c00515 	stw	r3,20(sp)
    70b8:	d9400917 	ldw	r5,36(sp)
    70bc:	e009883a 	mov	r4,fp
    70c0:	000a1b00 	call	a1b0 <_Bfree>
    70c4:	d9000517 	ldw	r4,20(sp)
    70c8:	d9802317 	ldw	r6,140(sp)
    70cc:	d9c02517 	ldw	r7,148(sp)
    70d0:	b8000005 	stb	zero,0(r23)
    70d4:	20800044 	addi	r2,r4,1
    70d8:	30800015 	stw	r2,0(r6)
    70dc:	3802aa26 	beq	r7,zero,7b88 <_dtoa_r+0x1178>
    70e0:	3dc00015 	stw	r23,0(r7)
    70e4:	d8800717 	ldw	r2,28(sp)
    70e8:	003e7906 	br	6ad0 <__alt_mem_onchip_memory+0xf7806ad0>
    70ec:	00800434 	movhi	r2,16
    70f0:	10bfffc4 	addi	r2,r2,-1
    70f4:	88a2703a 	and	r17,r17,r2
    70f8:	883e851e 	bne	r17,zero,6b10 <__alt_mem_onchip_memory+0xf7806b10>
    70fc:	00800074 	movhi	r2,1
    7100:	10862304 	addi	r2,r2,6284
    7104:	003e8406 	br	6b18 <__alt_mem_onchip_memory+0xf7806b18>
    7108:	10c00204 	addi	r3,r2,8
    710c:	003e8706 	br	6b2c <__alt_mem_onchip_memory+0xf7806b2c>
    7110:	01400434 	movhi	r5,16
    7114:	297fffc4 	addi	r5,r5,-1
    7118:	994a703a 	and	r5,r19,r5
    711c:	9009883a 	mov	r4,r18
    7120:	843f0044 	addi	r16,r16,-1023
    7124:	294ffc34 	orhi	r5,r5,16368
    7128:	dd800217 	ldw	r22,8(sp)
    712c:	d8001115 	stw	zero,68(sp)
    7130:	003ea506 	br	6bc8 <__alt_mem_onchip_memory+0xf7806bc8>
    7134:	00800074 	movhi	r2,1
    7138:	10861a04 	addi	r2,r2,6248
    713c:	003e6406 	br	6ad0 <__alt_mem_onchip_memory+0xf7806ad0>
    7140:	e0001115 	stw	zero,68(fp)
    7144:	000b883a 	mov	r5,zero
    7148:	e009883a 	mov	r4,fp
    714c:	000a1080 	call	a108 <_Balloc>
    7150:	01bfffc4 	movi	r6,-1
    7154:	01c00044 	movi	r7,1
    7158:	d8800715 	stw	r2,28(sp)
    715c:	d9800c15 	stw	r6,48(sp)
    7160:	e0801015 	stw	r2,64(fp)
    7164:	d8000315 	stw	zero,12(sp)
    7168:	d9c00b15 	stw	r7,44(sp)
    716c:	d9800615 	stw	r6,24(sp)
    7170:	d8002215 	stw	zero,136(sp)
    7174:	d8800117 	ldw	r2,4(sp)
    7178:	10008916 	blt	r2,zero,73a0 <_dtoa_r+0x990>
    717c:	d9000517 	ldw	r4,20(sp)
    7180:	00c00384 	movi	r3,14
    7184:	19008616 	blt	r3,r4,73a0 <_dtoa_r+0x990>
    7188:	200490fa 	slli	r2,r4,3
    718c:	00c00074 	movhi	r3,1
    7190:	d9802217 	ldw	r6,136(sp)
    7194:	18c64104 	addi	r3,r3,6404
    7198:	1885883a 	add	r2,r3,r2
    719c:	14000017 	ldw	r16,0(r2)
    71a0:	14400117 	ldw	r17,4(r2)
    71a4:	30016316 	blt	r6,zero,7734 <_dtoa_r+0xd24>
    71a8:	800d883a 	mov	r6,r16
    71ac:	880f883a 	mov	r7,r17
    71b0:	9009883a 	mov	r4,r18
    71b4:	980b883a 	mov	r5,r19
    71b8:	00021f80 	call	21f8 <__divdf3>
    71bc:	180b883a 	mov	r5,r3
    71c0:	1009883a 	mov	r4,r2
    71c4:	000e62c0 	call	e62c <__fixdfsi>
    71c8:	1009883a 	mov	r4,r2
    71cc:	102b883a 	mov	r21,r2
    71d0:	000e6ac0 	call	e6ac <__floatsidf>
    71d4:	800d883a 	mov	r6,r16
    71d8:	880f883a 	mov	r7,r17
    71dc:	1009883a 	mov	r4,r2
    71e0:	180b883a 	mov	r5,r3
    71e4:	0002bd40 	call	2bd4 <__muldf3>
    71e8:	100d883a 	mov	r6,r2
    71ec:	180f883a 	mov	r7,r3
    71f0:	9009883a 	mov	r4,r18
    71f4:	980b883a 	mov	r5,r19
    71f8:	00032ec0 	call	32ec <__subdf3>
    71fc:	d9c00717 	ldw	r7,28(sp)
    7200:	1009883a 	mov	r4,r2
    7204:	a8800c04 	addi	r2,r21,48
    7208:	38800005 	stb	r2,0(r7)
    720c:	3dc00044 	addi	r23,r7,1
    7210:	d9c00617 	ldw	r7,24(sp)
    7214:	01800044 	movi	r6,1
    7218:	180b883a 	mov	r5,r3
    721c:	2005883a 	mov	r2,r4
    7220:	39803826 	beq	r7,r6,7304 <_dtoa_r+0x8f4>
    7224:	000d883a 	mov	r6,zero
    7228:	01d00934 	movhi	r7,16420
    722c:	0002bd40 	call	2bd4 <__muldf3>
    7230:	000d883a 	mov	r6,zero
    7234:	000f883a 	mov	r7,zero
    7238:	1009883a 	mov	r4,r2
    723c:	180b883a 	mov	r5,r3
    7240:	1025883a 	mov	r18,r2
    7244:	1827883a 	mov	r19,r3
    7248:	000e4c80 	call	e4c8 <__eqdf2>
    724c:	103f9a26 	beq	r2,zero,70b8 <__alt_mem_onchip_memory+0xf78070b8>
    7250:	d9c00617 	ldw	r7,24(sp)
    7254:	d8c00717 	ldw	r3,28(sp)
    7258:	b829883a 	mov	r20,r23
    725c:	38bfffc4 	addi	r2,r7,-1
    7260:	18ad883a 	add	r22,r3,r2
    7264:	00000a06 	br	7290 <_dtoa_r+0x880>
    7268:	0002bd40 	call	2bd4 <__muldf3>
    726c:	000d883a 	mov	r6,zero
    7270:	000f883a 	mov	r7,zero
    7274:	1009883a 	mov	r4,r2
    7278:	180b883a 	mov	r5,r3
    727c:	1025883a 	mov	r18,r2
    7280:	1827883a 	mov	r19,r3
    7284:	b829883a 	mov	r20,r23
    7288:	000e4c80 	call	e4c8 <__eqdf2>
    728c:	103f8a26 	beq	r2,zero,70b8 <__alt_mem_onchip_memory+0xf78070b8>
    7290:	800d883a 	mov	r6,r16
    7294:	880f883a 	mov	r7,r17
    7298:	9009883a 	mov	r4,r18
    729c:	980b883a 	mov	r5,r19
    72a0:	00021f80 	call	21f8 <__divdf3>
    72a4:	180b883a 	mov	r5,r3
    72a8:	1009883a 	mov	r4,r2
    72ac:	000e62c0 	call	e62c <__fixdfsi>
    72b0:	1009883a 	mov	r4,r2
    72b4:	102b883a 	mov	r21,r2
    72b8:	000e6ac0 	call	e6ac <__floatsidf>
    72bc:	800d883a 	mov	r6,r16
    72c0:	880f883a 	mov	r7,r17
    72c4:	1009883a 	mov	r4,r2
    72c8:	180b883a 	mov	r5,r3
    72cc:	0002bd40 	call	2bd4 <__muldf3>
    72d0:	100d883a 	mov	r6,r2
    72d4:	180f883a 	mov	r7,r3
    72d8:	9009883a 	mov	r4,r18
    72dc:	980b883a 	mov	r5,r19
    72e0:	00032ec0 	call	32ec <__subdf3>
    72e4:	aa000c04 	addi	r8,r21,48
    72e8:	a2000005 	stb	r8,0(r20)
    72ec:	000d883a 	mov	r6,zero
    72f0:	01d00934 	movhi	r7,16420
    72f4:	1009883a 	mov	r4,r2
    72f8:	180b883a 	mov	r5,r3
    72fc:	a5c00044 	addi	r23,r20,1
    7300:	b53fd91e 	bne	r22,r20,7268 <__alt_mem_onchip_memory+0xf7807268>
    7304:	100d883a 	mov	r6,r2
    7308:	180f883a 	mov	r7,r3
    730c:	1009883a 	mov	r4,r2
    7310:	180b883a 	mov	r5,r3
    7314:	000194c0 	call	194c <__adddf3>
    7318:	100d883a 	mov	r6,r2
    731c:	180f883a 	mov	r7,r3
    7320:	8009883a 	mov	r4,r16
    7324:	880b883a 	mov	r5,r17
    7328:	1027883a 	mov	r19,r2
    732c:	1825883a 	mov	r18,r3
    7330:	0002ae00 	call	2ae0 <__ledf2>
    7334:	10000816 	blt	r2,zero,7358 <_dtoa_r+0x948>
    7338:	980d883a 	mov	r6,r19
    733c:	900f883a 	mov	r7,r18
    7340:	8009883a 	mov	r4,r16
    7344:	880b883a 	mov	r5,r17
    7348:	000e4c80 	call	e4c8 <__eqdf2>
    734c:	103f5a1e 	bne	r2,zero,70b8 <__alt_mem_onchip_memory+0xf78070b8>
    7350:	ad40004c 	andi	r21,r21,1
    7354:	a83f5826 	beq	r21,zero,70b8 <__alt_mem_onchip_memory+0xf78070b8>
    7358:	bd3fffc3 	ldbu	r20,-1(r23)
    735c:	b8bfffc4 	addi	r2,r23,-1
    7360:	1007883a 	mov	r3,r2
    7364:	01400e44 	movi	r5,57
    7368:	d9800717 	ldw	r6,28(sp)
    736c:	00000506 	br	7384 <_dtoa_r+0x974>
    7370:	18ffffc4 	addi	r3,r3,-1
    7374:	11824726 	beq	r2,r6,7c94 <_dtoa_r+0x1284>
    7378:	1d000003 	ldbu	r20,0(r3)
    737c:	102f883a 	mov	r23,r2
    7380:	10bfffc4 	addi	r2,r2,-1
    7384:	a1003fcc 	andi	r4,r20,255
    7388:	2100201c 	xori	r4,r4,128
    738c:	213fe004 	addi	r4,r4,-128
    7390:	217ff726 	beq	r4,r5,7370 <__alt_mem_onchip_memory+0xf7807370>
    7394:	a2000044 	addi	r8,r20,1
    7398:	12000005 	stb	r8,0(r2)
    739c:	003f4606 	br	70b8 <__alt_mem_onchip_memory+0xf78070b8>
    73a0:	d9000b17 	ldw	r4,44(sp)
    73a4:	2000c826 	beq	r4,zero,76c8 <_dtoa_r+0xcb8>
    73a8:	d9800317 	ldw	r6,12(sp)
    73ac:	00c00044 	movi	r3,1
    73b0:	1980f90e 	bge	r3,r6,7798 <_dtoa_r+0xd88>
    73b4:	d8800617 	ldw	r2,24(sp)
    73b8:	d8c00a17 	ldw	r3,40(sp)
    73bc:	157fffc4 	addi	r21,r2,-1
    73c0:	1d41f316 	blt	r3,r21,7b90 <_dtoa_r+0x1180>
    73c4:	1d6bc83a 	sub	r21,r3,r21
    73c8:	d9c00617 	ldw	r7,24(sp)
    73cc:	3802aa16 	blt	r7,zero,7e78 <_dtoa_r+0x1468>
    73d0:	dd000817 	ldw	r20,32(sp)
    73d4:	d8800617 	ldw	r2,24(sp)
    73d8:	d8c00817 	ldw	r3,32(sp)
    73dc:	01400044 	movi	r5,1
    73e0:	e009883a 	mov	r4,fp
    73e4:	1887883a 	add	r3,r3,r2
    73e8:	d8c00815 	stw	r3,32(sp)
    73ec:	b0ad883a 	add	r22,r22,r2
    73f0:	000a5140 	call	a514 <__i2b>
    73f4:	1023883a 	mov	r17,r2
    73f8:	a0000826 	beq	r20,zero,741c <_dtoa_r+0xa0c>
    73fc:	0580070e 	bge	zero,r22,741c <_dtoa_r+0xa0c>
    7400:	a005883a 	mov	r2,r20
    7404:	b500b916 	blt	r22,r20,76ec <_dtoa_r+0xcdc>
    7408:	d9000817 	ldw	r4,32(sp)
    740c:	a0a9c83a 	sub	r20,r20,r2
    7410:	b0adc83a 	sub	r22,r22,r2
    7414:	2089c83a 	sub	r4,r4,r2
    7418:	d9000815 	stw	r4,32(sp)
    741c:	d9800a17 	ldw	r6,40(sp)
    7420:	0181810e 	bge	zero,r6,7a28 <_dtoa_r+0x1018>
    7424:	d9c00b17 	ldw	r7,44(sp)
    7428:	3800b326 	beq	r7,zero,76f8 <_dtoa_r+0xce8>
    742c:	a800b226 	beq	r21,zero,76f8 <_dtoa_r+0xce8>
    7430:	880b883a 	mov	r5,r17
    7434:	a80d883a 	mov	r6,r21
    7438:	e009883a 	mov	r4,fp
    743c:	000a7480 	call	a748 <__pow5mult>
    7440:	d9800917 	ldw	r6,36(sp)
    7444:	100b883a 	mov	r5,r2
    7448:	e009883a 	mov	r4,fp
    744c:	1023883a 	mov	r17,r2
    7450:	000a5500 	call	a550 <__multiply>
    7454:	1021883a 	mov	r16,r2
    7458:	d8800a17 	ldw	r2,40(sp)
    745c:	d9400917 	ldw	r5,36(sp)
    7460:	e009883a 	mov	r4,fp
    7464:	1545c83a 	sub	r2,r2,r21
    7468:	d8800a15 	stw	r2,40(sp)
    746c:	000a1b00 	call	a1b0 <_Bfree>
    7470:	d8c00a17 	ldw	r3,40(sp)
    7474:	18009f1e 	bne	r3,zero,76f4 <_dtoa_r+0xce4>
    7478:	05c00044 	movi	r23,1
    747c:	e009883a 	mov	r4,fp
    7480:	b80b883a 	mov	r5,r23
    7484:	000a5140 	call	a514 <__i2b>
    7488:	d9000d17 	ldw	r4,52(sp)
    748c:	102b883a 	mov	r21,r2
    7490:	2000ce26 	beq	r4,zero,77cc <_dtoa_r+0xdbc>
    7494:	200d883a 	mov	r6,r4
    7498:	100b883a 	mov	r5,r2
    749c:	e009883a 	mov	r4,fp
    74a0:	000a7480 	call	a748 <__pow5mult>
    74a4:	d9800317 	ldw	r6,12(sp)
    74a8:	102b883a 	mov	r21,r2
    74ac:	b981810e 	bge	r23,r6,7ab4 <_dtoa_r+0x10a4>
    74b0:	0027883a 	mov	r19,zero
    74b4:	a8800417 	ldw	r2,16(r21)
    74b8:	05c00804 	movi	r23,32
    74bc:	10800104 	addi	r2,r2,4
    74c0:	1085883a 	add	r2,r2,r2
    74c4:	1085883a 	add	r2,r2,r2
    74c8:	a885883a 	add	r2,r21,r2
    74cc:	11000017 	ldw	r4,0(r2)
    74d0:	000a3fc0 	call	a3fc <__hi0bits>
    74d4:	b885c83a 	sub	r2,r23,r2
    74d8:	1585883a 	add	r2,r2,r22
    74dc:	108007cc 	andi	r2,r2,31
    74e0:	1000b326 	beq	r2,zero,77b0 <_dtoa_r+0xda0>
    74e4:	00c00804 	movi	r3,32
    74e8:	1887c83a 	sub	r3,r3,r2
    74ec:	01000104 	movi	r4,4
    74f0:	20c2cd0e 	bge	r4,r3,8028 <_dtoa_r+0x1618>
    74f4:	00c00704 	movi	r3,28
    74f8:	1885c83a 	sub	r2,r3,r2
    74fc:	d8c00817 	ldw	r3,32(sp)
    7500:	a0a9883a 	add	r20,r20,r2
    7504:	b0ad883a 	add	r22,r22,r2
    7508:	1887883a 	add	r3,r3,r2
    750c:	d8c00815 	stw	r3,32(sp)
    7510:	d9800817 	ldw	r6,32(sp)
    7514:	0180040e 	bge	zero,r6,7528 <_dtoa_r+0xb18>
    7518:	800b883a 	mov	r5,r16
    751c:	e009883a 	mov	r4,fp
    7520:	000a8880 	call	a888 <__lshift>
    7524:	1021883a 	mov	r16,r2
    7528:	0580050e 	bge	zero,r22,7540 <_dtoa_r+0xb30>
    752c:	a80b883a 	mov	r5,r21
    7530:	b00d883a 	mov	r6,r22
    7534:	e009883a 	mov	r4,fp
    7538:	000a8880 	call	a888 <__lshift>
    753c:	102b883a 	mov	r21,r2
    7540:	d9c00e17 	ldw	r7,56(sp)
    7544:	3801211e 	bne	r7,zero,79cc <_dtoa_r+0xfbc>
    7548:	d9800617 	ldw	r6,24(sp)
    754c:	0181380e 	bge	zero,r6,7a30 <_dtoa_r+0x1020>
    7550:	d8c00b17 	ldw	r3,44(sp)
    7554:	1800ab1e 	bne	r3,zero,7804 <_dtoa_r+0xdf4>
    7558:	dc800717 	ldw	r18,28(sp)
    755c:	dcc00617 	ldw	r19,24(sp)
    7560:	9029883a 	mov	r20,r18
    7564:	00000206 	br	7570 <_dtoa_r+0xb60>
    7568:	000a1d80 	call	a1d8 <__multadd>
    756c:	1021883a 	mov	r16,r2
    7570:	a80b883a 	mov	r5,r21
    7574:	8009883a 	mov	r4,r16
    7578:	00068100 	call	6810 <quorem>
    757c:	10800c04 	addi	r2,r2,48
    7580:	90800005 	stb	r2,0(r18)
    7584:	94800044 	addi	r18,r18,1
    7588:	9507c83a 	sub	r3,r18,r20
    758c:	000f883a 	mov	r7,zero
    7590:	01800284 	movi	r6,10
    7594:	800b883a 	mov	r5,r16
    7598:	e009883a 	mov	r4,fp
    759c:	1cfff216 	blt	r3,r19,7568 <__alt_mem_onchip_memory+0xf7807568>
    75a0:	1011883a 	mov	r8,r2
    75a4:	d8800617 	ldw	r2,24(sp)
    75a8:	0082370e 	bge	zero,r2,7e88 <_dtoa_r+0x1478>
    75ac:	d9000717 	ldw	r4,28(sp)
    75b0:	0025883a 	mov	r18,zero
    75b4:	20af883a 	add	r23,r4,r2
    75b8:	01800044 	movi	r6,1
    75bc:	800b883a 	mov	r5,r16
    75c0:	e009883a 	mov	r4,fp
    75c4:	da001715 	stw	r8,92(sp)
    75c8:	000a8880 	call	a888 <__lshift>
    75cc:	a80b883a 	mov	r5,r21
    75d0:	1009883a 	mov	r4,r2
    75d4:	d8800915 	stw	r2,36(sp)
    75d8:	000a9d00 	call	a9d0 <__mcmp>
    75dc:	da001717 	ldw	r8,92(sp)
    75e0:	0081800e 	bge	zero,r2,7be4 <_dtoa_r+0x11d4>
    75e4:	b93fffc3 	ldbu	r4,-1(r23)
    75e8:	b8bfffc4 	addi	r2,r23,-1
    75ec:	1007883a 	mov	r3,r2
    75f0:	01800e44 	movi	r6,57
    75f4:	d9c00717 	ldw	r7,28(sp)
    75f8:	00000506 	br	7610 <_dtoa_r+0xc00>
    75fc:	18ffffc4 	addi	r3,r3,-1
    7600:	11c12326 	beq	r2,r7,7a90 <_dtoa_r+0x1080>
    7604:	19000003 	ldbu	r4,0(r3)
    7608:	102f883a 	mov	r23,r2
    760c:	10bfffc4 	addi	r2,r2,-1
    7610:	21403fcc 	andi	r5,r4,255
    7614:	2940201c 	xori	r5,r5,128
    7618:	297fe004 	addi	r5,r5,-128
    761c:	29bff726 	beq	r5,r6,75fc <__alt_mem_onchip_memory+0xf78075fc>
    7620:	21000044 	addi	r4,r4,1
    7624:	11000005 	stb	r4,0(r2)
    7628:	a80b883a 	mov	r5,r21
    762c:	e009883a 	mov	r4,fp
    7630:	000a1b00 	call	a1b0 <_Bfree>
    7634:	883ea026 	beq	r17,zero,70b8 <__alt_mem_onchip_memory+0xf78070b8>
    7638:	90000426 	beq	r18,zero,764c <_dtoa_r+0xc3c>
    763c:	94400326 	beq	r18,r17,764c <_dtoa_r+0xc3c>
    7640:	900b883a 	mov	r5,r18
    7644:	e009883a 	mov	r4,fp
    7648:	000a1b00 	call	a1b0 <_Bfree>
    764c:	880b883a 	mov	r5,r17
    7650:	e009883a 	mov	r4,fp
    7654:	000a1b00 	call	a1b0 <_Bfree>
    7658:	003e9706 	br	70b8 <__alt_mem_onchip_memory+0xf78070b8>
    765c:	01800044 	movi	r6,1
    7660:	d9800e15 	stw	r6,56(sp)
    7664:	003d9606 	br	6cc0 <__alt_mem_onchip_memory+0xf7806cc0>
    7668:	d8800817 	ldw	r2,32(sp)
    766c:	d8c00517 	ldw	r3,20(sp)
    7670:	d8000d15 	stw	zero,52(sp)
    7674:	10c5c83a 	sub	r2,r2,r3
    7678:	00c9c83a 	sub	r4,zero,r3
    767c:	d8800815 	stw	r2,32(sp)
    7680:	d9000a15 	stw	r4,40(sp)
    7684:	003d9706 	br	6ce4 <__alt_mem_onchip_memory+0xf7806ce4>
    7688:	05adc83a 	sub	r22,zero,r22
    768c:	dd800815 	stw	r22,32(sp)
    7690:	002d883a 	mov	r22,zero
    7694:	003d8e06 	br	6cd0 <__alt_mem_onchip_memory+0xf7806cd0>
    7698:	d9000517 	ldw	r4,20(sp)
    769c:	000e6ac0 	call	e6ac <__floatsidf>
    76a0:	100d883a 	mov	r6,r2
    76a4:	180f883a 	mov	r7,r3
    76a8:	a009883a 	mov	r4,r20
    76ac:	880b883a 	mov	r5,r17
    76b0:	000e4c80 	call	e4c8 <__eqdf2>
    76b4:	103d7126 	beq	r2,zero,6c7c <__alt_mem_onchip_memory+0xf7806c7c>
    76b8:	d9c00517 	ldw	r7,20(sp)
    76bc:	39ffffc4 	addi	r7,r7,-1
    76c0:	d9c00515 	stw	r7,20(sp)
    76c4:	003d6d06 	br	6c7c <__alt_mem_onchip_memory+0xf7806c7c>
    76c8:	dd400a17 	ldw	r21,40(sp)
    76cc:	dd000817 	ldw	r20,32(sp)
    76d0:	0023883a 	mov	r17,zero
    76d4:	003f4806 	br	73f8 <__alt_mem_onchip_memory+0xf78073f8>
    76d8:	10e3c83a 	sub	r17,r2,r3
    76dc:	9448983a 	sll	r4,r18,r17
    76e0:	003d3206 	br	6bac <__alt_mem_onchip_memory+0xf7806bac>
    76e4:	d8000e15 	stw	zero,56(sp)
    76e8:	003d7506 	br	6cc0 <__alt_mem_onchip_memory+0xf7806cc0>
    76ec:	b005883a 	mov	r2,r22
    76f0:	003f4506 	br	7408 <__alt_mem_onchip_memory+0xf7807408>
    76f4:	dc000915 	stw	r16,36(sp)
    76f8:	d9800a17 	ldw	r6,40(sp)
    76fc:	d9400917 	ldw	r5,36(sp)
    7700:	e009883a 	mov	r4,fp
    7704:	000a7480 	call	a748 <__pow5mult>
    7708:	1021883a 	mov	r16,r2
    770c:	003f5a06 	br	7478 <__alt_mem_onchip_memory+0xf7807478>
    7710:	01c00044 	movi	r7,1
    7714:	d9c00b15 	stw	r7,44(sp)
    7718:	d8802217 	ldw	r2,136(sp)
    771c:	0081280e 	bge	zero,r2,7bc0 <_dtoa_r+0x11b0>
    7720:	100d883a 	mov	r6,r2
    7724:	1021883a 	mov	r16,r2
    7728:	d8800c15 	stw	r2,48(sp)
    772c:	d8800615 	stw	r2,24(sp)
    7730:	003d8806 	br	6d54 <__alt_mem_onchip_memory+0xf7806d54>
    7734:	d8800617 	ldw	r2,24(sp)
    7738:	00be9b16 	blt	zero,r2,71a8 <__alt_mem_onchip_memory+0xf78071a8>
    773c:	10010f1e 	bne	r2,zero,7b7c <_dtoa_r+0x116c>
    7740:	880b883a 	mov	r5,r17
    7744:	000d883a 	mov	r6,zero
    7748:	01d00534 	movhi	r7,16404
    774c:	8009883a 	mov	r4,r16
    7750:	0002bd40 	call	2bd4 <__muldf3>
    7754:	900d883a 	mov	r6,r18
    7758:	980f883a 	mov	r7,r19
    775c:	1009883a 	mov	r4,r2
    7760:	180b883a 	mov	r5,r3
    7764:	000e5500 	call	e550 <__gedf2>
    7768:	002b883a 	mov	r21,zero
    776c:	0023883a 	mov	r17,zero
    7770:	1000bf16 	blt	r2,zero,7a70 <_dtoa_r+0x1060>
    7774:	d9802217 	ldw	r6,136(sp)
    7778:	ddc00717 	ldw	r23,28(sp)
    777c:	018c303a 	nor	r6,zero,r6
    7780:	d9800515 	stw	r6,20(sp)
    7784:	a80b883a 	mov	r5,r21
    7788:	e009883a 	mov	r4,fp
    778c:	000a1b00 	call	a1b0 <_Bfree>
    7790:	883e4926 	beq	r17,zero,70b8 <__alt_mem_onchip_memory+0xf78070b8>
    7794:	003fad06 	br	764c <__alt_mem_onchip_memory+0xf780764c>
    7798:	d9c01117 	ldw	r7,68(sp)
    779c:	3801bc26 	beq	r7,zero,7e90 <_dtoa_r+0x1480>
    77a0:	10810cc4 	addi	r2,r2,1075
    77a4:	dd400a17 	ldw	r21,40(sp)
    77a8:	dd000817 	ldw	r20,32(sp)
    77ac:	003f0a06 	br	73d8 <__alt_mem_onchip_memory+0xf78073d8>
    77b0:	00800704 	movi	r2,28
    77b4:	d9000817 	ldw	r4,32(sp)
    77b8:	a0a9883a 	add	r20,r20,r2
    77bc:	b0ad883a 	add	r22,r22,r2
    77c0:	2089883a 	add	r4,r4,r2
    77c4:	d9000815 	stw	r4,32(sp)
    77c8:	003f5106 	br	7510 <__alt_mem_onchip_memory+0xf7807510>
    77cc:	d8c00317 	ldw	r3,12(sp)
    77d0:	b8c1fc0e 	bge	r23,r3,7fc4 <_dtoa_r+0x15b4>
    77d4:	0027883a 	mov	r19,zero
    77d8:	b805883a 	mov	r2,r23
    77dc:	003f3e06 	br	74d8 <__alt_mem_onchip_memory+0xf78074d8>
    77e0:	880b883a 	mov	r5,r17
    77e4:	e009883a 	mov	r4,fp
    77e8:	000f883a 	mov	r7,zero
    77ec:	01800284 	movi	r6,10
    77f0:	000a1d80 	call	a1d8 <__multadd>
    77f4:	d9000c17 	ldw	r4,48(sp)
    77f8:	1023883a 	mov	r17,r2
    77fc:	0102040e 	bge	zero,r4,8010 <_dtoa_r+0x1600>
    7800:	d9000615 	stw	r4,24(sp)
    7804:	0500050e 	bge	zero,r20,781c <_dtoa_r+0xe0c>
    7808:	880b883a 	mov	r5,r17
    780c:	a00d883a 	mov	r6,r20
    7810:	e009883a 	mov	r4,fp
    7814:	000a8880 	call	a888 <__lshift>
    7818:	1023883a 	mov	r17,r2
    781c:	9801241e 	bne	r19,zero,7cb0 <_dtoa_r+0x12a0>
    7820:	8829883a 	mov	r20,r17
    7824:	d9000617 	ldw	r4,24(sp)
    7828:	dcc00717 	ldw	r19,28(sp)
    782c:	9480004c 	andi	r18,r18,1
    7830:	20bfffc4 	addi	r2,r4,-1
    7834:	9885883a 	add	r2,r19,r2
    7838:	d8800415 	stw	r2,16(sp)
    783c:	dc800615 	stw	r18,24(sp)
    7840:	a80b883a 	mov	r5,r21
    7844:	8009883a 	mov	r4,r16
    7848:	00068100 	call	6810 <quorem>
    784c:	880b883a 	mov	r5,r17
    7850:	8009883a 	mov	r4,r16
    7854:	102f883a 	mov	r23,r2
    7858:	000a9d00 	call	a9d0 <__mcmp>
    785c:	a80b883a 	mov	r5,r21
    7860:	a00d883a 	mov	r6,r20
    7864:	e009883a 	mov	r4,fp
    7868:	102d883a 	mov	r22,r2
    786c:	000aa300 	call	aa30 <__mdiff>
    7870:	1007883a 	mov	r3,r2
    7874:	10800317 	ldw	r2,12(r2)
    7878:	bc800c04 	addi	r18,r23,48
    787c:	180b883a 	mov	r5,r3
    7880:	10004e1e 	bne	r2,zero,79bc <_dtoa_r+0xfac>
    7884:	8009883a 	mov	r4,r16
    7888:	d8c01615 	stw	r3,88(sp)
    788c:	000a9d00 	call	a9d0 <__mcmp>
    7890:	d8c01617 	ldw	r3,88(sp)
    7894:	e009883a 	mov	r4,fp
    7898:	d8801615 	stw	r2,88(sp)
    789c:	180b883a 	mov	r5,r3
    78a0:	000a1b00 	call	a1b0 <_Bfree>
    78a4:	d8801617 	ldw	r2,88(sp)
    78a8:	1000041e 	bne	r2,zero,78bc <_dtoa_r+0xeac>
    78ac:	d9800317 	ldw	r6,12(sp)
    78b0:	3000021e 	bne	r6,zero,78bc <_dtoa_r+0xeac>
    78b4:	d8c00617 	ldw	r3,24(sp)
    78b8:	18003726 	beq	r3,zero,7998 <_dtoa_r+0xf88>
    78bc:	b0002016 	blt	r22,zero,7940 <_dtoa_r+0xf30>
    78c0:	b000041e 	bne	r22,zero,78d4 <_dtoa_r+0xec4>
    78c4:	d9000317 	ldw	r4,12(sp)
    78c8:	2000021e 	bne	r4,zero,78d4 <_dtoa_r+0xec4>
    78cc:	d8c00617 	ldw	r3,24(sp)
    78d0:	18001b26 	beq	r3,zero,7940 <_dtoa_r+0xf30>
    78d4:	00810716 	blt	zero,r2,7cf4 <_dtoa_r+0x12e4>
    78d8:	d8c00417 	ldw	r3,16(sp)
    78dc:	9d800044 	addi	r22,r19,1
    78e0:	9c800005 	stb	r18,0(r19)
    78e4:	b02f883a 	mov	r23,r22
    78e8:	98c10626 	beq	r19,r3,7d04 <_dtoa_r+0x12f4>
    78ec:	800b883a 	mov	r5,r16
    78f0:	000f883a 	mov	r7,zero
    78f4:	01800284 	movi	r6,10
    78f8:	e009883a 	mov	r4,fp
    78fc:	000a1d80 	call	a1d8 <__multadd>
    7900:	1021883a 	mov	r16,r2
    7904:	000f883a 	mov	r7,zero
    7908:	01800284 	movi	r6,10
    790c:	880b883a 	mov	r5,r17
    7910:	e009883a 	mov	r4,fp
    7914:	8d002526 	beq	r17,r20,79ac <_dtoa_r+0xf9c>
    7918:	000a1d80 	call	a1d8 <__multadd>
    791c:	a00b883a 	mov	r5,r20
    7920:	000f883a 	mov	r7,zero
    7924:	01800284 	movi	r6,10
    7928:	e009883a 	mov	r4,fp
    792c:	1023883a 	mov	r17,r2
    7930:	000a1d80 	call	a1d8 <__multadd>
    7934:	1029883a 	mov	r20,r2
    7938:	b027883a 	mov	r19,r22
    793c:	003fc006 	br	7840 <__alt_mem_onchip_memory+0xf7807840>
    7940:	9011883a 	mov	r8,r18
    7944:	00800e0e 	bge	zero,r2,7980 <_dtoa_r+0xf70>
    7948:	800b883a 	mov	r5,r16
    794c:	01800044 	movi	r6,1
    7950:	e009883a 	mov	r4,fp
    7954:	da001715 	stw	r8,92(sp)
    7958:	000a8880 	call	a888 <__lshift>
    795c:	a80b883a 	mov	r5,r21
    7960:	1009883a 	mov	r4,r2
    7964:	1021883a 	mov	r16,r2
    7968:	000a9d00 	call	a9d0 <__mcmp>
    796c:	da001717 	ldw	r8,92(sp)
    7970:	0081960e 	bge	zero,r2,7fcc <_dtoa_r+0x15bc>
    7974:	00800e44 	movi	r2,57
    7978:	40817026 	beq	r8,r2,7f3c <_dtoa_r+0x152c>
    797c:	ba000c44 	addi	r8,r23,49
    7980:	8825883a 	mov	r18,r17
    7984:	9dc00044 	addi	r23,r19,1
    7988:	9a000005 	stb	r8,0(r19)
    798c:	a023883a 	mov	r17,r20
    7990:	dc000915 	stw	r16,36(sp)
    7994:	003f2406 	br	7628 <__alt_mem_onchip_memory+0xf7807628>
    7998:	00800e44 	movi	r2,57
    799c:	9011883a 	mov	r8,r18
    79a0:	90816626 	beq	r18,r2,7f3c <_dtoa_r+0x152c>
    79a4:	05bff516 	blt	zero,r22,797c <__alt_mem_onchip_memory+0xf780797c>
    79a8:	003ff506 	br	7980 <__alt_mem_onchip_memory+0xf7807980>
    79ac:	000a1d80 	call	a1d8 <__multadd>
    79b0:	1023883a 	mov	r17,r2
    79b4:	1029883a 	mov	r20,r2
    79b8:	003fdf06 	br	7938 <__alt_mem_onchip_memory+0xf7807938>
    79bc:	e009883a 	mov	r4,fp
    79c0:	000a1b00 	call	a1b0 <_Bfree>
    79c4:	00800044 	movi	r2,1
    79c8:	003fbc06 	br	78bc <__alt_mem_onchip_memory+0xf78078bc>
    79cc:	a80b883a 	mov	r5,r21
    79d0:	8009883a 	mov	r4,r16
    79d4:	000a9d00 	call	a9d0 <__mcmp>
    79d8:	103edb0e 	bge	r2,zero,7548 <__alt_mem_onchip_memory+0xf7807548>
    79dc:	800b883a 	mov	r5,r16
    79e0:	000f883a 	mov	r7,zero
    79e4:	01800284 	movi	r6,10
    79e8:	e009883a 	mov	r4,fp
    79ec:	000a1d80 	call	a1d8 <__multadd>
    79f0:	1021883a 	mov	r16,r2
    79f4:	d8800517 	ldw	r2,20(sp)
    79f8:	d8c00b17 	ldw	r3,44(sp)
    79fc:	10bfffc4 	addi	r2,r2,-1
    7a00:	d8800515 	stw	r2,20(sp)
    7a04:	183f761e 	bne	r3,zero,77e0 <__alt_mem_onchip_memory+0xf78077e0>
    7a08:	d9000c17 	ldw	r4,48(sp)
    7a0c:	0101730e 	bge	zero,r4,7fdc <_dtoa_r+0x15cc>
    7a10:	d9000615 	stw	r4,24(sp)
    7a14:	003ed006 	br	7558 <__alt_mem_onchip_memory+0xf7807558>
    7a18:	00800084 	movi	r2,2
    7a1c:	3081861e 	bne	r6,r2,8038 <_dtoa_r+0x1628>
    7a20:	d8000b15 	stw	zero,44(sp)
    7a24:	003f3c06 	br	7718 <__alt_mem_onchip_memory+0xf7807718>
    7a28:	dc000917 	ldw	r16,36(sp)
    7a2c:	003e9206 	br	7478 <__alt_mem_onchip_memory+0xf7807478>
    7a30:	d9c00317 	ldw	r7,12(sp)
    7a34:	00800084 	movi	r2,2
    7a38:	11fec50e 	bge	r2,r7,7550 <__alt_mem_onchip_memory+0xf7807550>
    7a3c:	d9000617 	ldw	r4,24(sp)
    7a40:	20013c1e 	bne	r4,zero,7f34 <_dtoa_r+0x1524>
    7a44:	a80b883a 	mov	r5,r21
    7a48:	000f883a 	mov	r7,zero
    7a4c:	01800144 	movi	r6,5
    7a50:	e009883a 	mov	r4,fp
    7a54:	000a1d80 	call	a1d8 <__multadd>
    7a58:	100b883a 	mov	r5,r2
    7a5c:	8009883a 	mov	r4,r16
    7a60:	102b883a 	mov	r21,r2
    7a64:	000a9d00 	call	a9d0 <__mcmp>
    7a68:	dc000915 	stw	r16,36(sp)
    7a6c:	00bf410e 	bge	zero,r2,7774 <__alt_mem_onchip_memory+0xf7807774>
    7a70:	d9c00717 	ldw	r7,28(sp)
    7a74:	00800c44 	movi	r2,49
    7a78:	38800005 	stb	r2,0(r7)
    7a7c:	d8800517 	ldw	r2,20(sp)
    7a80:	3dc00044 	addi	r23,r7,1
    7a84:	10800044 	addi	r2,r2,1
    7a88:	d8800515 	stw	r2,20(sp)
    7a8c:	003f3d06 	br	7784 <__alt_mem_onchip_memory+0xf7807784>
    7a90:	d9800517 	ldw	r6,20(sp)
    7a94:	d9c00717 	ldw	r7,28(sp)
    7a98:	00800c44 	movi	r2,49
    7a9c:	31800044 	addi	r6,r6,1
    7aa0:	d9800515 	stw	r6,20(sp)
    7aa4:	38800005 	stb	r2,0(r7)
    7aa8:	003edf06 	br	7628 <__alt_mem_onchip_memory+0xf7807628>
    7aac:	d8000b15 	stw	zero,44(sp)
    7ab0:	003c9f06 	br	6d30 <__alt_mem_onchip_memory+0xf7806d30>
    7ab4:	903e7e1e 	bne	r18,zero,74b0 <__alt_mem_onchip_memory+0xf78074b0>
    7ab8:	00800434 	movhi	r2,16
    7abc:	10bfffc4 	addi	r2,r2,-1
    7ac0:	9884703a 	and	r2,r19,r2
    7ac4:	1000ea1e 	bne	r2,zero,7e70 <_dtoa_r+0x1460>
    7ac8:	9cdffc2c 	andhi	r19,r19,32752
    7acc:	9800e826 	beq	r19,zero,7e70 <_dtoa_r+0x1460>
    7ad0:	d9c00817 	ldw	r7,32(sp)
    7ad4:	b5800044 	addi	r22,r22,1
    7ad8:	04c00044 	movi	r19,1
    7adc:	39c00044 	addi	r7,r7,1
    7ae0:	d9c00815 	stw	r7,32(sp)
    7ae4:	d8800d17 	ldw	r2,52(sp)
    7ae8:	103e721e 	bne	r2,zero,74b4 <__alt_mem_onchip_memory+0xf78074b4>
    7aec:	00800044 	movi	r2,1
    7af0:	003e7906 	br	74d8 <__alt_mem_onchip_memory+0xf78074d8>
    7af4:	8009883a 	mov	r4,r16
    7af8:	000e6ac0 	call	e6ac <__floatsidf>
    7afc:	d9800f17 	ldw	r6,60(sp)
    7b00:	d9c01017 	ldw	r7,64(sp)
    7b04:	1009883a 	mov	r4,r2
    7b08:	180b883a 	mov	r5,r3
    7b0c:	0002bd40 	call	2bd4 <__muldf3>
    7b10:	000d883a 	mov	r6,zero
    7b14:	01d00734 	movhi	r7,16412
    7b18:	1009883a 	mov	r4,r2
    7b1c:	180b883a 	mov	r5,r3
    7b20:	000194c0 	call	194c <__adddf3>
    7b24:	047f3034 	movhi	r17,64704
    7b28:	1021883a 	mov	r16,r2
    7b2c:	1c63883a 	add	r17,r3,r17
    7b30:	d9000f17 	ldw	r4,60(sp)
    7b34:	d9401017 	ldw	r5,64(sp)
    7b38:	000d883a 	mov	r6,zero
    7b3c:	01d00534 	movhi	r7,16404
    7b40:	00032ec0 	call	32ec <__subdf3>
    7b44:	800d883a 	mov	r6,r16
    7b48:	880f883a 	mov	r7,r17
    7b4c:	1009883a 	mov	r4,r2
    7b50:	180b883a 	mov	r5,r3
    7b54:	102b883a 	mov	r21,r2
    7b58:	1829883a 	mov	r20,r3
    7b5c:	000e5500 	call	e550 <__gedf2>
    7b60:	00806c16 	blt	zero,r2,7d14 <_dtoa_r+0x1304>
    7b64:	89e0003c 	xorhi	r7,r17,32768
    7b68:	800d883a 	mov	r6,r16
    7b6c:	a809883a 	mov	r4,r21
    7b70:	a00b883a 	mov	r5,r20
    7b74:	0002ae00 	call	2ae0 <__ledf2>
    7b78:	103d7e0e 	bge	r2,zero,7174 <__alt_mem_onchip_memory+0xf7807174>
    7b7c:	002b883a 	mov	r21,zero
    7b80:	0023883a 	mov	r17,zero
    7b84:	003efb06 	br	7774 <__alt_mem_onchip_memory+0xf7807774>
    7b88:	d8800717 	ldw	r2,28(sp)
    7b8c:	003bd006 	br	6ad0 <__alt_mem_onchip_memory+0xf7806ad0>
    7b90:	d9000a17 	ldw	r4,40(sp)
    7b94:	d9800d17 	ldw	r6,52(sp)
    7b98:	dd400a15 	stw	r21,40(sp)
    7b9c:	a905c83a 	sub	r2,r21,r4
    7ba0:	308d883a 	add	r6,r6,r2
    7ba4:	d9800d15 	stw	r6,52(sp)
    7ba8:	002b883a 	mov	r21,zero
    7bac:	003e0606 	br	73c8 <__alt_mem_onchip_memory+0xf78073c8>
    7bb0:	9023883a 	mov	r17,r18
    7bb4:	9829883a 	mov	r20,r19
    7bb8:	04000084 	movi	r16,2
    7bbc:	003c9206 	br	6e08 <__alt_mem_onchip_memory+0xf7806e08>
    7bc0:	04000044 	movi	r16,1
    7bc4:	dc000c15 	stw	r16,48(sp)
    7bc8:	dc000615 	stw	r16,24(sp)
    7bcc:	dc002215 	stw	r16,136(sp)
    7bd0:	e0001115 	stw	zero,68(fp)
    7bd4:	000b883a 	mov	r5,zero
    7bd8:	003c6906 	br	6d80 <__alt_mem_onchip_memory+0xf7806d80>
    7bdc:	3021883a 	mov	r16,r6
    7be0:	003ffb06 	br	7bd0 <__alt_mem_onchip_memory+0xf7807bd0>
    7be4:	1000021e 	bne	r2,zero,7bf0 <_dtoa_r+0x11e0>
    7be8:	4200004c 	andi	r8,r8,1
    7bec:	403e7d1e 	bne	r8,zero,75e4 <__alt_mem_onchip_memory+0xf78075e4>
    7bf0:	01000c04 	movi	r4,48
    7bf4:	00000106 	br	7bfc <_dtoa_r+0x11ec>
    7bf8:	102f883a 	mov	r23,r2
    7bfc:	b8bfffc4 	addi	r2,r23,-1
    7c00:	10c00007 	ldb	r3,0(r2)
    7c04:	193ffc26 	beq	r3,r4,7bf8 <__alt_mem_onchip_memory+0xf7807bf8>
    7c08:	003e8706 	br	7628 <__alt_mem_onchip_memory+0xf7807628>
    7c0c:	d8800517 	ldw	r2,20(sp)
    7c10:	00a3c83a 	sub	r17,zero,r2
    7c14:	8800a426 	beq	r17,zero,7ea8 <_dtoa_r+0x1498>
    7c18:	888003cc 	andi	r2,r17,15
    7c1c:	100490fa 	slli	r2,r2,3
    7c20:	00c00074 	movhi	r3,1
    7c24:	18c64104 	addi	r3,r3,6404
    7c28:	1885883a 	add	r2,r3,r2
    7c2c:	11800017 	ldw	r6,0(r2)
    7c30:	11c00117 	ldw	r7,4(r2)
    7c34:	9009883a 	mov	r4,r18
    7c38:	980b883a 	mov	r5,r19
    7c3c:	8823d13a 	srai	r17,r17,4
    7c40:	0002bd40 	call	2bd4 <__muldf3>
    7c44:	d8800f15 	stw	r2,60(sp)
    7c48:	d8c01015 	stw	r3,64(sp)
    7c4c:	8800e826 	beq	r17,zero,7ff0 <_dtoa_r+0x15e0>
    7c50:	05000074 	movhi	r20,1
    7c54:	a5063704 	addi	r20,r20,6364
    7c58:	04000084 	movi	r16,2
    7c5c:	8980004c 	andi	r6,r17,1
    7c60:	1009883a 	mov	r4,r2
    7c64:	8823d07a 	srai	r17,r17,1
    7c68:	180b883a 	mov	r5,r3
    7c6c:	30000426 	beq	r6,zero,7c80 <_dtoa_r+0x1270>
    7c70:	a1800017 	ldw	r6,0(r20)
    7c74:	a1c00117 	ldw	r7,4(r20)
    7c78:	84000044 	addi	r16,r16,1
    7c7c:	0002bd40 	call	2bd4 <__muldf3>
    7c80:	a5000204 	addi	r20,r20,8
    7c84:	883ff51e 	bne	r17,zero,7c5c <__alt_mem_onchip_memory+0xf7807c5c>
    7c88:	d8800f15 	stw	r2,60(sp)
    7c8c:	d8c01015 	stw	r3,64(sp)
    7c90:	003c7606 	br	6e6c <__alt_mem_onchip_memory+0xf7806e6c>
    7c94:	00c00c04 	movi	r3,48
    7c98:	10c00005 	stb	r3,0(r2)
    7c9c:	d8c00517 	ldw	r3,20(sp)
    7ca0:	bd3fffc3 	ldbu	r20,-1(r23)
    7ca4:	18c00044 	addi	r3,r3,1
    7ca8:	d8c00515 	stw	r3,20(sp)
    7cac:	003db906 	br	7394 <__alt_mem_onchip_memory+0xf7807394>
    7cb0:	89400117 	ldw	r5,4(r17)
    7cb4:	e009883a 	mov	r4,fp
    7cb8:	000a1080 	call	a108 <_Balloc>
    7cbc:	89800417 	ldw	r6,16(r17)
    7cc0:	89400304 	addi	r5,r17,12
    7cc4:	11000304 	addi	r4,r2,12
    7cc8:	31800084 	addi	r6,r6,2
    7ccc:	318d883a 	add	r6,r6,r6
    7cd0:	318d883a 	add	r6,r6,r6
    7cd4:	1027883a 	mov	r19,r2
    7cd8:	0009d3c0 	call	9d3c <memcpy>
    7cdc:	01800044 	movi	r6,1
    7ce0:	980b883a 	mov	r5,r19
    7ce4:	e009883a 	mov	r4,fp
    7ce8:	000a8880 	call	a888 <__lshift>
    7cec:	1029883a 	mov	r20,r2
    7cf0:	003ecc06 	br	7824 <__alt_mem_onchip_memory+0xf7807824>
    7cf4:	00800e44 	movi	r2,57
    7cf8:	90809026 	beq	r18,r2,7f3c <_dtoa_r+0x152c>
    7cfc:	92000044 	addi	r8,r18,1
    7d00:	003f1f06 	br	7980 <__alt_mem_onchip_memory+0xf7807980>
    7d04:	9011883a 	mov	r8,r18
    7d08:	8825883a 	mov	r18,r17
    7d0c:	a023883a 	mov	r17,r20
    7d10:	003e2906 	br	75b8 <__alt_mem_onchip_memory+0xf78075b8>
    7d14:	002b883a 	mov	r21,zero
    7d18:	0023883a 	mov	r17,zero
    7d1c:	003f5406 	br	7a70 <__alt_mem_onchip_memory+0xf7807a70>
    7d20:	61bfffc4 	addi	r6,r12,-1
    7d24:	300490fa 	slli	r2,r6,3
    7d28:	00c00074 	movhi	r3,1
    7d2c:	18c64104 	addi	r3,r3,6404
    7d30:	1885883a 	add	r2,r3,r2
    7d34:	11000017 	ldw	r4,0(r2)
    7d38:	11400117 	ldw	r5,4(r2)
    7d3c:	d8800717 	ldw	r2,28(sp)
    7d40:	880f883a 	mov	r7,r17
    7d44:	d9801215 	stw	r6,72(sp)
    7d48:	800d883a 	mov	r6,r16
    7d4c:	db001615 	stw	r12,88(sp)
    7d50:	15c00044 	addi	r23,r2,1
    7d54:	0002bd40 	call	2bd4 <__muldf3>
    7d58:	d9401017 	ldw	r5,64(sp)
    7d5c:	d9000f17 	ldw	r4,60(sp)
    7d60:	d8c01515 	stw	r3,84(sp)
    7d64:	d8801415 	stw	r2,80(sp)
    7d68:	000e62c0 	call	e62c <__fixdfsi>
    7d6c:	1009883a 	mov	r4,r2
    7d70:	1021883a 	mov	r16,r2
    7d74:	000e6ac0 	call	e6ac <__floatsidf>
    7d78:	d9000f17 	ldw	r4,60(sp)
    7d7c:	d9401017 	ldw	r5,64(sp)
    7d80:	100d883a 	mov	r6,r2
    7d84:	180f883a 	mov	r7,r3
    7d88:	00032ec0 	call	32ec <__subdf3>
    7d8c:	1829883a 	mov	r20,r3
    7d90:	d8c00717 	ldw	r3,28(sp)
    7d94:	84000c04 	addi	r16,r16,48
    7d98:	1023883a 	mov	r17,r2
    7d9c:	1c000005 	stb	r16,0(r3)
    7da0:	db001617 	ldw	r12,88(sp)
    7da4:	00800044 	movi	r2,1
    7da8:	60802226 	beq	r12,r2,7e34 <_dtoa_r+0x1424>
    7dac:	d9c00717 	ldw	r7,28(sp)
    7db0:	8805883a 	mov	r2,r17
    7db4:	b82b883a 	mov	r21,r23
    7db8:	3b19883a 	add	r12,r7,r12
    7dbc:	6023883a 	mov	r17,r12
    7dc0:	a007883a 	mov	r3,r20
    7dc4:	dc800f15 	stw	r18,60(sp)
    7dc8:	000d883a 	mov	r6,zero
    7dcc:	01d00934 	movhi	r7,16420
    7dd0:	1009883a 	mov	r4,r2
    7dd4:	180b883a 	mov	r5,r3
    7dd8:	0002bd40 	call	2bd4 <__muldf3>
    7ddc:	180b883a 	mov	r5,r3
    7de0:	1009883a 	mov	r4,r2
    7de4:	1829883a 	mov	r20,r3
    7de8:	1025883a 	mov	r18,r2
    7dec:	000e62c0 	call	e62c <__fixdfsi>
    7df0:	1009883a 	mov	r4,r2
    7df4:	1021883a 	mov	r16,r2
    7df8:	000e6ac0 	call	e6ac <__floatsidf>
    7dfc:	100d883a 	mov	r6,r2
    7e00:	180f883a 	mov	r7,r3
    7e04:	9009883a 	mov	r4,r18
    7e08:	a00b883a 	mov	r5,r20
    7e0c:	84000c04 	addi	r16,r16,48
    7e10:	00032ec0 	call	32ec <__subdf3>
    7e14:	ad400044 	addi	r21,r21,1
    7e18:	ac3fffc5 	stb	r16,-1(r21)
    7e1c:	ac7fea1e 	bne	r21,r17,7dc8 <__alt_mem_onchip_memory+0xf7807dc8>
    7e20:	1023883a 	mov	r17,r2
    7e24:	d8801217 	ldw	r2,72(sp)
    7e28:	dc800f17 	ldw	r18,60(sp)
    7e2c:	1829883a 	mov	r20,r3
    7e30:	b8af883a 	add	r23,r23,r2
    7e34:	d9001417 	ldw	r4,80(sp)
    7e38:	d9401517 	ldw	r5,84(sp)
    7e3c:	000d883a 	mov	r6,zero
    7e40:	01cff834 	movhi	r7,16352
    7e44:	000194c0 	call	194c <__adddf3>
    7e48:	880d883a 	mov	r6,r17
    7e4c:	a00f883a 	mov	r7,r20
    7e50:	1009883a 	mov	r4,r2
    7e54:	180b883a 	mov	r5,r3
    7e58:	0002ae00 	call	2ae0 <__ledf2>
    7e5c:	10003e0e 	bge	r2,zero,7f58 <_dtoa_r+0x1548>
    7e60:	d9001317 	ldw	r4,76(sp)
    7e64:	bd3fffc3 	ldbu	r20,-1(r23)
    7e68:	d9000515 	stw	r4,20(sp)
    7e6c:	003d3b06 	br	735c <__alt_mem_onchip_memory+0xf780735c>
    7e70:	0027883a 	mov	r19,zero
    7e74:	003f1b06 	br	7ae4 <__alt_mem_onchip_memory+0xf7807ae4>
    7e78:	d8800817 	ldw	r2,32(sp)
    7e7c:	11e9c83a 	sub	r20,r2,r7
    7e80:	0005883a 	mov	r2,zero
    7e84:	003d5406 	br	73d8 <__alt_mem_onchip_memory+0xf78073d8>
    7e88:	00800044 	movi	r2,1
    7e8c:	003dc706 	br	75ac <__alt_mem_onchip_memory+0xf78075ac>
    7e90:	d8c00217 	ldw	r3,8(sp)
    7e94:	00800d84 	movi	r2,54
    7e98:	dd400a17 	ldw	r21,40(sp)
    7e9c:	10c5c83a 	sub	r2,r2,r3
    7ea0:	dd000817 	ldw	r20,32(sp)
    7ea4:	003d4c06 	br	73d8 <__alt_mem_onchip_memory+0xf78073d8>
    7ea8:	dc800f15 	stw	r18,60(sp)
    7eac:	dcc01015 	stw	r19,64(sp)
    7eb0:	04000084 	movi	r16,2
    7eb4:	003bed06 	br	6e6c <__alt_mem_onchip_memory+0xf7806e6c>
    7eb8:	d9000617 	ldw	r4,24(sp)
    7ebc:	203f0d26 	beq	r4,zero,7af4 <__alt_mem_onchip_memory+0xf7807af4>
    7ec0:	d9800c17 	ldw	r6,48(sp)
    7ec4:	01bcab0e 	bge	zero,r6,7174 <__alt_mem_onchip_memory+0xf7807174>
    7ec8:	d9401017 	ldw	r5,64(sp)
    7ecc:	d9000f17 	ldw	r4,60(sp)
    7ed0:	000d883a 	mov	r6,zero
    7ed4:	01d00934 	movhi	r7,16420
    7ed8:	0002bd40 	call	2bd4 <__muldf3>
    7edc:	81000044 	addi	r4,r16,1
    7ee0:	d8800f15 	stw	r2,60(sp)
    7ee4:	d8c01015 	stw	r3,64(sp)
    7ee8:	000e6ac0 	call	e6ac <__floatsidf>
    7eec:	d9800f17 	ldw	r6,60(sp)
    7ef0:	d9c01017 	ldw	r7,64(sp)
    7ef4:	1009883a 	mov	r4,r2
    7ef8:	180b883a 	mov	r5,r3
    7efc:	0002bd40 	call	2bd4 <__muldf3>
    7f00:	01d00734 	movhi	r7,16412
    7f04:	000d883a 	mov	r6,zero
    7f08:	1009883a 	mov	r4,r2
    7f0c:	180b883a 	mov	r5,r3
    7f10:	000194c0 	call	194c <__adddf3>
    7f14:	d9c00517 	ldw	r7,20(sp)
    7f18:	047f3034 	movhi	r17,64704
    7f1c:	1021883a 	mov	r16,r2
    7f20:	39ffffc4 	addi	r7,r7,-1
    7f24:	d9c01315 	stw	r7,76(sp)
    7f28:	1c63883a 	add	r17,r3,r17
    7f2c:	db000c17 	ldw	r12,48(sp)
    7f30:	003bea06 	br	6edc <__alt_mem_onchip_memory+0xf7806edc>
    7f34:	dc000915 	stw	r16,36(sp)
    7f38:	003e0e06 	br	7774 <__alt_mem_onchip_memory+0xf7807774>
    7f3c:	01000e44 	movi	r4,57
    7f40:	8825883a 	mov	r18,r17
    7f44:	9dc00044 	addi	r23,r19,1
    7f48:	99000005 	stb	r4,0(r19)
    7f4c:	a023883a 	mov	r17,r20
    7f50:	dc000915 	stw	r16,36(sp)
    7f54:	003da406 	br	75e8 <__alt_mem_onchip_memory+0xf78075e8>
    7f58:	d9801417 	ldw	r6,80(sp)
    7f5c:	d9c01517 	ldw	r7,84(sp)
    7f60:	0009883a 	mov	r4,zero
    7f64:	014ff834 	movhi	r5,16352
    7f68:	00032ec0 	call	32ec <__subdf3>
    7f6c:	880d883a 	mov	r6,r17
    7f70:	a00f883a 	mov	r7,r20
    7f74:	1009883a 	mov	r4,r2
    7f78:	180b883a 	mov	r5,r3
    7f7c:	000e5500 	call	e550 <__gedf2>
    7f80:	00bc7c0e 	bge	zero,r2,7174 <__alt_mem_onchip_memory+0xf7807174>
    7f84:	01000c04 	movi	r4,48
    7f88:	00000106 	br	7f90 <_dtoa_r+0x1580>
    7f8c:	102f883a 	mov	r23,r2
    7f90:	b8bfffc4 	addi	r2,r23,-1
    7f94:	10c00007 	ldb	r3,0(r2)
    7f98:	193ffc26 	beq	r3,r4,7f8c <__alt_mem_onchip_memory+0xf7807f8c>
    7f9c:	d9801317 	ldw	r6,76(sp)
    7fa0:	d9800515 	stw	r6,20(sp)
    7fa4:	003c4406 	br	70b8 <__alt_mem_onchip_memory+0xf78070b8>
    7fa8:	d9801317 	ldw	r6,76(sp)
    7fac:	d9800515 	stw	r6,20(sp)
    7fb0:	003cea06 	br	735c <__alt_mem_onchip_memory+0xf780735c>
    7fb4:	dd800f17 	ldw	r22,60(sp)
    7fb8:	dcc01017 	ldw	r19,64(sp)
    7fbc:	dc801217 	ldw	r18,72(sp)
    7fc0:	003c6c06 	br	7174 <__alt_mem_onchip_memory+0xf7807174>
    7fc4:	903e031e 	bne	r18,zero,77d4 <__alt_mem_onchip_memory+0xf78077d4>
    7fc8:	003ebb06 	br	7ab8 <__alt_mem_onchip_memory+0xf7807ab8>
    7fcc:	103e6c1e 	bne	r2,zero,7980 <__alt_mem_onchip_memory+0xf7807980>
    7fd0:	4080004c 	andi	r2,r8,1
    7fd4:	103e6a26 	beq	r2,zero,7980 <__alt_mem_onchip_memory+0xf7807980>
    7fd8:	003e6606 	br	7974 <__alt_mem_onchip_memory+0xf7807974>
    7fdc:	d8c00317 	ldw	r3,12(sp)
    7fe0:	00800084 	movi	r2,2
    7fe4:	10c02916 	blt	r2,r3,808c <_dtoa_r+0x167c>
    7fe8:	d9000c17 	ldw	r4,48(sp)
    7fec:	003e8806 	br	7a10 <__alt_mem_onchip_memory+0xf7807a10>
    7ff0:	04000084 	movi	r16,2
    7ff4:	003b9d06 	br	6e6c <__alt_mem_onchip_memory+0xf7806e6c>
    7ff8:	d9001317 	ldw	r4,76(sp)
    7ffc:	d9000515 	stw	r4,20(sp)
    8000:	003cd606 	br	735c <__alt_mem_onchip_memory+0xf780735c>
    8004:	d8801317 	ldw	r2,76(sp)
    8008:	d8800515 	stw	r2,20(sp)
    800c:	003c2a06 	br	70b8 <__alt_mem_onchip_memory+0xf78070b8>
    8010:	d9800317 	ldw	r6,12(sp)
    8014:	00800084 	movi	r2,2
    8018:	11801516 	blt	r2,r6,8070 <_dtoa_r+0x1660>
    801c:	d9c00c17 	ldw	r7,48(sp)
    8020:	d9c00615 	stw	r7,24(sp)
    8024:	003df706 	br	7804 <__alt_mem_onchip_memory+0xf7807804>
    8028:	193d3926 	beq	r3,r4,7510 <__alt_mem_onchip_memory+0xf7807510>
    802c:	00c00f04 	movi	r3,60
    8030:	1885c83a 	sub	r2,r3,r2
    8034:	003ddf06 	br	77b4 <__alt_mem_onchip_memory+0xf78077b4>
    8038:	e009883a 	mov	r4,fp
    803c:	e0001115 	stw	zero,68(fp)
    8040:	000b883a 	mov	r5,zero
    8044:	000a1080 	call	a108 <_Balloc>
    8048:	d8800715 	stw	r2,28(sp)
    804c:	d8c00717 	ldw	r3,28(sp)
    8050:	00bfffc4 	movi	r2,-1
    8054:	01000044 	movi	r4,1
    8058:	d8800c15 	stw	r2,48(sp)
    805c:	e0c01015 	stw	r3,64(fp)
    8060:	d9000b15 	stw	r4,44(sp)
    8064:	d8800615 	stw	r2,24(sp)
    8068:	d8002215 	stw	zero,136(sp)
    806c:	003c4106 	br	7174 <__alt_mem_onchip_memory+0xf7807174>
    8070:	d8c00c17 	ldw	r3,48(sp)
    8074:	d8c00615 	stw	r3,24(sp)
    8078:	003e7006 	br	7a3c <__alt_mem_onchip_memory+0xf7807a3c>
    807c:	04400044 	movi	r17,1
    8080:	003b2006 	br	6d04 <__alt_mem_onchip_memory+0xf7806d04>
    8084:	000b883a 	mov	r5,zero
    8088:	003b3d06 	br	6d80 <__alt_mem_onchip_memory+0xf7806d80>
    808c:	d8800c17 	ldw	r2,48(sp)
    8090:	d8800615 	stw	r2,24(sp)
    8094:	003e6906 	br	7a3c <__alt_mem_onchip_memory+0xf7807a3c>

00008098 <__sflush_r>:
    8098:	2880030b 	ldhu	r2,12(r5)
    809c:	defffb04 	addi	sp,sp,-20
    80a0:	dcc00315 	stw	r19,12(sp)
    80a4:	dc400115 	stw	r17,4(sp)
    80a8:	dfc00415 	stw	ra,16(sp)
    80ac:	dc800215 	stw	r18,8(sp)
    80b0:	dc000015 	stw	r16,0(sp)
    80b4:	10c0020c 	andi	r3,r2,8
    80b8:	2823883a 	mov	r17,r5
    80bc:	2027883a 	mov	r19,r4
    80c0:	1800311e 	bne	r3,zero,8188 <__sflush_r+0xf0>
    80c4:	28c00117 	ldw	r3,4(r5)
    80c8:	10820014 	ori	r2,r2,2048
    80cc:	2880030d 	sth	r2,12(r5)
    80d0:	00c04b0e 	bge	zero,r3,8200 <__sflush_r+0x168>
    80d4:	8a000a17 	ldw	r8,40(r17)
    80d8:	40002326 	beq	r8,zero,8168 <__sflush_r+0xd0>
    80dc:	9c000017 	ldw	r16,0(r19)
    80e0:	10c4000c 	andi	r3,r2,4096
    80e4:	98000015 	stw	zero,0(r19)
    80e8:	18004826 	beq	r3,zero,820c <__sflush_r+0x174>
    80ec:	89801417 	ldw	r6,80(r17)
    80f0:	10c0010c 	andi	r3,r2,4
    80f4:	18000626 	beq	r3,zero,8110 <__sflush_r+0x78>
    80f8:	88c00117 	ldw	r3,4(r17)
    80fc:	88800c17 	ldw	r2,48(r17)
    8100:	30cdc83a 	sub	r6,r6,r3
    8104:	10000226 	beq	r2,zero,8110 <__sflush_r+0x78>
    8108:	88800f17 	ldw	r2,60(r17)
    810c:	308dc83a 	sub	r6,r6,r2
    8110:	89400717 	ldw	r5,28(r17)
    8114:	000f883a 	mov	r7,zero
    8118:	9809883a 	mov	r4,r19
    811c:	403ee83a 	callr	r8
    8120:	00ffffc4 	movi	r3,-1
    8124:	10c04426 	beq	r2,r3,8238 <__sflush_r+0x1a0>
    8128:	88c0030b 	ldhu	r3,12(r17)
    812c:	89000417 	ldw	r4,16(r17)
    8130:	88000115 	stw	zero,4(r17)
    8134:	197dffcc 	andi	r5,r3,63487
    8138:	8940030d 	sth	r5,12(r17)
    813c:	89000015 	stw	r4,0(r17)
    8140:	18c4000c 	andi	r3,r3,4096
    8144:	18002c1e 	bne	r3,zero,81f8 <__sflush_r+0x160>
    8148:	89400c17 	ldw	r5,48(r17)
    814c:	9c000015 	stw	r16,0(r19)
    8150:	28000526 	beq	r5,zero,8168 <__sflush_r+0xd0>
    8154:	88801004 	addi	r2,r17,64
    8158:	28800226 	beq	r5,r2,8164 <__sflush_r+0xcc>
    815c:	9809883a 	mov	r4,r19
    8160:	00088040 	call	8804 <_free_r>
    8164:	88000c15 	stw	zero,48(r17)
    8168:	0005883a 	mov	r2,zero
    816c:	dfc00417 	ldw	ra,16(sp)
    8170:	dcc00317 	ldw	r19,12(sp)
    8174:	dc800217 	ldw	r18,8(sp)
    8178:	dc400117 	ldw	r17,4(sp)
    817c:	dc000017 	ldw	r16,0(sp)
    8180:	dec00504 	addi	sp,sp,20
    8184:	f800283a 	ret
    8188:	2c800417 	ldw	r18,16(r5)
    818c:	903ff626 	beq	r18,zero,8168 <__alt_mem_onchip_memory+0xf7808168>
    8190:	2c000017 	ldw	r16,0(r5)
    8194:	108000cc 	andi	r2,r2,3
    8198:	2c800015 	stw	r18,0(r5)
    819c:	84a1c83a 	sub	r16,r16,r18
    81a0:	1000131e 	bne	r2,zero,81f0 <__sflush_r+0x158>
    81a4:	28800517 	ldw	r2,20(r5)
    81a8:	88800215 	stw	r2,8(r17)
    81ac:	04000316 	blt	zero,r16,81bc <__sflush_r+0x124>
    81b0:	003fed06 	br	8168 <__alt_mem_onchip_memory+0xf7808168>
    81b4:	90a5883a 	add	r18,r18,r2
    81b8:	043feb0e 	bge	zero,r16,8168 <__alt_mem_onchip_memory+0xf7808168>
    81bc:	88800917 	ldw	r2,36(r17)
    81c0:	89400717 	ldw	r5,28(r17)
    81c4:	800f883a 	mov	r7,r16
    81c8:	900d883a 	mov	r6,r18
    81cc:	9809883a 	mov	r4,r19
    81d0:	103ee83a 	callr	r2
    81d4:	80a1c83a 	sub	r16,r16,r2
    81d8:	00bff616 	blt	zero,r2,81b4 <__alt_mem_onchip_memory+0xf78081b4>
    81dc:	88c0030b 	ldhu	r3,12(r17)
    81e0:	00bfffc4 	movi	r2,-1
    81e4:	18c01014 	ori	r3,r3,64
    81e8:	88c0030d 	sth	r3,12(r17)
    81ec:	003fdf06 	br	816c <__alt_mem_onchip_memory+0xf780816c>
    81f0:	0005883a 	mov	r2,zero
    81f4:	003fec06 	br	81a8 <__alt_mem_onchip_memory+0xf78081a8>
    81f8:	88801415 	stw	r2,80(r17)
    81fc:	003fd206 	br	8148 <__alt_mem_onchip_memory+0xf7808148>
    8200:	28c00f17 	ldw	r3,60(r5)
    8204:	00ffb316 	blt	zero,r3,80d4 <__alt_mem_onchip_memory+0xf78080d4>
    8208:	003fd706 	br	8168 <__alt_mem_onchip_memory+0xf7808168>
    820c:	89400717 	ldw	r5,28(r17)
    8210:	000d883a 	mov	r6,zero
    8214:	01c00044 	movi	r7,1
    8218:	9809883a 	mov	r4,r19
    821c:	403ee83a 	callr	r8
    8220:	100d883a 	mov	r6,r2
    8224:	00bfffc4 	movi	r2,-1
    8228:	30801426 	beq	r6,r2,827c <__sflush_r+0x1e4>
    822c:	8880030b 	ldhu	r2,12(r17)
    8230:	8a000a17 	ldw	r8,40(r17)
    8234:	003fae06 	br	80f0 <__alt_mem_onchip_memory+0xf78080f0>
    8238:	98c00017 	ldw	r3,0(r19)
    823c:	183fba26 	beq	r3,zero,8128 <__alt_mem_onchip_memory+0xf7808128>
    8240:	01000744 	movi	r4,29
    8244:	19000626 	beq	r3,r4,8260 <__sflush_r+0x1c8>
    8248:	01000584 	movi	r4,22
    824c:	19000426 	beq	r3,r4,8260 <__sflush_r+0x1c8>
    8250:	88c0030b 	ldhu	r3,12(r17)
    8254:	18c01014 	ori	r3,r3,64
    8258:	88c0030d 	sth	r3,12(r17)
    825c:	003fc306 	br	816c <__alt_mem_onchip_memory+0xf780816c>
    8260:	8880030b 	ldhu	r2,12(r17)
    8264:	88c00417 	ldw	r3,16(r17)
    8268:	88000115 	stw	zero,4(r17)
    826c:	10bdffcc 	andi	r2,r2,63487
    8270:	8880030d 	sth	r2,12(r17)
    8274:	88c00015 	stw	r3,0(r17)
    8278:	003fb306 	br	8148 <__alt_mem_onchip_memory+0xf7808148>
    827c:	98800017 	ldw	r2,0(r19)
    8280:	103fea26 	beq	r2,zero,822c <__alt_mem_onchip_memory+0xf780822c>
    8284:	00c00744 	movi	r3,29
    8288:	10c00226 	beq	r2,r3,8294 <__sflush_r+0x1fc>
    828c:	00c00584 	movi	r3,22
    8290:	10c0031e 	bne	r2,r3,82a0 <__sflush_r+0x208>
    8294:	9c000015 	stw	r16,0(r19)
    8298:	0005883a 	mov	r2,zero
    829c:	003fb306 	br	816c <__alt_mem_onchip_memory+0xf780816c>
    82a0:	88c0030b 	ldhu	r3,12(r17)
    82a4:	3005883a 	mov	r2,r6
    82a8:	18c01014 	ori	r3,r3,64
    82ac:	88c0030d 	sth	r3,12(r17)
    82b0:	003fae06 	br	816c <__alt_mem_onchip_memory+0xf780816c>

000082b4 <_fflush_r>:
    82b4:	defffd04 	addi	sp,sp,-12
    82b8:	dc000115 	stw	r16,4(sp)
    82bc:	dfc00215 	stw	ra,8(sp)
    82c0:	2021883a 	mov	r16,r4
    82c4:	20000226 	beq	r4,zero,82d0 <_fflush_r+0x1c>
    82c8:	20800e17 	ldw	r2,56(r4)
    82cc:	10000c26 	beq	r2,zero,8300 <_fflush_r+0x4c>
    82d0:	2880030f 	ldh	r2,12(r5)
    82d4:	1000051e 	bne	r2,zero,82ec <_fflush_r+0x38>
    82d8:	0005883a 	mov	r2,zero
    82dc:	dfc00217 	ldw	ra,8(sp)
    82e0:	dc000117 	ldw	r16,4(sp)
    82e4:	dec00304 	addi	sp,sp,12
    82e8:	f800283a 	ret
    82ec:	8009883a 	mov	r4,r16
    82f0:	dfc00217 	ldw	ra,8(sp)
    82f4:	dc000117 	ldw	r16,4(sp)
    82f8:	dec00304 	addi	sp,sp,12
    82fc:	00080981 	jmpi	8098 <__sflush_r>
    8300:	d9400015 	stw	r5,0(sp)
    8304:	00086900 	call	8690 <__sinit>
    8308:	d9400017 	ldw	r5,0(sp)
    830c:	003ff006 	br	82d0 <__alt_mem_onchip_memory+0xf78082d0>

00008310 <fflush>:
    8310:	20000526 	beq	r4,zero,8328 <fflush+0x18>
    8314:	00800074 	movhi	r2,1
    8318:	108d7704 	addi	r2,r2,13788
    831c:	200b883a 	mov	r5,r4
    8320:	11000017 	ldw	r4,0(r2)
    8324:	00082b41 	jmpi	82b4 <_fflush_r>
    8328:	00800074 	movhi	r2,1
    832c:	108d7604 	addi	r2,r2,13784
    8330:	11000017 	ldw	r4,0(r2)
    8334:	01400074 	movhi	r5,1
    8338:	2960ad04 	addi	r5,r5,-32076
    833c:	00090941 	jmpi	9094 <_fwalk_reent>

00008340 <__fp_unlock>:
    8340:	0005883a 	mov	r2,zero
    8344:	f800283a 	ret

00008348 <_cleanup_r>:
    8348:	01400074 	movhi	r5,1
    834c:	2974d504 	addi	r5,r5,-11436
    8350:	00090941 	jmpi	9094 <_fwalk_reent>

00008354 <__sinit.part.1>:
    8354:	defff704 	addi	sp,sp,-36
    8358:	00c00074 	movhi	r3,1
    835c:	dfc00815 	stw	ra,32(sp)
    8360:	ddc00715 	stw	r23,28(sp)
    8364:	dd800615 	stw	r22,24(sp)
    8368:	dd400515 	stw	r21,20(sp)
    836c:	dd000415 	stw	r20,16(sp)
    8370:	dcc00315 	stw	r19,12(sp)
    8374:	dc800215 	stw	r18,8(sp)
    8378:	dc400115 	stw	r17,4(sp)
    837c:	dc000015 	stw	r16,0(sp)
    8380:	18e0d204 	addi	r3,r3,-31928
    8384:	24000117 	ldw	r16,4(r4)
    8388:	20c00f15 	stw	r3,60(r4)
    838c:	2080bb04 	addi	r2,r4,748
    8390:	00c000c4 	movi	r3,3
    8394:	20c0b915 	stw	r3,740(r4)
    8398:	2080ba15 	stw	r2,744(r4)
    839c:	2000b815 	stw	zero,736(r4)
    83a0:	05c00204 	movi	r23,8
    83a4:	00800104 	movi	r2,4
    83a8:	2025883a 	mov	r18,r4
    83ac:	b80d883a 	mov	r6,r23
    83b0:	81001704 	addi	r4,r16,92
    83b4:	000b883a 	mov	r5,zero
    83b8:	80000015 	stw	zero,0(r16)
    83bc:	80000115 	stw	zero,4(r16)
    83c0:	80000215 	stw	zero,8(r16)
    83c4:	8080030d 	sth	r2,12(r16)
    83c8:	80001915 	stw	zero,100(r16)
    83cc:	8000038d 	sth	zero,14(r16)
    83d0:	80000415 	stw	zero,16(r16)
    83d4:	80000515 	stw	zero,20(r16)
    83d8:	80000615 	stw	zero,24(r16)
    83dc:	0009fe00 	call	9fe0 <memset>
    83e0:	05800074 	movhi	r22,1
    83e4:	94400217 	ldw	r17,8(r18)
    83e8:	05400074 	movhi	r21,1
    83ec:	05000074 	movhi	r20,1
    83f0:	04c00074 	movhi	r19,1
    83f4:	b5ae0904 	addi	r22,r22,-18396
    83f8:	ad6e2004 	addi	r21,r21,-18304
    83fc:	a52e3f04 	addi	r20,r20,-18180
    8400:	9cee5604 	addi	r19,r19,-18088
    8404:	85800815 	stw	r22,32(r16)
    8408:	85400915 	stw	r21,36(r16)
    840c:	85000a15 	stw	r20,40(r16)
    8410:	84c00b15 	stw	r19,44(r16)
    8414:	84000715 	stw	r16,28(r16)
    8418:	00800284 	movi	r2,10
    841c:	8880030d 	sth	r2,12(r17)
    8420:	00800044 	movi	r2,1
    8424:	b80d883a 	mov	r6,r23
    8428:	89001704 	addi	r4,r17,92
    842c:	000b883a 	mov	r5,zero
    8430:	88000015 	stw	zero,0(r17)
    8434:	88000115 	stw	zero,4(r17)
    8438:	88000215 	stw	zero,8(r17)
    843c:	88001915 	stw	zero,100(r17)
    8440:	8880038d 	sth	r2,14(r17)
    8444:	88000415 	stw	zero,16(r17)
    8448:	88000515 	stw	zero,20(r17)
    844c:	88000615 	stw	zero,24(r17)
    8450:	0009fe00 	call	9fe0 <memset>
    8454:	94000317 	ldw	r16,12(r18)
    8458:	00800484 	movi	r2,18
    845c:	8c400715 	stw	r17,28(r17)
    8460:	8d800815 	stw	r22,32(r17)
    8464:	8d400915 	stw	r21,36(r17)
    8468:	8d000a15 	stw	r20,40(r17)
    846c:	8cc00b15 	stw	r19,44(r17)
    8470:	8080030d 	sth	r2,12(r16)
    8474:	00800084 	movi	r2,2
    8478:	80000015 	stw	zero,0(r16)
    847c:	80000115 	stw	zero,4(r16)
    8480:	80000215 	stw	zero,8(r16)
    8484:	80001915 	stw	zero,100(r16)
    8488:	8080038d 	sth	r2,14(r16)
    848c:	80000415 	stw	zero,16(r16)
    8490:	80000515 	stw	zero,20(r16)
    8494:	80000615 	stw	zero,24(r16)
    8498:	b80d883a 	mov	r6,r23
    849c:	000b883a 	mov	r5,zero
    84a0:	81001704 	addi	r4,r16,92
    84a4:	0009fe00 	call	9fe0 <memset>
    84a8:	00800044 	movi	r2,1
    84ac:	84000715 	stw	r16,28(r16)
    84b0:	85800815 	stw	r22,32(r16)
    84b4:	85400915 	stw	r21,36(r16)
    84b8:	85000a15 	stw	r20,40(r16)
    84bc:	84c00b15 	stw	r19,44(r16)
    84c0:	90800e15 	stw	r2,56(r18)
    84c4:	dfc00817 	ldw	ra,32(sp)
    84c8:	ddc00717 	ldw	r23,28(sp)
    84cc:	dd800617 	ldw	r22,24(sp)
    84d0:	dd400517 	ldw	r21,20(sp)
    84d4:	dd000417 	ldw	r20,16(sp)
    84d8:	dcc00317 	ldw	r19,12(sp)
    84dc:	dc800217 	ldw	r18,8(sp)
    84e0:	dc400117 	ldw	r17,4(sp)
    84e4:	dc000017 	ldw	r16,0(sp)
    84e8:	dec00904 	addi	sp,sp,36
    84ec:	f800283a 	ret

000084f0 <__fp_lock>:
    84f0:	0005883a 	mov	r2,zero
    84f4:	f800283a 	ret

000084f8 <__sfmoreglue>:
    84f8:	defffc04 	addi	sp,sp,-16
    84fc:	dc400115 	stw	r17,4(sp)
    8500:	2c7fffc4 	addi	r17,r5,-1
    8504:	8c401a24 	muli	r17,r17,104
    8508:	dc800215 	stw	r18,8(sp)
    850c:	2825883a 	mov	r18,r5
    8510:	89401d04 	addi	r5,r17,116
    8514:	dc000015 	stw	r16,0(sp)
    8518:	dfc00315 	stw	ra,12(sp)
    851c:	000944c0 	call	944c <_malloc_r>
    8520:	1021883a 	mov	r16,r2
    8524:	10000726 	beq	r2,zero,8544 <__sfmoreglue+0x4c>
    8528:	11000304 	addi	r4,r2,12
    852c:	10000015 	stw	zero,0(r2)
    8530:	14800115 	stw	r18,4(r2)
    8534:	11000215 	stw	r4,8(r2)
    8538:	89801a04 	addi	r6,r17,104
    853c:	000b883a 	mov	r5,zero
    8540:	0009fe00 	call	9fe0 <memset>
    8544:	8005883a 	mov	r2,r16
    8548:	dfc00317 	ldw	ra,12(sp)
    854c:	dc800217 	ldw	r18,8(sp)
    8550:	dc400117 	ldw	r17,4(sp)
    8554:	dc000017 	ldw	r16,0(sp)
    8558:	dec00404 	addi	sp,sp,16
    855c:	f800283a 	ret

00008560 <__sfp>:
    8560:	defffb04 	addi	sp,sp,-20
    8564:	dc000015 	stw	r16,0(sp)
    8568:	04000074 	movhi	r16,1
    856c:	840d7604 	addi	r16,r16,13784
    8570:	dcc00315 	stw	r19,12(sp)
    8574:	2027883a 	mov	r19,r4
    8578:	81000017 	ldw	r4,0(r16)
    857c:	dfc00415 	stw	ra,16(sp)
    8580:	dc800215 	stw	r18,8(sp)
    8584:	20800e17 	ldw	r2,56(r4)
    8588:	dc400115 	stw	r17,4(sp)
    858c:	1000021e 	bne	r2,zero,8598 <__sfp+0x38>
    8590:	00083540 	call	8354 <__sinit.part.1>
    8594:	81000017 	ldw	r4,0(r16)
    8598:	2480b804 	addi	r18,r4,736
    859c:	047fffc4 	movi	r17,-1
    85a0:	91000117 	ldw	r4,4(r18)
    85a4:	94000217 	ldw	r16,8(r18)
    85a8:	213fffc4 	addi	r4,r4,-1
    85ac:	20000a16 	blt	r4,zero,85d8 <__sfp+0x78>
    85b0:	8080030f 	ldh	r2,12(r16)
    85b4:	10000c26 	beq	r2,zero,85e8 <__sfp+0x88>
    85b8:	80c01d04 	addi	r3,r16,116
    85bc:	00000206 	br	85c8 <__sfp+0x68>
    85c0:	18bfe60f 	ldh	r2,-104(r3)
    85c4:	10000826 	beq	r2,zero,85e8 <__sfp+0x88>
    85c8:	213fffc4 	addi	r4,r4,-1
    85cc:	1c3ffd04 	addi	r16,r3,-12
    85d0:	18c01a04 	addi	r3,r3,104
    85d4:	247ffa1e 	bne	r4,r17,85c0 <__alt_mem_onchip_memory+0xf78085c0>
    85d8:	90800017 	ldw	r2,0(r18)
    85dc:	10001d26 	beq	r2,zero,8654 <__sfp+0xf4>
    85e0:	1025883a 	mov	r18,r2
    85e4:	003fee06 	br	85a0 <__alt_mem_onchip_memory+0xf78085a0>
    85e8:	00bfffc4 	movi	r2,-1
    85ec:	8080038d 	sth	r2,14(r16)
    85f0:	00800044 	movi	r2,1
    85f4:	8080030d 	sth	r2,12(r16)
    85f8:	80001915 	stw	zero,100(r16)
    85fc:	80000015 	stw	zero,0(r16)
    8600:	80000215 	stw	zero,8(r16)
    8604:	80000115 	stw	zero,4(r16)
    8608:	80000415 	stw	zero,16(r16)
    860c:	80000515 	stw	zero,20(r16)
    8610:	80000615 	stw	zero,24(r16)
    8614:	01800204 	movi	r6,8
    8618:	000b883a 	mov	r5,zero
    861c:	81001704 	addi	r4,r16,92
    8620:	0009fe00 	call	9fe0 <memset>
    8624:	8005883a 	mov	r2,r16
    8628:	80000c15 	stw	zero,48(r16)
    862c:	80000d15 	stw	zero,52(r16)
    8630:	80001115 	stw	zero,68(r16)
    8634:	80001215 	stw	zero,72(r16)
    8638:	dfc00417 	ldw	ra,16(sp)
    863c:	dcc00317 	ldw	r19,12(sp)
    8640:	dc800217 	ldw	r18,8(sp)
    8644:	dc400117 	ldw	r17,4(sp)
    8648:	dc000017 	ldw	r16,0(sp)
    864c:	dec00504 	addi	sp,sp,20
    8650:	f800283a 	ret
    8654:	01400104 	movi	r5,4
    8658:	9809883a 	mov	r4,r19
    865c:	00084f80 	call	84f8 <__sfmoreglue>
    8660:	90800015 	stw	r2,0(r18)
    8664:	103fde1e 	bne	r2,zero,85e0 <__alt_mem_onchip_memory+0xf78085e0>
    8668:	00800304 	movi	r2,12
    866c:	98800015 	stw	r2,0(r19)
    8670:	0005883a 	mov	r2,zero
    8674:	003ff006 	br	8638 <__alt_mem_onchip_memory+0xf7808638>

00008678 <_cleanup>:
    8678:	00800074 	movhi	r2,1
    867c:	108d7604 	addi	r2,r2,13784
    8680:	11000017 	ldw	r4,0(r2)
    8684:	01400074 	movhi	r5,1
    8688:	2974d504 	addi	r5,r5,-11436
    868c:	00090941 	jmpi	9094 <_fwalk_reent>

00008690 <__sinit>:
    8690:	20800e17 	ldw	r2,56(r4)
    8694:	10000126 	beq	r2,zero,869c <__sinit+0xc>
    8698:	f800283a 	ret
    869c:	00083541 	jmpi	8354 <__sinit.part.1>

000086a0 <__sfp_lock_acquire>:
    86a0:	f800283a 	ret

000086a4 <__sfp_lock_release>:
    86a4:	f800283a 	ret

000086a8 <__sinit_lock_acquire>:
    86a8:	f800283a 	ret

000086ac <__sinit_lock_release>:
    86ac:	f800283a 	ret

000086b0 <__fp_lock_all>:
    86b0:	00800074 	movhi	r2,1
    86b4:	108d7704 	addi	r2,r2,13788
    86b8:	11000017 	ldw	r4,0(r2)
    86bc:	01400074 	movhi	r5,1
    86c0:	29613c04 	addi	r5,r5,-31504
    86c4:	0008fd01 	jmpi	8fd0 <_fwalk>

000086c8 <__fp_unlock_all>:
    86c8:	00800074 	movhi	r2,1
    86cc:	108d7704 	addi	r2,r2,13788
    86d0:	11000017 	ldw	r4,0(r2)
    86d4:	01400074 	movhi	r5,1
    86d8:	2960d004 	addi	r5,r5,-31936
    86dc:	0008fd01 	jmpi	8fd0 <_fwalk>

000086e0 <_malloc_trim_r>:
    86e0:	defffb04 	addi	sp,sp,-20
    86e4:	dcc00315 	stw	r19,12(sp)
    86e8:	04c00074 	movhi	r19,1
    86ec:	dc800215 	stw	r18,8(sp)
    86f0:	dc400115 	stw	r17,4(sp)
    86f4:	dc000015 	stw	r16,0(sp)
    86f8:	dfc00415 	stw	ra,16(sp)
    86fc:	2821883a 	mov	r16,r5
    8700:	9cc7ed04 	addi	r19,r19,8116
    8704:	2025883a 	mov	r18,r4
    8708:	000efa00 	call	efa0 <__malloc_lock>
    870c:	98800217 	ldw	r2,8(r19)
    8710:	14400117 	ldw	r17,4(r2)
    8714:	00bfff04 	movi	r2,-4
    8718:	88a2703a 	and	r17,r17,r2
    871c:	8c21c83a 	sub	r16,r17,r16
    8720:	8403fbc4 	addi	r16,r16,4079
    8724:	8020d33a 	srli	r16,r16,12
    8728:	0083ffc4 	movi	r2,4095
    872c:	843fffc4 	addi	r16,r16,-1
    8730:	8020933a 	slli	r16,r16,12
    8734:	1400060e 	bge	r2,r16,8750 <_malloc_trim_r+0x70>
    8738:	000b883a 	mov	r5,zero
    873c:	9009883a 	mov	r4,r18
    8740:	000b7d00 	call	b7d0 <_sbrk_r>
    8744:	98c00217 	ldw	r3,8(r19)
    8748:	1c47883a 	add	r3,r3,r17
    874c:	10c00a26 	beq	r2,r3,8778 <_malloc_trim_r+0x98>
    8750:	9009883a 	mov	r4,r18
    8754:	000efc40 	call	efc4 <__malloc_unlock>
    8758:	0005883a 	mov	r2,zero
    875c:	dfc00417 	ldw	ra,16(sp)
    8760:	dcc00317 	ldw	r19,12(sp)
    8764:	dc800217 	ldw	r18,8(sp)
    8768:	dc400117 	ldw	r17,4(sp)
    876c:	dc000017 	ldw	r16,0(sp)
    8770:	dec00504 	addi	sp,sp,20
    8774:	f800283a 	ret
    8778:	040bc83a 	sub	r5,zero,r16
    877c:	9009883a 	mov	r4,r18
    8780:	000b7d00 	call	b7d0 <_sbrk_r>
    8784:	00ffffc4 	movi	r3,-1
    8788:	10c00d26 	beq	r2,r3,87c0 <_malloc_trim_r+0xe0>
    878c:	00c00074 	movhi	r3,1
    8790:	18d45f04 	addi	r3,r3,20860
    8794:	18800017 	ldw	r2,0(r3)
    8798:	99000217 	ldw	r4,8(r19)
    879c:	8c23c83a 	sub	r17,r17,r16
    87a0:	8c400054 	ori	r17,r17,1
    87a4:	1421c83a 	sub	r16,r2,r16
    87a8:	24400115 	stw	r17,4(r4)
    87ac:	9009883a 	mov	r4,r18
    87b0:	1c000015 	stw	r16,0(r3)
    87b4:	000efc40 	call	efc4 <__malloc_unlock>
    87b8:	00800044 	movi	r2,1
    87bc:	003fe706 	br	875c <__alt_mem_onchip_memory+0xf780875c>
    87c0:	000b883a 	mov	r5,zero
    87c4:	9009883a 	mov	r4,r18
    87c8:	000b7d00 	call	b7d0 <_sbrk_r>
    87cc:	99000217 	ldw	r4,8(r19)
    87d0:	014003c4 	movi	r5,15
    87d4:	1107c83a 	sub	r3,r2,r4
    87d8:	28ffdd0e 	bge	r5,r3,8750 <__alt_mem_onchip_memory+0xf7808750>
    87dc:	01400074 	movhi	r5,1
    87e0:	294d7904 	addi	r5,r5,13796
    87e4:	29400017 	ldw	r5,0(r5)
    87e8:	18c00054 	ori	r3,r3,1
    87ec:	20c00115 	stw	r3,4(r4)
    87f0:	00c00074 	movhi	r3,1
    87f4:	1145c83a 	sub	r2,r2,r5
    87f8:	18d45f04 	addi	r3,r3,20860
    87fc:	18800015 	stw	r2,0(r3)
    8800:	003fd306 	br	8750 <__alt_mem_onchip_memory+0xf7808750>

00008804 <_free_r>:
    8804:	28004126 	beq	r5,zero,890c <_free_r+0x108>
    8808:	defffd04 	addi	sp,sp,-12
    880c:	dc400115 	stw	r17,4(sp)
    8810:	dc000015 	stw	r16,0(sp)
    8814:	2023883a 	mov	r17,r4
    8818:	2821883a 	mov	r16,r5
    881c:	dfc00215 	stw	ra,8(sp)
    8820:	000efa00 	call	efa0 <__malloc_lock>
    8824:	81ffff17 	ldw	r7,-4(r16)
    8828:	00bfff84 	movi	r2,-2
    882c:	01000074 	movhi	r4,1
    8830:	81bffe04 	addi	r6,r16,-8
    8834:	3884703a 	and	r2,r7,r2
    8838:	2107ed04 	addi	r4,r4,8116
    883c:	308b883a 	add	r5,r6,r2
    8840:	2a400117 	ldw	r9,4(r5)
    8844:	22000217 	ldw	r8,8(r4)
    8848:	00ffff04 	movi	r3,-4
    884c:	48c6703a 	and	r3,r9,r3
    8850:	2a005726 	beq	r5,r8,89b0 <_free_r+0x1ac>
    8854:	28c00115 	stw	r3,4(r5)
    8858:	39c0004c 	andi	r7,r7,1
    885c:	3800091e 	bne	r7,zero,8884 <_free_r+0x80>
    8860:	823ffe17 	ldw	r8,-8(r16)
    8864:	22400204 	addi	r9,r4,8
    8868:	320dc83a 	sub	r6,r6,r8
    886c:	31c00217 	ldw	r7,8(r6)
    8870:	1205883a 	add	r2,r2,r8
    8874:	3a406526 	beq	r7,r9,8a0c <_free_r+0x208>
    8878:	32000317 	ldw	r8,12(r6)
    887c:	3a000315 	stw	r8,12(r7)
    8880:	41c00215 	stw	r7,8(r8)
    8884:	28cf883a 	add	r7,r5,r3
    8888:	39c00117 	ldw	r7,4(r7)
    888c:	39c0004c 	andi	r7,r7,1
    8890:	38003a26 	beq	r7,zero,897c <_free_r+0x178>
    8894:	10c00054 	ori	r3,r2,1
    8898:	30c00115 	stw	r3,4(r6)
    889c:	3087883a 	add	r3,r6,r2
    88a0:	18800015 	stw	r2,0(r3)
    88a4:	00c07fc4 	movi	r3,511
    88a8:	18801936 	bltu	r3,r2,8910 <_free_r+0x10c>
    88ac:	1004d0fa 	srli	r2,r2,3
    88b0:	01c00044 	movi	r7,1
    88b4:	21400117 	ldw	r5,4(r4)
    88b8:	10c00044 	addi	r3,r2,1
    88bc:	18c7883a 	add	r3,r3,r3
    88c0:	1005d0ba 	srai	r2,r2,2
    88c4:	18c7883a 	add	r3,r3,r3
    88c8:	18c7883a 	add	r3,r3,r3
    88cc:	1907883a 	add	r3,r3,r4
    88d0:	3884983a 	sll	r2,r7,r2
    88d4:	19c00017 	ldw	r7,0(r3)
    88d8:	1a3ffe04 	addi	r8,r3,-8
    88dc:	1144b03a 	or	r2,r2,r5
    88e0:	32000315 	stw	r8,12(r6)
    88e4:	31c00215 	stw	r7,8(r6)
    88e8:	20800115 	stw	r2,4(r4)
    88ec:	19800015 	stw	r6,0(r3)
    88f0:	39800315 	stw	r6,12(r7)
    88f4:	8809883a 	mov	r4,r17
    88f8:	dfc00217 	ldw	ra,8(sp)
    88fc:	dc400117 	ldw	r17,4(sp)
    8900:	dc000017 	ldw	r16,0(sp)
    8904:	dec00304 	addi	sp,sp,12
    8908:	000efc41 	jmpi	efc4 <__malloc_unlock>
    890c:	f800283a 	ret
    8910:	100ad27a 	srli	r5,r2,9
    8914:	00c00104 	movi	r3,4
    8918:	19404a36 	bltu	r3,r5,8a44 <_free_r+0x240>
    891c:	100ad1ba 	srli	r5,r2,6
    8920:	28c00e44 	addi	r3,r5,57
    8924:	18c7883a 	add	r3,r3,r3
    8928:	29400e04 	addi	r5,r5,56
    892c:	18c7883a 	add	r3,r3,r3
    8930:	18c7883a 	add	r3,r3,r3
    8934:	1909883a 	add	r4,r3,r4
    8938:	20c00017 	ldw	r3,0(r4)
    893c:	01c00074 	movhi	r7,1
    8940:	213ffe04 	addi	r4,r4,-8
    8944:	39c7ed04 	addi	r7,r7,8116
    8948:	20c04426 	beq	r4,r3,8a5c <_free_r+0x258>
    894c:	01ffff04 	movi	r7,-4
    8950:	19400117 	ldw	r5,4(r3)
    8954:	29ca703a 	and	r5,r5,r7
    8958:	1140022e 	bgeu	r2,r5,8964 <_free_r+0x160>
    895c:	18c00217 	ldw	r3,8(r3)
    8960:	20fffb1e 	bne	r4,r3,8950 <__alt_mem_onchip_memory+0xf7808950>
    8964:	19000317 	ldw	r4,12(r3)
    8968:	31000315 	stw	r4,12(r6)
    896c:	30c00215 	stw	r3,8(r6)
    8970:	21800215 	stw	r6,8(r4)
    8974:	19800315 	stw	r6,12(r3)
    8978:	003fde06 	br	88f4 <__alt_mem_onchip_memory+0xf78088f4>
    897c:	29c00217 	ldw	r7,8(r5)
    8980:	10c5883a 	add	r2,r2,r3
    8984:	00c00074 	movhi	r3,1
    8988:	18c7ef04 	addi	r3,r3,8124
    898c:	38c03b26 	beq	r7,r3,8a7c <_free_r+0x278>
    8990:	2a000317 	ldw	r8,12(r5)
    8994:	11400054 	ori	r5,r2,1
    8998:	3087883a 	add	r3,r6,r2
    899c:	3a000315 	stw	r8,12(r7)
    89a0:	41c00215 	stw	r7,8(r8)
    89a4:	31400115 	stw	r5,4(r6)
    89a8:	18800015 	stw	r2,0(r3)
    89ac:	003fbd06 	br	88a4 <__alt_mem_onchip_memory+0xf78088a4>
    89b0:	39c0004c 	andi	r7,r7,1
    89b4:	10c5883a 	add	r2,r2,r3
    89b8:	3800071e 	bne	r7,zero,89d8 <_free_r+0x1d4>
    89bc:	81fffe17 	ldw	r7,-8(r16)
    89c0:	31cdc83a 	sub	r6,r6,r7
    89c4:	30c00317 	ldw	r3,12(r6)
    89c8:	31400217 	ldw	r5,8(r6)
    89cc:	11c5883a 	add	r2,r2,r7
    89d0:	28c00315 	stw	r3,12(r5)
    89d4:	19400215 	stw	r5,8(r3)
    89d8:	10c00054 	ori	r3,r2,1
    89dc:	30c00115 	stw	r3,4(r6)
    89e0:	00c00074 	movhi	r3,1
    89e4:	18cd7a04 	addi	r3,r3,13800
    89e8:	18c00017 	ldw	r3,0(r3)
    89ec:	21800215 	stw	r6,8(r4)
    89f0:	10ffc036 	bltu	r2,r3,88f4 <__alt_mem_onchip_memory+0xf78088f4>
    89f4:	00800074 	movhi	r2,1
    89f8:	10945304 	addi	r2,r2,20812
    89fc:	11400017 	ldw	r5,0(r2)
    8a00:	8809883a 	mov	r4,r17
    8a04:	00086e00 	call	86e0 <_malloc_trim_r>
    8a08:	003fba06 	br	88f4 <__alt_mem_onchip_memory+0xf78088f4>
    8a0c:	28c9883a 	add	r4,r5,r3
    8a10:	21000117 	ldw	r4,4(r4)
    8a14:	2100004c 	andi	r4,r4,1
    8a18:	2000391e 	bne	r4,zero,8b00 <_free_r+0x2fc>
    8a1c:	29c00217 	ldw	r7,8(r5)
    8a20:	29000317 	ldw	r4,12(r5)
    8a24:	1885883a 	add	r2,r3,r2
    8a28:	10c00054 	ori	r3,r2,1
    8a2c:	39000315 	stw	r4,12(r7)
    8a30:	21c00215 	stw	r7,8(r4)
    8a34:	30c00115 	stw	r3,4(r6)
    8a38:	308d883a 	add	r6,r6,r2
    8a3c:	30800015 	stw	r2,0(r6)
    8a40:	003fac06 	br	88f4 <__alt_mem_onchip_memory+0xf78088f4>
    8a44:	00c00504 	movi	r3,20
    8a48:	19401536 	bltu	r3,r5,8aa0 <_free_r+0x29c>
    8a4c:	28c01704 	addi	r3,r5,92
    8a50:	18c7883a 	add	r3,r3,r3
    8a54:	294016c4 	addi	r5,r5,91
    8a58:	003fb406 	br	892c <__alt_mem_onchip_memory+0xf780892c>
    8a5c:	280bd0ba 	srai	r5,r5,2
    8a60:	00c00044 	movi	r3,1
    8a64:	38800117 	ldw	r2,4(r7)
    8a68:	194a983a 	sll	r5,r3,r5
    8a6c:	2007883a 	mov	r3,r4
    8a70:	2884b03a 	or	r2,r5,r2
    8a74:	38800115 	stw	r2,4(r7)
    8a78:	003fbb06 	br	8968 <__alt_mem_onchip_memory+0xf7808968>
    8a7c:	21800515 	stw	r6,20(r4)
    8a80:	21800415 	stw	r6,16(r4)
    8a84:	10c00054 	ori	r3,r2,1
    8a88:	31c00315 	stw	r7,12(r6)
    8a8c:	31c00215 	stw	r7,8(r6)
    8a90:	30c00115 	stw	r3,4(r6)
    8a94:	308d883a 	add	r6,r6,r2
    8a98:	30800015 	stw	r2,0(r6)
    8a9c:	003f9506 	br	88f4 <__alt_mem_onchip_memory+0xf78088f4>
    8aa0:	00c01504 	movi	r3,84
    8aa4:	19400536 	bltu	r3,r5,8abc <_free_r+0x2b8>
    8aa8:	100ad33a 	srli	r5,r2,12
    8aac:	28c01bc4 	addi	r3,r5,111
    8ab0:	18c7883a 	add	r3,r3,r3
    8ab4:	29401b84 	addi	r5,r5,110
    8ab8:	003f9c06 	br	892c <__alt_mem_onchip_memory+0xf780892c>
    8abc:	00c05504 	movi	r3,340
    8ac0:	19400536 	bltu	r3,r5,8ad8 <_free_r+0x2d4>
    8ac4:	100ad3fa 	srli	r5,r2,15
    8ac8:	28c01e04 	addi	r3,r5,120
    8acc:	18c7883a 	add	r3,r3,r3
    8ad0:	29401dc4 	addi	r5,r5,119
    8ad4:	003f9506 	br	892c <__alt_mem_onchip_memory+0xf780892c>
    8ad8:	00c15504 	movi	r3,1364
    8adc:	19400536 	bltu	r3,r5,8af4 <_free_r+0x2f0>
    8ae0:	100ad4ba 	srli	r5,r2,18
    8ae4:	28c01f44 	addi	r3,r5,125
    8ae8:	18c7883a 	add	r3,r3,r3
    8aec:	29401f04 	addi	r5,r5,124
    8af0:	003f8e06 	br	892c <__alt_mem_onchip_memory+0xf780892c>
    8af4:	00c03f84 	movi	r3,254
    8af8:	01401f84 	movi	r5,126
    8afc:	003f8b06 	br	892c <__alt_mem_onchip_memory+0xf780892c>
    8b00:	10c00054 	ori	r3,r2,1
    8b04:	30c00115 	stw	r3,4(r6)
    8b08:	308d883a 	add	r6,r6,r2
    8b0c:	30800015 	stw	r2,0(r6)
    8b10:	003f7806 	br	88f4 <__alt_mem_onchip_memory+0xf78088f4>

00008b14 <__sfvwrite_r>:
    8b14:	30800217 	ldw	r2,8(r6)
    8b18:	10006726 	beq	r2,zero,8cb8 <__sfvwrite_r+0x1a4>
    8b1c:	28c0030b 	ldhu	r3,12(r5)
    8b20:	defff404 	addi	sp,sp,-48
    8b24:	dd400715 	stw	r21,28(sp)
    8b28:	dd000615 	stw	r20,24(sp)
    8b2c:	dc000215 	stw	r16,8(sp)
    8b30:	dfc00b15 	stw	ra,44(sp)
    8b34:	df000a15 	stw	fp,40(sp)
    8b38:	ddc00915 	stw	r23,36(sp)
    8b3c:	dd800815 	stw	r22,32(sp)
    8b40:	dcc00515 	stw	r19,20(sp)
    8b44:	dc800415 	stw	r18,16(sp)
    8b48:	dc400315 	stw	r17,12(sp)
    8b4c:	1880020c 	andi	r2,r3,8
    8b50:	2821883a 	mov	r16,r5
    8b54:	202b883a 	mov	r21,r4
    8b58:	3029883a 	mov	r20,r6
    8b5c:	10002726 	beq	r2,zero,8bfc <__sfvwrite_r+0xe8>
    8b60:	28800417 	ldw	r2,16(r5)
    8b64:	10002526 	beq	r2,zero,8bfc <__sfvwrite_r+0xe8>
    8b68:	1880008c 	andi	r2,r3,2
    8b6c:	a4400017 	ldw	r17,0(r20)
    8b70:	10002a26 	beq	r2,zero,8c1c <__sfvwrite_r+0x108>
    8b74:	05a00034 	movhi	r22,32768
    8b78:	0027883a 	mov	r19,zero
    8b7c:	0025883a 	mov	r18,zero
    8b80:	b5bf0004 	addi	r22,r22,-1024
    8b84:	980d883a 	mov	r6,r19
    8b88:	a809883a 	mov	r4,r21
    8b8c:	90004626 	beq	r18,zero,8ca8 <__sfvwrite_r+0x194>
    8b90:	900f883a 	mov	r7,r18
    8b94:	b480022e 	bgeu	r22,r18,8ba0 <__sfvwrite_r+0x8c>
    8b98:	01e00034 	movhi	r7,32768
    8b9c:	39ff0004 	addi	r7,r7,-1024
    8ba0:	80800917 	ldw	r2,36(r16)
    8ba4:	81400717 	ldw	r5,28(r16)
    8ba8:	103ee83a 	callr	r2
    8bac:	0080570e 	bge	zero,r2,8d0c <__sfvwrite_r+0x1f8>
    8bb0:	a0c00217 	ldw	r3,8(r20)
    8bb4:	98a7883a 	add	r19,r19,r2
    8bb8:	90a5c83a 	sub	r18,r18,r2
    8bbc:	1885c83a 	sub	r2,r3,r2
    8bc0:	a0800215 	stw	r2,8(r20)
    8bc4:	103fef1e 	bne	r2,zero,8b84 <__alt_mem_onchip_memory+0xf7808b84>
    8bc8:	0005883a 	mov	r2,zero
    8bcc:	dfc00b17 	ldw	ra,44(sp)
    8bd0:	df000a17 	ldw	fp,40(sp)
    8bd4:	ddc00917 	ldw	r23,36(sp)
    8bd8:	dd800817 	ldw	r22,32(sp)
    8bdc:	dd400717 	ldw	r21,28(sp)
    8be0:	dd000617 	ldw	r20,24(sp)
    8be4:	dcc00517 	ldw	r19,20(sp)
    8be8:	dc800417 	ldw	r18,16(sp)
    8bec:	dc400317 	ldw	r17,12(sp)
    8bf0:	dc000217 	ldw	r16,8(sp)
    8bf4:	dec00c04 	addi	sp,sp,48
    8bf8:	f800283a 	ret
    8bfc:	800b883a 	mov	r5,r16
    8c00:	a809883a 	mov	r4,r21
    8c04:	00066bc0 	call	66bc <__swsetup_r>
    8c08:	1000eb1e 	bne	r2,zero,8fb8 <__sfvwrite_r+0x4a4>
    8c0c:	80c0030b 	ldhu	r3,12(r16)
    8c10:	a4400017 	ldw	r17,0(r20)
    8c14:	1880008c 	andi	r2,r3,2
    8c18:	103fd61e 	bne	r2,zero,8b74 <__alt_mem_onchip_memory+0xf7808b74>
    8c1c:	1880004c 	andi	r2,r3,1
    8c20:	10003f1e 	bne	r2,zero,8d20 <__sfvwrite_r+0x20c>
    8c24:	0039883a 	mov	fp,zero
    8c28:	0025883a 	mov	r18,zero
    8c2c:	90001a26 	beq	r18,zero,8c98 <__sfvwrite_r+0x184>
    8c30:	1880800c 	andi	r2,r3,512
    8c34:	84c00217 	ldw	r19,8(r16)
    8c38:	10002126 	beq	r2,zero,8cc0 <__sfvwrite_r+0x1ac>
    8c3c:	982f883a 	mov	r23,r19
    8c40:	94c09336 	bltu	r18,r19,8e90 <__sfvwrite_r+0x37c>
    8c44:	1881200c 	andi	r2,r3,1152
    8c48:	10009e1e 	bne	r2,zero,8ec4 <__sfvwrite_r+0x3b0>
    8c4c:	81000017 	ldw	r4,0(r16)
    8c50:	b80d883a 	mov	r6,r23
    8c54:	e00b883a 	mov	r5,fp
    8c58:	0009e840 	call	9e84 <memmove>
    8c5c:	80c00217 	ldw	r3,8(r16)
    8c60:	81000017 	ldw	r4,0(r16)
    8c64:	9005883a 	mov	r2,r18
    8c68:	1ce7c83a 	sub	r19,r3,r19
    8c6c:	25cf883a 	add	r7,r4,r23
    8c70:	84c00215 	stw	r19,8(r16)
    8c74:	81c00015 	stw	r7,0(r16)
    8c78:	a0c00217 	ldw	r3,8(r20)
    8c7c:	e0b9883a 	add	fp,fp,r2
    8c80:	90a5c83a 	sub	r18,r18,r2
    8c84:	18a7c83a 	sub	r19,r3,r2
    8c88:	a4c00215 	stw	r19,8(r20)
    8c8c:	983fce26 	beq	r19,zero,8bc8 <__alt_mem_onchip_memory+0xf7808bc8>
    8c90:	80c0030b 	ldhu	r3,12(r16)
    8c94:	903fe61e 	bne	r18,zero,8c30 <__alt_mem_onchip_memory+0xf7808c30>
    8c98:	8f000017 	ldw	fp,0(r17)
    8c9c:	8c800117 	ldw	r18,4(r17)
    8ca0:	8c400204 	addi	r17,r17,8
    8ca4:	003fe106 	br	8c2c <__alt_mem_onchip_memory+0xf7808c2c>
    8ca8:	8cc00017 	ldw	r19,0(r17)
    8cac:	8c800117 	ldw	r18,4(r17)
    8cb0:	8c400204 	addi	r17,r17,8
    8cb4:	003fb306 	br	8b84 <__alt_mem_onchip_memory+0xf7808b84>
    8cb8:	0005883a 	mov	r2,zero
    8cbc:	f800283a 	ret
    8cc0:	81000017 	ldw	r4,0(r16)
    8cc4:	80800417 	ldw	r2,16(r16)
    8cc8:	11005736 	bltu	r2,r4,8e28 <__sfvwrite_r+0x314>
    8ccc:	85c00517 	ldw	r23,20(r16)
    8cd0:	95c05536 	bltu	r18,r23,8e28 <__sfvwrite_r+0x314>
    8cd4:	00a00034 	movhi	r2,32768
    8cd8:	10bfffc4 	addi	r2,r2,-1
    8cdc:	9009883a 	mov	r4,r18
    8ce0:	1480012e 	bgeu	r2,r18,8ce8 <__sfvwrite_r+0x1d4>
    8ce4:	1009883a 	mov	r4,r2
    8ce8:	b80b883a 	mov	r5,r23
    8cec:	0003f040 	call	3f04 <__divsi3>
    8cf0:	15cf383a 	mul	r7,r2,r23
    8cf4:	81400717 	ldw	r5,28(r16)
    8cf8:	80800917 	ldw	r2,36(r16)
    8cfc:	e00d883a 	mov	r6,fp
    8d00:	a809883a 	mov	r4,r21
    8d04:	103ee83a 	callr	r2
    8d08:	00bfdb16 	blt	zero,r2,8c78 <__alt_mem_onchip_memory+0xf7808c78>
    8d0c:	8080030b 	ldhu	r2,12(r16)
    8d10:	10801014 	ori	r2,r2,64
    8d14:	8080030d 	sth	r2,12(r16)
    8d18:	00bfffc4 	movi	r2,-1
    8d1c:	003fab06 	br	8bcc <__alt_mem_onchip_memory+0xf7808bcc>
    8d20:	0027883a 	mov	r19,zero
    8d24:	0011883a 	mov	r8,zero
    8d28:	0039883a 	mov	fp,zero
    8d2c:	0025883a 	mov	r18,zero
    8d30:	90001f26 	beq	r18,zero,8db0 <__sfvwrite_r+0x29c>
    8d34:	40005a26 	beq	r8,zero,8ea0 <__sfvwrite_r+0x38c>
    8d38:	982d883a 	mov	r22,r19
    8d3c:	94c0012e 	bgeu	r18,r19,8d44 <__sfvwrite_r+0x230>
    8d40:	902d883a 	mov	r22,r18
    8d44:	81000017 	ldw	r4,0(r16)
    8d48:	80800417 	ldw	r2,16(r16)
    8d4c:	b02f883a 	mov	r23,r22
    8d50:	81c00517 	ldw	r7,20(r16)
    8d54:	1100032e 	bgeu	r2,r4,8d64 <__sfvwrite_r+0x250>
    8d58:	80c00217 	ldw	r3,8(r16)
    8d5c:	38c7883a 	add	r3,r7,r3
    8d60:	1d801816 	blt	r3,r22,8dc4 <__sfvwrite_r+0x2b0>
    8d64:	b1c03e16 	blt	r22,r7,8e60 <__sfvwrite_r+0x34c>
    8d68:	80800917 	ldw	r2,36(r16)
    8d6c:	81400717 	ldw	r5,28(r16)
    8d70:	e00d883a 	mov	r6,fp
    8d74:	da000115 	stw	r8,4(sp)
    8d78:	a809883a 	mov	r4,r21
    8d7c:	103ee83a 	callr	r2
    8d80:	102f883a 	mov	r23,r2
    8d84:	da000117 	ldw	r8,4(sp)
    8d88:	00bfe00e 	bge	zero,r2,8d0c <__alt_mem_onchip_memory+0xf7808d0c>
    8d8c:	9de7c83a 	sub	r19,r19,r23
    8d90:	98001f26 	beq	r19,zero,8e10 <__sfvwrite_r+0x2fc>
    8d94:	a0800217 	ldw	r2,8(r20)
    8d98:	e5f9883a 	add	fp,fp,r23
    8d9c:	95e5c83a 	sub	r18,r18,r23
    8da0:	15efc83a 	sub	r23,r2,r23
    8da4:	a5c00215 	stw	r23,8(r20)
    8da8:	b83f8726 	beq	r23,zero,8bc8 <__alt_mem_onchip_memory+0xf7808bc8>
    8dac:	903fe11e 	bne	r18,zero,8d34 <__alt_mem_onchip_memory+0xf7808d34>
    8db0:	8f000017 	ldw	fp,0(r17)
    8db4:	8c800117 	ldw	r18,4(r17)
    8db8:	0011883a 	mov	r8,zero
    8dbc:	8c400204 	addi	r17,r17,8
    8dc0:	003fdb06 	br	8d30 <__alt_mem_onchip_memory+0xf7808d30>
    8dc4:	180d883a 	mov	r6,r3
    8dc8:	e00b883a 	mov	r5,fp
    8dcc:	da000115 	stw	r8,4(sp)
    8dd0:	d8c00015 	stw	r3,0(sp)
    8dd4:	0009e840 	call	9e84 <memmove>
    8dd8:	d8c00017 	ldw	r3,0(sp)
    8ddc:	80800017 	ldw	r2,0(r16)
    8de0:	800b883a 	mov	r5,r16
    8de4:	a809883a 	mov	r4,r21
    8de8:	10c5883a 	add	r2,r2,r3
    8dec:	80800015 	stw	r2,0(r16)
    8df0:	d8c00015 	stw	r3,0(sp)
    8df4:	00082b40 	call	82b4 <_fflush_r>
    8df8:	d8c00017 	ldw	r3,0(sp)
    8dfc:	da000117 	ldw	r8,4(sp)
    8e00:	103fc21e 	bne	r2,zero,8d0c <__alt_mem_onchip_memory+0xf7808d0c>
    8e04:	182f883a 	mov	r23,r3
    8e08:	9de7c83a 	sub	r19,r19,r23
    8e0c:	983fe11e 	bne	r19,zero,8d94 <__alt_mem_onchip_memory+0xf7808d94>
    8e10:	800b883a 	mov	r5,r16
    8e14:	a809883a 	mov	r4,r21
    8e18:	00082b40 	call	82b4 <_fflush_r>
    8e1c:	103fbb1e 	bne	r2,zero,8d0c <__alt_mem_onchip_memory+0xf7808d0c>
    8e20:	0011883a 	mov	r8,zero
    8e24:	003fdb06 	br	8d94 <__alt_mem_onchip_memory+0xf7808d94>
    8e28:	94c0012e 	bgeu	r18,r19,8e30 <__sfvwrite_r+0x31c>
    8e2c:	9027883a 	mov	r19,r18
    8e30:	980d883a 	mov	r6,r19
    8e34:	e00b883a 	mov	r5,fp
    8e38:	0009e840 	call	9e84 <memmove>
    8e3c:	80800217 	ldw	r2,8(r16)
    8e40:	80c00017 	ldw	r3,0(r16)
    8e44:	14c5c83a 	sub	r2,r2,r19
    8e48:	1cc7883a 	add	r3,r3,r19
    8e4c:	80800215 	stw	r2,8(r16)
    8e50:	80c00015 	stw	r3,0(r16)
    8e54:	10004326 	beq	r2,zero,8f64 <__sfvwrite_r+0x450>
    8e58:	9805883a 	mov	r2,r19
    8e5c:	003f8606 	br	8c78 <__alt_mem_onchip_memory+0xf7808c78>
    8e60:	b00d883a 	mov	r6,r22
    8e64:	e00b883a 	mov	r5,fp
    8e68:	da000115 	stw	r8,4(sp)
    8e6c:	0009e840 	call	9e84 <memmove>
    8e70:	80800217 	ldw	r2,8(r16)
    8e74:	80c00017 	ldw	r3,0(r16)
    8e78:	da000117 	ldw	r8,4(sp)
    8e7c:	1585c83a 	sub	r2,r2,r22
    8e80:	1dad883a 	add	r22,r3,r22
    8e84:	80800215 	stw	r2,8(r16)
    8e88:	85800015 	stw	r22,0(r16)
    8e8c:	003fbf06 	br	8d8c <__alt_mem_onchip_memory+0xf7808d8c>
    8e90:	81000017 	ldw	r4,0(r16)
    8e94:	9027883a 	mov	r19,r18
    8e98:	902f883a 	mov	r23,r18
    8e9c:	003f6c06 	br	8c50 <__alt_mem_onchip_memory+0xf7808c50>
    8ea0:	900d883a 	mov	r6,r18
    8ea4:	01400284 	movi	r5,10
    8ea8:	e009883a 	mov	r4,fp
    8eac:	0009c580 	call	9c58 <memchr>
    8eb0:	10003e26 	beq	r2,zero,8fac <__sfvwrite_r+0x498>
    8eb4:	10800044 	addi	r2,r2,1
    8eb8:	1727c83a 	sub	r19,r2,fp
    8ebc:	02000044 	movi	r8,1
    8ec0:	003f9d06 	br	8d38 <__alt_mem_onchip_memory+0xf7808d38>
    8ec4:	80800517 	ldw	r2,20(r16)
    8ec8:	81400417 	ldw	r5,16(r16)
    8ecc:	81c00017 	ldw	r7,0(r16)
    8ed0:	10a7883a 	add	r19,r2,r2
    8ed4:	9885883a 	add	r2,r19,r2
    8ed8:	1026d7fa 	srli	r19,r2,31
    8edc:	396dc83a 	sub	r22,r7,r5
    8ee0:	b1000044 	addi	r4,r22,1
    8ee4:	9885883a 	add	r2,r19,r2
    8ee8:	1027d07a 	srai	r19,r2,1
    8eec:	2485883a 	add	r2,r4,r18
    8ef0:	980d883a 	mov	r6,r19
    8ef4:	9880022e 	bgeu	r19,r2,8f00 <__sfvwrite_r+0x3ec>
    8ef8:	1027883a 	mov	r19,r2
    8efc:	100d883a 	mov	r6,r2
    8f00:	18c1000c 	andi	r3,r3,1024
    8f04:	18001c26 	beq	r3,zero,8f78 <__sfvwrite_r+0x464>
    8f08:	300b883a 	mov	r5,r6
    8f0c:	a809883a 	mov	r4,r21
    8f10:	000944c0 	call	944c <_malloc_r>
    8f14:	102f883a 	mov	r23,r2
    8f18:	10002926 	beq	r2,zero,8fc0 <__sfvwrite_r+0x4ac>
    8f1c:	81400417 	ldw	r5,16(r16)
    8f20:	b00d883a 	mov	r6,r22
    8f24:	1009883a 	mov	r4,r2
    8f28:	0009d3c0 	call	9d3c <memcpy>
    8f2c:	8080030b 	ldhu	r2,12(r16)
    8f30:	00fedfc4 	movi	r3,-1153
    8f34:	10c4703a 	and	r2,r2,r3
    8f38:	10802014 	ori	r2,r2,128
    8f3c:	8080030d 	sth	r2,12(r16)
    8f40:	bd89883a 	add	r4,r23,r22
    8f44:	9d8fc83a 	sub	r7,r19,r22
    8f48:	85c00415 	stw	r23,16(r16)
    8f4c:	84c00515 	stw	r19,20(r16)
    8f50:	81000015 	stw	r4,0(r16)
    8f54:	9027883a 	mov	r19,r18
    8f58:	81c00215 	stw	r7,8(r16)
    8f5c:	902f883a 	mov	r23,r18
    8f60:	003f3b06 	br	8c50 <__alt_mem_onchip_memory+0xf7808c50>
    8f64:	800b883a 	mov	r5,r16
    8f68:	a809883a 	mov	r4,r21
    8f6c:	00082b40 	call	82b4 <_fflush_r>
    8f70:	103fb926 	beq	r2,zero,8e58 <__alt_mem_onchip_memory+0xf7808e58>
    8f74:	003f6506 	br	8d0c <__alt_mem_onchip_memory+0xf7808d0c>
    8f78:	a809883a 	mov	r4,r21
    8f7c:	000b26c0 	call	b26c <_realloc_r>
    8f80:	102f883a 	mov	r23,r2
    8f84:	103fee1e 	bne	r2,zero,8f40 <__alt_mem_onchip_memory+0xf7808f40>
    8f88:	81400417 	ldw	r5,16(r16)
    8f8c:	a809883a 	mov	r4,r21
    8f90:	00088040 	call	8804 <_free_r>
    8f94:	8080030b 	ldhu	r2,12(r16)
    8f98:	00ffdfc4 	movi	r3,-129
    8f9c:	1884703a 	and	r2,r3,r2
    8fa0:	00c00304 	movi	r3,12
    8fa4:	a8c00015 	stw	r3,0(r21)
    8fa8:	003f5906 	br	8d10 <__alt_mem_onchip_memory+0xf7808d10>
    8fac:	94c00044 	addi	r19,r18,1
    8fb0:	02000044 	movi	r8,1
    8fb4:	003f6006 	br	8d38 <__alt_mem_onchip_memory+0xf7808d38>
    8fb8:	00bfffc4 	movi	r2,-1
    8fbc:	003f0306 	br	8bcc <__alt_mem_onchip_memory+0xf7808bcc>
    8fc0:	00800304 	movi	r2,12
    8fc4:	a8800015 	stw	r2,0(r21)
    8fc8:	8080030b 	ldhu	r2,12(r16)
    8fcc:	003f5006 	br	8d10 <__alt_mem_onchip_memory+0xf7808d10>

00008fd0 <_fwalk>:
    8fd0:	defff704 	addi	sp,sp,-36
    8fd4:	dd000415 	stw	r20,16(sp)
    8fd8:	dfc00815 	stw	ra,32(sp)
    8fdc:	ddc00715 	stw	r23,28(sp)
    8fe0:	dd800615 	stw	r22,24(sp)
    8fe4:	dd400515 	stw	r21,20(sp)
    8fe8:	dcc00315 	stw	r19,12(sp)
    8fec:	dc800215 	stw	r18,8(sp)
    8ff0:	dc400115 	stw	r17,4(sp)
    8ff4:	dc000015 	stw	r16,0(sp)
    8ff8:	2500b804 	addi	r20,r4,736
    8ffc:	a0002326 	beq	r20,zero,908c <_fwalk+0xbc>
    9000:	282b883a 	mov	r21,r5
    9004:	002f883a 	mov	r23,zero
    9008:	05800044 	movi	r22,1
    900c:	04ffffc4 	movi	r19,-1
    9010:	a4400117 	ldw	r17,4(r20)
    9014:	a4800217 	ldw	r18,8(r20)
    9018:	8c7fffc4 	addi	r17,r17,-1
    901c:	88000d16 	blt	r17,zero,9054 <_fwalk+0x84>
    9020:	94000304 	addi	r16,r18,12
    9024:	94800384 	addi	r18,r18,14
    9028:	8080000b 	ldhu	r2,0(r16)
    902c:	8c7fffc4 	addi	r17,r17,-1
    9030:	813ffd04 	addi	r4,r16,-12
    9034:	b080042e 	bgeu	r22,r2,9048 <_fwalk+0x78>
    9038:	9080000f 	ldh	r2,0(r18)
    903c:	14c00226 	beq	r2,r19,9048 <_fwalk+0x78>
    9040:	a83ee83a 	callr	r21
    9044:	b8aeb03a 	or	r23,r23,r2
    9048:	84001a04 	addi	r16,r16,104
    904c:	94801a04 	addi	r18,r18,104
    9050:	8cfff51e 	bne	r17,r19,9028 <__alt_mem_onchip_memory+0xf7809028>
    9054:	a5000017 	ldw	r20,0(r20)
    9058:	a03fed1e 	bne	r20,zero,9010 <__alt_mem_onchip_memory+0xf7809010>
    905c:	b805883a 	mov	r2,r23
    9060:	dfc00817 	ldw	ra,32(sp)
    9064:	ddc00717 	ldw	r23,28(sp)
    9068:	dd800617 	ldw	r22,24(sp)
    906c:	dd400517 	ldw	r21,20(sp)
    9070:	dd000417 	ldw	r20,16(sp)
    9074:	dcc00317 	ldw	r19,12(sp)
    9078:	dc800217 	ldw	r18,8(sp)
    907c:	dc400117 	ldw	r17,4(sp)
    9080:	dc000017 	ldw	r16,0(sp)
    9084:	dec00904 	addi	sp,sp,36
    9088:	f800283a 	ret
    908c:	002f883a 	mov	r23,zero
    9090:	003ff206 	br	905c <__alt_mem_onchip_memory+0xf780905c>

00009094 <_fwalk_reent>:
    9094:	defff704 	addi	sp,sp,-36
    9098:	dd000415 	stw	r20,16(sp)
    909c:	dfc00815 	stw	ra,32(sp)
    90a0:	ddc00715 	stw	r23,28(sp)
    90a4:	dd800615 	stw	r22,24(sp)
    90a8:	dd400515 	stw	r21,20(sp)
    90ac:	dcc00315 	stw	r19,12(sp)
    90b0:	dc800215 	stw	r18,8(sp)
    90b4:	dc400115 	stw	r17,4(sp)
    90b8:	dc000015 	stw	r16,0(sp)
    90bc:	2500b804 	addi	r20,r4,736
    90c0:	a0002326 	beq	r20,zero,9150 <_fwalk_reent+0xbc>
    90c4:	282b883a 	mov	r21,r5
    90c8:	2027883a 	mov	r19,r4
    90cc:	002f883a 	mov	r23,zero
    90d0:	05800044 	movi	r22,1
    90d4:	04bfffc4 	movi	r18,-1
    90d8:	a4400117 	ldw	r17,4(r20)
    90dc:	a4000217 	ldw	r16,8(r20)
    90e0:	8c7fffc4 	addi	r17,r17,-1
    90e4:	88000c16 	blt	r17,zero,9118 <_fwalk_reent+0x84>
    90e8:	84000304 	addi	r16,r16,12
    90ec:	8080000b 	ldhu	r2,0(r16)
    90f0:	8c7fffc4 	addi	r17,r17,-1
    90f4:	817ffd04 	addi	r5,r16,-12
    90f8:	b080052e 	bgeu	r22,r2,9110 <_fwalk_reent+0x7c>
    90fc:	8080008f 	ldh	r2,2(r16)
    9100:	9809883a 	mov	r4,r19
    9104:	14800226 	beq	r2,r18,9110 <_fwalk_reent+0x7c>
    9108:	a83ee83a 	callr	r21
    910c:	b8aeb03a 	or	r23,r23,r2
    9110:	84001a04 	addi	r16,r16,104
    9114:	8cbff51e 	bne	r17,r18,90ec <__alt_mem_onchip_memory+0xf78090ec>
    9118:	a5000017 	ldw	r20,0(r20)
    911c:	a03fee1e 	bne	r20,zero,90d8 <__alt_mem_onchip_memory+0xf78090d8>
    9120:	b805883a 	mov	r2,r23
    9124:	dfc00817 	ldw	ra,32(sp)
    9128:	ddc00717 	ldw	r23,28(sp)
    912c:	dd800617 	ldw	r22,24(sp)
    9130:	dd400517 	ldw	r21,20(sp)
    9134:	dd000417 	ldw	r20,16(sp)
    9138:	dcc00317 	ldw	r19,12(sp)
    913c:	dc800217 	ldw	r18,8(sp)
    9140:	dc400117 	ldw	r17,4(sp)
    9144:	dc000017 	ldw	r16,0(sp)
    9148:	dec00904 	addi	sp,sp,36
    914c:	f800283a 	ret
    9150:	002f883a 	mov	r23,zero
    9154:	003ff206 	br	9120 <__alt_mem_onchip_memory+0xf7809120>

00009158 <_gettimeofday_r>:
    9158:	defffd04 	addi	sp,sp,-12
    915c:	2805883a 	mov	r2,r5
    9160:	dc000015 	stw	r16,0(sp)
    9164:	04000074 	movhi	r16,1
    9168:	dc400115 	stw	r17,4(sp)
    916c:	84144d04 	addi	r16,r16,20788
    9170:	2023883a 	mov	r17,r4
    9174:	300b883a 	mov	r5,r6
    9178:	1009883a 	mov	r4,r2
    917c:	dfc00215 	stw	ra,8(sp)
    9180:	80000015 	stw	zero,0(r16)
    9184:	000ea540 	call	ea54 <gettimeofday>
    9188:	00ffffc4 	movi	r3,-1
    918c:	10c00526 	beq	r2,r3,91a4 <_gettimeofday_r+0x4c>
    9190:	dfc00217 	ldw	ra,8(sp)
    9194:	dc400117 	ldw	r17,4(sp)
    9198:	dc000017 	ldw	r16,0(sp)
    919c:	dec00304 	addi	sp,sp,12
    91a0:	f800283a 	ret
    91a4:	80c00017 	ldw	r3,0(r16)
    91a8:	183ff926 	beq	r3,zero,9190 <__alt_mem_onchip_memory+0xf7809190>
    91ac:	88c00015 	stw	r3,0(r17)
    91b0:	003ff706 	br	9190 <__alt_mem_onchip_memory+0xf7809190>

000091b4 <_setlocale_r>:
    91b4:	30001b26 	beq	r6,zero,9224 <_setlocale_r+0x70>
    91b8:	01400074 	movhi	r5,1
    91bc:	defffe04 	addi	sp,sp,-8
    91c0:	29462704 	addi	r5,r5,6300
    91c4:	3009883a 	mov	r4,r6
    91c8:	dc000015 	stw	r16,0(sp)
    91cc:	dfc00115 	stw	ra,4(sp)
    91d0:	3021883a 	mov	r16,r6
    91d4:	000b9600 	call	b960 <strcmp>
    91d8:	1000061e 	bne	r2,zero,91f4 <_setlocale_r+0x40>
    91dc:	00800074 	movhi	r2,1
    91e0:	10860804 	addi	r2,r2,6176
    91e4:	dfc00117 	ldw	ra,4(sp)
    91e8:	dc000017 	ldw	r16,0(sp)
    91ec:	dec00204 	addi	sp,sp,8
    91f0:	f800283a 	ret
    91f4:	01400074 	movhi	r5,1
    91f8:	29460804 	addi	r5,r5,6176
    91fc:	8009883a 	mov	r4,r16
    9200:	000b9600 	call	b960 <strcmp>
    9204:	103ff526 	beq	r2,zero,91dc <__alt_mem_onchip_memory+0xf78091dc>
    9208:	01400074 	movhi	r5,1
    920c:	29461204 	addi	r5,r5,6216
    9210:	8009883a 	mov	r4,r16
    9214:	000b9600 	call	b960 <strcmp>
    9218:	103ff026 	beq	r2,zero,91dc <__alt_mem_onchip_memory+0xf78091dc>
    921c:	0005883a 	mov	r2,zero
    9220:	003ff006 	br	91e4 <__alt_mem_onchip_memory+0xf78091e4>
    9224:	00800074 	movhi	r2,1
    9228:	10860804 	addi	r2,r2,6176
    922c:	f800283a 	ret

00009230 <__locale_charset>:
    9230:	00800074 	movhi	r2,1
    9234:	1087d704 	addi	r2,r2,8028
    9238:	f800283a 	ret

0000923c <__locale_mb_cur_max>:
    923c:	00800074 	movhi	r2,1
    9240:	108d7804 	addi	r2,r2,13792
    9244:	10800017 	ldw	r2,0(r2)
    9248:	f800283a 	ret

0000924c <__locale_msgcharset>:
    924c:	00800074 	movhi	r2,1
    9250:	1087cf04 	addi	r2,r2,7996
    9254:	f800283a 	ret

00009258 <__locale_cjk_lang>:
    9258:	0005883a 	mov	r2,zero
    925c:	f800283a 	ret

00009260 <_localeconv_r>:
    9260:	00800074 	movhi	r2,1
    9264:	1087df04 	addi	r2,r2,8060
    9268:	f800283a 	ret

0000926c <setlocale>:
    926c:	00800074 	movhi	r2,1
    9270:	108d7704 	addi	r2,r2,13788
    9274:	280d883a 	mov	r6,r5
    9278:	200b883a 	mov	r5,r4
    927c:	11000017 	ldw	r4,0(r2)
    9280:	00091b41 	jmpi	91b4 <_setlocale_r>

00009284 <localeconv>:
    9284:	00800074 	movhi	r2,1
    9288:	1087df04 	addi	r2,r2,8060
    928c:	f800283a 	ret

00009290 <__smakebuf_r>:
    9290:	2880030b 	ldhu	r2,12(r5)
    9294:	10c0008c 	andi	r3,r2,2
    9298:	1800411e 	bne	r3,zero,93a0 <__smakebuf_r+0x110>
    929c:	deffec04 	addi	sp,sp,-80
    92a0:	dc000f15 	stw	r16,60(sp)
    92a4:	2821883a 	mov	r16,r5
    92a8:	2940038f 	ldh	r5,14(r5)
    92ac:	dc401015 	stw	r17,64(sp)
    92b0:	dfc01315 	stw	ra,76(sp)
    92b4:	dcc01215 	stw	r19,72(sp)
    92b8:	dc801115 	stw	r18,68(sp)
    92bc:	2023883a 	mov	r17,r4
    92c0:	28001c16 	blt	r5,zero,9334 <__smakebuf_r+0xa4>
    92c4:	d80d883a 	mov	r6,sp
    92c8:	000d6600 	call	d660 <_fstat_r>
    92cc:	10001816 	blt	r2,zero,9330 <__smakebuf_r+0xa0>
    92d0:	d8800117 	ldw	r2,4(sp)
    92d4:	00e00014 	movui	r3,32768
    92d8:	10bc000c 	andi	r2,r2,61440
    92dc:	14c80020 	cmpeqi	r19,r2,8192
    92e0:	10c03726 	beq	r2,r3,93c0 <__smakebuf_r+0x130>
    92e4:	80c0030b 	ldhu	r3,12(r16)
    92e8:	18c20014 	ori	r3,r3,2048
    92ec:	80c0030d 	sth	r3,12(r16)
    92f0:	00c80004 	movi	r3,8192
    92f4:	10c0521e 	bne	r2,r3,9440 <__smakebuf_r+0x1b0>
    92f8:	8140038f 	ldh	r5,14(r16)
    92fc:	8809883a 	mov	r4,r17
    9300:	000d6bc0 	call	d6bc <_isatty_r>
    9304:	10004c26 	beq	r2,zero,9438 <__smakebuf_r+0x1a8>
    9308:	8080030b 	ldhu	r2,12(r16)
    930c:	80c010c4 	addi	r3,r16,67
    9310:	80c00015 	stw	r3,0(r16)
    9314:	10800054 	ori	r2,r2,1
    9318:	8080030d 	sth	r2,12(r16)
    931c:	00800044 	movi	r2,1
    9320:	80c00415 	stw	r3,16(r16)
    9324:	80800515 	stw	r2,20(r16)
    9328:	04810004 	movi	r18,1024
    932c:	00000706 	br	934c <__smakebuf_r+0xbc>
    9330:	8080030b 	ldhu	r2,12(r16)
    9334:	10c0200c 	andi	r3,r2,128
    9338:	18001f1e 	bne	r3,zero,93b8 <__smakebuf_r+0x128>
    933c:	04810004 	movi	r18,1024
    9340:	10820014 	ori	r2,r2,2048
    9344:	8080030d 	sth	r2,12(r16)
    9348:	0027883a 	mov	r19,zero
    934c:	900b883a 	mov	r5,r18
    9350:	8809883a 	mov	r4,r17
    9354:	000944c0 	call	944c <_malloc_r>
    9358:	10002c26 	beq	r2,zero,940c <__smakebuf_r+0x17c>
    935c:	80c0030b 	ldhu	r3,12(r16)
    9360:	01000074 	movhi	r4,1
    9364:	2120d204 	addi	r4,r4,-31928
    9368:	89000f15 	stw	r4,60(r17)
    936c:	18c02014 	ori	r3,r3,128
    9370:	80c0030d 	sth	r3,12(r16)
    9374:	80800015 	stw	r2,0(r16)
    9378:	80800415 	stw	r2,16(r16)
    937c:	84800515 	stw	r18,20(r16)
    9380:	98001a1e 	bne	r19,zero,93ec <__smakebuf_r+0x15c>
    9384:	dfc01317 	ldw	ra,76(sp)
    9388:	dcc01217 	ldw	r19,72(sp)
    938c:	dc801117 	ldw	r18,68(sp)
    9390:	dc401017 	ldw	r17,64(sp)
    9394:	dc000f17 	ldw	r16,60(sp)
    9398:	dec01404 	addi	sp,sp,80
    939c:	f800283a 	ret
    93a0:	288010c4 	addi	r2,r5,67
    93a4:	28800015 	stw	r2,0(r5)
    93a8:	28800415 	stw	r2,16(r5)
    93ac:	00800044 	movi	r2,1
    93b0:	28800515 	stw	r2,20(r5)
    93b4:	f800283a 	ret
    93b8:	04801004 	movi	r18,64
    93bc:	003fe006 	br	9340 <__alt_mem_onchip_memory+0xf7809340>
    93c0:	81000a17 	ldw	r4,40(r16)
    93c4:	00c00074 	movhi	r3,1
    93c8:	18ee3f04 	addi	r3,r3,-18180
    93cc:	20ffc51e 	bne	r4,r3,92e4 <__alt_mem_onchip_memory+0xf78092e4>
    93d0:	8080030b 	ldhu	r2,12(r16)
    93d4:	04810004 	movi	r18,1024
    93d8:	84801315 	stw	r18,76(r16)
    93dc:	1484b03a 	or	r2,r2,r18
    93e0:	8080030d 	sth	r2,12(r16)
    93e4:	0027883a 	mov	r19,zero
    93e8:	003fd806 	br	934c <__alt_mem_onchip_memory+0xf780934c>
    93ec:	8140038f 	ldh	r5,14(r16)
    93f0:	8809883a 	mov	r4,r17
    93f4:	000d6bc0 	call	d6bc <_isatty_r>
    93f8:	103fe226 	beq	r2,zero,9384 <__alt_mem_onchip_memory+0xf7809384>
    93fc:	8080030b 	ldhu	r2,12(r16)
    9400:	10800054 	ori	r2,r2,1
    9404:	8080030d 	sth	r2,12(r16)
    9408:	003fde06 	br	9384 <__alt_mem_onchip_memory+0xf7809384>
    940c:	8080030b 	ldhu	r2,12(r16)
    9410:	10c0800c 	andi	r3,r2,512
    9414:	183fdb1e 	bne	r3,zero,9384 <__alt_mem_onchip_memory+0xf7809384>
    9418:	10800094 	ori	r2,r2,2
    941c:	80c010c4 	addi	r3,r16,67
    9420:	8080030d 	sth	r2,12(r16)
    9424:	00800044 	movi	r2,1
    9428:	80c00015 	stw	r3,0(r16)
    942c:	80c00415 	stw	r3,16(r16)
    9430:	80800515 	stw	r2,20(r16)
    9434:	003fd306 	br	9384 <__alt_mem_onchip_memory+0xf7809384>
    9438:	04810004 	movi	r18,1024
    943c:	003fc306 	br	934c <__alt_mem_onchip_memory+0xf780934c>
    9440:	0027883a 	mov	r19,zero
    9444:	04810004 	movi	r18,1024
    9448:	003fc006 	br	934c <__alt_mem_onchip_memory+0xf780934c>

0000944c <_malloc_r>:
    944c:	defff504 	addi	sp,sp,-44
    9450:	dc800315 	stw	r18,12(sp)
    9454:	dfc00a15 	stw	ra,40(sp)
    9458:	df000915 	stw	fp,36(sp)
    945c:	ddc00815 	stw	r23,32(sp)
    9460:	dd800715 	stw	r22,28(sp)
    9464:	dd400615 	stw	r21,24(sp)
    9468:	dd000515 	stw	r20,20(sp)
    946c:	dcc00415 	stw	r19,16(sp)
    9470:	dc400215 	stw	r17,8(sp)
    9474:	dc000115 	stw	r16,4(sp)
    9478:	288002c4 	addi	r2,r5,11
    947c:	00c00584 	movi	r3,22
    9480:	2025883a 	mov	r18,r4
    9484:	18807f2e 	bgeu	r3,r2,9684 <_malloc_r+0x238>
    9488:	047ffe04 	movi	r17,-8
    948c:	1462703a 	and	r17,r2,r17
    9490:	8800a316 	blt	r17,zero,9720 <_malloc_r+0x2d4>
    9494:	8940a236 	bltu	r17,r5,9720 <_malloc_r+0x2d4>
    9498:	000efa00 	call	efa0 <__malloc_lock>
    949c:	00807dc4 	movi	r2,503
    94a0:	1441e92e 	bgeu	r2,r17,9c48 <_malloc_r+0x7fc>
    94a4:	8804d27a 	srli	r2,r17,9
    94a8:	1000a126 	beq	r2,zero,9730 <_malloc_r+0x2e4>
    94ac:	00c00104 	movi	r3,4
    94b0:	18811e36 	bltu	r3,r2,992c <_malloc_r+0x4e0>
    94b4:	8804d1ba 	srli	r2,r17,6
    94b8:	12000e44 	addi	r8,r2,57
    94bc:	11c00e04 	addi	r7,r2,56
    94c0:	4209883a 	add	r4,r8,r8
    94c4:	04c00074 	movhi	r19,1
    94c8:	2109883a 	add	r4,r4,r4
    94cc:	9cc7ed04 	addi	r19,r19,8116
    94d0:	2109883a 	add	r4,r4,r4
    94d4:	9909883a 	add	r4,r19,r4
    94d8:	24000117 	ldw	r16,4(r4)
    94dc:	213ffe04 	addi	r4,r4,-8
    94e0:	24009726 	beq	r4,r16,9740 <_malloc_r+0x2f4>
    94e4:	80800117 	ldw	r2,4(r16)
    94e8:	01bfff04 	movi	r6,-4
    94ec:	014003c4 	movi	r5,15
    94f0:	1184703a 	and	r2,r2,r6
    94f4:	1447c83a 	sub	r3,r2,r17
    94f8:	28c00716 	blt	r5,r3,9518 <_malloc_r+0xcc>
    94fc:	1800920e 	bge	r3,zero,9748 <_malloc_r+0x2fc>
    9500:	84000317 	ldw	r16,12(r16)
    9504:	24008e26 	beq	r4,r16,9740 <_malloc_r+0x2f4>
    9508:	80800117 	ldw	r2,4(r16)
    950c:	1184703a 	and	r2,r2,r6
    9510:	1447c83a 	sub	r3,r2,r17
    9514:	28fff90e 	bge	r5,r3,94fc <__alt_mem_onchip_memory+0xf78094fc>
    9518:	3809883a 	mov	r4,r7
    951c:	01800074 	movhi	r6,1
    9520:	9c000417 	ldw	r16,16(r19)
    9524:	3187ed04 	addi	r6,r6,8116
    9528:	32000204 	addi	r8,r6,8
    952c:	82013426 	beq	r16,r8,9a00 <_malloc_r+0x5b4>
    9530:	80c00117 	ldw	r3,4(r16)
    9534:	00bfff04 	movi	r2,-4
    9538:	188e703a 	and	r7,r3,r2
    953c:	3c45c83a 	sub	r2,r7,r17
    9540:	00c003c4 	movi	r3,15
    9544:	18811f16 	blt	r3,r2,99c4 <_malloc_r+0x578>
    9548:	32000515 	stw	r8,20(r6)
    954c:	32000415 	stw	r8,16(r6)
    9550:	10007f0e 	bge	r2,zero,9750 <_malloc_r+0x304>
    9554:	00807fc4 	movi	r2,511
    9558:	11c0fd36 	bltu	r2,r7,9950 <_malloc_r+0x504>
    955c:	3806d0fa 	srli	r3,r7,3
    9560:	01c00044 	movi	r7,1
    9564:	30800117 	ldw	r2,4(r6)
    9568:	19400044 	addi	r5,r3,1
    956c:	294b883a 	add	r5,r5,r5
    9570:	1807d0ba 	srai	r3,r3,2
    9574:	294b883a 	add	r5,r5,r5
    9578:	294b883a 	add	r5,r5,r5
    957c:	298b883a 	add	r5,r5,r6
    9580:	38c6983a 	sll	r3,r7,r3
    9584:	29c00017 	ldw	r7,0(r5)
    9588:	2a7ffe04 	addi	r9,r5,-8
    958c:	1886b03a 	or	r3,r3,r2
    9590:	82400315 	stw	r9,12(r16)
    9594:	81c00215 	stw	r7,8(r16)
    9598:	30c00115 	stw	r3,4(r6)
    959c:	2c000015 	stw	r16,0(r5)
    95a0:	3c000315 	stw	r16,12(r7)
    95a4:	2005d0ba 	srai	r2,r4,2
    95a8:	01400044 	movi	r5,1
    95ac:	288a983a 	sll	r5,r5,r2
    95b0:	19406f36 	bltu	r3,r5,9770 <_malloc_r+0x324>
    95b4:	28c4703a 	and	r2,r5,r3
    95b8:	10000a1e 	bne	r2,zero,95e4 <_malloc_r+0x198>
    95bc:	00bfff04 	movi	r2,-4
    95c0:	294b883a 	add	r5,r5,r5
    95c4:	2088703a 	and	r4,r4,r2
    95c8:	28c4703a 	and	r2,r5,r3
    95cc:	21000104 	addi	r4,r4,4
    95d0:	1000041e 	bne	r2,zero,95e4 <_malloc_r+0x198>
    95d4:	294b883a 	add	r5,r5,r5
    95d8:	28c4703a 	and	r2,r5,r3
    95dc:	21000104 	addi	r4,r4,4
    95e0:	103ffc26 	beq	r2,zero,95d4 <__alt_mem_onchip_memory+0xf78095d4>
    95e4:	02bfff04 	movi	r10,-4
    95e8:	024003c4 	movi	r9,15
    95ec:	21800044 	addi	r6,r4,1
    95f0:	318d883a 	add	r6,r6,r6
    95f4:	318d883a 	add	r6,r6,r6
    95f8:	318d883a 	add	r6,r6,r6
    95fc:	998d883a 	add	r6,r19,r6
    9600:	333ffe04 	addi	r12,r6,-8
    9604:	2017883a 	mov	r11,r4
    9608:	31800104 	addi	r6,r6,4
    960c:	34000017 	ldw	r16,0(r6)
    9610:	31fffd04 	addi	r7,r6,-12
    9614:	81c0041e 	bne	r16,r7,9628 <_malloc_r+0x1dc>
    9618:	0000fb06 	br	9a08 <_malloc_r+0x5bc>
    961c:	1801030e 	bge	r3,zero,9a2c <_malloc_r+0x5e0>
    9620:	84000317 	ldw	r16,12(r16)
    9624:	81c0f826 	beq	r16,r7,9a08 <_malloc_r+0x5bc>
    9628:	80800117 	ldw	r2,4(r16)
    962c:	1284703a 	and	r2,r2,r10
    9630:	1447c83a 	sub	r3,r2,r17
    9634:	48fff90e 	bge	r9,r3,961c <__alt_mem_onchip_memory+0xf780961c>
    9638:	80800317 	ldw	r2,12(r16)
    963c:	81000217 	ldw	r4,8(r16)
    9640:	89400054 	ori	r5,r17,1
    9644:	81400115 	stw	r5,4(r16)
    9648:	20800315 	stw	r2,12(r4)
    964c:	11000215 	stw	r4,8(r2)
    9650:	8463883a 	add	r17,r16,r17
    9654:	9c400515 	stw	r17,20(r19)
    9658:	9c400415 	stw	r17,16(r19)
    965c:	18800054 	ori	r2,r3,1
    9660:	88800115 	stw	r2,4(r17)
    9664:	8a000315 	stw	r8,12(r17)
    9668:	8a000215 	stw	r8,8(r17)
    966c:	88e3883a 	add	r17,r17,r3
    9670:	88c00015 	stw	r3,0(r17)
    9674:	9009883a 	mov	r4,r18
    9678:	000efc40 	call	efc4 <__malloc_unlock>
    967c:	80800204 	addi	r2,r16,8
    9680:	00001b06 	br	96f0 <_malloc_r+0x2a4>
    9684:	04400404 	movi	r17,16
    9688:	89402536 	bltu	r17,r5,9720 <_malloc_r+0x2d4>
    968c:	000efa00 	call	efa0 <__malloc_lock>
    9690:	00800184 	movi	r2,6
    9694:	01000084 	movi	r4,2
    9698:	04c00074 	movhi	r19,1
    969c:	1085883a 	add	r2,r2,r2
    96a0:	9cc7ed04 	addi	r19,r19,8116
    96a4:	1085883a 	add	r2,r2,r2
    96a8:	9885883a 	add	r2,r19,r2
    96ac:	14000117 	ldw	r16,4(r2)
    96b0:	10fffe04 	addi	r3,r2,-8
    96b4:	80c0d926 	beq	r16,r3,9a1c <_malloc_r+0x5d0>
    96b8:	80c00117 	ldw	r3,4(r16)
    96bc:	81000317 	ldw	r4,12(r16)
    96c0:	00bfff04 	movi	r2,-4
    96c4:	1884703a 	and	r2,r3,r2
    96c8:	81400217 	ldw	r5,8(r16)
    96cc:	8085883a 	add	r2,r16,r2
    96d0:	10c00117 	ldw	r3,4(r2)
    96d4:	29000315 	stw	r4,12(r5)
    96d8:	21400215 	stw	r5,8(r4)
    96dc:	18c00054 	ori	r3,r3,1
    96e0:	10c00115 	stw	r3,4(r2)
    96e4:	9009883a 	mov	r4,r18
    96e8:	000efc40 	call	efc4 <__malloc_unlock>
    96ec:	80800204 	addi	r2,r16,8
    96f0:	dfc00a17 	ldw	ra,40(sp)
    96f4:	df000917 	ldw	fp,36(sp)
    96f8:	ddc00817 	ldw	r23,32(sp)
    96fc:	dd800717 	ldw	r22,28(sp)
    9700:	dd400617 	ldw	r21,24(sp)
    9704:	dd000517 	ldw	r20,20(sp)
    9708:	dcc00417 	ldw	r19,16(sp)
    970c:	dc800317 	ldw	r18,12(sp)
    9710:	dc400217 	ldw	r17,8(sp)
    9714:	dc000117 	ldw	r16,4(sp)
    9718:	dec00b04 	addi	sp,sp,44
    971c:	f800283a 	ret
    9720:	00800304 	movi	r2,12
    9724:	90800015 	stw	r2,0(r18)
    9728:	0005883a 	mov	r2,zero
    972c:	003ff006 	br	96f0 <__alt_mem_onchip_memory+0xf78096f0>
    9730:	01002004 	movi	r4,128
    9734:	02001004 	movi	r8,64
    9738:	01c00fc4 	movi	r7,63
    973c:	003f6106 	br	94c4 <__alt_mem_onchip_memory+0xf78094c4>
    9740:	4009883a 	mov	r4,r8
    9744:	003f7506 	br	951c <__alt_mem_onchip_memory+0xf780951c>
    9748:	81000317 	ldw	r4,12(r16)
    974c:	003fde06 	br	96c8 <__alt_mem_onchip_memory+0xf78096c8>
    9750:	81c5883a 	add	r2,r16,r7
    9754:	11400117 	ldw	r5,4(r2)
    9758:	9009883a 	mov	r4,r18
    975c:	29400054 	ori	r5,r5,1
    9760:	11400115 	stw	r5,4(r2)
    9764:	000efc40 	call	efc4 <__malloc_unlock>
    9768:	80800204 	addi	r2,r16,8
    976c:	003fe006 	br	96f0 <__alt_mem_onchip_memory+0xf78096f0>
    9770:	9c000217 	ldw	r16,8(r19)
    9774:	00bfff04 	movi	r2,-4
    9778:	85800117 	ldw	r22,4(r16)
    977c:	b0ac703a 	and	r22,r22,r2
    9780:	b4400336 	bltu	r22,r17,9790 <_malloc_r+0x344>
    9784:	b445c83a 	sub	r2,r22,r17
    9788:	00c003c4 	movi	r3,15
    978c:	18805d16 	blt	r3,r2,9904 <_malloc_r+0x4b8>
    9790:	05c00074 	movhi	r23,1
    9794:	00800074 	movhi	r2,1
    9798:	10945304 	addi	r2,r2,20812
    979c:	bdcd7904 	addi	r23,r23,13796
    97a0:	15400017 	ldw	r21,0(r2)
    97a4:	b8c00017 	ldw	r3,0(r23)
    97a8:	00bfffc4 	movi	r2,-1
    97ac:	858d883a 	add	r6,r16,r22
    97b0:	8d6b883a 	add	r21,r17,r21
    97b4:	1880ea26 	beq	r3,r2,9b60 <_malloc_r+0x714>
    97b8:	ad4403c4 	addi	r21,r21,4111
    97bc:	00bc0004 	movi	r2,-4096
    97c0:	a8aa703a 	and	r21,r21,r2
    97c4:	a80b883a 	mov	r5,r21
    97c8:	9009883a 	mov	r4,r18
    97cc:	d9800015 	stw	r6,0(sp)
    97d0:	000b7d00 	call	b7d0 <_sbrk_r>
    97d4:	1029883a 	mov	r20,r2
    97d8:	00bfffc4 	movi	r2,-1
    97dc:	d9800017 	ldw	r6,0(sp)
    97e0:	a080e826 	beq	r20,r2,9b84 <_malloc_r+0x738>
    97e4:	a180a636 	bltu	r20,r6,9a80 <_malloc_r+0x634>
    97e8:	07000074 	movhi	fp,1
    97ec:	e7145f04 	addi	fp,fp,20860
    97f0:	e0800017 	ldw	r2,0(fp)
    97f4:	a887883a 	add	r3,r21,r2
    97f8:	e0c00015 	stw	r3,0(fp)
    97fc:	3500e626 	beq	r6,r20,9b98 <_malloc_r+0x74c>
    9800:	b9000017 	ldw	r4,0(r23)
    9804:	00bfffc4 	movi	r2,-1
    9808:	2080ee26 	beq	r4,r2,9bc4 <_malloc_r+0x778>
    980c:	a185c83a 	sub	r2,r20,r6
    9810:	10c5883a 	add	r2,r2,r3
    9814:	e0800015 	stw	r2,0(fp)
    9818:	a0c001cc 	andi	r3,r20,7
    981c:	1800bc26 	beq	r3,zero,9b10 <_malloc_r+0x6c4>
    9820:	a0e9c83a 	sub	r20,r20,r3
    9824:	00840204 	movi	r2,4104
    9828:	a5000204 	addi	r20,r20,8
    982c:	10c7c83a 	sub	r3,r2,r3
    9830:	a545883a 	add	r2,r20,r21
    9834:	1083ffcc 	andi	r2,r2,4095
    9838:	18abc83a 	sub	r21,r3,r2
    983c:	a80b883a 	mov	r5,r21
    9840:	9009883a 	mov	r4,r18
    9844:	000b7d00 	call	b7d0 <_sbrk_r>
    9848:	00ffffc4 	movi	r3,-1
    984c:	10c0e126 	beq	r2,r3,9bd4 <_malloc_r+0x788>
    9850:	1505c83a 	sub	r2,r2,r20
    9854:	1545883a 	add	r2,r2,r21
    9858:	10800054 	ori	r2,r2,1
    985c:	e0c00017 	ldw	r3,0(fp)
    9860:	9d000215 	stw	r20,8(r19)
    9864:	a0800115 	stw	r2,4(r20)
    9868:	a8c7883a 	add	r3,r21,r3
    986c:	e0c00015 	stw	r3,0(fp)
    9870:	84c00e26 	beq	r16,r19,98ac <_malloc_r+0x460>
    9874:	018003c4 	movi	r6,15
    9878:	3580a72e 	bgeu	r6,r22,9b18 <_malloc_r+0x6cc>
    987c:	81400117 	ldw	r5,4(r16)
    9880:	013ffe04 	movi	r4,-8
    9884:	b0bffd04 	addi	r2,r22,-12
    9888:	1104703a 	and	r2,r2,r4
    988c:	2900004c 	andi	r4,r5,1
    9890:	2088b03a 	or	r4,r4,r2
    9894:	81000115 	stw	r4,4(r16)
    9898:	01400144 	movi	r5,5
    989c:	8089883a 	add	r4,r16,r2
    98a0:	21400115 	stw	r5,4(r4)
    98a4:	21400215 	stw	r5,8(r4)
    98a8:	3080cd36 	bltu	r6,r2,9be0 <_malloc_r+0x794>
    98ac:	00800074 	movhi	r2,1
    98b0:	10945204 	addi	r2,r2,20808
    98b4:	11000017 	ldw	r4,0(r2)
    98b8:	20c0012e 	bgeu	r4,r3,98c0 <_malloc_r+0x474>
    98bc:	10c00015 	stw	r3,0(r2)
    98c0:	00800074 	movhi	r2,1
    98c4:	10945104 	addi	r2,r2,20804
    98c8:	11000017 	ldw	r4,0(r2)
    98cc:	9c000217 	ldw	r16,8(r19)
    98d0:	20c0012e 	bgeu	r4,r3,98d8 <_malloc_r+0x48c>
    98d4:	10c00015 	stw	r3,0(r2)
    98d8:	80c00117 	ldw	r3,4(r16)
    98dc:	00bfff04 	movi	r2,-4
    98e0:	1886703a 	and	r3,r3,r2
    98e4:	1c45c83a 	sub	r2,r3,r17
    98e8:	1c400236 	bltu	r3,r17,98f4 <_malloc_r+0x4a8>
    98ec:	00c003c4 	movi	r3,15
    98f0:	18800416 	blt	r3,r2,9904 <_malloc_r+0x4b8>
    98f4:	9009883a 	mov	r4,r18
    98f8:	000efc40 	call	efc4 <__malloc_unlock>
    98fc:	0005883a 	mov	r2,zero
    9900:	003f7b06 	br	96f0 <__alt_mem_onchip_memory+0xf78096f0>
    9904:	88c00054 	ori	r3,r17,1
    9908:	80c00115 	stw	r3,4(r16)
    990c:	8463883a 	add	r17,r16,r17
    9910:	10800054 	ori	r2,r2,1
    9914:	9c400215 	stw	r17,8(r19)
    9918:	88800115 	stw	r2,4(r17)
    991c:	9009883a 	mov	r4,r18
    9920:	000efc40 	call	efc4 <__malloc_unlock>
    9924:	80800204 	addi	r2,r16,8
    9928:	003f7106 	br	96f0 <__alt_mem_onchip_memory+0xf78096f0>
    992c:	00c00504 	movi	r3,20
    9930:	18804a2e 	bgeu	r3,r2,9a5c <_malloc_r+0x610>
    9934:	00c01504 	movi	r3,84
    9938:	18806e36 	bltu	r3,r2,9af4 <_malloc_r+0x6a8>
    993c:	8804d33a 	srli	r2,r17,12
    9940:	12001bc4 	addi	r8,r2,111
    9944:	11c01b84 	addi	r7,r2,110
    9948:	4209883a 	add	r4,r8,r8
    994c:	003edd06 	br	94c4 <__alt_mem_onchip_memory+0xf78094c4>
    9950:	3804d27a 	srli	r2,r7,9
    9954:	00c00104 	movi	r3,4
    9958:	1880442e 	bgeu	r3,r2,9a6c <_malloc_r+0x620>
    995c:	00c00504 	movi	r3,20
    9960:	18808136 	bltu	r3,r2,9b68 <_malloc_r+0x71c>
    9964:	11401704 	addi	r5,r2,92
    9968:	10c016c4 	addi	r3,r2,91
    996c:	294b883a 	add	r5,r5,r5
    9970:	294b883a 	add	r5,r5,r5
    9974:	294b883a 	add	r5,r5,r5
    9978:	994b883a 	add	r5,r19,r5
    997c:	28800017 	ldw	r2,0(r5)
    9980:	01800074 	movhi	r6,1
    9984:	297ffe04 	addi	r5,r5,-8
    9988:	3187ed04 	addi	r6,r6,8116
    998c:	28806526 	beq	r5,r2,9b24 <_malloc_r+0x6d8>
    9990:	01bfff04 	movi	r6,-4
    9994:	10c00117 	ldw	r3,4(r2)
    9998:	1986703a 	and	r3,r3,r6
    999c:	38c0022e 	bgeu	r7,r3,99a8 <_malloc_r+0x55c>
    99a0:	10800217 	ldw	r2,8(r2)
    99a4:	28bffb1e 	bne	r5,r2,9994 <__alt_mem_onchip_memory+0xf7809994>
    99a8:	11400317 	ldw	r5,12(r2)
    99ac:	98c00117 	ldw	r3,4(r19)
    99b0:	81400315 	stw	r5,12(r16)
    99b4:	80800215 	stw	r2,8(r16)
    99b8:	2c000215 	stw	r16,8(r5)
    99bc:	14000315 	stw	r16,12(r2)
    99c0:	003ef806 	br	95a4 <__alt_mem_onchip_memory+0xf78095a4>
    99c4:	88c00054 	ori	r3,r17,1
    99c8:	80c00115 	stw	r3,4(r16)
    99cc:	8463883a 	add	r17,r16,r17
    99d0:	34400515 	stw	r17,20(r6)
    99d4:	34400415 	stw	r17,16(r6)
    99d8:	10c00054 	ori	r3,r2,1
    99dc:	8a000315 	stw	r8,12(r17)
    99e0:	8a000215 	stw	r8,8(r17)
    99e4:	88c00115 	stw	r3,4(r17)
    99e8:	88a3883a 	add	r17,r17,r2
    99ec:	88800015 	stw	r2,0(r17)
    99f0:	9009883a 	mov	r4,r18
    99f4:	000efc40 	call	efc4 <__malloc_unlock>
    99f8:	80800204 	addi	r2,r16,8
    99fc:	003f3c06 	br	96f0 <__alt_mem_onchip_memory+0xf78096f0>
    9a00:	30c00117 	ldw	r3,4(r6)
    9a04:	003ee706 	br	95a4 <__alt_mem_onchip_memory+0xf78095a4>
    9a08:	5ac00044 	addi	r11,r11,1
    9a0c:	588000cc 	andi	r2,r11,3
    9a10:	31800204 	addi	r6,r6,8
    9a14:	103efd1e 	bne	r2,zero,960c <__alt_mem_onchip_memory+0xf780960c>
    9a18:	00002406 	br	9aac <_malloc_r+0x660>
    9a1c:	14000317 	ldw	r16,12(r2)
    9a20:	143f251e 	bne	r2,r16,96b8 <__alt_mem_onchip_memory+0xf78096b8>
    9a24:	21000084 	addi	r4,r4,2
    9a28:	003ebc06 	br	951c <__alt_mem_onchip_memory+0xf780951c>
    9a2c:	8085883a 	add	r2,r16,r2
    9a30:	10c00117 	ldw	r3,4(r2)
    9a34:	81000317 	ldw	r4,12(r16)
    9a38:	81400217 	ldw	r5,8(r16)
    9a3c:	18c00054 	ori	r3,r3,1
    9a40:	10c00115 	stw	r3,4(r2)
    9a44:	29000315 	stw	r4,12(r5)
    9a48:	21400215 	stw	r5,8(r4)
    9a4c:	9009883a 	mov	r4,r18
    9a50:	000efc40 	call	efc4 <__malloc_unlock>
    9a54:	80800204 	addi	r2,r16,8
    9a58:	003f2506 	br	96f0 <__alt_mem_onchip_memory+0xf78096f0>
    9a5c:	12001704 	addi	r8,r2,92
    9a60:	11c016c4 	addi	r7,r2,91
    9a64:	4209883a 	add	r4,r8,r8
    9a68:	003e9606 	br	94c4 <__alt_mem_onchip_memory+0xf78094c4>
    9a6c:	3804d1ba 	srli	r2,r7,6
    9a70:	11400e44 	addi	r5,r2,57
    9a74:	10c00e04 	addi	r3,r2,56
    9a78:	294b883a 	add	r5,r5,r5
    9a7c:	003fbc06 	br	9970 <__alt_mem_onchip_memory+0xf7809970>
    9a80:	84ff5926 	beq	r16,r19,97e8 <__alt_mem_onchip_memory+0xf78097e8>
    9a84:	00800074 	movhi	r2,1
    9a88:	1087ed04 	addi	r2,r2,8116
    9a8c:	14000217 	ldw	r16,8(r2)
    9a90:	00bfff04 	movi	r2,-4
    9a94:	80c00117 	ldw	r3,4(r16)
    9a98:	1886703a 	and	r3,r3,r2
    9a9c:	003f9106 	br	98e4 <__alt_mem_onchip_memory+0xf78098e4>
    9aa0:	60800217 	ldw	r2,8(r12)
    9aa4:	213fffc4 	addi	r4,r4,-1
    9aa8:	1300651e 	bne	r2,r12,9c40 <_malloc_r+0x7f4>
    9aac:	208000cc 	andi	r2,r4,3
    9ab0:	633ffe04 	addi	r12,r12,-8
    9ab4:	103ffa1e 	bne	r2,zero,9aa0 <__alt_mem_onchip_memory+0xf7809aa0>
    9ab8:	98800117 	ldw	r2,4(r19)
    9abc:	0146303a 	nor	r3,zero,r5
    9ac0:	1884703a 	and	r2,r3,r2
    9ac4:	98800115 	stw	r2,4(r19)
    9ac8:	294b883a 	add	r5,r5,r5
    9acc:	117f2836 	bltu	r2,r5,9770 <__alt_mem_onchip_memory+0xf7809770>
    9ad0:	283f2726 	beq	r5,zero,9770 <__alt_mem_onchip_memory+0xf7809770>
    9ad4:	2886703a 	and	r3,r5,r2
    9ad8:	5809883a 	mov	r4,r11
    9adc:	183ec31e 	bne	r3,zero,95ec <__alt_mem_onchip_memory+0xf78095ec>
    9ae0:	294b883a 	add	r5,r5,r5
    9ae4:	2886703a 	and	r3,r5,r2
    9ae8:	21000104 	addi	r4,r4,4
    9aec:	183ffc26 	beq	r3,zero,9ae0 <__alt_mem_onchip_memory+0xf7809ae0>
    9af0:	003ebe06 	br	95ec <__alt_mem_onchip_memory+0xf78095ec>
    9af4:	00c05504 	movi	r3,340
    9af8:	18801236 	bltu	r3,r2,9b44 <_malloc_r+0x6f8>
    9afc:	8804d3fa 	srli	r2,r17,15
    9b00:	12001e04 	addi	r8,r2,120
    9b04:	11c01dc4 	addi	r7,r2,119
    9b08:	4209883a 	add	r4,r8,r8
    9b0c:	003e6d06 	br	94c4 <__alt_mem_onchip_memory+0xf78094c4>
    9b10:	00c40004 	movi	r3,4096
    9b14:	003f4606 	br	9830 <__alt_mem_onchip_memory+0xf7809830>
    9b18:	00800044 	movi	r2,1
    9b1c:	a0800115 	stw	r2,4(r20)
    9b20:	003f7406 	br	98f4 <__alt_mem_onchip_memory+0xf78098f4>
    9b24:	1805d0ba 	srai	r2,r3,2
    9b28:	01c00044 	movi	r7,1
    9b2c:	30c00117 	ldw	r3,4(r6)
    9b30:	388e983a 	sll	r7,r7,r2
    9b34:	2805883a 	mov	r2,r5
    9b38:	38c6b03a 	or	r3,r7,r3
    9b3c:	30c00115 	stw	r3,4(r6)
    9b40:	003f9b06 	br	99b0 <__alt_mem_onchip_memory+0xf78099b0>
    9b44:	00c15504 	movi	r3,1364
    9b48:	18801a36 	bltu	r3,r2,9bb4 <_malloc_r+0x768>
    9b4c:	8804d4ba 	srli	r2,r17,18
    9b50:	12001f44 	addi	r8,r2,125
    9b54:	11c01f04 	addi	r7,r2,124
    9b58:	4209883a 	add	r4,r8,r8
    9b5c:	003e5906 	br	94c4 <__alt_mem_onchip_memory+0xf78094c4>
    9b60:	ad400404 	addi	r21,r21,16
    9b64:	003f1706 	br	97c4 <__alt_mem_onchip_memory+0xf78097c4>
    9b68:	00c01504 	movi	r3,84
    9b6c:	18802336 	bltu	r3,r2,9bfc <_malloc_r+0x7b0>
    9b70:	3804d33a 	srli	r2,r7,12
    9b74:	11401bc4 	addi	r5,r2,111
    9b78:	10c01b84 	addi	r3,r2,110
    9b7c:	294b883a 	add	r5,r5,r5
    9b80:	003f7b06 	br	9970 <__alt_mem_onchip_memory+0xf7809970>
    9b84:	9c000217 	ldw	r16,8(r19)
    9b88:	00bfff04 	movi	r2,-4
    9b8c:	80c00117 	ldw	r3,4(r16)
    9b90:	1886703a 	and	r3,r3,r2
    9b94:	003f5306 	br	98e4 <__alt_mem_onchip_memory+0xf78098e4>
    9b98:	3083ffcc 	andi	r2,r6,4095
    9b9c:	103f181e 	bne	r2,zero,9800 <__alt_mem_onchip_memory+0xf7809800>
    9ba0:	99000217 	ldw	r4,8(r19)
    9ba4:	b545883a 	add	r2,r22,r21
    9ba8:	10800054 	ori	r2,r2,1
    9bac:	20800115 	stw	r2,4(r4)
    9bb0:	003f3e06 	br	98ac <__alt_mem_onchip_memory+0xf78098ac>
    9bb4:	01003f84 	movi	r4,254
    9bb8:	02001fc4 	movi	r8,127
    9bbc:	01c01f84 	movi	r7,126
    9bc0:	003e4006 	br	94c4 <__alt_mem_onchip_memory+0xf78094c4>
    9bc4:	00800074 	movhi	r2,1
    9bc8:	108d7904 	addi	r2,r2,13796
    9bcc:	15000015 	stw	r20,0(r2)
    9bd0:	003f1106 	br	9818 <__alt_mem_onchip_memory+0xf7809818>
    9bd4:	00800044 	movi	r2,1
    9bd8:	002b883a 	mov	r21,zero
    9bdc:	003f1f06 	br	985c <__alt_mem_onchip_memory+0xf780985c>
    9be0:	81400204 	addi	r5,r16,8
    9be4:	9009883a 	mov	r4,r18
    9be8:	00088040 	call	8804 <_free_r>
    9bec:	00800074 	movhi	r2,1
    9bf0:	10945f04 	addi	r2,r2,20860
    9bf4:	10c00017 	ldw	r3,0(r2)
    9bf8:	003f2c06 	br	98ac <__alt_mem_onchip_memory+0xf78098ac>
    9bfc:	00c05504 	movi	r3,340
    9c00:	18800536 	bltu	r3,r2,9c18 <_malloc_r+0x7cc>
    9c04:	3804d3fa 	srli	r2,r7,15
    9c08:	11401e04 	addi	r5,r2,120
    9c0c:	10c01dc4 	addi	r3,r2,119
    9c10:	294b883a 	add	r5,r5,r5
    9c14:	003f5606 	br	9970 <__alt_mem_onchip_memory+0xf7809970>
    9c18:	00c15504 	movi	r3,1364
    9c1c:	18800536 	bltu	r3,r2,9c34 <_malloc_r+0x7e8>
    9c20:	3804d4ba 	srli	r2,r7,18
    9c24:	11401f44 	addi	r5,r2,125
    9c28:	10c01f04 	addi	r3,r2,124
    9c2c:	294b883a 	add	r5,r5,r5
    9c30:	003f4f06 	br	9970 <__alt_mem_onchip_memory+0xf7809970>
    9c34:	01403f84 	movi	r5,254
    9c38:	00c01f84 	movi	r3,126
    9c3c:	003f4c06 	br	9970 <__alt_mem_onchip_memory+0xf7809970>
    9c40:	98800117 	ldw	r2,4(r19)
    9c44:	003fa006 	br	9ac8 <__alt_mem_onchip_memory+0xf7809ac8>
    9c48:	8808d0fa 	srli	r4,r17,3
    9c4c:	20800044 	addi	r2,r4,1
    9c50:	1085883a 	add	r2,r2,r2
    9c54:	003e9006 	br	9698 <__alt_mem_onchip_memory+0xf7809698>

00009c58 <memchr>:
    9c58:	208000cc 	andi	r2,r4,3
    9c5c:	280f883a 	mov	r7,r5
    9c60:	10003426 	beq	r2,zero,9d34 <memchr+0xdc>
    9c64:	30bfffc4 	addi	r2,r6,-1
    9c68:	30001a26 	beq	r6,zero,9cd4 <memchr+0x7c>
    9c6c:	20c00003 	ldbu	r3,0(r4)
    9c70:	29803fcc 	andi	r6,r5,255
    9c74:	30c0051e 	bne	r6,r3,9c8c <memchr+0x34>
    9c78:	00001806 	br	9cdc <memchr+0x84>
    9c7c:	10001526 	beq	r2,zero,9cd4 <memchr+0x7c>
    9c80:	20c00003 	ldbu	r3,0(r4)
    9c84:	10bfffc4 	addi	r2,r2,-1
    9c88:	30c01426 	beq	r6,r3,9cdc <memchr+0x84>
    9c8c:	21000044 	addi	r4,r4,1
    9c90:	20c000cc 	andi	r3,r4,3
    9c94:	183ff91e 	bne	r3,zero,9c7c <__alt_mem_onchip_memory+0xf7809c7c>
    9c98:	020000c4 	movi	r8,3
    9c9c:	40801136 	bltu	r8,r2,9ce4 <memchr+0x8c>
    9ca0:	10000c26 	beq	r2,zero,9cd4 <memchr+0x7c>
    9ca4:	20c00003 	ldbu	r3,0(r4)
    9ca8:	29403fcc 	andi	r5,r5,255
    9cac:	28c00b26 	beq	r5,r3,9cdc <memchr+0x84>
    9cb0:	20c00044 	addi	r3,r4,1
    9cb4:	39803fcc 	andi	r6,r7,255
    9cb8:	2089883a 	add	r4,r4,r2
    9cbc:	00000306 	br	9ccc <memchr+0x74>
    9cc0:	18c00044 	addi	r3,r3,1
    9cc4:	197fffc3 	ldbu	r5,-1(r3)
    9cc8:	31400526 	beq	r6,r5,9ce0 <memchr+0x88>
    9ccc:	1805883a 	mov	r2,r3
    9cd0:	20fffb1e 	bne	r4,r3,9cc0 <__alt_mem_onchip_memory+0xf7809cc0>
    9cd4:	0005883a 	mov	r2,zero
    9cd8:	f800283a 	ret
    9cdc:	2005883a 	mov	r2,r4
    9ce0:	f800283a 	ret
    9ce4:	28c03fcc 	andi	r3,r5,255
    9ce8:	1812923a 	slli	r9,r3,8
    9cec:	02ffbff4 	movhi	r11,65279
    9cf0:	02a02074 	movhi	r10,32897
    9cf4:	48d2b03a 	or	r9,r9,r3
    9cf8:	4806943a 	slli	r3,r9,16
    9cfc:	5affbfc4 	addi	r11,r11,-257
    9d00:	52a02004 	addi	r10,r10,-32640
    9d04:	48d2b03a 	or	r9,r9,r3
    9d08:	20c00017 	ldw	r3,0(r4)
    9d0c:	48c6f03a 	xor	r3,r9,r3
    9d10:	1acd883a 	add	r6,r3,r11
    9d14:	00c6303a 	nor	r3,zero,r3
    9d18:	30c6703a 	and	r3,r6,r3
    9d1c:	1a86703a 	and	r3,r3,r10
    9d20:	183fe01e 	bne	r3,zero,9ca4 <__alt_mem_onchip_memory+0xf7809ca4>
    9d24:	10bfff04 	addi	r2,r2,-4
    9d28:	21000104 	addi	r4,r4,4
    9d2c:	40bff636 	bltu	r8,r2,9d08 <__alt_mem_onchip_memory+0xf7809d08>
    9d30:	003fdb06 	br	9ca0 <__alt_mem_onchip_memory+0xf7809ca0>
    9d34:	3005883a 	mov	r2,r6
    9d38:	003fd706 	br	9c98 <__alt_mem_onchip_memory+0xf7809c98>

00009d3c <memcpy>:
    9d3c:	defffd04 	addi	sp,sp,-12
    9d40:	dfc00215 	stw	ra,8(sp)
    9d44:	dc400115 	stw	r17,4(sp)
    9d48:	dc000015 	stw	r16,0(sp)
    9d4c:	00c003c4 	movi	r3,15
    9d50:	2005883a 	mov	r2,r4
    9d54:	1980452e 	bgeu	r3,r6,9e6c <memcpy+0x130>
    9d58:	2906b03a 	or	r3,r5,r4
    9d5c:	18c000cc 	andi	r3,r3,3
    9d60:	1800441e 	bne	r3,zero,9e74 <memcpy+0x138>
    9d64:	347ffc04 	addi	r17,r6,-16
    9d68:	8822d13a 	srli	r17,r17,4
    9d6c:	28c00104 	addi	r3,r5,4
    9d70:	23400104 	addi	r13,r4,4
    9d74:	8820913a 	slli	r16,r17,4
    9d78:	2b000204 	addi	r12,r5,8
    9d7c:	22c00204 	addi	r11,r4,8
    9d80:	84000504 	addi	r16,r16,20
    9d84:	2a800304 	addi	r10,r5,12
    9d88:	22400304 	addi	r9,r4,12
    9d8c:	2c21883a 	add	r16,r5,r16
    9d90:	2811883a 	mov	r8,r5
    9d94:	200f883a 	mov	r7,r4
    9d98:	41000017 	ldw	r4,0(r8)
    9d9c:	1fc00017 	ldw	ra,0(r3)
    9da0:	63c00017 	ldw	r15,0(r12)
    9da4:	39000015 	stw	r4,0(r7)
    9da8:	53800017 	ldw	r14,0(r10)
    9dac:	6fc00015 	stw	ra,0(r13)
    9db0:	5bc00015 	stw	r15,0(r11)
    9db4:	4b800015 	stw	r14,0(r9)
    9db8:	18c00404 	addi	r3,r3,16
    9dbc:	39c00404 	addi	r7,r7,16
    9dc0:	42000404 	addi	r8,r8,16
    9dc4:	6b400404 	addi	r13,r13,16
    9dc8:	63000404 	addi	r12,r12,16
    9dcc:	5ac00404 	addi	r11,r11,16
    9dd0:	52800404 	addi	r10,r10,16
    9dd4:	4a400404 	addi	r9,r9,16
    9dd8:	1c3fef1e 	bne	r3,r16,9d98 <__alt_mem_onchip_memory+0xf7809d98>
    9ddc:	89c00044 	addi	r7,r17,1
    9de0:	380e913a 	slli	r7,r7,4
    9de4:	310003cc 	andi	r4,r6,15
    9de8:	02c000c4 	movi	r11,3
    9dec:	11c7883a 	add	r3,r2,r7
    9df0:	29cb883a 	add	r5,r5,r7
    9df4:	5900212e 	bgeu	r11,r4,9e7c <memcpy+0x140>
    9df8:	1813883a 	mov	r9,r3
    9dfc:	2811883a 	mov	r8,r5
    9e00:	200f883a 	mov	r7,r4
    9e04:	42800017 	ldw	r10,0(r8)
    9e08:	4a400104 	addi	r9,r9,4
    9e0c:	39ffff04 	addi	r7,r7,-4
    9e10:	4abfff15 	stw	r10,-4(r9)
    9e14:	42000104 	addi	r8,r8,4
    9e18:	59fffa36 	bltu	r11,r7,9e04 <__alt_mem_onchip_memory+0xf7809e04>
    9e1c:	213fff04 	addi	r4,r4,-4
    9e20:	2008d0ba 	srli	r4,r4,2
    9e24:	318000cc 	andi	r6,r6,3
    9e28:	21000044 	addi	r4,r4,1
    9e2c:	2109883a 	add	r4,r4,r4
    9e30:	2109883a 	add	r4,r4,r4
    9e34:	1907883a 	add	r3,r3,r4
    9e38:	290b883a 	add	r5,r5,r4
    9e3c:	30000626 	beq	r6,zero,9e58 <memcpy+0x11c>
    9e40:	198d883a 	add	r6,r3,r6
    9e44:	29c00003 	ldbu	r7,0(r5)
    9e48:	18c00044 	addi	r3,r3,1
    9e4c:	29400044 	addi	r5,r5,1
    9e50:	19ffffc5 	stb	r7,-1(r3)
    9e54:	19bffb1e 	bne	r3,r6,9e44 <__alt_mem_onchip_memory+0xf7809e44>
    9e58:	dfc00217 	ldw	ra,8(sp)
    9e5c:	dc400117 	ldw	r17,4(sp)
    9e60:	dc000017 	ldw	r16,0(sp)
    9e64:	dec00304 	addi	sp,sp,12
    9e68:	f800283a 	ret
    9e6c:	2007883a 	mov	r3,r4
    9e70:	003ff206 	br	9e3c <__alt_mem_onchip_memory+0xf7809e3c>
    9e74:	2007883a 	mov	r3,r4
    9e78:	003ff106 	br	9e40 <__alt_mem_onchip_memory+0xf7809e40>
    9e7c:	200d883a 	mov	r6,r4
    9e80:	003fee06 	br	9e3c <__alt_mem_onchip_memory+0xf7809e3c>

00009e84 <memmove>:
    9e84:	2005883a 	mov	r2,r4
    9e88:	29000b2e 	bgeu	r5,r4,9eb8 <memmove+0x34>
    9e8c:	298f883a 	add	r7,r5,r6
    9e90:	21c0092e 	bgeu	r4,r7,9eb8 <memmove+0x34>
    9e94:	2187883a 	add	r3,r4,r6
    9e98:	198bc83a 	sub	r5,r3,r6
    9e9c:	30004826 	beq	r6,zero,9fc0 <memmove+0x13c>
    9ea0:	39ffffc4 	addi	r7,r7,-1
    9ea4:	39000003 	ldbu	r4,0(r7)
    9ea8:	18ffffc4 	addi	r3,r3,-1
    9eac:	19000005 	stb	r4,0(r3)
    9eb0:	28fffb1e 	bne	r5,r3,9ea0 <__alt_mem_onchip_memory+0xf7809ea0>
    9eb4:	f800283a 	ret
    9eb8:	00c003c4 	movi	r3,15
    9ebc:	1980412e 	bgeu	r3,r6,9fc4 <memmove+0x140>
    9ec0:	2886b03a 	or	r3,r5,r2
    9ec4:	18c000cc 	andi	r3,r3,3
    9ec8:	1800401e 	bne	r3,zero,9fcc <memmove+0x148>
    9ecc:	33fffc04 	addi	r15,r6,-16
    9ed0:	781ed13a 	srli	r15,r15,4
    9ed4:	28c00104 	addi	r3,r5,4
    9ed8:	13400104 	addi	r13,r2,4
    9edc:	781c913a 	slli	r14,r15,4
    9ee0:	2b000204 	addi	r12,r5,8
    9ee4:	12c00204 	addi	r11,r2,8
    9ee8:	73800504 	addi	r14,r14,20
    9eec:	2a800304 	addi	r10,r5,12
    9ef0:	12400304 	addi	r9,r2,12
    9ef4:	2b9d883a 	add	r14,r5,r14
    9ef8:	2811883a 	mov	r8,r5
    9efc:	100f883a 	mov	r7,r2
    9f00:	41000017 	ldw	r4,0(r8)
    9f04:	39c00404 	addi	r7,r7,16
    9f08:	18c00404 	addi	r3,r3,16
    9f0c:	393ffc15 	stw	r4,-16(r7)
    9f10:	193ffc17 	ldw	r4,-16(r3)
    9f14:	6b400404 	addi	r13,r13,16
    9f18:	5ac00404 	addi	r11,r11,16
    9f1c:	693ffc15 	stw	r4,-16(r13)
    9f20:	61000017 	ldw	r4,0(r12)
    9f24:	4a400404 	addi	r9,r9,16
    9f28:	42000404 	addi	r8,r8,16
    9f2c:	593ffc15 	stw	r4,-16(r11)
    9f30:	51000017 	ldw	r4,0(r10)
    9f34:	63000404 	addi	r12,r12,16
    9f38:	52800404 	addi	r10,r10,16
    9f3c:	493ffc15 	stw	r4,-16(r9)
    9f40:	1bbfef1e 	bne	r3,r14,9f00 <__alt_mem_onchip_memory+0xf7809f00>
    9f44:	79000044 	addi	r4,r15,1
    9f48:	2008913a 	slli	r4,r4,4
    9f4c:	328003cc 	andi	r10,r6,15
    9f50:	02c000c4 	movi	r11,3
    9f54:	1107883a 	add	r3,r2,r4
    9f58:	290b883a 	add	r5,r5,r4
    9f5c:	5a801e2e 	bgeu	r11,r10,9fd8 <memmove+0x154>
    9f60:	1813883a 	mov	r9,r3
    9f64:	2811883a 	mov	r8,r5
    9f68:	500f883a 	mov	r7,r10
    9f6c:	41000017 	ldw	r4,0(r8)
    9f70:	4a400104 	addi	r9,r9,4
    9f74:	39ffff04 	addi	r7,r7,-4
    9f78:	493fff15 	stw	r4,-4(r9)
    9f7c:	42000104 	addi	r8,r8,4
    9f80:	59fffa36 	bltu	r11,r7,9f6c <__alt_mem_onchip_memory+0xf7809f6c>
    9f84:	513fff04 	addi	r4,r10,-4
    9f88:	2008d0ba 	srli	r4,r4,2
    9f8c:	318000cc 	andi	r6,r6,3
    9f90:	21000044 	addi	r4,r4,1
    9f94:	2109883a 	add	r4,r4,r4
    9f98:	2109883a 	add	r4,r4,r4
    9f9c:	1907883a 	add	r3,r3,r4
    9fa0:	290b883a 	add	r5,r5,r4
    9fa4:	30000b26 	beq	r6,zero,9fd4 <memmove+0x150>
    9fa8:	198d883a 	add	r6,r3,r6
    9fac:	29c00003 	ldbu	r7,0(r5)
    9fb0:	18c00044 	addi	r3,r3,1
    9fb4:	29400044 	addi	r5,r5,1
    9fb8:	19ffffc5 	stb	r7,-1(r3)
    9fbc:	19bffb1e 	bne	r3,r6,9fac <__alt_mem_onchip_memory+0xf7809fac>
    9fc0:	f800283a 	ret
    9fc4:	1007883a 	mov	r3,r2
    9fc8:	003ff606 	br	9fa4 <__alt_mem_onchip_memory+0xf7809fa4>
    9fcc:	1007883a 	mov	r3,r2
    9fd0:	003ff506 	br	9fa8 <__alt_mem_onchip_memory+0xf7809fa8>
    9fd4:	f800283a 	ret
    9fd8:	500d883a 	mov	r6,r10
    9fdc:	003ff106 	br	9fa4 <__alt_mem_onchip_memory+0xf7809fa4>

00009fe0 <memset>:
    9fe0:	20c000cc 	andi	r3,r4,3
    9fe4:	2005883a 	mov	r2,r4
    9fe8:	18004426 	beq	r3,zero,a0fc <memset+0x11c>
    9fec:	31ffffc4 	addi	r7,r6,-1
    9ff0:	30004026 	beq	r6,zero,a0f4 <memset+0x114>
    9ff4:	2813883a 	mov	r9,r5
    9ff8:	200d883a 	mov	r6,r4
    9ffc:	2007883a 	mov	r3,r4
    a000:	00000406 	br	a014 <memset+0x34>
    a004:	3a3fffc4 	addi	r8,r7,-1
    a008:	31800044 	addi	r6,r6,1
    a00c:	38003926 	beq	r7,zero,a0f4 <memset+0x114>
    a010:	400f883a 	mov	r7,r8
    a014:	18c00044 	addi	r3,r3,1
    a018:	32400005 	stb	r9,0(r6)
    a01c:	1a0000cc 	andi	r8,r3,3
    a020:	403ff81e 	bne	r8,zero,a004 <__alt_mem_onchip_memory+0xf780a004>
    a024:	010000c4 	movi	r4,3
    a028:	21c02d2e 	bgeu	r4,r7,a0e0 <memset+0x100>
    a02c:	29003fcc 	andi	r4,r5,255
    a030:	200c923a 	slli	r6,r4,8
    a034:	3108b03a 	or	r4,r6,r4
    a038:	200c943a 	slli	r6,r4,16
    a03c:	218cb03a 	or	r6,r4,r6
    a040:	010003c4 	movi	r4,15
    a044:	21c0182e 	bgeu	r4,r7,a0a8 <memset+0xc8>
    a048:	3b3ffc04 	addi	r12,r7,-16
    a04c:	6018d13a 	srli	r12,r12,4
    a050:	1a000104 	addi	r8,r3,4
    a054:	1ac00204 	addi	r11,r3,8
    a058:	6008913a 	slli	r4,r12,4
    a05c:	1a800304 	addi	r10,r3,12
    a060:	1813883a 	mov	r9,r3
    a064:	21000504 	addi	r4,r4,20
    a068:	1909883a 	add	r4,r3,r4
    a06c:	49800015 	stw	r6,0(r9)
    a070:	41800015 	stw	r6,0(r8)
    a074:	59800015 	stw	r6,0(r11)
    a078:	51800015 	stw	r6,0(r10)
    a07c:	42000404 	addi	r8,r8,16
    a080:	4a400404 	addi	r9,r9,16
    a084:	5ac00404 	addi	r11,r11,16
    a088:	52800404 	addi	r10,r10,16
    a08c:	413ff71e 	bne	r8,r4,a06c <__alt_mem_onchip_memory+0xf780a06c>
    a090:	63000044 	addi	r12,r12,1
    a094:	6018913a 	slli	r12,r12,4
    a098:	39c003cc 	andi	r7,r7,15
    a09c:	010000c4 	movi	r4,3
    a0a0:	1b07883a 	add	r3,r3,r12
    a0a4:	21c00e2e 	bgeu	r4,r7,a0e0 <memset+0x100>
    a0a8:	1813883a 	mov	r9,r3
    a0ac:	3811883a 	mov	r8,r7
    a0b0:	010000c4 	movi	r4,3
    a0b4:	49800015 	stw	r6,0(r9)
    a0b8:	423fff04 	addi	r8,r8,-4
    a0bc:	4a400104 	addi	r9,r9,4
    a0c0:	223ffc36 	bltu	r4,r8,a0b4 <__alt_mem_onchip_memory+0xf780a0b4>
    a0c4:	393fff04 	addi	r4,r7,-4
    a0c8:	2008d0ba 	srli	r4,r4,2
    a0cc:	39c000cc 	andi	r7,r7,3
    a0d0:	21000044 	addi	r4,r4,1
    a0d4:	2109883a 	add	r4,r4,r4
    a0d8:	2109883a 	add	r4,r4,r4
    a0dc:	1907883a 	add	r3,r3,r4
    a0e0:	38000526 	beq	r7,zero,a0f8 <memset+0x118>
    a0e4:	19cf883a 	add	r7,r3,r7
    a0e8:	19400005 	stb	r5,0(r3)
    a0ec:	18c00044 	addi	r3,r3,1
    a0f0:	38fffd1e 	bne	r7,r3,a0e8 <__alt_mem_onchip_memory+0xf780a0e8>
    a0f4:	f800283a 	ret
    a0f8:	f800283a 	ret
    a0fc:	2007883a 	mov	r3,r4
    a100:	300f883a 	mov	r7,r6
    a104:	003fc706 	br	a024 <__alt_mem_onchip_memory+0xf780a024>

0000a108 <_Balloc>:
    a108:	20801317 	ldw	r2,76(r4)
    a10c:	defffc04 	addi	sp,sp,-16
    a110:	dc400115 	stw	r17,4(sp)
    a114:	dc000015 	stw	r16,0(sp)
    a118:	dfc00315 	stw	ra,12(sp)
    a11c:	dc800215 	stw	r18,8(sp)
    a120:	2023883a 	mov	r17,r4
    a124:	2821883a 	mov	r16,r5
    a128:	10000f26 	beq	r2,zero,a168 <_Balloc+0x60>
    a12c:	8407883a 	add	r3,r16,r16
    a130:	18c7883a 	add	r3,r3,r3
    a134:	10c7883a 	add	r3,r2,r3
    a138:	18800017 	ldw	r2,0(r3)
    a13c:	10001126 	beq	r2,zero,a184 <_Balloc+0x7c>
    a140:	11000017 	ldw	r4,0(r2)
    a144:	19000015 	stw	r4,0(r3)
    a148:	10000415 	stw	zero,16(r2)
    a14c:	10000315 	stw	zero,12(r2)
    a150:	dfc00317 	ldw	ra,12(sp)
    a154:	dc800217 	ldw	r18,8(sp)
    a158:	dc400117 	ldw	r17,4(sp)
    a15c:	dc000017 	ldw	r16,0(sp)
    a160:	dec00404 	addi	sp,sp,16
    a164:	f800283a 	ret
    a168:	01800844 	movi	r6,33
    a16c:	01400104 	movi	r5,4
    a170:	000d2900 	call	d290 <_calloc_r>
    a174:	88801315 	stw	r2,76(r17)
    a178:	103fec1e 	bne	r2,zero,a12c <__alt_mem_onchip_memory+0xf780a12c>
    a17c:	0005883a 	mov	r2,zero
    a180:	003ff306 	br	a150 <__alt_mem_onchip_memory+0xf780a150>
    a184:	01400044 	movi	r5,1
    a188:	2c24983a 	sll	r18,r5,r16
    a18c:	8809883a 	mov	r4,r17
    a190:	91800144 	addi	r6,r18,5
    a194:	318d883a 	add	r6,r6,r6
    a198:	318d883a 	add	r6,r6,r6
    a19c:	000d2900 	call	d290 <_calloc_r>
    a1a0:	103ff626 	beq	r2,zero,a17c <__alt_mem_onchip_memory+0xf780a17c>
    a1a4:	14000115 	stw	r16,4(r2)
    a1a8:	14800215 	stw	r18,8(r2)
    a1ac:	003fe606 	br	a148 <__alt_mem_onchip_memory+0xf780a148>

0000a1b0 <_Bfree>:
    a1b0:	28000826 	beq	r5,zero,a1d4 <_Bfree+0x24>
    a1b4:	28c00117 	ldw	r3,4(r5)
    a1b8:	20801317 	ldw	r2,76(r4)
    a1bc:	18c7883a 	add	r3,r3,r3
    a1c0:	18c7883a 	add	r3,r3,r3
    a1c4:	10c5883a 	add	r2,r2,r3
    a1c8:	10c00017 	ldw	r3,0(r2)
    a1cc:	28c00015 	stw	r3,0(r5)
    a1d0:	11400015 	stw	r5,0(r2)
    a1d4:	f800283a 	ret

0000a1d8 <__multadd>:
    a1d8:	defffa04 	addi	sp,sp,-24
    a1dc:	dc800315 	stw	r18,12(sp)
    a1e0:	dc400215 	stw	r17,8(sp)
    a1e4:	dc000115 	stw	r16,4(sp)
    a1e8:	2823883a 	mov	r17,r5
    a1ec:	2c000417 	ldw	r16,16(r5)
    a1f0:	dfc00515 	stw	ra,20(sp)
    a1f4:	dcc00415 	stw	r19,16(sp)
    a1f8:	2025883a 	mov	r18,r4
    a1fc:	29400504 	addi	r5,r5,20
    a200:	0011883a 	mov	r8,zero
    a204:	28c00017 	ldw	r3,0(r5)
    a208:	29400104 	addi	r5,r5,4
    a20c:	42000044 	addi	r8,r8,1
    a210:	18bfffcc 	andi	r2,r3,65535
    a214:	1185383a 	mul	r2,r2,r6
    a218:	1806d43a 	srli	r3,r3,16
    a21c:	11cf883a 	add	r7,r2,r7
    a220:	3808d43a 	srli	r4,r7,16
    a224:	1987383a 	mul	r3,r3,r6
    a228:	38bfffcc 	andi	r2,r7,65535
    a22c:	1907883a 	add	r3,r3,r4
    a230:	1808943a 	slli	r4,r3,16
    a234:	180ed43a 	srli	r7,r3,16
    a238:	2085883a 	add	r2,r4,r2
    a23c:	28bfff15 	stw	r2,-4(r5)
    a240:	443ff016 	blt	r8,r16,a204 <__alt_mem_onchip_memory+0xf780a204>
    a244:	38000926 	beq	r7,zero,a26c <__multadd+0x94>
    a248:	88800217 	ldw	r2,8(r17)
    a24c:	80800f0e 	bge	r16,r2,a28c <__multadd+0xb4>
    a250:	80800144 	addi	r2,r16,5
    a254:	1085883a 	add	r2,r2,r2
    a258:	1085883a 	add	r2,r2,r2
    a25c:	8885883a 	add	r2,r17,r2
    a260:	11c00015 	stw	r7,0(r2)
    a264:	84000044 	addi	r16,r16,1
    a268:	8c000415 	stw	r16,16(r17)
    a26c:	8805883a 	mov	r2,r17
    a270:	dfc00517 	ldw	ra,20(sp)
    a274:	dcc00417 	ldw	r19,16(sp)
    a278:	dc800317 	ldw	r18,12(sp)
    a27c:	dc400217 	ldw	r17,8(sp)
    a280:	dc000117 	ldw	r16,4(sp)
    a284:	dec00604 	addi	sp,sp,24
    a288:	f800283a 	ret
    a28c:	89400117 	ldw	r5,4(r17)
    a290:	9009883a 	mov	r4,r18
    a294:	d9c00015 	stw	r7,0(sp)
    a298:	29400044 	addi	r5,r5,1
    a29c:	000a1080 	call	a108 <_Balloc>
    a2a0:	89800417 	ldw	r6,16(r17)
    a2a4:	89400304 	addi	r5,r17,12
    a2a8:	11000304 	addi	r4,r2,12
    a2ac:	31800084 	addi	r6,r6,2
    a2b0:	318d883a 	add	r6,r6,r6
    a2b4:	318d883a 	add	r6,r6,r6
    a2b8:	1027883a 	mov	r19,r2
    a2bc:	0009d3c0 	call	9d3c <memcpy>
    a2c0:	d9c00017 	ldw	r7,0(sp)
    a2c4:	88000a26 	beq	r17,zero,a2f0 <__multadd+0x118>
    a2c8:	88c00117 	ldw	r3,4(r17)
    a2cc:	90801317 	ldw	r2,76(r18)
    a2d0:	18c7883a 	add	r3,r3,r3
    a2d4:	18c7883a 	add	r3,r3,r3
    a2d8:	10c5883a 	add	r2,r2,r3
    a2dc:	10c00017 	ldw	r3,0(r2)
    a2e0:	88c00015 	stw	r3,0(r17)
    a2e4:	14400015 	stw	r17,0(r2)
    a2e8:	9823883a 	mov	r17,r19
    a2ec:	003fd806 	br	a250 <__alt_mem_onchip_memory+0xf780a250>
    a2f0:	9823883a 	mov	r17,r19
    a2f4:	003fd606 	br	a250 <__alt_mem_onchip_memory+0xf780a250>

0000a2f8 <__s2b>:
    a2f8:	defff904 	addi	sp,sp,-28
    a2fc:	dc400115 	stw	r17,4(sp)
    a300:	dc000015 	stw	r16,0(sp)
    a304:	2023883a 	mov	r17,r4
    a308:	2821883a 	mov	r16,r5
    a30c:	39000204 	addi	r4,r7,8
    a310:	01400244 	movi	r5,9
    a314:	dcc00315 	stw	r19,12(sp)
    a318:	dc800215 	stw	r18,8(sp)
    a31c:	dfc00615 	stw	ra,24(sp)
    a320:	dd400515 	stw	r21,20(sp)
    a324:	dd000415 	stw	r20,16(sp)
    a328:	3825883a 	mov	r18,r7
    a32c:	3027883a 	mov	r19,r6
    a330:	0003f040 	call	3f04 <__divsi3>
    a334:	00c00044 	movi	r3,1
    a338:	000b883a 	mov	r5,zero
    a33c:	1880030e 	bge	r3,r2,a34c <__s2b+0x54>
    a340:	18c7883a 	add	r3,r3,r3
    a344:	29400044 	addi	r5,r5,1
    a348:	18bffd16 	blt	r3,r2,a340 <__alt_mem_onchip_memory+0xf780a340>
    a34c:	8809883a 	mov	r4,r17
    a350:	000a1080 	call	a108 <_Balloc>
    a354:	d8c00717 	ldw	r3,28(sp)
    a358:	10c00515 	stw	r3,20(r2)
    a35c:	00c00044 	movi	r3,1
    a360:	10c00415 	stw	r3,16(r2)
    a364:	00c00244 	movi	r3,9
    a368:	1cc0210e 	bge	r3,r19,a3f0 <__s2b+0xf8>
    a36c:	80eb883a 	add	r21,r16,r3
    a370:	a829883a 	mov	r20,r21
    a374:	84e1883a 	add	r16,r16,r19
    a378:	a1c00007 	ldb	r7,0(r20)
    a37c:	01800284 	movi	r6,10
    a380:	a5000044 	addi	r20,r20,1
    a384:	100b883a 	mov	r5,r2
    a388:	39fff404 	addi	r7,r7,-48
    a38c:	8809883a 	mov	r4,r17
    a390:	000a1d80 	call	a1d8 <__multadd>
    a394:	a43ff81e 	bne	r20,r16,a378 <__alt_mem_onchip_memory+0xf780a378>
    a398:	ace1883a 	add	r16,r21,r19
    a39c:	843ffe04 	addi	r16,r16,-8
    a3a0:	9c800a0e 	bge	r19,r18,a3cc <__s2b+0xd4>
    a3a4:	94e5c83a 	sub	r18,r18,r19
    a3a8:	84a5883a 	add	r18,r16,r18
    a3ac:	81c00007 	ldb	r7,0(r16)
    a3b0:	01800284 	movi	r6,10
    a3b4:	84000044 	addi	r16,r16,1
    a3b8:	100b883a 	mov	r5,r2
    a3bc:	39fff404 	addi	r7,r7,-48
    a3c0:	8809883a 	mov	r4,r17
    a3c4:	000a1d80 	call	a1d8 <__multadd>
    a3c8:	84bff81e 	bne	r16,r18,a3ac <__alt_mem_onchip_memory+0xf780a3ac>
    a3cc:	dfc00617 	ldw	ra,24(sp)
    a3d0:	dd400517 	ldw	r21,20(sp)
    a3d4:	dd000417 	ldw	r20,16(sp)
    a3d8:	dcc00317 	ldw	r19,12(sp)
    a3dc:	dc800217 	ldw	r18,8(sp)
    a3e0:	dc400117 	ldw	r17,4(sp)
    a3e4:	dc000017 	ldw	r16,0(sp)
    a3e8:	dec00704 	addi	sp,sp,28
    a3ec:	f800283a 	ret
    a3f0:	84000284 	addi	r16,r16,10
    a3f4:	1827883a 	mov	r19,r3
    a3f8:	003fe906 	br	a3a0 <__alt_mem_onchip_memory+0xf780a3a0>

0000a3fc <__hi0bits>:
    a3fc:	20bfffec 	andhi	r2,r4,65535
    a400:	1000141e 	bne	r2,zero,a454 <__hi0bits+0x58>
    a404:	2008943a 	slli	r4,r4,16
    a408:	00800404 	movi	r2,16
    a40c:	20ffc02c 	andhi	r3,r4,65280
    a410:	1800021e 	bne	r3,zero,a41c <__hi0bits+0x20>
    a414:	2008923a 	slli	r4,r4,8
    a418:	10800204 	addi	r2,r2,8
    a41c:	20fc002c 	andhi	r3,r4,61440
    a420:	1800021e 	bne	r3,zero,a42c <__hi0bits+0x30>
    a424:	2008913a 	slli	r4,r4,4
    a428:	10800104 	addi	r2,r2,4
    a42c:	20f0002c 	andhi	r3,r4,49152
    a430:	1800031e 	bne	r3,zero,a440 <__hi0bits+0x44>
    a434:	2109883a 	add	r4,r4,r4
    a438:	10800084 	addi	r2,r2,2
    a43c:	2109883a 	add	r4,r4,r4
    a440:	20000316 	blt	r4,zero,a450 <__hi0bits+0x54>
    a444:	2110002c 	andhi	r4,r4,16384
    a448:	2000041e 	bne	r4,zero,a45c <__hi0bits+0x60>
    a44c:	00800804 	movi	r2,32
    a450:	f800283a 	ret
    a454:	0005883a 	mov	r2,zero
    a458:	003fec06 	br	a40c <__alt_mem_onchip_memory+0xf780a40c>
    a45c:	10800044 	addi	r2,r2,1
    a460:	f800283a 	ret

0000a464 <__lo0bits>:
    a464:	20c00017 	ldw	r3,0(r4)
    a468:	188001cc 	andi	r2,r3,7
    a46c:	10000826 	beq	r2,zero,a490 <__lo0bits+0x2c>
    a470:	1880004c 	andi	r2,r3,1
    a474:	1000211e 	bne	r2,zero,a4fc <__lo0bits+0x98>
    a478:	1880008c 	andi	r2,r3,2
    a47c:	1000211e 	bne	r2,zero,a504 <__lo0bits+0xa0>
    a480:	1806d0ba 	srli	r3,r3,2
    a484:	00800084 	movi	r2,2
    a488:	20c00015 	stw	r3,0(r4)
    a48c:	f800283a 	ret
    a490:	18bfffcc 	andi	r2,r3,65535
    a494:	10001326 	beq	r2,zero,a4e4 <__lo0bits+0x80>
    a498:	0005883a 	mov	r2,zero
    a49c:	19403fcc 	andi	r5,r3,255
    a4a0:	2800021e 	bne	r5,zero,a4ac <__lo0bits+0x48>
    a4a4:	1806d23a 	srli	r3,r3,8
    a4a8:	10800204 	addi	r2,r2,8
    a4ac:	194003cc 	andi	r5,r3,15
    a4b0:	2800021e 	bne	r5,zero,a4bc <__lo0bits+0x58>
    a4b4:	1806d13a 	srli	r3,r3,4
    a4b8:	10800104 	addi	r2,r2,4
    a4bc:	194000cc 	andi	r5,r3,3
    a4c0:	2800021e 	bne	r5,zero,a4cc <__lo0bits+0x68>
    a4c4:	1806d0ba 	srli	r3,r3,2
    a4c8:	10800084 	addi	r2,r2,2
    a4cc:	1940004c 	andi	r5,r3,1
    a4d0:	2800081e 	bne	r5,zero,a4f4 <__lo0bits+0x90>
    a4d4:	1806d07a 	srli	r3,r3,1
    a4d8:	1800051e 	bne	r3,zero,a4f0 <__lo0bits+0x8c>
    a4dc:	00800804 	movi	r2,32
    a4e0:	f800283a 	ret
    a4e4:	1806d43a 	srli	r3,r3,16
    a4e8:	00800404 	movi	r2,16
    a4ec:	003feb06 	br	a49c <__alt_mem_onchip_memory+0xf780a49c>
    a4f0:	10800044 	addi	r2,r2,1
    a4f4:	20c00015 	stw	r3,0(r4)
    a4f8:	f800283a 	ret
    a4fc:	0005883a 	mov	r2,zero
    a500:	f800283a 	ret
    a504:	1806d07a 	srli	r3,r3,1
    a508:	00800044 	movi	r2,1
    a50c:	20c00015 	stw	r3,0(r4)
    a510:	f800283a 	ret

0000a514 <__i2b>:
    a514:	defffd04 	addi	sp,sp,-12
    a518:	dc000015 	stw	r16,0(sp)
    a51c:	04000044 	movi	r16,1
    a520:	dc400115 	stw	r17,4(sp)
    a524:	2823883a 	mov	r17,r5
    a528:	800b883a 	mov	r5,r16
    a52c:	dfc00215 	stw	ra,8(sp)
    a530:	000a1080 	call	a108 <_Balloc>
    a534:	14400515 	stw	r17,20(r2)
    a538:	14000415 	stw	r16,16(r2)
    a53c:	dfc00217 	ldw	ra,8(sp)
    a540:	dc400117 	ldw	r17,4(sp)
    a544:	dc000017 	ldw	r16,0(sp)
    a548:	dec00304 	addi	sp,sp,12
    a54c:	f800283a 	ret

0000a550 <__multiply>:
    a550:	defffa04 	addi	sp,sp,-24
    a554:	dcc00315 	stw	r19,12(sp)
    a558:	dc800215 	stw	r18,8(sp)
    a55c:	34c00417 	ldw	r19,16(r6)
    a560:	2c800417 	ldw	r18,16(r5)
    a564:	dd000415 	stw	r20,16(sp)
    a568:	dc400115 	stw	r17,4(sp)
    a56c:	dfc00515 	stw	ra,20(sp)
    a570:	dc000015 	stw	r16,0(sp)
    a574:	2829883a 	mov	r20,r5
    a578:	3023883a 	mov	r17,r6
    a57c:	94c0050e 	bge	r18,r19,a594 <__multiply+0x44>
    a580:	9007883a 	mov	r3,r18
    a584:	3029883a 	mov	r20,r6
    a588:	9825883a 	mov	r18,r19
    a58c:	2823883a 	mov	r17,r5
    a590:	1827883a 	mov	r19,r3
    a594:	a0800217 	ldw	r2,8(r20)
    a598:	94e1883a 	add	r16,r18,r19
    a59c:	a1400117 	ldw	r5,4(r20)
    a5a0:	1400010e 	bge	r2,r16,a5a8 <__multiply+0x58>
    a5a4:	29400044 	addi	r5,r5,1
    a5a8:	000a1080 	call	a108 <_Balloc>
    a5ac:	8415883a 	add	r10,r16,r16
    a5b0:	12c00504 	addi	r11,r2,20
    a5b4:	5295883a 	add	r10,r10,r10
    a5b8:	5a95883a 	add	r10,r11,r10
    a5bc:	5807883a 	mov	r3,r11
    a5c0:	5a80032e 	bgeu	r11,r10,a5d0 <__multiply+0x80>
    a5c4:	18000015 	stw	zero,0(r3)
    a5c8:	18c00104 	addi	r3,r3,4
    a5cc:	1abffd36 	bltu	r3,r10,a5c4 <__alt_mem_onchip_memory+0xf780a5c4>
    a5d0:	9ce7883a 	add	r19,r19,r19
    a5d4:	94a5883a 	add	r18,r18,r18
    a5d8:	89800504 	addi	r6,r17,20
    a5dc:	9ce7883a 	add	r19,r19,r19
    a5e0:	a3400504 	addi	r13,r20,20
    a5e4:	94a5883a 	add	r18,r18,r18
    a5e8:	34d9883a 	add	r12,r6,r19
    a5ec:	6c93883a 	add	r9,r13,r18
    a5f0:	3300422e 	bgeu	r6,r12,a6fc <__multiply+0x1ac>
    a5f4:	37c00017 	ldw	ra,0(r6)
    a5f8:	fbffffcc 	andi	r15,ra,65535
    a5fc:	78001b26 	beq	r15,zero,a66c <__multiply+0x11c>
    a600:	5811883a 	mov	r8,r11
    a604:	681d883a 	mov	r14,r13
    a608:	000f883a 	mov	r7,zero
    a60c:	71000017 	ldw	r4,0(r14)
    a610:	40c00017 	ldw	r3,0(r8)
    a614:	73800104 	addi	r14,r14,4
    a618:	217fffcc 	andi	r5,r4,65535
    a61c:	2bcb383a 	mul	r5,r5,r15
    a620:	2008d43a 	srli	r4,r4,16
    a624:	1c7fffcc 	andi	r17,r3,65535
    a628:	2c4b883a 	add	r5,r5,r17
    a62c:	29cb883a 	add	r5,r5,r7
    a630:	23c9383a 	mul	r4,r4,r15
    a634:	1806d43a 	srli	r3,r3,16
    a638:	280ed43a 	srli	r7,r5,16
    a63c:	297fffcc 	andi	r5,r5,65535
    a640:	20c7883a 	add	r3,r4,r3
    a644:	19c7883a 	add	r3,r3,r7
    a648:	1808943a 	slli	r4,r3,16
    a64c:	4023883a 	mov	r17,r8
    a650:	180ed43a 	srli	r7,r3,16
    a654:	214ab03a 	or	r5,r4,r5
    a658:	41400015 	stw	r5,0(r8)
    a65c:	42000104 	addi	r8,r8,4
    a660:	727fea36 	bltu	r14,r9,a60c <__alt_mem_onchip_memory+0xf780a60c>
    a664:	89c00115 	stw	r7,4(r17)
    a668:	37c00017 	ldw	ra,0(r6)
    a66c:	f83ed43a 	srli	ra,ra,16
    a670:	f8001f26 	beq	ra,zero,a6f0 <__multiply+0x1a0>
    a674:	58c00017 	ldw	r3,0(r11)
    a678:	681d883a 	mov	r14,r13
    a67c:	581f883a 	mov	r15,r11
    a680:	1811883a 	mov	r8,r3
    a684:	5825883a 	mov	r18,r11
    a688:	000f883a 	mov	r7,zero
    a68c:	00000106 	br	a694 <__multiply+0x144>
    a690:	8825883a 	mov	r18,r17
    a694:	7140000b 	ldhu	r5,0(r14)
    a698:	4010d43a 	srli	r8,r8,16
    a69c:	193fffcc 	andi	r4,r3,65535
    a6a0:	2fcb383a 	mul	r5,r5,ra
    a6a4:	7bc00104 	addi	r15,r15,4
    a6a8:	73800104 	addi	r14,r14,4
    a6ac:	2a0b883a 	add	r5,r5,r8
    a6b0:	29cb883a 	add	r5,r5,r7
    a6b4:	2806943a 	slli	r3,r5,16
    a6b8:	94400104 	addi	r17,r18,4
    a6bc:	280ad43a 	srli	r5,r5,16
    a6c0:	1908b03a 	or	r4,r3,r4
    a6c4:	793fff15 	stw	r4,-4(r15)
    a6c8:	70ffff17 	ldw	r3,-4(r14)
    a6cc:	8a000017 	ldw	r8,0(r17)
    a6d0:	1806d43a 	srli	r3,r3,16
    a6d4:	413fffcc 	andi	r4,r8,65535
    a6d8:	1fc7383a 	mul	r3,r3,ra
    a6dc:	1907883a 	add	r3,r3,r4
    a6e0:	1947883a 	add	r3,r3,r5
    a6e4:	180ed43a 	srli	r7,r3,16
    a6e8:	727fe936 	bltu	r14,r9,a690 <__alt_mem_onchip_memory+0xf780a690>
    a6ec:	90c00115 	stw	r3,4(r18)
    a6f0:	31800104 	addi	r6,r6,4
    a6f4:	5ac00104 	addi	r11,r11,4
    a6f8:	333fbe36 	bltu	r6,r12,a5f4 <__alt_mem_onchip_memory+0xf780a5f4>
    a6fc:	0400090e 	bge	zero,r16,a724 <__multiply+0x1d4>
    a700:	50ffff17 	ldw	r3,-4(r10)
    a704:	52bfff04 	addi	r10,r10,-4
    a708:	18000326 	beq	r3,zero,a718 <__multiply+0x1c8>
    a70c:	00000506 	br	a724 <__multiply+0x1d4>
    a710:	50c00017 	ldw	r3,0(r10)
    a714:	1800031e 	bne	r3,zero,a724 <__multiply+0x1d4>
    a718:	843fffc4 	addi	r16,r16,-1
    a71c:	52bfff04 	addi	r10,r10,-4
    a720:	803ffb1e 	bne	r16,zero,a710 <__alt_mem_onchip_memory+0xf780a710>
    a724:	14000415 	stw	r16,16(r2)
    a728:	dfc00517 	ldw	ra,20(sp)
    a72c:	dd000417 	ldw	r20,16(sp)
    a730:	dcc00317 	ldw	r19,12(sp)
    a734:	dc800217 	ldw	r18,8(sp)
    a738:	dc400117 	ldw	r17,4(sp)
    a73c:	dc000017 	ldw	r16,0(sp)
    a740:	dec00604 	addi	sp,sp,24
    a744:	f800283a 	ret

0000a748 <__pow5mult>:
    a748:	defffa04 	addi	sp,sp,-24
    a74c:	dcc00315 	stw	r19,12(sp)
    a750:	dc000015 	stw	r16,0(sp)
    a754:	dfc00515 	stw	ra,20(sp)
    a758:	dd000415 	stw	r20,16(sp)
    a75c:	dc800215 	stw	r18,8(sp)
    a760:	dc400115 	stw	r17,4(sp)
    a764:	308000cc 	andi	r2,r6,3
    a768:	3021883a 	mov	r16,r6
    a76c:	2027883a 	mov	r19,r4
    a770:	10002f1e 	bne	r2,zero,a830 <__pow5mult+0xe8>
    a774:	2825883a 	mov	r18,r5
    a778:	8021d0ba 	srai	r16,r16,2
    a77c:	80001a26 	beq	r16,zero,a7e8 <__pow5mult+0xa0>
    a780:	9c401217 	ldw	r17,72(r19)
    a784:	8800061e 	bne	r17,zero,a7a0 <__pow5mult+0x58>
    a788:	00003406 	br	a85c <__pow5mult+0x114>
    a78c:	8021d07a 	srai	r16,r16,1
    a790:	80001526 	beq	r16,zero,a7e8 <__pow5mult+0xa0>
    a794:	88800017 	ldw	r2,0(r17)
    a798:	10001c26 	beq	r2,zero,a80c <__pow5mult+0xc4>
    a79c:	1023883a 	mov	r17,r2
    a7a0:	8080004c 	andi	r2,r16,1
    a7a4:	103ff926 	beq	r2,zero,a78c <__alt_mem_onchip_memory+0xf780a78c>
    a7a8:	880d883a 	mov	r6,r17
    a7ac:	900b883a 	mov	r5,r18
    a7b0:	9809883a 	mov	r4,r19
    a7b4:	000a5500 	call	a550 <__multiply>
    a7b8:	90001b26 	beq	r18,zero,a828 <__pow5mult+0xe0>
    a7bc:	91000117 	ldw	r4,4(r18)
    a7c0:	98c01317 	ldw	r3,76(r19)
    a7c4:	8021d07a 	srai	r16,r16,1
    a7c8:	2109883a 	add	r4,r4,r4
    a7cc:	2109883a 	add	r4,r4,r4
    a7d0:	1907883a 	add	r3,r3,r4
    a7d4:	19000017 	ldw	r4,0(r3)
    a7d8:	91000015 	stw	r4,0(r18)
    a7dc:	1c800015 	stw	r18,0(r3)
    a7e0:	1025883a 	mov	r18,r2
    a7e4:	803feb1e 	bne	r16,zero,a794 <__alt_mem_onchip_memory+0xf780a794>
    a7e8:	9005883a 	mov	r2,r18
    a7ec:	dfc00517 	ldw	ra,20(sp)
    a7f0:	dd000417 	ldw	r20,16(sp)
    a7f4:	dcc00317 	ldw	r19,12(sp)
    a7f8:	dc800217 	ldw	r18,8(sp)
    a7fc:	dc400117 	ldw	r17,4(sp)
    a800:	dc000017 	ldw	r16,0(sp)
    a804:	dec00604 	addi	sp,sp,24
    a808:	f800283a 	ret
    a80c:	880d883a 	mov	r6,r17
    a810:	880b883a 	mov	r5,r17
    a814:	9809883a 	mov	r4,r19
    a818:	000a5500 	call	a550 <__multiply>
    a81c:	88800015 	stw	r2,0(r17)
    a820:	10000015 	stw	zero,0(r2)
    a824:	003fdd06 	br	a79c <__alt_mem_onchip_memory+0xf780a79c>
    a828:	1025883a 	mov	r18,r2
    a82c:	003fd706 	br	a78c <__alt_mem_onchip_memory+0xf780a78c>
    a830:	10bfffc4 	addi	r2,r2,-1
    a834:	1085883a 	add	r2,r2,r2
    a838:	00c00074 	movhi	r3,1
    a83c:	18c62a04 	addi	r3,r3,6312
    a840:	1085883a 	add	r2,r2,r2
    a844:	1885883a 	add	r2,r3,r2
    a848:	11800017 	ldw	r6,0(r2)
    a84c:	000f883a 	mov	r7,zero
    a850:	000a1d80 	call	a1d8 <__multadd>
    a854:	1025883a 	mov	r18,r2
    a858:	003fc706 	br	a778 <__alt_mem_onchip_memory+0xf780a778>
    a85c:	05000044 	movi	r20,1
    a860:	a00b883a 	mov	r5,r20
    a864:	9809883a 	mov	r4,r19
    a868:	000a1080 	call	a108 <_Balloc>
    a86c:	1023883a 	mov	r17,r2
    a870:	00809c44 	movi	r2,625
    a874:	88800515 	stw	r2,20(r17)
    a878:	8d000415 	stw	r20,16(r17)
    a87c:	9c401215 	stw	r17,72(r19)
    a880:	88000015 	stw	zero,0(r17)
    a884:	003fc606 	br	a7a0 <__alt_mem_onchip_memory+0xf780a7a0>

0000a888 <__lshift>:
    a888:	defff904 	addi	sp,sp,-28
    a88c:	dd400515 	stw	r21,20(sp)
    a890:	dcc00315 	stw	r19,12(sp)
    a894:	302bd17a 	srai	r21,r6,5
    a898:	2cc00417 	ldw	r19,16(r5)
    a89c:	28800217 	ldw	r2,8(r5)
    a8a0:	dd000415 	stw	r20,16(sp)
    a8a4:	ace7883a 	add	r19,r21,r19
    a8a8:	dc800215 	stw	r18,8(sp)
    a8ac:	dc400115 	stw	r17,4(sp)
    a8b0:	dc000015 	stw	r16,0(sp)
    a8b4:	dfc00615 	stw	ra,24(sp)
    a8b8:	9c000044 	addi	r16,r19,1
    a8bc:	2823883a 	mov	r17,r5
    a8c0:	3029883a 	mov	r20,r6
    a8c4:	2025883a 	mov	r18,r4
    a8c8:	29400117 	ldw	r5,4(r5)
    a8cc:	1400030e 	bge	r2,r16,a8dc <__lshift+0x54>
    a8d0:	1085883a 	add	r2,r2,r2
    a8d4:	29400044 	addi	r5,r5,1
    a8d8:	143ffd16 	blt	r2,r16,a8d0 <__alt_mem_onchip_memory+0xf780a8d0>
    a8dc:	9009883a 	mov	r4,r18
    a8e0:	000a1080 	call	a108 <_Balloc>
    a8e4:	10c00504 	addi	r3,r2,20
    a8e8:	0540070e 	bge	zero,r21,a908 <__lshift+0x80>
    a8ec:	ad6b883a 	add	r21,r21,r21
    a8f0:	ad6b883a 	add	r21,r21,r21
    a8f4:	1809883a 	mov	r4,r3
    a8f8:	1d47883a 	add	r3,r3,r21
    a8fc:	20000015 	stw	zero,0(r4)
    a900:	21000104 	addi	r4,r4,4
    a904:	193ffd1e 	bne	r3,r4,a8fc <__alt_mem_onchip_memory+0xf780a8fc>
    a908:	8a000417 	ldw	r8,16(r17)
    a90c:	89000504 	addi	r4,r17,20
    a910:	a18007cc 	andi	r6,r20,31
    a914:	4211883a 	add	r8,r8,r8
    a918:	4211883a 	add	r8,r8,r8
    a91c:	2211883a 	add	r8,r4,r8
    a920:	30002326 	beq	r6,zero,a9b0 <__lshift+0x128>
    a924:	02400804 	movi	r9,32
    a928:	4993c83a 	sub	r9,r9,r6
    a92c:	000b883a 	mov	r5,zero
    a930:	21c00017 	ldw	r7,0(r4)
    a934:	1815883a 	mov	r10,r3
    a938:	18c00104 	addi	r3,r3,4
    a93c:	398e983a 	sll	r7,r7,r6
    a940:	21000104 	addi	r4,r4,4
    a944:	394ab03a 	or	r5,r7,r5
    a948:	197fff15 	stw	r5,-4(r3)
    a94c:	217fff17 	ldw	r5,-4(r4)
    a950:	2a4ad83a 	srl	r5,r5,r9
    a954:	223ff636 	bltu	r4,r8,a930 <__alt_mem_onchip_memory+0xf780a930>
    a958:	51400115 	stw	r5,4(r10)
    a95c:	28001a1e 	bne	r5,zero,a9c8 <__lshift+0x140>
    a960:	843fffc4 	addi	r16,r16,-1
    a964:	14000415 	stw	r16,16(r2)
    a968:	88000826 	beq	r17,zero,a98c <__lshift+0x104>
    a96c:	89000117 	ldw	r4,4(r17)
    a970:	90c01317 	ldw	r3,76(r18)
    a974:	2109883a 	add	r4,r4,r4
    a978:	2109883a 	add	r4,r4,r4
    a97c:	1907883a 	add	r3,r3,r4
    a980:	19000017 	ldw	r4,0(r3)
    a984:	89000015 	stw	r4,0(r17)
    a988:	1c400015 	stw	r17,0(r3)
    a98c:	dfc00617 	ldw	ra,24(sp)
    a990:	dd400517 	ldw	r21,20(sp)
    a994:	dd000417 	ldw	r20,16(sp)
    a998:	dcc00317 	ldw	r19,12(sp)
    a99c:	dc800217 	ldw	r18,8(sp)
    a9a0:	dc400117 	ldw	r17,4(sp)
    a9a4:	dc000017 	ldw	r16,0(sp)
    a9a8:	dec00704 	addi	sp,sp,28
    a9ac:	f800283a 	ret
    a9b0:	21400017 	ldw	r5,0(r4)
    a9b4:	18c00104 	addi	r3,r3,4
    a9b8:	21000104 	addi	r4,r4,4
    a9bc:	197fff15 	stw	r5,-4(r3)
    a9c0:	223ffb36 	bltu	r4,r8,a9b0 <__alt_mem_onchip_memory+0xf780a9b0>
    a9c4:	003fe606 	br	a960 <__alt_mem_onchip_memory+0xf780a960>
    a9c8:	9c000084 	addi	r16,r19,2
    a9cc:	003fe406 	br	a960 <__alt_mem_onchip_memory+0xf780a960>

0000a9d0 <__mcmp>:
    a9d0:	20800417 	ldw	r2,16(r4)
    a9d4:	28c00417 	ldw	r3,16(r5)
    a9d8:	10c5c83a 	sub	r2,r2,r3
    a9dc:	1000111e 	bne	r2,zero,aa24 <__mcmp+0x54>
    a9e0:	18c7883a 	add	r3,r3,r3
    a9e4:	18c7883a 	add	r3,r3,r3
    a9e8:	21000504 	addi	r4,r4,20
    a9ec:	29400504 	addi	r5,r5,20
    a9f0:	20c5883a 	add	r2,r4,r3
    a9f4:	28cb883a 	add	r5,r5,r3
    a9f8:	00000106 	br	aa00 <__mcmp+0x30>
    a9fc:	20800a2e 	bgeu	r4,r2,aa28 <__mcmp+0x58>
    aa00:	10bfff04 	addi	r2,r2,-4
    aa04:	297fff04 	addi	r5,r5,-4
    aa08:	11800017 	ldw	r6,0(r2)
    aa0c:	28c00017 	ldw	r3,0(r5)
    aa10:	30fffa26 	beq	r6,r3,a9fc <__alt_mem_onchip_memory+0xf780a9fc>
    aa14:	30c00236 	bltu	r6,r3,aa20 <__mcmp+0x50>
    aa18:	00800044 	movi	r2,1
    aa1c:	f800283a 	ret
    aa20:	00bfffc4 	movi	r2,-1
    aa24:	f800283a 	ret
    aa28:	0005883a 	mov	r2,zero
    aa2c:	f800283a 	ret

0000aa30 <__mdiff>:
    aa30:	28c00417 	ldw	r3,16(r5)
    aa34:	30800417 	ldw	r2,16(r6)
    aa38:	defffa04 	addi	sp,sp,-24
    aa3c:	dcc00315 	stw	r19,12(sp)
    aa40:	dc800215 	stw	r18,8(sp)
    aa44:	dfc00515 	stw	ra,20(sp)
    aa48:	dd000415 	stw	r20,16(sp)
    aa4c:	dc400115 	stw	r17,4(sp)
    aa50:	dc000015 	stw	r16,0(sp)
    aa54:	1887c83a 	sub	r3,r3,r2
    aa58:	2825883a 	mov	r18,r5
    aa5c:	3027883a 	mov	r19,r6
    aa60:	1800141e 	bne	r3,zero,aab4 <__mdiff+0x84>
    aa64:	1085883a 	add	r2,r2,r2
    aa68:	1085883a 	add	r2,r2,r2
    aa6c:	2a000504 	addi	r8,r5,20
    aa70:	34000504 	addi	r16,r6,20
    aa74:	4087883a 	add	r3,r8,r2
    aa78:	8085883a 	add	r2,r16,r2
    aa7c:	00000106 	br	aa84 <__mdiff+0x54>
    aa80:	40c0592e 	bgeu	r8,r3,abe8 <__mdiff+0x1b8>
    aa84:	18ffff04 	addi	r3,r3,-4
    aa88:	10bfff04 	addi	r2,r2,-4
    aa8c:	19c00017 	ldw	r7,0(r3)
    aa90:	11400017 	ldw	r5,0(r2)
    aa94:	397ffa26 	beq	r7,r5,aa80 <__alt_mem_onchip_memory+0xf780aa80>
    aa98:	3940592e 	bgeu	r7,r5,ac00 <__mdiff+0x1d0>
    aa9c:	9005883a 	mov	r2,r18
    aaa0:	4023883a 	mov	r17,r8
    aaa4:	9825883a 	mov	r18,r19
    aaa8:	05000044 	movi	r20,1
    aaac:	1027883a 	mov	r19,r2
    aab0:	00000406 	br	aac4 <__mdiff+0x94>
    aab4:	18005616 	blt	r3,zero,ac10 <__mdiff+0x1e0>
    aab8:	34400504 	addi	r17,r6,20
    aabc:	2c000504 	addi	r16,r5,20
    aac0:	0029883a 	mov	r20,zero
    aac4:	91400117 	ldw	r5,4(r18)
    aac8:	000a1080 	call	a108 <_Balloc>
    aacc:	92400417 	ldw	r9,16(r18)
    aad0:	9b000417 	ldw	r12,16(r19)
    aad4:	12c00504 	addi	r11,r2,20
    aad8:	4a51883a 	add	r8,r9,r9
    aadc:	6319883a 	add	r12,r12,r12
    aae0:	4211883a 	add	r8,r8,r8
    aae4:	6319883a 	add	r12,r12,r12
    aae8:	15000315 	stw	r20,12(r2)
    aaec:	8211883a 	add	r8,r16,r8
    aaf0:	8b19883a 	add	r12,r17,r12
    aaf4:	0007883a 	mov	r3,zero
    aaf8:	81400017 	ldw	r5,0(r16)
    aafc:	89c00017 	ldw	r7,0(r17)
    ab00:	59800104 	addi	r6,r11,4
    ab04:	293fffcc 	andi	r4,r5,65535
    ab08:	20c7883a 	add	r3,r4,r3
    ab0c:	393fffcc 	andi	r4,r7,65535
    ab10:	1909c83a 	sub	r4,r3,r4
    ab14:	280ad43a 	srli	r5,r5,16
    ab18:	380ed43a 	srli	r7,r7,16
    ab1c:	2007d43a 	srai	r3,r4,16
    ab20:	213fffcc 	andi	r4,r4,65535
    ab24:	29cbc83a 	sub	r5,r5,r7
    ab28:	28c7883a 	add	r3,r5,r3
    ab2c:	180a943a 	slli	r5,r3,16
    ab30:	8c400104 	addi	r17,r17,4
    ab34:	84000104 	addi	r16,r16,4
    ab38:	2908b03a 	or	r4,r5,r4
    ab3c:	59000015 	stw	r4,0(r11)
    ab40:	1807d43a 	srai	r3,r3,16
    ab44:	3015883a 	mov	r10,r6
    ab48:	3017883a 	mov	r11,r6
    ab4c:	8b3fea36 	bltu	r17,r12,aaf8 <__alt_mem_onchip_memory+0xf780aaf8>
    ab50:	8200162e 	bgeu	r16,r8,abac <__mdiff+0x17c>
    ab54:	8017883a 	mov	r11,r16
    ab58:	59400017 	ldw	r5,0(r11)
    ab5c:	31800104 	addi	r6,r6,4
    ab60:	5ac00104 	addi	r11,r11,4
    ab64:	293fffcc 	andi	r4,r5,65535
    ab68:	20c7883a 	add	r3,r4,r3
    ab6c:	280ed43a 	srli	r7,r5,16
    ab70:	180bd43a 	srai	r5,r3,16
    ab74:	193fffcc 	andi	r4,r3,65535
    ab78:	3947883a 	add	r3,r7,r5
    ab7c:	180a943a 	slli	r5,r3,16
    ab80:	1807d43a 	srai	r3,r3,16
    ab84:	2908b03a 	or	r4,r5,r4
    ab88:	313fff15 	stw	r4,-4(r6)
    ab8c:	5a3ff236 	bltu	r11,r8,ab58 <__alt_mem_onchip_memory+0xf780ab58>
    ab90:	0406303a 	nor	r3,zero,r16
    ab94:	1a07883a 	add	r3,r3,r8
    ab98:	1806d0ba 	srli	r3,r3,2
    ab9c:	18c00044 	addi	r3,r3,1
    aba0:	18c7883a 	add	r3,r3,r3
    aba4:	18c7883a 	add	r3,r3,r3
    aba8:	50d5883a 	add	r10,r10,r3
    abac:	50ffff04 	addi	r3,r10,-4
    abb0:	2000041e 	bne	r4,zero,abc4 <__mdiff+0x194>
    abb4:	18ffff04 	addi	r3,r3,-4
    abb8:	19000017 	ldw	r4,0(r3)
    abbc:	4a7fffc4 	addi	r9,r9,-1
    abc0:	203ffc26 	beq	r4,zero,abb4 <__alt_mem_onchip_memory+0xf780abb4>
    abc4:	12400415 	stw	r9,16(r2)
    abc8:	dfc00517 	ldw	ra,20(sp)
    abcc:	dd000417 	ldw	r20,16(sp)
    abd0:	dcc00317 	ldw	r19,12(sp)
    abd4:	dc800217 	ldw	r18,8(sp)
    abd8:	dc400117 	ldw	r17,4(sp)
    abdc:	dc000017 	ldw	r16,0(sp)
    abe0:	dec00604 	addi	sp,sp,24
    abe4:	f800283a 	ret
    abe8:	000b883a 	mov	r5,zero
    abec:	000a1080 	call	a108 <_Balloc>
    abf0:	00c00044 	movi	r3,1
    abf4:	10c00415 	stw	r3,16(r2)
    abf8:	10000515 	stw	zero,20(r2)
    abfc:	003ff206 	br	abc8 <__alt_mem_onchip_memory+0xf780abc8>
    ac00:	8023883a 	mov	r17,r16
    ac04:	0029883a 	mov	r20,zero
    ac08:	4021883a 	mov	r16,r8
    ac0c:	003fad06 	br	aac4 <__alt_mem_onchip_memory+0xf780aac4>
    ac10:	9005883a 	mov	r2,r18
    ac14:	94400504 	addi	r17,r18,20
    ac18:	9c000504 	addi	r16,r19,20
    ac1c:	9825883a 	mov	r18,r19
    ac20:	05000044 	movi	r20,1
    ac24:	1027883a 	mov	r19,r2
    ac28:	003fa606 	br	aac4 <__alt_mem_onchip_memory+0xf780aac4>

0000ac2c <__ulp>:
    ac2c:	295ffc2c 	andhi	r5,r5,32752
    ac30:	00bf3034 	movhi	r2,64704
    ac34:	2887883a 	add	r3,r5,r2
    ac38:	00c0020e 	bge	zero,r3,ac44 <__ulp+0x18>
    ac3c:	0005883a 	mov	r2,zero
    ac40:	f800283a 	ret
    ac44:	00c7c83a 	sub	r3,zero,r3
    ac48:	1807d53a 	srai	r3,r3,20
    ac4c:	008004c4 	movi	r2,19
    ac50:	10c00b0e 	bge	r2,r3,ac80 <__ulp+0x54>
    ac54:	18bffb04 	addi	r2,r3,-20
    ac58:	01000784 	movi	r4,30
    ac5c:	0007883a 	mov	r3,zero
    ac60:	20800516 	blt	r4,r2,ac78 <__ulp+0x4c>
    ac64:	010007c4 	movi	r4,31
    ac68:	2089c83a 	sub	r4,r4,r2
    ac6c:	00800044 	movi	r2,1
    ac70:	1104983a 	sll	r2,r2,r4
    ac74:	f800283a 	ret
    ac78:	00800044 	movi	r2,1
    ac7c:	f800283a 	ret
    ac80:	01400234 	movhi	r5,8
    ac84:	28c7d83a 	sra	r3,r5,r3
    ac88:	0005883a 	mov	r2,zero
    ac8c:	f800283a 	ret

0000ac90 <__b2d>:
    ac90:	defffa04 	addi	sp,sp,-24
    ac94:	dc000015 	stw	r16,0(sp)
    ac98:	24000417 	ldw	r16,16(r4)
    ac9c:	dc400115 	stw	r17,4(sp)
    aca0:	24400504 	addi	r17,r4,20
    aca4:	8421883a 	add	r16,r16,r16
    aca8:	8421883a 	add	r16,r16,r16
    acac:	8c21883a 	add	r16,r17,r16
    acb0:	dc800215 	stw	r18,8(sp)
    acb4:	84bfff17 	ldw	r18,-4(r16)
    acb8:	dd000415 	stw	r20,16(sp)
    acbc:	dcc00315 	stw	r19,12(sp)
    acc0:	9009883a 	mov	r4,r18
    acc4:	2829883a 	mov	r20,r5
    acc8:	dfc00515 	stw	ra,20(sp)
    accc:	000a3fc0 	call	a3fc <__hi0bits>
    acd0:	00c00804 	movi	r3,32
    acd4:	1889c83a 	sub	r4,r3,r2
    acd8:	a1000015 	stw	r4,0(r20)
    acdc:	01000284 	movi	r4,10
    ace0:	84ffff04 	addi	r19,r16,-4
    ace4:	20801216 	blt	r4,r2,ad30 <__b2d+0xa0>
    ace8:	018002c4 	movi	r6,11
    acec:	308dc83a 	sub	r6,r6,r2
    acf0:	9186d83a 	srl	r3,r18,r6
    acf4:	18cffc34 	orhi	r3,r3,16368
    acf8:	8cc0212e 	bgeu	r17,r19,ad80 <__b2d+0xf0>
    acfc:	813ffe17 	ldw	r4,-8(r16)
    ad00:	218cd83a 	srl	r6,r4,r6
    ad04:	10800544 	addi	r2,r2,21
    ad08:	9084983a 	sll	r2,r18,r2
    ad0c:	1184b03a 	or	r2,r2,r6
    ad10:	dfc00517 	ldw	ra,20(sp)
    ad14:	dd000417 	ldw	r20,16(sp)
    ad18:	dcc00317 	ldw	r19,12(sp)
    ad1c:	dc800217 	ldw	r18,8(sp)
    ad20:	dc400117 	ldw	r17,4(sp)
    ad24:	dc000017 	ldw	r16,0(sp)
    ad28:	dec00604 	addi	sp,sp,24
    ad2c:	f800283a 	ret
    ad30:	8cc00f2e 	bgeu	r17,r19,ad70 <__b2d+0xe0>
    ad34:	117ffd44 	addi	r5,r2,-11
    ad38:	80bffe17 	ldw	r2,-8(r16)
    ad3c:	28000e26 	beq	r5,zero,ad78 <__b2d+0xe8>
    ad40:	1949c83a 	sub	r4,r3,r5
    ad44:	9164983a 	sll	r18,r18,r5
    ad48:	1106d83a 	srl	r3,r2,r4
    ad4c:	81bffe04 	addi	r6,r16,-8
    ad50:	948ffc34 	orhi	r18,r18,16368
    ad54:	90c6b03a 	or	r3,r18,r3
    ad58:	89800e2e 	bgeu	r17,r6,ad94 <__b2d+0x104>
    ad5c:	81bffd17 	ldw	r6,-12(r16)
    ad60:	1144983a 	sll	r2,r2,r5
    ad64:	310ad83a 	srl	r5,r6,r4
    ad68:	2884b03a 	or	r2,r5,r2
    ad6c:	003fe806 	br	ad10 <__alt_mem_onchip_memory+0xf780ad10>
    ad70:	10bffd44 	addi	r2,r2,-11
    ad74:	1000041e 	bne	r2,zero,ad88 <__b2d+0xf8>
    ad78:	90cffc34 	orhi	r3,r18,16368
    ad7c:	003fe406 	br	ad10 <__alt_mem_onchip_memory+0xf780ad10>
    ad80:	000d883a 	mov	r6,zero
    ad84:	003fdf06 	br	ad04 <__alt_mem_onchip_memory+0xf780ad04>
    ad88:	90a4983a 	sll	r18,r18,r2
    ad8c:	0005883a 	mov	r2,zero
    ad90:	003ff906 	br	ad78 <__alt_mem_onchip_memory+0xf780ad78>
    ad94:	1144983a 	sll	r2,r2,r5
    ad98:	003fdd06 	br	ad10 <__alt_mem_onchip_memory+0xf780ad10>

0000ad9c <__d2b>:
    ad9c:	defff804 	addi	sp,sp,-32
    ada0:	dc000215 	stw	r16,8(sp)
    ada4:	3021883a 	mov	r16,r6
    ada8:	dc400315 	stw	r17,12(sp)
    adac:	8022907a 	slli	r17,r16,1
    adb0:	dd000615 	stw	r20,24(sp)
    adb4:	2829883a 	mov	r20,r5
    adb8:	01400044 	movi	r5,1
    adbc:	dcc00515 	stw	r19,20(sp)
    adc0:	dc800415 	stw	r18,16(sp)
    adc4:	dfc00715 	stw	ra,28(sp)
    adc8:	3825883a 	mov	r18,r7
    adcc:	8822d57a 	srli	r17,r17,21
    add0:	000a1080 	call	a108 <_Balloc>
    add4:	1027883a 	mov	r19,r2
    add8:	00800434 	movhi	r2,16
    addc:	10bfffc4 	addi	r2,r2,-1
    ade0:	808c703a 	and	r6,r16,r2
    ade4:	88000126 	beq	r17,zero,adec <__d2b+0x50>
    ade8:	31800434 	orhi	r6,r6,16
    adec:	d9800015 	stw	r6,0(sp)
    adf0:	a0002426 	beq	r20,zero,ae84 <__d2b+0xe8>
    adf4:	d9000104 	addi	r4,sp,4
    adf8:	dd000115 	stw	r20,4(sp)
    adfc:	000a4640 	call	a464 <__lo0bits>
    ae00:	d8c00017 	ldw	r3,0(sp)
    ae04:	10002f1e 	bne	r2,zero,aec4 <__d2b+0x128>
    ae08:	d9000117 	ldw	r4,4(sp)
    ae0c:	99000515 	stw	r4,20(r19)
    ae10:	1821003a 	cmpeq	r16,r3,zero
    ae14:	01000084 	movi	r4,2
    ae18:	2421c83a 	sub	r16,r4,r16
    ae1c:	98c00615 	stw	r3,24(r19)
    ae20:	9c000415 	stw	r16,16(r19)
    ae24:	88001f1e 	bne	r17,zero,aea4 <__d2b+0x108>
    ae28:	10bef384 	addi	r2,r2,-1074
    ae2c:	90800015 	stw	r2,0(r18)
    ae30:	00900034 	movhi	r2,16384
    ae34:	10bfffc4 	addi	r2,r2,-1
    ae38:	8085883a 	add	r2,r16,r2
    ae3c:	1085883a 	add	r2,r2,r2
    ae40:	1085883a 	add	r2,r2,r2
    ae44:	9885883a 	add	r2,r19,r2
    ae48:	11000517 	ldw	r4,20(r2)
    ae4c:	8020917a 	slli	r16,r16,5
    ae50:	000a3fc0 	call	a3fc <__hi0bits>
    ae54:	d8c00817 	ldw	r3,32(sp)
    ae58:	8085c83a 	sub	r2,r16,r2
    ae5c:	18800015 	stw	r2,0(r3)
    ae60:	9805883a 	mov	r2,r19
    ae64:	dfc00717 	ldw	ra,28(sp)
    ae68:	dd000617 	ldw	r20,24(sp)
    ae6c:	dcc00517 	ldw	r19,20(sp)
    ae70:	dc800417 	ldw	r18,16(sp)
    ae74:	dc400317 	ldw	r17,12(sp)
    ae78:	dc000217 	ldw	r16,8(sp)
    ae7c:	dec00804 	addi	sp,sp,32
    ae80:	f800283a 	ret
    ae84:	d809883a 	mov	r4,sp
    ae88:	000a4640 	call	a464 <__lo0bits>
    ae8c:	d8c00017 	ldw	r3,0(sp)
    ae90:	04000044 	movi	r16,1
    ae94:	9c000415 	stw	r16,16(r19)
    ae98:	98c00515 	stw	r3,20(r19)
    ae9c:	10800804 	addi	r2,r2,32
    aea0:	883fe126 	beq	r17,zero,ae28 <__alt_mem_onchip_memory+0xf780ae28>
    aea4:	00c00d44 	movi	r3,53
    aea8:	8c7ef344 	addi	r17,r17,-1075
    aeac:	88a3883a 	add	r17,r17,r2
    aeb0:	1885c83a 	sub	r2,r3,r2
    aeb4:	d8c00817 	ldw	r3,32(sp)
    aeb8:	94400015 	stw	r17,0(r18)
    aebc:	18800015 	stw	r2,0(r3)
    aec0:	003fe706 	br	ae60 <__alt_mem_onchip_memory+0xf780ae60>
    aec4:	01000804 	movi	r4,32
    aec8:	2089c83a 	sub	r4,r4,r2
    aecc:	1908983a 	sll	r4,r3,r4
    aed0:	d9400117 	ldw	r5,4(sp)
    aed4:	1886d83a 	srl	r3,r3,r2
    aed8:	2148b03a 	or	r4,r4,r5
    aedc:	99000515 	stw	r4,20(r19)
    aee0:	d8c00015 	stw	r3,0(sp)
    aee4:	003fca06 	br	ae10 <__alt_mem_onchip_memory+0xf780ae10>

0000aee8 <__ratio>:
    aee8:	defff904 	addi	sp,sp,-28
    aeec:	dc400315 	stw	r17,12(sp)
    aef0:	2823883a 	mov	r17,r5
    aef4:	d9400104 	addi	r5,sp,4
    aef8:	dfc00615 	stw	ra,24(sp)
    aefc:	dcc00515 	stw	r19,20(sp)
    af00:	dc800415 	stw	r18,16(sp)
    af04:	2027883a 	mov	r19,r4
    af08:	dc000215 	stw	r16,8(sp)
    af0c:	000ac900 	call	ac90 <__b2d>
    af10:	d80b883a 	mov	r5,sp
    af14:	8809883a 	mov	r4,r17
    af18:	1025883a 	mov	r18,r2
    af1c:	1821883a 	mov	r16,r3
    af20:	000ac900 	call	ac90 <__b2d>
    af24:	8a000417 	ldw	r8,16(r17)
    af28:	99000417 	ldw	r4,16(r19)
    af2c:	d9400117 	ldw	r5,4(sp)
    af30:	2209c83a 	sub	r4,r4,r8
    af34:	2010917a 	slli	r8,r4,5
    af38:	d9000017 	ldw	r4,0(sp)
    af3c:	2909c83a 	sub	r4,r5,r4
    af40:	4109883a 	add	r4,r8,r4
    af44:	01000e0e 	bge	zero,r4,af80 <__ratio+0x98>
    af48:	2008953a 	slli	r4,r4,20
    af4c:	2421883a 	add	r16,r4,r16
    af50:	100d883a 	mov	r6,r2
    af54:	180f883a 	mov	r7,r3
    af58:	9009883a 	mov	r4,r18
    af5c:	800b883a 	mov	r5,r16
    af60:	00021f80 	call	21f8 <__divdf3>
    af64:	dfc00617 	ldw	ra,24(sp)
    af68:	dcc00517 	ldw	r19,20(sp)
    af6c:	dc800417 	ldw	r18,16(sp)
    af70:	dc400317 	ldw	r17,12(sp)
    af74:	dc000217 	ldw	r16,8(sp)
    af78:	dec00704 	addi	sp,sp,28
    af7c:	f800283a 	ret
    af80:	2008953a 	slli	r4,r4,20
    af84:	1907c83a 	sub	r3,r3,r4
    af88:	003ff106 	br	af50 <__alt_mem_onchip_memory+0xf780af50>

0000af8c <_mprec_log10>:
    af8c:	defffe04 	addi	sp,sp,-8
    af90:	dc000015 	stw	r16,0(sp)
    af94:	dfc00115 	stw	ra,4(sp)
    af98:	008005c4 	movi	r2,23
    af9c:	2021883a 	mov	r16,r4
    afa0:	11000d0e 	bge	r2,r4,afd8 <_mprec_log10+0x4c>
    afa4:	0005883a 	mov	r2,zero
    afa8:	00cffc34 	movhi	r3,16368
    afac:	843fffc4 	addi	r16,r16,-1
    afb0:	000d883a 	mov	r6,zero
    afb4:	01d00934 	movhi	r7,16420
    afb8:	1009883a 	mov	r4,r2
    afbc:	180b883a 	mov	r5,r3
    afc0:	0002bd40 	call	2bd4 <__muldf3>
    afc4:	803ff91e 	bne	r16,zero,afac <__alt_mem_onchip_memory+0xf780afac>
    afc8:	dfc00117 	ldw	ra,4(sp)
    afcc:	dc000017 	ldw	r16,0(sp)
    afd0:	dec00204 	addi	sp,sp,8
    afd4:	f800283a 	ret
    afd8:	202090fa 	slli	r16,r4,3
    afdc:	00800074 	movhi	r2,1
    afe0:	10864104 	addi	r2,r2,6404
    afe4:	1421883a 	add	r16,r2,r16
    afe8:	80800017 	ldw	r2,0(r16)
    afec:	80c00117 	ldw	r3,4(r16)
    aff0:	dfc00117 	ldw	ra,4(sp)
    aff4:	dc000017 	ldw	r16,0(sp)
    aff8:	dec00204 	addi	sp,sp,8
    affc:	f800283a 	ret

0000b000 <__copybits>:
    b000:	297fffc4 	addi	r5,r5,-1
    b004:	280fd17a 	srai	r7,r5,5
    b008:	30c00417 	ldw	r3,16(r6)
    b00c:	30800504 	addi	r2,r6,20
    b010:	39c00044 	addi	r7,r7,1
    b014:	18c7883a 	add	r3,r3,r3
    b018:	39cf883a 	add	r7,r7,r7
    b01c:	18c7883a 	add	r3,r3,r3
    b020:	39cf883a 	add	r7,r7,r7
    b024:	10c7883a 	add	r3,r2,r3
    b028:	21cf883a 	add	r7,r4,r7
    b02c:	10c00d2e 	bgeu	r2,r3,b064 <__copybits+0x64>
    b030:	200b883a 	mov	r5,r4
    b034:	12000017 	ldw	r8,0(r2)
    b038:	29400104 	addi	r5,r5,4
    b03c:	10800104 	addi	r2,r2,4
    b040:	2a3fff15 	stw	r8,-4(r5)
    b044:	10fffb36 	bltu	r2,r3,b034 <__alt_mem_onchip_memory+0xf780b034>
    b048:	1985c83a 	sub	r2,r3,r6
    b04c:	10bffac4 	addi	r2,r2,-21
    b050:	1004d0ba 	srli	r2,r2,2
    b054:	10800044 	addi	r2,r2,1
    b058:	1085883a 	add	r2,r2,r2
    b05c:	1085883a 	add	r2,r2,r2
    b060:	2089883a 	add	r4,r4,r2
    b064:	21c0032e 	bgeu	r4,r7,b074 <__copybits+0x74>
    b068:	20000015 	stw	zero,0(r4)
    b06c:	21000104 	addi	r4,r4,4
    b070:	21fffd36 	bltu	r4,r7,b068 <__alt_mem_onchip_memory+0xf780b068>
    b074:	f800283a 	ret

0000b078 <__any_on>:
    b078:	20c00417 	ldw	r3,16(r4)
    b07c:	2805d17a 	srai	r2,r5,5
    b080:	21000504 	addi	r4,r4,20
    b084:	18800d0e 	bge	r3,r2,b0bc <__any_on+0x44>
    b088:	18c7883a 	add	r3,r3,r3
    b08c:	18c7883a 	add	r3,r3,r3
    b090:	20c7883a 	add	r3,r4,r3
    b094:	20c0192e 	bgeu	r4,r3,b0fc <__any_on+0x84>
    b098:	18bfff17 	ldw	r2,-4(r3)
    b09c:	18ffff04 	addi	r3,r3,-4
    b0a0:	1000041e 	bne	r2,zero,b0b4 <__any_on+0x3c>
    b0a4:	20c0142e 	bgeu	r4,r3,b0f8 <__any_on+0x80>
    b0a8:	18ffff04 	addi	r3,r3,-4
    b0ac:	19400017 	ldw	r5,0(r3)
    b0b0:	283ffc26 	beq	r5,zero,b0a4 <__alt_mem_onchip_memory+0xf780b0a4>
    b0b4:	00800044 	movi	r2,1
    b0b8:	f800283a 	ret
    b0bc:	10c00a0e 	bge	r2,r3,b0e8 <__any_on+0x70>
    b0c0:	1085883a 	add	r2,r2,r2
    b0c4:	1085883a 	add	r2,r2,r2
    b0c8:	294007cc 	andi	r5,r5,31
    b0cc:	2087883a 	add	r3,r4,r2
    b0d0:	283ff026 	beq	r5,zero,b094 <__alt_mem_onchip_memory+0xf780b094>
    b0d4:	19800017 	ldw	r6,0(r3)
    b0d8:	3144d83a 	srl	r2,r6,r5
    b0dc:	114a983a 	sll	r5,r2,r5
    b0e0:	317ff41e 	bne	r6,r5,b0b4 <__alt_mem_onchip_memory+0xf780b0b4>
    b0e4:	003feb06 	br	b094 <__alt_mem_onchip_memory+0xf780b094>
    b0e8:	1085883a 	add	r2,r2,r2
    b0ec:	1085883a 	add	r2,r2,r2
    b0f0:	2087883a 	add	r3,r4,r2
    b0f4:	003fe706 	br	b094 <__alt_mem_onchip_memory+0xf780b094>
    b0f8:	f800283a 	ret
    b0fc:	0005883a 	mov	r2,zero
    b100:	f800283a 	ret

0000b104 <_putc_r>:
    b104:	defffc04 	addi	sp,sp,-16
    b108:	dc000215 	stw	r16,8(sp)
    b10c:	dfc00315 	stw	ra,12(sp)
    b110:	2021883a 	mov	r16,r4
    b114:	20000226 	beq	r4,zero,b120 <_putc_r+0x1c>
    b118:	20800e17 	ldw	r2,56(r4)
    b11c:	10001b26 	beq	r2,zero,b18c <_putc_r+0x88>
    b120:	30800217 	ldw	r2,8(r6)
    b124:	10bfffc4 	addi	r2,r2,-1
    b128:	30800215 	stw	r2,8(r6)
    b12c:	10000a16 	blt	r2,zero,b158 <_putc_r+0x54>
    b130:	30800017 	ldw	r2,0(r6)
    b134:	11400005 	stb	r5,0(r2)
    b138:	30800017 	ldw	r2,0(r6)
    b13c:	10c00044 	addi	r3,r2,1
    b140:	30c00015 	stw	r3,0(r6)
    b144:	10800003 	ldbu	r2,0(r2)
    b148:	dfc00317 	ldw	ra,12(sp)
    b14c:	dc000217 	ldw	r16,8(sp)
    b150:	dec00404 	addi	sp,sp,16
    b154:	f800283a 	ret
    b158:	30c00617 	ldw	r3,24(r6)
    b15c:	10c00616 	blt	r2,r3,b178 <_putc_r+0x74>
    b160:	30800017 	ldw	r2,0(r6)
    b164:	00c00284 	movi	r3,10
    b168:	11400005 	stb	r5,0(r2)
    b16c:	30800017 	ldw	r2,0(r6)
    b170:	11400003 	ldbu	r5,0(r2)
    b174:	28fff11e 	bne	r5,r3,b13c <__alt_mem_onchip_memory+0xf780b13c>
    b178:	8009883a 	mov	r4,r16
    b17c:	dfc00317 	ldw	ra,12(sp)
    b180:	dc000217 	ldw	r16,8(sp)
    b184:	dec00404 	addi	sp,sp,16
    b188:	000d0841 	jmpi	d084 <__swbuf_r>
    b18c:	d9400015 	stw	r5,0(sp)
    b190:	d9800115 	stw	r6,4(sp)
    b194:	00086900 	call	8690 <__sinit>
    b198:	d9800117 	ldw	r6,4(sp)
    b19c:	d9400017 	ldw	r5,0(sp)
    b1a0:	003fdf06 	br	b120 <__alt_mem_onchip_memory+0xf780b120>

0000b1a4 <putc>:
    b1a4:	00800074 	movhi	r2,1
    b1a8:	defffc04 	addi	sp,sp,-16
    b1ac:	108d7704 	addi	r2,r2,13788
    b1b0:	dc000115 	stw	r16,4(sp)
    b1b4:	14000017 	ldw	r16,0(r2)
    b1b8:	dc400215 	stw	r17,8(sp)
    b1bc:	dfc00315 	stw	ra,12(sp)
    b1c0:	2023883a 	mov	r17,r4
    b1c4:	80000226 	beq	r16,zero,b1d0 <putc+0x2c>
    b1c8:	80800e17 	ldw	r2,56(r16)
    b1cc:	10001a26 	beq	r2,zero,b238 <putc+0x94>
    b1d0:	28800217 	ldw	r2,8(r5)
    b1d4:	10bfffc4 	addi	r2,r2,-1
    b1d8:	28800215 	stw	r2,8(r5)
    b1dc:	10000b16 	blt	r2,zero,b20c <putc+0x68>
    b1e0:	28800017 	ldw	r2,0(r5)
    b1e4:	14400005 	stb	r17,0(r2)
    b1e8:	28800017 	ldw	r2,0(r5)
    b1ec:	10c00044 	addi	r3,r2,1
    b1f0:	28c00015 	stw	r3,0(r5)
    b1f4:	10800003 	ldbu	r2,0(r2)
    b1f8:	dfc00317 	ldw	ra,12(sp)
    b1fc:	dc400217 	ldw	r17,8(sp)
    b200:	dc000117 	ldw	r16,4(sp)
    b204:	dec00404 	addi	sp,sp,16
    b208:	f800283a 	ret
    b20c:	28c00617 	ldw	r3,24(r5)
    b210:	10c00e16 	blt	r2,r3,b24c <putc+0xa8>
    b214:	28800017 	ldw	r2,0(r5)
    b218:	01000284 	movi	r4,10
    b21c:	14400005 	stb	r17,0(r2)
    b220:	28800017 	ldw	r2,0(r5)
    b224:	10c00003 	ldbu	r3,0(r2)
    b228:	193ff01e 	bne	r3,r4,b1ec <__alt_mem_onchip_memory+0xf780b1ec>
    b22c:	280d883a 	mov	r6,r5
    b230:	180b883a 	mov	r5,r3
    b234:	00000706 	br	b254 <putc+0xb0>
    b238:	8009883a 	mov	r4,r16
    b23c:	d9400015 	stw	r5,0(sp)
    b240:	00086900 	call	8690 <__sinit>
    b244:	d9400017 	ldw	r5,0(sp)
    b248:	003fe106 	br	b1d0 <__alt_mem_onchip_memory+0xf780b1d0>
    b24c:	280d883a 	mov	r6,r5
    b250:	880b883a 	mov	r5,r17
    b254:	8009883a 	mov	r4,r16
    b258:	dfc00317 	ldw	ra,12(sp)
    b25c:	dc400217 	ldw	r17,8(sp)
    b260:	dc000117 	ldw	r16,4(sp)
    b264:	dec00404 	addi	sp,sp,16
    b268:	000d0841 	jmpi	d084 <__swbuf_r>

0000b26c <_realloc_r>:
    b26c:	defff604 	addi	sp,sp,-40
    b270:	dc800215 	stw	r18,8(sp)
    b274:	dfc00915 	stw	ra,36(sp)
    b278:	df000815 	stw	fp,32(sp)
    b27c:	ddc00715 	stw	r23,28(sp)
    b280:	dd800615 	stw	r22,24(sp)
    b284:	dd400515 	stw	r21,20(sp)
    b288:	dd000415 	stw	r20,16(sp)
    b28c:	dcc00315 	stw	r19,12(sp)
    b290:	dc400115 	stw	r17,4(sp)
    b294:	dc000015 	stw	r16,0(sp)
    b298:	3025883a 	mov	r18,r6
    b29c:	2800b726 	beq	r5,zero,b57c <_realloc_r+0x310>
    b2a0:	282b883a 	mov	r21,r5
    b2a4:	2029883a 	mov	r20,r4
    b2a8:	000efa00 	call	efa0 <__malloc_lock>
    b2ac:	a8bfff17 	ldw	r2,-4(r21)
    b2b0:	043fff04 	movi	r16,-4
    b2b4:	90c002c4 	addi	r3,r18,11
    b2b8:	01000584 	movi	r4,22
    b2bc:	acfffe04 	addi	r19,r21,-8
    b2c0:	1420703a 	and	r16,r2,r16
    b2c4:	20c0332e 	bgeu	r4,r3,b394 <_realloc_r+0x128>
    b2c8:	047ffe04 	movi	r17,-8
    b2cc:	1c62703a 	and	r17,r3,r17
    b2d0:	8807883a 	mov	r3,r17
    b2d4:	88005816 	blt	r17,zero,b438 <_realloc_r+0x1cc>
    b2d8:	8c805736 	bltu	r17,r18,b438 <_realloc_r+0x1cc>
    b2dc:	80c0300e 	bge	r16,r3,b3a0 <_realloc_r+0x134>
    b2e0:	07000074 	movhi	fp,1
    b2e4:	e707ed04 	addi	fp,fp,8116
    b2e8:	e1c00217 	ldw	r7,8(fp)
    b2ec:	9c09883a 	add	r4,r19,r16
    b2f0:	22000117 	ldw	r8,4(r4)
    b2f4:	21c06326 	beq	r4,r7,b484 <_realloc_r+0x218>
    b2f8:	017fff84 	movi	r5,-2
    b2fc:	414a703a 	and	r5,r8,r5
    b300:	214b883a 	add	r5,r4,r5
    b304:	29800117 	ldw	r6,4(r5)
    b308:	3180004c 	andi	r6,r6,1
    b30c:	30003f26 	beq	r6,zero,b40c <_realloc_r+0x1a0>
    b310:	1080004c 	andi	r2,r2,1
    b314:	10008326 	beq	r2,zero,b524 <_realloc_r+0x2b8>
    b318:	900b883a 	mov	r5,r18
    b31c:	a009883a 	mov	r4,r20
    b320:	000944c0 	call	944c <_malloc_r>
    b324:	1025883a 	mov	r18,r2
    b328:	10011e26 	beq	r2,zero,b7a4 <_realloc_r+0x538>
    b32c:	a93fff17 	ldw	r4,-4(r21)
    b330:	10fffe04 	addi	r3,r2,-8
    b334:	00bfff84 	movi	r2,-2
    b338:	2084703a 	and	r2,r4,r2
    b33c:	9885883a 	add	r2,r19,r2
    b340:	1880ee26 	beq	r3,r2,b6fc <_realloc_r+0x490>
    b344:	81bfff04 	addi	r6,r16,-4
    b348:	00800904 	movi	r2,36
    b34c:	1180b836 	bltu	r2,r6,b630 <_realloc_r+0x3c4>
    b350:	00c004c4 	movi	r3,19
    b354:	19809636 	bltu	r3,r6,b5b0 <_realloc_r+0x344>
    b358:	9005883a 	mov	r2,r18
    b35c:	a807883a 	mov	r3,r21
    b360:	19000017 	ldw	r4,0(r3)
    b364:	11000015 	stw	r4,0(r2)
    b368:	19000117 	ldw	r4,4(r3)
    b36c:	11000115 	stw	r4,4(r2)
    b370:	18c00217 	ldw	r3,8(r3)
    b374:	10c00215 	stw	r3,8(r2)
    b378:	a80b883a 	mov	r5,r21
    b37c:	a009883a 	mov	r4,r20
    b380:	00088040 	call	8804 <_free_r>
    b384:	a009883a 	mov	r4,r20
    b388:	000efc40 	call	efc4 <__malloc_unlock>
    b38c:	9005883a 	mov	r2,r18
    b390:	00001206 	br	b3dc <_realloc_r+0x170>
    b394:	00c00404 	movi	r3,16
    b398:	1823883a 	mov	r17,r3
    b39c:	003fce06 	br	b2d8 <__alt_mem_onchip_memory+0xf780b2d8>
    b3a0:	a825883a 	mov	r18,r21
    b3a4:	8445c83a 	sub	r2,r16,r17
    b3a8:	00c003c4 	movi	r3,15
    b3ac:	18802636 	bltu	r3,r2,b448 <_realloc_r+0x1dc>
    b3b0:	99800117 	ldw	r6,4(r19)
    b3b4:	9c07883a 	add	r3,r19,r16
    b3b8:	3180004c 	andi	r6,r6,1
    b3bc:	3420b03a 	or	r16,r6,r16
    b3c0:	9c000115 	stw	r16,4(r19)
    b3c4:	18800117 	ldw	r2,4(r3)
    b3c8:	10800054 	ori	r2,r2,1
    b3cc:	18800115 	stw	r2,4(r3)
    b3d0:	a009883a 	mov	r4,r20
    b3d4:	000efc40 	call	efc4 <__malloc_unlock>
    b3d8:	9005883a 	mov	r2,r18
    b3dc:	dfc00917 	ldw	ra,36(sp)
    b3e0:	df000817 	ldw	fp,32(sp)
    b3e4:	ddc00717 	ldw	r23,28(sp)
    b3e8:	dd800617 	ldw	r22,24(sp)
    b3ec:	dd400517 	ldw	r21,20(sp)
    b3f0:	dd000417 	ldw	r20,16(sp)
    b3f4:	dcc00317 	ldw	r19,12(sp)
    b3f8:	dc800217 	ldw	r18,8(sp)
    b3fc:	dc400117 	ldw	r17,4(sp)
    b400:	dc000017 	ldw	r16,0(sp)
    b404:	dec00a04 	addi	sp,sp,40
    b408:	f800283a 	ret
    b40c:	017fff04 	movi	r5,-4
    b410:	414a703a 	and	r5,r8,r5
    b414:	814d883a 	add	r6,r16,r5
    b418:	30c01f16 	blt	r6,r3,b498 <_realloc_r+0x22c>
    b41c:	20800317 	ldw	r2,12(r4)
    b420:	20c00217 	ldw	r3,8(r4)
    b424:	a825883a 	mov	r18,r21
    b428:	3021883a 	mov	r16,r6
    b42c:	18800315 	stw	r2,12(r3)
    b430:	10c00215 	stw	r3,8(r2)
    b434:	003fdb06 	br	b3a4 <__alt_mem_onchip_memory+0xf780b3a4>
    b438:	00800304 	movi	r2,12
    b43c:	a0800015 	stw	r2,0(r20)
    b440:	0005883a 	mov	r2,zero
    b444:	003fe506 	br	b3dc <__alt_mem_onchip_memory+0xf780b3dc>
    b448:	98c00117 	ldw	r3,4(r19)
    b44c:	9c4b883a 	add	r5,r19,r17
    b450:	11000054 	ori	r4,r2,1
    b454:	18c0004c 	andi	r3,r3,1
    b458:	1c62b03a 	or	r17,r3,r17
    b45c:	9c400115 	stw	r17,4(r19)
    b460:	29000115 	stw	r4,4(r5)
    b464:	2885883a 	add	r2,r5,r2
    b468:	10c00117 	ldw	r3,4(r2)
    b46c:	29400204 	addi	r5,r5,8
    b470:	a009883a 	mov	r4,r20
    b474:	18c00054 	ori	r3,r3,1
    b478:	10c00115 	stw	r3,4(r2)
    b47c:	00088040 	call	8804 <_free_r>
    b480:	003fd306 	br	b3d0 <__alt_mem_onchip_memory+0xf780b3d0>
    b484:	017fff04 	movi	r5,-4
    b488:	414a703a 	and	r5,r8,r5
    b48c:	89800404 	addi	r6,r17,16
    b490:	8151883a 	add	r8,r16,r5
    b494:	4180590e 	bge	r8,r6,b5fc <_realloc_r+0x390>
    b498:	1080004c 	andi	r2,r2,1
    b49c:	103f9e1e 	bne	r2,zero,b318 <__alt_mem_onchip_memory+0xf780b318>
    b4a0:	adbffe17 	ldw	r22,-8(r21)
    b4a4:	00bfff04 	movi	r2,-4
    b4a8:	9dadc83a 	sub	r22,r19,r22
    b4ac:	b1800117 	ldw	r6,4(r22)
    b4b0:	3084703a 	and	r2,r6,r2
    b4b4:	20002026 	beq	r4,zero,b538 <_realloc_r+0x2cc>
    b4b8:	80af883a 	add	r23,r16,r2
    b4bc:	b96f883a 	add	r23,r23,r5
    b4c0:	21c05f26 	beq	r4,r7,b640 <_realloc_r+0x3d4>
    b4c4:	b8c01c16 	blt	r23,r3,b538 <_realloc_r+0x2cc>
    b4c8:	20800317 	ldw	r2,12(r4)
    b4cc:	20c00217 	ldw	r3,8(r4)
    b4d0:	81bfff04 	addi	r6,r16,-4
    b4d4:	01000904 	movi	r4,36
    b4d8:	18800315 	stw	r2,12(r3)
    b4dc:	10c00215 	stw	r3,8(r2)
    b4e0:	b0c00217 	ldw	r3,8(r22)
    b4e4:	b0800317 	ldw	r2,12(r22)
    b4e8:	b4800204 	addi	r18,r22,8
    b4ec:	18800315 	stw	r2,12(r3)
    b4f0:	10c00215 	stw	r3,8(r2)
    b4f4:	21801b36 	bltu	r4,r6,b564 <_realloc_r+0x2f8>
    b4f8:	008004c4 	movi	r2,19
    b4fc:	1180352e 	bgeu	r2,r6,b5d4 <_realloc_r+0x368>
    b500:	a8800017 	ldw	r2,0(r21)
    b504:	b0800215 	stw	r2,8(r22)
    b508:	a8800117 	ldw	r2,4(r21)
    b50c:	b0800315 	stw	r2,12(r22)
    b510:	008006c4 	movi	r2,27
    b514:	11807f36 	bltu	r2,r6,b714 <_realloc_r+0x4a8>
    b518:	b0800404 	addi	r2,r22,16
    b51c:	ad400204 	addi	r21,r21,8
    b520:	00002d06 	br	b5d8 <_realloc_r+0x36c>
    b524:	adbffe17 	ldw	r22,-8(r21)
    b528:	00bfff04 	movi	r2,-4
    b52c:	9dadc83a 	sub	r22,r19,r22
    b530:	b1000117 	ldw	r4,4(r22)
    b534:	2084703a 	and	r2,r4,r2
    b538:	b03f7726 	beq	r22,zero,b318 <__alt_mem_onchip_memory+0xf780b318>
    b53c:	80af883a 	add	r23,r16,r2
    b540:	b8ff7516 	blt	r23,r3,b318 <__alt_mem_onchip_memory+0xf780b318>
    b544:	b0800317 	ldw	r2,12(r22)
    b548:	b0c00217 	ldw	r3,8(r22)
    b54c:	81bfff04 	addi	r6,r16,-4
    b550:	01000904 	movi	r4,36
    b554:	18800315 	stw	r2,12(r3)
    b558:	10c00215 	stw	r3,8(r2)
    b55c:	b4800204 	addi	r18,r22,8
    b560:	21bfe52e 	bgeu	r4,r6,b4f8 <__alt_mem_onchip_memory+0xf780b4f8>
    b564:	a80b883a 	mov	r5,r21
    b568:	9009883a 	mov	r4,r18
    b56c:	0009e840 	call	9e84 <memmove>
    b570:	b821883a 	mov	r16,r23
    b574:	b027883a 	mov	r19,r22
    b578:	003f8a06 	br	b3a4 <__alt_mem_onchip_memory+0xf780b3a4>
    b57c:	300b883a 	mov	r5,r6
    b580:	dfc00917 	ldw	ra,36(sp)
    b584:	df000817 	ldw	fp,32(sp)
    b588:	ddc00717 	ldw	r23,28(sp)
    b58c:	dd800617 	ldw	r22,24(sp)
    b590:	dd400517 	ldw	r21,20(sp)
    b594:	dd000417 	ldw	r20,16(sp)
    b598:	dcc00317 	ldw	r19,12(sp)
    b59c:	dc800217 	ldw	r18,8(sp)
    b5a0:	dc400117 	ldw	r17,4(sp)
    b5a4:	dc000017 	ldw	r16,0(sp)
    b5a8:	dec00a04 	addi	sp,sp,40
    b5ac:	000944c1 	jmpi	944c <_malloc_r>
    b5b0:	a8c00017 	ldw	r3,0(r21)
    b5b4:	90c00015 	stw	r3,0(r18)
    b5b8:	a8c00117 	ldw	r3,4(r21)
    b5bc:	90c00115 	stw	r3,4(r18)
    b5c0:	00c006c4 	movi	r3,27
    b5c4:	19804536 	bltu	r3,r6,b6dc <_realloc_r+0x470>
    b5c8:	90800204 	addi	r2,r18,8
    b5cc:	a8c00204 	addi	r3,r21,8
    b5d0:	003f6306 	br	b360 <__alt_mem_onchip_memory+0xf780b360>
    b5d4:	9005883a 	mov	r2,r18
    b5d8:	a8c00017 	ldw	r3,0(r21)
    b5dc:	b821883a 	mov	r16,r23
    b5e0:	b027883a 	mov	r19,r22
    b5e4:	10c00015 	stw	r3,0(r2)
    b5e8:	a8c00117 	ldw	r3,4(r21)
    b5ec:	10c00115 	stw	r3,4(r2)
    b5f0:	a8c00217 	ldw	r3,8(r21)
    b5f4:	10c00215 	stw	r3,8(r2)
    b5f8:	003f6a06 	br	b3a4 <__alt_mem_onchip_memory+0xf780b3a4>
    b5fc:	9c67883a 	add	r19,r19,r17
    b600:	4445c83a 	sub	r2,r8,r17
    b604:	e4c00215 	stw	r19,8(fp)
    b608:	10800054 	ori	r2,r2,1
    b60c:	98800115 	stw	r2,4(r19)
    b610:	a8bfff17 	ldw	r2,-4(r21)
    b614:	a009883a 	mov	r4,r20
    b618:	1080004c 	andi	r2,r2,1
    b61c:	1462b03a 	or	r17,r2,r17
    b620:	ac7fff15 	stw	r17,-4(r21)
    b624:	000efc40 	call	efc4 <__malloc_unlock>
    b628:	a805883a 	mov	r2,r21
    b62c:	003f6b06 	br	b3dc <__alt_mem_onchip_memory+0xf780b3dc>
    b630:	a80b883a 	mov	r5,r21
    b634:	9009883a 	mov	r4,r18
    b638:	0009e840 	call	9e84 <memmove>
    b63c:	003f4e06 	br	b378 <__alt_mem_onchip_memory+0xf780b378>
    b640:	89000404 	addi	r4,r17,16
    b644:	b93fbc16 	blt	r23,r4,b538 <__alt_mem_onchip_memory+0xf780b538>
    b648:	b0800317 	ldw	r2,12(r22)
    b64c:	b0c00217 	ldw	r3,8(r22)
    b650:	81bfff04 	addi	r6,r16,-4
    b654:	01000904 	movi	r4,36
    b658:	18800315 	stw	r2,12(r3)
    b65c:	10c00215 	stw	r3,8(r2)
    b660:	b4800204 	addi	r18,r22,8
    b664:	21804336 	bltu	r4,r6,b774 <_realloc_r+0x508>
    b668:	008004c4 	movi	r2,19
    b66c:	11803f2e 	bgeu	r2,r6,b76c <_realloc_r+0x500>
    b670:	a8800017 	ldw	r2,0(r21)
    b674:	b0800215 	stw	r2,8(r22)
    b678:	a8800117 	ldw	r2,4(r21)
    b67c:	b0800315 	stw	r2,12(r22)
    b680:	008006c4 	movi	r2,27
    b684:	11803f36 	bltu	r2,r6,b784 <_realloc_r+0x518>
    b688:	b0800404 	addi	r2,r22,16
    b68c:	ad400204 	addi	r21,r21,8
    b690:	a8c00017 	ldw	r3,0(r21)
    b694:	10c00015 	stw	r3,0(r2)
    b698:	a8c00117 	ldw	r3,4(r21)
    b69c:	10c00115 	stw	r3,4(r2)
    b6a0:	a8c00217 	ldw	r3,8(r21)
    b6a4:	10c00215 	stw	r3,8(r2)
    b6a8:	b447883a 	add	r3,r22,r17
    b6ac:	bc45c83a 	sub	r2,r23,r17
    b6b0:	e0c00215 	stw	r3,8(fp)
    b6b4:	10800054 	ori	r2,r2,1
    b6b8:	18800115 	stw	r2,4(r3)
    b6bc:	b0800117 	ldw	r2,4(r22)
    b6c0:	a009883a 	mov	r4,r20
    b6c4:	1080004c 	andi	r2,r2,1
    b6c8:	1462b03a 	or	r17,r2,r17
    b6cc:	b4400115 	stw	r17,4(r22)
    b6d0:	000efc40 	call	efc4 <__malloc_unlock>
    b6d4:	9005883a 	mov	r2,r18
    b6d8:	003f4006 	br	b3dc <__alt_mem_onchip_memory+0xf780b3dc>
    b6dc:	a8c00217 	ldw	r3,8(r21)
    b6e0:	90c00215 	stw	r3,8(r18)
    b6e4:	a8c00317 	ldw	r3,12(r21)
    b6e8:	90c00315 	stw	r3,12(r18)
    b6ec:	30801126 	beq	r6,r2,b734 <_realloc_r+0x4c8>
    b6f0:	90800404 	addi	r2,r18,16
    b6f4:	a8c00404 	addi	r3,r21,16
    b6f8:	003f1906 	br	b360 <__alt_mem_onchip_memory+0xf780b360>
    b6fc:	90ffff17 	ldw	r3,-4(r18)
    b700:	00bfff04 	movi	r2,-4
    b704:	a825883a 	mov	r18,r21
    b708:	1884703a 	and	r2,r3,r2
    b70c:	80a1883a 	add	r16,r16,r2
    b710:	003f2406 	br	b3a4 <__alt_mem_onchip_memory+0xf780b3a4>
    b714:	a8800217 	ldw	r2,8(r21)
    b718:	b0800415 	stw	r2,16(r22)
    b71c:	a8800317 	ldw	r2,12(r21)
    b720:	b0800515 	stw	r2,20(r22)
    b724:	31000a26 	beq	r6,r4,b750 <_realloc_r+0x4e4>
    b728:	b0800604 	addi	r2,r22,24
    b72c:	ad400404 	addi	r21,r21,16
    b730:	003fa906 	br	b5d8 <__alt_mem_onchip_memory+0xf780b5d8>
    b734:	a9000417 	ldw	r4,16(r21)
    b738:	90800604 	addi	r2,r18,24
    b73c:	a8c00604 	addi	r3,r21,24
    b740:	91000415 	stw	r4,16(r18)
    b744:	a9000517 	ldw	r4,20(r21)
    b748:	91000515 	stw	r4,20(r18)
    b74c:	003f0406 	br	b360 <__alt_mem_onchip_memory+0xf780b360>
    b750:	a8c00417 	ldw	r3,16(r21)
    b754:	ad400604 	addi	r21,r21,24
    b758:	b0800804 	addi	r2,r22,32
    b75c:	b0c00615 	stw	r3,24(r22)
    b760:	a8ffff17 	ldw	r3,-4(r21)
    b764:	b0c00715 	stw	r3,28(r22)
    b768:	003f9b06 	br	b5d8 <__alt_mem_onchip_memory+0xf780b5d8>
    b76c:	9005883a 	mov	r2,r18
    b770:	003fc706 	br	b690 <__alt_mem_onchip_memory+0xf780b690>
    b774:	a80b883a 	mov	r5,r21
    b778:	9009883a 	mov	r4,r18
    b77c:	0009e840 	call	9e84 <memmove>
    b780:	003fc906 	br	b6a8 <__alt_mem_onchip_memory+0xf780b6a8>
    b784:	a8800217 	ldw	r2,8(r21)
    b788:	b0800415 	stw	r2,16(r22)
    b78c:	a8800317 	ldw	r2,12(r21)
    b790:	b0800515 	stw	r2,20(r22)
    b794:	31000726 	beq	r6,r4,b7b4 <_realloc_r+0x548>
    b798:	b0800604 	addi	r2,r22,24
    b79c:	ad400404 	addi	r21,r21,16
    b7a0:	003fbb06 	br	b690 <__alt_mem_onchip_memory+0xf780b690>
    b7a4:	a009883a 	mov	r4,r20
    b7a8:	000efc40 	call	efc4 <__malloc_unlock>
    b7ac:	0005883a 	mov	r2,zero
    b7b0:	003f0a06 	br	b3dc <__alt_mem_onchip_memory+0xf780b3dc>
    b7b4:	a8c00417 	ldw	r3,16(r21)
    b7b8:	ad400604 	addi	r21,r21,24
    b7bc:	b0800804 	addi	r2,r22,32
    b7c0:	b0c00615 	stw	r3,24(r22)
    b7c4:	a8ffff17 	ldw	r3,-4(r21)
    b7c8:	b0c00715 	stw	r3,28(r22)
    b7cc:	003fb006 	br	b690 <__alt_mem_onchip_memory+0xf780b690>

0000b7d0 <_sbrk_r>:
    b7d0:	defffd04 	addi	sp,sp,-12
    b7d4:	dc000015 	stw	r16,0(sp)
    b7d8:	04000074 	movhi	r16,1
    b7dc:	dc400115 	stw	r17,4(sp)
    b7e0:	84144d04 	addi	r16,r16,20788
    b7e4:	2023883a 	mov	r17,r4
    b7e8:	2809883a 	mov	r4,r5
    b7ec:	dfc00215 	stw	ra,8(sp)
    b7f0:	80000015 	stw	zero,0(r16)
    b7f4:	000f1840 	call	f184 <sbrk>
    b7f8:	00ffffc4 	movi	r3,-1
    b7fc:	10c00526 	beq	r2,r3,b814 <_sbrk_r+0x44>
    b800:	dfc00217 	ldw	ra,8(sp)
    b804:	dc400117 	ldw	r17,4(sp)
    b808:	dc000017 	ldw	r16,0(sp)
    b80c:	dec00304 	addi	sp,sp,12
    b810:	f800283a 	ret
    b814:	80c00017 	ldw	r3,0(r16)
    b818:	183ff926 	beq	r3,zero,b800 <__alt_mem_onchip_memory+0xf780b800>
    b81c:	88c00015 	stw	r3,0(r17)
    b820:	003ff706 	br	b800 <__alt_mem_onchip_memory+0xf780b800>

0000b824 <__sread>:
    b824:	defffe04 	addi	sp,sp,-8
    b828:	dc000015 	stw	r16,0(sp)
    b82c:	2821883a 	mov	r16,r5
    b830:	2940038f 	ldh	r5,14(r5)
    b834:	dfc00115 	stw	ra,4(sp)
    b838:	000d7700 	call	d770 <_read_r>
    b83c:	10000716 	blt	r2,zero,b85c <__sread+0x38>
    b840:	80c01417 	ldw	r3,80(r16)
    b844:	1887883a 	add	r3,r3,r2
    b848:	80c01415 	stw	r3,80(r16)
    b84c:	dfc00117 	ldw	ra,4(sp)
    b850:	dc000017 	ldw	r16,0(sp)
    b854:	dec00204 	addi	sp,sp,8
    b858:	f800283a 	ret
    b85c:	80c0030b 	ldhu	r3,12(r16)
    b860:	18fbffcc 	andi	r3,r3,61439
    b864:	80c0030d 	sth	r3,12(r16)
    b868:	dfc00117 	ldw	ra,4(sp)
    b86c:	dc000017 	ldw	r16,0(sp)
    b870:	dec00204 	addi	sp,sp,8
    b874:	f800283a 	ret

0000b878 <__seofread>:
    b878:	0005883a 	mov	r2,zero
    b87c:	f800283a 	ret

0000b880 <__swrite>:
    b880:	2880030b 	ldhu	r2,12(r5)
    b884:	defffb04 	addi	sp,sp,-20
    b888:	dcc00315 	stw	r19,12(sp)
    b88c:	dc800215 	stw	r18,8(sp)
    b890:	dc400115 	stw	r17,4(sp)
    b894:	dc000015 	stw	r16,0(sp)
    b898:	dfc00415 	stw	ra,16(sp)
    b89c:	10c0400c 	andi	r3,r2,256
    b8a0:	2821883a 	mov	r16,r5
    b8a4:	2023883a 	mov	r17,r4
    b8a8:	3025883a 	mov	r18,r6
    b8ac:	3827883a 	mov	r19,r7
    b8b0:	18000526 	beq	r3,zero,b8c8 <__swrite+0x48>
    b8b4:	2940038f 	ldh	r5,14(r5)
    b8b8:	01c00084 	movi	r7,2
    b8bc:	000d883a 	mov	r6,zero
    b8c0:	000d7100 	call	d710 <_lseek_r>
    b8c4:	8080030b 	ldhu	r2,12(r16)
    b8c8:	8140038f 	ldh	r5,14(r16)
    b8cc:	10bbffcc 	andi	r2,r2,61439
    b8d0:	980f883a 	mov	r7,r19
    b8d4:	900d883a 	mov	r6,r18
    b8d8:	8809883a 	mov	r4,r17
    b8dc:	8080030d 	sth	r2,12(r16)
    b8e0:	dfc00417 	ldw	ra,16(sp)
    b8e4:	dcc00317 	ldw	r19,12(sp)
    b8e8:	dc800217 	ldw	r18,8(sp)
    b8ec:	dc400117 	ldw	r17,4(sp)
    b8f0:	dc000017 	ldw	r16,0(sp)
    b8f4:	dec00504 	addi	sp,sp,20
    b8f8:	000d1dc1 	jmpi	d1dc <_write_r>

0000b8fc <__sseek>:
    b8fc:	defffe04 	addi	sp,sp,-8
    b900:	dc000015 	stw	r16,0(sp)
    b904:	2821883a 	mov	r16,r5
    b908:	2940038f 	ldh	r5,14(r5)
    b90c:	dfc00115 	stw	ra,4(sp)
    b910:	000d7100 	call	d710 <_lseek_r>
    b914:	00ffffc4 	movi	r3,-1
    b918:	10c00826 	beq	r2,r3,b93c <__sseek+0x40>
    b91c:	80c0030b 	ldhu	r3,12(r16)
    b920:	80801415 	stw	r2,80(r16)
    b924:	18c40014 	ori	r3,r3,4096
    b928:	80c0030d 	sth	r3,12(r16)
    b92c:	dfc00117 	ldw	ra,4(sp)
    b930:	dc000017 	ldw	r16,0(sp)
    b934:	dec00204 	addi	sp,sp,8
    b938:	f800283a 	ret
    b93c:	80c0030b 	ldhu	r3,12(r16)
    b940:	18fbffcc 	andi	r3,r3,61439
    b944:	80c0030d 	sth	r3,12(r16)
    b948:	dfc00117 	ldw	ra,4(sp)
    b94c:	dc000017 	ldw	r16,0(sp)
    b950:	dec00204 	addi	sp,sp,8
    b954:	f800283a 	ret

0000b958 <__sclose>:
    b958:	2940038f 	ldh	r5,14(r5)
    b95c:	000d23c1 	jmpi	d23c <_close_r>

0000b960 <strcmp>:
    b960:	2144b03a 	or	r2,r4,r5
    b964:	108000cc 	andi	r2,r2,3
    b968:	1000171e 	bne	r2,zero,b9c8 <strcmp+0x68>
    b96c:	20800017 	ldw	r2,0(r4)
    b970:	28c00017 	ldw	r3,0(r5)
    b974:	10c0141e 	bne	r2,r3,b9c8 <strcmp+0x68>
    b978:	027fbff4 	movhi	r9,65279
    b97c:	4a7fbfc4 	addi	r9,r9,-257
    b980:	0086303a 	nor	r3,zero,r2
    b984:	02202074 	movhi	r8,32897
    b988:	1245883a 	add	r2,r2,r9
    b98c:	42202004 	addi	r8,r8,-32640
    b990:	10c4703a 	and	r2,r2,r3
    b994:	1204703a 	and	r2,r2,r8
    b998:	10000226 	beq	r2,zero,b9a4 <strcmp+0x44>
    b99c:	00002306 	br	ba2c <strcmp+0xcc>
    b9a0:	1000221e 	bne	r2,zero,ba2c <strcmp+0xcc>
    b9a4:	21000104 	addi	r4,r4,4
    b9a8:	20c00017 	ldw	r3,0(r4)
    b9ac:	29400104 	addi	r5,r5,4
    b9b0:	29800017 	ldw	r6,0(r5)
    b9b4:	1a4f883a 	add	r7,r3,r9
    b9b8:	00c4303a 	nor	r2,zero,r3
    b9bc:	3884703a 	and	r2,r7,r2
    b9c0:	1204703a 	and	r2,r2,r8
    b9c4:	19bff626 	beq	r3,r6,b9a0 <__alt_mem_onchip_memory+0xf780b9a0>
    b9c8:	20800003 	ldbu	r2,0(r4)
    b9cc:	10c03fcc 	andi	r3,r2,255
    b9d0:	18c0201c 	xori	r3,r3,128
    b9d4:	18ffe004 	addi	r3,r3,-128
    b9d8:	18000c26 	beq	r3,zero,ba0c <strcmp+0xac>
    b9dc:	29800007 	ldb	r6,0(r5)
    b9e0:	19800326 	beq	r3,r6,b9f0 <strcmp+0x90>
    b9e4:	00001306 	br	ba34 <strcmp+0xd4>
    b9e8:	29800007 	ldb	r6,0(r5)
    b9ec:	11800b1e 	bne	r2,r6,ba1c <strcmp+0xbc>
    b9f0:	21000044 	addi	r4,r4,1
    b9f4:	20c00003 	ldbu	r3,0(r4)
    b9f8:	29400044 	addi	r5,r5,1
    b9fc:	18803fcc 	andi	r2,r3,255
    ba00:	1080201c 	xori	r2,r2,128
    ba04:	10bfe004 	addi	r2,r2,-128
    ba08:	103ff71e 	bne	r2,zero,b9e8 <__alt_mem_onchip_memory+0xf780b9e8>
    ba0c:	0007883a 	mov	r3,zero
    ba10:	28800003 	ldbu	r2,0(r5)
    ba14:	1885c83a 	sub	r2,r3,r2
    ba18:	f800283a 	ret
    ba1c:	28800003 	ldbu	r2,0(r5)
    ba20:	18c03fcc 	andi	r3,r3,255
    ba24:	1885c83a 	sub	r2,r3,r2
    ba28:	f800283a 	ret
    ba2c:	0005883a 	mov	r2,zero
    ba30:	f800283a 	ret
    ba34:	10c03fcc 	andi	r3,r2,255
    ba38:	003ff506 	br	ba10 <__alt_mem_onchip_memory+0xf780ba10>

0000ba3c <__sprint_r.part.0>:
    ba3c:	28801917 	ldw	r2,100(r5)
    ba40:	defff604 	addi	sp,sp,-40
    ba44:	dd400515 	stw	r21,20(sp)
    ba48:	dfc00915 	stw	ra,36(sp)
    ba4c:	df000815 	stw	fp,32(sp)
    ba50:	ddc00715 	stw	r23,28(sp)
    ba54:	dd800615 	stw	r22,24(sp)
    ba58:	dd000415 	stw	r20,16(sp)
    ba5c:	dcc00315 	stw	r19,12(sp)
    ba60:	dc800215 	stw	r18,8(sp)
    ba64:	dc400115 	stw	r17,4(sp)
    ba68:	dc000015 	stw	r16,0(sp)
    ba6c:	1088000c 	andi	r2,r2,8192
    ba70:	302b883a 	mov	r21,r6
    ba74:	10002e26 	beq	r2,zero,bb30 <__sprint_r.part.0+0xf4>
    ba78:	30800217 	ldw	r2,8(r6)
    ba7c:	35800017 	ldw	r22,0(r6)
    ba80:	10002926 	beq	r2,zero,bb28 <__sprint_r.part.0+0xec>
    ba84:	2827883a 	mov	r19,r5
    ba88:	2029883a 	mov	r20,r4
    ba8c:	b5c00104 	addi	r23,r22,4
    ba90:	04bfffc4 	movi	r18,-1
    ba94:	bc400017 	ldw	r17,0(r23)
    ba98:	b4000017 	ldw	r16,0(r22)
    ba9c:	0039883a 	mov	fp,zero
    baa0:	8822d0ba 	srli	r17,r17,2
    baa4:	8800031e 	bne	r17,zero,bab4 <__sprint_r.part.0+0x78>
    baa8:	00001806 	br	bb0c <__sprint_r.part.0+0xd0>
    baac:	84000104 	addi	r16,r16,4
    bab0:	8f001526 	beq	r17,fp,bb08 <__sprint_r.part.0+0xcc>
    bab4:	81400017 	ldw	r5,0(r16)
    bab8:	980d883a 	mov	r6,r19
    babc:	a009883a 	mov	r4,r20
    bac0:	000d5bc0 	call	d5bc <_fputwc_r>
    bac4:	e7000044 	addi	fp,fp,1
    bac8:	14bff81e 	bne	r2,r18,baac <__alt_mem_onchip_memory+0xf780baac>
    bacc:	9005883a 	mov	r2,r18
    bad0:	a8000215 	stw	zero,8(r21)
    bad4:	a8000115 	stw	zero,4(r21)
    bad8:	dfc00917 	ldw	ra,36(sp)
    badc:	df000817 	ldw	fp,32(sp)
    bae0:	ddc00717 	ldw	r23,28(sp)
    bae4:	dd800617 	ldw	r22,24(sp)
    bae8:	dd400517 	ldw	r21,20(sp)
    baec:	dd000417 	ldw	r20,16(sp)
    baf0:	dcc00317 	ldw	r19,12(sp)
    baf4:	dc800217 	ldw	r18,8(sp)
    baf8:	dc400117 	ldw	r17,4(sp)
    bafc:	dc000017 	ldw	r16,0(sp)
    bb00:	dec00a04 	addi	sp,sp,40
    bb04:	f800283a 	ret
    bb08:	a8800217 	ldw	r2,8(r21)
    bb0c:	8c63883a 	add	r17,r17,r17
    bb10:	8c63883a 	add	r17,r17,r17
    bb14:	1445c83a 	sub	r2,r2,r17
    bb18:	a8800215 	stw	r2,8(r21)
    bb1c:	b5800204 	addi	r22,r22,8
    bb20:	bdc00204 	addi	r23,r23,8
    bb24:	103fdb1e 	bne	r2,zero,ba94 <__alt_mem_onchip_memory+0xf780ba94>
    bb28:	0005883a 	mov	r2,zero
    bb2c:	003fe806 	br	bad0 <__alt_mem_onchip_memory+0xf780bad0>
    bb30:	0008b140 	call	8b14 <__sfvwrite_r>
    bb34:	003fe606 	br	bad0 <__alt_mem_onchip_memory+0xf780bad0>

0000bb38 <__sprint_r>:
    bb38:	30c00217 	ldw	r3,8(r6)
    bb3c:	18000126 	beq	r3,zero,bb44 <__sprint_r+0xc>
    bb40:	000ba3c1 	jmpi	ba3c <__sprint_r.part.0>
    bb44:	30000115 	stw	zero,4(r6)
    bb48:	0005883a 	mov	r2,zero
    bb4c:	f800283a 	ret

0000bb50 <___vfiprintf_internal_r>:
    bb50:	deffc904 	addi	sp,sp,-220
    bb54:	df003515 	stw	fp,212(sp)
    bb58:	dd003115 	stw	r20,196(sp)
    bb5c:	dfc03615 	stw	ra,216(sp)
    bb60:	ddc03415 	stw	r23,208(sp)
    bb64:	dd803315 	stw	r22,204(sp)
    bb68:	dd403215 	stw	r21,200(sp)
    bb6c:	dcc03015 	stw	r19,192(sp)
    bb70:	dc802f15 	stw	r18,188(sp)
    bb74:	dc402e15 	stw	r17,184(sp)
    bb78:	dc002d15 	stw	r16,180(sp)
    bb7c:	d9002015 	stw	r4,128(sp)
    bb80:	d9c02215 	stw	r7,136(sp)
    bb84:	2829883a 	mov	r20,r5
    bb88:	3039883a 	mov	fp,r6
    bb8c:	20000226 	beq	r4,zero,bb98 <___vfiprintf_internal_r+0x48>
    bb90:	20800e17 	ldw	r2,56(r4)
    bb94:	1000cf26 	beq	r2,zero,bed4 <___vfiprintf_internal_r+0x384>
    bb98:	a080030b 	ldhu	r2,12(r20)
    bb9c:	10c8000c 	andi	r3,r2,8192
    bba0:	1800061e 	bne	r3,zero,bbbc <___vfiprintf_internal_r+0x6c>
    bba4:	a1001917 	ldw	r4,100(r20)
    bba8:	00f7ffc4 	movi	r3,-8193
    bbac:	10880014 	ori	r2,r2,8192
    bbb0:	20c6703a 	and	r3,r4,r3
    bbb4:	a080030d 	sth	r2,12(r20)
    bbb8:	a0c01915 	stw	r3,100(r20)
    bbbc:	10c0020c 	andi	r3,r2,8
    bbc0:	1800a926 	beq	r3,zero,be68 <___vfiprintf_internal_r+0x318>
    bbc4:	a0c00417 	ldw	r3,16(r20)
    bbc8:	1800a726 	beq	r3,zero,be68 <___vfiprintf_internal_r+0x318>
    bbcc:	1080068c 	andi	r2,r2,26
    bbd0:	00c00284 	movi	r3,10
    bbd4:	10c0ac26 	beq	r2,r3,be88 <___vfiprintf_internal_r+0x338>
    bbd8:	da801a04 	addi	r10,sp,104
    bbdc:	da801e15 	stw	r10,120(sp)
    bbe0:	d8801e17 	ldw	r2,120(sp)
    bbe4:	da8019c4 	addi	r10,sp,103
    bbe8:	05800074 	movhi	r22,1
    bbec:	05c00074 	movhi	r23,1
    bbf0:	da801f15 	stw	r10,124(sp)
    bbf4:	1295c83a 	sub	r10,r2,r10
    bbf8:	b5867704 	addi	r22,r22,6620
    bbfc:	bdc67304 	addi	r23,r23,6604
    bc00:	dec01a15 	stw	sp,104(sp)
    bc04:	d8001c15 	stw	zero,112(sp)
    bc08:	d8001b15 	stw	zero,108(sp)
    bc0c:	d8002615 	stw	zero,152(sp)
    bc10:	d8002315 	stw	zero,140(sp)
    bc14:	da802715 	stw	r10,156(sp)
    bc18:	d811883a 	mov	r8,sp
    bc1c:	dd002115 	stw	r20,132(sp)
    bc20:	e021883a 	mov	r16,fp
    bc24:	80800007 	ldb	r2,0(r16)
    bc28:	1003ea26 	beq	r2,zero,cbd4 <___vfiprintf_internal_r+0x1084>
    bc2c:	00c00944 	movi	r3,37
    bc30:	8025883a 	mov	r18,r16
    bc34:	10c0021e 	bne	r2,r3,bc40 <___vfiprintf_internal_r+0xf0>
    bc38:	00001606 	br	bc94 <___vfiprintf_internal_r+0x144>
    bc3c:	10c00326 	beq	r2,r3,bc4c <___vfiprintf_internal_r+0xfc>
    bc40:	94800044 	addi	r18,r18,1
    bc44:	90800007 	ldb	r2,0(r18)
    bc48:	103ffc1e 	bne	r2,zero,bc3c <__alt_mem_onchip_memory+0xf780bc3c>
    bc4c:	9423c83a 	sub	r17,r18,r16
    bc50:	88001026 	beq	r17,zero,bc94 <___vfiprintf_internal_r+0x144>
    bc54:	d8c01c17 	ldw	r3,112(sp)
    bc58:	d8801b17 	ldw	r2,108(sp)
    bc5c:	44000015 	stw	r16,0(r8)
    bc60:	88c7883a 	add	r3,r17,r3
    bc64:	10800044 	addi	r2,r2,1
    bc68:	44400115 	stw	r17,4(r8)
    bc6c:	d8c01c15 	stw	r3,112(sp)
    bc70:	d8801b15 	stw	r2,108(sp)
    bc74:	010001c4 	movi	r4,7
    bc78:	2080760e 	bge	r4,r2,be54 <___vfiprintf_internal_r+0x304>
    bc7c:	1803821e 	bne	r3,zero,ca88 <___vfiprintf_internal_r+0xf38>
    bc80:	da802317 	ldw	r10,140(sp)
    bc84:	d8001b15 	stw	zero,108(sp)
    bc88:	d811883a 	mov	r8,sp
    bc8c:	5455883a 	add	r10,r10,r17
    bc90:	da802315 	stw	r10,140(sp)
    bc94:	90800007 	ldb	r2,0(r18)
    bc98:	10044626 	beq	r2,zero,cdb4 <___vfiprintf_internal_r+0x1264>
    bc9c:	90c00047 	ldb	r3,1(r18)
    bca0:	94000044 	addi	r16,r18,1
    bca4:	d8001d85 	stb	zero,118(sp)
    bca8:	0009883a 	mov	r4,zero
    bcac:	000f883a 	mov	r7,zero
    bcb0:	027fffc4 	movi	r9,-1
    bcb4:	0023883a 	mov	r17,zero
    bcb8:	0029883a 	mov	r20,zero
    bcbc:	01401604 	movi	r5,88
    bcc0:	01800244 	movi	r6,9
    bcc4:	03400a84 	movi	r13,42
    bcc8:	03001b04 	movi	r12,108
    bccc:	84000044 	addi	r16,r16,1
    bcd0:	18bff804 	addi	r2,r3,-32
    bcd4:	28827336 	bltu	r5,r2,c6a4 <___vfiprintf_internal_r+0xb54>
    bcd8:	100490ba 	slli	r2,r2,2
    bcdc:	02800074 	movhi	r10,1
    bce0:	52af3c04 	addi	r10,r10,-17168
    bce4:	1285883a 	add	r2,r2,r10
    bce8:	10800017 	ldw	r2,0(r2)
    bcec:	1000683a 	jmp	r2
    bcf0:	0000c3d8 	cmpnei	zero,zero,783
    bcf4:	0000c6a4 	muli	zero,zero,794
    bcf8:	0000c6a4 	muli	zero,zero,794
    bcfc:	0000c3f8 	rdprs	zero,zero,783
    bd00:	0000c6a4 	muli	zero,zero,794
    bd04:	0000c6a4 	muli	zero,zero,794
    bd08:	0000c6a4 	muli	zero,zero,794
    bd0c:	0000c6a4 	muli	zero,zero,794
    bd10:	0000c6a4 	muli	zero,zero,794
    bd14:	0000c6a4 	muli	zero,zero,794
    bd18:	0000c5e0 	cmpeqi	zero,zero,791
    bd1c:	0000c5fc 	xorhi	zero,zero,791
    bd20:	0000c6a4 	muli	zero,zero,794
    bd24:	0000bee4 	muli	zero,zero,763
    bd28:	0000c60c 	andi	zero,zero,792
    bd2c:	0000c6a4 	muli	zero,zero,794
    bd30:	0000c404 	movi	zero,784
    bd34:	0000c410 	cmplti	zero,zero,784
    bd38:	0000c410 	cmplti	zero,zero,784
    bd3c:	0000c410 	cmplti	zero,zero,784
    bd40:	0000c410 	cmplti	zero,zero,784
    bd44:	0000c410 	cmplti	zero,zero,784
    bd48:	0000c410 	cmplti	zero,zero,784
    bd4c:	0000c410 	cmplti	zero,zero,784
    bd50:	0000c410 	cmplti	zero,zero,784
    bd54:	0000c410 	cmplti	zero,zero,784
    bd58:	0000c6a4 	muli	zero,zero,794
    bd5c:	0000c6a4 	muli	zero,zero,794
    bd60:	0000c6a4 	muli	zero,zero,794
    bd64:	0000c6a4 	muli	zero,zero,794
    bd68:	0000c6a4 	muli	zero,zero,794
    bd6c:	0000c6a4 	muli	zero,zero,794
    bd70:	0000c6a4 	muli	zero,zero,794
    bd74:	0000c6a4 	muli	zero,zero,794
    bd78:	0000c6a4 	muli	zero,zero,794
    bd7c:	0000c6a4 	muli	zero,zero,794
    bd80:	0000c43c 	xorhi	zero,zero,784
    bd84:	0000c6a4 	muli	zero,zero,794
    bd88:	0000c6a4 	muli	zero,zero,794
    bd8c:	0000c6a4 	muli	zero,zero,794
    bd90:	0000c6a4 	muli	zero,zero,794
    bd94:	0000c6a4 	muli	zero,zero,794
    bd98:	0000c6a4 	muli	zero,zero,794
    bd9c:	0000c6a4 	muli	zero,zero,794
    bda0:	0000c6a4 	muli	zero,zero,794
    bda4:	0000c6a4 	muli	zero,zero,794
    bda8:	0000c6a4 	muli	zero,zero,794
    bdac:	0000c474 	movhi	zero,785
    bdb0:	0000c6a4 	muli	zero,zero,794
    bdb4:	0000c6a4 	muli	zero,zero,794
    bdb8:	0000c6a4 	muli	zero,zero,794
    bdbc:	0000c6a4 	muli	zero,zero,794
    bdc0:	0000c6a4 	muli	zero,zero,794
    bdc4:	0000c4cc 	andi	zero,zero,787
    bdc8:	0000c6a4 	muli	zero,zero,794
    bdcc:	0000c6a4 	muli	zero,zero,794
    bdd0:	0000c53c 	xorhi	zero,zero,788
    bdd4:	0000c6a4 	muli	zero,zero,794
    bdd8:	0000c6a4 	muli	zero,zero,794
    bddc:	0000c6a4 	muli	zero,zero,794
    bde0:	0000c6a4 	muli	zero,zero,794
    bde4:	0000c6a4 	muli	zero,zero,794
    bde8:	0000c6a4 	muli	zero,zero,794
    bdec:	0000c6a4 	muli	zero,zero,794
    bdf0:	0000c6a4 	muli	zero,zero,794
    bdf4:	0000c6a4 	muli	zero,zero,794
    bdf8:	0000c6a4 	muli	zero,zero,794
    bdfc:	0000c2e8 	cmpgeui	zero,zero,779
    be00:	0000c314 	movui	zero,780
    be04:	0000c6a4 	muli	zero,zero,794
    be08:	0000c6a4 	muli	zero,zero,794
    be0c:	0000c6a4 	muli	zero,zero,794
    be10:	0000c64c 	andi	zero,zero,793
    be14:	0000c314 	movui	zero,780
    be18:	0000c6a4 	muli	zero,zero,794
    be1c:	0000c6a4 	muli	zero,zero,794
    be20:	0000c1a8 	cmpgeui	zero,zero,774
    be24:	0000c6a4 	muli	zero,zero,794
    be28:	0000c1b8 	rdprs	zero,zero,774
    be2c:	0000c1f4 	movhi	zero,775
    be30:	0000bef0 	cmpltui	zero,zero,763
    be34:	0000c19c 	xori	zero,zero,774
    be38:	0000c6a4 	muli	zero,zero,794
    be3c:	0000c578 	rdprs	zero,zero,789
    be40:	0000c6a4 	muli	zero,zero,794
    be44:	0000c5d0 	cmplti	zero,zero,791
    be48:	0000c6a4 	muli	zero,zero,794
    be4c:	0000c6a4 	muli	zero,zero,794
    be50:	0000c294 	movui	zero,778
    be54:	42000204 	addi	r8,r8,8
    be58:	da802317 	ldw	r10,140(sp)
    be5c:	5455883a 	add	r10,r10,r17
    be60:	da802315 	stw	r10,140(sp)
    be64:	003f8b06 	br	bc94 <__alt_mem_onchip_memory+0xf780bc94>
    be68:	d9002017 	ldw	r4,128(sp)
    be6c:	a00b883a 	mov	r5,r20
    be70:	00066bc0 	call	66bc <__swsetup_r>
    be74:	1003b11e 	bne	r2,zero,cd3c <___vfiprintf_internal_r+0x11ec>
    be78:	a080030b 	ldhu	r2,12(r20)
    be7c:	00c00284 	movi	r3,10
    be80:	1080068c 	andi	r2,r2,26
    be84:	10ff541e 	bne	r2,r3,bbd8 <__alt_mem_onchip_memory+0xf780bbd8>
    be88:	a080038f 	ldh	r2,14(r20)
    be8c:	103f5216 	blt	r2,zero,bbd8 <__alt_mem_onchip_memory+0xf780bbd8>
    be90:	d9c02217 	ldw	r7,136(sp)
    be94:	d9002017 	ldw	r4,128(sp)
    be98:	e00d883a 	mov	r6,fp
    be9c:	a00b883a 	mov	r5,r20
    bea0:	000cfc80 	call	cfc8 <__sbprintf>
    bea4:	dfc03617 	ldw	ra,216(sp)
    bea8:	df003517 	ldw	fp,212(sp)
    beac:	ddc03417 	ldw	r23,208(sp)
    beb0:	dd803317 	ldw	r22,204(sp)
    beb4:	dd403217 	ldw	r21,200(sp)
    beb8:	dd003117 	ldw	r20,196(sp)
    bebc:	dcc03017 	ldw	r19,192(sp)
    bec0:	dc802f17 	ldw	r18,188(sp)
    bec4:	dc402e17 	ldw	r17,184(sp)
    bec8:	dc002d17 	ldw	r16,180(sp)
    becc:	dec03704 	addi	sp,sp,220
    bed0:	f800283a 	ret
    bed4:	00086900 	call	8690 <__sinit>
    bed8:	003f2f06 	br	bb98 <__alt_mem_onchip_memory+0xf780bb98>
    bedc:	0463c83a 	sub	r17,zero,r17
    bee0:	d8802215 	stw	r2,136(sp)
    bee4:	a5000114 	ori	r20,r20,4
    bee8:	80c00007 	ldb	r3,0(r16)
    beec:	003f7706 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    bef0:	00800c04 	movi	r2,48
    bef4:	da802217 	ldw	r10,136(sp)
    bef8:	d8801d05 	stb	r2,116(sp)
    befc:	00801e04 	movi	r2,120
    bf00:	d8801d45 	stb	r2,117(sp)
    bf04:	d8001d85 	stb	zero,118(sp)
    bf08:	50c00104 	addi	r3,r10,4
    bf0c:	54800017 	ldw	r18,0(r10)
    bf10:	0027883a 	mov	r19,zero
    bf14:	a0800094 	ori	r2,r20,2
    bf18:	48030b16 	blt	r9,zero,cb48 <___vfiprintf_internal_r+0xff8>
    bf1c:	00bfdfc4 	movi	r2,-129
    bf20:	a096703a 	and	r11,r20,r2
    bf24:	d8c02215 	stw	r3,136(sp)
    bf28:	5d000094 	ori	r20,r11,2
    bf2c:	90032b1e 	bne	r18,zero,cbdc <___vfiprintf_internal_r+0x108c>
    bf30:	00800074 	movhi	r2,1
    bf34:	10861304 	addi	r2,r2,6220
    bf38:	d8802615 	stw	r2,152(sp)
    bf3c:	0039883a 	mov	fp,zero
    bf40:	48017b1e 	bne	r9,zero,c530 <___vfiprintf_internal_r+0x9e0>
    bf44:	0013883a 	mov	r9,zero
    bf48:	0027883a 	mov	r19,zero
    bf4c:	dd401a04 	addi	r21,sp,104
    bf50:	4825883a 	mov	r18,r9
    bf54:	4cc0010e 	bge	r9,r19,bf5c <___vfiprintf_internal_r+0x40c>
    bf58:	9825883a 	mov	r18,r19
    bf5c:	e7003fcc 	andi	fp,fp,255
    bf60:	e700201c 	xori	fp,fp,128
    bf64:	e73fe004 	addi	fp,fp,-128
    bf68:	e0000126 	beq	fp,zero,bf70 <___vfiprintf_internal_r+0x420>
    bf6c:	94800044 	addi	r18,r18,1
    bf70:	a380008c 	andi	r14,r20,2
    bf74:	70000126 	beq	r14,zero,bf7c <___vfiprintf_internal_r+0x42c>
    bf78:	94800084 	addi	r18,r18,2
    bf7c:	a700210c 	andi	fp,r20,132
    bf80:	e001df1e 	bne	fp,zero,c700 <___vfiprintf_internal_r+0xbb0>
    bf84:	8c87c83a 	sub	r3,r17,r18
    bf88:	00c1dd0e 	bge	zero,r3,c700 <___vfiprintf_internal_r+0xbb0>
    bf8c:	01c00404 	movi	r7,16
    bf90:	d8801c17 	ldw	r2,112(sp)
    bf94:	38c3ad0e 	bge	r7,r3,ce4c <___vfiprintf_internal_r+0x12fc>
    bf98:	02800074 	movhi	r10,1
    bf9c:	52867704 	addi	r10,r10,6620
    bfa0:	dc002915 	stw	r16,164(sp)
    bfa4:	d9801b17 	ldw	r6,108(sp)
    bfa8:	da802415 	stw	r10,144(sp)
    bfac:	03c001c4 	movi	r15,7
    bfb0:	da402515 	stw	r9,148(sp)
    bfb4:	db802815 	stw	r14,160(sp)
    bfb8:	1821883a 	mov	r16,r3
    bfbc:	00000506 	br	bfd4 <___vfiprintf_internal_r+0x484>
    bfc0:	31400084 	addi	r5,r6,2
    bfc4:	42000204 	addi	r8,r8,8
    bfc8:	200d883a 	mov	r6,r4
    bfcc:	843ffc04 	addi	r16,r16,-16
    bfd0:	3c000d0e 	bge	r7,r16,c008 <___vfiprintf_internal_r+0x4b8>
    bfd4:	10800404 	addi	r2,r2,16
    bfd8:	31000044 	addi	r4,r6,1
    bfdc:	45800015 	stw	r22,0(r8)
    bfe0:	41c00115 	stw	r7,4(r8)
    bfe4:	d8801c15 	stw	r2,112(sp)
    bfe8:	d9001b15 	stw	r4,108(sp)
    bfec:	793ff40e 	bge	r15,r4,bfc0 <__alt_mem_onchip_memory+0xf780bfc0>
    bff0:	1001b51e 	bne	r2,zero,c6c8 <___vfiprintf_internal_r+0xb78>
    bff4:	843ffc04 	addi	r16,r16,-16
    bff8:	000d883a 	mov	r6,zero
    bffc:	01400044 	movi	r5,1
    c000:	d811883a 	mov	r8,sp
    c004:	3c3ff316 	blt	r7,r16,bfd4 <__alt_mem_onchip_memory+0xf780bfd4>
    c008:	8007883a 	mov	r3,r16
    c00c:	da402517 	ldw	r9,148(sp)
    c010:	db802817 	ldw	r14,160(sp)
    c014:	dc002917 	ldw	r16,164(sp)
    c018:	da802417 	ldw	r10,144(sp)
    c01c:	1885883a 	add	r2,r3,r2
    c020:	40c00115 	stw	r3,4(r8)
    c024:	42800015 	stw	r10,0(r8)
    c028:	d8801c15 	stw	r2,112(sp)
    c02c:	d9401b15 	stw	r5,108(sp)
    c030:	00c001c4 	movi	r3,7
    c034:	19426016 	blt	r3,r5,c9b8 <___vfiprintf_internal_r+0xe68>
    c038:	d8c01d87 	ldb	r3,118(sp)
    c03c:	42000204 	addi	r8,r8,8
    c040:	29000044 	addi	r4,r5,1
    c044:	1801b31e 	bne	r3,zero,c714 <___vfiprintf_internal_r+0xbc4>
    c048:	7001c026 	beq	r14,zero,c74c <___vfiprintf_internal_r+0xbfc>
    c04c:	d8c01d04 	addi	r3,sp,116
    c050:	10800084 	addi	r2,r2,2
    c054:	40c00015 	stw	r3,0(r8)
    c058:	00c00084 	movi	r3,2
    c05c:	40c00115 	stw	r3,4(r8)
    c060:	d8801c15 	stw	r2,112(sp)
    c064:	d9001b15 	stw	r4,108(sp)
    c068:	00c001c4 	movi	r3,7
    c06c:	1902650e 	bge	r3,r4,ca04 <___vfiprintf_internal_r+0xeb4>
    c070:	10029a1e 	bne	r2,zero,cadc <___vfiprintf_internal_r+0xf8c>
    c074:	00c02004 	movi	r3,128
    c078:	01000044 	movi	r4,1
    c07c:	000b883a 	mov	r5,zero
    c080:	d811883a 	mov	r8,sp
    c084:	e0c1b31e 	bne	fp,r3,c754 <___vfiprintf_internal_r+0xc04>
    c088:	8cb9c83a 	sub	fp,r17,r18
    c08c:	0701b10e 	bge	zero,fp,c754 <___vfiprintf_internal_r+0xc04>
    c090:	01c00404 	movi	r7,16
    c094:	3f03890e 	bge	r7,fp,cebc <___vfiprintf_internal_r+0x136c>
    c098:	00c00074 	movhi	r3,1
    c09c:	18c67304 	addi	r3,r3,6604
    c0a0:	d8c02415 	stw	r3,144(sp)
    c0a4:	8007883a 	mov	r3,r16
    c0a8:	034001c4 	movi	r13,7
    c0ac:	e021883a 	mov	r16,fp
    c0b0:	da402515 	stw	r9,148(sp)
    c0b4:	1839883a 	mov	fp,r3
    c0b8:	00000506 	br	c0d0 <___vfiprintf_internal_r+0x580>
    c0bc:	29800084 	addi	r6,r5,2
    c0c0:	42000204 	addi	r8,r8,8
    c0c4:	180b883a 	mov	r5,r3
    c0c8:	843ffc04 	addi	r16,r16,-16
    c0cc:	3c000d0e 	bge	r7,r16,c104 <___vfiprintf_internal_r+0x5b4>
    c0d0:	10800404 	addi	r2,r2,16
    c0d4:	28c00044 	addi	r3,r5,1
    c0d8:	45c00015 	stw	r23,0(r8)
    c0dc:	41c00115 	stw	r7,4(r8)
    c0e0:	d8801c15 	stw	r2,112(sp)
    c0e4:	d8c01b15 	stw	r3,108(sp)
    c0e8:	68fff40e 	bge	r13,r3,c0bc <__alt_mem_onchip_memory+0xf780c0bc>
    c0ec:	1002241e 	bne	r2,zero,c980 <___vfiprintf_internal_r+0xe30>
    c0f0:	843ffc04 	addi	r16,r16,-16
    c0f4:	01800044 	movi	r6,1
    c0f8:	000b883a 	mov	r5,zero
    c0fc:	d811883a 	mov	r8,sp
    c100:	3c3ff316 	blt	r7,r16,c0d0 <__alt_mem_onchip_memory+0xf780c0d0>
    c104:	da402517 	ldw	r9,148(sp)
    c108:	e007883a 	mov	r3,fp
    c10c:	8039883a 	mov	fp,r16
    c110:	1821883a 	mov	r16,r3
    c114:	d8c02417 	ldw	r3,144(sp)
    c118:	1705883a 	add	r2,r2,fp
    c11c:	47000115 	stw	fp,4(r8)
    c120:	40c00015 	stw	r3,0(r8)
    c124:	d8801c15 	stw	r2,112(sp)
    c128:	d9801b15 	stw	r6,108(sp)
    c12c:	00c001c4 	movi	r3,7
    c130:	19827616 	blt	r3,r6,cb0c <___vfiprintf_internal_r+0xfbc>
    c134:	4cf9c83a 	sub	fp,r9,r19
    c138:	42000204 	addi	r8,r8,8
    c13c:	31000044 	addi	r4,r6,1
    c140:	300b883a 	mov	r5,r6
    c144:	07018516 	blt	zero,fp,c75c <___vfiprintf_internal_r+0xc0c>
    c148:	9885883a 	add	r2,r19,r2
    c14c:	45400015 	stw	r21,0(r8)
    c150:	44c00115 	stw	r19,4(r8)
    c154:	d8801c15 	stw	r2,112(sp)
    c158:	d9001b15 	stw	r4,108(sp)
    c15c:	00c001c4 	movi	r3,7
    c160:	1901dd0e 	bge	r3,r4,c8d8 <___vfiprintf_internal_r+0xd88>
    c164:	1002401e 	bne	r2,zero,ca68 <___vfiprintf_internal_r+0xf18>
    c168:	d8001b15 	stw	zero,108(sp)
    c16c:	a2c0010c 	andi	r11,r20,4
    c170:	58000226 	beq	r11,zero,c17c <___vfiprintf_internal_r+0x62c>
    c174:	8ca7c83a 	sub	r19,r17,r18
    c178:	04c2f216 	blt	zero,r19,cd44 <___vfiprintf_internal_r+0x11f4>
    c17c:	8c80010e 	bge	r17,r18,c184 <___vfiprintf_internal_r+0x634>
    c180:	9023883a 	mov	r17,r18
    c184:	da802317 	ldw	r10,140(sp)
    c188:	5455883a 	add	r10,r10,r17
    c18c:	da802315 	stw	r10,140(sp)
    c190:	d8001b15 	stw	zero,108(sp)
    c194:	d811883a 	mov	r8,sp
    c198:	003ea206 	br	bc24 <__alt_mem_onchip_memory+0xf780bc24>
    c19c:	a5000814 	ori	r20,r20,32
    c1a0:	80c00007 	ldb	r3,0(r16)
    c1a4:	003ec906 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c1a8:	80c00007 	ldb	r3,0(r16)
    c1ac:	1b030926 	beq	r3,r12,cdd4 <___vfiprintf_internal_r+0x1284>
    c1b0:	a5000414 	ori	r20,r20,16
    c1b4:	003ec506 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c1b8:	21003fcc 	andi	r4,r4,255
    c1bc:	20035e1e 	bne	r4,zero,cf38 <___vfiprintf_internal_r+0x13e8>
    c1c0:	a080080c 	andi	r2,r20,32
    c1c4:	1002a526 	beq	r2,zero,cc5c <___vfiprintf_internal_r+0x110c>
    c1c8:	da802217 	ldw	r10,136(sp)
    c1cc:	50800017 	ldw	r2,0(r10)
    c1d0:	da802317 	ldw	r10,140(sp)
    c1d4:	5007d7fa 	srai	r3,r10,31
    c1d8:	da802217 	ldw	r10,136(sp)
    c1dc:	10c00115 	stw	r3,4(r2)
    c1e0:	52800104 	addi	r10,r10,4
    c1e4:	da802215 	stw	r10,136(sp)
    c1e8:	da802317 	ldw	r10,140(sp)
    c1ec:	12800015 	stw	r10,0(r2)
    c1f0:	003e8c06 	br	bc24 <__alt_mem_onchip_memory+0xf780bc24>
    c1f4:	21003fcc 	andi	r4,r4,255
    c1f8:	2003511e 	bne	r4,zero,cf40 <___vfiprintf_internal_r+0x13f0>
    c1fc:	a080080c 	andi	r2,r20,32
    c200:	1000a126 	beq	r2,zero,c488 <___vfiprintf_internal_r+0x938>
    c204:	da802217 	ldw	r10,136(sp)
    c208:	d8001d85 	stb	zero,118(sp)
    c20c:	50800204 	addi	r2,r10,8
    c210:	54800017 	ldw	r18,0(r10)
    c214:	54c00117 	ldw	r19,4(r10)
    c218:	4802b416 	blt	r9,zero,ccec <___vfiprintf_internal_r+0x119c>
    c21c:	013fdfc4 	movi	r4,-129
    c220:	94c6b03a 	or	r3,r18,r19
    c224:	d8802215 	stw	r2,136(sp)
    c228:	a128703a 	and	r20,r20,r4
    c22c:	1800a226 	beq	r3,zero,c4b8 <___vfiprintf_internal_r+0x968>
    c230:	0039883a 	mov	fp,zero
    c234:	dd401a04 	addi	r21,sp,104
    c238:	9006d0fa 	srli	r3,r18,3
    c23c:	9808977a 	slli	r4,r19,29
    c240:	9826d0fa 	srli	r19,r19,3
    c244:	948001cc 	andi	r18,r18,7
    c248:	90800c04 	addi	r2,r18,48
    c24c:	ad7fffc4 	addi	r21,r21,-1
    c250:	20e4b03a 	or	r18,r4,r3
    c254:	a8800005 	stb	r2,0(r21)
    c258:	94c6b03a 	or	r3,r18,r19
    c25c:	183ff61e 	bne	r3,zero,c238 <__alt_mem_onchip_memory+0xf780c238>
    c260:	a0c0004c 	andi	r3,r20,1
    c264:	18005926 	beq	r3,zero,c3cc <___vfiprintf_internal_r+0x87c>
    c268:	10803fcc 	andi	r2,r2,255
    c26c:	1080201c 	xori	r2,r2,128
    c270:	10bfe004 	addi	r2,r2,-128
    c274:	00c00c04 	movi	r3,48
    c278:	10c05426 	beq	r2,r3,c3cc <___vfiprintf_internal_r+0x87c>
    c27c:	da801e17 	ldw	r10,120(sp)
    c280:	a8bfffc4 	addi	r2,r21,-1
    c284:	a8ffffc5 	stb	r3,-1(r21)
    c288:	50a7c83a 	sub	r19,r10,r2
    c28c:	102b883a 	mov	r21,r2
    c290:	003f2f06 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    c294:	21003fcc 	andi	r4,r4,255
    c298:	2003421e 	bne	r4,zero,cfa4 <___vfiprintf_internal_r+0x1454>
    c29c:	00800074 	movhi	r2,1
    c2a0:	10861304 	addi	r2,r2,6220
    c2a4:	d8802615 	stw	r2,152(sp)
    c2a8:	a080080c 	andi	r2,r20,32
    c2ac:	1000aa26 	beq	r2,zero,c558 <___vfiprintf_internal_r+0xa08>
    c2b0:	da802217 	ldw	r10,136(sp)
    c2b4:	54800017 	ldw	r18,0(r10)
    c2b8:	54c00117 	ldw	r19,4(r10)
    c2bc:	52800204 	addi	r10,r10,8
    c2c0:	da802215 	stw	r10,136(sp)
    c2c4:	a080004c 	andi	r2,r20,1
    c2c8:	1001d226 	beq	r2,zero,ca14 <___vfiprintf_internal_r+0xec4>
    c2cc:	94c4b03a 	or	r2,r18,r19
    c2d0:	1002351e 	bne	r2,zero,cba8 <___vfiprintf_internal_r+0x1058>
    c2d4:	d8001d85 	stb	zero,118(sp)
    c2d8:	48022216 	blt	r9,zero,cb64 <___vfiprintf_internal_r+0x1014>
    c2dc:	00bfdfc4 	movi	r2,-129
    c2e0:	a0a8703a 	and	r20,r20,r2
    c2e4:	003f1506 	br	bf3c <__alt_mem_onchip_memory+0xf780bf3c>
    c2e8:	da802217 	ldw	r10,136(sp)
    c2ec:	04800044 	movi	r18,1
    c2f0:	d8001d85 	stb	zero,118(sp)
    c2f4:	50800017 	ldw	r2,0(r10)
    c2f8:	52800104 	addi	r10,r10,4
    c2fc:	da802215 	stw	r10,136(sp)
    c300:	d8801005 	stb	r2,64(sp)
    c304:	9027883a 	mov	r19,r18
    c308:	dd401004 	addi	r21,sp,64
    c30c:	0013883a 	mov	r9,zero
    c310:	003f1706 	br	bf70 <__alt_mem_onchip_memory+0xf780bf70>
    c314:	21003fcc 	andi	r4,r4,255
    c318:	2003201e 	bne	r4,zero,cf9c <___vfiprintf_internal_r+0x144c>
    c31c:	a080080c 	andi	r2,r20,32
    c320:	10004b26 	beq	r2,zero,c450 <___vfiprintf_internal_r+0x900>
    c324:	da802217 	ldw	r10,136(sp)
    c328:	50800117 	ldw	r2,4(r10)
    c32c:	54800017 	ldw	r18,0(r10)
    c330:	52800204 	addi	r10,r10,8
    c334:	da802215 	stw	r10,136(sp)
    c338:	1027883a 	mov	r19,r2
    c33c:	10022c16 	blt	r2,zero,cbf0 <___vfiprintf_internal_r+0x10a0>
    c340:	df001d83 	ldbu	fp,118(sp)
    c344:	48007216 	blt	r9,zero,c510 <___vfiprintf_internal_r+0x9c0>
    c348:	00ffdfc4 	movi	r3,-129
    c34c:	94c4b03a 	or	r2,r18,r19
    c350:	a0e8703a 	and	r20,r20,r3
    c354:	1000cc26 	beq	r2,zero,c688 <___vfiprintf_internal_r+0xb38>
    c358:	98021026 	beq	r19,zero,cb9c <___vfiprintf_internal_r+0x104c>
    c35c:	dc402415 	stw	r17,144(sp)
    c360:	dc002515 	stw	r16,148(sp)
    c364:	9823883a 	mov	r17,r19
    c368:	9021883a 	mov	r16,r18
    c36c:	dd401a04 	addi	r21,sp,104
    c370:	4825883a 	mov	r18,r9
    c374:	4027883a 	mov	r19,r8
    c378:	8009883a 	mov	r4,r16
    c37c:	880b883a 	mov	r5,r17
    c380:	01800284 	movi	r6,10
    c384:	000f883a 	mov	r7,zero
    c388:	000df900 	call	df90 <__umoddi3>
    c38c:	10800c04 	addi	r2,r2,48
    c390:	ad7fffc4 	addi	r21,r21,-1
    c394:	8009883a 	mov	r4,r16
    c398:	880b883a 	mov	r5,r17
    c39c:	a8800005 	stb	r2,0(r21)
    c3a0:	01800284 	movi	r6,10
    c3a4:	000f883a 	mov	r7,zero
    c3a8:	000da180 	call	da18 <__udivdi3>
    c3ac:	1021883a 	mov	r16,r2
    c3b0:	10c4b03a 	or	r2,r2,r3
    c3b4:	1823883a 	mov	r17,r3
    c3b8:	103fef1e 	bne	r2,zero,c378 <__alt_mem_onchip_memory+0xf780c378>
    c3bc:	dc402417 	ldw	r17,144(sp)
    c3c0:	dc002517 	ldw	r16,148(sp)
    c3c4:	9013883a 	mov	r9,r18
    c3c8:	9811883a 	mov	r8,r19
    c3cc:	da801e17 	ldw	r10,120(sp)
    c3d0:	5567c83a 	sub	r19,r10,r21
    c3d4:	003ede06 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    c3d8:	38803fcc 	andi	r2,r7,255
    c3dc:	1080201c 	xori	r2,r2,128
    c3e0:	10bfe004 	addi	r2,r2,-128
    c3e4:	1002371e 	bne	r2,zero,ccc4 <___vfiprintf_internal_r+0x1174>
    c3e8:	01000044 	movi	r4,1
    c3ec:	01c00804 	movi	r7,32
    c3f0:	80c00007 	ldb	r3,0(r16)
    c3f4:	003e3506 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c3f8:	a5000054 	ori	r20,r20,1
    c3fc:	80c00007 	ldb	r3,0(r16)
    c400:	003e3206 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c404:	a5002014 	ori	r20,r20,128
    c408:	80c00007 	ldb	r3,0(r16)
    c40c:	003e2f06 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c410:	8015883a 	mov	r10,r16
    c414:	0023883a 	mov	r17,zero
    c418:	18bff404 	addi	r2,r3,-48
    c41c:	50c00007 	ldb	r3,0(r10)
    c420:	8c4002a4 	muli	r17,r17,10
    c424:	84000044 	addi	r16,r16,1
    c428:	8015883a 	mov	r10,r16
    c42c:	1463883a 	add	r17,r2,r17
    c430:	18bff404 	addi	r2,r3,-48
    c434:	30bff92e 	bgeu	r6,r2,c41c <__alt_mem_onchip_memory+0xf780c41c>
    c438:	003e2506 	br	bcd0 <__alt_mem_onchip_memory+0xf780bcd0>
    c43c:	21003fcc 	andi	r4,r4,255
    c440:	2002d41e 	bne	r4,zero,cf94 <___vfiprintf_internal_r+0x1444>
    c444:	a5000414 	ori	r20,r20,16
    c448:	a080080c 	andi	r2,r20,32
    c44c:	103fb51e 	bne	r2,zero,c324 <__alt_mem_onchip_memory+0xf780c324>
    c450:	a080040c 	andi	r2,r20,16
    c454:	1001f826 	beq	r2,zero,cc38 <___vfiprintf_internal_r+0x10e8>
    c458:	da802217 	ldw	r10,136(sp)
    c45c:	54800017 	ldw	r18,0(r10)
    c460:	52800104 	addi	r10,r10,4
    c464:	da802215 	stw	r10,136(sp)
    c468:	9027d7fa 	srai	r19,r18,31
    c46c:	9805883a 	mov	r2,r19
    c470:	003fb206 	br	c33c <__alt_mem_onchip_memory+0xf780c33c>
    c474:	21003fcc 	andi	r4,r4,255
    c478:	2002c41e 	bne	r4,zero,cf8c <___vfiprintf_internal_r+0x143c>
    c47c:	a5000414 	ori	r20,r20,16
    c480:	a080080c 	andi	r2,r20,32
    c484:	103f5f1e 	bne	r2,zero,c204 <__alt_mem_onchip_memory+0xf780c204>
    c488:	a080040c 	andi	r2,r20,16
    c48c:	10020f26 	beq	r2,zero,cccc <___vfiprintf_internal_r+0x117c>
    c490:	da802217 	ldw	r10,136(sp)
    c494:	d8001d85 	stb	zero,118(sp)
    c498:	0027883a 	mov	r19,zero
    c49c:	50800104 	addi	r2,r10,4
    c4a0:	54800017 	ldw	r18,0(r10)
    c4a4:	48021116 	blt	r9,zero,ccec <___vfiprintf_internal_r+0x119c>
    c4a8:	00ffdfc4 	movi	r3,-129
    c4ac:	d8802215 	stw	r2,136(sp)
    c4b0:	a0e8703a 	and	r20,r20,r3
    c4b4:	903f5e1e 	bne	r18,zero,c230 <__alt_mem_onchip_memory+0xf780c230>
    c4b8:	0039883a 	mov	fp,zero
    c4bc:	4802a626 	beq	r9,zero,cf58 <___vfiprintf_internal_r+0x1408>
    c4c0:	0025883a 	mov	r18,zero
    c4c4:	0027883a 	mov	r19,zero
    c4c8:	003f5a06 	br	c234 <__alt_mem_onchip_memory+0xf780c234>
    c4cc:	21003fcc 	andi	r4,r4,255
    c4d0:	20029f1e 	bne	r4,zero,cf50 <___vfiprintf_internal_r+0x1400>
    c4d4:	a5000414 	ori	r20,r20,16
    c4d8:	a080080c 	andi	r2,r20,32
    c4dc:	10005e1e 	bne	r2,zero,c658 <___vfiprintf_internal_r+0xb08>
    c4e0:	a080040c 	andi	r2,r20,16
    c4e4:	1001a21e 	bne	r2,zero,cb70 <___vfiprintf_internal_r+0x1020>
    c4e8:	a080100c 	andi	r2,r20,64
    c4ec:	d8001d85 	stb	zero,118(sp)
    c4f0:	da802217 	ldw	r10,136(sp)
    c4f4:	1002231e 	bne	r2,zero,cd84 <___vfiprintf_internal_r+0x1234>
    c4f8:	50800104 	addi	r2,r10,4
    c4fc:	54800017 	ldw	r18,0(r10)
    c500:	0027883a 	mov	r19,zero
    c504:	4801a00e 	bge	r9,zero,cb88 <___vfiprintf_internal_r+0x1038>
    c508:	d8802215 	stw	r2,136(sp)
    c50c:	0039883a 	mov	fp,zero
    c510:	94c4b03a 	or	r2,r18,r19
    c514:	103f901e 	bne	r2,zero,c358 <__alt_mem_onchip_memory+0xf780c358>
    c518:	00800044 	movi	r2,1
    c51c:	10803fcc 	andi	r2,r2,255
    c520:	00c00044 	movi	r3,1
    c524:	10c05926 	beq	r2,r3,c68c <___vfiprintf_internal_r+0xb3c>
    c528:	00c00084 	movi	r3,2
    c52c:	10ffe41e 	bne	r2,r3,c4c0 <__alt_mem_onchip_memory+0xf780c4c0>
    c530:	0025883a 	mov	r18,zero
    c534:	0027883a 	mov	r19,zero
    c538:	00013d06 	br	ca30 <___vfiprintf_internal_r+0xee0>
    c53c:	21003fcc 	andi	r4,r4,255
    c540:	2002811e 	bne	r4,zero,cf48 <___vfiprintf_internal_r+0x13f8>
    c544:	00800074 	movhi	r2,1
    c548:	10860e04 	addi	r2,r2,6200
    c54c:	d8802615 	stw	r2,152(sp)
    c550:	a080080c 	andi	r2,r20,32
    c554:	103f561e 	bne	r2,zero,c2b0 <__alt_mem_onchip_memory+0xf780c2b0>
    c558:	a080040c 	andi	r2,r20,16
    c55c:	1001d126 	beq	r2,zero,cca4 <___vfiprintf_internal_r+0x1154>
    c560:	da802217 	ldw	r10,136(sp)
    c564:	0027883a 	mov	r19,zero
    c568:	54800017 	ldw	r18,0(r10)
    c56c:	52800104 	addi	r10,r10,4
    c570:	da802215 	stw	r10,136(sp)
    c574:	003f5306 	br	c2c4 <__alt_mem_onchip_memory+0xf780c2c4>
    c578:	da802217 	ldw	r10,136(sp)
    c57c:	d8001d85 	stb	zero,118(sp)
    c580:	55400017 	ldw	r21,0(r10)
    c584:	50c00104 	addi	r3,r10,4
    c588:	a8024226 	beq	r21,zero,ce94 <___vfiprintf_internal_r+0x1344>
    c58c:	48021816 	blt	r9,zero,cdf0 <___vfiprintf_internal_r+0x12a0>
    c590:	480d883a 	mov	r6,r9
    c594:	000b883a 	mov	r5,zero
    c598:	a809883a 	mov	r4,r21
    c59c:	d8c02a15 	stw	r3,168(sp)
    c5a0:	da002b15 	stw	r8,172(sp)
    c5a4:	da402c15 	stw	r9,176(sp)
    c5a8:	0009c580 	call	9c58 <memchr>
    c5ac:	d8c02a17 	ldw	r3,168(sp)
    c5b0:	da002b17 	ldw	r8,172(sp)
    c5b4:	da402c17 	ldw	r9,176(sp)
    c5b8:	10024826 	beq	r2,zero,cedc <___vfiprintf_internal_r+0x138c>
    c5bc:	1567c83a 	sub	r19,r2,r21
    c5c0:	df001d83 	ldbu	fp,118(sp)
    c5c4:	d8c02215 	stw	r3,136(sp)
    c5c8:	0013883a 	mov	r9,zero
    c5cc:	003e6006 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    c5d0:	21003fcc 	andi	r4,r4,255
    c5d4:	203fc026 	beq	r4,zero,c4d8 <__alt_mem_onchip_memory+0xf780c4d8>
    c5d8:	d9c01d85 	stb	r7,118(sp)
    c5dc:	003fbe06 	br	c4d8 <__alt_mem_onchip_memory+0xf780c4d8>
    c5e0:	da802217 	ldw	r10,136(sp)
    c5e4:	54400017 	ldw	r17,0(r10)
    c5e8:	50800104 	addi	r2,r10,4
    c5ec:	883e3b16 	blt	r17,zero,bedc <__alt_mem_onchip_memory+0xf780bedc>
    c5f0:	d8802215 	stw	r2,136(sp)
    c5f4:	80c00007 	ldb	r3,0(r16)
    c5f8:	003db406 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c5fc:	01000044 	movi	r4,1
    c600:	01c00ac4 	movi	r7,43
    c604:	80c00007 	ldb	r3,0(r16)
    c608:	003db006 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c60c:	80c00007 	ldb	r3,0(r16)
    c610:	82800044 	addi	r10,r16,1
    c614:	1b423c26 	beq	r3,r13,cf08 <___vfiprintf_internal_r+0x13b8>
    c618:	18bff404 	addi	r2,r3,-48
    c61c:	0013883a 	mov	r9,zero
    c620:	30822b36 	bltu	r6,r2,ced0 <___vfiprintf_internal_r+0x1380>
    c624:	50c00007 	ldb	r3,0(r10)
    c628:	4a4002a4 	muli	r9,r9,10
    c62c:	54000044 	addi	r16,r10,1
    c630:	8015883a 	mov	r10,r16
    c634:	4893883a 	add	r9,r9,r2
    c638:	18bff404 	addi	r2,r3,-48
    c63c:	30bff92e 	bgeu	r6,r2,c624 <__alt_mem_onchip_memory+0xf780c624>
    c640:	483da30e 	bge	r9,zero,bcd0 <__alt_mem_onchip_memory+0xf780bcd0>
    c644:	027fffc4 	movi	r9,-1
    c648:	003da106 	br	bcd0 <__alt_mem_onchip_memory+0xf780bcd0>
    c64c:	a5001014 	ori	r20,r20,64
    c650:	80c00007 	ldb	r3,0(r16)
    c654:	003d9d06 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    c658:	da802217 	ldw	r10,136(sp)
    c65c:	d8001d85 	stb	zero,118(sp)
    c660:	50c00204 	addi	r3,r10,8
    c664:	54800017 	ldw	r18,0(r10)
    c668:	54c00117 	ldw	r19,4(r10)
    c66c:	4801ca16 	blt	r9,zero,cd98 <___vfiprintf_internal_r+0x1248>
    c670:	013fdfc4 	movi	r4,-129
    c674:	94c4b03a 	or	r2,r18,r19
    c678:	d8c02215 	stw	r3,136(sp)
    c67c:	a128703a 	and	r20,r20,r4
    c680:	0039883a 	mov	fp,zero
    c684:	103f341e 	bne	r2,zero,c358 <__alt_mem_onchip_memory+0xf780c358>
    c688:	483e2e26 	beq	r9,zero,bf44 <__alt_mem_onchip_memory+0xf780bf44>
    c68c:	0025883a 	mov	r18,zero
    c690:	94800c04 	addi	r18,r18,48
    c694:	dc8019c5 	stb	r18,103(sp)
    c698:	dcc02717 	ldw	r19,156(sp)
    c69c:	dd4019c4 	addi	r21,sp,103
    c6a0:	003e2b06 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    c6a4:	21003fcc 	andi	r4,r4,255
    c6a8:	2002361e 	bne	r4,zero,cf84 <___vfiprintf_internal_r+0x1434>
    c6ac:	1801c126 	beq	r3,zero,cdb4 <___vfiprintf_internal_r+0x1264>
    c6b0:	04800044 	movi	r18,1
    c6b4:	d8c01005 	stb	r3,64(sp)
    c6b8:	d8001d85 	stb	zero,118(sp)
    c6bc:	9027883a 	mov	r19,r18
    c6c0:	dd401004 	addi	r21,sp,64
    c6c4:	003f1106 	br	c30c <__alt_mem_onchip_memory+0xf780c30c>
    c6c8:	d9402117 	ldw	r5,132(sp)
    c6cc:	d9002017 	ldw	r4,128(sp)
    c6d0:	d9801a04 	addi	r6,sp,104
    c6d4:	d9c02b15 	stw	r7,172(sp)
    c6d8:	dbc02a15 	stw	r15,168(sp)
    c6dc:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    c6e0:	d9c02b17 	ldw	r7,172(sp)
    c6e4:	dbc02a17 	ldw	r15,168(sp)
    c6e8:	10006d1e 	bne	r2,zero,c8a0 <___vfiprintf_internal_r+0xd50>
    c6ec:	d9801b17 	ldw	r6,108(sp)
    c6f0:	d8801c17 	ldw	r2,112(sp)
    c6f4:	d811883a 	mov	r8,sp
    c6f8:	31400044 	addi	r5,r6,1
    c6fc:	003e3306 	br	bfcc <__alt_mem_onchip_memory+0xf780bfcc>
    c700:	d9401b17 	ldw	r5,108(sp)
    c704:	d8801c17 	ldw	r2,112(sp)
    c708:	29000044 	addi	r4,r5,1
    c70c:	d8c01d87 	ldb	r3,118(sp)
    c710:	183e4d26 	beq	r3,zero,c048 <__alt_mem_onchip_memory+0xf780c048>
    c714:	00c00044 	movi	r3,1
    c718:	d9401d84 	addi	r5,sp,118
    c71c:	10c5883a 	add	r2,r2,r3
    c720:	41400015 	stw	r5,0(r8)
    c724:	40c00115 	stw	r3,4(r8)
    c728:	d8801c15 	stw	r2,112(sp)
    c72c:	d9001b15 	stw	r4,108(sp)
    c730:	014001c4 	movi	r5,7
    c734:	2900a90e 	bge	r5,r4,c9dc <___vfiprintf_internal_r+0xe8c>
    c738:	1000da1e 	bne	r2,zero,caa4 <___vfiprintf_internal_r+0xf54>
    c73c:	7000ab1e 	bne	r14,zero,c9ec <___vfiprintf_internal_r+0xe9c>
    c740:	000b883a 	mov	r5,zero
    c744:	1809883a 	mov	r4,r3
    c748:	d811883a 	mov	r8,sp
    c74c:	00c02004 	movi	r3,128
    c750:	e0fe4d26 	beq	fp,r3,c088 <__alt_mem_onchip_memory+0xf780c088>
    c754:	4cf9c83a 	sub	fp,r9,r19
    c758:	073e7b0e 	bge	zero,fp,c148 <__alt_mem_onchip_memory+0xf780c148>
    c75c:	01c00404 	movi	r7,16
    c760:	3f01900e 	bge	r7,fp,cda4 <___vfiprintf_internal_r+0x1254>
    c764:	00c00074 	movhi	r3,1
    c768:	18c67304 	addi	r3,r3,6604
    c76c:	d8c02415 	stw	r3,144(sp)
    c770:	034001c4 	movi	r13,7
    c774:	00000506 	br	c78c <___vfiprintf_internal_r+0xc3c>
    c778:	29000084 	addi	r4,r5,2
    c77c:	42000204 	addi	r8,r8,8
    c780:	180b883a 	mov	r5,r3
    c784:	e73ffc04 	addi	fp,fp,-16
    c788:	3f000d0e 	bge	r7,fp,c7c0 <___vfiprintf_internal_r+0xc70>
    c78c:	10800404 	addi	r2,r2,16
    c790:	28c00044 	addi	r3,r5,1
    c794:	45c00015 	stw	r23,0(r8)
    c798:	41c00115 	stw	r7,4(r8)
    c79c:	d8801c15 	stw	r2,112(sp)
    c7a0:	d8c01b15 	stw	r3,108(sp)
    c7a4:	68fff40e 	bge	r13,r3,c778 <__alt_mem_onchip_memory+0xf780c778>
    c7a8:	1000101e 	bne	r2,zero,c7ec <___vfiprintf_internal_r+0xc9c>
    c7ac:	e73ffc04 	addi	fp,fp,-16
    c7b0:	01000044 	movi	r4,1
    c7b4:	000b883a 	mov	r5,zero
    c7b8:	d811883a 	mov	r8,sp
    c7bc:	3f3ff316 	blt	r7,fp,c78c <__alt_mem_onchip_memory+0xf780c78c>
    c7c0:	da802417 	ldw	r10,144(sp)
    c7c4:	1705883a 	add	r2,r2,fp
    c7c8:	47000115 	stw	fp,4(r8)
    c7cc:	42800015 	stw	r10,0(r8)
    c7d0:	d8801c15 	stw	r2,112(sp)
    c7d4:	d9001b15 	stw	r4,108(sp)
    c7d8:	00c001c4 	movi	r3,7
    c7dc:	19003616 	blt	r3,r4,c8b8 <___vfiprintf_internal_r+0xd68>
    c7e0:	42000204 	addi	r8,r8,8
    c7e4:	21000044 	addi	r4,r4,1
    c7e8:	003e5706 	br	c148 <__alt_mem_onchip_memory+0xf780c148>
    c7ec:	d9402117 	ldw	r5,132(sp)
    c7f0:	d9002017 	ldw	r4,128(sp)
    c7f4:	d9801a04 	addi	r6,sp,104
    c7f8:	d9c02b15 	stw	r7,172(sp)
    c7fc:	db402a15 	stw	r13,168(sp)
    c800:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    c804:	d9c02b17 	ldw	r7,172(sp)
    c808:	db402a17 	ldw	r13,168(sp)
    c80c:	1000241e 	bne	r2,zero,c8a0 <___vfiprintf_internal_r+0xd50>
    c810:	d9401b17 	ldw	r5,108(sp)
    c814:	d8801c17 	ldw	r2,112(sp)
    c818:	d811883a 	mov	r8,sp
    c81c:	29000044 	addi	r4,r5,1
    c820:	003fd806 	br	c784 <__alt_mem_onchip_memory+0xf780c784>
    c824:	d9401b17 	ldw	r5,108(sp)
    c828:	00c00074 	movhi	r3,1
    c82c:	18c67704 	addi	r3,r3,6620
    c830:	d8c02415 	stw	r3,144(sp)
    c834:	29400044 	addi	r5,r5,1
    c838:	d8c02417 	ldw	r3,144(sp)
    c83c:	14c5883a 	add	r2,r2,r19
    c840:	44c00115 	stw	r19,4(r8)
    c844:	40c00015 	stw	r3,0(r8)
    c848:	d8801c15 	stw	r2,112(sp)
    c84c:	d9401b15 	stw	r5,108(sp)
    c850:	00c001c4 	movi	r3,7
    c854:	1940070e 	bge	r3,r5,c874 <___vfiprintf_internal_r+0xd24>
    c858:	103e4826 	beq	r2,zero,c17c <__alt_mem_onchip_memory+0xf780c17c>
    c85c:	d9402117 	ldw	r5,132(sp)
    c860:	d9002017 	ldw	r4,128(sp)
    c864:	d9801a04 	addi	r6,sp,104
    c868:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    c86c:	10000c1e 	bne	r2,zero,c8a0 <___vfiprintf_internal_r+0xd50>
    c870:	d8801c17 	ldw	r2,112(sp)
    c874:	8c80010e 	bge	r17,r18,c87c <___vfiprintf_internal_r+0xd2c>
    c878:	9023883a 	mov	r17,r18
    c87c:	da802317 	ldw	r10,140(sp)
    c880:	5455883a 	add	r10,r10,r17
    c884:	da802315 	stw	r10,140(sp)
    c888:	103e4126 	beq	r2,zero,c190 <__alt_mem_onchip_memory+0xf780c190>
    c88c:	d9402117 	ldw	r5,132(sp)
    c890:	d9002017 	ldw	r4,128(sp)
    c894:	d9801a04 	addi	r6,sp,104
    c898:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    c89c:	103e3c26 	beq	r2,zero,c190 <__alt_mem_onchip_memory+0xf780c190>
    c8a0:	dd002117 	ldw	r20,132(sp)
    c8a4:	a080030b 	ldhu	r2,12(r20)
    c8a8:	1080100c 	andi	r2,r2,64
    c8ac:	1001231e 	bne	r2,zero,cd3c <___vfiprintf_internal_r+0x11ec>
    c8b0:	d8802317 	ldw	r2,140(sp)
    c8b4:	003d7b06 	br	bea4 <__alt_mem_onchip_memory+0xf780bea4>
    c8b8:	1000991e 	bne	r2,zero,cb20 <___vfiprintf_internal_r+0xfd0>
    c8bc:	00c00044 	movi	r3,1
    c8c0:	9805883a 	mov	r2,r19
    c8c4:	dd400015 	stw	r21,0(sp)
    c8c8:	dcc00115 	stw	r19,4(sp)
    c8cc:	dcc01c15 	stw	r19,112(sp)
    c8d0:	d8c01b15 	stw	r3,108(sp)
    c8d4:	d811883a 	mov	r8,sp
    c8d8:	42000204 	addi	r8,r8,8
    c8dc:	a2c0010c 	andi	r11,r20,4
    c8e0:	583fe426 	beq	r11,zero,c874 <__alt_mem_onchip_memory+0xf780c874>
    c8e4:	8ca7c83a 	sub	r19,r17,r18
    c8e8:	04ffe20e 	bge	zero,r19,c874 <__alt_mem_onchip_memory+0xf780c874>
    c8ec:	01c00404 	movi	r7,16
    c8f0:	3cffcc0e 	bge	r7,r19,c824 <__alt_mem_onchip_memory+0xf780c824>
    c8f4:	02800074 	movhi	r10,1
    c8f8:	52867704 	addi	r10,r10,6620
    c8fc:	d9001b17 	ldw	r4,108(sp)
    c900:	da802415 	stw	r10,144(sp)
    c904:	382b883a 	mov	r21,r7
    c908:	050001c4 	movi	r20,7
    c90c:	df002017 	ldw	fp,128(sp)
    c910:	00000506 	br	c928 <___vfiprintf_internal_r+0xdd8>
    c914:	21400084 	addi	r5,r4,2
    c918:	42000204 	addi	r8,r8,8
    c91c:	1809883a 	mov	r4,r3
    c920:	9cfffc04 	addi	r19,r19,-16
    c924:	acffc40e 	bge	r21,r19,c838 <__alt_mem_onchip_memory+0xf780c838>
    c928:	10800404 	addi	r2,r2,16
    c92c:	20c00044 	addi	r3,r4,1
    c930:	45800015 	stw	r22,0(r8)
    c934:	45400115 	stw	r21,4(r8)
    c938:	d8801c15 	stw	r2,112(sp)
    c93c:	d8c01b15 	stw	r3,108(sp)
    c940:	a0fff40e 	bge	r20,r3,c914 <__alt_mem_onchip_memory+0xf780c914>
    c944:	1000041e 	bne	r2,zero,c958 <___vfiprintf_internal_r+0xe08>
    c948:	01400044 	movi	r5,1
    c94c:	0009883a 	mov	r4,zero
    c950:	d811883a 	mov	r8,sp
    c954:	003ff206 	br	c920 <__alt_mem_onchip_memory+0xf780c920>
    c958:	d9402117 	ldw	r5,132(sp)
    c95c:	d9801a04 	addi	r6,sp,104
    c960:	e009883a 	mov	r4,fp
    c964:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    c968:	103fcd1e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    c96c:	d9001b17 	ldw	r4,108(sp)
    c970:	d8801c17 	ldw	r2,112(sp)
    c974:	d811883a 	mov	r8,sp
    c978:	21400044 	addi	r5,r4,1
    c97c:	003fe806 	br	c920 <__alt_mem_onchip_memory+0xf780c920>
    c980:	d9402117 	ldw	r5,132(sp)
    c984:	d9002017 	ldw	r4,128(sp)
    c988:	d9801a04 	addi	r6,sp,104
    c98c:	d9c02b15 	stw	r7,172(sp)
    c990:	db402a15 	stw	r13,168(sp)
    c994:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    c998:	d9c02b17 	ldw	r7,172(sp)
    c99c:	db402a17 	ldw	r13,168(sp)
    c9a0:	103fbf1e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    c9a4:	d9401b17 	ldw	r5,108(sp)
    c9a8:	d8801c17 	ldw	r2,112(sp)
    c9ac:	d811883a 	mov	r8,sp
    c9b0:	29800044 	addi	r6,r5,1
    c9b4:	003dc406 	br	c0c8 <__alt_mem_onchip_memory+0xf780c0c8>
    c9b8:	1000d21e 	bne	r2,zero,cd04 <___vfiprintf_internal_r+0x11b4>
    c9bc:	d8c01d87 	ldb	r3,118(sp)
    c9c0:	18009526 	beq	r3,zero,cc18 <___vfiprintf_internal_r+0x10c8>
    c9c4:	00800044 	movi	r2,1
    c9c8:	d8c01d84 	addi	r3,sp,118
    c9cc:	1009883a 	mov	r4,r2
    c9d0:	d8c00015 	stw	r3,0(sp)
    c9d4:	d8800115 	stw	r2,4(sp)
    c9d8:	d811883a 	mov	r8,sp
    c9dc:	200b883a 	mov	r5,r4
    c9e0:	42000204 	addi	r8,r8,8
    c9e4:	21000044 	addi	r4,r4,1
    c9e8:	003d9706 	br	c048 <__alt_mem_onchip_memory+0xf780c048>
    c9ec:	d9001d04 	addi	r4,sp,116
    c9f0:	00800084 	movi	r2,2
    c9f4:	d9000015 	stw	r4,0(sp)
    c9f8:	d8800115 	stw	r2,4(sp)
    c9fc:	1809883a 	mov	r4,r3
    ca00:	d811883a 	mov	r8,sp
    ca04:	200b883a 	mov	r5,r4
    ca08:	42000204 	addi	r8,r8,8
    ca0c:	21000044 	addi	r4,r4,1
    ca10:	003f4e06 	br	c74c <__alt_mem_onchip_memory+0xf780c74c>
    ca14:	d8001d85 	stb	zero,118(sp)
    ca18:	48005016 	blt	r9,zero,cb5c <___vfiprintf_internal_r+0x100c>
    ca1c:	00ffdfc4 	movi	r3,-129
    ca20:	94c4b03a 	or	r2,r18,r19
    ca24:	a0e8703a 	and	r20,r20,r3
    ca28:	103d4426 	beq	r2,zero,bf3c <__alt_mem_onchip_memory+0xf780bf3c>
    ca2c:	0039883a 	mov	fp,zero
    ca30:	d9002617 	ldw	r4,152(sp)
    ca34:	dd401a04 	addi	r21,sp,104
    ca38:	908003cc 	andi	r2,r18,15
    ca3c:	9806973a 	slli	r3,r19,28
    ca40:	2085883a 	add	r2,r4,r2
    ca44:	9024d13a 	srli	r18,r18,4
    ca48:	10800003 	ldbu	r2,0(r2)
    ca4c:	9826d13a 	srli	r19,r19,4
    ca50:	ad7fffc4 	addi	r21,r21,-1
    ca54:	1ca4b03a 	or	r18,r3,r18
    ca58:	a8800005 	stb	r2,0(r21)
    ca5c:	94c4b03a 	or	r2,r18,r19
    ca60:	103ff51e 	bne	r2,zero,ca38 <__alt_mem_onchip_memory+0xf780ca38>
    ca64:	003e5906 	br	c3cc <__alt_mem_onchip_memory+0xf780c3cc>
    ca68:	d9402117 	ldw	r5,132(sp)
    ca6c:	d9002017 	ldw	r4,128(sp)
    ca70:	d9801a04 	addi	r6,sp,104
    ca74:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    ca78:	103f891e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    ca7c:	d8801c17 	ldw	r2,112(sp)
    ca80:	d811883a 	mov	r8,sp
    ca84:	003f9506 	br	c8dc <__alt_mem_onchip_memory+0xf780c8dc>
    ca88:	d9402117 	ldw	r5,132(sp)
    ca8c:	d9002017 	ldw	r4,128(sp)
    ca90:	d9801a04 	addi	r6,sp,104
    ca94:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    ca98:	103f811e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    ca9c:	d811883a 	mov	r8,sp
    caa0:	003ced06 	br	be58 <__alt_mem_onchip_memory+0xf780be58>
    caa4:	d9402117 	ldw	r5,132(sp)
    caa8:	d9002017 	ldw	r4,128(sp)
    caac:	d9801a04 	addi	r6,sp,104
    cab0:	da402c15 	stw	r9,176(sp)
    cab4:	db802a15 	stw	r14,168(sp)
    cab8:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    cabc:	da402c17 	ldw	r9,176(sp)
    cac0:	db802a17 	ldw	r14,168(sp)
    cac4:	103f761e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    cac8:	d9401b17 	ldw	r5,108(sp)
    cacc:	d8801c17 	ldw	r2,112(sp)
    cad0:	d811883a 	mov	r8,sp
    cad4:	29000044 	addi	r4,r5,1
    cad8:	003d5b06 	br	c048 <__alt_mem_onchip_memory+0xf780c048>
    cadc:	d9402117 	ldw	r5,132(sp)
    cae0:	d9002017 	ldw	r4,128(sp)
    cae4:	d9801a04 	addi	r6,sp,104
    cae8:	da402c15 	stw	r9,176(sp)
    caec:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    caf0:	da402c17 	ldw	r9,176(sp)
    caf4:	103f6a1e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    caf8:	d9401b17 	ldw	r5,108(sp)
    cafc:	d8801c17 	ldw	r2,112(sp)
    cb00:	d811883a 	mov	r8,sp
    cb04:	29000044 	addi	r4,r5,1
    cb08:	003f1006 	br	c74c <__alt_mem_onchip_memory+0xf780c74c>
    cb0c:	1000c31e 	bne	r2,zero,ce1c <___vfiprintf_internal_r+0x12cc>
    cb10:	01000044 	movi	r4,1
    cb14:	000b883a 	mov	r5,zero
    cb18:	d811883a 	mov	r8,sp
    cb1c:	003f0d06 	br	c754 <__alt_mem_onchip_memory+0xf780c754>
    cb20:	d9402117 	ldw	r5,132(sp)
    cb24:	d9002017 	ldw	r4,128(sp)
    cb28:	d9801a04 	addi	r6,sp,104
    cb2c:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    cb30:	103f5b1e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    cb34:	d9001b17 	ldw	r4,108(sp)
    cb38:	d8801c17 	ldw	r2,112(sp)
    cb3c:	d811883a 	mov	r8,sp
    cb40:	21000044 	addi	r4,r4,1
    cb44:	003d8006 	br	c148 <__alt_mem_onchip_memory+0xf780c148>
    cb48:	01000074 	movhi	r4,1
    cb4c:	21061304 	addi	r4,r4,6220
    cb50:	d9002615 	stw	r4,152(sp)
    cb54:	d8c02215 	stw	r3,136(sp)
    cb58:	1029883a 	mov	r20,r2
    cb5c:	94c4b03a 	or	r2,r18,r19
    cb60:	103fb21e 	bne	r2,zero,ca2c <__alt_mem_onchip_memory+0xf780ca2c>
    cb64:	0039883a 	mov	fp,zero
    cb68:	00800084 	movi	r2,2
    cb6c:	003e6b06 	br	c51c <__alt_mem_onchip_memory+0xf780c51c>
    cb70:	da802217 	ldw	r10,136(sp)
    cb74:	d8001d85 	stb	zero,118(sp)
    cb78:	0027883a 	mov	r19,zero
    cb7c:	50800104 	addi	r2,r10,4
    cb80:	54800017 	ldw	r18,0(r10)
    cb84:	483e6016 	blt	r9,zero,c508 <__alt_mem_onchip_memory+0xf780c508>
    cb88:	00ffdfc4 	movi	r3,-129
    cb8c:	d8802215 	stw	r2,136(sp)
    cb90:	a0e8703a 	and	r20,r20,r3
    cb94:	0039883a 	mov	fp,zero
    cb98:	903ebb26 	beq	r18,zero,c688 <__alt_mem_onchip_memory+0xf780c688>
    cb9c:	00800244 	movi	r2,9
    cba0:	14bdee36 	bltu	r2,r18,c35c <__alt_mem_onchip_memory+0xf780c35c>
    cba4:	003eba06 	br	c690 <__alt_mem_onchip_memory+0xf780c690>
    cba8:	00800c04 	movi	r2,48
    cbac:	d8c01d45 	stb	r3,117(sp)
    cbb0:	d8801d05 	stb	r2,116(sp)
    cbb4:	d8001d85 	stb	zero,118(sp)
    cbb8:	a0c00094 	ori	r3,r20,2
    cbbc:	4800a916 	blt	r9,zero,ce64 <___vfiprintf_internal_r+0x1314>
    cbc0:	00bfdfc4 	movi	r2,-129
    cbc4:	a096703a 	and	r11,r20,r2
    cbc8:	5d000094 	ori	r20,r11,2
    cbcc:	0039883a 	mov	fp,zero
    cbd0:	003f9706 	br	ca30 <__alt_mem_onchip_memory+0xf780ca30>
    cbd4:	8025883a 	mov	r18,r16
    cbd8:	003c2e06 	br	bc94 <__alt_mem_onchip_memory+0xf780bc94>
    cbdc:	00800074 	movhi	r2,1
    cbe0:	10861304 	addi	r2,r2,6220
    cbe4:	0039883a 	mov	fp,zero
    cbe8:	d8802615 	stw	r2,152(sp)
    cbec:	003f9006 	br	ca30 <__alt_mem_onchip_memory+0xf780ca30>
    cbf0:	04a5c83a 	sub	r18,zero,r18
    cbf4:	07000b44 	movi	fp,45
    cbf8:	9004c03a 	cmpne	r2,r18,zero
    cbfc:	04e7c83a 	sub	r19,zero,r19
    cc00:	df001d85 	stb	fp,118(sp)
    cc04:	98a7c83a 	sub	r19,r19,r2
    cc08:	48009f16 	blt	r9,zero,ce88 <___vfiprintf_internal_r+0x1338>
    cc0c:	00bfdfc4 	movi	r2,-129
    cc10:	a0a8703a 	and	r20,r20,r2
    cc14:	003dd006 	br	c358 <__alt_mem_onchip_memory+0xf780c358>
    cc18:	70004c26 	beq	r14,zero,cd4c <___vfiprintf_internal_r+0x11fc>
    cc1c:	00800084 	movi	r2,2
    cc20:	d8c01d04 	addi	r3,sp,116
    cc24:	d8c00015 	stw	r3,0(sp)
    cc28:	d8800115 	stw	r2,4(sp)
    cc2c:	01000044 	movi	r4,1
    cc30:	d811883a 	mov	r8,sp
    cc34:	003f7306 	br	ca04 <__alt_mem_onchip_memory+0xf780ca04>
    cc38:	a080100c 	andi	r2,r20,64
    cc3c:	da802217 	ldw	r10,136(sp)
    cc40:	103e0626 	beq	r2,zero,c45c <__alt_mem_onchip_memory+0xf780c45c>
    cc44:	5480000f 	ldh	r18,0(r10)
    cc48:	52800104 	addi	r10,r10,4
    cc4c:	da802215 	stw	r10,136(sp)
    cc50:	9027d7fa 	srai	r19,r18,31
    cc54:	9805883a 	mov	r2,r19
    cc58:	003db806 	br	c33c <__alt_mem_onchip_memory+0xf780c33c>
    cc5c:	a080040c 	andi	r2,r20,16
    cc60:	1000091e 	bne	r2,zero,cc88 <___vfiprintf_internal_r+0x1138>
    cc64:	a2c0100c 	andi	r11,r20,64
    cc68:	58000726 	beq	r11,zero,cc88 <___vfiprintf_internal_r+0x1138>
    cc6c:	da802217 	ldw	r10,136(sp)
    cc70:	50800017 	ldw	r2,0(r10)
    cc74:	52800104 	addi	r10,r10,4
    cc78:	da802215 	stw	r10,136(sp)
    cc7c:	da802317 	ldw	r10,140(sp)
    cc80:	1280000d 	sth	r10,0(r2)
    cc84:	003be706 	br	bc24 <__alt_mem_onchip_memory+0xf780bc24>
    cc88:	da802217 	ldw	r10,136(sp)
    cc8c:	50800017 	ldw	r2,0(r10)
    cc90:	52800104 	addi	r10,r10,4
    cc94:	da802215 	stw	r10,136(sp)
    cc98:	da802317 	ldw	r10,140(sp)
    cc9c:	12800015 	stw	r10,0(r2)
    cca0:	003be006 	br	bc24 <__alt_mem_onchip_memory+0xf780bc24>
    cca4:	a080100c 	andi	r2,r20,64
    cca8:	da802217 	ldw	r10,136(sp)
    ccac:	10003026 	beq	r2,zero,cd70 <___vfiprintf_internal_r+0x1220>
    ccb0:	5480000b 	ldhu	r18,0(r10)
    ccb4:	52800104 	addi	r10,r10,4
    ccb8:	0027883a 	mov	r19,zero
    ccbc:	da802215 	stw	r10,136(sp)
    ccc0:	003d8006 	br	c2c4 <__alt_mem_onchip_memory+0xf780c2c4>
    ccc4:	80c00007 	ldb	r3,0(r16)
    ccc8:	003c0006 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    cccc:	a080100c 	andi	r2,r20,64
    ccd0:	d8001d85 	stb	zero,118(sp)
    ccd4:	da802217 	ldw	r10,136(sp)
    ccd8:	1000201e 	bne	r2,zero,cd5c <___vfiprintf_internal_r+0x120c>
    ccdc:	50800104 	addi	r2,r10,4
    cce0:	54800017 	ldw	r18,0(r10)
    cce4:	0027883a 	mov	r19,zero
    cce8:	483def0e 	bge	r9,zero,c4a8 <__alt_mem_onchip_memory+0xf780c4a8>
    ccec:	94c6b03a 	or	r3,r18,r19
    ccf0:	d8802215 	stw	r2,136(sp)
    ccf4:	183d4e1e 	bne	r3,zero,c230 <__alt_mem_onchip_memory+0xf780c230>
    ccf8:	0039883a 	mov	fp,zero
    ccfc:	0005883a 	mov	r2,zero
    cd00:	003e0606 	br	c51c <__alt_mem_onchip_memory+0xf780c51c>
    cd04:	d9402117 	ldw	r5,132(sp)
    cd08:	d9002017 	ldw	r4,128(sp)
    cd0c:	d9801a04 	addi	r6,sp,104
    cd10:	da402c15 	stw	r9,176(sp)
    cd14:	db802a15 	stw	r14,168(sp)
    cd18:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    cd1c:	da402c17 	ldw	r9,176(sp)
    cd20:	db802a17 	ldw	r14,168(sp)
    cd24:	103ede1e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    cd28:	d9401b17 	ldw	r5,108(sp)
    cd2c:	d8801c17 	ldw	r2,112(sp)
    cd30:	d811883a 	mov	r8,sp
    cd34:	29000044 	addi	r4,r5,1
    cd38:	003e7406 	br	c70c <__alt_mem_onchip_memory+0xf780c70c>
    cd3c:	00bfffc4 	movi	r2,-1
    cd40:	003c5806 	br	bea4 <__alt_mem_onchip_memory+0xf780bea4>
    cd44:	d811883a 	mov	r8,sp
    cd48:	003ee806 	br	c8ec <__alt_mem_onchip_memory+0xf780c8ec>
    cd4c:	000b883a 	mov	r5,zero
    cd50:	01000044 	movi	r4,1
    cd54:	d811883a 	mov	r8,sp
    cd58:	003e7c06 	br	c74c <__alt_mem_onchip_memory+0xf780c74c>
    cd5c:	50800104 	addi	r2,r10,4
    cd60:	5480000b 	ldhu	r18,0(r10)
    cd64:	0027883a 	mov	r19,zero
    cd68:	483dcf0e 	bge	r9,zero,c4a8 <__alt_mem_onchip_memory+0xf780c4a8>
    cd6c:	003fdf06 	br	ccec <__alt_mem_onchip_memory+0xf780ccec>
    cd70:	54800017 	ldw	r18,0(r10)
    cd74:	52800104 	addi	r10,r10,4
    cd78:	0027883a 	mov	r19,zero
    cd7c:	da802215 	stw	r10,136(sp)
    cd80:	003d5006 	br	c2c4 <__alt_mem_onchip_memory+0xf780c2c4>
    cd84:	50800104 	addi	r2,r10,4
    cd88:	5480000b 	ldhu	r18,0(r10)
    cd8c:	0027883a 	mov	r19,zero
    cd90:	483f7d0e 	bge	r9,zero,cb88 <__alt_mem_onchip_memory+0xf780cb88>
    cd94:	003ddc06 	br	c508 <__alt_mem_onchip_memory+0xf780c508>
    cd98:	d8c02215 	stw	r3,136(sp)
    cd9c:	0039883a 	mov	fp,zero
    cda0:	003ddb06 	br	c510 <__alt_mem_onchip_memory+0xf780c510>
    cda4:	02800074 	movhi	r10,1
    cda8:	52867304 	addi	r10,r10,6604
    cdac:	da802415 	stw	r10,144(sp)
    cdb0:	003e8306 	br	c7c0 <__alt_mem_onchip_memory+0xf780c7c0>
    cdb4:	d8801c17 	ldw	r2,112(sp)
    cdb8:	dd002117 	ldw	r20,132(sp)
    cdbc:	103eb926 	beq	r2,zero,c8a4 <__alt_mem_onchip_memory+0xf780c8a4>
    cdc0:	d9002017 	ldw	r4,128(sp)
    cdc4:	d9801a04 	addi	r6,sp,104
    cdc8:	a00b883a 	mov	r5,r20
    cdcc:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    cdd0:	003eb406 	br	c8a4 <__alt_mem_onchip_memory+0xf780c8a4>
    cdd4:	80c00043 	ldbu	r3,1(r16)
    cdd8:	a5000814 	ori	r20,r20,32
    cddc:	84000044 	addi	r16,r16,1
    cde0:	18c03fcc 	andi	r3,r3,255
    cde4:	18c0201c 	xori	r3,r3,128
    cde8:	18ffe004 	addi	r3,r3,-128
    cdec:	003bb706 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    cdf0:	a809883a 	mov	r4,r21
    cdf4:	d8c02a15 	stw	r3,168(sp)
    cdf8:	da002b15 	stw	r8,172(sp)
    cdfc:	00042a40 	call	42a4 <strlen>
    ce00:	d8c02a17 	ldw	r3,168(sp)
    ce04:	1027883a 	mov	r19,r2
    ce08:	df001d83 	ldbu	fp,118(sp)
    ce0c:	d8c02215 	stw	r3,136(sp)
    ce10:	0013883a 	mov	r9,zero
    ce14:	da002b17 	ldw	r8,172(sp)
    ce18:	003c4d06 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    ce1c:	d9402117 	ldw	r5,132(sp)
    ce20:	d9002017 	ldw	r4,128(sp)
    ce24:	d9801a04 	addi	r6,sp,104
    ce28:	da402c15 	stw	r9,176(sp)
    ce2c:	000ba3c0 	call	ba3c <__sprint_r.part.0>
    ce30:	da402c17 	ldw	r9,176(sp)
    ce34:	103e9a1e 	bne	r2,zero,c8a0 <__alt_mem_onchip_memory+0xf780c8a0>
    ce38:	d9401b17 	ldw	r5,108(sp)
    ce3c:	d8801c17 	ldw	r2,112(sp)
    ce40:	d811883a 	mov	r8,sp
    ce44:	29000044 	addi	r4,r5,1
    ce48:	003e4206 	br	c754 <__alt_mem_onchip_memory+0xf780c754>
    ce4c:	d9401b17 	ldw	r5,108(sp)
    ce50:	01000074 	movhi	r4,1
    ce54:	21067704 	addi	r4,r4,6620
    ce58:	d9002415 	stw	r4,144(sp)
    ce5c:	29400044 	addi	r5,r5,1
    ce60:	003c6d06 	br	c018 <__alt_mem_onchip_memory+0xf780c018>
    ce64:	0039883a 	mov	fp,zero
    ce68:	00800084 	movi	r2,2
    ce6c:	10803fcc 	andi	r2,r2,255
    ce70:	01000044 	movi	r4,1
    ce74:	11001e26 	beq	r2,r4,cef0 <___vfiprintf_internal_r+0x13a0>
    ce78:	01000084 	movi	r4,2
    ce7c:	11001e1e 	bne	r2,r4,cef8 <___vfiprintf_internal_r+0x13a8>
    ce80:	1829883a 	mov	r20,r3
    ce84:	003eea06 	br	ca30 <__alt_mem_onchip_memory+0xf780ca30>
    ce88:	a007883a 	mov	r3,r20
    ce8c:	00800044 	movi	r2,1
    ce90:	003ff606 	br	ce6c <__alt_mem_onchip_memory+0xf780ce6c>
    ce94:	00800184 	movi	r2,6
    ce98:	1240012e 	bgeu	r2,r9,cea0 <___vfiprintf_internal_r+0x1350>
    ce9c:	1013883a 	mov	r9,r2
    cea0:	4827883a 	mov	r19,r9
    cea4:	4825883a 	mov	r18,r9
    cea8:	48001516 	blt	r9,zero,cf00 <___vfiprintf_internal_r+0x13b0>
    ceac:	05400074 	movhi	r21,1
    ceb0:	d8c02215 	stw	r3,136(sp)
    ceb4:	ad461804 	addi	r21,r21,6240
    ceb8:	003d1406 	br	c30c <__alt_mem_onchip_memory+0xf780c30c>
    cebc:	02800074 	movhi	r10,1
    cec0:	52867304 	addi	r10,r10,6604
    cec4:	da802415 	stw	r10,144(sp)
    cec8:	200d883a 	mov	r6,r4
    cecc:	003c9106 	br	c114 <__alt_mem_onchip_memory+0xf780c114>
    ced0:	5021883a 	mov	r16,r10
    ced4:	0013883a 	mov	r9,zero
    ced8:	003b7d06 	br	bcd0 <__alt_mem_onchip_memory+0xf780bcd0>
    cedc:	4827883a 	mov	r19,r9
    cee0:	df001d83 	ldbu	fp,118(sp)
    cee4:	d8c02215 	stw	r3,136(sp)
    cee8:	0013883a 	mov	r9,zero
    ceec:	003c1806 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    cef0:	1829883a 	mov	r20,r3
    cef4:	003d1806 	br	c358 <__alt_mem_onchip_memory+0xf780c358>
    cef8:	1829883a 	mov	r20,r3
    cefc:	003ccd06 	br	c234 <__alt_mem_onchip_memory+0xf780c234>
    cf00:	0025883a 	mov	r18,zero
    cf04:	003fe906 	br	ceac <__alt_mem_onchip_memory+0xf780ceac>
    cf08:	d8802217 	ldw	r2,136(sp)
    cf0c:	80c00043 	ldbu	r3,1(r16)
    cf10:	5021883a 	mov	r16,r10
    cf14:	12400017 	ldw	r9,0(r2)
    cf18:	10800104 	addi	r2,r2,4
    cf1c:	d8802215 	stw	r2,136(sp)
    cf20:	483faf0e 	bge	r9,zero,cde0 <__alt_mem_onchip_memory+0xf780cde0>
    cf24:	18c03fcc 	andi	r3,r3,255
    cf28:	18c0201c 	xori	r3,r3,128
    cf2c:	027fffc4 	movi	r9,-1
    cf30:	18ffe004 	addi	r3,r3,-128
    cf34:	003b6506 	br	bccc <__alt_mem_onchip_memory+0xf780bccc>
    cf38:	d9c01d85 	stb	r7,118(sp)
    cf3c:	003ca006 	br	c1c0 <__alt_mem_onchip_memory+0xf780c1c0>
    cf40:	d9c01d85 	stb	r7,118(sp)
    cf44:	003cad06 	br	c1fc <__alt_mem_onchip_memory+0xf780c1fc>
    cf48:	d9c01d85 	stb	r7,118(sp)
    cf4c:	003d7d06 	br	c544 <__alt_mem_onchip_memory+0xf780c544>
    cf50:	d9c01d85 	stb	r7,118(sp)
    cf54:	003d5f06 	br	c4d4 <__alt_mem_onchip_memory+0xf780c4d4>
    cf58:	a080004c 	andi	r2,r20,1
    cf5c:	0039883a 	mov	fp,zero
    cf60:	10000526 	beq	r2,zero,cf78 <___vfiprintf_internal_r+0x1428>
    cf64:	00800c04 	movi	r2,48
    cf68:	d88019c5 	stb	r2,103(sp)
    cf6c:	dcc02717 	ldw	r19,156(sp)
    cf70:	dd4019c4 	addi	r21,sp,103
    cf74:	003bf606 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    cf78:	0027883a 	mov	r19,zero
    cf7c:	dd401a04 	addi	r21,sp,104
    cf80:	003bf306 	br	bf50 <__alt_mem_onchip_memory+0xf780bf50>
    cf84:	d9c01d85 	stb	r7,118(sp)
    cf88:	003dc806 	br	c6ac <__alt_mem_onchip_memory+0xf780c6ac>
    cf8c:	d9c01d85 	stb	r7,118(sp)
    cf90:	003d3a06 	br	c47c <__alt_mem_onchip_memory+0xf780c47c>
    cf94:	d9c01d85 	stb	r7,118(sp)
    cf98:	003d2a06 	br	c444 <__alt_mem_onchip_memory+0xf780c444>
    cf9c:	d9c01d85 	stb	r7,118(sp)
    cfa0:	003cde06 	br	c31c <__alt_mem_onchip_memory+0xf780c31c>
    cfa4:	d9c01d85 	stb	r7,118(sp)
    cfa8:	003cbc06 	br	c29c <__alt_mem_onchip_memory+0xf780c29c>

0000cfac <__vfiprintf_internal>:
    cfac:	00800074 	movhi	r2,1
    cfb0:	108d7704 	addi	r2,r2,13788
    cfb4:	300f883a 	mov	r7,r6
    cfb8:	280d883a 	mov	r6,r5
    cfbc:	200b883a 	mov	r5,r4
    cfc0:	11000017 	ldw	r4,0(r2)
    cfc4:	000bb501 	jmpi	bb50 <___vfiprintf_internal_r>

0000cfc8 <__sbprintf>:
    cfc8:	2880030b 	ldhu	r2,12(r5)
    cfcc:	2ac01917 	ldw	r11,100(r5)
    cfd0:	2a80038b 	ldhu	r10,14(r5)
    cfd4:	2a400717 	ldw	r9,28(r5)
    cfd8:	2a000917 	ldw	r8,36(r5)
    cfdc:	defee204 	addi	sp,sp,-1144
    cfe0:	00c10004 	movi	r3,1024
    cfe4:	dc011a15 	stw	r16,1128(sp)
    cfe8:	10bfff4c 	andi	r2,r2,65533
    cfec:	2821883a 	mov	r16,r5
    cff0:	d8cb883a 	add	r5,sp,r3
    cff4:	dc811c15 	stw	r18,1136(sp)
    cff8:	dc411b15 	stw	r17,1132(sp)
    cffc:	dfc11d15 	stw	ra,1140(sp)
    d000:	2025883a 	mov	r18,r4
    d004:	d881030d 	sth	r2,1036(sp)
    d008:	dac11915 	stw	r11,1124(sp)
    d00c:	da81038d 	sth	r10,1038(sp)
    d010:	da410715 	stw	r9,1052(sp)
    d014:	da010915 	stw	r8,1060(sp)
    d018:	dec10015 	stw	sp,1024(sp)
    d01c:	dec10415 	stw	sp,1040(sp)
    d020:	d8c10215 	stw	r3,1032(sp)
    d024:	d8c10515 	stw	r3,1044(sp)
    d028:	d8010615 	stw	zero,1048(sp)
    d02c:	000bb500 	call	bb50 <___vfiprintf_internal_r>
    d030:	1023883a 	mov	r17,r2
    d034:	10000416 	blt	r2,zero,d048 <__sbprintf+0x80>
    d038:	d9410004 	addi	r5,sp,1024
    d03c:	9009883a 	mov	r4,r18
    d040:	00082b40 	call	82b4 <_fflush_r>
    d044:	10000d1e 	bne	r2,zero,d07c <__sbprintf+0xb4>
    d048:	d881030b 	ldhu	r2,1036(sp)
    d04c:	1080100c 	andi	r2,r2,64
    d050:	10000326 	beq	r2,zero,d060 <__sbprintf+0x98>
    d054:	8080030b 	ldhu	r2,12(r16)
    d058:	10801014 	ori	r2,r2,64
    d05c:	8080030d 	sth	r2,12(r16)
    d060:	8805883a 	mov	r2,r17
    d064:	dfc11d17 	ldw	ra,1140(sp)
    d068:	dc811c17 	ldw	r18,1136(sp)
    d06c:	dc411b17 	ldw	r17,1132(sp)
    d070:	dc011a17 	ldw	r16,1128(sp)
    d074:	dec11e04 	addi	sp,sp,1144
    d078:	f800283a 	ret
    d07c:	047fffc4 	movi	r17,-1
    d080:	003ff106 	br	d048 <__alt_mem_onchip_memory+0xf780d048>

0000d084 <__swbuf_r>:
    d084:	defffb04 	addi	sp,sp,-20
    d088:	dcc00315 	stw	r19,12(sp)
    d08c:	dc800215 	stw	r18,8(sp)
    d090:	dc000015 	stw	r16,0(sp)
    d094:	dfc00415 	stw	ra,16(sp)
    d098:	dc400115 	stw	r17,4(sp)
    d09c:	2025883a 	mov	r18,r4
    d0a0:	2827883a 	mov	r19,r5
    d0a4:	3021883a 	mov	r16,r6
    d0a8:	20000226 	beq	r4,zero,d0b4 <__swbuf_r+0x30>
    d0ac:	20800e17 	ldw	r2,56(r4)
    d0b0:	10004226 	beq	r2,zero,d1bc <__swbuf_r+0x138>
    d0b4:	80800617 	ldw	r2,24(r16)
    d0b8:	8100030b 	ldhu	r4,12(r16)
    d0bc:	80800215 	stw	r2,8(r16)
    d0c0:	2080020c 	andi	r2,r4,8
    d0c4:	10003626 	beq	r2,zero,d1a0 <__swbuf_r+0x11c>
    d0c8:	80c00417 	ldw	r3,16(r16)
    d0cc:	18003426 	beq	r3,zero,d1a0 <__swbuf_r+0x11c>
    d0d0:	2088000c 	andi	r2,r4,8192
    d0d4:	9c403fcc 	andi	r17,r19,255
    d0d8:	10001a26 	beq	r2,zero,d144 <__swbuf_r+0xc0>
    d0dc:	80800017 	ldw	r2,0(r16)
    d0e0:	81000517 	ldw	r4,20(r16)
    d0e4:	10c7c83a 	sub	r3,r2,r3
    d0e8:	1900200e 	bge	r3,r4,d16c <__swbuf_r+0xe8>
    d0ec:	18c00044 	addi	r3,r3,1
    d0f0:	81000217 	ldw	r4,8(r16)
    d0f4:	11400044 	addi	r5,r2,1
    d0f8:	81400015 	stw	r5,0(r16)
    d0fc:	213fffc4 	addi	r4,r4,-1
    d100:	81000215 	stw	r4,8(r16)
    d104:	14c00005 	stb	r19,0(r2)
    d108:	80800517 	ldw	r2,20(r16)
    d10c:	10c01e26 	beq	r2,r3,d188 <__swbuf_r+0x104>
    d110:	8080030b 	ldhu	r2,12(r16)
    d114:	1080004c 	andi	r2,r2,1
    d118:	10000226 	beq	r2,zero,d124 <__swbuf_r+0xa0>
    d11c:	00800284 	movi	r2,10
    d120:	88801926 	beq	r17,r2,d188 <__swbuf_r+0x104>
    d124:	8805883a 	mov	r2,r17
    d128:	dfc00417 	ldw	ra,16(sp)
    d12c:	dcc00317 	ldw	r19,12(sp)
    d130:	dc800217 	ldw	r18,8(sp)
    d134:	dc400117 	ldw	r17,4(sp)
    d138:	dc000017 	ldw	r16,0(sp)
    d13c:	dec00504 	addi	sp,sp,20
    d140:	f800283a 	ret
    d144:	81401917 	ldw	r5,100(r16)
    d148:	00b7ffc4 	movi	r2,-8193
    d14c:	21080014 	ori	r4,r4,8192
    d150:	2884703a 	and	r2,r5,r2
    d154:	80801915 	stw	r2,100(r16)
    d158:	80800017 	ldw	r2,0(r16)
    d15c:	8100030d 	sth	r4,12(r16)
    d160:	81000517 	ldw	r4,20(r16)
    d164:	10c7c83a 	sub	r3,r2,r3
    d168:	193fe016 	blt	r3,r4,d0ec <__alt_mem_onchip_memory+0xf780d0ec>
    d16c:	800b883a 	mov	r5,r16
    d170:	9009883a 	mov	r4,r18
    d174:	00082b40 	call	82b4 <_fflush_r>
    d178:	1000071e 	bne	r2,zero,d198 <__swbuf_r+0x114>
    d17c:	80800017 	ldw	r2,0(r16)
    d180:	00c00044 	movi	r3,1
    d184:	003fda06 	br	d0f0 <__alt_mem_onchip_memory+0xf780d0f0>
    d188:	800b883a 	mov	r5,r16
    d18c:	9009883a 	mov	r4,r18
    d190:	00082b40 	call	82b4 <_fflush_r>
    d194:	103fe326 	beq	r2,zero,d124 <__alt_mem_onchip_memory+0xf780d124>
    d198:	00bfffc4 	movi	r2,-1
    d19c:	003fe206 	br	d128 <__alt_mem_onchip_memory+0xf780d128>
    d1a0:	800b883a 	mov	r5,r16
    d1a4:	9009883a 	mov	r4,r18
    d1a8:	00066bc0 	call	66bc <__swsetup_r>
    d1ac:	103ffa1e 	bne	r2,zero,d198 <__alt_mem_onchip_memory+0xf780d198>
    d1b0:	8100030b 	ldhu	r4,12(r16)
    d1b4:	80c00417 	ldw	r3,16(r16)
    d1b8:	003fc506 	br	d0d0 <__alt_mem_onchip_memory+0xf780d0d0>
    d1bc:	00086900 	call	8690 <__sinit>
    d1c0:	003fbc06 	br	d0b4 <__alt_mem_onchip_memory+0xf780d0b4>

0000d1c4 <__swbuf>:
    d1c4:	00800074 	movhi	r2,1
    d1c8:	108d7704 	addi	r2,r2,13788
    d1cc:	280d883a 	mov	r6,r5
    d1d0:	200b883a 	mov	r5,r4
    d1d4:	11000017 	ldw	r4,0(r2)
    d1d8:	000d0841 	jmpi	d084 <__swbuf_r>

0000d1dc <_write_r>:
    d1dc:	defffd04 	addi	sp,sp,-12
    d1e0:	2805883a 	mov	r2,r5
    d1e4:	dc000015 	stw	r16,0(sp)
    d1e8:	04000074 	movhi	r16,1
    d1ec:	dc400115 	stw	r17,4(sp)
    d1f0:	300b883a 	mov	r5,r6
    d1f4:	84144d04 	addi	r16,r16,20788
    d1f8:	2023883a 	mov	r17,r4
    d1fc:	380d883a 	mov	r6,r7
    d200:	1009883a 	mov	r4,r2
    d204:	dfc00215 	stw	ra,8(sp)
    d208:	80000015 	stw	zero,0(r16)
    d20c:	000f4140 	call	f414 <write>
    d210:	00ffffc4 	movi	r3,-1
    d214:	10c00526 	beq	r2,r3,d22c <_write_r+0x50>
    d218:	dfc00217 	ldw	ra,8(sp)
    d21c:	dc400117 	ldw	r17,4(sp)
    d220:	dc000017 	ldw	r16,0(sp)
    d224:	dec00304 	addi	sp,sp,12
    d228:	f800283a 	ret
    d22c:	80c00017 	ldw	r3,0(r16)
    d230:	183ff926 	beq	r3,zero,d218 <__alt_mem_onchip_memory+0xf780d218>
    d234:	88c00015 	stw	r3,0(r17)
    d238:	003ff706 	br	d218 <__alt_mem_onchip_memory+0xf780d218>

0000d23c <_close_r>:
    d23c:	defffd04 	addi	sp,sp,-12
    d240:	dc000015 	stw	r16,0(sp)
    d244:	04000074 	movhi	r16,1
    d248:	dc400115 	stw	r17,4(sp)
    d24c:	84144d04 	addi	r16,r16,20788
    d250:	2023883a 	mov	r17,r4
    d254:	2809883a 	mov	r4,r5
    d258:	dfc00215 	stw	ra,8(sp)
    d25c:	80000015 	stw	zero,0(r16)
    d260:	000e86c0 	call	e86c <close>
    d264:	00ffffc4 	movi	r3,-1
    d268:	10c00526 	beq	r2,r3,d280 <_close_r+0x44>
    d26c:	dfc00217 	ldw	ra,8(sp)
    d270:	dc400117 	ldw	r17,4(sp)
    d274:	dc000017 	ldw	r16,0(sp)
    d278:	dec00304 	addi	sp,sp,12
    d27c:	f800283a 	ret
    d280:	80c00017 	ldw	r3,0(r16)
    d284:	183ff926 	beq	r3,zero,d26c <__alt_mem_onchip_memory+0xf780d26c>
    d288:	88c00015 	stw	r3,0(r17)
    d28c:	003ff706 	br	d26c <__alt_mem_onchip_memory+0xf780d26c>

0000d290 <_calloc_r>:
    d290:	298b383a 	mul	r5,r5,r6
    d294:	defffe04 	addi	sp,sp,-8
    d298:	dfc00115 	stw	ra,4(sp)
    d29c:	dc000015 	stw	r16,0(sp)
    d2a0:	000944c0 	call	944c <_malloc_r>
    d2a4:	10002926 	beq	r2,zero,d34c <_calloc_r+0xbc>
    d2a8:	11bfff17 	ldw	r6,-4(r2)
    d2ac:	1021883a 	mov	r16,r2
    d2b0:	00bfff04 	movi	r2,-4
    d2b4:	308c703a 	and	r6,r6,r2
    d2b8:	00c00904 	movi	r3,36
    d2bc:	308d883a 	add	r6,r6,r2
    d2c0:	19801636 	bltu	r3,r6,d31c <_calloc_r+0x8c>
    d2c4:	008004c4 	movi	r2,19
    d2c8:	11800b2e 	bgeu	r2,r6,d2f8 <_calloc_r+0x68>
    d2cc:	80000015 	stw	zero,0(r16)
    d2d0:	80000115 	stw	zero,4(r16)
    d2d4:	008006c4 	movi	r2,27
    d2d8:	11801a2e 	bgeu	r2,r6,d344 <_calloc_r+0xb4>
    d2dc:	80000215 	stw	zero,8(r16)
    d2e0:	80000315 	stw	zero,12(r16)
    d2e4:	30c0151e 	bne	r6,r3,d33c <_calloc_r+0xac>
    d2e8:	80000415 	stw	zero,16(r16)
    d2ec:	80800604 	addi	r2,r16,24
    d2f0:	80000515 	stw	zero,20(r16)
    d2f4:	00000106 	br	d2fc <_calloc_r+0x6c>
    d2f8:	8005883a 	mov	r2,r16
    d2fc:	10000015 	stw	zero,0(r2)
    d300:	10000115 	stw	zero,4(r2)
    d304:	10000215 	stw	zero,8(r2)
    d308:	8005883a 	mov	r2,r16
    d30c:	dfc00117 	ldw	ra,4(sp)
    d310:	dc000017 	ldw	r16,0(sp)
    d314:	dec00204 	addi	sp,sp,8
    d318:	f800283a 	ret
    d31c:	000b883a 	mov	r5,zero
    d320:	8009883a 	mov	r4,r16
    d324:	0009fe00 	call	9fe0 <memset>
    d328:	8005883a 	mov	r2,r16
    d32c:	dfc00117 	ldw	ra,4(sp)
    d330:	dc000017 	ldw	r16,0(sp)
    d334:	dec00204 	addi	sp,sp,8
    d338:	f800283a 	ret
    d33c:	80800404 	addi	r2,r16,16
    d340:	003fee06 	br	d2fc <__alt_mem_onchip_memory+0xf780d2fc>
    d344:	80800204 	addi	r2,r16,8
    d348:	003fec06 	br	d2fc <__alt_mem_onchip_memory+0xf780d2fc>
    d34c:	0005883a 	mov	r2,zero
    d350:	003fee06 	br	d30c <__alt_mem_onchip_memory+0xf780d30c>

0000d354 <_fclose_r>:
    d354:	28003926 	beq	r5,zero,d43c <_fclose_r+0xe8>
    d358:	defffc04 	addi	sp,sp,-16
    d35c:	dc400115 	stw	r17,4(sp)
    d360:	dc000015 	stw	r16,0(sp)
    d364:	dfc00315 	stw	ra,12(sp)
    d368:	dc800215 	stw	r18,8(sp)
    d36c:	2023883a 	mov	r17,r4
    d370:	2821883a 	mov	r16,r5
    d374:	20000226 	beq	r4,zero,d380 <_fclose_r+0x2c>
    d378:	20800e17 	ldw	r2,56(r4)
    d37c:	10002726 	beq	r2,zero,d41c <_fclose_r+0xc8>
    d380:	8080030f 	ldh	r2,12(r16)
    d384:	1000071e 	bne	r2,zero,d3a4 <_fclose_r+0x50>
    d388:	0005883a 	mov	r2,zero
    d38c:	dfc00317 	ldw	ra,12(sp)
    d390:	dc800217 	ldw	r18,8(sp)
    d394:	dc400117 	ldw	r17,4(sp)
    d398:	dc000017 	ldw	r16,0(sp)
    d39c:	dec00404 	addi	sp,sp,16
    d3a0:	f800283a 	ret
    d3a4:	800b883a 	mov	r5,r16
    d3a8:	8809883a 	mov	r4,r17
    d3ac:	00080980 	call	8098 <__sflush_r>
    d3b0:	1025883a 	mov	r18,r2
    d3b4:	80800b17 	ldw	r2,44(r16)
    d3b8:	10000426 	beq	r2,zero,d3cc <_fclose_r+0x78>
    d3bc:	81400717 	ldw	r5,28(r16)
    d3c0:	8809883a 	mov	r4,r17
    d3c4:	103ee83a 	callr	r2
    d3c8:	10001616 	blt	r2,zero,d424 <_fclose_r+0xd0>
    d3cc:	8080030b 	ldhu	r2,12(r16)
    d3d0:	1080200c 	andi	r2,r2,128
    d3d4:	1000151e 	bne	r2,zero,d42c <_fclose_r+0xd8>
    d3d8:	81400c17 	ldw	r5,48(r16)
    d3dc:	28000526 	beq	r5,zero,d3f4 <_fclose_r+0xa0>
    d3e0:	80801004 	addi	r2,r16,64
    d3e4:	28800226 	beq	r5,r2,d3f0 <_fclose_r+0x9c>
    d3e8:	8809883a 	mov	r4,r17
    d3ec:	00088040 	call	8804 <_free_r>
    d3f0:	80000c15 	stw	zero,48(r16)
    d3f4:	81401117 	ldw	r5,68(r16)
    d3f8:	28000326 	beq	r5,zero,d408 <_fclose_r+0xb4>
    d3fc:	8809883a 	mov	r4,r17
    d400:	00088040 	call	8804 <_free_r>
    d404:	80001115 	stw	zero,68(r16)
    d408:	00086a00 	call	86a0 <__sfp_lock_acquire>
    d40c:	8000030d 	sth	zero,12(r16)
    d410:	00086a40 	call	86a4 <__sfp_lock_release>
    d414:	9005883a 	mov	r2,r18
    d418:	003fdc06 	br	d38c <__alt_mem_onchip_memory+0xf780d38c>
    d41c:	00086900 	call	8690 <__sinit>
    d420:	003fd706 	br	d380 <__alt_mem_onchip_memory+0xf780d380>
    d424:	04bfffc4 	movi	r18,-1
    d428:	003fe806 	br	d3cc <__alt_mem_onchip_memory+0xf780d3cc>
    d42c:	81400417 	ldw	r5,16(r16)
    d430:	8809883a 	mov	r4,r17
    d434:	00088040 	call	8804 <_free_r>
    d438:	003fe706 	br	d3d8 <__alt_mem_onchip_memory+0xf780d3d8>
    d43c:	0005883a 	mov	r2,zero
    d440:	f800283a 	ret

0000d444 <fclose>:
    d444:	00800074 	movhi	r2,1
    d448:	108d7704 	addi	r2,r2,13788
    d44c:	200b883a 	mov	r5,r4
    d450:	11000017 	ldw	r4,0(r2)
    d454:	000d3541 	jmpi	d354 <_fclose_r>

0000d458 <__fputwc>:
    d458:	defff804 	addi	sp,sp,-32
    d45c:	dcc00415 	stw	r19,16(sp)
    d460:	dc800315 	stw	r18,12(sp)
    d464:	dc000115 	stw	r16,4(sp)
    d468:	dfc00715 	stw	ra,28(sp)
    d46c:	dd400615 	stw	r21,24(sp)
    d470:	dd000515 	stw	r20,20(sp)
    d474:	dc400215 	stw	r17,8(sp)
    d478:	2027883a 	mov	r19,r4
    d47c:	2825883a 	mov	r18,r5
    d480:	3021883a 	mov	r16,r6
    d484:	000923c0 	call	923c <__locale_mb_cur_max>
    d488:	00c00044 	movi	r3,1
    d48c:	10c03e26 	beq	r2,r3,d588 <__fputwc+0x130>
    d490:	81c01704 	addi	r7,r16,92
    d494:	900d883a 	mov	r6,r18
    d498:	d80b883a 	mov	r5,sp
    d49c:	9809883a 	mov	r4,r19
    d4a0:	000d7d00 	call	d7d0 <_wcrtomb_r>
    d4a4:	1029883a 	mov	r20,r2
    d4a8:	00bfffc4 	movi	r2,-1
    d4ac:	a0802026 	beq	r20,r2,d530 <__fputwc+0xd8>
    d4b0:	d9400003 	ldbu	r5,0(sp)
    d4b4:	a0001c26 	beq	r20,zero,d528 <__fputwc+0xd0>
    d4b8:	0023883a 	mov	r17,zero
    d4bc:	05400284 	movi	r21,10
    d4c0:	00000906 	br	d4e8 <__fputwc+0x90>
    d4c4:	80800017 	ldw	r2,0(r16)
    d4c8:	11400005 	stb	r5,0(r2)
    d4cc:	80c00017 	ldw	r3,0(r16)
    d4d0:	18c00044 	addi	r3,r3,1
    d4d4:	80c00015 	stw	r3,0(r16)
    d4d8:	8c400044 	addi	r17,r17,1
    d4dc:	dc45883a 	add	r2,sp,r17
    d4e0:	8d00112e 	bgeu	r17,r20,d528 <__fputwc+0xd0>
    d4e4:	11400003 	ldbu	r5,0(r2)
    d4e8:	80c00217 	ldw	r3,8(r16)
    d4ec:	18ffffc4 	addi	r3,r3,-1
    d4f0:	80c00215 	stw	r3,8(r16)
    d4f4:	183ff30e 	bge	r3,zero,d4c4 <__alt_mem_onchip_memory+0xf780d4c4>
    d4f8:	80800617 	ldw	r2,24(r16)
    d4fc:	18801916 	blt	r3,r2,d564 <__fputwc+0x10c>
    d500:	80800017 	ldw	r2,0(r16)
    d504:	11400005 	stb	r5,0(r2)
    d508:	80800017 	ldw	r2,0(r16)
    d50c:	10c00003 	ldbu	r3,0(r2)
    d510:	10800044 	addi	r2,r2,1
    d514:	1d402326 	beq	r3,r21,d5a4 <__fputwc+0x14c>
    d518:	80800015 	stw	r2,0(r16)
    d51c:	8c400044 	addi	r17,r17,1
    d520:	dc45883a 	add	r2,sp,r17
    d524:	8d3fef36 	bltu	r17,r20,d4e4 <__alt_mem_onchip_memory+0xf780d4e4>
    d528:	9005883a 	mov	r2,r18
    d52c:	00000406 	br	d540 <__fputwc+0xe8>
    d530:	80c0030b 	ldhu	r3,12(r16)
    d534:	a005883a 	mov	r2,r20
    d538:	18c01014 	ori	r3,r3,64
    d53c:	80c0030d 	sth	r3,12(r16)
    d540:	dfc00717 	ldw	ra,28(sp)
    d544:	dd400617 	ldw	r21,24(sp)
    d548:	dd000517 	ldw	r20,20(sp)
    d54c:	dcc00417 	ldw	r19,16(sp)
    d550:	dc800317 	ldw	r18,12(sp)
    d554:	dc400217 	ldw	r17,8(sp)
    d558:	dc000117 	ldw	r16,4(sp)
    d55c:	dec00804 	addi	sp,sp,32
    d560:	f800283a 	ret
    d564:	800d883a 	mov	r6,r16
    d568:	29403fcc 	andi	r5,r5,255
    d56c:	9809883a 	mov	r4,r19
    d570:	000d0840 	call	d084 <__swbuf_r>
    d574:	10bfffe0 	cmpeqi	r2,r2,-1
    d578:	10803fcc 	andi	r2,r2,255
    d57c:	103fd626 	beq	r2,zero,d4d8 <__alt_mem_onchip_memory+0xf780d4d8>
    d580:	00bfffc4 	movi	r2,-1
    d584:	003fee06 	br	d540 <__alt_mem_onchip_memory+0xf780d540>
    d588:	90ffffc4 	addi	r3,r18,-1
    d58c:	01003f84 	movi	r4,254
    d590:	20ffbf36 	bltu	r4,r3,d490 <__alt_mem_onchip_memory+0xf780d490>
    d594:	900b883a 	mov	r5,r18
    d598:	dc800005 	stb	r18,0(sp)
    d59c:	1029883a 	mov	r20,r2
    d5a0:	003fc506 	br	d4b8 <__alt_mem_onchip_memory+0xf780d4b8>
    d5a4:	800d883a 	mov	r6,r16
    d5a8:	a80b883a 	mov	r5,r21
    d5ac:	9809883a 	mov	r4,r19
    d5b0:	000d0840 	call	d084 <__swbuf_r>
    d5b4:	10bfffe0 	cmpeqi	r2,r2,-1
    d5b8:	003fef06 	br	d578 <__alt_mem_onchip_memory+0xf780d578>

0000d5bc <_fputwc_r>:
    d5bc:	3080030b 	ldhu	r2,12(r6)
    d5c0:	10c8000c 	andi	r3,r2,8192
    d5c4:	1800051e 	bne	r3,zero,d5dc <_fputwc_r+0x20>
    d5c8:	30c01917 	ldw	r3,100(r6)
    d5cc:	10880014 	ori	r2,r2,8192
    d5d0:	3080030d 	sth	r2,12(r6)
    d5d4:	18880014 	ori	r2,r3,8192
    d5d8:	30801915 	stw	r2,100(r6)
    d5dc:	000d4581 	jmpi	d458 <__fputwc>

0000d5e0 <fputwc>:
    d5e0:	00800074 	movhi	r2,1
    d5e4:	defffc04 	addi	sp,sp,-16
    d5e8:	108d7704 	addi	r2,r2,13788
    d5ec:	dc000115 	stw	r16,4(sp)
    d5f0:	14000017 	ldw	r16,0(r2)
    d5f4:	dc400215 	stw	r17,8(sp)
    d5f8:	dfc00315 	stw	ra,12(sp)
    d5fc:	2023883a 	mov	r17,r4
    d600:	80000226 	beq	r16,zero,d60c <fputwc+0x2c>
    d604:	80800e17 	ldw	r2,56(r16)
    d608:	10001026 	beq	r2,zero,d64c <fputwc+0x6c>
    d60c:	2880030b 	ldhu	r2,12(r5)
    d610:	10c8000c 	andi	r3,r2,8192
    d614:	1800051e 	bne	r3,zero,d62c <fputwc+0x4c>
    d618:	28c01917 	ldw	r3,100(r5)
    d61c:	10880014 	ori	r2,r2,8192
    d620:	2880030d 	sth	r2,12(r5)
    d624:	18880014 	ori	r2,r3,8192
    d628:	28801915 	stw	r2,100(r5)
    d62c:	280d883a 	mov	r6,r5
    d630:	8009883a 	mov	r4,r16
    d634:	880b883a 	mov	r5,r17
    d638:	dfc00317 	ldw	ra,12(sp)
    d63c:	dc400217 	ldw	r17,8(sp)
    d640:	dc000117 	ldw	r16,4(sp)
    d644:	dec00404 	addi	sp,sp,16
    d648:	000d4581 	jmpi	d458 <__fputwc>
    d64c:	8009883a 	mov	r4,r16
    d650:	d9400015 	stw	r5,0(sp)
    d654:	00086900 	call	8690 <__sinit>
    d658:	d9400017 	ldw	r5,0(sp)
    d65c:	003feb06 	br	d60c <__alt_mem_onchip_memory+0xf780d60c>

0000d660 <_fstat_r>:
    d660:	defffd04 	addi	sp,sp,-12
    d664:	2805883a 	mov	r2,r5
    d668:	dc000015 	stw	r16,0(sp)
    d66c:	04000074 	movhi	r16,1
    d670:	dc400115 	stw	r17,4(sp)
    d674:	84144d04 	addi	r16,r16,20788
    d678:	2023883a 	mov	r17,r4
    d67c:	300b883a 	mov	r5,r6
    d680:	1009883a 	mov	r4,r2
    d684:	dfc00215 	stw	ra,8(sp)
    d688:	80000015 	stw	zero,0(r16)
    d68c:	000e9a40 	call	e9a4 <fstat>
    d690:	00ffffc4 	movi	r3,-1
    d694:	10c00526 	beq	r2,r3,d6ac <_fstat_r+0x4c>
    d698:	dfc00217 	ldw	ra,8(sp)
    d69c:	dc400117 	ldw	r17,4(sp)
    d6a0:	dc000017 	ldw	r16,0(sp)
    d6a4:	dec00304 	addi	sp,sp,12
    d6a8:	f800283a 	ret
    d6ac:	80c00017 	ldw	r3,0(r16)
    d6b0:	183ff926 	beq	r3,zero,d698 <__alt_mem_onchip_memory+0xf780d698>
    d6b4:	88c00015 	stw	r3,0(r17)
    d6b8:	003ff706 	br	d698 <__alt_mem_onchip_memory+0xf780d698>

0000d6bc <_isatty_r>:
    d6bc:	defffd04 	addi	sp,sp,-12
    d6c0:	dc000015 	stw	r16,0(sp)
    d6c4:	04000074 	movhi	r16,1
    d6c8:	dc400115 	stw	r17,4(sp)
    d6cc:	84144d04 	addi	r16,r16,20788
    d6d0:	2023883a 	mov	r17,r4
    d6d4:	2809883a 	mov	r4,r5
    d6d8:	dfc00215 	stw	ra,8(sp)
    d6dc:	80000015 	stw	zero,0(r16)
    d6e0:	000ec840 	call	ec84 <isatty>
    d6e4:	00ffffc4 	movi	r3,-1
    d6e8:	10c00526 	beq	r2,r3,d700 <_isatty_r+0x44>
    d6ec:	dfc00217 	ldw	ra,8(sp)
    d6f0:	dc400117 	ldw	r17,4(sp)
    d6f4:	dc000017 	ldw	r16,0(sp)
    d6f8:	dec00304 	addi	sp,sp,12
    d6fc:	f800283a 	ret
    d700:	80c00017 	ldw	r3,0(r16)
    d704:	183ff926 	beq	r3,zero,d6ec <__alt_mem_onchip_memory+0xf780d6ec>
    d708:	88c00015 	stw	r3,0(r17)
    d70c:	003ff706 	br	d6ec <__alt_mem_onchip_memory+0xf780d6ec>

0000d710 <_lseek_r>:
    d710:	defffd04 	addi	sp,sp,-12
    d714:	2805883a 	mov	r2,r5
    d718:	dc000015 	stw	r16,0(sp)
    d71c:	04000074 	movhi	r16,1
    d720:	dc400115 	stw	r17,4(sp)
    d724:	300b883a 	mov	r5,r6
    d728:	84144d04 	addi	r16,r16,20788
    d72c:	2023883a 	mov	r17,r4
    d730:	380d883a 	mov	r6,r7
    d734:	1009883a 	mov	r4,r2
    d738:	dfc00215 	stw	ra,8(sp)
    d73c:	80000015 	stw	zero,0(r16)
    d740:	000ee500 	call	ee50 <lseek>
    d744:	00ffffc4 	movi	r3,-1
    d748:	10c00526 	beq	r2,r3,d760 <_lseek_r+0x50>
    d74c:	dfc00217 	ldw	ra,8(sp)
    d750:	dc400117 	ldw	r17,4(sp)
    d754:	dc000017 	ldw	r16,0(sp)
    d758:	dec00304 	addi	sp,sp,12
    d75c:	f800283a 	ret
    d760:	80c00017 	ldw	r3,0(r16)
    d764:	183ff926 	beq	r3,zero,d74c <__alt_mem_onchip_memory+0xf780d74c>
    d768:	88c00015 	stw	r3,0(r17)
    d76c:	003ff706 	br	d74c <__alt_mem_onchip_memory+0xf780d74c>

0000d770 <_read_r>:
    d770:	defffd04 	addi	sp,sp,-12
    d774:	2805883a 	mov	r2,r5
    d778:	dc000015 	stw	r16,0(sp)
    d77c:	04000074 	movhi	r16,1
    d780:	dc400115 	stw	r17,4(sp)
    d784:	300b883a 	mov	r5,r6
    d788:	84144d04 	addi	r16,r16,20788
    d78c:	2023883a 	mov	r17,r4
    d790:	380d883a 	mov	r6,r7
    d794:	1009883a 	mov	r4,r2
    d798:	dfc00215 	stw	ra,8(sp)
    d79c:	80000015 	stw	zero,0(r16)
    d7a0:	000f0240 	call	f024 <read>
    d7a4:	00ffffc4 	movi	r3,-1
    d7a8:	10c00526 	beq	r2,r3,d7c0 <_read_r+0x50>
    d7ac:	dfc00217 	ldw	ra,8(sp)
    d7b0:	dc400117 	ldw	r17,4(sp)
    d7b4:	dc000017 	ldw	r16,0(sp)
    d7b8:	dec00304 	addi	sp,sp,12
    d7bc:	f800283a 	ret
    d7c0:	80c00017 	ldw	r3,0(r16)
    d7c4:	183ff926 	beq	r3,zero,d7ac <__alt_mem_onchip_memory+0xf780d7ac>
    d7c8:	88c00015 	stw	r3,0(r17)
    d7cc:	003ff706 	br	d7ac <__alt_mem_onchip_memory+0xf780d7ac>

0000d7d0 <_wcrtomb_r>:
    d7d0:	defff604 	addi	sp,sp,-40
    d7d4:	00800074 	movhi	r2,1
    d7d8:	dc800815 	stw	r18,32(sp)
    d7dc:	dc400715 	stw	r17,28(sp)
    d7e0:	dc000615 	stw	r16,24(sp)
    d7e4:	108d7b04 	addi	r2,r2,13804
    d7e8:	dfc00915 	stw	ra,36(sp)
    d7ec:	2021883a 	mov	r16,r4
    d7f0:	3823883a 	mov	r17,r7
    d7f4:	14800017 	ldw	r18,0(r2)
    d7f8:	28001426 	beq	r5,zero,d84c <_wcrtomb_r+0x7c>
    d7fc:	d9400415 	stw	r5,16(sp)
    d800:	d9800515 	stw	r6,20(sp)
    d804:	00092300 	call	9230 <__locale_charset>
    d808:	d9800517 	ldw	r6,20(sp)
    d80c:	d9400417 	ldw	r5,16(sp)
    d810:	100f883a 	mov	r7,r2
    d814:	dc400015 	stw	r17,0(sp)
    d818:	8009883a 	mov	r4,r16
    d81c:	903ee83a 	callr	r18
    d820:	00ffffc4 	movi	r3,-1
    d824:	10c0031e 	bne	r2,r3,d834 <_wcrtomb_r+0x64>
    d828:	88000015 	stw	zero,0(r17)
    d82c:	00c02284 	movi	r3,138
    d830:	80c00015 	stw	r3,0(r16)
    d834:	dfc00917 	ldw	ra,36(sp)
    d838:	dc800817 	ldw	r18,32(sp)
    d83c:	dc400717 	ldw	r17,28(sp)
    d840:	dc000617 	ldw	r16,24(sp)
    d844:	dec00a04 	addi	sp,sp,40
    d848:	f800283a 	ret
    d84c:	00092300 	call	9230 <__locale_charset>
    d850:	100f883a 	mov	r7,r2
    d854:	dc400015 	stw	r17,0(sp)
    d858:	000d883a 	mov	r6,zero
    d85c:	d9400104 	addi	r5,sp,4
    d860:	8009883a 	mov	r4,r16
    d864:	903ee83a 	callr	r18
    d868:	003fed06 	br	d820 <__alt_mem_onchip_memory+0xf780d820>

0000d86c <wcrtomb>:
    d86c:	defff604 	addi	sp,sp,-40
    d870:	00800074 	movhi	r2,1
    d874:	dc800615 	stw	r18,24(sp)
    d878:	dc400515 	stw	r17,20(sp)
    d87c:	108d7704 	addi	r2,r2,13788
    d880:	dfc00915 	stw	ra,36(sp)
    d884:	dd000815 	stw	r20,32(sp)
    d888:	dcc00715 	stw	r19,28(sp)
    d88c:	dc000415 	stw	r16,16(sp)
    d890:	3025883a 	mov	r18,r6
    d894:	14400017 	ldw	r17,0(r2)
    d898:	20001926 	beq	r4,zero,d900 <wcrtomb+0x94>
    d89c:	00800074 	movhi	r2,1
    d8a0:	108d7b04 	addi	r2,r2,13804
    d8a4:	15000017 	ldw	r20,0(r2)
    d8a8:	2021883a 	mov	r16,r4
    d8ac:	2827883a 	mov	r19,r5
    d8b0:	00092300 	call	9230 <__locale_charset>
    d8b4:	100f883a 	mov	r7,r2
    d8b8:	dc800015 	stw	r18,0(sp)
    d8bc:	980d883a 	mov	r6,r19
    d8c0:	800b883a 	mov	r5,r16
    d8c4:	8809883a 	mov	r4,r17
    d8c8:	a03ee83a 	callr	r20
    d8cc:	00ffffc4 	movi	r3,-1
    d8d0:	10c0031e 	bne	r2,r3,d8e0 <wcrtomb+0x74>
    d8d4:	90000015 	stw	zero,0(r18)
    d8d8:	00c02284 	movi	r3,138
    d8dc:	88c00015 	stw	r3,0(r17)
    d8e0:	dfc00917 	ldw	ra,36(sp)
    d8e4:	dd000817 	ldw	r20,32(sp)
    d8e8:	dcc00717 	ldw	r19,28(sp)
    d8ec:	dc800617 	ldw	r18,24(sp)
    d8f0:	dc400517 	ldw	r17,20(sp)
    d8f4:	dc000417 	ldw	r16,16(sp)
    d8f8:	dec00a04 	addi	sp,sp,40
    d8fc:	f800283a 	ret
    d900:	00800074 	movhi	r2,1
    d904:	108d7b04 	addi	r2,r2,13804
    d908:	14000017 	ldw	r16,0(r2)
    d90c:	00092300 	call	9230 <__locale_charset>
    d910:	100f883a 	mov	r7,r2
    d914:	dc800015 	stw	r18,0(sp)
    d918:	000d883a 	mov	r6,zero
    d91c:	d9400104 	addi	r5,sp,4
    d920:	8809883a 	mov	r4,r17
    d924:	803ee83a 	callr	r16
    d928:	003fe806 	br	d8cc <__alt_mem_onchip_memory+0xf780d8cc>

0000d92c <__ascii_wctomb>:
    d92c:	28000526 	beq	r5,zero,d944 <__ascii_wctomb+0x18>
    d930:	00803fc4 	movi	r2,255
    d934:	11800536 	bltu	r2,r6,d94c <__ascii_wctomb+0x20>
    d938:	29800005 	stb	r6,0(r5)
    d93c:	00800044 	movi	r2,1
    d940:	f800283a 	ret
    d944:	0005883a 	mov	r2,zero
    d948:	f800283a 	ret
    d94c:	00802284 	movi	r2,138
    d950:	20800015 	stw	r2,0(r4)
    d954:	00bfffc4 	movi	r2,-1
    d958:	f800283a 	ret

0000d95c <_wctomb_r>:
    d95c:	00800074 	movhi	r2,1
    d960:	defff904 	addi	sp,sp,-28
    d964:	108d7b04 	addi	r2,r2,13804
    d968:	dfc00615 	stw	ra,24(sp)
    d96c:	dc400515 	stw	r17,20(sp)
    d970:	dc000415 	stw	r16,16(sp)
    d974:	3823883a 	mov	r17,r7
    d978:	14000017 	ldw	r16,0(r2)
    d97c:	d9000115 	stw	r4,4(sp)
    d980:	d9400215 	stw	r5,8(sp)
    d984:	d9800315 	stw	r6,12(sp)
    d988:	00092300 	call	9230 <__locale_charset>
    d98c:	d9800317 	ldw	r6,12(sp)
    d990:	d9400217 	ldw	r5,8(sp)
    d994:	d9000117 	ldw	r4,4(sp)
    d998:	100f883a 	mov	r7,r2
    d99c:	dc400015 	stw	r17,0(sp)
    d9a0:	803ee83a 	callr	r16
    d9a4:	dfc00617 	ldw	ra,24(sp)
    d9a8:	dc400517 	ldw	r17,20(sp)
    d9ac:	dc000417 	ldw	r16,16(sp)
    d9b0:	dec00704 	addi	sp,sp,28
    d9b4:	f800283a 	ret

0000d9b8 <__muldi3>:
    d9b8:	223fffcc 	andi	r8,r4,65535
    d9bc:	2006d43a 	srli	r3,r4,16
    d9c0:	32bfffcc 	andi	r10,r6,65535
    d9c4:	3012d43a 	srli	r9,r6,16
    d9c8:	4297383a 	mul	r11,r8,r10
    d9cc:	1a95383a 	mul	r10,r3,r10
    d9d0:	4251383a 	mul	r8,r8,r9
    d9d4:	5804d43a 	srli	r2,r11,16
    d9d8:	4291883a 	add	r8,r8,r10
    d9dc:	1205883a 	add	r2,r2,r8
    d9e0:	1a51383a 	mul	r8,r3,r9
    d9e4:	1280022e 	bgeu	r2,r10,d9f0 <__muldi3+0x38>
    d9e8:	00c00074 	movhi	r3,1
    d9ec:	40d1883a 	add	r8,r8,r3
    d9f0:	1006d43a 	srli	r3,r2,16
    d9f4:	21cf383a 	mul	r7,r4,r7
    d9f8:	314b383a 	mul	r5,r6,r5
    d9fc:	1004943a 	slli	r2,r2,16
    da00:	1a11883a 	add	r8,r3,r8
    da04:	5affffcc 	andi	r11,r11,65535
    da08:	3947883a 	add	r3,r7,r5
    da0c:	12c5883a 	add	r2,r2,r11
    da10:	1a07883a 	add	r3,r3,r8
    da14:	f800283a 	ret

0000da18 <__udivdi3>:
    da18:	defff504 	addi	sp,sp,-44
    da1c:	dcc00415 	stw	r19,16(sp)
    da20:	dc000115 	stw	r16,4(sp)
    da24:	dfc00a15 	stw	ra,40(sp)
    da28:	df000915 	stw	fp,36(sp)
    da2c:	ddc00815 	stw	r23,32(sp)
    da30:	dd800715 	stw	r22,28(sp)
    da34:	dd400615 	stw	r21,24(sp)
    da38:	dd000515 	stw	r20,20(sp)
    da3c:	dc800315 	stw	r18,12(sp)
    da40:	dc400215 	stw	r17,8(sp)
    da44:	2027883a 	mov	r19,r4
    da48:	2821883a 	mov	r16,r5
    da4c:	3800411e 	bne	r7,zero,db54 <__udivdi3+0x13c>
    da50:	3023883a 	mov	r17,r6
    da54:	2025883a 	mov	r18,r4
    da58:	2980522e 	bgeu	r5,r6,dba4 <__udivdi3+0x18c>
    da5c:	00bfffd4 	movui	r2,65535
    da60:	282d883a 	mov	r22,r5
    da64:	1180a836 	bltu	r2,r6,dd08 <__udivdi3+0x2f0>
    da68:	00803fc4 	movi	r2,255
    da6c:	1185803a 	cmpltu	r2,r2,r6
    da70:	100490fa 	slli	r2,r2,3
    da74:	3086d83a 	srl	r3,r6,r2
    da78:	01000074 	movhi	r4,1
    da7c:	2105c744 	addi	r4,r4,5917
    da80:	20c7883a 	add	r3,r4,r3
    da84:	18c00003 	ldbu	r3,0(r3)
    da88:	1885883a 	add	r2,r3,r2
    da8c:	00c00804 	movi	r3,32
    da90:	1887c83a 	sub	r3,r3,r2
    da94:	18000526 	beq	r3,zero,daac <__udivdi3+0x94>
    da98:	80e0983a 	sll	r16,r16,r3
    da9c:	9884d83a 	srl	r2,r19,r2
    daa0:	30e2983a 	sll	r17,r6,r3
    daa4:	98e4983a 	sll	r18,r19,r3
    daa8:	142cb03a 	or	r22,r2,r16
    daac:	882ad43a 	srli	r21,r17,16
    dab0:	b009883a 	mov	r4,r22
    dab4:	8d3fffcc 	andi	r20,r17,65535
    dab8:	a80b883a 	mov	r5,r21
    dabc:	00040600 	call	4060 <__umodsi3>
    dac0:	b009883a 	mov	r4,r22
    dac4:	a80b883a 	mov	r5,r21
    dac8:	1027883a 	mov	r19,r2
    dacc:	0003ffc0 	call	3ffc <__udivsi3>
    dad0:	102d883a 	mov	r22,r2
    dad4:	9826943a 	slli	r19,r19,16
    dad8:	9004d43a 	srli	r2,r18,16
    dadc:	a5a1383a 	mul	r16,r20,r22
    dae0:	14c4b03a 	or	r2,r2,r19
    dae4:	1400052e 	bgeu	r2,r16,dafc <__udivdi3+0xe4>
    dae8:	1445883a 	add	r2,r2,r17
    daec:	b0ffffc4 	addi	r3,r22,-1
    daf0:	14400136 	bltu	r2,r17,daf8 <__udivdi3+0xe0>
    daf4:	14012336 	bltu	r2,r16,df84 <__udivdi3+0x56c>
    daf8:	182d883a 	mov	r22,r3
    dafc:	1421c83a 	sub	r16,r2,r16
    db00:	a80b883a 	mov	r5,r21
    db04:	8009883a 	mov	r4,r16
    db08:	00040600 	call	4060 <__umodsi3>
    db0c:	1027883a 	mov	r19,r2
    db10:	a80b883a 	mov	r5,r21
    db14:	8009883a 	mov	r4,r16
    db18:	0003ffc0 	call	3ffc <__udivsi3>
    db1c:	9826943a 	slli	r19,r19,16
    db20:	a0a9383a 	mul	r20,r20,r2
    db24:	94bfffcc 	andi	r18,r18,65535
    db28:	94e4b03a 	or	r18,r18,r19
    db2c:	9500052e 	bgeu	r18,r20,db44 <__udivdi3+0x12c>
    db30:	8ca5883a 	add	r18,r17,r18
    db34:	10ffffc4 	addi	r3,r2,-1
    db38:	9440f136 	bltu	r18,r17,df00 <__udivdi3+0x4e8>
    db3c:	9500f02e 	bgeu	r18,r20,df00 <__udivdi3+0x4e8>
    db40:	10bfff84 	addi	r2,r2,-2
    db44:	b00c943a 	slli	r6,r22,16
    db48:	0007883a 	mov	r3,zero
    db4c:	3084b03a 	or	r2,r6,r2
    db50:	00005906 	br	dcb8 <__udivdi3+0x2a0>
    db54:	29c05636 	bltu	r5,r7,dcb0 <__udivdi3+0x298>
    db58:	00bfffd4 	movui	r2,65535
    db5c:	11c0622e 	bgeu	r2,r7,dce8 <__udivdi3+0x2d0>
    db60:	00804034 	movhi	r2,256
    db64:	10bfffc4 	addi	r2,r2,-1
    db68:	11c0ee36 	bltu	r2,r7,df24 <__udivdi3+0x50c>
    db6c:	00800404 	movi	r2,16
    db70:	3886d83a 	srl	r3,r7,r2
    db74:	01000074 	movhi	r4,1
    db78:	2105c744 	addi	r4,r4,5917
    db7c:	20c7883a 	add	r3,r4,r3
    db80:	18c00003 	ldbu	r3,0(r3)
    db84:	05400804 	movi	r21,32
    db88:	1885883a 	add	r2,r3,r2
    db8c:	a8abc83a 	sub	r21,r21,r2
    db90:	a800621e 	bne	r21,zero,dd1c <__udivdi3+0x304>
    db94:	3c00e936 	bltu	r7,r16,df3c <__udivdi3+0x524>
    db98:	9985403a 	cmpgeu	r2,r19,r6
    db9c:	0007883a 	mov	r3,zero
    dba0:	00004506 	br	dcb8 <__udivdi3+0x2a0>
    dba4:	3000041e 	bne	r6,zero,dbb8 <__udivdi3+0x1a0>
    dba8:	000b883a 	mov	r5,zero
    dbac:	01000044 	movi	r4,1
    dbb0:	0003ffc0 	call	3ffc <__udivsi3>
    dbb4:	1023883a 	mov	r17,r2
    dbb8:	00bfffd4 	movui	r2,65535
    dbbc:	14404e2e 	bgeu	r2,r17,dcf8 <__udivdi3+0x2e0>
    dbc0:	00804034 	movhi	r2,256
    dbc4:	10bfffc4 	addi	r2,r2,-1
    dbc8:	1440d836 	bltu	r2,r17,df2c <__udivdi3+0x514>
    dbcc:	00800404 	movi	r2,16
    dbd0:	8886d83a 	srl	r3,r17,r2
    dbd4:	01000074 	movhi	r4,1
    dbd8:	2105c744 	addi	r4,r4,5917
    dbdc:	20c7883a 	add	r3,r4,r3
    dbe0:	18c00003 	ldbu	r3,0(r3)
    dbe4:	1885883a 	add	r2,r3,r2
    dbe8:	00c00804 	movi	r3,32
    dbec:	1887c83a 	sub	r3,r3,r2
    dbf0:	18008f1e 	bne	r3,zero,de30 <__udivdi3+0x418>
    dbf4:	882ad43a 	srli	r21,r17,16
    dbf8:	8461c83a 	sub	r16,r16,r17
    dbfc:	8d3fffcc 	andi	r20,r17,65535
    dc00:	00c00044 	movi	r3,1
    dc04:	8009883a 	mov	r4,r16
    dc08:	a80b883a 	mov	r5,r21
    dc0c:	d8c00015 	stw	r3,0(sp)
    dc10:	00040600 	call	4060 <__umodsi3>
    dc14:	8009883a 	mov	r4,r16
    dc18:	a80b883a 	mov	r5,r21
    dc1c:	1027883a 	mov	r19,r2
    dc20:	0003ffc0 	call	3ffc <__udivsi3>
    dc24:	9826943a 	slli	r19,r19,16
    dc28:	9008d43a 	srli	r4,r18,16
    dc2c:	1521383a 	mul	r16,r2,r20
    dc30:	102d883a 	mov	r22,r2
    dc34:	24c8b03a 	or	r4,r4,r19
    dc38:	d8c00017 	ldw	r3,0(sp)
    dc3c:	2400052e 	bgeu	r4,r16,dc54 <__udivdi3+0x23c>
    dc40:	2449883a 	add	r4,r4,r17
    dc44:	b0bfffc4 	addi	r2,r22,-1
    dc48:	24400136 	bltu	r4,r17,dc50 <__udivdi3+0x238>
    dc4c:	2400ca36 	bltu	r4,r16,df78 <__udivdi3+0x560>
    dc50:	102d883a 	mov	r22,r2
    dc54:	2421c83a 	sub	r16,r4,r16
    dc58:	a80b883a 	mov	r5,r21
    dc5c:	8009883a 	mov	r4,r16
    dc60:	d8c00015 	stw	r3,0(sp)
    dc64:	00040600 	call	4060 <__umodsi3>
    dc68:	1027883a 	mov	r19,r2
    dc6c:	a80b883a 	mov	r5,r21
    dc70:	8009883a 	mov	r4,r16
    dc74:	0003ffc0 	call	3ffc <__udivsi3>
    dc78:	9826943a 	slli	r19,r19,16
    dc7c:	1529383a 	mul	r20,r2,r20
    dc80:	94bfffcc 	andi	r18,r18,65535
    dc84:	94e4b03a 	or	r18,r18,r19
    dc88:	d8c00017 	ldw	r3,0(sp)
    dc8c:	9500052e 	bgeu	r18,r20,dca4 <__udivdi3+0x28c>
    dc90:	8ca5883a 	add	r18,r17,r18
    dc94:	113fffc4 	addi	r4,r2,-1
    dc98:	94409736 	bltu	r18,r17,def8 <__udivdi3+0x4e0>
    dc9c:	9500962e 	bgeu	r18,r20,def8 <__udivdi3+0x4e0>
    dca0:	10bfff84 	addi	r2,r2,-2
    dca4:	b00c943a 	slli	r6,r22,16
    dca8:	3084b03a 	or	r2,r6,r2
    dcac:	00000206 	br	dcb8 <__udivdi3+0x2a0>
    dcb0:	0007883a 	mov	r3,zero
    dcb4:	0005883a 	mov	r2,zero
    dcb8:	dfc00a17 	ldw	ra,40(sp)
    dcbc:	df000917 	ldw	fp,36(sp)
    dcc0:	ddc00817 	ldw	r23,32(sp)
    dcc4:	dd800717 	ldw	r22,28(sp)
    dcc8:	dd400617 	ldw	r21,24(sp)
    dccc:	dd000517 	ldw	r20,20(sp)
    dcd0:	dcc00417 	ldw	r19,16(sp)
    dcd4:	dc800317 	ldw	r18,12(sp)
    dcd8:	dc400217 	ldw	r17,8(sp)
    dcdc:	dc000117 	ldw	r16,4(sp)
    dce0:	dec00b04 	addi	sp,sp,44
    dce4:	f800283a 	ret
    dce8:	00803fc4 	movi	r2,255
    dcec:	11c5803a 	cmpltu	r2,r2,r7
    dcf0:	100490fa 	slli	r2,r2,3
    dcf4:	003f9e06 	br	db70 <__alt_mem_onchip_memory+0xf780db70>
    dcf8:	00803fc4 	movi	r2,255
    dcfc:	1445803a 	cmpltu	r2,r2,r17
    dd00:	100490fa 	slli	r2,r2,3
    dd04:	003fb206 	br	dbd0 <__alt_mem_onchip_memory+0xf780dbd0>
    dd08:	00804034 	movhi	r2,256
    dd0c:	10bfffc4 	addi	r2,r2,-1
    dd10:	11808836 	bltu	r2,r6,df34 <__udivdi3+0x51c>
    dd14:	00800404 	movi	r2,16
    dd18:	003f5606 	br	da74 <__alt_mem_onchip_memory+0xf780da74>
    dd1c:	30aed83a 	srl	r23,r6,r2
    dd20:	3d4e983a 	sll	r7,r7,r21
    dd24:	80acd83a 	srl	r22,r16,r2
    dd28:	9884d83a 	srl	r2,r19,r2
    dd2c:	3deeb03a 	or	r23,r7,r23
    dd30:	b824d43a 	srli	r18,r23,16
    dd34:	8560983a 	sll	r16,r16,r21
    dd38:	b009883a 	mov	r4,r22
    dd3c:	900b883a 	mov	r5,r18
    dd40:	3568983a 	sll	r20,r6,r21
    dd44:	1420b03a 	or	r16,r2,r16
    dd48:	00040600 	call	4060 <__umodsi3>
    dd4c:	b009883a 	mov	r4,r22
    dd50:	900b883a 	mov	r5,r18
    dd54:	1023883a 	mov	r17,r2
    dd58:	0003ffc0 	call	3ffc <__udivsi3>
    dd5c:	8808943a 	slli	r4,r17,16
    dd60:	bf3fffcc 	andi	fp,r23,65535
    dd64:	8006d43a 	srli	r3,r16,16
    dd68:	e0a3383a 	mul	r17,fp,r2
    dd6c:	100d883a 	mov	r6,r2
    dd70:	1906b03a 	or	r3,r3,r4
    dd74:	1c40042e 	bgeu	r3,r17,dd88 <__udivdi3+0x370>
    dd78:	1dc7883a 	add	r3,r3,r23
    dd7c:	10bfffc4 	addi	r2,r2,-1
    dd80:	1dc0752e 	bgeu	r3,r23,df58 <__udivdi3+0x540>
    dd84:	100d883a 	mov	r6,r2
    dd88:	1c63c83a 	sub	r17,r3,r17
    dd8c:	900b883a 	mov	r5,r18
    dd90:	8809883a 	mov	r4,r17
    dd94:	d9800015 	stw	r6,0(sp)
    dd98:	00040600 	call	4060 <__umodsi3>
    dd9c:	102d883a 	mov	r22,r2
    dda0:	8809883a 	mov	r4,r17
    dda4:	900b883a 	mov	r5,r18
    dda8:	0003ffc0 	call	3ffc <__udivsi3>
    ddac:	b02c943a 	slli	r22,r22,16
    ddb0:	e089383a 	mul	r4,fp,r2
    ddb4:	843fffcc 	andi	r16,r16,65535
    ddb8:	85a0b03a 	or	r16,r16,r22
    ddbc:	d9800017 	ldw	r6,0(sp)
    ddc0:	8100042e 	bgeu	r16,r4,ddd4 <__udivdi3+0x3bc>
    ddc4:	85e1883a 	add	r16,r16,r23
    ddc8:	10ffffc4 	addi	r3,r2,-1
    ddcc:	85c05e2e 	bgeu	r16,r23,df48 <__udivdi3+0x530>
    ddd0:	1805883a 	mov	r2,r3
    ddd4:	300c943a 	slli	r6,r6,16
    ddd8:	a17fffcc 	andi	r5,r20,65535
    dddc:	a028d43a 	srli	r20,r20,16
    dde0:	3084b03a 	or	r2,r6,r2
    dde4:	10ffffcc 	andi	r3,r2,65535
    dde8:	100cd43a 	srli	r6,r2,16
    ddec:	194f383a 	mul	r7,r3,r5
    ddf0:	1d07383a 	mul	r3,r3,r20
    ddf4:	314b383a 	mul	r5,r6,r5
    ddf8:	3810d43a 	srli	r8,r7,16
    ddfc:	8121c83a 	sub	r16,r16,r4
    de00:	1947883a 	add	r3,r3,r5
    de04:	40c7883a 	add	r3,r8,r3
    de08:	350d383a 	mul	r6,r6,r20
    de0c:	1940022e 	bgeu	r3,r5,de18 <__udivdi3+0x400>
    de10:	01000074 	movhi	r4,1
    de14:	310d883a 	add	r6,r6,r4
    de18:	1828d43a 	srli	r20,r3,16
    de1c:	a18d883a 	add	r6,r20,r6
    de20:	81803e36 	bltu	r16,r6,df1c <__udivdi3+0x504>
    de24:	81803826 	beq	r16,r6,df08 <__udivdi3+0x4f0>
    de28:	0007883a 	mov	r3,zero
    de2c:	003fa206 	br	dcb8 <__alt_mem_onchip_memory+0xf780dcb8>
    de30:	88e2983a 	sll	r17,r17,r3
    de34:	80a8d83a 	srl	r20,r16,r2
    de38:	80e0983a 	sll	r16,r16,r3
    de3c:	882ad43a 	srli	r21,r17,16
    de40:	9884d83a 	srl	r2,r19,r2
    de44:	a009883a 	mov	r4,r20
    de48:	a80b883a 	mov	r5,r21
    de4c:	142eb03a 	or	r23,r2,r16
    de50:	98e4983a 	sll	r18,r19,r3
    de54:	00040600 	call	4060 <__umodsi3>
    de58:	a009883a 	mov	r4,r20
    de5c:	a80b883a 	mov	r5,r21
    de60:	1021883a 	mov	r16,r2
    de64:	0003ffc0 	call	3ffc <__udivsi3>
    de68:	1039883a 	mov	fp,r2
    de6c:	8d3fffcc 	andi	r20,r17,65535
    de70:	8020943a 	slli	r16,r16,16
    de74:	b804d43a 	srli	r2,r23,16
    de78:	a72d383a 	mul	r22,r20,fp
    de7c:	1404b03a 	or	r2,r2,r16
    de80:	1580062e 	bgeu	r2,r22,de9c <__udivdi3+0x484>
    de84:	1445883a 	add	r2,r2,r17
    de88:	e0ffffc4 	addi	r3,fp,-1
    de8c:	14403836 	bltu	r2,r17,df70 <__udivdi3+0x558>
    de90:	1580372e 	bgeu	r2,r22,df70 <__udivdi3+0x558>
    de94:	e73fff84 	addi	fp,fp,-2
    de98:	1445883a 	add	r2,r2,r17
    de9c:	15adc83a 	sub	r22,r2,r22
    dea0:	a80b883a 	mov	r5,r21
    dea4:	b009883a 	mov	r4,r22
    dea8:	00040600 	call	4060 <__umodsi3>
    deac:	1027883a 	mov	r19,r2
    deb0:	b009883a 	mov	r4,r22
    deb4:	a80b883a 	mov	r5,r21
    deb8:	0003ffc0 	call	3ffc <__udivsi3>
    debc:	9826943a 	slli	r19,r19,16
    dec0:	a0a1383a 	mul	r16,r20,r2
    dec4:	b93fffcc 	andi	r4,r23,65535
    dec8:	24c8b03a 	or	r4,r4,r19
    decc:	2400062e 	bgeu	r4,r16,dee8 <__udivdi3+0x4d0>
    ded0:	2449883a 	add	r4,r4,r17
    ded4:	10ffffc4 	addi	r3,r2,-1
    ded8:	24402336 	bltu	r4,r17,df68 <__udivdi3+0x550>
    dedc:	2400222e 	bgeu	r4,r16,df68 <__udivdi3+0x550>
    dee0:	10bfff84 	addi	r2,r2,-2
    dee4:	2449883a 	add	r4,r4,r17
    dee8:	e038943a 	slli	fp,fp,16
    deec:	2421c83a 	sub	r16,r4,r16
    def0:	e086b03a 	or	r3,fp,r2
    def4:	003f4306 	br	dc04 <__alt_mem_onchip_memory+0xf780dc04>
    def8:	2005883a 	mov	r2,r4
    defc:	003f6906 	br	dca4 <__alt_mem_onchip_memory+0xf780dca4>
    df00:	1805883a 	mov	r2,r3
    df04:	003f0f06 	br	db44 <__alt_mem_onchip_memory+0xf780db44>
    df08:	1806943a 	slli	r3,r3,16
    df0c:	9d66983a 	sll	r19,r19,r21
    df10:	39ffffcc 	andi	r7,r7,65535
    df14:	19c7883a 	add	r3,r3,r7
    df18:	98ffc32e 	bgeu	r19,r3,de28 <__alt_mem_onchip_memory+0xf780de28>
    df1c:	10bfffc4 	addi	r2,r2,-1
    df20:	003fc106 	br	de28 <__alt_mem_onchip_memory+0xf780de28>
    df24:	00800604 	movi	r2,24
    df28:	003f1106 	br	db70 <__alt_mem_onchip_memory+0xf780db70>
    df2c:	00800604 	movi	r2,24
    df30:	003f2706 	br	dbd0 <__alt_mem_onchip_memory+0xf780dbd0>
    df34:	00800604 	movi	r2,24
    df38:	003ece06 	br	da74 <__alt_mem_onchip_memory+0xf780da74>
    df3c:	0007883a 	mov	r3,zero
    df40:	00800044 	movi	r2,1
    df44:	003f5c06 	br	dcb8 <__alt_mem_onchip_memory+0xf780dcb8>
    df48:	813fa12e 	bgeu	r16,r4,ddd0 <__alt_mem_onchip_memory+0xf780ddd0>
    df4c:	10bfff84 	addi	r2,r2,-2
    df50:	85e1883a 	add	r16,r16,r23
    df54:	003f9f06 	br	ddd4 <__alt_mem_onchip_memory+0xf780ddd4>
    df58:	1c7f8a2e 	bgeu	r3,r17,dd84 <__alt_mem_onchip_memory+0xf780dd84>
    df5c:	31bfff84 	addi	r6,r6,-2
    df60:	1dc7883a 	add	r3,r3,r23
    df64:	003f8806 	br	dd88 <__alt_mem_onchip_memory+0xf780dd88>
    df68:	1805883a 	mov	r2,r3
    df6c:	003fde06 	br	dee8 <__alt_mem_onchip_memory+0xf780dee8>
    df70:	1839883a 	mov	fp,r3
    df74:	003fc906 	br	de9c <__alt_mem_onchip_memory+0xf780de9c>
    df78:	b5bfff84 	addi	r22,r22,-2
    df7c:	2449883a 	add	r4,r4,r17
    df80:	003f3406 	br	dc54 <__alt_mem_onchip_memory+0xf780dc54>
    df84:	b5bfff84 	addi	r22,r22,-2
    df88:	1445883a 	add	r2,r2,r17
    df8c:	003edb06 	br	dafc <__alt_mem_onchip_memory+0xf780dafc>

0000df90 <__umoddi3>:
    df90:	defff404 	addi	sp,sp,-48
    df94:	df000a15 	stw	fp,40(sp)
    df98:	dc400315 	stw	r17,12(sp)
    df9c:	dc000215 	stw	r16,8(sp)
    dfa0:	dfc00b15 	stw	ra,44(sp)
    dfa4:	ddc00915 	stw	r23,36(sp)
    dfa8:	dd800815 	stw	r22,32(sp)
    dfac:	dd400715 	stw	r21,28(sp)
    dfb0:	dd000615 	stw	r20,24(sp)
    dfb4:	dcc00515 	stw	r19,20(sp)
    dfb8:	dc800415 	stw	r18,16(sp)
    dfbc:	2021883a 	mov	r16,r4
    dfc0:	2823883a 	mov	r17,r5
    dfc4:	2839883a 	mov	fp,r5
    dfc8:	38003c1e 	bne	r7,zero,e0bc <__umoddi3+0x12c>
    dfcc:	3027883a 	mov	r19,r6
    dfd0:	2029883a 	mov	r20,r4
    dfd4:	2980512e 	bgeu	r5,r6,e11c <__umoddi3+0x18c>
    dfd8:	00bfffd4 	movui	r2,65535
    dfdc:	11809a36 	bltu	r2,r6,e248 <__umoddi3+0x2b8>
    dfe0:	01003fc4 	movi	r4,255
    dfe4:	2189803a 	cmpltu	r4,r4,r6
    dfe8:	200890fa 	slli	r4,r4,3
    dfec:	3104d83a 	srl	r2,r6,r4
    dff0:	00c00074 	movhi	r3,1
    dff4:	18c5c744 	addi	r3,r3,5917
    dff8:	1885883a 	add	r2,r3,r2
    dffc:	10c00003 	ldbu	r3,0(r2)
    e000:	00800804 	movi	r2,32
    e004:	1909883a 	add	r4,r3,r4
    e008:	1125c83a 	sub	r18,r2,r4
    e00c:	90000526 	beq	r18,zero,e024 <__umoddi3+0x94>
    e010:	8ca2983a 	sll	r17,r17,r18
    e014:	8108d83a 	srl	r4,r16,r4
    e018:	34a6983a 	sll	r19,r6,r18
    e01c:	84a8983a 	sll	r20,r16,r18
    e020:	2478b03a 	or	fp,r4,r17
    e024:	982ed43a 	srli	r23,r19,16
    e028:	e009883a 	mov	r4,fp
    e02c:	9dbfffcc 	andi	r22,r19,65535
    e030:	b80b883a 	mov	r5,r23
    e034:	00040600 	call	4060 <__umodsi3>
    e038:	e009883a 	mov	r4,fp
    e03c:	b80b883a 	mov	r5,r23
    e040:	102b883a 	mov	r21,r2
    e044:	0003ffc0 	call	3ffc <__udivsi3>
    e048:	a806943a 	slli	r3,r21,16
    e04c:	a008d43a 	srli	r4,r20,16
    e050:	b085383a 	mul	r2,r22,r2
    e054:	20c8b03a 	or	r4,r4,r3
    e058:	2080032e 	bgeu	r4,r2,e068 <__umoddi3+0xd8>
    e05c:	24c9883a 	add	r4,r4,r19
    e060:	24c00136 	bltu	r4,r19,e068 <__umoddi3+0xd8>
    e064:	20811036 	bltu	r4,r2,e4a8 <__umoddi3+0x518>
    e068:	20abc83a 	sub	r21,r4,r2
    e06c:	b80b883a 	mov	r5,r23
    e070:	a809883a 	mov	r4,r21
    e074:	00040600 	call	4060 <__umodsi3>
    e078:	1023883a 	mov	r17,r2
    e07c:	b80b883a 	mov	r5,r23
    e080:	a809883a 	mov	r4,r21
    e084:	0003ffc0 	call	3ffc <__udivsi3>
    e088:	8822943a 	slli	r17,r17,16
    e08c:	b085383a 	mul	r2,r22,r2
    e090:	a0ffffcc 	andi	r3,r20,65535
    e094:	1c46b03a 	or	r3,r3,r17
    e098:	1880042e 	bgeu	r3,r2,e0ac <__umoddi3+0x11c>
    e09c:	1cc7883a 	add	r3,r3,r19
    e0a0:	1cc00236 	bltu	r3,r19,e0ac <__umoddi3+0x11c>
    e0a4:	1880012e 	bgeu	r3,r2,e0ac <__umoddi3+0x11c>
    e0a8:	1cc7883a 	add	r3,r3,r19
    e0ac:	1885c83a 	sub	r2,r3,r2
    e0b0:	1484d83a 	srl	r2,r2,r18
    e0b4:	0007883a 	mov	r3,zero
    e0b8:	00004f06 	br	e1f8 <__umoddi3+0x268>
    e0bc:	29c04c36 	bltu	r5,r7,e1f0 <__umoddi3+0x260>
    e0c0:	00bfffd4 	movui	r2,65535
    e0c4:	11c0582e 	bgeu	r2,r7,e228 <__umoddi3+0x298>
    e0c8:	00804034 	movhi	r2,256
    e0cc:	10bfffc4 	addi	r2,r2,-1
    e0d0:	11c0e736 	bltu	r2,r7,e470 <__umoddi3+0x4e0>
    e0d4:	01000404 	movi	r4,16
    e0d8:	3904d83a 	srl	r2,r7,r4
    e0dc:	00c00074 	movhi	r3,1
    e0e0:	18c5c744 	addi	r3,r3,5917
    e0e4:	1885883a 	add	r2,r3,r2
    e0e8:	14c00003 	ldbu	r19,0(r2)
    e0ec:	00c00804 	movi	r3,32
    e0f0:	9927883a 	add	r19,r19,r4
    e0f4:	1ce9c83a 	sub	r20,r3,r19
    e0f8:	a000581e 	bne	r20,zero,e25c <__umoddi3+0x2cc>
    e0fc:	3c400136 	bltu	r7,r17,e104 <__umoddi3+0x174>
    e100:	8180eb36 	bltu	r16,r6,e4b0 <__umoddi3+0x520>
    e104:	8185c83a 	sub	r2,r16,r6
    e108:	89e3c83a 	sub	r17,r17,r7
    e10c:	8089803a 	cmpltu	r4,r16,r2
    e110:	8939c83a 	sub	fp,r17,r4
    e114:	e007883a 	mov	r3,fp
    e118:	00003706 	br	e1f8 <__umoddi3+0x268>
    e11c:	3000041e 	bne	r6,zero,e130 <__umoddi3+0x1a0>
    e120:	000b883a 	mov	r5,zero
    e124:	01000044 	movi	r4,1
    e128:	0003ffc0 	call	3ffc <__udivsi3>
    e12c:	1027883a 	mov	r19,r2
    e130:	00bfffd4 	movui	r2,65535
    e134:	14c0402e 	bgeu	r2,r19,e238 <__umoddi3+0x2a8>
    e138:	00804034 	movhi	r2,256
    e13c:	10bfffc4 	addi	r2,r2,-1
    e140:	14c0cd36 	bltu	r2,r19,e478 <__umoddi3+0x4e8>
    e144:	00800404 	movi	r2,16
    e148:	9886d83a 	srl	r3,r19,r2
    e14c:	01000074 	movhi	r4,1
    e150:	2105c744 	addi	r4,r4,5917
    e154:	20c7883a 	add	r3,r4,r3
    e158:	18c00003 	ldbu	r3,0(r3)
    e15c:	1887883a 	add	r3,r3,r2
    e160:	00800804 	movi	r2,32
    e164:	10e5c83a 	sub	r18,r2,r3
    e168:	9000901e 	bne	r18,zero,e3ac <__umoddi3+0x41c>
    e16c:	982cd43a 	srli	r22,r19,16
    e170:	8ce3c83a 	sub	r17,r17,r19
    e174:	9d7fffcc 	andi	r21,r19,65535
    e178:	b00b883a 	mov	r5,r22
    e17c:	8809883a 	mov	r4,r17
    e180:	00040600 	call	4060 <__umodsi3>
    e184:	8809883a 	mov	r4,r17
    e188:	b00b883a 	mov	r5,r22
    e18c:	1021883a 	mov	r16,r2
    e190:	0003ffc0 	call	3ffc <__udivsi3>
    e194:	8006943a 	slli	r3,r16,16
    e198:	a008d43a 	srli	r4,r20,16
    e19c:	1545383a 	mul	r2,r2,r21
    e1a0:	20c8b03a 	or	r4,r4,r3
    e1a4:	2080042e 	bgeu	r4,r2,e1b8 <__umoddi3+0x228>
    e1a8:	24c9883a 	add	r4,r4,r19
    e1ac:	24c00236 	bltu	r4,r19,e1b8 <__umoddi3+0x228>
    e1b0:	2080012e 	bgeu	r4,r2,e1b8 <__umoddi3+0x228>
    e1b4:	24c9883a 	add	r4,r4,r19
    e1b8:	20a1c83a 	sub	r16,r4,r2
    e1bc:	b00b883a 	mov	r5,r22
    e1c0:	8009883a 	mov	r4,r16
    e1c4:	00040600 	call	4060 <__umodsi3>
    e1c8:	1023883a 	mov	r17,r2
    e1cc:	b00b883a 	mov	r5,r22
    e1d0:	8009883a 	mov	r4,r16
    e1d4:	0003ffc0 	call	3ffc <__udivsi3>
    e1d8:	8822943a 	slli	r17,r17,16
    e1dc:	1545383a 	mul	r2,r2,r21
    e1e0:	a53fffcc 	andi	r20,r20,65535
    e1e4:	a446b03a 	or	r3,r20,r17
    e1e8:	18bfb02e 	bgeu	r3,r2,e0ac <__alt_mem_onchip_memory+0xf780e0ac>
    e1ec:	003fab06 	br	e09c <__alt_mem_onchip_memory+0xf780e09c>
    e1f0:	2005883a 	mov	r2,r4
    e1f4:	2807883a 	mov	r3,r5
    e1f8:	dfc00b17 	ldw	ra,44(sp)
    e1fc:	df000a17 	ldw	fp,40(sp)
    e200:	ddc00917 	ldw	r23,36(sp)
    e204:	dd800817 	ldw	r22,32(sp)
    e208:	dd400717 	ldw	r21,28(sp)
    e20c:	dd000617 	ldw	r20,24(sp)
    e210:	dcc00517 	ldw	r19,20(sp)
    e214:	dc800417 	ldw	r18,16(sp)
    e218:	dc400317 	ldw	r17,12(sp)
    e21c:	dc000217 	ldw	r16,8(sp)
    e220:	dec00c04 	addi	sp,sp,48
    e224:	f800283a 	ret
    e228:	04c03fc4 	movi	r19,255
    e22c:	99c9803a 	cmpltu	r4,r19,r7
    e230:	200890fa 	slli	r4,r4,3
    e234:	003fa806 	br	e0d8 <__alt_mem_onchip_memory+0xf780e0d8>
    e238:	00803fc4 	movi	r2,255
    e23c:	14c5803a 	cmpltu	r2,r2,r19
    e240:	100490fa 	slli	r2,r2,3
    e244:	003fc006 	br	e148 <__alt_mem_onchip_memory+0xf780e148>
    e248:	00804034 	movhi	r2,256
    e24c:	10bfffc4 	addi	r2,r2,-1
    e250:	11808b36 	bltu	r2,r6,e480 <__umoddi3+0x4f0>
    e254:	01000404 	movi	r4,16
    e258:	003f6406 	br	dfec <__alt_mem_onchip_memory+0xf780dfec>
    e25c:	34c4d83a 	srl	r2,r6,r19
    e260:	3d0e983a 	sll	r7,r7,r20
    e264:	8cf8d83a 	srl	fp,r17,r19
    e268:	8d10983a 	sll	r8,r17,r20
    e26c:	38aab03a 	or	r21,r7,r2
    e270:	a82cd43a 	srli	r22,r21,16
    e274:	84e2d83a 	srl	r17,r16,r19
    e278:	e009883a 	mov	r4,fp
    e27c:	b00b883a 	mov	r5,r22
    e280:	8a22b03a 	or	r17,r17,r8
    e284:	3524983a 	sll	r18,r6,r20
    e288:	00040600 	call	4060 <__umodsi3>
    e28c:	e009883a 	mov	r4,fp
    e290:	b00b883a 	mov	r5,r22
    e294:	102f883a 	mov	r23,r2
    e298:	0003ffc0 	call	3ffc <__udivsi3>
    e29c:	100d883a 	mov	r6,r2
    e2a0:	b808943a 	slli	r4,r23,16
    e2a4:	aa3fffcc 	andi	r8,r21,65535
    e2a8:	8804d43a 	srli	r2,r17,16
    e2ac:	41af383a 	mul	r23,r8,r6
    e2b0:	8520983a 	sll	r16,r16,r20
    e2b4:	1104b03a 	or	r2,r2,r4
    e2b8:	15c0042e 	bgeu	r2,r23,e2cc <__umoddi3+0x33c>
    e2bc:	1545883a 	add	r2,r2,r21
    e2c0:	30ffffc4 	addi	r3,r6,-1
    e2c4:	1540742e 	bgeu	r2,r21,e498 <__umoddi3+0x508>
    e2c8:	180d883a 	mov	r6,r3
    e2cc:	15efc83a 	sub	r23,r2,r23
    e2d0:	b00b883a 	mov	r5,r22
    e2d4:	b809883a 	mov	r4,r23
    e2d8:	d9800115 	stw	r6,4(sp)
    e2dc:	da000015 	stw	r8,0(sp)
    e2e0:	00040600 	call	4060 <__umodsi3>
    e2e4:	b00b883a 	mov	r5,r22
    e2e8:	b809883a 	mov	r4,r23
    e2ec:	1039883a 	mov	fp,r2
    e2f0:	0003ffc0 	call	3ffc <__udivsi3>
    e2f4:	da000017 	ldw	r8,0(sp)
    e2f8:	e038943a 	slli	fp,fp,16
    e2fc:	100b883a 	mov	r5,r2
    e300:	4089383a 	mul	r4,r8,r2
    e304:	8a3fffcc 	andi	r8,r17,65535
    e308:	4710b03a 	or	r8,r8,fp
    e30c:	d9800117 	ldw	r6,4(sp)
    e310:	4100042e 	bgeu	r8,r4,e324 <__umoddi3+0x394>
    e314:	4551883a 	add	r8,r8,r21
    e318:	10bfffc4 	addi	r2,r2,-1
    e31c:	45405a2e 	bgeu	r8,r21,e488 <__umoddi3+0x4f8>
    e320:	100b883a 	mov	r5,r2
    e324:	300c943a 	slli	r6,r6,16
    e328:	91ffffcc 	andi	r7,r18,65535
    e32c:	9004d43a 	srli	r2,r18,16
    e330:	314cb03a 	or	r6,r6,r5
    e334:	317fffcc 	andi	r5,r6,65535
    e338:	300cd43a 	srli	r6,r6,16
    e33c:	29d3383a 	mul	r9,r5,r7
    e340:	288b383a 	mul	r5,r5,r2
    e344:	31cf383a 	mul	r7,r6,r7
    e348:	4806d43a 	srli	r3,r9,16
    e34c:	4111c83a 	sub	r8,r8,r4
    e350:	29cb883a 	add	r5,r5,r7
    e354:	194b883a 	add	r5,r3,r5
    e358:	3085383a 	mul	r2,r6,r2
    e35c:	29c0022e 	bgeu	r5,r7,e368 <__umoddi3+0x3d8>
    e360:	00c00074 	movhi	r3,1
    e364:	10c5883a 	add	r2,r2,r3
    e368:	2808d43a 	srli	r4,r5,16
    e36c:	280a943a 	slli	r5,r5,16
    e370:	4a7fffcc 	andi	r9,r9,65535
    e374:	2085883a 	add	r2,r4,r2
    e378:	2a4b883a 	add	r5,r5,r9
    e37c:	40803636 	bltu	r8,r2,e458 <__umoddi3+0x4c8>
    e380:	40804d26 	beq	r8,r2,e4b8 <__umoddi3+0x528>
    e384:	4089c83a 	sub	r4,r8,r2
    e388:	280f883a 	mov	r7,r5
    e38c:	81cfc83a 	sub	r7,r16,r7
    e390:	81c7803a 	cmpltu	r3,r16,r7
    e394:	20c7c83a 	sub	r3,r4,r3
    e398:	1cc4983a 	sll	r2,r3,r19
    e39c:	3d0ed83a 	srl	r7,r7,r20
    e3a0:	1d06d83a 	srl	r3,r3,r20
    e3a4:	11c4b03a 	or	r2,r2,r7
    e3a8:	003f9306 	br	e1f8 <__alt_mem_onchip_memory+0xf780e1f8>
    e3ac:	9ca6983a 	sll	r19,r19,r18
    e3b0:	88e8d83a 	srl	r20,r17,r3
    e3b4:	80c4d83a 	srl	r2,r16,r3
    e3b8:	982cd43a 	srli	r22,r19,16
    e3bc:	8ca2983a 	sll	r17,r17,r18
    e3c0:	a009883a 	mov	r4,r20
    e3c4:	b00b883a 	mov	r5,r22
    e3c8:	1478b03a 	or	fp,r2,r17
    e3cc:	00040600 	call	4060 <__umodsi3>
    e3d0:	a009883a 	mov	r4,r20
    e3d4:	b00b883a 	mov	r5,r22
    e3d8:	1023883a 	mov	r17,r2
    e3dc:	0003ffc0 	call	3ffc <__udivsi3>
    e3e0:	9d7fffcc 	andi	r21,r19,65535
    e3e4:	880a943a 	slli	r5,r17,16
    e3e8:	e008d43a 	srli	r4,fp,16
    e3ec:	a885383a 	mul	r2,r21,r2
    e3f0:	84a8983a 	sll	r20,r16,r18
    e3f4:	2148b03a 	or	r4,r4,r5
    e3f8:	2080042e 	bgeu	r4,r2,e40c <__umoddi3+0x47c>
    e3fc:	24c9883a 	add	r4,r4,r19
    e400:	24c00236 	bltu	r4,r19,e40c <__umoddi3+0x47c>
    e404:	2080012e 	bgeu	r4,r2,e40c <__umoddi3+0x47c>
    e408:	24c9883a 	add	r4,r4,r19
    e40c:	20a3c83a 	sub	r17,r4,r2
    e410:	b00b883a 	mov	r5,r22
    e414:	8809883a 	mov	r4,r17
    e418:	00040600 	call	4060 <__umodsi3>
    e41c:	102f883a 	mov	r23,r2
    e420:	8809883a 	mov	r4,r17
    e424:	b00b883a 	mov	r5,r22
    e428:	0003ffc0 	call	3ffc <__udivsi3>
    e42c:	b82e943a 	slli	r23,r23,16
    e430:	a885383a 	mul	r2,r21,r2
    e434:	e13fffcc 	andi	r4,fp,65535
    e438:	25c8b03a 	or	r4,r4,r23
    e43c:	2080042e 	bgeu	r4,r2,e450 <__umoddi3+0x4c0>
    e440:	24c9883a 	add	r4,r4,r19
    e444:	24c00236 	bltu	r4,r19,e450 <__umoddi3+0x4c0>
    e448:	2080012e 	bgeu	r4,r2,e450 <__umoddi3+0x4c0>
    e44c:	24c9883a 	add	r4,r4,r19
    e450:	20a3c83a 	sub	r17,r4,r2
    e454:	003f4806 	br	e178 <__alt_mem_onchip_memory+0xf780e178>
    e458:	2c8fc83a 	sub	r7,r5,r18
    e45c:	1545c83a 	sub	r2,r2,r21
    e460:	29cb803a 	cmpltu	r5,r5,r7
    e464:	1145c83a 	sub	r2,r2,r5
    e468:	4089c83a 	sub	r4,r8,r2
    e46c:	003fc706 	br	e38c <__alt_mem_onchip_memory+0xf780e38c>
    e470:	01000604 	movi	r4,24
    e474:	003f1806 	br	e0d8 <__alt_mem_onchip_memory+0xf780e0d8>
    e478:	00800604 	movi	r2,24
    e47c:	003f3206 	br	e148 <__alt_mem_onchip_memory+0xf780e148>
    e480:	01000604 	movi	r4,24
    e484:	003ed906 	br	dfec <__alt_mem_onchip_memory+0xf780dfec>
    e488:	413fa52e 	bgeu	r8,r4,e320 <__alt_mem_onchip_memory+0xf780e320>
    e48c:	297fff84 	addi	r5,r5,-2
    e490:	4551883a 	add	r8,r8,r21
    e494:	003fa306 	br	e324 <__alt_mem_onchip_memory+0xf780e324>
    e498:	15ff8b2e 	bgeu	r2,r23,e2c8 <__alt_mem_onchip_memory+0xf780e2c8>
    e49c:	31bfff84 	addi	r6,r6,-2
    e4a0:	1545883a 	add	r2,r2,r21
    e4a4:	003f8906 	br	e2cc <__alt_mem_onchip_memory+0xf780e2cc>
    e4a8:	24c9883a 	add	r4,r4,r19
    e4ac:	003eee06 	br	e068 <__alt_mem_onchip_memory+0xf780e068>
    e4b0:	8005883a 	mov	r2,r16
    e4b4:	003f1706 	br	e114 <__alt_mem_onchip_memory+0xf780e114>
    e4b8:	817fe736 	bltu	r16,r5,e458 <__alt_mem_onchip_memory+0xf780e458>
    e4bc:	280f883a 	mov	r7,r5
    e4c0:	0009883a 	mov	r4,zero
    e4c4:	003fb106 	br	e38c <__alt_mem_onchip_memory+0xf780e38c>

0000e4c8 <__eqdf2>:
    e4c8:	2804d53a 	srli	r2,r5,20
    e4cc:	3806d53a 	srli	r3,r7,20
    e4d0:	02000434 	movhi	r8,16
    e4d4:	423fffc4 	addi	r8,r8,-1
    e4d8:	1081ffcc 	andi	r2,r2,2047
    e4dc:	0281ffc4 	movi	r10,2047
    e4e0:	2a12703a 	and	r9,r5,r8
    e4e4:	18c1ffcc 	andi	r3,r3,2047
    e4e8:	3a10703a 	and	r8,r7,r8
    e4ec:	280ad7fa 	srli	r5,r5,31
    e4f0:	380ed7fa 	srli	r7,r7,31
    e4f4:	12801026 	beq	r2,r10,e538 <__eqdf2+0x70>
    e4f8:	0281ffc4 	movi	r10,2047
    e4fc:	1a800a26 	beq	r3,r10,e528 <__eqdf2+0x60>
    e500:	10c00226 	beq	r2,r3,e50c <__eqdf2+0x44>
    e504:	00800044 	movi	r2,1
    e508:	f800283a 	ret
    e50c:	4a3ffd1e 	bne	r9,r8,e504 <__alt_mem_onchip_memory+0xf780e504>
    e510:	21bffc1e 	bne	r4,r6,e504 <__alt_mem_onchip_memory+0xf780e504>
    e514:	29c00c26 	beq	r5,r7,e548 <__eqdf2+0x80>
    e518:	103ffa1e 	bne	r2,zero,e504 <__alt_mem_onchip_memory+0xf780e504>
    e51c:	2244b03a 	or	r2,r4,r9
    e520:	1004c03a 	cmpne	r2,r2,zero
    e524:	f800283a 	ret
    e528:	3214b03a 	or	r10,r6,r8
    e52c:	503ff426 	beq	r10,zero,e500 <__alt_mem_onchip_memory+0xf780e500>
    e530:	00800044 	movi	r2,1
    e534:	f800283a 	ret
    e538:	2254b03a 	or	r10,r4,r9
    e53c:	503fee26 	beq	r10,zero,e4f8 <__alt_mem_onchip_memory+0xf780e4f8>
    e540:	00800044 	movi	r2,1
    e544:	f800283a 	ret
    e548:	0005883a 	mov	r2,zero
    e54c:	f800283a 	ret

0000e550 <__gedf2>:
    e550:	2804d53a 	srli	r2,r5,20
    e554:	3806d53a 	srli	r3,r7,20
    e558:	02000434 	movhi	r8,16
    e55c:	423fffc4 	addi	r8,r8,-1
    e560:	1081ffcc 	andi	r2,r2,2047
    e564:	0241ffc4 	movi	r9,2047
    e568:	2a14703a 	and	r10,r5,r8
    e56c:	18c1ffcc 	andi	r3,r3,2047
    e570:	3a10703a 	and	r8,r7,r8
    e574:	280ad7fa 	srli	r5,r5,31
    e578:	380ed7fa 	srli	r7,r7,31
    e57c:	12401d26 	beq	r2,r9,e5f4 <__gedf2+0xa4>
    e580:	0241ffc4 	movi	r9,2047
    e584:	1a401226 	beq	r3,r9,e5d0 <__gedf2+0x80>
    e588:	1000081e 	bne	r2,zero,e5ac <__gedf2+0x5c>
    e58c:	2296b03a 	or	r11,r4,r10
    e590:	5813003a 	cmpeq	r9,r11,zero
    e594:	1800091e 	bne	r3,zero,e5bc <__gedf2+0x6c>
    e598:	3218b03a 	or	r12,r6,r8
    e59c:	6000071e 	bne	r12,zero,e5bc <__gedf2+0x6c>
    e5a0:	0005883a 	mov	r2,zero
    e5a4:	5800101e 	bne	r11,zero,e5e8 <__gedf2+0x98>
    e5a8:	f800283a 	ret
    e5ac:	18000c1e 	bne	r3,zero,e5e0 <__gedf2+0x90>
    e5b0:	3212b03a 	or	r9,r6,r8
    e5b4:	48000c26 	beq	r9,zero,e5e8 <__gedf2+0x98>
    e5b8:	0013883a 	mov	r9,zero
    e5bc:	39c03fcc 	andi	r7,r7,255
    e5c0:	48000826 	beq	r9,zero,e5e4 <__gedf2+0x94>
    e5c4:	38000926 	beq	r7,zero,e5ec <__gedf2+0x9c>
    e5c8:	00800044 	movi	r2,1
    e5cc:	f800283a 	ret
    e5d0:	3212b03a 	or	r9,r6,r8
    e5d4:	483fec26 	beq	r9,zero,e588 <__alt_mem_onchip_memory+0xf780e588>
    e5d8:	00bfff84 	movi	r2,-2
    e5dc:	f800283a 	ret
    e5e0:	39c03fcc 	andi	r7,r7,255
    e5e4:	29c00626 	beq	r5,r7,e600 <__gedf2+0xb0>
    e5e8:	283ff726 	beq	r5,zero,e5c8 <__alt_mem_onchip_memory+0xf780e5c8>
    e5ec:	00bfffc4 	movi	r2,-1
    e5f0:	f800283a 	ret
    e5f4:	2292b03a 	or	r9,r4,r10
    e5f8:	483fe126 	beq	r9,zero,e580 <__alt_mem_onchip_memory+0xf780e580>
    e5fc:	003ff606 	br	e5d8 <__alt_mem_onchip_memory+0xf780e5d8>
    e600:	18bff916 	blt	r3,r2,e5e8 <__alt_mem_onchip_memory+0xf780e5e8>
    e604:	10c00316 	blt	r2,r3,e614 <__gedf2+0xc4>
    e608:	42bff736 	bltu	r8,r10,e5e8 <__alt_mem_onchip_memory+0xf780e5e8>
    e60c:	52000326 	beq	r10,r8,e61c <__gedf2+0xcc>
    e610:	5200042e 	bgeu	r10,r8,e624 <__gedf2+0xd4>
    e614:	283fec1e 	bne	r5,zero,e5c8 <__alt_mem_onchip_memory+0xf780e5c8>
    e618:	003ff406 	br	e5ec <__alt_mem_onchip_memory+0xf780e5ec>
    e61c:	313ff236 	bltu	r6,r4,e5e8 <__alt_mem_onchip_memory+0xf780e5e8>
    e620:	21bffc36 	bltu	r4,r6,e614 <__alt_mem_onchip_memory+0xf780e614>
    e624:	0005883a 	mov	r2,zero
    e628:	f800283a 	ret

0000e62c <__fixdfsi>:
    e62c:	280cd53a 	srli	r6,r5,20
    e630:	00c00434 	movhi	r3,16
    e634:	18ffffc4 	addi	r3,r3,-1
    e638:	3181ffcc 	andi	r6,r6,2047
    e63c:	01c0ff84 	movi	r7,1022
    e640:	28c6703a 	and	r3,r5,r3
    e644:	280ad7fa 	srli	r5,r5,31
    e648:	3980120e 	bge	r7,r6,e694 <__fixdfsi+0x68>
    e64c:	00810744 	movi	r2,1053
    e650:	11800c16 	blt	r2,r6,e684 <__fixdfsi+0x58>
    e654:	00810cc4 	movi	r2,1075
    e658:	1185c83a 	sub	r2,r2,r6
    e65c:	01c007c4 	movi	r7,31
    e660:	18c00434 	orhi	r3,r3,16
    e664:	38800d16 	blt	r7,r2,e69c <__fixdfsi+0x70>
    e668:	31befb44 	addi	r6,r6,-1043
    e66c:	2084d83a 	srl	r2,r4,r2
    e670:	1986983a 	sll	r3,r3,r6
    e674:	1884b03a 	or	r2,r3,r2
    e678:	28000726 	beq	r5,zero,e698 <__fixdfsi+0x6c>
    e67c:	0085c83a 	sub	r2,zero,r2
    e680:	f800283a 	ret
    e684:	00a00034 	movhi	r2,32768
    e688:	10bfffc4 	addi	r2,r2,-1
    e68c:	2885883a 	add	r2,r5,r2
    e690:	f800283a 	ret
    e694:	0005883a 	mov	r2,zero
    e698:	f800283a 	ret
    e69c:	008104c4 	movi	r2,1043
    e6a0:	1185c83a 	sub	r2,r2,r6
    e6a4:	1884d83a 	srl	r2,r3,r2
    e6a8:	003ff306 	br	e678 <__alt_mem_onchip_memory+0xf780e678>

0000e6ac <__floatsidf>:
    e6ac:	defffd04 	addi	sp,sp,-12
    e6b0:	dfc00215 	stw	ra,8(sp)
    e6b4:	dc400115 	stw	r17,4(sp)
    e6b8:	dc000015 	stw	r16,0(sp)
    e6bc:	20002b26 	beq	r4,zero,e76c <__floatsidf+0xc0>
    e6c0:	2023883a 	mov	r17,r4
    e6c4:	2020d7fa 	srli	r16,r4,31
    e6c8:	20002d16 	blt	r4,zero,e780 <__floatsidf+0xd4>
    e6cc:	8809883a 	mov	r4,r17
    e6d0:	0003ea00 	call	3ea0 <__clzsi2>
    e6d4:	01410784 	movi	r5,1054
    e6d8:	288bc83a 	sub	r5,r5,r2
    e6dc:	01010cc4 	movi	r4,1075
    e6e0:	2149c83a 	sub	r4,r4,r5
    e6e4:	00c007c4 	movi	r3,31
    e6e8:	1900160e 	bge	r3,r4,e744 <__floatsidf+0x98>
    e6ec:	00c104c4 	movi	r3,1043
    e6f0:	1947c83a 	sub	r3,r3,r5
    e6f4:	88c6983a 	sll	r3,r17,r3
    e6f8:	00800434 	movhi	r2,16
    e6fc:	10bfffc4 	addi	r2,r2,-1
    e700:	1886703a 	and	r3,r3,r2
    e704:	2941ffcc 	andi	r5,r5,2047
    e708:	800d883a 	mov	r6,r16
    e70c:	0005883a 	mov	r2,zero
    e710:	280a953a 	slli	r5,r5,20
    e714:	31803fcc 	andi	r6,r6,255
    e718:	01000434 	movhi	r4,16
    e71c:	300c97fa 	slli	r6,r6,31
    e720:	213fffc4 	addi	r4,r4,-1
    e724:	1906703a 	and	r3,r3,r4
    e728:	1946b03a 	or	r3,r3,r5
    e72c:	1986b03a 	or	r3,r3,r6
    e730:	dfc00217 	ldw	ra,8(sp)
    e734:	dc400117 	ldw	r17,4(sp)
    e738:	dc000017 	ldw	r16,0(sp)
    e73c:	dec00304 	addi	sp,sp,12
    e740:	f800283a 	ret
    e744:	00c002c4 	movi	r3,11
    e748:	1887c83a 	sub	r3,r3,r2
    e74c:	88c6d83a 	srl	r3,r17,r3
    e750:	8904983a 	sll	r2,r17,r4
    e754:	01000434 	movhi	r4,16
    e758:	213fffc4 	addi	r4,r4,-1
    e75c:	2941ffcc 	andi	r5,r5,2047
    e760:	1906703a 	and	r3,r3,r4
    e764:	800d883a 	mov	r6,r16
    e768:	003fe906 	br	e710 <__alt_mem_onchip_memory+0xf780e710>
    e76c:	000d883a 	mov	r6,zero
    e770:	000b883a 	mov	r5,zero
    e774:	0007883a 	mov	r3,zero
    e778:	0005883a 	mov	r2,zero
    e77c:	003fe406 	br	e710 <__alt_mem_onchip_memory+0xf780e710>
    e780:	0123c83a 	sub	r17,zero,r4
    e784:	003fd106 	br	e6cc <__alt_mem_onchip_memory+0xf780e6cc>

0000e788 <__floatunsidf>:
    e788:	defffe04 	addi	sp,sp,-8
    e78c:	dc000015 	stw	r16,0(sp)
    e790:	dfc00115 	stw	ra,4(sp)
    e794:	2021883a 	mov	r16,r4
    e798:	20002226 	beq	r4,zero,e824 <__floatunsidf+0x9c>
    e79c:	0003ea00 	call	3ea0 <__clzsi2>
    e7a0:	01010784 	movi	r4,1054
    e7a4:	2089c83a 	sub	r4,r4,r2
    e7a8:	01810cc4 	movi	r6,1075
    e7ac:	310dc83a 	sub	r6,r6,r4
    e7b0:	00c007c4 	movi	r3,31
    e7b4:	1980120e 	bge	r3,r6,e800 <__floatunsidf+0x78>
    e7b8:	00c104c4 	movi	r3,1043
    e7bc:	1907c83a 	sub	r3,r3,r4
    e7c0:	80ca983a 	sll	r5,r16,r3
    e7c4:	00800434 	movhi	r2,16
    e7c8:	10bfffc4 	addi	r2,r2,-1
    e7cc:	2101ffcc 	andi	r4,r4,2047
    e7d0:	0021883a 	mov	r16,zero
    e7d4:	288a703a 	and	r5,r5,r2
    e7d8:	2008953a 	slli	r4,r4,20
    e7dc:	00c00434 	movhi	r3,16
    e7e0:	18ffffc4 	addi	r3,r3,-1
    e7e4:	28c6703a 	and	r3,r5,r3
    e7e8:	8005883a 	mov	r2,r16
    e7ec:	1906b03a 	or	r3,r3,r4
    e7f0:	dfc00117 	ldw	ra,4(sp)
    e7f4:	dc000017 	ldw	r16,0(sp)
    e7f8:	dec00204 	addi	sp,sp,8
    e7fc:	f800283a 	ret
    e800:	00c002c4 	movi	r3,11
    e804:	188bc83a 	sub	r5,r3,r2
    e808:	814ad83a 	srl	r5,r16,r5
    e80c:	00c00434 	movhi	r3,16
    e810:	18ffffc4 	addi	r3,r3,-1
    e814:	81a0983a 	sll	r16,r16,r6
    e818:	2101ffcc 	andi	r4,r4,2047
    e81c:	28ca703a 	and	r5,r5,r3
    e820:	003fed06 	br	e7d8 <__alt_mem_onchip_memory+0xf780e7d8>
    e824:	0009883a 	mov	r4,zero
    e828:	000b883a 	mov	r5,zero
    e82c:	003fea06 	br	e7d8 <__alt_mem_onchip_memory+0xf780e7d8>

0000e830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e830:	defffe04 	addi	sp,sp,-8
    e834:	dfc00115 	stw	ra,4(sp)
    e838:	df000015 	stw	fp,0(sp)
    e83c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e840:	d0a01017 	ldw	r2,-32704(gp)
    e844:	10000326 	beq	r2,zero,e854 <alt_get_errno+0x24>
    e848:	d0a01017 	ldw	r2,-32704(gp)
    e84c:	103ee83a 	callr	r2
    e850:	00000106 	br	e858 <alt_get_errno+0x28>
    e854:	d0a6dc04 	addi	r2,gp,-25744
}
    e858:	e037883a 	mov	sp,fp
    e85c:	dfc00117 	ldw	ra,4(sp)
    e860:	df000017 	ldw	fp,0(sp)
    e864:	dec00204 	addi	sp,sp,8
    e868:	f800283a 	ret

0000e86c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e86c:	defffb04 	addi	sp,sp,-20
    e870:	dfc00415 	stw	ra,16(sp)
    e874:	df000315 	stw	fp,12(sp)
    e878:	df000304 	addi	fp,sp,12
    e87c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e880:	e0bfff17 	ldw	r2,-4(fp)
    e884:	10000616 	blt	r2,zero,e8a0 <close+0x34>
    e888:	e0bfff17 	ldw	r2,-4(fp)
    e88c:	10c00324 	muli	r3,r2,12
    e890:	00800074 	movhi	r2,1
    e894:	1088f904 	addi	r2,r2,9188
    e898:	1885883a 	add	r2,r3,r2
    e89c:	00000106 	br	e8a4 <close+0x38>
    e8a0:	0005883a 	mov	r2,zero
    e8a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e8a8:	e0bffd17 	ldw	r2,-12(fp)
    e8ac:	10001926 	beq	r2,zero,e914 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e8b0:	e0bffd17 	ldw	r2,-12(fp)
    e8b4:	10800017 	ldw	r2,0(r2)
    e8b8:	10800417 	ldw	r2,16(r2)
    e8bc:	10000626 	beq	r2,zero,e8d8 <close+0x6c>
    e8c0:	e0bffd17 	ldw	r2,-12(fp)
    e8c4:	10800017 	ldw	r2,0(r2)
    e8c8:	10800417 	ldw	r2,16(r2)
    e8cc:	e13ffd17 	ldw	r4,-12(fp)
    e8d0:	103ee83a 	callr	r2
    e8d4:	00000106 	br	e8dc <close+0x70>
    e8d8:	0005883a 	mov	r2,zero
    e8dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e8e0:	e13fff17 	ldw	r4,-4(fp)
    e8e4:	000f1200 	call	f120 <alt_release_fd>
    if (rval < 0)
    e8e8:	e0bffe17 	ldw	r2,-8(fp)
    e8ec:	1000070e 	bge	r2,zero,e90c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e8f0:	000e8300 	call	e830 <alt_get_errno>
    e8f4:	1007883a 	mov	r3,r2
    e8f8:	e0bffe17 	ldw	r2,-8(fp)
    e8fc:	0085c83a 	sub	r2,zero,r2
    e900:	18800015 	stw	r2,0(r3)
      return -1;
    e904:	00bfffc4 	movi	r2,-1
    e908:	00000706 	br	e928 <close+0xbc>
    }
    return 0;
    e90c:	0005883a 	mov	r2,zero
    e910:	00000506 	br	e928 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e914:	000e8300 	call	e830 <alt_get_errno>
    e918:	1007883a 	mov	r3,r2
    e91c:	00801444 	movi	r2,81
    e920:	18800015 	stw	r2,0(r3)
    return -1;
    e924:	00bfffc4 	movi	r2,-1
  }
}
    e928:	e037883a 	mov	sp,fp
    e92c:	dfc00117 	ldw	ra,4(sp)
    e930:	df000017 	ldw	fp,0(sp)
    e934:	dec00204 	addi	sp,sp,8
    e938:	f800283a 	ret

0000e93c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e93c:	defffc04 	addi	sp,sp,-16
    e940:	df000315 	stw	fp,12(sp)
    e944:	df000304 	addi	fp,sp,12
    e948:	e13ffd15 	stw	r4,-12(fp)
    e94c:	e17ffe15 	stw	r5,-8(fp)
    e950:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e954:	e0bfff17 	ldw	r2,-4(fp)
}
    e958:	e037883a 	mov	sp,fp
    e95c:	df000017 	ldw	fp,0(sp)
    e960:	dec00104 	addi	sp,sp,4
    e964:	f800283a 	ret

0000e968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e968:	defffe04 	addi	sp,sp,-8
    e96c:	dfc00115 	stw	ra,4(sp)
    e970:	df000015 	stw	fp,0(sp)
    e974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e978:	d0a01017 	ldw	r2,-32704(gp)
    e97c:	10000326 	beq	r2,zero,e98c <alt_get_errno+0x24>
    e980:	d0a01017 	ldw	r2,-32704(gp)
    e984:	103ee83a 	callr	r2
    e988:	00000106 	br	e990 <alt_get_errno+0x28>
    e98c:	d0a6dc04 	addi	r2,gp,-25744
}
    e990:	e037883a 	mov	sp,fp
    e994:	dfc00117 	ldw	ra,4(sp)
    e998:	df000017 	ldw	fp,0(sp)
    e99c:	dec00204 	addi	sp,sp,8
    e9a0:	f800283a 	ret

0000e9a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e9a4:	defffb04 	addi	sp,sp,-20
    e9a8:	dfc00415 	stw	ra,16(sp)
    e9ac:	df000315 	stw	fp,12(sp)
    e9b0:	df000304 	addi	fp,sp,12
    e9b4:	e13ffe15 	stw	r4,-8(fp)
    e9b8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e9bc:	e0bffe17 	ldw	r2,-8(fp)
    e9c0:	10000616 	blt	r2,zero,e9dc <fstat+0x38>
    e9c4:	e0bffe17 	ldw	r2,-8(fp)
    e9c8:	10c00324 	muli	r3,r2,12
    e9cc:	00800074 	movhi	r2,1
    e9d0:	1088f904 	addi	r2,r2,9188
    e9d4:	1885883a 	add	r2,r3,r2
    e9d8:	00000106 	br	e9e0 <fstat+0x3c>
    e9dc:	0005883a 	mov	r2,zero
    e9e0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e9e4:	e0bffd17 	ldw	r2,-12(fp)
    e9e8:	10001026 	beq	r2,zero,ea2c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e9ec:	e0bffd17 	ldw	r2,-12(fp)
    e9f0:	10800017 	ldw	r2,0(r2)
    e9f4:	10800817 	ldw	r2,32(r2)
    e9f8:	10000726 	beq	r2,zero,ea18 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e9fc:	e0bffd17 	ldw	r2,-12(fp)
    ea00:	10800017 	ldw	r2,0(r2)
    ea04:	10800817 	ldw	r2,32(r2)
    ea08:	e17fff17 	ldw	r5,-4(fp)
    ea0c:	e13ffd17 	ldw	r4,-12(fp)
    ea10:	103ee83a 	callr	r2
    ea14:	00000a06 	br	ea40 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ea18:	e0bfff17 	ldw	r2,-4(fp)
    ea1c:	00c80004 	movi	r3,8192
    ea20:	10c00115 	stw	r3,4(r2)
      return 0;
    ea24:	0005883a 	mov	r2,zero
    ea28:	00000506 	br	ea40 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ea2c:	000e9680 	call	e968 <alt_get_errno>
    ea30:	1007883a 	mov	r3,r2
    ea34:	00801444 	movi	r2,81
    ea38:	18800015 	stw	r2,0(r3)
    return -1;
    ea3c:	00bfffc4 	movi	r2,-1
  }
}
    ea40:	e037883a 	mov	sp,fp
    ea44:	dfc00117 	ldw	ra,4(sp)
    ea48:	df000017 	ldw	fp,0(sp)
    ea4c:	dec00204 	addi	sp,sp,8
    ea50:	f800283a 	ret

0000ea54 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    ea54:	defff404 	addi	sp,sp,-48
    ea58:	dfc00b15 	stw	ra,44(sp)
    ea5c:	df000a15 	stw	fp,40(sp)
    ea60:	dd000915 	stw	r20,36(sp)
    ea64:	dcc00815 	stw	r19,32(sp)
    ea68:	dc800715 	stw	r18,28(sp)
    ea6c:	dc400615 	stw	r17,24(sp)
    ea70:	dc000515 	stw	r16,20(sp)
    ea74:	df000a04 	addi	fp,sp,40
    ea78:	e13ff915 	stw	r4,-28(fp)
    ea7c:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    ea80:	e0bffa17 	ldw	r2,-24(fp)
    ea84:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ea88:	d0a6eb17 	ldw	r2,-25684(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    ea8c:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ea90:	d0a6ea17 	ldw	r2,-25688(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    ea94:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    ea98:	e0bff817 	ldw	r2,-32(fp)
    ea9c:	10005f26 	beq	r2,zero,ec1c <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    eaa0:	d0a6e517 	ldw	r2,-25708(gp)
    eaa4:	1029883a 	mov	r20,r2
    eaa8:	e17ff817 	ldw	r5,-32(fp)
    eaac:	e13ff717 	ldw	r4,-36(fp)
    eab0:	0003ffc0 	call	3ffc <__udivsi3>
    eab4:	a085883a 	add	r2,r20,r2
    eab8:	1007883a 	mov	r3,r2
    eabc:	e0bff917 	ldw	r2,-28(fp)
    eac0:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    eac4:	d0a6e617 	ldw	r2,-25704(gp)
    eac8:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    eacc:	e0bff717 	ldw	r2,-36(fp)
    ead0:	1021883a 	mov	r16,r2
    ead4:	0023883a 	mov	r17,zero
    ead8:	e17ff817 	ldw	r5,-32(fp)
    eadc:	010003f4 	movhi	r4,15
    eae0:	21109004 	addi	r4,r4,16960
    eae4:	0003ffc0 	call	3ffc <__udivsi3>
    eae8:	1025883a 	mov	r18,r2
    eaec:	0027883a 	mov	r19,zero
    eaf0:	900d883a 	mov	r6,r18
    eaf4:	980f883a 	mov	r7,r19
    eaf8:	8009883a 	mov	r4,r16
    eafc:	880b883a 	mov	r5,r17
    eb00:	000d9b80 	call	d9b8 <__muldi3>
    eb04:	1009883a 	mov	r4,r2
    eb08:	180b883a 	mov	r5,r3
    eb0c:	2005883a 	mov	r2,r4
    eb10:	2807883a 	mov	r3,r5
    eb14:	018003f4 	movhi	r6,15
    eb18:	31909004 	addi	r6,r6,16960
    eb1c:	000f883a 	mov	r7,zero
    eb20:	1009883a 	mov	r4,r2
    eb24:	180b883a 	mov	r5,r3
    eb28:	000df900 	call	df90 <__umoddi3>
    eb2c:	1009883a 	mov	r4,r2
    eb30:	180b883a 	mov	r5,r3
    eb34:	2005883a 	mov	r2,r4
    eb38:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    eb3c:	a085883a 	add	r2,r20,r2
    eb40:	1007883a 	mov	r3,r2
    eb44:	e0bff917 	ldw	r2,-28(fp)
    eb48:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    eb4c:	00001406 	br	eba0 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
    eb50:	e0bff917 	ldw	r2,-28(fp)
    eb54:	10800017 	ldw	r2,0(r2)
    eb58:	00800516 	blt	zero,r2,eb70 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
    eb5c:	e0bff917 	ldw	r2,-28(fp)
    eb60:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    eb64:	e0bff917 	ldw	r2,-28(fp)
    eb68:	10000115 	stw	zero,4(r2)
          break;
    eb6c:	00000f06 	br	ebac <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
    eb70:	e0bff917 	ldw	r2,-28(fp)
    eb74:	10800017 	ldw	r2,0(r2)
    eb78:	10ffffc4 	addi	r3,r2,-1
    eb7c:	e0bff917 	ldw	r2,-28(fp)
    eb80:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    eb84:	e0bff917 	ldw	r2,-28(fp)
    eb88:	10c00117 	ldw	r3,4(r2)
    eb8c:	008003f4 	movhi	r2,15
    eb90:	10909004 	addi	r2,r2,16960
    eb94:	1887883a 	add	r3,r3,r2
    eb98:	e0bff917 	ldw	r2,-28(fp)
    eb9c:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    eba0:	e0bff917 	ldw	r2,-28(fp)
    eba4:	10800117 	ldw	r2,4(r2)
    eba8:	103fe916 	blt	r2,zero,eb50 <__alt_mem_onchip_memory+0xf780eb50>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    ebac:	00000c06 	br	ebe0 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
    ebb0:	e0bff917 	ldw	r2,-28(fp)
    ebb4:	10800017 	ldw	r2,0(r2)
    ebb8:	10c00044 	addi	r3,r2,1
    ebbc:	e0bff917 	ldw	r2,-28(fp)
    ebc0:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    ebc4:	e0bff917 	ldw	r2,-28(fp)
    ebc8:	10c00117 	ldw	r3,4(r2)
    ebcc:	00bffc74 	movhi	r2,65521
    ebd0:	10af7004 	addi	r2,r2,-16960
    ebd4:	1887883a 	add	r3,r3,r2
    ebd8:	e0bff917 	ldw	r2,-28(fp)
    ebdc:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    ebe0:	e0bff917 	ldw	r2,-28(fp)
    ebe4:	10c00117 	ldw	r3,4(r2)
    ebe8:	008003f4 	movhi	r2,15
    ebec:	10908fc4 	addi	r2,r2,16959
    ebf0:	10ffef16 	blt	r2,r3,ebb0 <__alt_mem_onchip_memory+0xf780ebb0>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    ebf4:	e0bff617 	ldw	r2,-40(fp)
    ebf8:	10000626 	beq	r2,zero,ec14 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    ebfc:	d0e6e317 	ldw	r3,-25716(gp)
    ec00:	e0bff617 	ldw	r2,-40(fp)
    ec04:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    ec08:	d0e6e417 	ldw	r3,-25712(gp)
    ec0c:	e0bff617 	ldw	r2,-40(fp)
    ec10:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    ec14:	0005883a 	mov	r2,zero
    ec18:	00000106 	br	ec20 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
    ec1c:	00bfde84 	movi	r2,-134
}
    ec20:	e6fffb04 	addi	sp,fp,-20
    ec24:	dfc00617 	ldw	ra,24(sp)
    ec28:	df000517 	ldw	fp,20(sp)
    ec2c:	dd000417 	ldw	r20,16(sp)
    ec30:	dcc00317 	ldw	r19,12(sp)
    ec34:	dc800217 	ldw	r18,8(sp)
    ec38:	dc400117 	ldw	r17,4(sp)
    ec3c:	dc000017 	ldw	r16,0(sp)
    ec40:	dec00704 	addi	sp,sp,28
    ec44:	f800283a 	ret

0000ec48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec48:	defffe04 	addi	sp,sp,-8
    ec4c:	dfc00115 	stw	ra,4(sp)
    ec50:	df000015 	stw	fp,0(sp)
    ec54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ec58:	d0a01017 	ldw	r2,-32704(gp)
    ec5c:	10000326 	beq	r2,zero,ec6c <alt_get_errno+0x24>
    ec60:	d0a01017 	ldw	r2,-32704(gp)
    ec64:	103ee83a 	callr	r2
    ec68:	00000106 	br	ec70 <alt_get_errno+0x28>
    ec6c:	d0a6dc04 	addi	r2,gp,-25744
}
    ec70:	e037883a 	mov	sp,fp
    ec74:	dfc00117 	ldw	ra,4(sp)
    ec78:	df000017 	ldw	fp,0(sp)
    ec7c:	dec00204 	addi	sp,sp,8
    ec80:	f800283a 	ret

0000ec84 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ec84:	deffed04 	addi	sp,sp,-76
    ec88:	dfc01215 	stw	ra,72(sp)
    ec8c:	df001115 	stw	fp,68(sp)
    ec90:	df001104 	addi	fp,sp,68
    ec94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec98:	e0bfff17 	ldw	r2,-4(fp)
    ec9c:	10000616 	blt	r2,zero,ecb8 <isatty+0x34>
    eca0:	e0bfff17 	ldw	r2,-4(fp)
    eca4:	10c00324 	muli	r3,r2,12
    eca8:	00800074 	movhi	r2,1
    ecac:	1088f904 	addi	r2,r2,9188
    ecb0:	1885883a 	add	r2,r3,r2
    ecb4:	00000106 	br	ecbc <isatty+0x38>
    ecb8:	0005883a 	mov	r2,zero
    ecbc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ecc0:	e0bfef17 	ldw	r2,-68(fp)
    ecc4:	10000e26 	beq	r2,zero,ed00 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ecc8:	e0bfef17 	ldw	r2,-68(fp)
    eccc:	10800017 	ldw	r2,0(r2)
    ecd0:	10800817 	ldw	r2,32(r2)
    ecd4:	1000021e 	bne	r2,zero,ece0 <isatty+0x5c>
    {
      return 1;
    ecd8:	00800044 	movi	r2,1
    ecdc:	00000d06 	br	ed14 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ece0:	e0bff004 	addi	r2,fp,-64
    ece4:	100b883a 	mov	r5,r2
    ece8:	e13fff17 	ldw	r4,-4(fp)
    ecec:	000e9a40 	call	e9a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ecf0:	e0bff117 	ldw	r2,-60(fp)
    ecf4:	10880020 	cmpeqi	r2,r2,8192
    ecf8:	10803fcc 	andi	r2,r2,255
    ecfc:	00000506 	br	ed14 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ed00:	000ec480 	call	ec48 <alt_get_errno>
    ed04:	1007883a 	mov	r3,r2
    ed08:	00801444 	movi	r2,81
    ed0c:	18800015 	stw	r2,0(r3)
    return 0;
    ed10:	0005883a 	mov	r2,zero
  }
}
    ed14:	e037883a 	mov	sp,fp
    ed18:	dfc00117 	ldw	ra,4(sp)
    ed1c:	df000017 	ldw	fp,0(sp)
    ed20:	dec00204 	addi	sp,sp,8
    ed24:	f800283a 	ret

0000ed28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ed28:	defffc04 	addi	sp,sp,-16
    ed2c:	df000315 	stw	fp,12(sp)
    ed30:	df000304 	addi	fp,sp,12
    ed34:	e13ffd15 	stw	r4,-12(fp)
    ed38:	e17ffe15 	stw	r5,-8(fp)
    ed3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ed40:	e0fffe17 	ldw	r3,-8(fp)
    ed44:	e0bffd17 	ldw	r2,-12(fp)
    ed48:	18800c26 	beq	r3,r2,ed7c <alt_load_section+0x54>
  {
    while( to != end )
    ed4c:	00000806 	br	ed70 <alt_load_section+0x48>
    {
      *to++ = *from++;
    ed50:	e0bffe17 	ldw	r2,-8(fp)
    ed54:	10c00104 	addi	r3,r2,4
    ed58:	e0fffe15 	stw	r3,-8(fp)
    ed5c:	e0fffd17 	ldw	r3,-12(fp)
    ed60:	19000104 	addi	r4,r3,4
    ed64:	e13ffd15 	stw	r4,-12(fp)
    ed68:	18c00017 	ldw	r3,0(r3)
    ed6c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ed70:	e0fffe17 	ldw	r3,-8(fp)
    ed74:	e0bfff17 	ldw	r2,-4(fp)
    ed78:	18bff51e 	bne	r3,r2,ed50 <__alt_mem_onchip_memory+0xf780ed50>
    {
      *to++ = *from++;
    }
  }
}
    ed7c:	0001883a 	nop
    ed80:	e037883a 	mov	sp,fp
    ed84:	df000017 	ldw	fp,0(sp)
    ed88:	dec00104 	addi	sp,sp,4
    ed8c:	f800283a 	ret

0000ed90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ed90:	defffe04 	addi	sp,sp,-8
    ed94:	dfc00115 	stw	ra,4(sp)
    ed98:	df000015 	stw	fp,0(sp)
    ed9c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    eda0:	01800074 	movhi	r6,1
    eda4:	318d8604 	addi	r6,r6,13848
    eda8:	01400074 	movhi	r5,1
    edac:	2946c604 	addi	r5,r5,6936
    edb0:	01000074 	movhi	r4,1
    edb4:	210d8604 	addi	r4,r4,13848
    edb8:	000ed280 	call	ed28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    edbc:	01800034 	movhi	r6,0
    edc0:	31809104 	addi	r6,r6,580
    edc4:	01400034 	movhi	r5,0
    edc8:	29400804 	addi	r5,r5,32
    edcc:	01000034 	movhi	r4,0
    edd0:	21000804 	addi	r4,r4,32
    edd4:	000ed280 	call	ed28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    edd8:	01800074 	movhi	r6,1
    eddc:	3186c604 	addi	r6,r6,6936
    ede0:	01400074 	movhi	r5,1
    ede4:	29459804 	addi	r5,r5,5728
    ede8:	01000074 	movhi	r4,1
    edec:	21059804 	addi	r4,r4,5728
    edf0:	000ed280 	call	ed28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    edf4:	00104f40 	call	104f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    edf8:	00106dc0 	call	106dc <alt_icache_flush_all>
}
    edfc:	0001883a 	nop
    ee00:	e037883a 	mov	sp,fp
    ee04:	dfc00117 	ldw	ra,4(sp)
    ee08:	df000017 	ldw	fp,0(sp)
    ee0c:	dec00204 	addi	sp,sp,8
    ee10:	f800283a 	ret

0000ee14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee14:	defffe04 	addi	sp,sp,-8
    ee18:	dfc00115 	stw	ra,4(sp)
    ee1c:	df000015 	stw	fp,0(sp)
    ee20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee24:	d0a01017 	ldw	r2,-32704(gp)
    ee28:	10000326 	beq	r2,zero,ee38 <alt_get_errno+0x24>
    ee2c:	d0a01017 	ldw	r2,-32704(gp)
    ee30:	103ee83a 	callr	r2
    ee34:	00000106 	br	ee3c <alt_get_errno+0x28>
    ee38:	d0a6dc04 	addi	r2,gp,-25744
}
    ee3c:	e037883a 	mov	sp,fp
    ee40:	dfc00117 	ldw	ra,4(sp)
    ee44:	df000017 	ldw	fp,0(sp)
    ee48:	dec00204 	addi	sp,sp,8
    ee4c:	f800283a 	ret

0000ee50 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ee50:	defff904 	addi	sp,sp,-28
    ee54:	dfc00615 	stw	ra,24(sp)
    ee58:	df000515 	stw	fp,20(sp)
    ee5c:	df000504 	addi	fp,sp,20
    ee60:	e13ffd15 	stw	r4,-12(fp)
    ee64:	e17ffe15 	stw	r5,-8(fp)
    ee68:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ee6c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee70:	e0bffd17 	ldw	r2,-12(fp)
    ee74:	10000616 	blt	r2,zero,ee90 <lseek+0x40>
    ee78:	e0bffd17 	ldw	r2,-12(fp)
    ee7c:	10c00324 	muli	r3,r2,12
    ee80:	00800074 	movhi	r2,1
    ee84:	1088f904 	addi	r2,r2,9188
    ee88:	1885883a 	add	r2,r3,r2
    ee8c:	00000106 	br	ee94 <lseek+0x44>
    ee90:	0005883a 	mov	r2,zero
    ee94:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ee98:	e0bffc17 	ldw	r2,-16(fp)
    ee9c:	10001026 	beq	r2,zero,eee0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    eea0:	e0bffc17 	ldw	r2,-16(fp)
    eea4:	10800017 	ldw	r2,0(r2)
    eea8:	10800717 	ldw	r2,28(r2)
    eeac:	10000926 	beq	r2,zero,eed4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    eeb0:	e0bffc17 	ldw	r2,-16(fp)
    eeb4:	10800017 	ldw	r2,0(r2)
    eeb8:	10800717 	ldw	r2,28(r2)
    eebc:	e1bfff17 	ldw	r6,-4(fp)
    eec0:	e17ffe17 	ldw	r5,-8(fp)
    eec4:	e13ffc17 	ldw	r4,-16(fp)
    eec8:	103ee83a 	callr	r2
    eecc:	e0bffb15 	stw	r2,-20(fp)
    eed0:	00000506 	br	eee8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    eed4:	00bfde84 	movi	r2,-134
    eed8:	e0bffb15 	stw	r2,-20(fp)
    eedc:	00000206 	br	eee8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    eee0:	00bfebc4 	movi	r2,-81
    eee4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    eee8:	e0bffb17 	ldw	r2,-20(fp)
    eeec:	1000070e 	bge	r2,zero,ef0c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    eef0:	000ee140 	call	ee14 <alt_get_errno>
    eef4:	1007883a 	mov	r3,r2
    eef8:	e0bffb17 	ldw	r2,-20(fp)
    eefc:	0085c83a 	sub	r2,zero,r2
    ef00:	18800015 	stw	r2,0(r3)
    rc = -1;
    ef04:	00bfffc4 	movi	r2,-1
    ef08:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ef0c:	e0bffb17 	ldw	r2,-20(fp)
}
    ef10:	e037883a 	mov	sp,fp
    ef14:	dfc00117 	ldw	ra,4(sp)
    ef18:	df000017 	ldw	fp,0(sp)
    ef1c:	dec00204 	addi	sp,sp,8
    ef20:	f800283a 	ret

0000ef24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ef24:	defffd04 	addi	sp,sp,-12
    ef28:	dfc00215 	stw	ra,8(sp)
    ef2c:	df000115 	stw	fp,4(sp)
    ef30:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ef34:	0009883a 	mov	r4,zero
    ef38:	000f5400 	call	f540 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ef3c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ef40:	000f5780 	call	f578 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ef44:	01800074 	movhi	r6,1
    ef48:	31867e04 	addi	r6,r6,6648
    ef4c:	01400074 	movhi	r5,1
    ef50:	29467e04 	addi	r5,r5,6648
    ef54:	01000074 	movhi	r4,1
    ef58:	21067e04 	addi	r4,r4,6648
    ef5c:	0010a740 	call	10a74 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ef60:	001061c0 	call	1061c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ef64:	01000074 	movhi	r4,1
    ef68:	21019f04 	addi	r4,r4,1660
    ef6c:	001125c0 	call	1125c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ef70:	d0a6e717 	ldw	r2,-25700(gp)
    ef74:	d0e6e817 	ldw	r3,-25696(gp)
    ef78:	d126e917 	ldw	r4,-25692(gp)
    ef7c:	200d883a 	mov	r6,r4
    ef80:	180b883a 	mov	r5,r3
    ef84:	1009883a 	mov	r4,r2
    ef88:	00012c40 	call	12c4 <main>
    ef8c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ef90:	01000044 	movi	r4,1
    ef94:	000e86c0 	call	e86c <close>
  exit (result);
    ef98:	e13fff17 	ldw	r4,-4(fp)
    ef9c:	00112700 	call	11270 <exit>

0000efa0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    efa0:	defffe04 	addi	sp,sp,-8
    efa4:	df000115 	stw	fp,4(sp)
    efa8:	df000104 	addi	fp,sp,4
    efac:	e13fff15 	stw	r4,-4(fp)
}
    efb0:	0001883a 	nop
    efb4:	e037883a 	mov	sp,fp
    efb8:	df000017 	ldw	fp,0(sp)
    efbc:	dec00104 	addi	sp,sp,4
    efc0:	f800283a 	ret

0000efc4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    efc4:	defffe04 	addi	sp,sp,-8
    efc8:	df000115 	stw	fp,4(sp)
    efcc:	df000104 	addi	fp,sp,4
    efd0:	e13fff15 	stw	r4,-4(fp)
}
    efd4:	0001883a 	nop
    efd8:	e037883a 	mov	sp,fp
    efdc:	df000017 	ldw	fp,0(sp)
    efe0:	dec00104 	addi	sp,sp,4
    efe4:	f800283a 	ret

0000efe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    efe8:	defffe04 	addi	sp,sp,-8
    efec:	dfc00115 	stw	ra,4(sp)
    eff0:	df000015 	stw	fp,0(sp)
    eff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eff8:	d0a01017 	ldw	r2,-32704(gp)
    effc:	10000326 	beq	r2,zero,f00c <alt_get_errno+0x24>
    f000:	d0a01017 	ldw	r2,-32704(gp)
    f004:	103ee83a 	callr	r2
    f008:	00000106 	br	f010 <alt_get_errno+0x28>
    f00c:	d0a6dc04 	addi	r2,gp,-25744
}
    f010:	e037883a 	mov	sp,fp
    f014:	dfc00117 	ldw	ra,4(sp)
    f018:	df000017 	ldw	fp,0(sp)
    f01c:	dec00204 	addi	sp,sp,8
    f020:	f800283a 	ret

0000f024 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f024:	defff904 	addi	sp,sp,-28
    f028:	dfc00615 	stw	ra,24(sp)
    f02c:	df000515 	stw	fp,20(sp)
    f030:	df000504 	addi	fp,sp,20
    f034:	e13ffd15 	stw	r4,-12(fp)
    f038:	e17ffe15 	stw	r5,-8(fp)
    f03c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f040:	e0bffd17 	ldw	r2,-12(fp)
    f044:	10000616 	blt	r2,zero,f060 <read+0x3c>
    f048:	e0bffd17 	ldw	r2,-12(fp)
    f04c:	10c00324 	muli	r3,r2,12
    f050:	00800074 	movhi	r2,1
    f054:	1088f904 	addi	r2,r2,9188
    f058:	1885883a 	add	r2,r3,r2
    f05c:	00000106 	br	f064 <read+0x40>
    f060:	0005883a 	mov	r2,zero
    f064:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f068:	e0bffb17 	ldw	r2,-20(fp)
    f06c:	10002226 	beq	r2,zero,f0f8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f070:	e0bffb17 	ldw	r2,-20(fp)
    f074:	10800217 	ldw	r2,8(r2)
    f078:	108000cc 	andi	r2,r2,3
    f07c:	10800060 	cmpeqi	r2,r2,1
    f080:	1000181e 	bne	r2,zero,f0e4 <read+0xc0>
        (fd->dev->read))
    f084:	e0bffb17 	ldw	r2,-20(fp)
    f088:	10800017 	ldw	r2,0(r2)
    f08c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f090:	10001426 	beq	r2,zero,f0e4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f094:	e0bffb17 	ldw	r2,-20(fp)
    f098:	10800017 	ldw	r2,0(r2)
    f09c:	10800517 	ldw	r2,20(r2)
    f0a0:	e0ffff17 	ldw	r3,-4(fp)
    f0a4:	180d883a 	mov	r6,r3
    f0a8:	e17ffe17 	ldw	r5,-8(fp)
    f0ac:	e13ffb17 	ldw	r4,-20(fp)
    f0b0:	103ee83a 	callr	r2
    f0b4:	e0bffc15 	stw	r2,-16(fp)
    f0b8:	e0bffc17 	ldw	r2,-16(fp)
    f0bc:	1000070e 	bge	r2,zero,f0dc <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f0c0:	000efe80 	call	efe8 <alt_get_errno>
    f0c4:	1007883a 	mov	r3,r2
    f0c8:	e0bffc17 	ldw	r2,-16(fp)
    f0cc:	0085c83a 	sub	r2,zero,r2
    f0d0:	18800015 	stw	r2,0(r3)
          return -1;
    f0d4:	00bfffc4 	movi	r2,-1
    f0d8:	00000c06 	br	f10c <read+0xe8>
        }
        return rval;
    f0dc:	e0bffc17 	ldw	r2,-16(fp)
    f0e0:	00000a06 	br	f10c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f0e4:	000efe80 	call	efe8 <alt_get_errno>
    f0e8:	1007883a 	mov	r3,r2
    f0ec:	00800344 	movi	r2,13
    f0f0:	18800015 	stw	r2,0(r3)
    f0f4:	00000406 	br	f108 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f0f8:	000efe80 	call	efe8 <alt_get_errno>
    f0fc:	1007883a 	mov	r3,r2
    f100:	00801444 	movi	r2,81
    f104:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f108:	00bfffc4 	movi	r2,-1
}
    f10c:	e037883a 	mov	sp,fp
    f110:	dfc00117 	ldw	ra,4(sp)
    f114:	df000017 	ldw	fp,0(sp)
    f118:	dec00204 	addi	sp,sp,8
    f11c:	f800283a 	ret

0000f120 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f120:	defffe04 	addi	sp,sp,-8
    f124:	df000115 	stw	fp,4(sp)
    f128:	df000104 	addi	fp,sp,4
    f12c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f130:	e0bfff17 	ldw	r2,-4(fp)
    f134:	108000d0 	cmplti	r2,r2,3
    f138:	10000d1e 	bne	r2,zero,f170 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f13c:	00800074 	movhi	r2,1
    f140:	1088f904 	addi	r2,r2,9188
    f144:	e0ffff17 	ldw	r3,-4(fp)
    f148:	18c00324 	muli	r3,r3,12
    f14c:	10c5883a 	add	r2,r2,r3
    f150:	10800204 	addi	r2,r2,8
    f154:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f158:	00800074 	movhi	r2,1
    f15c:	1088f904 	addi	r2,r2,9188
    f160:	e0ffff17 	ldw	r3,-4(fp)
    f164:	18c00324 	muli	r3,r3,12
    f168:	10c5883a 	add	r2,r2,r3
    f16c:	10000015 	stw	zero,0(r2)
  }
}
    f170:	0001883a 	nop
    f174:	e037883a 	mov	sp,fp
    f178:	df000017 	ldw	fp,0(sp)
    f17c:	dec00104 	addi	sp,sp,4
    f180:	f800283a 	ret

0000f184 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f184:	defff904 	addi	sp,sp,-28
    f188:	df000615 	stw	fp,24(sp)
    f18c:	df000604 	addi	fp,sp,24
    f190:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f194:	0005303a 	rdctl	r2,status
    f198:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f19c:	e0fffe17 	ldw	r3,-8(fp)
    f1a0:	00bfff84 	movi	r2,-2
    f1a4:	1884703a 	and	r2,r3,r2
    f1a8:	1001703a 	wrctl	status,r2
  
  return context;
    f1ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f1b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f1b4:	d0a01117 	ldw	r2,-32700(gp)
    f1b8:	10c000c4 	addi	r3,r2,3
    f1bc:	00bfff04 	movi	r2,-4
    f1c0:	1884703a 	and	r2,r3,r2
    f1c4:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f1c8:	d0e01117 	ldw	r3,-32700(gp)
    f1cc:	e0bfff17 	ldw	r2,-4(fp)
    f1d0:	1887883a 	add	r3,r3,r2
    f1d4:	00820034 	movhi	r2,2048
    f1d8:	10800004 	addi	r2,r2,0
    f1dc:	10c0062e 	bgeu	r2,r3,f1f8 <sbrk+0x74>
    f1e0:	e0bffb17 	ldw	r2,-20(fp)
    f1e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1e8:	e0bffa17 	ldw	r2,-24(fp)
    f1ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f1f0:	00bfffc4 	movi	r2,-1
    f1f4:	00000b06 	br	f224 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f1f8:	d0a01117 	ldw	r2,-32700(gp)
    f1fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f200:	d0e01117 	ldw	r3,-32700(gp)
    f204:	e0bfff17 	ldw	r2,-4(fp)
    f208:	1885883a 	add	r2,r3,r2
    f20c:	d0a01115 	stw	r2,-32700(gp)
    f210:	e0bffb17 	ldw	r2,-20(fp)
    f214:	e0bffc15 	stw	r2,-16(fp)
    f218:	e0bffc17 	ldw	r2,-16(fp)
    f21c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f220:	e0bffd17 	ldw	r2,-12(fp)
} 
    f224:	e037883a 	mov	sp,fp
    f228:	df000017 	ldw	fp,0(sp)
    f22c:	dec00104 	addi	sp,sp,4
    f230:	f800283a 	ret

0000f234 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f234:	defffa04 	addi	sp,sp,-24
    f238:	df000515 	stw	fp,20(sp)
    f23c:	df000504 	addi	fp,sp,20
    f240:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f244:	0005303a 	rdctl	r2,status
    f248:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f24c:	e0fffc17 	ldw	r3,-16(fp)
    f250:	00bfff84 	movi	r2,-2
    f254:	1884703a 	and	r2,r3,r2
    f258:	1001703a 	wrctl	status,r2
  
  return context;
    f25c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f260:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f264:	e0bfff17 	ldw	r2,-4(fp)
    f268:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f26c:	e0bffd17 	ldw	r2,-12(fp)
    f270:	10800017 	ldw	r2,0(r2)
    f274:	e0fffd17 	ldw	r3,-12(fp)
    f278:	18c00117 	ldw	r3,4(r3)
    f27c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f280:	e0bffd17 	ldw	r2,-12(fp)
    f284:	10800117 	ldw	r2,4(r2)
    f288:	e0fffd17 	ldw	r3,-12(fp)
    f28c:	18c00017 	ldw	r3,0(r3)
    f290:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f294:	e0bffd17 	ldw	r2,-12(fp)
    f298:	e0fffd17 	ldw	r3,-12(fp)
    f29c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f2a0:	e0bffd17 	ldw	r2,-12(fp)
    f2a4:	e0fffd17 	ldw	r3,-12(fp)
    f2a8:	10c00015 	stw	r3,0(r2)
    f2ac:	e0bffb17 	ldw	r2,-20(fp)
    f2b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2b4:	e0bffe17 	ldw	r2,-8(fp)
    f2b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f2bc:	0001883a 	nop
    f2c0:	e037883a 	mov	sp,fp
    f2c4:	df000017 	ldw	fp,0(sp)
    f2c8:	dec00104 	addi	sp,sp,4
    f2cc:	f800283a 	ret

0000f2d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f2d0:	defffb04 	addi	sp,sp,-20
    f2d4:	dfc00415 	stw	ra,16(sp)
    f2d8:	df000315 	stw	fp,12(sp)
    f2dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f2e0:	d0a01217 	ldw	r2,-32696(gp)
    f2e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f2e8:	d0a6eb17 	ldw	r2,-25684(gp)
    f2ec:	10800044 	addi	r2,r2,1
    f2f0:	d0a6eb15 	stw	r2,-25684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f2f4:	00002e06 	br	f3b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f2f8:	e0bffd17 	ldw	r2,-12(fp)
    f2fc:	10800017 	ldw	r2,0(r2)
    f300:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f304:	e0bffd17 	ldw	r2,-12(fp)
    f308:	10800403 	ldbu	r2,16(r2)
    f30c:	10803fcc 	andi	r2,r2,255
    f310:	10000426 	beq	r2,zero,f324 <alt_tick+0x54>
    f314:	d0a6eb17 	ldw	r2,-25684(gp)
    f318:	1000021e 	bne	r2,zero,f324 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f31c:	e0bffd17 	ldw	r2,-12(fp)
    f320:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f324:	e0bffd17 	ldw	r2,-12(fp)
    f328:	10800217 	ldw	r2,8(r2)
    f32c:	d0e6eb17 	ldw	r3,-25684(gp)
    f330:	18801d36 	bltu	r3,r2,f3a8 <alt_tick+0xd8>
    f334:	e0bffd17 	ldw	r2,-12(fp)
    f338:	10800403 	ldbu	r2,16(r2)
    f33c:	10803fcc 	andi	r2,r2,255
    f340:	1000191e 	bne	r2,zero,f3a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f344:	e0bffd17 	ldw	r2,-12(fp)
    f348:	10800317 	ldw	r2,12(r2)
    f34c:	e0fffd17 	ldw	r3,-12(fp)
    f350:	18c00517 	ldw	r3,20(r3)
    f354:	1809883a 	mov	r4,r3
    f358:	103ee83a 	callr	r2
    f35c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f360:	e0bfff17 	ldw	r2,-4(fp)
    f364:	1000031e 	bne	r2,zero,f374 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f368:	e13ffd17 	ldw	r4,-12(fp)
    f36c:	000f2340 	call	f234 <alt_alarm_stop>
    f370:	00000d06 	br	f3a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f374:	e0bffd17 	ldw	r2,-12(fp)
    f378:	10c00217 	ldw	r3,8(r2)
    f37c:	e0bfff17 	ldw	r2,-4(fp)
    f380:	1887883a 	add	r3,r3,r2
    f384:	e0bffd17 	ldw	r2,-12(fp)
    f388:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f38c:	e0bffd17 	ldw	r2,-12(fp)
    f390:	10c00217 	ldw	r3,8(r2)
    f394:	d0a6eb17 	ldw	r2,-25684(gp)
    f398:	1880032e 	bgeu	r3,r2,f3a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f39c:	e0bffd17 	ldw	r2,-12(fp)
    f3a0:	00c00044 	movi	r3,1
    f3a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f3a8:	e0bffe17 	ldw	r2,-8(fp)
    f3ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f3b0:	e0fffd17 	ldw	r3,-12(fp)
    f3b4:	d0a01204 	addi	r2,gp,-32696
    f3b8:	18bfcf1e 	bne	r3,r2,f2f8 <__alt_mem_onchip_memory+0xf780f2f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f3bc:	0001883a 	nop
}
    f3c0:	0001883a 	nop
    f3c4:	e037883a 	mov	sp,fp
    f3c8:	dfc00117 	ldw	ra,4(sp)
    f3cc:	df000017 	ldw	fp,0(sp)
    f3d0:	dec00204 	addi	sp,sp,8
    f3d4:	f800283a 	ret

0000f3d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3d8:	defffe04 	addi	sp,sp,-8
    f3dc:	dfc00115 	stw	ra,4(sp)
    f3e0:	df000015 	stw	fp,0(sp)
    f3e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3e8:	d0a01017 	ldw	r2,-32704(gp)
    f3ec:	10000326 	beq	r2,zero,f3fc <alt_get_errno+0x24>
    f3f0:	d0a01017 	ldw	r2,-32704(gp)
    f3f4:	103ee83a 	callr	r2
    f3f8:	00000106 	br	f400 <alt_get_errno+0x28>
    f3fc:	d0a6dc04 	addi	r2,gp,-25744
}
    f400:	e037883a 	mov	sp,fp
    f404:	dfc00117 	ldw	ra,4(sp)
    f408:	df000017 	ldw	fp,0(sp)
    f40c:	dec00204 	addi	sp,sp,8
    f410:	f800283a 	ret

0000f414 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f414:	defff904 	addi	sp,sp,-28
    f418:	dfc00615 	stw	ra,24(sp)
    f41c:	df000515 	stw	fp,20(sp)
    f420:	df000504 	addi	fp,sp,20
    f424:	e13ffd15 	stw	r4,-12(fp)
    f428:	e17ffe15 	stw	r5,-8(fp)
    f42c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f430:	e0bffd17 	ldw	r2,-12(fp)
    f434:	10000616 	blt	r2,zero,f450 <write+0x3c>
    f438:	e0bffd17 	ldw	r2,-12(fp)
    f43c:	10c00324 	muli	r3,r2,12
    f440:	00800074 	movhi	r2,1
    f444:	1088f904 	addi	r2,r2,9188
    f448:	1885883a 	add	r2,r3,r2
    f44c:	00000106 	br	f454 <write+0x40>
    f450:	0005883a 	mov	r2,zero
    f454:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f458:	e0bffb17 	ldw	r2,-20(fp)
    f45c:	10002126 	beq	r2,zero,f4e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f460:	e0bffb17 	ldw	r2,-20(fp)
    f464:	10800217 	ldw	r2,8(r2)
    f468:	108000cc 	andi	r2,r2,3
    f46c:	10001826 	beq	r2,zero,f4d0 <write+0xbc>
    f470:	e0bffb17 	ldw	r2,-20(fp)
    f474:	10800017 	ldw	r2,0(r2)
    f478:	10800617 	ldw	r2,24(r2)
    f47c:	10001426 	beq	r2,zero,f4d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f480:	e0bffb17 	ldw	r2,-20(fp)
    f484:	10800017 	ldw	r2,0(r2)
    f488:	10800617 	ldw	r2,24(r2)
    f48c:	e0ffff17 	ldw	r3,-4(fp)
    f490:	180d883a 	mov	r6,r3
    f494:	e17ffe17 	ldw	r5,-8(fp)
    f498:	e13ffb17 	ldw	r4,-20(fp)
    f49c:	103ee83a 	callr	r2
    f4a0:	e0bffc15 	stw	r2,-16(fp)
    f4a4:	e0bffc17 	ldw	r2,-16(fp)
    f4a8:	1000070e 	bge	r2,zero,f4c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f4ac:	000f3d80 	call	f3d8 <alt_get_errno>
    f4b0:	1007883a 	mov	r3,r2
    f4b4:	e0bffc17 	ldw	r2,-16(fp)
    f4b8:	0085c83a 	sub	r2,zero,r2
    f4bc:	18800015 	stw	r2,0(r3)
        return -1;
    f4c0:	00bfffc4 	movi	r2,-1
    f4c4:	00000c06 	br	f4f8 <write+0xe4>
      }
      return rval;
    f4c8:	e0bffc17 	ldw	r2,-16(fp)
    f4cc:	00000a06 	br	f4f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f4d0:	000f3d80 	call	f3d8 <alt_get_errno>
    f4d4:	1007883a 	mov	r3,r2
    f4d8:	00800344 	movi	r2,13
    f4dc:	18800015 	stw	r2,0(r3)
    f4e0:	00000406 	br	f4f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f4e4:	000f3d80 	call	f3d8 <alt_get_errno>
    f4e8:	1007883a 	mov	r3,r2
    f4ec:	00801444 	movi	r2,81
    f4f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f4f4:	00bfffc4 	movi	r2,-1
}
    f4f8:	e037883a 	mov	sp,fp
    f4fc:	dfc00117 	ldw	ra,4(sp)
    f500:	df000017 	ldw	fp,0(sp)
    f504:	dec00204 	addi	sp,sp,8
    f508:	f800283a 	ret

0000f50c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f50c:	defffd04 	addi	sp,sp,-12
    f510:	dfc00215 	stw	ra,8(sp)
    f514:	df000115 	stw	fp,4(sp)
    f518:	df000104 	addi	fp,sp,4
    f51c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f520:	d1600d04 	addi	r5,gp,-32716
    f524:	e13fff17 	ldw	r4,-4(fp)
    f528:	00105780 	call	10578 <alt_dev_llist_insert>
}
    f52c:	e037883a 	mov	sp,fp
    f530:	dfc00117 	ldw	ra,4(sp)
    f534:	df000017 	ldw	fp,0(sp)
    f538:	dec00204 	addi	sp,sp,8
    f53c:	f800283a 	ret

0000f540 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f540:	defffd04 	addi	sp,sp,-12
    f544:	dfc00215 	stw	ra,8(sp)
    f548:	df000115 	stw	fp,4(sp)
    f54c:	df000104 	addi	fp,sp,4
    f550:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    f554:	0010d440 	call	10d44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f558:	00800044 	movi	r2,1
    f55c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f560:	0001883a 	nop
    f564:	e037883a 	mov	sp,fp
    f568:	dfc00117 	ldw	ra,4(sp)
    f56c:	df000017 	ldw	fp,0(sp)
    f570:	dec00204 	addi	sp,sp,8
    f574:	f800283a 	ret

0000f578 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f578:	defffe04 	addi	sp,sp,-8
    f57c:	dfc00115 	stw	ra,4(sp)
    f580:	df000015 	stw	fp,0(sp)
    f584:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    f588:	01c0fa04 	movi	r7,1000
    f58c:	000d883a 	mov	r6,zero
    f590:	000b883a 	mov	r5,zero
    f594:	01040034 	movhi	r4,4096
    f598:	21040804 	addi	r4,r4,4128
    f59c:	00100cc0 	call	100cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f5a0:	01800204 	movi	r6,8
    f5a4:	000b883a 	mov	r5,zero
    f5a8:	01000074 	movhi	r4,1
    f5ac:	21096304 	addi	r4,r4,9612
    f5b0:	000f7500 	call	f750 <altera_avalon_jtag_uart_init>
    f5b4:	01000074 	movhi	r4,1
    f5b8:	21095904 	addi	r4,r4,9572
    f5bc:	000f50c0 	call	f50c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    f5c0:	00c00044 	movi	r3,1
    f5c4:	00840034 	movhi	r2,4096
    f5c8:	10842004 	addi	r2,r2,4224
    f5cc:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f5d0:	0001883a 	nop
}
    f5d4:	0001883a 	nop
    f5d8:	e037883a 	mov	sp,fp
    f5dc:	dfc00117 	ldw	ra,4(sp)
    f5e0:	df000017 	ldw	fp,0(sp)
    f5e4:	dec00204 	addi	sp,sp,8
    f5e8:	f800283a 	ret

0000f5ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f5ec:	defffa04 	addi	sp,sp,-24
    f5f0:	dfc00515 	stw	ra,20(sp)
    f5f4:	df000415 	stw	fp,16(sp)
    f5f8:	df000404 	addi	fp,sp,16
    f5fc:	e13ffd15 	stw	r4,-12(fp)
    f600:	e17ffe15 	stw	r5,-8(fp)
    f604:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f608:	e0bffd17 	ldw	r2,-12(fp)
    f60c:	10800017 	ldw	r2,0(r2)
    f610:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f614:	e0bffc17 	ldw	r2,-16(fp)
    f618:	10c00a04 	addi	r3,r2,40
    f61c:	e0bffd17 	ldw	r2,-12(fp)
    f620:	10800217 	ldw	r2,8(r2)
    f624:	100f883a 	mov	r7,r2
    f628:	e1bfff17 	ldw	r6,-4(fp)
    f62c:	e17ffe17 	ldw	r5,-8(fp)
    f630:	1809883a 	mov	r4,r3
    f634:	000fc140 	call	fc14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f638:	e037883a 	mov	sp,fp
    f63c:	dfc00117 	ldw	ra,4(sp)
    f640:	df000017 	ldw	fp,0(sp)
    f644:	dec00204 	addi	sp,sp,8
    f648:	f800283a 	ret

0000f64c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f64c:	defffa04 	addi	sp,sp,-24
    f650:	dfc00515 	stw	ra,20(sp)
    f654:	df000415 	stw	fp,16(sp)
    f658:	df000404 	addi	fp,sp,16
    f65c:	e13ffd15 	stw	r4,-12(fp)
    f660:	e17ffe15 	stw	r5,-8(fp)
    f664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f668:	e0bffd17 	ldw	r2,-12(fp)
    f66c:	10800017 	ldw	r2,0(r2)
    f670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f674:	e0bffc17 	ldw	r2,-16(fp)
    f678:	10c00a04 	addi	r3,r2,40
    f67c:	e0bffd17 	ldw	r2,-12(fp)
    f680:	10800217 	ldw	r2,8(r2)
    f684:	100f883a 	mov	r7,r2
    f688:	e1bfff17 	ldw	r6,-4(fp)
    f68c:	e17ffe17 	ldw	r5,-8(fp)
    f690:	1809883a 	mov	r4,r3
    f694:	000fe300 	call	fe30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f698:	e037883a 	mov	sp,fp
    f69c:	dfc00117 	ldw	ra,4(sp)
    f6a0:	df000017 	ldw	fp,0(sp)
    f6a4:	dec00204 	addi	sp,sp,8
    f6a8:	f800283a 	ret

0000f6ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f6ac:	defffc04 	addi	sp,sp,-16
    f6b0:	dfc00315 	stw	ra,12(sp)
    f6b4:	df000215 	stw	fp,8(sp)
    f6b8:	df000204 	addi	fp,sp,8
    f6bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f6c0:	e0bfff17 	ldw	r2,-4(fp)
    f6c4:	10800017 	ldw	r2,0(r2)
    f6c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f6cc:	e0bffe17 	ldw	r2,-8(fp)
    f6d0:	10c00a04 	addi	r3,r2,40
    f6d4:	e0bfff17 	ldw	r2,-4(fp)
    f6d8:	10800217 	ldw	r2,8(r2)
    f6dc:	100b883a 	mov	r5,r2
    f6e0:	1809883a 	mov	r4,r3
    f6e4:	000fabc0 	call	fabc <altera_avalon_jtag_uart_close>
}
    f6e8:	e037883a 	mov	sp,fp
    f6ec:	dfc00117 	ldw	ra,4(sp)
    f6f0:	df000017 	ldw	fp,0(sp)
    f6f4:	dec00204 	addi	sp,sp,8
    f6f8:	f800283a 	ret

0000f6fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f6fc:	defffa04 	addi	sp,sp,-24
    f700:	dfc00515 	stw	ra,20(sp)
    f704:	df000415 	stw	fp,16(sp)
    f708:	df000404 	addi	fp,sp,16
    f70c:	e13ffd15 	stw	r4,-12(fp)
    f710:	e17ffe15 	stw	r5,-8(fp)
    f714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f718:	e0bffd17 	ldw	r2,-12(fp)
    f71c:	10800017 	ldw	r2,0(r2)
    f720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f724:	e0bffc17 	ldw	r2,-16(fp)
    f728:	10800a04 	addi	r2,r2,40
    f72c:	e1bfff17 	ldw	r6,-4(fp)
    f730:	e17ffe17 	ldw	r5,-8(fp)
    f734:	1009883a 	mov	r4,r2
    f738:	000fb240 	call	fb24 <altera_avalon_jtag_uart_ioctl>
}
    f73c:	e037883a 	mov	sp,fp
    f740:	dfc00117 	ldw	ra,4(sp)
    f744:	df000017 	ldw	fp,0(sp)
    f748:	dec00204 	addi	sp,sp,8
    f74c:	f800283a 	ret

0000f750 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f750:	defffa04 	addi	sp,sp,-24
    f754:	dfc00515 	stw	ra,20(sp)
    f758:	df000415 	stw	fp,16(sp)
    f75c:	df000404 	addi	fp,sp,16
    f760:	e13ffd15 	stw	r4,-12(fp)
    f764:	e17ffe15 	stw	r5,-8(fp)
    f768:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f76c:	e0bffd17 	ldw	r2,-12(fp)
    f770:	00c00044 	movi	r3,1
    f774:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f778:	e0bffd17 	ldw	r2,-12(fp)
    f77c:	10800017 	ldw	r2,0(r2)
    f780:	10800104 	addi	r2,r2,4
    f784:	1007883a 	mov	r3,r2
    f788:	e0bffd17 	ldw	r2,-12(fp)
    f78c:	10800817 	ldw	r2,32(r2)
    f790:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f794:	e0bffe17 	ldw	r2,-8(fp)
    f798:	e0ffff17 	ldw	r3,-4(fp)
    f79c:	d8000015 	stw	zero,0(sp)
    f7a0:	e1fffd17 	ldw	r7,-12(fp)
    f7a4:	01800074 	movhi	r6,1
    f7a8:	31be0404 	addi	r6,r6,-2032
    f7ac:	180b883a 	mov	r5,r3
    f7b0:	1009883a 	mov	r4,r2
    f7b4:	00107100 	call	10710 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f7b8:	e0bffd17 	ldw	r2,-12(fp)
    f7bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f7c0:	e0bffd17 	ldw	r2,-12(fp)
    f7c4:	10800204 	addi	r2,r2,8
    f7c8:	d0e6ea17 	ldw	r3,-25688(gp)
    f7cc:	e1fffd17 	ldw	r7,-12(fp)
    f7d0:	01800074 	movhi	r6,1
    f7d4:	31be8704 	addi	r6,r6,-1508
    f7d8:	180b883a 	mov	r5,r3
    f7dc:	1009883a 	mov	r4,r2
    f7e0:	00103c80 	call	103c8 <alt_alarm_start>
    f7e4:	1000040e 	bge	r2,zero,f7f8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f7e8:	e0fffd17 	ldw	r3,-12(fp)
    f7ec:	00a00034 	movhi	r2,32768
    f7f0:	10bfffc4 	addi	r2,r2,-1
    f7f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f7f8:	0001883a 	nop
    f7fc:	e037883a 	mov	sp,fp
    f800:	dfc00117 	ldw	ra,4(sp)
    f804:	df000017 	ldw	fp,0(sp)
    f808:	dec00204 	addi	sp,sp,8
    f80c:	f800283a 	ret

0000f810 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f810:	defff804 	addi	sp,sp,-32
    f814:	df000715 	stw	fp,28(sp)
    f818:	df000704 	addi	fp,sp,28
    f81c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f820:	e0bfff17 	ldw	r2,-4(fp)
    f824:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f828:	e0bffb17 	ldw	r2,-20(fp)
    f82c:	10800017 	ldw	r2,0(r2)
    f830:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f834:	e0bffc17 	ldw	r2,-16(fp)
    f838:	10800104 	addi	r2,r2,4
    f83c:	10800037 	ldwio	r2,0(r2)
    f840:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f844:	e0bffd17 	ldw	r2,-12(fp)
    f848:	1080c00c 	andi	r2,r2,768
    f84c:	10006d26 	beq	r2,zero,fa04 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f850:	e0bffd17 	ldw	r2,-12(fp)
    f854:	1080400c 	andi	r2,r2,256
    f858:	10003526 	beq	r2,zero,f930 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f85c:	00800074 	movhi	r2,1
    f860:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f864:	e0bffb17 	ldw	r2,-20(fp)
    f868:	10800a17 	ldw	r2,40(r2)
    f86c:	10800044 	addi	r2,r2,1
    f870:	1081ffcc 	andi	r2,r2,2047
    f874:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f878:	e0bffb17 	ldw	r2,-20(fp)
    f87c:	10c00b17 	ldw	r3,44(r2)
    f880:	e0bffe17 	ldw	r2,-8(fp)
    f884:	18801526 	beq	r3,r2,f8dc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f888:	e0bffc17 	ldw	r2,-16(fp)
    f88c:	10800037 	ldwio	r2,0(r2)
    f890:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f894:	e0bff917 	ldw	r2,-28(fp)
    f898:	10a0000c 	andi	r2,r2,32768
    f89c:	10001126 	beq	r2,zero,f8e4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f8a0:	e0bffb17 	ldw	r2,-20(fp)
    f8a4:	10800a17 	ldw	r2,40(r2)
    f8a8:	e0fff917 	ldw	r3,-28(fp)
    f8ac:	1809883a 	mov	r4,r3
    f8b0:	e0fffb17 	ldw	r3,-20(fp)
    f8b4:	1885883a 	add	r2,r3,r2
    f8b8:	10800e04 	addi	r2,r2,56
    f8bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	10800a17 	ldw	r2,40(r2)
    f8c8:	10800044 	addi	r2,r2,1
    f8cc:	10c1ffcc 	andi	r3,r2,2047
    f8d0:	e0bffb17 	ldw	r2,-20(fp)
    f8d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f8d8:	003fe206 	br	f864 <__alt_mem_onchip_memory+0xf780f864>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f8dc:	0001883a 	nop
    f8e0:	00000106 	br	f8e8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f8e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f8e8:	e0bff917 	ldw	r2,-28(fp)
    f8ec:	10bfffec 	andhi	r2,r2,65535
    f8f0:	10000f26 	beq	r2,zero,f930 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f8f4:	e0bffb17 	ldw	r2,-20(fp)
    f8f8:	10c00817 	ldw	r3,32(r2)
    f8fc:	00bfff84 	movi	r2,-2
    f900:	1886703a 	and	r3,r3,r2
    f904:	e0bffb17 	ldw	r2,-20(fp)
    f908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f90c:	e0bffc17 	ldw	r2,-16(fp)
    f910:	10800104 	addi	r2,r2,4
    f914:	1007883a 	mov	r3,r2
    f918:	e0bffb17 	ldw	r2,-20(fp)
    f91c:	10800817 	ldw	r2,32(r2)
    f920:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f924:	e0bffc17 	ldw	r2,-16(fp)
    f928:	10800104 	addi	r2,r2,4
    f92c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f930:	e0bffd17 	ldw	r2,-12(fp)
    f934:	1080800c 	andi	r2,r2,512
    f938:	103fbe26 	beq	r2,zero,f834 <__alt_mem_onchip_memory+0xf780f834>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f93c:	e0bffd17 	ldw	r2,-12(fp)
    f940:	1004d43a 	srli	r2,r2,16
    f944:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f948:	00001406 	br	f99c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f94c:	e0bffc17 	ldw	r2,-16(fp)
    f950:	e0fffb17 	ldw	r3,-20(fp)
    f954:	18c00d17 	ldw	r3,52(r3)
    f958:	e13ffb17 	ldw	r4,-20(fp)
    f95c:	20c7883a 	add	r3,r4,r3
    f960:	18c20e04 	addi	r3,r3,2104
    f964:	18c00003 	ldbu	r3,0(r3)
    f968:	18c03fcc 	andi	r3,r3,255
    f96c:	18c0201c 	xori	r3,r3,128
    f970:	18ffe004 	addi	r3,r3,-128
    f974:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f978:	e0bffb17 	ldw	r2,-20(fp)
    f97c:	10800d17 	ldw	r2,52(r2)
    f980:	10800044 	addi	r2,r2,1
    f984:	10c1ffcc 	andi	r3,r2,2047
    f988:	e0bffb17 	ldw	r2,-20(fp)
    f98c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f990:	e0bffa17 	ldw	r2,-24(fp)
    f994:	10bfffc4 	addi	r2,r2,-1
    f998:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f99c:	e0bffa17 	ldw	r2,-24(fp)
    f9a0:	10000526 	beq	r2,zero,f9b8 <altera_avalon_jtag_uart_irq+0x1a8>
    f9a4:	e0bffb17 	ldw	r2,-20(fp)
    f9a8:	10c00d17 	ldw	r3,52(r2)
    f9ac:	e0bffb17 	ldw	r2,-20(fp)
    f9b0:	10800c17 	ldw	r2,48(r2)
    f9b4:	18bfe51e 	bne	r3,r2,f94c <__alt_mem_onchip_memory+0xf780f94c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f9b8:	e0bffa17 	ldw	r2,-24(fp)
    f9bc:	103f9d26 	beq	r2,zero,f834 <__alt_mem_onchip_memory+0xf780f834>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f9c0:	e0bffb17 	ldw	r2,-20(fp)
    f9c4:	10c00817 	ldw	r3,32(r2)
    f9c8:	00bfff44 	movi	r2,-3
    f9cc:	1886703a 	and	r3,r3,r2
    f9d0:	e0bffb17 	ldw	r2,-20(fp)
    f9d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f9d8:	e0bffb17 	ldw	r2,-20(fp)
    f9dc:	10800017 	ldw	r2,0(r2)
    f9e0:	10800104 	addi	r2,r2,4
    f9e4:	1007883a 	mov	r3,r2
    f9e8:	e0bffb17 	ldw	r2,-20(fp)
    f9ec:	10800817 	ldw	r2,32(r2)
    f9f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f9f4:	e0bffc17 	ldw	r2,-16(fp)
    f9f8:	10800104 	addi	r2,r2,4
    f9fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fa00:	003f8c06 	br	f834 <__alt_mem_onchip_memory+0xf780f834>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fa04:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fa08:	0001883a 	nop
    fa0c:	e037883a 	mov	sp,fp
    fa10:	df000017 	ldw	fp,0(sp)
    fa14:	dec00104 	addi	sp,sp,4
    fa18:	f800283a 	ret

0000fa1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fa1c:	defff804 	addi	sp,sp,-32
    fa20:	df000715 	stw	fp,28(sp)
    fa24:	df000704 	addi	fp,sp,28
    fa28:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fa2c:	e0bffb17 	ldw	r2,-20(fp)
    fa30:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fa34:	e0bff917 	ldw	r2,-28(fp)
    fa38:	10800017 	ldw	r2,0(r2)
    fa3c:	10800104 	addi	r2,r2,4
    fa40:	10800037 	ldwio	r2,0(r2)
    fa44:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fa48:	e0bffa17 	ldw	r2,-24(fp)
    fa4c:	1081000c 	andi	r2,r2,1024
    fa50:	10000b26 	beq	r2,zero,fa80 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fa54:	e0bff917 	ldw	r2,-28(fp)
    fa58:	10800017 	ldw	r2,0(r2)
    fa5c:	10800104 	addi	r2,r2,4
    fa60:	1007883a 	mov	r3,r2
    fa64:	e0bff917 	ldw	r2,-28(fp)
    fa68:	10800817 	ldw	r2,32(r2)
    fa6c:	10810014 	ori	r2,r2,1024
    fa70:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fa74:	e0bff917 	ldw	r2,-28(fp)
    fa78:	10000915 	stw	zero,36(r2)
    fa7c:	00000a06 	br	faa8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fa80:	e0bff917 	ldw	r2,-28(fp)
    fa84:	10c00917 	ldw	r3,36(r2)
    fa88:	00a00034 	movhi	r2,32768
    fa8c:	10bfff04 	addi	r2,r2,-4
    fa90:	10c00536 	bltu	r2,r3,faa8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fa94:	e0bff917 	ldw	r2,-28(fp)
    fa98:	10800917 	ldw	r2,36(r2)
    fa9c:	10c00044 	addi	r3,r2,1
    faa0:	e0bff917 	ldw	r2,-28(fp)
    faa4:	10c00915 	stw	r3,36(r2)
    faa8:	d0a6ea17 	ldw	r2,-25688(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    faac:	e037883a 	mov	sp,fp
    fab0:	df000017 	ldw	fp,0(sp)
    fab4:	dec00104 	addi	sp,sp,4
    fab8:	f800283a 	ret

0000fabc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fabc:	defffd04 	addi	sp,sp,-12
    fac0:	df000215 	stw	fp,8(sp)
    fac4:	df000204 	addi	fp,sp,8
    fac8:	e13ffe15 	stw	r4,-8(fp)
    facc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fad0:	00000506 	br	fae8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fad4:	e0bfff17 	ldw	r2,-4(fp)
    fad8:	1090000c 	andi	r2,r2,16384
    fadc:	10000226 	beq	r2,zero,fae8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fae0:	00bffd44 	movi	r2,-11
    fae4:	00000b06 	br	fb14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fae8:	e0bffe17 	ldw	r2,-8(fp)
    faec:	10c00d17 	ldw	r3,52(r2)
    faf0:	e0bffe17 	ldw	r2,-8(fp)
    faf4:	10800c17 	ldw	r2,48(r2)
    faf8:	18800526 	beq	r3,r2,fb10 <altera_avalon_jtag_uart_close+0x54>
    fafc:	e0bffe17 	ldw	r2,-8(fp)
    fb00:	10c00917 	ldw	r3,36(r2)
    fb04:	e0bffe17 	ldw	r2,-8(fp)
    fb08:	10800117 	ldw	r2,4(r2)
    fb0c:	18bff136 	bltu	r3,r2,fad4 <__alt_mem_onchip_memory+0xf780fad4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fb10:	0005883a 	mov	r2,zero
}
    fb14:	e037883a 	mov	sp,fp
    fb18:	df000017 	ldw	fp,0(sp)
    fb1c:	dec00104 	addi	sp,sp,4
    fb20:	f800283a 	ret

0000fb24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fb24:	defffa04 	addi	sp,sp,-24
    fb28:	df000515 	stw	fp,20(sp)
    fb2c:	df000504 	addi	fp,sp,20
    fb30:	e13ffd15 	stw	r4,-12(fp)
    fb34:	e17ffe15 	stw	r5,-8(fp)
    fb38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fb3c:	00bff9c4 	movi	r2,-25
    fb40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fb44:	e0bffe17 	ldw	r2,-8(fp)
    fb48:	10da8060 	cmpeqi	r3,r2,27137
    fb4c:	1800031e 	bne	r3,zero,fb5c <altera_avalon_jtag_uart_ioctl+0x38>
    fb50:	109a80a0 	cmpeqi	r2,r2,27138
    fb54:	1000181e 	bne	r2,zero,fbb8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fb58:	00002906 	br	fc00 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fb5c:	e0bffd17 	ldw	r2,-12(fp)
    fb60:	10c00117 	ldw	r3,4(r2)
    fb64:	00a00034 	movhi	r2,32768
    fb68:	10bfffc4 	addi	r2,r2,-1
    fb6c:	18802126 	beq	r3,r2,fbf4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fb70:	e0bfff17 	ldw	r2,-4(fp)
    fb74:	10800017 	ldw	r2,0(r2)
    fb78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fb7c:	e0bffc17 	ldw	r2,-16(fp)
    fb80:	10800090 	cmplti	r2,r2,2
    fb84:	1000061e 	bne	r2,zero,fba0 <altera_avalon_jtag_uart_ioctl+0x7c>
    fb88:	e0fffc17 	ldw	r3,-16(fp)
    fb8c:	00a00034 	movhi	r2,32768
    fb90:	10bfffc4 	addi	r2,r2,-1
    fb94:	18800226 	beq	r3,r2,fba0 <altera_avalon_jtag_uart_ioctl+0x7c>
    fb98:	e0bffc17 	ldw	r2,-16(fp)
    fb9c:	00000206 	br	fba8 <altera_avalon_jtag_uart_ioctl+0x84>
    fba0:	00a00034 	movhi	r2,32768
    fba4:	10bfff84 	addi	r2,r2,-2
    fba8:	e0fffd17 	ldw	r3,-12(fp)
    fbac:	18800115 	stw	r2,4(r3)
      rc = 0;
    fbb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fbb4:	00000f06 	br	fbf4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fbb8:	e0bffd17 	ldw	r2,-12(fp)
    fbbc:	10c00117 	ldw	r3,4(r2)
    fbc0:	00a00034 	movhi	r2,32768
    fbc4:	10bfffc4 	addi	r2,r2,-1
    fbc8:	18800c26 	beq	r3,r2,fbfc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fbcc:	e0bffd17 	ldw	r2,-12(fp)
    fbd0:	10c00917 	ldw	r3,36(r2)
    fbd4:	e0bffd17 	ldw	r2,-12(fp)
    fbd8:	10800117 	ldw	r2,4(r2)
    fbdc:	1885803a 	cmpltu	r2,r3,r2
    fbe0:	10c03fcc 	andi	r3,r2,255
    fbe4:	e0bfff17 	ldw	r2,-4(fp)
    fbe8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fbec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fbf0:	00000206 	br	fbfc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fbf4:	0001883a 	nop
    fbf8:	00000106 	br	fc00 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fbfc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fc00:	e0bffb17 	ldw	r2,-20(fp)
}
    fc04:	e037883a 	mov	sp,fp
    fc08:	df000017 	ldw	fp,0(sp)
    fc0c:	dec00104 	addi	sp,sp,4
    fc10:	f800283a 	ret

0000fc14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fc14:	defff304 	addi	sp,sp,-52
    fc18:	dfc00c15 	stw	ra,48(sp)
    fc1c:	df000b15 	stw	fp,44(sp)
    fc20:	df000b04 	addi	fp,sp,44
    fc24:	e13ffc15 	stw	r4,-16(fp)
    fc28:	e17ffd15 	stw	r5,-12(fp)
    fc2c:	e1bffe15 	stw	r6,-8(fp)
    fc30:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fc34:	e0bffd17 	ldw	r2,-12(fp)
    fc38:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fc3c:	00004706 	br	fd5c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fc40:	e0bffc17 	ldw	r2,-16(fp)
    fc44:	10800a17 	ldw	r2,40(r2)
    fc48:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fc4c:	e0bffc17 	ldw	r2,-16(fp)
    fc50:	10800b17 	ldw	r2,44(r2)
    fc54:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fc58:	e0fff717 	ldw	r3,-36(fp)
    fc5c:	e0bff817 	ldw	r2,-32(fp)
    fc60:	18800536 	bltu	r3,r2,fc78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fc64:	e0fff717 	ldw	r3,-36(fp)
    fc68:	e0bff817 	ldw	r2,-32(fp)
    fc6c:	1885c83a 	sub	r2,r3,r2
    fc70:	e0bff615 	stw	r2,-40(fp)
    fc74:	00000406 	br	fc88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fc78:	00c20004 	movi	r3,2048
    fc7c:	e0bff817 	ldw	r2,-32(fp)
    fc80:	1885c83a 	sub	r2,r3,r2
    fc84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fc88:	e0bff617 	ldw	r2,-40(fp)
    fc8c:	10001e26 	beq	r2,zero,fd08 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fc90:	e0fffe17 	ldw	r3,-8(fp)
    fc94:	e0bff617 	ldw	r2,-40(fp)
    fc98:	1880022e 	bgeu	r3,r2,fca4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fc9c:	e0bffe17 	ldw	r2,-8(fp)
    fca0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fca4:	e0bffc17 	ldw	r2,-16(fp)
    fca8:	10c00e04 	addi	r3,r2,56
    fcac:	e0bff817 	ldw	r2,-32(fp)
    fcb0:	1885883a 	add	r2,r3,r2
    fcb4:	e1bff617 	ldw	r6,-40(fp)
    fcb8:	100b883a 	mov	r5,r2
    fcbc:	e13ff517 	ldw	r4,-44(fp)
    fcc0:	0009d3c0 	call	9d3c <memcpy>
      ptr   += n;
    fcc4:	e0fff517 	ldw	r3,-44(fp)
    fcc8:	e0bff617 	ldw	r2,-40(fp)
    fccc:	1885883a 	add	r2,r3,r2
    fcd0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fcd4:	e0fffe17 	ldw	r3,-8(fp)
    fcd8:	e0bff617 	ldw	r2,-40(fp)
    fcdc:	1885c83a 	sub	r2,r3,r2
    fce0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fce4:	e0fff817 	ldw	r3,-32(fp)
    fce8:	e0bff617 	ldw	r2,-40(fp)
    fcec:	1885883a 	add	r2,r3,r2
    fcf0:	10c1ffcc 	andi	r3,r2,2047
    fcf4:	e0bffc17 	ldw	r2,-16(fp)
    fcf8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fcfc:	e0bffe17 	ldw	r2,-8(fp)
    fd00:	00bfcf16 	blt	zero,r2,fc40 <__alt_mem_onchip_memory+0xf780fc40>
    fd04:	00000106 	br	fd0c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fd08:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fd0c:	e0fff517 	ldw	r3,-44(fp)
    fd10:	e0bffd17 	ldw	r2,-12(fp)
    fd14:	1880141e 	bne	r3,r2,fd68 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fd18:	e0bfff17 	ldw	r2,-4(fp)
    fd1c:	1090000c 	andi	r2,r2,16384
    fd20:	1000131e 	bne	r2,zero,fd70 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fd24:	0001883a 	nop
    fd28:	e0bffc17 	ldw	r2,-16(fp)
    fd2c:	10c00a17 	ldw	r3,40(r2)
    fd30:	e0bff717 	ldw	r2,-36(fp)
    fd34:	1880051e 	bne	r3,r2,fd4c <altera_avalon_jtag_uart_read+0x138>
    fd38:	e0bffc17 	ldw	r2,-16(fp)
    fd3c:	10c00917 	ldw	r3,36(r2)
    fd40:	e0bffc17 	ldw	r2,-16(fp)
    fd44:	10800117 	ldw	r2,4(r2)
    fd48:	18bff736 	bltu	r3,r2,fd28 <__alt_mem_onchip_memory+0xf780fd28>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fd4c:	e0bffc17 	ldw	r2,-16(fp)
    fd50:	10c00a17 	ldw	r3,40(r2)
    fd54:	e0bff717 	ldw	r2,-36(fp)
    fd58:	18800726 	beq	r3,r2,fd78 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fd5c:	e0bffe17 	ldw	r2,-8(fp)
    fd60:	00bfb716 	blt	zero,r2,fc40 <__alt_mem_onchip_memory+0xf780fc40>
    fd64:	00000506 	br	fd7c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fd68:	0001883a 	nop
    fd6c:	00000306 	br	fd7c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fd70:	0001883a 	nop
    fd74:	00000106 	br	fd7c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fd78:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fd7c:	e0fff517 	ldw	r3,-44(fp)
    fd80:	e0bffd17 	ldw	r2,-12(fp)
    fd84:	18801826 	beq	r3,r2,fde8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd88:	0005303a 	rdctl	r2,status
    fd8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd90:	e0fffb17 	ldw	r3,-20(fp)
    fd94:	00bfff84 	movi	r2,-2
    fd98:	1884703a 	and	r2,r3,r2
    fd9c:	1001703a 	wrctl	status,r2
  
  return context;
    fda0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fda4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fda8:	e0bffc17 	ldw	r2,-16(fp)
    fdac:	10800817 	ldw	r2,32(r2)
    fdb0:	10c00054 	ori	r3,r2,1
    fdb4:	e0bffc17 	ldw	r2,-16(fp)
    fdb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fdbc:	e0bffc17 	ldw	r2,-16(fp)
    fdc0:	10800017 	ldw	r2,0(r2)
    fdc4:	10800104 	addi	r2,r2,4
    fdc8:	1007883a 	mov	r3,r2
    fdcc:	e0bffc17 	ldw	r2,-16(fp)
    fdd0:	10800817 	ldw	r2,32(r2)
    fdd4:	18800035 	stwio	r2,0(r3)
    fdd8:	e0bffa17 	ldw	r2,-24(fp)
    fddc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fde0:	e0bff917 	ldw	r2,-28(fp)
    fde4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fde8:	e0fff517 	ldw	r3,-44(fp)
    fdec:	e0bffd17 	ldw	r2,-12(fp)
    fdf0:	18800426 	beq	r3,r2,fe04 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fdf4:	e0fff517 	ldw	r3,-44(fp)
    fdf8:	e0bffd17 	ldw	r2,-12(fp)
    fdfc:	1885c83a 	sub	r2,r3,r2
    fe00:	00000606 	br	fe1c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    fe04:	e0bfff17 	ldw	r2,-4(fp)
    fe08:	1090000c 	andi	r2,r2,16384
    fe0c:	10000226 	beq	r2,zero,fe18 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fe10:	00bffd44 	movi	r2,-11
    fe14:	00000106 	br	fe1c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fe18:	00bffec4 	movi	r2,-5
}
    fe1c:	e037883a 	mov	sp,fp
    fe20:	dfc00117 	ldw	ra,4(sp)
    fe24:	df000017 	ldw	fp,0(sp)
    fe28:	dec00204 	addi	sp,sp,8
    fe2c:	f800283a 	ret

0000fe30 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fe30:	defff304 	addi	sp,sp,-52
    fe34:	dfc00c15 	stw	ra,48(sp)
    fe38:	df000b15 	stw	fp,44(sp)
    fe3c:	df000b04 	addi	fp,sp,44
    fe40:	e13ffc15 	stw	r4,-16(fp)
    fe44:	e17ffd15 	stw	r5,-12(fp)
    fe48:	e1bffe15 	stw	r6,-8(fp)
    fe4c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fe50:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fe54:	e0bffd17 	ldw	r2,-12(fp)
    fe58:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fe5c:	00003706 	br	ff3c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fe60:	e0bffc17 	ldw	r2,-16(fp)
    fe64:	10800c17 	ldw	r2,48(r2)
    fe68:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fe6c:	e0bffc17 	ldw	r2,-16(fp)
    fe70:	10800d17 	ldw	r2,52(r2)
    fe74:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fe78:	e0fff917 	ldw	r3,-28(fp)
    fe7c:	e0bff517 	ldw	r2,-44(fp)
    fe80:	1880062e 	bgeu	r3,r2,fe9c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fe84:	e0fff517 	ldw	r3,-44(fp)
    fe88:	e0bff917 	ldw	r2,-28(fp)
    fe8c:	1885c83a 	sub	r2,r3,r2
    fe90:	10bfffc4 	addi	r2,r2,-1
    fe94:	e0bff615 	stw	r2,-40(fp)
    fe98:	00000b06 	br	fec8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fe9c:	e0bff517 	ldw	r2,-44(fp)
    fea0:	10000526 	beq	r2,zero,feb8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fea4:	00c20004 	movi	r3,2048
    fea8:	e0bff917 	ldw	r2,-28(fp)
    feac:	1885c83a 	sub	r2,r3,r2
    feb0:	e0bff615 	stw	r2,-40(fp)
    feb4:	00000406 	br	fec8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    feb8:	00c1ffc4 	movi	r3,2047
    febc:	e0bff917 	ldw	r2,-28(fp)
    fec0:	1885c83a 	sub	r2,r3,r2
    fec4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fec8:	e0bff617 	ldw	r2,-40(fp)
    fecc:	10001e26 	beq	r2,zero,ff48 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fed0:	e0fffe17 	ldw	r3,-8(fp)
    fed4:	e0bff617 	ldw	r2,-40(fp)
    fed8:	1880022e 	bgeu	r3,r2,fee4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fedc:	e0bffe17 	ldw	r2,-8(fp)
    fee0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fee4:	e0bffc17 	ldw	r2,-16(fp)
    fee8:	10c20e04 	addi	r3,r2,2104
    feec:	e0bff917 	ldw	r2,-28(fp)
    fef0:	1885883a 	add	r2,r3,r2
    fef4:	e1bff617 	ldw	r6,-40(fp)
    fef8:	e17ffd17 	ldw	r5,-12(fp)
    fefc:	1009883a 	mov	r4,r2
    ff00:	0009d3c0 	call	9d3c <memcpy>
      ptr   += n;
    ff04:	e0fffd17 	ldw	r3,-12(fp)
    ff08:	e0bff617 	ldw	r2,-40(fp)
    ff0c:	1885883a 	add	r2,r3,r2
    ff10:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    ff14:	e0fffe17 	ldw	r3,-8(fp)
    ff18:	e0bff617 	ldw	r2,-40(fp)
    ff1c:	1885c83a 	sub	r2,r3,r2
    ff20:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ff24:	e0fff917 	ldw	r3,-28(fp)
    ff28:	e0bff617 	ldw	r2,-40(fp)
    ff2c:	1885883a 	add	r2,r3,r2
    ff30:	10c1ffcc 	andi	r3,r2,2047
    ff34:	e0bffc17 	ldw	r2,-16(fp)
    ff38:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ff3c:	e0bffe17 	ldw	r2,-8(fp)
    ff40:	00bfc716 	blt	zero,r2,fe60 <__alt_mem_onchip_memory+0xf780fe60>
    ff44:	00000106 	br	ff4c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    ff48:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff4c:	0005303a 	rdctl	r2,status
    ff50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff54:	e0fffb17 	ldw	r3,-20(fp)
    ff58:	00bfff84 	movi	r2,-2
    ff5c:	1884703a 	and	r2,r3,r2
    ff60:	1001703a 	wrctl	status,r2
  
  return context;
    ff64:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ff68:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ff6c:	e0bffc17 	ldw	r2,-16(fp)
    ff70:	10800817 	ldw	r2,32(r2)
    ff74:	10c00094 	ori	r3,r2,2
    ff78:	e0bffc17 	ldw	r2,-16(fp)
    ff7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ff80:	e0bffc17 	ldw	r2,-16(fp)
    ff84:	10800017 	ldw	r2,0(r2)
    ff88:	10800104 	addi	r2,r2,4
    ff8c:	1007883a 	mov	r3,r2
    ff90:	e0bffc17 	ldw	r2,-16(fp)
    ff94:	10800817 	ldw	r2,32(r2)
    ff98:	18800035 	stwio	r2,0(r3)
    ff9c:	e0bffa17 	ldw	r2,-24(fp)
    ffa0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffa4:	e0bff817 	ldw	r2,-32(fp)
    ffa8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ffac:	e0bffe17 	ldw	r2,-8(fp)
    ffb0:	0080100e 	bge	zero,r2,fff4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ffb4:	e0bfff17 	ldw	r2,-4(fp)
    ffb8:	1090000c 	andi	r2,r2,16384
    ffbc:	1000101e 	bne	r2,zero,10000 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ffc0:	0001883a 	nop
    ffc4:	e0bffc17 	ldw	r2,-16(fp)
    ffc8:	10c00d17 	ldw	r3,52(r2)
    ffcc:	e0bff517 	ldw	r2,-44(fp)
    ffd0:	1880051e 	bne	r3,r2,ffe8 <altera_avalon_jtag_uart_write+0x1b8>
    ffd4:	e0bffc17 	ldw	r2,-16(fp)
    ffd8:	10c00917 	ldw	r3,36(r2)
    ffdc:	e0bffc17 	ldw	r2,-16(fp)
    ffe0:	10800117 	ldw	r2,4(r2)
    ffe4:	18bff736 	bltu	r3,r2,ffc4 <__alt_mem_onchip_memory+0xf780ffc4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ffe8:	e0bffc17 	ldw	r2,-16(fp)
    ffec:	10800917 	ldw	r2,36(r2)
    fff0:	1000051e 	bne	r2,zero,10008 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fff4:	e0bffe17 	ldw	r2,-8(fp)
    fff8:	00bfd016 	blt	zero,r2,ff3c <__alt_mem_onchip_memory+0xf780ff3c>
    fffc:	00000306 	br	1000c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10000:	0001883a 	nop
   10004:	00000106 	br	1000c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10008:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1000c:	e0fffd17 	ldw	r3,-12(fp)
   10010:	e0bff717 	ldw	r2,-36(fp)
   10014:	18800426 	beq	r3,r2,10028 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10018:	e0fffd17 	ldw	r3,-12(fp)
   1001c:	e0bff717 	ldw	r2,-36(fp)
   10020:	1885c83a 	sub	r2,r3,r2
   10024:	00000606 	br	10040 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10028:	e0bfff17 	ldw	r2,-4(fp)
   1002c:	1090000c 	andi	r2,r2,16384
   10030:	10000226 	beq	r2,zero,1003c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10034:	00bffd44 	movi	r2,-11
   10038:	00000106 	br	10040 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1003c:	00bffec4 	movi	r2,-5
}
   10040:	e037883a 	mov	sp,fp
   10044:	dfc00117 	ldw	ra,4(sp)
   10048:	df000017 	ldw	fp,0(sp)
   1004c:	dec00204 	addi	sp,sp,8
   10050:	f800283a 	ret

00010054 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10054:	defffa04 	addi	sp,sp,-24
   10058:	dfc00515 	stw	ra,20(sp)
   1005c:	df000415 	stw	fp,16(sp)
   10060:	df000404 	addi	fp,sp,16
   10064:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10068:	0007883a 	mov	r3,zero
   1006c:	e0bfff17 	ldw	r2,-4(fp)
   10070:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10074:	e0bfff17 	ldw	r2,-4(fp)
   10078:	10800104 	addi	r2,r2,4
   1007c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10080:	0005303a 	rdctl	r2,status
   10084:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10088:	e0fffd17 	ldw	r3,-12(fp)
   1008c:	00bfff84 	movi	r2,-2
   10090:	1884703a 	and	r2,r3,r2
   10094:	1001703a 	wrctl	status,r2
  
  return context;
   10098:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1009c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   100a0:	000f2d00 	call	f2d0 <alt_tick>
   100a4:	e0bffc17 	ldw	r2,-16(fp)
   100a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100ac:	e0bffe17 	ldw	r2,-8(fp)
   100b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   100b4:	0001883a 	nop
   100b8:	e037883a 	mov	sp,fp
   100bc:	dfc00117 	ldw	ra,4(sp)
   100c0:	df000017 	ldw	fp,0(sp)
   100c4:	dec00204 	addi	sp,sp,8
   100c8:	f800283a 	ret

000100cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   100cc:	defff804 	addi	sp,sp,-32
   100d0:	dfc00715 	stw	ra,28(sp)
   100d4:	df000615 	stw	fp,24(sp)
   100d8:	df000604 	addi	fp,sp,24
   100dc:	e13ffc15 	stw	r4,-16(fp)
   100e0:	e17ffd15 	stw	r5,-12(fp)
   100e4:	e1bffe15 	stw	r6,-8(fp)
   100e8:	e1ffff15 	stw	r7,-4(fp)
   100ec:	e0bfff17 	ldw	r2,-4(fp)
   100f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   100f4:	d0a6ea17 	ldw	r2,-25688(gp)
   100f8:	1000021e 	bne	r2,zero,10104 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   100fc:	e0bffb17 	ldw	r2,-20(fp)
   10100:	d0a6ea15 	stw	r2,-25688(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10104:	e0bffc17 	ldw	r2,-16(fp)
   10108:	10800104 	addi	r2,r2,4
   1010c:	00c001c4 	movi	r3,7
   10110:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10114:	d8000015 	stw	zero,0(sp)
   10118:	e1fffc17 	ldw	r7,-16(fp)
   1011c:	01800074 	movhi	r6,1
   10120:	31801504 	addi	r6,r6,84
   10124:	e17ffe17 	ldw	r5,-8(fp)
   10128:	e13ffd17 	ldw	r4,-12(fp)
   1012c:	00107100 	call	10710 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10130:	0001883a 	nop
   10134:	e037883a 	mov	sp,fp
   10138:	dfc00117 	ldw	ra,4(sp)
   1013c:	df000017 	ldw	fp,0(sp)
   10140:	dec00204 	addi	sp,sp,8
   10144:	f800283a 	ret

00010148 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   10148:	deffe504 	addi	sp,sp,-108
   1014c:	dfc01915 	stw	ra,100(sp)
   10150:	df001815 	stw	fp,96(sp)
   10154:	dcc01715 	stw	r19,92(sp)
   10158:	dc801615 	stw	r18,88(sp)
   1015c:	dc401515 	stw	r17,84(sp)
   10160:	dc001415 	stw	r16,80(sp)
   10164:	df001804 	addi	fp,sp,96
   10168:	e13ff915 	stw	r4,-28(fp)
   1016c:	e17ffa15 	stw	r5,-24(fp)
   10170:	e1bffb15 	stw	r6,-20(fp)
   10174:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
   10178:	00800044 	movi	r2,1
   1017c:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
   10180:	00800074 	movhi	r2,1
   10184:	10868604 	addi	r2,r2,6680
   10188:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
   1018c:	00800074 	movhi	r2,1
   10190:	10869704 	addi	r2,r2,6748
   10194:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
   10198:	0007883a 	mov	r3,zero
   1019c:	e0bff917 	ldw	r2,-28(fp)
   101a0:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
   101a4:	e0800204 	addi	r2,fp,8
   101a8:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
   101ac:	e13ff917 	ldw	r4,-28(fp)
   101b0:	0010e240 	call	10e24 <perf_get_total_time>
   101b4:	e0bff215 	stw	r2,-56(fp)
   101b8:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
   101bc:	e13ff217 	ldw	r4,-56(fp)
   101c0:	e17ff317 	ldw	r5,-52(fp)
   101c4:	00115bc0 	call	115bc <__floatundidf>
   101c8:	1021883a 	mov	r16,r2
   101cc:	1823883a 	mov	r17,r3
   101d0:	e13ffa17 	ldw	r4,-24(fp)
   101d4:	000e7880 	call	e788 <__floatunsidf>
   101d8:	1009883a 	mov	r4,r2
   101dc:	180b883a 	mov	r5,r3
   101e0:	200d883a 	mov	r6,r4
   101e4:	280f883a 	mov	r7,r5
   101e8:	8009883a 	mov	r4,r16
   101ec:	880b883a 	mov	r5,r17
   101f0:	00021f80 	call	21f8 <__divdf3>
   101f4:	1009883a 	mov	r4,r2
   101f8:	180b883a 	mov	r5,r3
   101fc:	e13ff415 	stw	r4,-48(fp)
   10200:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
   10204:	e0bff017 	ldw	r2,-64(fp)
   10208:	d8800315 	stw	r2,12(sp)
   1020c:	e0bff117 	ldw	r2,-60(fp)
   10210:	d8800215 	stw	r2,8(sp)
   10214:	e0bff017 	ldw	r2,-64(fp)
   10218:	d8800115 	stw	r2,4(sp)
   1021c:	e0bff317 	ldw	r2,-52(fp)
   10220:	d8800015 	stw	r2,0(sp)
   10224:	e1fff217 	ldw	r7,-56(fp)
   10228:	e17ff417 	ldw	r5,-48(fp)
   1022c:	e1bff517 	ldw	r6,-44(fp)
   10230:	01000074 	movhi	r4,1
   10234:	2106a804 	addi	r4,r4,6816
   10238:	00040f80 	call	40f8 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
   1023c:	e0bff817 	ldw	r2,-32(fp)
   10240:	10c00104 	addi	r3,r2,4
   10244:	e0fff815 	stw	r3,-32(fp)
   10248:	10800017 	ldw	r2,0(r2)
   1024c:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
   10250:	00800044 	movi	r2,1
   10254:	e0bfef15 	stw	r2,-68(fp)
   10258:	00004e06 	br	10394 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
   1025c:	e17fef17 	ldw	r5,-68(fp)
   10260:	e13ff917 	ldw	r4,-28(fp)
   10264:	0010d680 	call	10d68 <perf_get_section_time>
   10268:	e0bff615 	stw	r2,-40(fp)
   1026c:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
   10270:	e13ff617 	ldw	r4,-40(fp)
   10274:	e17ff717 	ldw	r5,-36(fp)
   10278:	00115bc0 	call	115bc <__floatundidf>
   1027c:	1011883a 	mov	r8,r2
   10280:	1813883a 	mov	r9,r3
   10284:	000d883a 	mov	r6,zero
   10288:	01d01674 	movhi	r7,16473
   1028c:	4009883a 	mov	r4,r8
   10290:	480b883a 	mov	r5,r9
   10294:	0002bd40 	call	2bd4 <__muldf3>
   10298:	1009883a 	mov	r4,r2
   1029c:	180b883a 	mov	r5,r3
   102a0:	2021883a 	mov	r16,r4
   102a4:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   102a8:	e13ff217 	ldw	r4,-56(fp)
   102ac:	e17ff317 	ldw	r5,-52(fp)
   102b0:	00115bc0 	call	115bc <__floatundidf>
   102b4:	1009883a 	mov	r4,r2
   102b8:	180b883a 	mov	r5,r3
   102bc:	200d883a 	mov	r6,r4
   102c0:	280f883a 	mov	r7,r5
   102c4:	8009883a 	mov	r4,r16
   102c8:	880b883a 	mov	r5,r17
   102cc:	00021f80 	call	21f8 <__divdf3>
   102d0:	1009883a 	mov	r4,r2
   102d4:	180b883a 	mov	r5,r3
   102d8:	2025883a 	mov	r18,r4
   102dc:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
   102e0:	e13ff617 	ldw	r4,-40(fp)
   102e4:	e17ff717 	ldw	r5,-36(fp)
   102e8:	00115bc0 	call	115bc <__floatundidf>
   102ec:	1021883a 	mov	r16,r2
   102f0:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   102f4:	e13ffa17 	ldw	r4,-24(fp)
   102f8:	000e7880 	call	e788 <__floatunsidf>
   102fc:	1009883a 	mov	r4,r2
   10300:	180b883a 	mov	r5,r3
   10304:	200d883a 	mov	r6,r4
   10308:	280f883a 	mov	r7,r5
   1030c:	8009883a 	mov	r4,r16
   10310:	880b883a 	mov	r5,r17
   10314:	00021f80 	call	21f8 <__divdf3>
   10318:	1009883a 	mov	r4,r2
   1031c:	180b883a 	mov	r5,r3
   10320:	2021883a 	mov	r16,r4
   10324:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
   10328:	e17fef17 	ldw	r5,-68(fp)
   1032c:	e13ff917 	ldw	r4,-28(fp)
   10330:	0010e700 	call	10e70 <perf_get_num_starts>
   10334:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   10338:	e0bff017 	ldw	r2,-64(fp)
   1033c:	d8800515 	stw	r2,20(sp)
   10340:	d8c00415 	stw	r3,16(sp)
   10344:	e0bff617 	ldw	r2,-40(fp)
   10348:	d8800215 	stw	r2,8(sp)
   1034c:	e0bff717 	ldw	r2,-36(fp)
   10350:	d8800315 	stw	r2,12(sp)
   10354:	dc000015 	stw	r16,0(sp)
   10358:	dc400115 	stw	r17,4(sp)
   1035c:	900d883a 	mov	r6,r18
   10360:	980f883a 	mov	r7,r19
   10364:	e17fee17 	ldw	r5,-72(fp)
   10368:	01000074 	movhi	r4,1
   1036c:	2106bd04 	addi	r4,r4,6900
   10370:	00040f80 	call	40f8 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
   10374:	e0bff817 	ldw	r2,-32(fp)
   10378:	10c00104 	addi	r3,r2,4
   1037c:	e0fff815 	stw	r3,-32(fp)
   10380:	10800017 	ldw	r2,0(r2)
   10384:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
   10388:	e0bfef17 	ldw	r2,-68(fp)
   1038c:	10800044 	addi	r2,r2,1
   10390:	e0bfef15 	stw	r2,-68(fp)
   10394:	e0bfef17 	ldw	r2,-68(fp)
   10398:	e0fffb17 	ldw	r3,-20(fp)
   1039c:	18bfaf0e 	bge	r3,r2,1025c <__alt_mem_onchip_memory+0xf781025c>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
   103a0:	0005883a 	mov	r2,zero
}
   103a4:	e6fffc04 	addi	sp,fp,-16
   103a8:	dfc00517 	ldw	ra,20(sp)
   103ac:	df000417 	ldw	fp,16(sp)
   103b0:	dcc00317 	ldw	r19,12(sp)
   103b4:	dc800217 	ldw	r18,8(sp)
   103b8:	dc400117 	ldw	r17,4(sp)
   103bc:	dc000017 	ldw	r16,0(sp)
   103c0:	dec00704 	addi	sp,sp,28
   103c4:	f800283a 	ret

000103c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   103c8:	defff504 	addi	sp,sp,-44
   103cc:	df000a15 	stw	fp,40(sp)
   103d0:	df000a04 	addi	fp,sp,40
   103d4:	e13ffc15 	stw	r4,-16(fp)
   103d8:	e17ffd15 	stw	r5,-12(fp)
   103dc:	e1bffe15 	stw	r6,-8(fp)
   103e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   103e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   103e8:	d0a6ea17 	ldw	r2,-25688(gp)
  
  if (alt_ticks_per_second ())
   103ec:	10003c26 	beq	r2,zero,104e0 <alt_alarm_start+0x118>
  {
    if (alarm)
   103f0:	e0bffc17 	ldw	r2,-16(fp)
   103f4:	10003826 	beq	r2,zero,104d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	e0fffe17 	ldw	r3,-8(fp)
   10400:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10404:	e0bffc17 	ldw	r2,-16(fp)
   10408:	e0ffff17 	ldw	r3,-4(fp)
   1040c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10410:	0005303a 	rdctl	r2,status
   10414:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10418:	e0fff917 	ldw	r3,-28(fp)
   1041c:	00bfff84 	movi	r2,-2
   10420:	1884703a 	and	r2,r3,r2
   10424:	1001703a 	wrctl	status,r2
  
  return context;
   10428:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1042c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10430:	d0a6eb17 	ldw	r2,-25684(gp)
      
      current_nticks = alt_nticks();
   10434:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10438:	e0fffd17 	ldw	r3,-12(fp)
   1043c:	e0bff617 	ldw	r2,-40(fp)
   10440:	1885883a 	add	r2,r3,r2
   10444:	10c00044 	addi	r3,r2,1
   10448:	e0bffc17 	ldw	r2,-16(fp)
   1044c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10450:	e0bffc17 	ldw	r2,-16(fp)
   10454:	10c00217 	ldw	r3,8(r2)
   10458:	e0bff617 	ldw	r2,-40(fp)
   1045c:	1880042e 	bgeu	r3,r2,10470 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10460:	e0bffc17 	ldw	r2,-16(fp)
   10464:	00c00044 	movi	r3,1
   10468:	10c00405 	stb	r3,16(r2)
   1046c:	00000206 	br	10478 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10470:	e0bffc17 	ldw	r2,-16(fp)
   10474:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10478:	e0bffc17 	ldw	r2,-16(fp)
   1047c:	d0e01204 	addi	r3,gp,-32696
   10480:	e0fffa15 	stw	r3,-24(fp)
   10484:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10488:	e0bffb17 	ldw	r2,-20(fp)
   1048c:	e0fffa17 	ldw	r3,-24(fp)
   10490:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10494:	e0bffa17 	ldw	r2,-24(fp)
   10498:	10c00017 	ldw	r3,0(r2)
   1049c:	e0bffb17 	ldw	r2,-20(fp)
   104a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   104a4:	e0bffa17 	ldw	r2,-24(fp)
   104a8:	10800017 	ldw	r2,0(r2)
   104ac:	e0fffb17 	ldw	r3,-20(fp)
   104b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   104b4:	e0bffa17 	ldw	r2,-24(fp)
   104b8:	e0fffb17 	ldw	r3,-20(fp)
   104bc:	10c00015 	stw	r3,0(r2)
   104c0:	e0bff817 	ldw	r2,-32(fp)
   104c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104c8:	e0bff717 	ldw	r2,-36(fp)
   104cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   104d0:	0005883a 	mov	r2,zero
   104d4:	00000306 	br	104e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   104d8:	00bffa84 	movi	r2,-22
   104dc:	00000106 	br	104e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   104e0:	00bfde84 	movi	r2,-134
  }
}
   104e4:	e037883a 	mov	sp,fp
   104e8:	df000017 	ldw	fp,0(sp)
   104ec:	dec00104 	addi	sp,sp,4
   104f0:	f800283a 	ret

000104f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   104f4:	defffe04 	addi	sp,sp,-8
   104f8:	df000115 	stw	fp,4(sp)
   104fc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10500:	e03fff15 	stw	zero,-4(fp)
   10504:	00000506 	br	1051c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10508:	e0bfff17 	ldw	r2,-4(fp)
   1050c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10510:	e0bfff17 	ldw	r2,-4(fp)
   10514:	10800804 	addi	r2,r2,32
   10518:	e0bfff15 	stw	r2,-4(fp)
   1051c:	e0bfff17 	ldw	r2,-4(fp)
   10520:	10820030 	cmpltui	r2,r2,2048
   10524:	103ff81e 	bne	r2,zero,10508 <__alt_mem_onchip_memory+0xf7810508>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10528:	0001883a 	nop
   1052c:	e037883a 	mov	sp,fp
   10530:	df000017 	ldw	fp,0(sp)
   10534:	dec00104 	addi	sp,sp,4
   10538:	f800283a 	ret

0001053c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1053c:	defffe04 	addi	sp,sp,-8
   10540:	dfc00115 	stw	ra,4(sp)
   10544:	df000015 	stw	fp,0(sp)
   10548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1054c:	d0a01017 	ldw	r2,-32704(gp)
   10550:	10000326 	beq	r2,zero,10560 <alt_get_errno+0x24>
   10554:	d0a01017 	ldw	r2,-32704(gp)
   10558:	103ee83a 	callr	r2
   1055c:	00000106 	br	10564 <alt_get_errno+0x28>
   10560:	d0a6dc04 	addi	r2,gp,-25744
}
   10564:	e037883a 	mov	sp,fp
   10568:	dfc00117 	ldw	ra,4(sp)
   1056c:	df000017 	ldw	fp,0(sp)
   10570:	dec00204 	addi	sp,sp,8
   10574:	f800283a 	ret

00010578 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10578:	defffa04 	addi	sp,sp,-24
   1057c:	dfc00515 	stw	ra,20(sp)
   10580:	df000415 	stw	fp,16(sp)
   10584:	df000404 	addi	fp,sp,16
   10588:	e13ffe15 	stw	r4,-8(fp)
   1058c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	10000326 	beq	r2,zero,105a4 <alt_dev_llist_insert+0x2c>
   10598:	e0bffe17 	ldw	r2,-8(fp)
   1059c:	10800217 	ldw	r2,8(r2)
   105a0:	1000061e 	bne	r2,zero,105bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   105a4:	001053c0 	call	1053c <alt_get_errno>
   105a8:	1007883a 	mov	r3,r2
   105ac:	00800584 	movi	r2,22
   105b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   105b4:	00bffa84 	movi	r2,-22
   105b8:	00001306 	br	10608 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   105bc:	e0bffe17 	ldw	r2,-8(fp)
   105c0:	e0ffff17 	ldw	r3,-4(fp)
   105c4:	e0fffc15 	stw	r3,-16(fp)
   105c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   105cc:	e0bffd17 	ldw	r2,-12(fp)
   105d0:	e0fffc17 	ldw	r3,-16(fp)
   105d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   105d8:	e0bffc17 	ldw	r2,-16(fp)
   105dc:	10c00017 	ldw	r3,0(r2)
   105e0:	e0bffd17 	ldw	r2,-12(fp)
   105e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	10800017 	ldw	r2,0(r2)
   105f0:	e0fffd17 	ldw	r3,-12(fp)
   105f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   105f8:	e0bffc17 	ldw	r2,-16(fp)
   105fc:	e0fffd17 	ldw	r3,-12(fp)
   10600:	10c00015 	stw	r3,0(r2)

  return 0;  
   10604:	0005883a 	mov	r2,zero
}
   10608:	e037883a 	mov	sp,fp
   1060c:	dfc00117 	ldw	ra,4(sp)
   10610:	df000017 	ldw	fp,0(sp)
   10614:	dec00204 	addi	sp,sp,8
   10618:	f800283a 	ret

0001061c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1061c:	defffd04 	addi	sp,sp,-12
   10620:	dfc00215 	stw	ra,8(sp)
   10624:	df000115 	stw	fp,4(sp)
   10628:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1062c:	00800074 	movhi	r2,1
   10630:	10859704 	addi	r2,r2,5724
   10634:	e0bfff15 	stw	r2,-4(fp)
   10638:	00000606 	br	10654 <_do_ctors+0x38>
        (*ctor) (); 
   1063c:	e0bfff17 	ldw	r2,-4(fp)
   10640:	10800017 	ldw	r2,0(r2)
   10644:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10648:	e0bfff17 	ldw	r2,-4(fp)
   1064c:	10bfff04 	addi	r2,r2,-4
   10650:	e0bfff15 	stw	r2,-4(fp)
   10654:	e0ffff17 	ldw	r3,-4(fp)
   10658:	00800074 	movhi	r2,1
   1065c:	10859804 	addi	r2,r2,5728
   10660:	18bff62e 	bgeu	r3,r2,1063c <__alt_mem_onchip_memory+0xf781063c>
        (*ctor) (); 
}
   10664:	0001883a 	nop
   10668:	e037883a 	mov	sp,fp
   1066c:	dfc00117 	ldw	ra,4(sp)
   10670:	df000017 	ldw	fp,0(sp)
   10674:	dec00204 	addi	sp,sp,8
   10678:	f800283a 	ret

0001067c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1067c:	defffd04 	addi	sp,sp,-12
   10680:	dfc00215 	stw	ra,8(sp)
   10684:	df000115 	stw	fp,4(sp)
   10688:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1068c:	00800074 	movhi	r2,1
   10690:	10859704 	addi	r2,r2,5724
   10694:	e0bfff15 	stw	r2,-4(fp)
   10698:	00000606 	br	106b4 <_do_dtors+0x38>
        (*dtor) (); 
   1069c:	e0bfff17 	ldw	r2,-4(fp)
   106a0:	10800017 	ldw	r2,0(r2)
   106a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   106a8:	e0bfff17 	ldw	r2,-4(fp)
   106ac:	10bfff04 	addi	r2,r2,-4
   106b0:	e0bfff15 	stw	r2,-4(fp)
   106b4:	e0ffff17 	ldw	r3,-4(fp)
   106b8:	00800074 	movhi	r2,1
   106bc:	10859804 	addi	r2,r2,5728
   106c0:	18bff62e 	bgeu	r3,r2,1069c <__alt_mem_onchip_memory+0xf781069c>
        (*dtor) (); 
}
   106c4:	0001883a 	nop
   106c8:	e037883a 	mov	sp,fp
   106cc:	dfc00117 	ldw	ra,4(sp)
   106d0:	df000017 	ldw	fp,0(sp)
   106d4:	dec00204 	addi	sp,sp,8
   106d8:	f800283a 	ret

000106dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   106dc:	defffe04 	addi	sp,sp,-8
   106e0:	dfc00115 	stw	ra,4(sp)
   106e4:	df000015 	stw	fp,0(sp)
   106e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   106ec:	01440004 	movi	r5,4096
   106f0:	0009883a 	mov	r4,zero
   106f4:	00111300 	call	11130 <alt_icache_flush>
#endif
}
   106f8:	0001883a 	nop
   106fc:	e037883a 	mov	sp,fp
   10700:	dfc00117 	ldw	ra,4(sp)
   10704:	df000017 	ldw	fp,0(sp)
   10708:	dec00204 	addi	sp,sp,8
   1070c:	f800283a 	ret

00010710 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10710:	defff904 	addi	sp,sp,-28
   10714:	dfc00615 	stw	ra,24(sp)
   10718:	df000515 	stw	fp,20(sp)
   1071c:	df000504 	addi	fp,sp,20
   10720:	e13ffc15 	stw	r4,-16(fp)
   10724:	e17ffd15 	stw	r5,-12(fp)
   10728:	e1bffe15 	stw	r6,-8(fp)
   1072c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10730:	e0800217 	ldw	r2,8(fp)
   10734:	d8800015 	stw	r2,0(sp)
   10738:	e1ffff17 	ldw	r7,-4(fp)
   1073c:	e1bffe17 	ldw	r6,-8(fp)
   10740:	e17ffd17 	ldw	r5,-12(fp)
   10744:	e13ffc17 	ldw	r4,-16(fp)
   10748:	00108c00 	call	108c0 <alt_iic_isr_register>
}  
   1074c:	e037883a 	mov	sp,fp
   10750:	dfc00117 	ldw	ra,4(sp)
   10754:	df000017 	ldw	fp,0(sp)
   10758:	dec00204 	addi	sp,sp,8
   1075c:	f800283a 	ret

00010760 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10760:	defff904 	addi	sp,sp,-28
   10764:	df000615 	stw	fp,24(sp)
   10768:	df000604 	addi	fp,sp,24
   1076c:	e13ffe15 	stw	r4,-8(fp)
   10770:	e17fff15 	stw	r5,-4(fp)
   10774:	e0bfff17 	ldw	r2,-4(fp)
   10778:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1077c:	0005303a 	rdctl	r2,status
   10780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10784:	e0fffb17 	ldw	r3,-20(fp)
   10788:	00bfff84 	movi	r2,-2
   1078c:	1884703a 	and	r2,r3,r2
   10790:	1001703a 	wrctl	status,r2
  
  return context;
   10794:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10798:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1079c:	00c00044 	movi	r3,1
   107a0:	e0bffa17 	ldw	r2,-24(fp)
   107a4:	1884983a 	sll	r2,r3,r2
   107a8:	1007883a 	mov	r3,r2
   107ac:	d0a6ec17 	ldw	r2,-25680(gp)
   107b0:	1884b03a 	or	r2,r3,r2
   107b4:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   107b8:	d0a6ec17 	ldw	r2,-25680(gp)
   107bc:	100170fa 	wrctl	ienable,r2
   107c0:	e0bffc17 	ldw	r2,-16(fp)
   107c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   107d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   107d4:	0001883a 	nop
}
   107d8:	e037883a 	mov	sp,fp
   107dc:	df000017 	ldw	fp,0(sp)
   107e0:	dec00104 	addi	sp,sp,4
   107e4:	f800283a 	ret

000107e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   107e8:	defff904 	addi	sp,sp,-28
   107ec:	df000615 	stw	fp,24(sp)
   107f0:	df000604 	addi	fp,sp,24
   107f4:	e13ffe15 	stw	r4,-8(fp)
   107f8:	e17fff15 	stw	r5,-4(fp)
   107fc:	e0bfff17 	ldw	r2,-4(fp)
   10800:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10804:	0005303a 	rdctl	r2,status
   10808:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1080c:	e0fffb17 	ldw	r3,-20(fp)
   10810:	00bfff84 	movi	r2,-2
   10814:	1884703a 	and	r2,r3,r2
   10818:	1001703a 	wrctl	status,r2
  
  return context;
   1081c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10820:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10824:	00c00044 	movi	r3,1
   10828:	e0bffa17 	ldw	r2,-24(fp)
   1082c:	1884983a 	sll	r2,r3,r2
   10830:	0084303a 	nor	r2,zero,r2
   10834:	1007883a 	mov	r3,r2
   10838:	d0a6ec17 	ldw	r2,-25680(gp)
   1083c:	1884703a 	and	r2,r3,r2
   10840:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10844:	d0a6ec17 	ldw	r2,-25680(gp)
   10848:	100170fa 	wrctl	ienable,r2
   1084c:	e0bffc17 	ldw	r2,-16(fp)
   10850:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10854:	e0bffd17 	ldw	r2,-12(fp)
   10858:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1085c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10860:	0001883a 	nop
}
   10864:	e037883a 	mov	sp,fp
   10868:	df000017 	ldw	fp,0(sp)
   1086c:	dec00104 	addi	sp,sp,4
   10870:	f800283a 	ret

00010874 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10874:	defffc04 	addi	sp,sp,-16
   10878:	df000315 	stw	fp,12(sp)
   1087c:	df000304 	addi	fp,sp,12
   10880:	e13ffe15 	stw	r4,-8(fp)
   10884:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10888:	000530fa 	rdctl	r2,ienable
   1088c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10890:	00c00044 	movi	r3,1
   10894:	e0bfff17 	ldw	r2,-4(fp)
   10898:	1884983a 	sll	r2,r3,r2
   1089c:	1007883a 	mov	r3,r2
   108a0:	e0bffd17 	ldw	r2,-12(fp)
   108a4:	1884703a 	and	r2,r3,r2
   108a8:	1004c03a 	cmpne	r2,r2,zero
   108ac:	10803fcc 	andi	r2,r2,255
}
   108b0:	e037883a 	mov	sp,fp
   108b4:	df000017 	ldw	fp,0(sp)
   108b8:	dec00104 	addi	sp,sp,4
   108bc:	f800283a 	ret

000108c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   108c0:	defff504 	addi	sp,sp,-44
   108c4:	dfc00a15 	stw	ra,40(sp)
   108c8:	df000915 	stw	fp,36(sp)
   108cc:	df000904 	addi	fp,sp,36
   108d0:	e13ffc15 	stw	r4,-16(fp)
   108d4:	e17ffd15 	stw	r5,-12(fp)
   108d8:	e1bffe15 	stw	r6,-8(fp)
   108dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   108e0:	00bffa84 	movi	r2,-22
   108e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   108e8:	e0bffd17 	ldw	r2,-12(fp)
   108ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   108f0:	e0bff817 	ldw	r2,-32(fp)
   108f4:	10800808 	cmpgei	r2,r2,32
   108f8:	1000271e 	bne	r2,zero,10998 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108fc:	0005303a 	rdctl	r2,status
   10900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10904:	e0fffb17 	ldw	r3,-20(fp)
   10908:	00bfff84 	movi	r2,-2
   1090c:	1884703a 	and	r2,r3,r2
   10910:	1001703a 	wrctl	status,r2
  
  return context;
   10914:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10918:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1091c:	00800074 	movhi	r2,1
   10920:	109e4904 	addi	r2,r2,31012
   10924:	e0fff817 	ldw	r3,-32(fp)
   10928:	180690fa 	slli	r3,r3,3
   1092c:	10c5883a 	add	r2,r2,r3
   10930:	e0fffe17 	ldw	r3,-8(fp)
   10934:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10938:	00800074 	movhi	r2,1
   1093c:	109e4904 	addi	r2,r2,31012
   10940:	e0fff817 	ldw	r3,-32(fp)
   10944:	180690fa 	slli	r3,r3,3
   10948:	10c5883a 	add	r2,r2,r3
   1094c:	10800104 	addi	r2,r2,4
   10950:	e0ffff17 	ldw	r3,-4(fp)
   10954:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10958:	e0bffe17 	ldw	r2,-8(fp)
   1095c:	10000526 	beq	r2,zero,10974 <alt_iic_isr_register+0xb4>
   10960:	e0bff817 	ldw	r2,-32(fp)
   10964:	100b883a 	mov	r5,r2
   10968:	e13ffc17 	ldw	r4,-16(fp)
   1096c:	00107600 	call	10760 <alt_ic_irq_enable>
   10970:	00000406 	br	10984 <alt_iic_isr_register+0xc4>
   10974:	e0bff817 	ldw	r2,-32(fp)
   10978:	100b883a 	mov	r5,r2
   1097c:	e13ffc17 	ldw	r4,-16(fp)
   10980:	00107e80 	call	107e8 <alt_ic_irq_disable>
   10984:	e0bff715 	stw	r2,-36(fp)
   10988:	e0bffa17 	ldw	r2,-24(fp)
   1098c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10990:	e0bff917 	ldw	r2,-28(fp)
   10994:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10998:	e0bff717 	ldw	r2,-36(fp)
}
   1099c:	e037883a 	mov	sp,fp
   109a0:	dfc00117 	ldw	ra,4(sp)
   109a4:	df000017 	ldw	fp,0(sp)
   109a8:	dec00204 	addi	sp,sp,8
   109ac:	f800283a 	ret

000109b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   109b0:	defff904 	addi	sp,sp,-28
   109b4:	dfc00615 	stw	ra,24(sp)
   109b8:	df000515 	stw	fp,20(sp)
   109bc:	df000504 	addi	fp,sp,20
   109c0:	e13ffc15 	stw	r4,-16(fp)
   109c4:	e17ffd15 	stw	r5,-12(fp)
   109c8:	e1bffe15 	stw	r6,-8(fp)
   109cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   109d0:	e1bfff17 	ldw	r6,-4(fp)
   109d4:	e17ffe17 	ldw	r5,-8(fp)
   109d8:	e13ffd17 	ldw	r4,-12(fp)
   109dc:	0010bf00 	call	10bf0 <open>
   109e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   109e4:	e0bffb17 	ldw	r2,-20(fp)
   109e8:	10001c16 	blt	r2,zero,10a5c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   109ec:	00800074 	movhi	r2,1
   109f0:	1088f904 	addi	r2,r2,9188
   109f4:	e0fffb17 	ldw	r3,-20(fp)
   109f8:	18c00324 	muli	r3,r3,12
   109fc:	10c5883a 	add	r2,r2,r3
   10a00:	10c00017 	ldw	r3,0(r2)
   10a04:	e0bffc17 	ldw	r2,-16(fp)
   10a08:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10a0c:	00800074 	movhi	r2,1
   10a10:	1088f904 	addi	r2,r2,9188
   10a14:	e0fffb17 	ldw	r3,-20(fp)
   10a18:	18c00324 	muli	r3,r3,12
   10a1c:	10c5883a 	add	r2,r2,r3
   10a20:	10800104 	addi	r2,r2,4
   10a24:	10c00017 	ldw	r3,0(r2)
   10a28:	e0bffc17 	ldw	r2,-16(fp)
   10a2c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10a30:	00800074 	movhi	r2,1
   10a34:	1088f904 	addi	r2,r2,9188
   10a38:	e0fffb17 	ldw	r3,-20(fp)
   10a3c:	18c00324 	muli	r3,r3,12
   10a40:	10c5883a 	add	r2,r2,r3
   10a44:	10800204 	addi	r2,r2,8
   10a48:	10c00017 	ldw	r3,0(r2)
   10a4c:	e0bffc17 	ldw	r2,-16(fp)
   10a50:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10a54:	e13ffb17 	ldw	r4,-20(fp)
   10a58:	000f1200 	call	f120 <alt_release_fd>
  }
} 
   10a5c:	0001883a 	nop
   10a60:	e037883a 	mov	sp,fp
   10a64:	dfc00117 	ldw	ra,4(sp)
   10a68:	df000017 	ldw	fp,0(sp)
   10a6c:	dec00204 	addi	sp,sp,8
   10a70:	f800283a 	ret

00010a74 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10a74:	defffb04 	addi	sp,sp,-20
   10a78:	dfc00415 	stw	ra,16(sp)
   10a7c:	df000315 	stw	fp,12(sp)
   10a80:	df000304 	addi	fp,sp,12
   10a84:	e13ffd15 	stw	r4,-12(fp)
   10a88:	e17ffe15 	stw	r5,-8(fp)
   10a8c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10a90:	01c07fc4 	movi	r7,511
   10a94:	01800044 	movi	r6,1
   10a98:	e17ffd17 	ldw	r5,-12(fp)
   10a9c:	01000074 	movhi	r4,1
   10aa0:	2108fc04 	addi	r4,r4,9200
   10aa4:	00109b00 	call	109b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10aa8:	01c07fc4 	movi	r7,511
   10aac:	000d883a 	mov	r6,zero
   10ab0:	e17ffe17 	ldw	r5,-8(fp)
   10ab4:	01000074 	movhi	r4,1
   10ab8:	2108f904 	addi	r4,r4,9188
   10abc:	00109b00 	call	109b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10ac0:	01c07fc4 	movi	r7,511
   10ac4:	01800044 	movi	r6,1
   10ac8:	e17fff17 	ldw	r5,-4(fp)
   10acc:	01000074 	movhi	r4,1
   10ad0:	2108ff04 	addi	r4,r4,9212
   10ad4:	00109b00 	call	109b0 <alt_open_fd>
}  
   10ad8:	0001883a 	nop
   10adc:	e037883a 	mov	sp,fp
   10ae0:	dfc00117 	ldw	ra,4(sp)
   10ae4:	df000017 	ldw	fp,0(sp)
   10ae8:	dec00204 	addi	sp,sp,8
   10aec:	f800283a 	ret

00010af0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10af0:	defffe04 	addi	sp,sp,-8
   10af4:	dfc00115 	stw	ra,4(sp)
   10af8:	df000015 	stw	fp,0(sp)
   10afc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b00:	d0a01017 	ldw	r2,-32704(gp)
   10b04:	10000326 	beq	r2,zero,10b14 <alt_get_errno+0x24>
   10b08:	d0a01017 	ldw	r2,-32704(gp)
   10b0c:	103ee83a 	callr	r2
   10b10:	00000106 	br	10b18 <alt_get_errno+0x28>
   10b14:	d0a6dc04 	addi	r2,gp,-25744
}
   10b18:	e037883a 	mov	sp,fp
   10b1c:	dfc00117 	ldw	ra,4(sp)
   10b20:	df000017 	ldw	fp,0(sp)
   10b24:	dec00204 	addi	sp,sp,8
   10b28:	f800283a 	ret

00010b2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10b2c:	defffd04 	addi	sp,sp,-12
   10b30:	df000215 	stw	fp,8(sp)
   10b34:	df000204 	addi	fp,sp,8
   10b38:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10b3c:	e0bfff17 	ldw	r2,-4(fp)
   10b40:	10800217 	ldw	r2,8(r2)
   10b44:	10d00034 	orhi	r3,r2,16384
   10b48:	e0bfff17 	ldw	r2,-4(fp)
   10b4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10b50:	e03ffe15 	stw	zero,-8(fp)
   10b54:	00001d06 	br	10bcc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b58:	00800074 	movhi	r2,1
   10b5c:	1088f904 	addi	r2,r2,9188
   10b60:	e0fffe17 	ldw	r3,-8(fp)
   10b64:	18c00324 	muli	r3,r3,12
   10b68:	10c5883a 	add	r2,r2,r3
   10b6c:	10c00017 	ldw	r3,0(r2)
   10b70:	e0bfff17 	ldw	r2,-4(fp)
   10b74:	10800017 	ldw	r2,0(r2)
   10b78:	1880111e 	bne	r3,r2,10bc0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10b7c:	00800074 	movhi	r2,1
   10b80:	1088f904 	addi	r2,r2,9188
   10b84:	e0fffe17 	ldw	r3,-8(fp)
   10b88:	18c00324 	muli	r3,r3,12
   10b8c:	10c5883a 	add	r2,r2,r3
   10b90:	10800204 	addi	r2,r2,8
   10b94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10b98:	1000090e 	bge	r2,zero,10bc0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10b9c:	e0bffe17 	ldw	r2,-8(fp)
   10ba0:	10c00324 	muli	r3,r2,12
   10ba4:	00800074 	movhi	r2,1
   10ba8:	1088f904 	addi	r2,r2,9188
   10bac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10bb0:	e0bfff17 	ldw	r2,-4(fp)
   10bb4:	18800226 	beq	r3,r2,10bc0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10bb8:	00bffcc4 	movi	r2,-13
   10bbc:	00000806 	br	10be0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10bc0:	e0bffe17 	ldw	r2,-8(fp)
   10bc4:	10800044 	addi	r2,r2,1
   10bc8:	e0bffe15 	stw	r2,-8(fp)
   10bcc:	d0a00f17 	ldw	r2,-32708(gp)
   10bd0:	1007883a 	mov	r3,r2
   10bd4:	e0bffe17 	ldw	r2,-8(fp)
   10bd8:	18bfdf2e 	bgeu	r3,r2,10b58 <__alt_mem_onchip_memory+0xf7810b58>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10bdc:	0005883a 	mov	r2,zero
}
   10be0:	e037883a 	mov	sp,fp
   10be4:	df000017 	ldw	fp,0(sp)
   10be8:	dec00104 	addi	sp,sp,4
   10bec:	f800283a 	ret

00010bf0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10bf0:	defff604 	addi	sp,sp,-40
   10bf4:	dfc00915 	stw	ra,36(sp)
   10bf8:	df000815 	stw	fp,32(sp)
   10bfc:	df000804 	addi	fp,sp,32
   10c00:	e13ffd15 	stw	r4,-12(fp)
   10c04:	e17ffe15 	stw	r5,-8(fp)
   10c08:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10c0c:	00bfffc4 	movi	r2,-1
   10c10:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10c14:	00bffb44 	movi	r2,-19
   10c18:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10c1c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10c20:	d1600d04 	addi	r5,gp,-32716
   10c24:	e13ffd17 	ldw	r4,-12(fp)
   10c28:	0010ef40 	call	10ef4 <alt_find_dev>
   10c2c:	e0bff815 	stw	r2,-32(fp)
   10c30:	e0bff817 	ldw	r2,-32(fp)
   10c34:	1000051e 	bne	r2,zero,10c4c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10c38:	e13ffd17 	ldw	r4,-12(fp)
   10c3c:	0010f840 	call	10f84 <alt_find_file>
   10c40:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10c44:	00800044 	movi	r2,1
   10c48:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10c4c:	e0bff817 	ldw	r2,-32(fp)
   10c50:	10002926 	beq	r2,zero,10cf8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10c54:	e13ff817 	ldw	r4,-32(fp)
   10c58:	001108c0 	call	1108c <alt_get_fd>
   10c5c:	e0bff915 	stw	r2,-28(fp)
   10c60:	e0bff917 	ldw	r2,-28(fp)
   10c64:	1000030e 	bge	r2,zero,10c74 <open+0x84>
    {
      status = index;
   10c68:	e0bff917 	ldw	r2,-28(fp)
   10c6c:	e0bffa15 	stw	r2,-24(fp)
   10c70:	00002306 	br	10d00 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10c74:	e0bff917 	ldw	r2,-28(fp)
   10c78:	10c00324 	muli	r3,r2,12
   10c7c:	00800074 	movhi	r2,1
   10c80:	1088f904 	addi	r2,r2,9188
   10c84:	1885883a 	add	r2,r3,r2
   10c88:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10c8c:	e0fffe17 	ldw	r3,-8(fp)
   10c90:	00900034 	movhi	r2,16384
   10c94:	10bfffc4 	addi	r2,r2,-1
   10c98:	1886703a 	and	r3,r3,r2
   10c9c:	e0bffc17 	ldw	r2,-16(fp)
   10ca0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10ca4:	e0bffb17 	ldw	r2,-20(fp)
   10ca8:	1000051e 	bne	r2,zero,10cc0 <open+0xd0>
   10cac:	e13ffc17 	ldw	r4,-16(fp)
   10cb0:	0010b2c0 	call	10b2c <alt_file_locked>
   10cb4:	e0bffa15 	stw	r2,-24(fp)
   10cb8:	e0bffa17 	ldw	r2,-24(fp)
   10cbc:	10001016 	blt	r2,zero,10d00 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10cc0:	e0bff817 	ldw	r2,-32(fp)
   10cc4:	10800317 	ldw	r2,12(r2)
   10cc8:	10000826 	beq	r2,zero,10cec <open+0xfc>
   10ccc:	e0bff817 	ldw	r2,-32(fp)
   10cd0:	10800317 	ldw	r2,12(r2)
   10cd4:	e1ffff17 	ldw	r7,-4(fp)
   10cd8:	e1bffe17 	ldw	r6,-8(fp)
   10cdc:	e17ffd17 	ldw	r5,-12(fp)
   10ce0:	e13ffc17 	ldw	r4,-16(fp)
   10ce4:	103ee83a 	callr	r2
   10ce8:	00000106 	br	10cf0 <open+0x100>
   10cec:	0005883a 	mov	r2,zero
   10cf0:	e0bffa15 	stw	r2,-24(fp)
   10cf4:	00000206 	br	10d00 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10cf8:	00bffb44 	movi	r2,-19
   10cfc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10d00:	e0bffa17 	ldw	r2,-24(fp)
   10d04:	1000090e 	bge	r2,zero,10d2c <open+0x13c>
  {
    alt_release_fd (index);  
   10d08:	e13ff917 	ldw	r4,-28(fp)
   10d0c:	000f1200 	call	f120 <alt_release_fd>
    ALT_ERRNO = -status;
   10d10:	0010af00 	call	10af0 <alt_get_errno>
   10d14:	1007883a 	mov	r3,r2
   10d18:	e0bffa17 	ldw	r2,-24(fp)
   10d1c:	0085c83a 	sub	r2,zero,r2
   10d20:	18800015 	stw	r2,0(r3)
    return -1;
   10d24:	00bfffc4 	movi	r2,-1
   10d28:	00000106 	br	10d30 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10d2c:	e0bff917 	ldw	r2,-28(fp)
}
   10d30:	e037883a 	mov	sp,fp
   10d34:	dfc00117 	ldw	ra,4(sp)
   10d38:	df000017 	ldw	fp,0(sp)
   10d3c:	dec00204 	addi	sp,sp,8
   10d40:	f800283a 	ret

00010d44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10d44:	deffff04 	addi	sp,sp,-4
   10d48:	df000015 	stw	fp,0(sp)
   10d4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10d50:	000170fa 	wrctl	ienable,zero
}
   10d54:	0001883a 	nop
   10d58:	e037883a 	mov	sp,fp
   10d5c:	df000017 	ldw	fp,0(sp)
   10d60:	dec00104 	addi	sp,sp,4
   10d64:	f800283a 	ret

00010d68 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   10d68:	defff904 	addi	sp,sp,-28
   10d6c:	df000615 	stw	fp,24(sp)
   10d70:	df000604 	addi	fp,sp,24
   10d74:	e13ffe15 	stw	r4,-8(fp)
   10d78:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   10d7c:	e03ffa15 	stw	zero,-24(fp)
   10d80:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   10d84:	000b883a 	mov	r5,zero
   10d88:	e13ffe17 	ldw	r4,-8(fp)
   10d8c:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
   10d90:	e13fff17 	ldw	r4,-4(fp)
   10d94:	2008913a 	slli	r4,r4,4
   10d98:	200b883a 	mov	r5,r4
   10d9c:	e13ffe17 	ldw	r4,-8(fp)
   10da0:	2149883a 	add	r4,r4,r5
   10da4:	21000037 	ldwio	r4,0(r4)
   10da8:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   10dac:	e13fff17 	ldw	r4,-4(fp)
   10db0:	2008913a 	slli	r4,r4,4
   10db4:	21000104 	addi	r4,r4,4
   10db8:	200b883a 	mov	r5,r4
   10dbc:	e13ffe17 	ldw	r4,-8(fp)
   10dc0:	2149883a 	add	r4,r4,r5
   10dc4:	21000037 	ldwio	r4,0(r4)
   10dc8:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   10dcc:	e13ffd17 	ldw	r4,-12(fp)
   10dd0:	2011883a 	mov	r8,r4
   10dd4:	0013883a 	mov	r9,zero
   10dd8:	4006983a 	sll	r3,r8,zero
   10ddc:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
   10de0:	e13ffc17 	ldw	r4,-16(fp)
   10de4:	200d883a 	mov	r6,r4
   10de8:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   10dec:	1188b03a 	or	r4,r2,r6
   10df0:	e13ffa15 	stw	r4,-24(fp)
   10df4:	19c4b03a 	or	r2,r3,r7
   10df8:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   10dfc:	e0bffa17 	ldw	r2,-24(fp)
   10e00:	e0fffb17 	ldw	r3,-20(fp)
   10e04:	1009883a 	mov	r4,r2
   10e08:	180b883a 	mov	r5,r3
}
   10e0c:	2005883a 	mov	r2,r4
   10e10:	2807883a 	mov	r3,r5
   10e14:	e037883a 	mov	sp,fp
   10e18:	df000017 	ldw	fp,0(sp)
   10e1c:	dec00104 	addi	sp,sp,4
   10e20:	f800283a 	ret

00010e24 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   10e24:	defffd04 	addi	sp,sp,-12
   10e28:	dfc00215 	stw	ra,8(sp)
   10e2c:	df000115 	stw	fp,4(sp)
   10e30:	df000104 	addi	fp,sp,4
   10e34:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   10e38:	000b883a 	mov	r5,zero
   10e3c:	e13fff17 	ldw	r4,-4(fp)
   10e40:	0010d680 	call	10d68 <perf_get_section_time>
   10e44:	100b883a 	mov	r5,r2
   10e48:	180d883a 	mov	r6,r3
   10e4c:	2807883a 	mov	r3,r5
   10e50:	3009883a 	mov	r4,r6
}
   10e54:	1805883a 	mov	r2,r3
   10e58:	2007883a 	mov	r3,r4
   10e5c:	e037883a 	mov	sp,fp
   10e60:	dfc00117 	ldw	ra,4(sp)
   10e64:	df000017 	ldw	fp,0(sp)
   10e68:	dec00204 	addi	sp,sp,8
   10e6c:	f800283a 	ret

00010e70 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   10e70:	defffd04 	addi	sp,sp,-12
   10e74:	df000215 	stw	fp,8(sp)
   10e78:	df000204 	addi	fp,sp,8
   10e7c:	e13ffe15 	stw	r4,-8(fp)
   10e80:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   10e84:	e0bfff17 	ldw	r2,-4(fp)
   10e88:	1004913a 	slli	r2,r2,4
   10e8c:	10800204 	addi	r2,r2,8
   10e90:	1007883a 	mov	r3,r2
   10e94:	e0bffe17 	ldw	r2,-8(fp)
   10e98:	10c5883a 	add	r2,r2,r3
   10e9c:	10800037 	ldwio	r2,0(r2)
}
   10ea0:	e037883a 	mov	sp,fp
   10ea4:	df000017 	ldw	fp,0(sp)
   10ea8:	dec00104 	addi	sp,sp,4
   10eac:	f800283a 	ret

00010eb0 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   10eb0:	deffff04 	addi	sp,sp,-4
   10eb4:	df000015 	stw	fp,0(sp)
   10eb8:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
   10ebc:	0005883a 	mov	r2,zero
#endif
}
   10ec0:	e037883a 	mov	sp,fp
   10ec4:	df000017 	ldw	fp,0(sp)
   10ec8:	dec00104 	addi	sp,sp,4
   10ecc:	f800283a 	ret

00010ed0 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   10ed0:	deffff04 	addi	sp,sp,-4
   10ed4:	df000015 	stw	fp,0(sp)
   10ed8:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   10edc:	0080bef4 	movhi	r2,763
   10ee0:	10bc2004 	addi	r2,r2,-3968
}
   10ee4:	e037883a 	mov	sp,fp
   10ee8:	df000017 	ldw	fp,0(sp)
   10eec:	dec00104 	addi	sp,sp,4
   10ef0:	f800283a 	ret

00010ef4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10ef4:	defffa04 	addi	sp,sp,-24
   10ef8:	dfc00515 	stw	ra,20(sp)
   10efc:	df000415 	stw	fp,16(sp)
   10f00:	df000404 	addi	fp,sp,16
   10f04:	e13ffe15 	stw	r4,-8(fp)
   10f08:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10f0c:	e0bfff17 	ldw	r2,-4(fp)
   10f10:	10800017 	ldw	r2,0(r2)
   10f14:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10f18:	e13ffe17 	ldw	r4,-8(fp)
   10f1c:	00042a40 	call	42a4 <strlen>
   10f20:	10800044 	addi	r2,r2,1
   10f24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10f28:	00000d06 	br	10f60 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10f2c:	e0bffc17 	ldw	r2,-16(fp)
   10f30:	10800217 	ldw	r2,8(r2)
   10f34:	e0fffd17 	ldw	r3,-12(fp)
   10f38:	180d883a 	mov	r6,r3
   10f3c:	e17ffe17 	ldw	r5,-8(fp)
   10f40:	1009883a 	mov	r4,r2
   10f44:	00112a80 	call	112a8 <memcmp>
   10f48:	1000021e 	bne	r2,zero,10f54 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10f4c:	e0bffc17 	ldw	r2,-16(fp)
   10f50:	00000706 	br	10f70 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10f54:	e0bffc17 	ldw	r2,-16(fp)
   10f58:	10800017 	ldw	r2,0(r2)
   10f5c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10f60:	e0fffc17 	ldw	r3,-16(fp)
   10f64:	e0bfff17 	ldw	r2,-4(fp)
   10f68:	18bff01e 	bne	r3,r2,10f2c <__alt_mem_onchip_memory+0xf7810f2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10f6c:	0005883a 	mov	r2,zero
}
   10f70:	e037883a 	mov	sp,fp
   10f74:	dfc00117 	ldw	ra,4(sp)
   10f78:	df000017 	ldw	fp,0(sp)
   10f7c:	dec00204 	addi	sp,sp,8
   10f80:	f800283a 	ret

00010f84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10f84:	defffb04 	addi	sp,sp,-20
   10f88:	dfc00415 	stw	ra,16(sp)
   10f8c:	df000315 	stw	fp,12(sp)
   10f90:	df000304 	addi	fp,sp,12
   10f94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10f98:	d0a00b17 	ldw	r2,-32724(gp)
   10f9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10fa0:	00003106 	br	11068 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10fa4:	e0bffd17 	ldw	r2,-12(fp)
   10fa8:	10800217 	ldw	r2,8(r2)
   10fac:	1009883a 	mov	r4,r2
   10fb0:	00042a40 	call	42a4 <strlen>
   10fb4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10fb8:	e0bffd17 	ldw	r2,-12(fp)
   10fbc:	10c00217 	ldw	r3,8(r2)
   10fc0:	e0bffe17 	ldw	r2,-8(fp)
   10fc4:	10bfffc4 	addi	r2,r2,-1
   10fc8:	1885883a 	add	r2,r3,r2
   10fcc:	10800003 	ldbu	r2,0(r2)
   10fd0:	10803fcc 	andi	r2,r2,255
   10fd4:	1080201c 	xori	r2,r2,128
   10fd8:	10bfe004 	addi	r2,r2,-128
   10fdc:	10800bd8 	cmpnei	r2,r2,47
   10fe0:	1000031e 	bne	r2,zero,10ff0 <alt_find_file+0x6c>
    {
      len -= 1;
   10fe4:	e0bffe17 	ldw	r2,-8(fp)
   10fe8:	10bfffc4 	addi	r2,r2,-1
   10fec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10ff0:	e0bffe17 	ldw	r2,-8(fp)
   10ff4:	e0ffff17 	ldw	r3,-4(fp)
   10ff8:	1885883a 	add	r2,r3,r2
   10ffc:	10800003 	ldbu	r2,0(r2)
   11000:	10803fcc 	andi	r2,r2,255
   11004:	1080201c 	xori	r2,r2,128
   11008:	10bfe004 	addi	r2,r2,-128
   1100c:	10800be0 	cmpeqi	r2,r2,47
   11010:	1000081e 	bne	r2,zero,11034 <alt_find_file+0xb0>
   11014:	e0bffe17 	ldw	r2,-8(fp)
   11018:	e0ffff17 	ldw	r3,-4(fp)
   1101c:	1885883a 	add	r2,r3,r2
   11020:	10800003 	ldbu	r2,0(r2)
   11024:	10803fcc 	andi	r2,r2,255
   11028:	1080201c 	xori	r2,r2,128
   1102c:	10bfe004 	addi	r2,r2,-128
   11030:	10000a1e 	bne	r2,zero,1105c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11034:	e0bffd17 	ldw	r2,-12(fp)
   11038:	10800217 	ldw	r2,8(r2)
   1103c:	e0fffe17 	ldw	r3,-8(fp)
   11040:	180d883a 	mov	r6,r3
   11044:	e17fff17 	ldw	r5,-4(fp)
   11048:	1009883a 	mov	r4,r2
   1104c:	00112a80 	call	112a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11050:	1000021e 	bne	r2,zero,1105c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11054:	e0bffd17 	ldw	r2,-12(fp)
   11058:	00000706 	br	11078 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1105c:	e0bffd17 	ldw	r2,-12(fp)
   11060:	10800017 	ldw	r2,0(r2)
   11064:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11068:	e0fffd17 	ldw	r3,-12(fp)
   1106c:	d0a00b04 	addi	r2,gp,-32724
   11070:	18bfcc1e 	bne	r3,r2,10fa4 <__alt_mem_onchip_memory+0xf7810fa4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11074:	0005883a 	mov	r2,zero
}
   11078:	e037883a 	mov	sp,fp
   1107c:	dfc00117 	ldw	ra,4(sp)
   11080:	df000017 	ldw	fp,0(sp)
   11084:	dec00204 	addi	sp,sp,8
   11088:	f800283a 	ret

0001108c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1108c:	defffc04 	addi	sp,sp,-16
   11090:	df000315 	stw	fp,12(sp)
   11094:	df000304 	addi	fp,sp,12
   11098:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1109c:	00bffa04 	movi	r2,-24
   110a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   110a4:	e03ffd15 	stw	zero,-12(fp)
   110a8:	00001906 	br	11110 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   110ac:	00800074 	movhi	r2,1
   110b0:	1088f904 	addi	r2,r2,9188
   110b4:	e0fffd17 	ldw	r3,-12(fp)
   110b8:	18c00324 	muli	r3,r3,12
   110bc:	10c5883a 	add	r2,r2,r3
   110c0:	10800017 	ldw	r2,0(r2)
   110c4:	10000f1e 	bne	r2,zero,11104 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   110c8:	00800074 	movhi	r2,1
   110cc:	1088f904 	addi	r2,r2,9188
   110d0:	e0fffd17 	ldw	r3,-12(fp)
   110d4:	18c00324 	muli	r3,r3,12
   110d8:	10c5883a 	add	r2,r2,r3
   110dc:	e0ffff17 	ldw	r3,-4(fp)
   110e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   110e4:	d0e00f17 	ldw	r3,-32708(gp)
   110e8:	e0bffd17 	ldw	r2,-12(fp)
   110ec:	1880020e 	bge	r3,r2,110f8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   110f0:	e0bffd17 	ldw	r2,-12(fp)
   110f4:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   110f8:	e0bffd17 	ldw	r2,-12(fp)
   110fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11100:	00000606 	br	1111c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11104:	e0bffd17 	ldw	r2,-12(fp)
   11108:	10800044 	addi	r2,r2,1
   1110c:	e0bffd15 	stw	r2,-12(fp)
   11110:	e0bffd17 	ldw	r2,-12(fp)
   11114:	10800810 	cmplti	r2,r2,32
   11118:	103fe41e 	bne	r2,zero,110ac <__alt_mem_onchip_memory+0xf78110ac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1111c:	e0bffe17 	ldw	r2,-8(fp)
}
   11120:	e037883a 	mov	sp,fp
   11124:	df000017 	ldw	fp,0(sp)
   11128:	dec00104 	addi	sp,sp,4
   1112c:	f800283a 	ret

00011130 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11130:	defffb04 	addi	sp,sp,-20
   11134:	df000415 	stw	fp,16(sp)
   11138:	df000404 	addi	fp,sp,16
   1113c:	e13ffe15 	stw	r4,-8(fp)
   11140:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11144:	e0bfff17 	ldw	r2,-4(fp)
   11148:	10840070 	cmpltui	r2,r2,4097
   1114c:	1000021e 	bne	r2,zero,11158 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11150:	00840004 	movi	r2,4096
   11154:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11158:	e0fffe17 	ldw	r3,-8(fp)
   1115c:	e0bfff17 	ldw	r2,-4(fp)
   11160:	1885883a 	add	r2,r3,r2
   11164:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11168:	e0bffe17 	ldw	r2,-8(fp)
   1116c:	e0bffc15 	stw	r2,-16(fp)
   11170:	00000506 	br	11188 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11174:	e0bffc17 	ldw	r2,-16(fp)
   11178:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1117c:	e0bffc17 	ldw	r2,-16(fp)
   11180:	10800804 	addi	r2,r2,32
   11184:	e0bffc15 	stw	r2,-16(fp)
   11188:	e0fffc17 	ldw	r3,-16(fp)
   1118c:	e0bffd17 	ldw	r2,-12(fp)
   11190:	18bff836 	bltu	r3,r2,11174 <__alt_mem_onchip_memory+0xf7811174>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11194:	e0bffe17 	ldw	r2,-8(fp)
   11198:	108007cc 	andi	r2,r2,31
   1119c:	10000226 	beq	r2,zero,111a8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   111a0:	e0bffc17 	ldw	r2,-16(fp)
   111a4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   111a8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   111ac:	0001883a 	nop
   111b0:	e037883a 	mov	sp,fp
   111b4:	df000017 	ldw	fp,0(sp)
   111b8:	dec00104 	addi	sp,sp,4
   111bc:	f800283a 	ret

000111c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   111c0:	defffe04 	addi	sp,sp,-8
   111c4:	df000115 	stw	fp,4(sp)
   111c8:	df000104 	addi	fp,sp,4
   111cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   111d0:	e0bfff17 	ldw	r2,-4(fp)
   111d4:	10bffe84 	addi	r2,r2,-6
   111d8:	10c00428 	cmpgeui	r3,r2,16
   111dc:	18001a1e 	bne	r3,zero,11248 <alt_exception_cause_generated_bad_addr+0x88>
   111e0:	100690ba 	slli	r3,r2,2
   111e4:	00800074 	movhi	r2,1
   111e8:	10847e04 	addi	r2,r2,4600
   111ec:	1885883a 	add	r2,r3,r2
   111f0:	10800017 	ldw	r2,0(r2)
   111f4:	1000683a 	jmp	r2
   111f8:	00011238 	rdprs	zero,zero,1096
   111fc:	00011238 	rdprs	zero,zero,1096
   11200:	00011248 	cmpgei	zero,zero,1097
   11204:	00011248 	cmpgei	zero,zero,1097
   11208:	00011248 	cmpgei	zero,zero,1097
   1120c:	00011238 	rdprs	zero,zero,1096
   11210:	00011240 	call	1124 <initData+0x17c>
   11214:	00011248 	cmpgei	zero,zero,1097
   11218:	00011238 	rdprs	zero,zero,1096
   1121c:	00011238 	rdprs	zero,zero,1096
   11220:	00011248 	cmpgei	zero,zero,1097
   11224:	00011238 	rdprs	zero,zero,1096
   11228:	00011240 	call	1124 <initData+0x17c>
   1122c:	00011248 	cmpgei	zero,zero,1097
   11230:	00011248 	cmpgei	zero,zero,1097
   11234:	00011238 	rdprs	zero,zero,1096
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11238:	00800044 	movi	r2,1
   1123c:	00000306 	br	1124c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11240:	0005883a 	mov	r2,zero
   11244:	00000106 	br	1124c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11248:	0005883a 	mov	r2,zero
  }
}
   1124c:	e037883a 	mov	sp,fp
   11250:	df000017 	ldw	fp,0(sp)
   11254:	dec00104 	addi	sp,sp,4
   11258:	f800283a 	ret

0001125c <atexit>:
   1125c:	200b883a 	mov	r5,r4
   11260:	000f883a 	mov	r7,zero
   11264:	000d883a 	mov	r6,zero
   11268:	0009883a 	mov	r4,zero
   1126c:	00113241 	jmpi	11324 <__register_exitproc>

00011270 <exit>:
   11270:	defffe04 	addi	sp,sp,-8
   11274:	000b883a 	mov	r5,zero
   11278:	dc000015 	stw	r16,0(sp)
   1127c:	dfc00115 	stw	ra,4(sp)
   11280:	2021883a 	mov	r16,r4
   11284:	001143c0 	call	1143c <__call_exitprocs>
   11288:	00800074 	movhi	r2,1
   1128c:	108d7604 	addi	r2,r2,13784
   11290:	11000017 	ldw	r4,0(r2)
   11294:	20800f17 	ldw	r2,60(r4)
   11298:	10000126 	beq	r2,zero,112a0 <exit+0x30>
   1129c:	103ee83a 	callr	r2
   112a0:	8009883a 	mov	r4,r16
   112a4:	001162c0 	call	1162c <_exit>

000112a8 <memcmp>:
   112a8:	01c000c4 	movi	r7,3
   112ac:	3980192e 	bgeu	r7,r6,11314 <memcmp+0x6c>
   112b0:	2144b03a 	or	r2,r4,r5
   112b4:	11c4703a 	and	r2,r2,r7
   112b8:	10000f26 	beq	r2,zero,112f8 <memcmp+0x50>
   112bc:	20800003 	ldbu	r2,0(r4)
   112c0:	28c00003 	ldbu	r3,0(r5)
   112c4:	10c0151e 	bne	r2,r3,1131c <memcmp+0x74>
   112c8:	31bfff84 	addi	r6,r6,-2
   112cc:	01ffffc4 	movi	r7,-1
   112d0:	00000406 	br	112e4 <memcmp+0x3c>
   112d4:	20800003 	ldbu	r2,0(r4)
   112d8:	28c00003 	ldbu	r3,0(r5)
   112dc:	31bfffc4 	addi	r6,r6,-1
   112e0:	10c00e1e 	bne	r2,r3,1131c <memcmp+0x74>
   112e4:	21000044 	addi	r4,r4,1
   112e8:	29400044 	addi	r5,r5,1
   112ec:	31fff91e 	bne	r6,r7,112d4 <__alt_mem_onchip_memory+0xf78112d4>
   112f0:	0005883a 	mov	r2,zero
   112f4:	f800283a 	ret
   112f8:	20c00017 	ldw	r3,0(r4)
   112fc:	28800017 	ldw	r2,0(r5)
   11300:	18bfee1e 	bne	r3,r2,112bc <__alt_mem_onchip_memory+0xf78112bc>
   11304:	31bfff04 	addi	r6,r6,-4
   11308:	21000104 	addi	r4,r4,4
   1130c:	29400104 	addi	r5,r5,4
   11310:	39bff936 	bltu	r7,r6,112f8 <__alt_mem_onchip_memory+0xf78112f8>
   11314:	303fe91e 	bne	r6,zero,112bc <__alt_mem_onchip_memory+0xf78112bc>
   11318:	003ff506 	br	112f0 <__alt_mem_onchip_memory+0xf78112f0>
   1131c:	10c5c83a 	sub	r2,r2,r3
   11320:	f800283a 	ret

00011324 <__register_exitproc>:
   11324:	defffa04 	addi	sp,sp,-24
   11328:	dc000315 	stw	r16,12(sp)
   1132c:	04000074 	movhi	r16,1
   11330:	840d7604 	addi	r16,r16,13784
   11334:	80c00017 	ldw	r3,0(r16)
   11338:	dc400415 	stw	r17,16(sp)
   1133c:	dfc00515 	stw	ra,20(sp)
   11340:	18805217 	ldw	r2,328(r3)
   11344:	2023883a 	mov	r17,r4
   11348:	10003726 	beq	r2,zero,11428 <__register_exitproc+0x104>
   1134c:	10c00117 	ldw	r3,4(r2)
   11350:	010007c4 	movi	r4,31
   11354:	20c00e16 	blt	r4,r3,11390 <__register_exitproc+0x6c>
   11358:	1a000044 	addi	r8,r3,1
   1135c:	8800221e 	bne	r17,zero,113e8 <__register_exitproc+0xc4>
   11360:	18c00084 	addi	r3,r3,2
   11364:	18c7883a 	add	r3,r3,r3
   11368:	18c7883a 	add	r3,r3,r3
   1136c:	12000115 	stw	r8,4(r2)
   11370:	10c7883a 	add	r3,r2,r3
   11374:	19400015 	stw	r5,0(r3)
   11378:	0005883a 	mov	r2,zero
   1137c:	dfc00517 	ldw	ra,20(sp)
   11380:	dc400417 	ldw	r17,16(sp)
   11384:	dc000317 	ldw	r16,12(sp)
   11388:	dec00604 	addi	sp,sp,24
   1138c:	f800283a 	ret
   11390:	00800034 	movhi	r2,0
   11394:	10800004 	addi	r2,r2,0
   11398:	10002626 	beq	r2,zero,11434 <__register_exitproc+0x110>
   1139c:	01006404 	movi	r4,400
   113a0:	d9400015 	stw	r5,0(sp)
   113a4:	d9800115 	stw	r6,4(sp)
   113a8:	d9c00215 	stw	r7,8(sp)
   113ac:	00000000 	call	0 <__alt_mem_sdram>
   113b0:	d9400017 	ldw	r5,0(sp)
   113b4:	d9800117 	ldw	r6,4(sp)
   113b8:	d9c00217 	ldw	r7,8(sp)
   113bc:	10001d26 	beq	r2,zero,11434 <__register_exitproc+0x110>
   113c0:	81000017 	ldw	r4,0(r16)
   113c4:	10000115 	stw	zero,4(r2)
   113c8:	02000044 	movi	r8,1
   113cc:	22405217 	ldw	r9,328(r4)
   113d0:	0007883a 	mov	r3,zero
   113d4:	12400015 	stw	r9,0(r2)
   113d8:	20805215 	stw	r2,328(r4)
   113dc:	10006215 	stw	zero,392(r2)
   113e0:	10006315 	stw	zero,396(r2)
   113e4:	883fde26 	beq	r17,zero,11360 <__alt_mem_onchip_memory+0xf7811360>
   113e8:	18c9883a 	add	r4,r3,r3
   113ec:	2109883a 	add	r4,r4,r4
   113f0:	1109883a 	add	r4,r2,r4
   113f4:	21802215 	stw	r6,136(r4)
   113f8:	01800044 	movi	r6,1
   113fc:	12406217 	ldw	r9,392(r2)
   11400:	30cc983a 	sll	r6,r6,r3
   11404:	4992b03a 	or	r9,r9,r6
   11408:	12406215 	stw	r9,392(r2)
   1140c:	21c04215 	stw	r7,264(r4)
   11410:	01000084 	movi	r4,2
   11414:	893fd21e 	bne	r17,r4,11360 <__alt_mem_onchip_memory+0xf7811360>
   11418:	11006317 	ldw	r4,396(r2)
   1141c:	218cb03a 	or	r6,r4,r6
   11420:	11806315 	stw	r6,396(r2)
   11424:	003fce06 	br	11360 <__alt_mem_onchip_memory+0xf7811360>
   11428:	18805304 	addi	r2,r3,332
   1142c:	18805215 	stw	r2,328(r3)
   11430:	003fc606 	br	1134c <__alt_mem_onchip_memory+0xf781134c>
   11434:	00bfffc4 	movi	r2,-1
   11438:	003fd006 	br	1137c <__alt_mem_onchip_memory+0xf781137c>

0001143c <__call_exitprocs>:
   1143c:	defff504 	addi	sp,sp,-44
   11440:	df000915 	stw	fp,36(sp)
   11444:	dd400615 	stw	r21,24(sp)
   11448:	dc800315 	stw	r18,12(sp)
   1144c:	dfc00a15 	stw	ra,40(sp)
   11450:	ddc00815 	stw	r23,32(sp)
   11454:	dd800715 	stw	r22,28(sp)
   11458:	dd000515 	stw	r20,20(sp)
   1145c:	dcc00415 	stw	r19,16(sp)
   11460:	dc400215 	stw	r17,8(sp)
   11464:	dc000115 	stw	r16,4(sp)
   11468:	d9000015 	stw	r4,0(sp)
   1146c:	2839883a 	mov	fp,r5
   11470:	04800044 	movi	r18,1
   11474:	057fffc4 	movi	r21,-1
   11478:	00800074 	movhi	r2,1
   1147c:	108d7604 	addi	r2,r2,13784
   11480:	12000017 	ldw	r8,0(r2)
   11484:	45005217 	ldw	r20,328(r8)
   11488:	44c05204 	addi	r19,r8,328
   1148c:	a0001c26 	beq	r20,zero,11500 <__call_exitprocs+0xc4>
   11490:	a0800117 	ldw	r2,4(r20)
   11494:	15ffffc4 	addi	r23,r2,-1
   11498:	b8000d16 	blt	r23,zero,114d0 <__call_exitprocs+0x94>
   1149c:	14000044 	addi	r16,r2,1
   114a0:	8421883a 	add	r16,r16,r16
   114a4:	8421883a 	add	r16,r16,r16
   114a8:	84402004 	addi	r17,r16,128
   114ac:	a463883a 	add	r17,r20,r17
   114b0:	a421883a 	add	r16,r20,r16
   114b4:	e0001e26 	beq	fp,zero,11530 <__call_exitprocs+0xf4>
   114b8:	80804017 	ldw	r2,256(r16)
   114bc:	e0801c26 	beq	fp,r2,11530 <__call_exitprocs+0xf4>
   114c0:	bdffffc4 	addi	r23,r23,-1
   114c4:	843fff04 	addi	r16,r16,-4
   114c8:	8c7fff04 	addi	r17,r17,-4
   114cc:	bd7ff91e 	bne	r23,r21,114b4 <__alt_mem_onchip_memory+0xf78114b4>
   114d0:	00800034 	movhi	r2,0
   114d4:	10800004 	addi	r2,r2,0
   114d8:	10000926 	beq	r2,zero,11500 <__call_exitprocs+0xc4>
   114dc:	a0800117 	ldw	r2,4(r20)
   114e0:	1000301e 	bne	r2,zero,115a4 <__call_exitprocs+0x168>
   114e4:	a0800017 	ldw	r2,0(r20)
   114e8:	10003226 	beq	r2,zero,115b4 <__call_exitprocs+0x178>
   114ec:	a009883a 	mov	r4,r20
   114f0:	98800015 	stw	r2,0(r19)
   114f4:	00000000 	call	0 <__alt_mem_sdram>
   114f8:	9d000017 	ldw	r20,0(r19)
   114fc:	a03fe41e 	bne	r20,zero,11490 <__alt_mem_onchip_memory+0xf7811490>
   11500:	dfc00a17 	ldw	ra,40(sp)
   11504:	df000917 	ldw	fp,36(sp)
   11508:	ddc00817 	ldw	r23,32(sp)
   1150c:	dd800717 	ldw	r22,28(sp)
   11510:	dd400617 	ldw	r21,24(sp)
   11514:	dd000517 	ldw	r20,20(sp)
   11518:	dcc00417 	ldw	r19,16(sp)
   1151c:	dc800317 	ldw	r18,12(sp)
   11520:	dc400217 	ldw	r17,8(sp)
   11524:	dc000117 	ldw	r16,4(sp)
   11528:	dec00b04 	addi	sp,sp,44
   1152c:	f800283a 	ret
   11530:	a0800117 	ldw	r2,4(r20)
   11534:	80c00017 	ldw	r3,0(r16)
   11538:	10bfffc4 	addi	r2,r2,-1
   1153c:	15c01426 	beq	r2,r23,11590 <__call_exitprocs+0x154>
   11540:	80000015 	stw	zero,0(r16)
   11544:	183fde26 	beq	r3,zero,114c0 <__alt_mem_onchip_memory+0xf78114c0>
   11548:	95c8983a 	sll	r4,r18,r23
   1154c:	a0806217 	ldw	r2,392(r20)
   11550:	a5800117 	ldw	r22,4(r20)
   11554:	2084703a 	and	r2,r4,r2
   11558:	10000b26 	beq	r2,zero,11588 <__call_exitprocs+0x14c>
   1155c:	a0806317 	ldw	r2,396(r20)
   11560:	2088703a 	and	r4,r4,r2
   11564:	20000c1e 	bne	r4,zero,11598 <__call_exitprocs+0x15c>
   11568:	89400017 	ldw	r5,0(r17)
   1156c:	d9000017 	ldw	r4,0(sp)
   11570:	183ee83a 	callr	r3
   11574:	a0800117 	ldw	r2,4(r20)
   11578:	15bfbf1e 	bne	r2,r22,11478 <__alt_mem_onchip_memory+0xf7811478>
   1157c:	98800017 	ldw	r2,0(r19)
   11580:	153fcf26 	beq	r2,r20,114c0 <__alt_mem_onchip_memory+0xf78114c0>
   11584:	003fbc06 	br	11478 <__alt_mem_onchip_memory+0xf7811478>
   11588:	183ee83a 	callr	r3
   1158c:	003ff906 	br	11574 <__alt_mem_onchip_memory+0xf7811574>
   11590:	a5c00115 	stw	r23,4(r20)
   11594:	003feb06 	br	11544 <__alt_mem_onchip_memory+0xf7811544>
   11598:	89000017 	ldw	r4,0(r17)
   1159c:	183ee83a 	callr	r3
   115a0:	003ff406 	br	11574 <__alt_mem_onchip_memory+0xf7811574>
   115a4:	a0800017 	ldw	r2,0(r20)
   115a8:	a027883a 	mov	r19,r20
   115ac:	1029883a 	mov	r20,r2
   115b0:	003fb606 	br	1148c <__alt_mem_onchip_memory+0xf781148c>
   115b4:	0005883a 	mov	r2,zero
   115b8:	003ffb06 	br	115a8 <__alt_mem_onchip_memory+0xf78115a8>

000115bc <__floatundidf>:
   115bc:	defffc04 	addi	sp,sp,-16
   115c0:	dc800215 	stw	r18,8(sp)
   115c4:	2025883a 	mov	r18,r4
   115c8:	2809883a 	mov	r4,r5
   115cc:	dfc00315 	stw	ra,12(sp)
   115d0:	dc400115 	stw	r17,4(sp)
   115d4:	dc000015 	stw	r16,0(sp)
   115d8:	000e7880 	call	e788 <__floatunsidf>
   115dc:	000d883a 	mov	r6,zero
   115e0:	01d07c34 	movhi	r7,16880
   115e4:	180b883a 	mov	r5,r3
   115e8:	1009883a 	mov	r4,r2
   115ec:	0002bd40 	call	2bd4 <__muldf3>
   115f0:	9009883a 	mov	r4,r18
   115f4:	1023883a 	mov	r17,r2
   115f8:	1821883a 	mov	r16,r3
   115fc:	000e7880 	call	e788 <__floatunsidf>
   11600:	880d883a 	mov	r6,r17
   11604:	800f883a 	mov	r7,r16
   11608:	1009883a 	mov	r4,r2
   1160c:	180b883a 	mov	r5,r3
   11610:	000194c0 	call	194c <__adddf3>
   11614:	dfc00317 	ldw	ra,12(sp)
   11618:	dc800217 	ldw	r18,8(sp)
   1161c:	dc400117 	ldw	r17,4(sp)
   11620:	dc000017 	ldw	r16,0(sp)
   11624:	dec00404 	addi	sp,sp,16
   11628:	f800283a 	ret

0001162c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1162c:	defffd04 	addi	sp,sp,-12
   11630:	df000215 	stw	fp,8(sp)
   11634:	df000204 	addi	fp,sp,8
   11638:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1163c:	0001883a 	nop
   11640:	e0bfff17 	ldw	r2,-4(fp)
   11644:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11648:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1164c:	10000226 	beq	r2,zero,11658 <_exit+0x2c>
    ALT_SIM_FAIL();
   11650:	002af070 	cmpltui	zero,zero,43969
   11654:	00000106 	br	1165c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11658:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1165c:	003fff06 	br	1165c <__alt_mem_onchip_memory+0xf781165c>
