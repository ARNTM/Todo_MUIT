
backpropagation_Tecnica1.elf:     file format elf32-littlenios2
backpropagation_Tecnica1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001243c memsz 0x0001243c flags r-x
    LOAD off    0x0001345c vaddr 0x0001245c paddr 0x00013f5c align 2**12
         filesz 0x00001b00 memsz 0x00001b00 flags rw-
    LOAD off    0x00015a5c vaddr 0x00015a5c paddr 0x00015a5c align 2**12
         filesz 0x00000000 memsz 0x0000290c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011d60  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b8  00011fa4  00011fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b00  0001245c  00013f5c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000290c  00015a5c  00015a5c  00015a5c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00018368  00018368  00014f5c  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08800000  08800000  00014f5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014f5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001170  00000000  00000000  00014f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029127  00000000  00000000  000160f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000aa2c  00000000  00000000  0003f217  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d411  00000000  00000000  00049c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000278c  00000000  00000000  00057054  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004386  00000000  00000000  000597e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000193ab  00000000  00000000  0005db66  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00076f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b00  00000000  00000000  00076f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007c53a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007c53d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007c540  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007c541  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007c542  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007c546  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007c54a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007c54e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007c557  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007c560  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  0007c569  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000029  00000000  00000000  0007c577  2**0
                  CONTENTS, READONLY
 30 .jdi          00003a07  00000000  00000000  0007c5a0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000511e9  00000000  00000000  0007ffa7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011fa4 l    d  .rodata	00000000 .rodata
0001245c l    d  .rwdata	00000000 .rwdata
00015a5c l    d  .bss	00000000 .bss
00018368 l    d  .sdram	00000000 .sdram
08800000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../backpropagation_Tecnica1_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 s_tanh.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_expm1.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0001245c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
000121ae l     O .rodata	00000010 zeroes.4404
0000717c l     F .text	000000bc __sbprintf
000121be l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000738c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008ebc l     F .text	00000008 __fp_unlock
00008ed0 l     F .text	0000019c __sinit.part.1
0000906c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000128a0 l     O .rwdata	00000020 lc_ctype_charset
00012880 l     O .rwdata	00000020 lc_message_charset
000128c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000121ec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000c5b8 l     F .text	000000fc __sprint_r.part.0
00012320 l     O .rodata	00000010 blanks.4348
00012310 l     O .rodata	00000010 zeroes.4349
0000db44 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f174 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f280 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f2ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f58c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f66c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f758 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f92c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013f4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fd1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fe50 l     F .text	00000034 alt_dev_reg
00012ea8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010154 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010360 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010998 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010e80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000112f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011434 l     F .text	0000003c alt_get_errno
00011470 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015abc g     O .bss	00000004 alt_instruction_exception_handler
00004cb8 g     F .text	00000018 putchar
0000bb08 g     F .text	00000074 _mprec_log10
0000bbf4 g     F .text	0000008c __any_on
0000e238 g     F .text	00000054 _isatty_r
000121f8 g     O .rodata	00000028 __mprec_tinytens
0000f868 g     F .text	0000007c alt_main
00004cd0 g     F .text	000000c0 _puts_r
00001a8c g     F .text	00000774 expm1
00018268 g     O .bss	00000100 alt_irq
00002200 g     F .text	00000014 fabs
0000e28c g     F .text	00000060 _lseek_r
000016d4 g     F .text	00000130 sqrt
00013f5c g       *ABS*	00000000 __flash_rwdata_start
0000f044 g     F .text	00000088 .hidden __eqdf2
00009cd4 g     F .text	0000005c _gettimeofday_r
00018368 g       *ABS*	00000000 __alt_heap_start
00004c74 g     F .text	0000003c printf
0000e34c g     F .text	0000009c _wcrtomb_r
0000c478 g     F .text	0000005c __sseek
0000920c g     F .text	00000010 __sinit
00011814 g     F .text	00000024 alt_get_cpu_freq
0000dc00 g     F .text	00000140 __swbuf_r
00009d30 g     F .text	0000007c _setlocale_r
00009074 g     F .text	00000068 __sfmoreglue
0000f908 g     F .text	00000024 __malloc_unlock
0000aa00 g     F .text	0000015c memmove
00010a8c g     F .text	00000280 perf_print_formatted_report
000091f4 g     F .text	00000018 _cleanup
00015a5c g     O .bss	00000004 patNum
0000ac84 g     F .text	000000a8 _Balloc
00003424 g     F .text	000000dc .hidden __gtdf2
00011688 g     F .text	00000024 altera_nios2_gen2_irq_init
00004c34 g     F .text	00000010 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000e1dc g     F .text	0000005c _fstat_r
00015a78 g     O .bss	00000004 errno
0000c3f4 g     F .text	00000008 __seofread
00015aa8 g     O .bss	00000004 alt_argv
0001bf08 g       *ABS*	00000000 _gp
00015a60 g     O .bss	00000004 errThisPat
00015a68 g     O .bss	00000004 RMSerror
00012d28 g     O .rwdata	00000180 alt_fd_list
00000744 g     F .text	00000040 WeightChangesH2O
00000874 g     F .text	000000cc WeightChangesH1H2
00004cb0 g     F .text	00000008 _putchar_r
00011838 g     F .text	00000090 alt_find_dev
0000a8b8 g     F .text	00000148 memcpy
00008ec4 g     F .text	0000000c _cleanup_r
00004688 g     F .text	000000dc .hidden __floatsidf
000113b8 g     F .text	0000007c alt_io_redirect
00003500 g     F .text	000000f4 .hidden __ltdf2
00011fa4 g       *ABS*	00000000 __DTOR_END__
00004d90 g     F .text	00000014 puts
00011b04 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00002214 g     F .text	00000074 __fpclassifyd
0000ba64 g     F .text	000000a4 __ratio
00004ee8 g     F .text	00000030 system
0000db28 g     F .text	0000001c __vfiprintf_internal
00010558 g     F .text	0000021c altera_avalon_jtag_uart_read
00004c44 g     F .text	00000030 _printf_r
00004b78 g     F .text	00000064 .hidden __udivsi3
0000f5c8 g     F .text	000000a4 isatty
00012248 g     O .rodata	000000c8 __mprec_tens
00009dac g     F .text	0000000c __locale_charset
00015a94 g     O .bss	00000008 alt_timezone
00011a74 g     F .text	00000090 alt_icache_flush
00015a90 g     O .bss	00000004 __malloc_top_pad
000117b4 g     F .text	00000040 perf_get_num_starts
00013f24 g     O .rwdata	00000004 __mb_cur_max
00009ddc g     F .text	0000000c _localeconv_r
00013f10 g     O .rwdata	00000004 LR_H2O
0000b090 g     F .text	0000003c __i2b
00009690 g     F .text	000004bc __sfvwrite_r
0000c34c g     F .text	00000054 _sbrk_r
00000a9c g     F .text	00000128 WeightChangesIH1
00000bc4 g     F .text	00000120 WeightUpdatesIH1
0000e2ec g     F .text	00000060 _read_r
00013f44 g     O .rwdata	00000004 alt_max_fd
0000ded0 g     F .text	000000f0 _fclose_r
00008e8c g     F .text	00000030 fflush
00015a8c g     O .bss	00000004 __malloc_max_sbrked_mem
00004764 g     F .text	00000110 .hidden __extendsfdf2
00004eb8 g     F .text	00000030 _system_r
00002290 g     F .text	000008ac .hidden __adddf3
00001134 g     F .text	000000d8 displayResults
00013f0c g     O .rwdata	00000004 LR_IH1
0000b80c g     F .text	0000010c __b2d
0000eb0c g     F .text	00000538 .hidden __umoddi3
0000f794 g     F .text	000000d4 lseek
00013f18 g     O .rwdata	00000004 __fdlib_version
00015ae8 g     O .bss	00000050 hiddenVal2
00013f1c g     O .rwdata	00000004 _global_impure_ptr
0000034c g     F .text	000003f8 calcNet
0000bde8 g     F .text	00000564 _realloc_r
00018368 g       *ABS*	00000000 __bss_end
00011204 g     F .text	000000f0 alt_iic_isr_register
0000fc14 g     F .text	00000108 alt_tick
0000e594 g     F .text	00000578 .hidden __udivdi3
0000e138 g     F .text	00000024 _fputwc_r
00012220 g     O .rodata	00000028 __mprec_bigtens
0000ae74 g     F .text	00000104 __s2b
0000f0cc g     F .text	000000a8 .hidden __floatunsidf
0000b54c g     F .text	00000060 __mcmp
0000922c g     F .text	00000018 __fp_lock_all
000111b8 g     F .text	0000004c alt_ic_irq_enabled
0000fb78 g     F .text	0000009c alt_alarm_stop
0000120c g     F .text	000000c0 calcOverallError
00015ab8 g     O .bss	00000004 alt_irq_active
00013f14 g     O .rwdata	00000004 LR_H1H2
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012d00 g     O .rwdata	00000028 alt_dev_null
00010e38 g     F .text	00000048 alt_dcache_flush_all
0000af78 g     F .text	00000068 __hi0bits
00004608 g     F .text	00000080 .hidden __fixdfsi
00013f5c g       *ABS*	00000000 __ram_rwdata_end
00015b38 g     O .bss	00000050 delta_h2
08800000 g       *ABS*	00000000 __alt_mem_onchip_memory
00013f3c g     O .rwdata	00000008 alt_dev_list
0000fd58 g     F .text	000000f8 write
0000bc80 g     F .text	000000a0 _putc_r
00015b88 g     O .bss	00000054 weightsH2O
0001245c g       *ABS*	00000000 __ram_rodata_end
0000f2e8 g     F .text	000000b0 fstat
00003500 g     F .text	000000f4 .hidden __ledf2
00000940 g     F .text	0000015c WeightUpdatesH1H2
0000b2c4 g     F .text	00000140 __pow5mult
0000c6cc g     F .text	0000145c ___vfiprintf_internal_r
00015a84 g     O .bss	00000004 __nlocale_changed
00004bdc g     F .text	00000058 .hidden __umodsi3
00018368 g       *ABS*	00000000 end
00010094 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00011fa4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00010a10 g     F .text	0000007c alt_avalon_timer_sc_init
00004a1c g     F .text	00000064 .hidden __clzsi2
00010774 g     F .text	00000224 altera_avalon_jtag_uart_write
00001520 g     F .text	000001b4 tanh
0000921c g     F .text	00000004 __sfp_lock_acquire
00000fb0 g     F .text	00000184 initData
0000a7d4 g     F .text	000000e4 memchr
00004f68 g     F .text	000021f8 ___vfprintf_internal_r
00000784 g     F .text	000000f0 WeightUpdatesH2O
00009380 g     F .text	00000310 _free_r
00000290 g     F .text	000000bc print_array
00009db8 g     F .text	00000010 __locale_mb_cur_max
00011d80 g     F .text	00000180 __call_exitprocs
00015a80 g     O .bss	00000004 __mlocale_changed
00013f28 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015ab0 g     O .bss	00000004 _alt_tick_rate
00013f08 g     O .rwdata	00000004 numEpochs
00015bdc g     O .bss	000000c8 ponderacion1
00011f00 g     F .text	00000070 .hidden __floatundidf
00004dbc g     F .text	00000064 rand
0000b404 g     F .text	00000148 __lshift
00015ab4 g     O .bss	00000004 _alt_nticks
0000f968 g     F .text	000000fc read
0000febc g     F .text	00000074 alt_sys_init
00011c68 g     F .text	00000118 __register_exitproc
0000b0cc g     F .text	000001f8 __multiply
00010400 g     F .text	00000068 altera_avalon_jtag_uart_close
0001245c g       *ABS*	00000000 __ram_rwdata_start
00011fa4 g       *ABS*	00000000 __ram_rodata_start
00015ac0 g     O .bss	00000028 __malloc_current_mallinfo
00015ca4 g     O .bss	000000c8 der_hiddenVal1
0000b918 g     F .text	0000014c __d2b
00015a6c g     O .bss	00000004 outPred
0000ff30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000119d0 g     F .text	000000a4 alt_get_fd
00000ce4 g     F .text	0000003c getRand
0000ddb8 g     F .text	00000054 _close_r
000116ac g     F .text	000000bc perf_get_section_time
00015a70 g     O .bss	00000004 ponderacion3
00011bec g     F .text	0000007c memcmp
0000fff0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018368 g       *ABS*	00000000 __alt_stack_base
00010040 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00007238 g     F .text	00000154 __swsetup_r
00002b3c g     F .text	000008e8 .hidden __divdf3
000090dc g     F .text	00000118 __sfp
0000bb7c g     F .text	00000078 __copybits
00011768 g     F .text	0000004c perf_get_total_time
00015d6c g     O .bss	00000ff0 weightsH1H2_old
000128f8 g     O .rwdata	00000408 __malloc_av_
00009228 g     F .text	00000004 __sinit_lock_release
000035f4 g     F .text	00000718 .hidden __muldf3
0000c3a0 g     F .text	00000054 __sread
000118c8 g     F .text	00000108 alt_find_file
00010ebc g     F .text	000000a4 alt_dev_llist_insert
0000f8e4 g     F .text	00000024 __malloc_lock
0000fac8 g     F .text	000000b0 sbrk
00008e30 g     F .text	0000005c _fflush_r
0000de0c g     F .text	000000c4 _calloc_r
0000f398 g     F .text	000001f4 gettimeofday
00015a5c g       *ABS*	00000000 __bss_start
0000ab5c g     F .text	00000128 memset
00000d20 g     F .text	00000290 initWeights
000012cc g     F .text	00000254 main
00015aac g     O .bss	00000004 alt_envp
00015a88 g     O .bss	00000004 __malloc_max_total_mem
0000ff90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000dd40 g     F .text	00000018 __swbuf
00004da4 g     F .text	00000018 srand
0000c4d4 g     F .text	00000008 __sclose
00002288 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0000dfc0 g     F .text	00000014 fclose
00004874 g     F .text	000001a8 .hidden __truncdfsf2
0000758c g     F .text	00001688 _dtoa_r
00009fc8 g     F .text	0000080c _malloc_r
0000e4a8 g     F .text	00000030 __ascii_wctomb
00004f18 g     F .text	00000050 time
00013f48 g     O .rwdata	00000004 alt_errno
00009b4c g     F .text	000000c4 _fwalk
0000bd20 g     F .text	000000c8 putc
00004a80 g     F .text	00000084 .hidden __divsi3
0000925c g     F .text	00000124 _malloc_trim_r
00011fa4 g       *ABS*	00000000 __CTOR_END__
0000c4dc g     F .text	000000dc strcmp
00011fa4 g       *ABS*	00000000 __flash_rodata_start
00016d5c g     O .bss	000000c8 hiddenVal1
00011fa4 g       *ABS*	00000000 __DTOR_LIST__
0000f044 g     F .text	00000088 .hidden __nedf2
0000fe84 g     F .text	00000038 alt_irq_init
0000fa64 g     F .text	00000064 alt_release_fd
00012061 g     O .rodata	00000100 .hidden __clz_tab
00015a7c g     O .bss	00000004 _PathLocale
00011ba0 g     F .text	00000014 atexit
0000dd58 g     F .text	00000060 _write_r
00009de8 g     F .text	00000018 setlocale
00013f20 g     O .rwdata	00000004 _impure_ptr
00015aa4 g     O .bss	00000004 alt_argc
00008c14 g     F .text	0000021c __sflush_r
00010fc0 g     F .text	00000060 _do_dtors
00009dd4 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000b7a8 g     F .text	00000064 __ulp
00009244 g     F .text	00000018 __fp_unlock_all
00013f34 g     O .rwdata	00000008 alt_fs_list
00016e24 g     O .bss	00000258 weightsIH1
0001707c g     O .bss	00000054 weightsH2O_old
00015a74 g     O .bss	00000004 der_outPred
00015a9c g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009e00 g     F .text	0000000c localeconv
00001804 g     F .text	00000288 __ieee754_sqrt
00011054 g     F .text	00000050 alt_ic_isr_register
00013f5c g       *ABS*	00000000 _edata
00018368 g       *ABS*	00000000 _end
0000dfd4 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00010468 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001112c g     F .text	0000008c alt_ic_irq_disable
000170d0 g     O .bss	00000030 trainInputs
0000c3fc g     F .text	0000007c __swrite
00013f2c g     O .rwdata	00000004 __malloc_trim_threshold
000117f4 g     F .text	00000020 alt_get_performance_counter_base
00009dc8 g     F .text	0000000c __locale_msgcharset
00011bb4 g     F .text	00000038 exit
00009c10 g     F .text	000000c4 _fwalk_reent
0000b5ac g     F .text	000001fc __mdiff
00004b04 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00009220 g     F .text	00000004 __sfp_lock_release
00017100 g     O .bss	00000010 trainOutput
00000000 g       *ABS*	00000000 __alt_mem_sdram
00017110 g     O .bss	00000050 ponderacion2
00017160 g     O .bss	00000ff0 weightsH1H2
00011f70 g     F .text	00000034 _exit
00010d0c g     F .text	0000012c alt_alarm_start
00015a64 g     O .bss	00000004 delta_o
0000e534 g     F .text	00000060 .hidden __muldi3
00009e0c g     F .text	000001bc __smakebuf_r
00004e20 g     F .text	00000098 strlen
00011534 g     F .text	00000154 open
00003424 g     F .text	000000dc .hidden __gedf2
00018150 g     O .bss	00000050 der_hiddenVal2
00013f30 g     O .rwdata	00000004 __wctomb
0000c6b4 g     F .text	00000018 __sprint_r
00011020 g     F .text	00000034 alt_icache_flush_all
00013f58 g     O .rwdata	00000004 alt_priority_mask
000181a0 g     O .bss	000000c8 delta_h1
000110a4 g     F .text	00000088 alt_ic_irq_enable
00007160 g     F .text	0000001c __vfprintf_internal
0000e4d8 g     F .text	0000005c _wctomb_r
00003d0c g     F .text	000008fc .hidden __subdf3
0000afe0 g     F .text	000000b0 __lo0bits
00013f50 g     O .rwdata	00000008 alt_alarm_list
00010f60 g     F .text	00000060 _do_ctors
0000e3e8 g     F .text	000000c0 wcrtomb
0000f1b0 g     F .text	000000d0 close
0000f6d4 g     F .text	00000084 alt_load
0000e15c g     F .text	00000080 fputwc
00009224 g     F .text	00000004 __sinit_lock_acquire
0000ad54 g     F .text	00000120 __multadd
0000ad2c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory+0xf7800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a09a04 	addi	r2,r2,-32152
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a09a04 	addi	r2,r2,-32152
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory+0xf780012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory+0xf7800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6ed17 	ldw	r2,-25676(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6ed17 	ldw	r2,-25676(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_onchip_memory+0xf7800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6afc214 	ori	gp,gp,48904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10969714 	ori	r2,r2,23132

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18e0da14 	ori	r3,r3,33640

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_onchip_memory+0xf7800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000f6d40 	call	f6d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000f8680 	call	f868 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_onchip_memory+0xf780028c>

00000290 <print_array>:

//==============================================================
//************** function definitions **************************
//==============================================================
void print_array(float data[], int n)
{
     290:	defffb04 	addi	sp,sp,-20
     294:	dfc00415 	stw	ra,16(sp)
     298:	df000315 	stw	fp,12(sp)
     29c:	df000304 	addi	fp,sp,12
     2a0:	e13ffe15 	stw	r4,-8(fp)
     2a4:	e17fff15 	stw	r5,-4(fp)
    int i;

    printf("[");
     2a8:	010016c4 	movi	r4,91
     2ac:	0004cb80 	call	4cb8 <putchar>
    for (i = 0; i < n; i++)
     2b0:	e03ffd15 	stw	zero,-12(fp)
     2b4:	00001906 	br	31c <print_array+0x8c>
    {

        printf("%f",data[i]);
     2b8:	e0bffd17 	ldw	r2,-12(fp)
     2bc:	1085883a 	add	r2,r2,r2
     2c0:	1085883a 	add	r2,r2,r2
     2c4:	1007883a 	mov	r3,r2
     2c8:	e0bffe17 	ldw	r2,-8(fp)
     2cc:	10c5883a 	add	r2,r2,r3
     2d0:	10c00017 	ldw	r3,0(r2)
     2d4:	1809883a 	mov	r4,r3
     2d8:	00047640 	call	4764 <__extendsfdf2>
     2dc:	100d883a 	mov	r6,r2
     2e0:	180f883a 	mov	r7,r3
     2e4:	300b883a 	mov	r5,r6
     2e8:	380d883a 	mov	r6,r7
     2ec:	01000074 	movhi	r4,1
     2f0:	2107e904 	addi	r4,r4,8100
     2f4:	0004c740 	call	4c74 <printf>
        if (i != n-1)
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	10ffffc4 	addi	r3,r2,-1
     300:	e0bffd17 	ldw	r2,-12(fp)
     304:	18800226 	beq	r3,r2,310 <print_array+0x80>
        {
            printf(",");
     308:	01000b04 	movi	r4,44
     30c:	0004cb80 	call	4cb8 <putchar>
void print_array(float data[], int n)
{
    int i;

    printf("[");
    for (i = 0; i < n; i++)
     310:	e0bffd17 	ldw	r2,-12(fp)
     314:	10800044 	addi	r2,r2,1
     318:	e0bffd15 	stw	r2,-12(fp)
     31c:	e0fffd17 	ldw	r3,-12(fp)
     320:	e0bfff17 	ldw	r2,-4(fp)
     324:	18bfe416 	blt	r3,r2,2b8 <__alt_mem_onchip_memory+0xf78002b8>
        if (i != n-1)
        {
            printf(",");
        }
    }
    printf("]\n");
     328:	01000074 	movhi	r4,1
     32c:	2107ea04 	addi	r4,r4,8104
     330:	0004d900 	call	4d90 <puts>
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <calcNet>:

//***********************************
// calculates the network output
void calcNet(void)
{
     34c:	defffc04 	addi	sp,sp,-16
     350:	dfc00315 	stw	ra,12(sp)
     354:	df000215 	stw	fp,8(sp)
     358:	df000204 	addi	fp,sp,8
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh
    int i = 0;
     35c:	e03ffe15 	stw	zero,-8(fp)
    int j =0;
     360:	e03fff15 	stw	zero,-4(fp)


    for(i = 0;i<numHidden1;i++)
     364:	e03ffe15 	stw	zero,-8(fp)
     368:	00005b06 	br	4d8 <calcNet+0x18c>
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];
     36c:	00800074 	movhi	r2,1
     370:	109b8904 	addi	r2,r2,28196
     374:	e0fffe17 	ldw	r3,-8(fp)
     378:	18c01904 	addi	r3,r3,100
     37c:	18c7883a 	add	r3,r3,r3
     380:	18c7883a 	add	r3,r3,r3
     384:	10c5883a 	add	r2,r2,r3
     388:	11000017 	ldw	r4,0(r2)
     38c:	00800074 	movhi	r2,1
     390:	1096f704 	addi	r2,r2,23516
     394:	e0fffe17 	ldw	r3,-8(fp)
     398:	18c7883a 	add	r3,r3,r3
     39c:	18c7883a 	add	r3,r3,r3
     3a0:	10c5883a 	add	r2,r2,r3
     3a4:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numInputs;j++)
     3a8:	e03fff15 	stw	zero,-4(fp)
     3ac:	00002906 	br	454 <calcNet+0x108>
        {

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);
     3b0:	00800074 	movhi	r2,1
     3b4:	1096f704 	addi	r2,r2,23516
     3b8:	e0fffe17 	ldw	r3,-8(fp)
     3bc:	18c7883a 	add	r3,r3,r3
     3c0:	18c7883a 	add	r3,r3,r3
     3c4:	10c5883a 	add	r2,r2,r3
     3c8:	11400017 	ldw	r5,0(r2)
     3cc:	d126d517 	ldw	r4,-25772(gp)
     3d0:	00c00074 	movhi	r3,1
     3d4:	18dc3404 	addi	r3,r3,28880
     3d8:	2005883a 	mov	r2,r4
     3dc:	1085883a 	add	r2,r2,r2
     3e0:	1105883a 	add	r2,r2,r4
     3e4:	e13fff17 	ldw	r4,-4(fp)
     3e8:	1105883a 	add	r2,r2,r4
     3ec:	1085883a 	add	r2,r2,r2
     3f0:	1085883a 	add	r2,r2,r2
     3f4:	1885883a 	add	r2,r3,r2
     3f8:	11000017 	ldw	r4,0(r2)
     3fc:	00800074 	movhi	r2,1
     400:	109b8904 	addi	r2,r2,28196
     404:	e0ffff17 	ldw	r3,-4(fp)
     408:	19800ca4 	muli	r6,r3,50
     40c:	e0fffe17 	ldw	r3,-8(fp)
     410:	30c7883a 	add	r3,r6,r3
     414:	18c7883a 	add	r3,r3,r3
     418:	18c7883a 	add	r3,r3,r3
     41c:	10c7883a 	add	r3,r2,r3
     420:	18800017 	ldw	r2,0(r3)
     424:	2085ff32 	custom	252,r2,r4,r2
     428:	2889ff72 	custom	253,r4,r5,r2
     42c:	00800074 	movhi	r2,1
     430:	1096f704 	addi	r2,r2,23516
     434:	e0fffe17 	ldw	r3,-8(fp)
     438:	18c7883a 	add	r3,r3,r3
     43c:	18c7883a 	add	r3,r3,r3
     440:	10c5883a 	add	r2,r2,r3
     444:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden1;i++)
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];

        for(j = 0;j<numInputs;j++)
     448:	e0bfff17 	ldw	r2,-4(fp)
     44c:	10800044 	addi	r2,r2,1
     450:	e0bfff15 	stw	r2,-4(fp)
     454:	e0bfff17 	ldw	r2,-4(fp)
     458:	10800090 	cmplti	r2,r2,2
     45c:	103fd41e 	bne	r2,zero,3b0 <__alt_mem_onchip_memory+0xf78003b0>

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);

        }

			hiddenVal1[i] = tanh(ponderacion1[i]);
     460:	00800074 	movhi	r2,1
     464:	1096f704 	addi	r2,r2,23516
     468:	e0fffe17 	ldw	r3,-8(fp)
     46c:	18c7883a 	add	r3,r3,r3
     470:	18c7883a 	add	r3,r3,r3
     474:	10c5883a 	add	r2,r2,r3
     478:	10c00017 	ldw	r3,0(r2)
     47c:	1809883a 	mov	r4,r3
     480:	00047640 	call	4764 <__extendsfdf2>
     484:	100b883a 	mov	r5,r2
     488:	180d883a 	mov	r6,r3
     48c:	2809883a 	mov	r4,r5
     490:	300b883a 	mov	r5,r6
     494:	00015200 	call	1520 <tanh>
     498:	100b883a 	mov	r5,r2
     49c:	180d883a 	mov	r6,r3
     4a0:	2809883a 	mov	r4,r5
     4a4:	300b883a 	mov	r5,r6
     4a8:	00048740 	call	4874 <__truncdfsf2>
     4ac:	1009883a 	mov	r4,r2
     4b0:	00800074 	movhi	r2,1
     4b4:	109b5704 	addi	r2,r2,27996
     4b8:	e0fffe17 	ldw	r3,-8(fp)
     4bc:	18c7883a 	add	r3,r3,r3
     4c0:	18c7883a 	add	r3,r3,r3
     4c4:	10c5883a 	add	r2,r2,r3
     4c8:	11000015 	stw	r4,0(r2)
    //the hidden neurons are tanh
    int i = 0;
    int j =0;


    for(i = 0;i<numHidden1;i++)
     4cc:	e0bffe17 	ldw	r2,-8(fp)
     4d0:	10800044 	addi	r2,r2,1
     4d4:	e0bffe15 	stw	r2,-8(fp)
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10800c90 	cmplti	r2,r2,50
     4e0:	103fa21e 	bne	r2,zero,36c <__alt_mem_onchip_memory+0xf780036c>
			hiddenVal1[i] = tanh(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     4e4:	e03ffe15 	stw	zero,-8(fp)
     4e8:	00005606 	br	644 <calcNet+0x2f8>
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];
     4ec:	00800074 	movhi	r2,1
     4f0:	109c5804 	addi	r2,r2,29024
     4f4:	e0fffe17 	ldw	r3,-8(fp)
     4f8:	18c0fa04 	addi	r3,r3,1000
     4fc:	18c7883a 	add	r3,r3,r3
     500:	18c7883a 	add	r3,r3,r3
     504:	10c5883a 	add	r2,r2,r3
     508:	11000017 	ldw	r4,0(r2)
     50c:	00800074 	movhi	r2,1
     510:	109c4404 	addi	r2,r2,28944
     514:	e0fffe17 	ldw	r3,-8(fp)
     518:	18c7883a 	add	r3,r3,r3
     51c:	18c7883a 	add	r3,r3,r3
     520:	10c5883a 	add	r2,r2,r3
     524:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numHidden1;j++)
     528:	e03fff15 	stw	zero,-4(fp)
     52c:	00002406 	br	5c0 <calcNet+0x274>
        {

        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);
     530:	00800074 	movhi	r2,1
     534:	109c4404 	addi	r2,r2,28944
     538:	e0fffe17 	ldw	r3,-8(fp)
     53c:	18c7883a 	add	r3,r3,r3
     540:	18c7883a 	add	r3,r3,r3
     544:	10c5883a 	add	r2,r2,r3
     548:	11000017 	ldw	r4,0(r2)
     54c:	00800074 	movhi	r2,1
     550:	109b5704 	addi	r2,r2,27996
     554:	e0ffff17 	ldw	r3,-4(fp)
     558:	18c7883a 	add	r3,r3,r3
     55c:	18c7883a 	add	r3,r3,r3
     560:	10c5883a 	add	r2,r2,r3
     564:	11400017 	ldw	r5,0(r2)
     568:	00800074 	movhi	r2,1
     56c:	109c5804 	addi	r2,r2,29024
     570:	e0ffff17 	ldw	r3,-4(fp)
     574:	19800524 	muli	r6,r3,20
     578:	e0fffe17 	ldw	r3,-8(fp)
     57c:	30c7883a 	add	r3,r6,r3
     580:	18c7883a 	add	r3,r3,r3
     584:	18c7883a 	add	r3,r3,r3
     588:	10c7883a 	add	r3,r2,r3
     58c:	18800017 	ldw	r2,0(r3)
     590:	2885ff32 	custom	252,r2,r5,r2
     594:	2089ff72 	custom	253,r4,r4,r2
     598:	00800074 	movhi	r2,1
     59c:	109c4404 	addi	r2,r2,28944
     5a0:	e0fffe17 	ldw	r3,-8(fp)
     5a4:	18c7883a 	add	r3,r3,r3
     5a8:	18c7883a 	add	r3,r3,r3
     5ac:	10c5883a 	add	r2,r2,r3
     5b0:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden2;i++)
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];

        for(j = 0;j<numHidden1;j++)
     5b4:	e0bfff17 	ldw	r2,-4(fp)
     5b8:	10800044 	addi	r2,r2,1
     5bc:	e0bfff15 	stw	r2,-4(fp)
     5c0:	e0bfff17 	ldw	r2,-4(fp)
     5c4:	10800c90 	cmplti	r2,r2,50
     5c8:	103fd91e 	bne	r2,zero,530 <__alt_mem_onchip_memory+0xf7800530>
        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);

        }


			hiddenVal2[i] = tanh(ponderacion2[i]);
     5cc:	00800074 	movhi	r2,1
     5d0:	109c4404 	addi	r2,r2,28944
     5d4:	e0fffe17 	ldw	r3,-8(fp)
     5d8:	18c7883a 	add	r3,r3,r3
     5dc:	18c7883a 	add	r3,r3,r3
     5e0:	10c5883a 	add	r2,r2,r3
     5e4:	10c00017 	ldw	r3,0(r2)
     5e8:	1809883a 	mov	r4,r3
     5ec:	00047640 	call	4764 <__extendsfdf2>
     5f0:	100b883a 	mov	r5,r2
     5f4:	180d883a 	mov	r6,r3
     5f8:	2809883a 	mov	r4,r5
     5fc:	300b883a 	mov	r5,r6
     600:	00015200 	call	1520 <tanh>
     604:	100b883a 	mov	r5,r2
     608:	180d883a 	mov	r6,r3
     60c:	2809883a 	mov	r4,r5
     610:	300b883a 	mov	r5,r6
     614:	00048740 	call	4874 <__truncdfsf2>
     618:	1009883a 	mov	r4,r2
     61c:	00800074 	movhi	r2,1
     620:	1096ba04 	addi	r2,r2,23272
     624:	e0fffe17 	ldw	r3,-8(fp)
     628:	18c7883a 	add	r3,r3,r3
     62c:	18c7883a 	add	r3,r3,r3
     630:	10c5883a 	add	r2,r2,r3
     634:	11000015 	stw	r4,0(r2)
			hiddenVal1[i] = tanh(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     638:	e0bffe17 	ldw	r2,-8(fp)
     63c:	10800044 	addi	r2,r2,1
     640:	e0bffe15 	stw	r2,-8(fp)
     644:	e0bffe17 	ldw	r2,-8(fp)
     648:	10800510 	cmplti	r2,r2,20
     64c:	103fa71e 	bne	r2,zero,4ec <__alt_mem_onchip_memory+0xf78004ec>

    }
   //calculate the output of the network
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];
     650:	00800074 	movhi	r2,1
     654:	1096e204 	addi	r2,r2,23432
     658:	10c01417 	ldw	r3,80(r2)
     65c:	d0e6da15 	stw	r3,-25752(gp)


   for(i = 0;i<numHidden2;i++)
     660:	e03ffe15 	stw	zero,-8(fp)
     664:	00001506 	br	6bc <calcNet+0x370>
   {

    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];
     668:	00800074 	movhi	r2,1
     66c:	1096ba04 	addi	r2,r2,23272
     670:	e0fffe17 	ldw	r3,-8(fp)
     674:	18c7883a 	add	r3,r3,r3
     678:	18c7883a 	add	r3,r3,r3
     67c:	10c5883a 	add	r2,r2,r3
     680:	11000017 	ldw	r4,0(r2)
     684:	00800074 	movhi	r2,1
     688:	1096e204 	addi	r2,r2,23432
     68c:	e0fffe17 	ldw	r3,-8(fp)
     690:	18c7883a 	add	r3,r3,r3
     694:	18c7883a 	add	r3,r3,r3
     698:	10c7883a 	add	r3,r2,r3
     69c:	18800017 	ldw	r2,0(r3)
     6a0:	2087ff32 	custom	252,r3,r4,r2
     6a4:	d0a6da17 	ldw	r2,-25752(gp)
     6a8:	1885ff72 	custom	253,r2,r3,r2
     6ac:	d0a6da15 	stw	r2,-25752(gp)
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];


   for(i = 0;i<numHidden2;i++)
     6b0:	e0bffe17 	ldw	r2,-8(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bffe15 	stw	r2,-8(fp)
     6bc:	e0bffe17 	ldw	r2,-8(fp)
     6c0:	10800510 	cmplti	r2,r2,20
     6c4:	103fe81e 	bne	r2,zero,668 <__alt_mem_onchip_memory+0xf7800668>
    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];

   }


        outPred  = tanh(ponderacion3);
     6c8:	d0a6da17 	ldw	r2,-25752(gp)
     6cc:	1009883a 	mov	r4,r2
     6d0:	00047640 	call	4764 <__extendsfdf2>
     6d4:	100b883a 	mov	r5,r2
     6d8:	180d883a 	mov	r6,r3
     6dc:	2809883a 	mov	r4,r5
     6e0:	300b883a 	mov	r5,r6
     6e4:	00015200 	call	1520 <tanh>
     6e8:	100b883a 	mov	r5,r2
     6ec:	180d883a 	mov	r6,r3
     6f0:	2809883a 	mov	r4,r5
     6f4:	300b883a 	mov	r5,r6
     6f8:	00048740 	call	4874 <__truncdfsf2>
     6fc:	1007883a 	mov	r3,r2
     700:	d0e6d915 	stw	r3,-25756(gp)

    //calculate the error
    errThisPat = trainOutput[patNum]-outPred;
     704:	d0e6d517 	ldw	r3,-25772(gp)
     708:	00800074 	movhi	r2,1
     70c:	109c4004 	addi	r2,r2,28928
     710:	18c7883a 	add	r3,r3,r3
     714:	18c7883a 	add	r3,r3,r3
     718:	10c5883a 	add	r2,r2,r3
     71c:	10c00017 	ldw	r3,0(r2)
     720:	d0a6d917 	ldw	r2,-25756(gp)
     724:	1885ffb2 	custom	254,r2,r3,r2
     728:	d0a6d615 	stw	r2,-25768(gp)

}
     72c:	0001883a 	nop
     730:	e037883a 	mov	sp,fp
     734:	dfc00117 	ldw	ra,4(sp)
     738:	df000017 	ldw	fp,0(sp)
     73c:	dec00204 	addi	sp,sp,8
     740:	f800283a 	ret

00000744 <WeightChangesH2O>:


//************************************
//adjust the weights hidden-output
void WeightChangesH2O(void)
{
     744:	deffff04 	addi	sp,sp,-4
     748:	df000015 	stw	fp,0(sp)
     74c:	d839883a 	mov	fp,sp


		delta_o = (1 - (outPred * outPred))* errThisPat;
     750:	d0e6d917 	ldw	r3,-25756(gp)
     754:	d0a6d917 	ldw	r2,-25756(gp)
     758:	1885ff32 	custom	252,r2,r3,r2
     75c:	00cfe034 	movhi	r3,16256
     760:	1887ffb2 	custom	254,r3,r3,r2
     764:	d0a6d617 	ldw	r2,-25768(gp)
     768:	1885ff32 	custom	252,r2,r3,r2
     76c:	d0a6d715 	stw	r2,-25764(gp)


 }
     770:	0001883a 	nop
     774:	e037883a 	mov	sp,fp
     778:	df000017 	ldw	fp,0(sp)
     77c:	dec00104 	addi	sp,sp,4
     780:	f800283a 	ret

00000784 <WeightUpdatesH2O>:

//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
     784:	defffd04 	addi	sp,sp,-12
     788:	df000215 	stw	fp,8(sp)
     78c:	df000204 	addi	fp,sp,8
    int k=0;
     790:	e03ffe15 	stw	zero,-8(fp)
   for(k = 0;k<numHidden2+1;k++)
     794:	e03ffe15 	stw	zero,-8(fp)
     798:	00002e06 	br	854 <WeightUpdatesH2O+0xd0>
   {
    float weightChange =delta_o * LR_H2O * hiddenVal2[k];
     79c:	d0e6d717 	ldw	r3,-25764(gp)
     7a0:	008f7374 	movhi	r2,15821
     7a4:	10b33344 	addi	r2,r2,-13107
     7a8:	1889ff32 	custom	252,r4,r3,r2
     7ac:	00800074 	movhi	r2,1
     7b0:	1096ba04 	addi	r2,r2,23272
     7b4:	e0fffe17 	ldw	r3,-8(fp)
     7b8:	18c7883a 	add	r3,r3,r3
     7bc:	18c7883a 	add	r3,r3,r3
     7c0:	10c7883a 	add	r3,r2,r3
     7c4:	18800017 	ldw	r2,0(r3)
     7c8:	2085ff32 	custom	252,r2,r4,r2
     7cc:	e0bfff15 	stw	r2,-4(fp)

    weightsH2O_old[k] = weightsH2O[k] ;
     7d0:	00800074 	movhi	r2,1
     7d4:	1096e204 	addi	r2,r2,23432
     7d8:	e0fffe17 	ldw	r3,-8(fp)
     7dc:	18c7883a 	add	r3,r3,r3
     7e0:	18c7883a 	add	r3,r3,r3
     7e4:	10c5883a 	add	r2,r2,r3
     7e8:	11000017 	ldw	r4,0(r2)
     7ec:	00800074 	movhi	r2,1
     7f0:	109c1f04 	addi	r2,r2,28796
     7f4:	e0fffe17 	ldw	r3,-8(fp)
     7f8:	18c7883a 	add	r3,r3,r3
     7fc:	18c7883a 	add	r3,r3,r3
     800:	10c5883a 	add	r2,r2,r3
     804:	11000015 	stw	r4,0(r2)
    weightsH2O[k] = weightsH2O[k] + weightChange;
     808:	00800074 	movhi	r2,1
     80c:	1096e204 	addi	r2,r2,23432
     810:	e0fffe17 	ldw	r3,-8(fp)
     814:	18c7883a 	add	r3,r3,r3
     818:	18c7883a 	add	r3,r3,r3
     81c:	10c5883a 	add	r2,r2,r3
     820:	10c00017 	ldw	r3,0(r2)
     824:	e0bfff17 	ldw	r2,-4(fp)
     828:	1889ff72 	custom	253,r4,r3,r2
     82c:	00800074 	movhi	r2,1
     830:	1096e204 	addi	r2,r2,23432
     834:	e0fffe17 	ldw	r3,-8(fp)
     838:	18c7883a 	add	r3,r3,r3
     83c:	18c7883a 	add	r3,r3,r3
     840:	10c5883a 	add	r2,r2,r3
     844:	11000015 	stw	r4,0(r2)
//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
    int k=0;
   for(k = 0;k<numHidden2+1;k++)
     848:	e0bffe17 	ldw	r2,-8(fp)
     84c:	10800044 	addi	r2,r2,1
     850:	e0bffe15 	stw	r2,-8(fp)
     854:	e0bffe17 	ldw	r2,-8(fp)
     858:	10800550 	cmplti	r2,r2,21
     85c:	103fcf1e 	bne	r2,zero,79c <__alt_mem_onchip_memory+0xf780079c>
    weightsH2O_old[k] = weightsH2O[k] ;
    weightsH2O[k] = weightsH2O[k] + weightChange;

   }

 }
     860:	0001883a 	nop
     864:	e037883a 	mov	sp,fp
     868:	df000017 	ldw	fp,0(sp)
     86c:	dec00104 	addi	sp,sp,4
     870:	f800283a 	ret

00000874 <WeightChangesH1H2>:

//************************************
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{
     874:	defffe04 	addi	sp,sp,-8
     878:	df000115 	stw	fp,4(sp)
     87c:	df000104 	addi	fp,sp,4

  int i=0;
     880:	e03fff15 	stw	zero,-4(fp)
  for(i = 0;i<numHidden2;i++)
     884:	e03fff15 	stw	zero,-4(fp)
     888:	00002506 	br	920 <WeightChangesH1H2+0xac>
  {

		delta_h2[i] = (1 - (hiddenVal2[i] * hiddenVal2[i]))* delta_o* weightsH2O_old[i];
     88c:	00800074 	movhi	r2,1
     890:	1096ba04 	addi	r2,r2,23272
     894:	e0ffff17 	ldw	r3,-4(fp)
     898:	18c7883a 	add	r3,r3,r3
     89c:	18c7883a 	add	r3,r3,r3
     8a0:	10c5883a 	add	r2,r2,r3
     8a4:	11000017 	ldw	r4,0(r2)
     8a8:	00800074 	movhi	r2,1
     8ac:	1096ba04 	addi	r2,r2,23272
     8b0:	e0ffff17 	ldw	r3,-4(fp)
     8b4:	18c7883a 	add	r3,r3,r3
     8b8:	18c7883a 	add	r3,r3,r3
     8bc:	10c7883a 	add	r3,r2,r3
     8c0:	18800017 	ldw	r2,0(r3)
     8c4:	2085ff32 	custom	252,r2,r4,r2
     8c8:	00cfe034 	movhi	r3,16256
     8cc:	1887ffb2 	custom	254,r3,r3,r2
     8d0:	d0a6d717 	ldw	r2,-25764(gp)
     8d4:	1889ff32 	custom	252,r4,r3,r2
     8d8:	00800074 	movhi	r2,1
     8dc:	109c1f04 	addi	r2,r2,28796
     8e0:	e0ffff17 	ldw	r3,-4(fp)
     8e4:	18c7883a 	add	r3,r3,r3
     8e8:	18c7883a 	add	r3,r3,r3
     8ec:	10c7883a 	add	r3,r2,r3
     8f0:	18800017 	ldw	r2,0(r3)
     8f4:	2089ff32 	custom	252,r4,r4,r2
     8f8:	00800074 	movhi	r2,1
     8fc:	1096ce04 	addi	r2,r2,23352
     900:	e0ffff17 	ldw	r3,-4(fp)
     904:	18c7883a 	add	r3,r3,r3
     908:	18c7883a 	add	r3,r3,r3
     90c:	10c5883a 	add	r2,r2,r3
     910:	11000015 	stw	r4,0(r2)
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     914:	e0bfff17 	ldw	r2,-4(fp)
     918:	10800044 	addi	r2,r2,1
     91c:	e0bfff15 	stw	r2,-4(fp)
     920:	e0bfff17 	ldw	r2,-4(fp)
     924:	10800510 	cmplti	r2,r2,20
     928:	103fd81e 	bne	r2,zero,88c <__alt_mem_onchip_memory+0xf780088c>



  }

}
     92c:	0001883a 	nop
     930:	e037883a 	mov	sp,fp
     934:	df000017 	ldw	fp,0(sp)
     938:	dec00104 	addi	sp,sp,4
     93c:	f800283a 	ret

00000940 <WeightUpdatesH1H2>:

//************************************
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{
     940:	defffc04 	addi	sp,sp,-16
     944:	df000315 	stw	fp,12(sp)
     948:	df000304 	addi	fp,sp,12

  int i=0;
     94c:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden2;i++)
     950:	e03ffd15 	stw	zero,-12(fp)
     954:	00004906 	br	a7c <WeightUpdatesH1H2+0x13c>
  {
   int k=0;
     958:	e03ffe15 	stw	zero,-8(fp)
   for( k = 0;k<numHidden1+1;k++)
     95c:	e03ffe15 	stw	zero,-8(fp)
     960:	00004006 	br	a64 <WeightUpdatesH1H2+0x124>
   {
    float weightChange = delta_h2[i] * LR_H1H2 * hiddenVal1[k];
     964:	00800074 	movhi	r2,1
     968:	1096ce04 	addi	r2,r2,23352
     96c:	e0fffd17 	ldw	r3,-12(fp)
     970:	18c7883a 	add	r3,r3,r3
     974:	18c7883a 	add	r3,r3,r3
     978:	10c5883a 	add	r2,r2,r3
     97c:	10c00017 	ldw	r3,0(r2)
     980:	008f7374 	movhi	r2,15821
     984:	10b33344 	addi	r2,r2,-13107
     988:	1889ff32 	custom	252,r4,r3,r2
     98c:	00800074 	movhi	r2,1
     990:	109b5704 	addi	r2,r2,27996
     994:	e0fffe17 	ldw	r3,-8(fp)
     998:	18c7883a 	add	r3,r3,r3
     99c:	18c7883a 	add	r3,r3,r3
     9a0:	10c7883a 	add	r3,r2,r3
     9a4:	18800017 	ldw	r2,0(r3)
     9a8:	2085ff32 	custom	252,r2,r4,r2
     9ac:	e0bfff15 	stw	r2,-4(fp)

   weightsH1H2_old[k][i] = weightsH1H2[k][i];
     9b0:	00800074 	movhi	r2,1
     9b4:	109c5804 	addi	r2,r2,29024
     9b8:	e0fffe17 	ldw	r3,-8(fp)
     9bc:	19000524 	muli	r4,r3,20
     9c0:	e0fffd17 	ldw	r3,-12(fp)
     9c4:	20c7883a 	add	r3,r4,r3
     9c8:	18c7883a 	add	r3,r3,r3
     9cc:	18c7883a 	add	r3,r3,r3
     9d0:	10c5883a 	add	r2,r2,r3
     9d4:	11000017 	ldw	r4,0(r2)
     9d8:	00800074 	movhi	r2,1
     9dc:	10975b04 	addi	r2,r2,23916
     9e0:	e0fffe17 	ldw	r3,-8(fp)
     9e4:	19400524 	muli	r5,r3,20
     9e8:	e0fffd17 	ldw	r3,-12(fp)
     9ec:	28c7883a 	add	r3,r5,r3
     9f0:	18c7883a 	add	r3,r3,r3
     9f4:	18c7883a 	add	r3,r3,r3
     9f8:	10c5883a 	add	r2,r2,r3
     9fc:	11000015 	stw	r4,0(r2)
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;
     a00:	00800074 	movhi	r2,1
     a04:	109c5804 	addi	r2,r2,29024
     a08:	e0fffe17 	ldw	r3,-8(fp)
     a0c:	19000524 	muli	r4,r3,20
     a10:	e0fffd17 	ldw	r3,-12(fp)
     a14:	20c7883a 	add	r3,r4,r3
     a18:	18c7883a 	add	r3,r3,r3
     a1c:	18c7883a 	add	r3,r3,r3
     a20:	10c5883a 	add	r2,r2,r3
     a24:	10c00017 	ldw	r3,0(r2)
     a28:	e0bfff17 	ldw	r2,-4(fp)
     a2c:	1889ff72 	custom	253,r4,r3,r2
     a30:	00800074 	movhi	r2,1
     a34:	109c5804 	addi	r2,r2,29024
     a38:	e0fffe17 	ldw	r3,-8(fp)
     a3c:	19400524 	muli	r5,r3,20
     a40:	e0fffd17 	ldw	r3,-12(fp)
     a44:	28c7883a 	add	r3,r5,r3
     a48:	18c7883a 	add	r3,r3,r3
     a4c:	18c7883a 	add	r3,r3,r3
     a50:	10c5883a 	add	r2,r2,r3
     a54:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden2;i++)
  {
   int k=0;
   for( k = 0;k<numHidden1+1;k++)
     a58:	e0bffe17 	ldw	r2,-8(fp)
     a5c:	10800044 	addi	r2,r2,1
     a60:	e0bffe15 	stw	r2,-8(fp)
     a64:	e0bffe17 	ldw	r2,-8(fp)
     a68:	10800cd0 	cmplti	r2,r2,51
     a6c:	103fbd1e 	bne	r2,zero,964 <__alt_mem_onchip_memory+0xf7800964>
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     a70:	e0bffd17 	ldw	r2,-12(fp)
     a74:	10800044 	addi	r2,r2,1
     a78:	e0bffd15 	stw	r2,-12(fp)
     a7c:	e0bffd17 	ldw	r2,-12(fp)
     a80:	10800510 	cmplti	r2,r2,20
     a84:	103fb41e 	bne	r2,zero,958 <__alt_mem_onchip_memory+0xf7800958>
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;

   }
  }

}
     a88:	0001883a 	nop
     a8c:	e037883a 	mov	sp,fp
     a90:	df000017 	ldw	fp,0(sp)
     a94:	dec00104 	addi	sp,sp,4
     a98:	f800283a 	ret

00000a9c <WeightChangesIH1>:
//************************************
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{
     a9c:	defffc04 	addi	sp,sp,-16
     aa0:	df000315 	stw	fp,12(sp)
     aa4:	df000304 	addi	fp,sp,12

  int i=0;
     aa8:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     aac:	e03ffd15 	stw	zero,-12(fp)
     ab0:	00003c06 	br	ba4 <WeightChangesIH1+0x108>
  {

    int j=0;
     ab4:	e03ffe15 	stw	zero,-8(fp)
    float sum_delta=0.0;
     ab8:	e03fff15 	stw	zero,-4(fp)
    for ( j = 0;j<numHidden2;j++)
     abc:	e03ffe15 	stw	zero,-8(fp)
     ac0:	00001806 	br	b24 <WeightChangesIH1+0x88>
    {

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];
     ac4:	00800074 	movhi	r2,1
     ac8:	1096ce04 	addi	r2,r2,23352
     acc:	e0fffe17 	ldw	r3,-8(fp)
     ad0:	18c7883a 	add	r3,r3,r3
     ad4:	18c7883a 	add	r3,r3,r3
     ad8:	10c5883a 	add	r2,r2,r3
     adc:	11000017 	ldw	r4,0(r2)
     ae0:	00800074 	movhi	r2,1
     ae4:	10975b04 	addi	r2,r2,23916
     ae8:	e0fffd17 	ldw	r3,-12(fp)
     aec:	19400524 	muli	r5,r3,20
     af0:	e0fffe17 	ldw	r3,-8(fp)
     af4:	28c7883a 	add	r3,r5,r3
     af8:	18c7883a 	add	r3,r3,r3
     afc:	18c7883a 	add	r3,r3,r3
     b00:	10c7883a 	add	r3,r2,r3
     b04:	18800017 	ldw	r2,0(r3)
     b08:	2085ff32 	custom	252,r2,r4,r2
     b0c:	e0ffff17 	ldw	r3,-4(fp)
     b10:	1885ff72 	custom	253,r2,r3,r2
     b14:	e0bfff15 	stw	r2,-4(fp)
  for(i = 0;i<numHidden1;i++)
  {

    int j=0;
    float sum_delta=0.0;
    for ( j = 0;j<numHidden2;j++)
     b18:	e0bffe17 	ldw	r2,-8(fp)
     b1c:	10800044 	addi	r2,r2,1
     b20:	e0bffe15 	stw	r2,-8(fp)
     b24:	e0bffe17 	ldw	r2,-8(fp)
     b28:	10800510 	cmplti	r2,r2,20
     b2c:	103fe51e 	bne	r2,zero,ac4 <__alt_mem_onchip_memory+0xf7800ac4>

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];

    }

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;
     b30:	00800074 	movhi	r2,1
     b34:	109b5704 	addi	r2,r2,27996
     b38:	e0fffd17 	ldw	r3,-12(fp)
     b3c:	18c7883a 	add	r3,r3,r3
     b40:	18c7883a 	add	r3,r3,r3
     b44:	10c5883a 	add	r2,r2,r3
     b48:	11000017 	ldw	r4,0(r2)
     b4c:	00800074 	movhi	r2,1
     b50:	109b5704 	addi	r2,r2,27996
     b54:	e0fffd17 	ldw	r3,-12(fp)
     b58:	18c7883a 	add	r3,r3,r3
     b5c:	18c7883a 	add	r3,r3,r3
     b60:	10c7883a 	add	r3,r2,r3
     b64:	18800017 	ldw	r2,0(r3)
     b68:	2085ff32 	custom	252,r2,r4,r2
     b6c:	00cfe034 	movhi	r3,16256
     b70:	1887ffb2 	custom	254,r3,r3,r2
     b74:	e0bfff17 	ldw	r2,-4(fp)
     b78:	1889ff32 	custom	252,r4,r3,r2
     b7c:	008000b4 	movhi	r2,2
     b80:	10a06804 	addi	r2,r2,-32352
     b84:	e0fffd17 	ldw	r3,-12(fp)
     b88:	18c7883a 	add	r3,r3,r3
     b8c:	18c7883a 	add	r3,r3,r3
     b90:	10c5883a 	add	r2,r2,r3
     b94:	11000015 	stw	r4,0(r2)
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     b98:	e0bffd17 	ldw	r2,-12(fp)
     b9c:	10800044 	addi	r2,r2,1
     ba0:	e0bffd15 	stw	r2,-12(fp)
     ba4:	e0bffd17 	ldw	r2,-12(fp)
     ba8:	10800c90 	cmplti	r2,r2,50
     bac:	103fc11e 	bne	r2,zero,ab4 <__alt_mem_onchip_memory+0xf7800ab4>

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;

  }

}
     bb0:	0001883a 	nop
     bb4:	e037883a 	mov	sp,fp
     bb8:	df000017 	ldw	fp,0(sp)
     bbc:	dec00104 	addi	sp,sp,4
     bc0:	f800283a 	ret

00000bc4 <WeightUpdatesIH1>:

//************************************
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{
     bc4:	defffc04 	addi	sp,sp,-16
     bc8:	df000315 	stw	fp,12(sp)
     bcc:	df000304 	addi	fp,sp,12

  int i=0;
     bd0:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     bd4:	e03ffd15 	stw	zero,-12(fp)
     bd8:	00003a06 	br	cc4 <WeightUpdatesIH1+0x100>
  {
    int k=0;
     bdc:	e03ffe15 	stw	zero,-8(fp)
	for( k = 0;k<numInputs+1;k++)
     be0:	e03ffe15 	stw	zero,-8(fp)
     be4:	00003106 	br	cac <WeightUpdatesIH1+0xe8>
	{
    float weightChange = delta_h1[i] * LR_IH1 * trainInputs[patNum][k];
     be8:	008000b4 	movhi	r2,2
     bec:	10a06804 	addi	r2,r2,-32352
     bf0:	e0fffd17 	ldw	r3,-12(fp)
     bf4:	18c7883a 	add	r3,r3,r3
     bf8:	18c7883a 	add	r3,r3,r3
     bfc:	10c5883a 	add	r2,r2,r3
     c00:	10c00017 	ldw	r3,0(r2)
     c04:	008f7374 	movhi	r2,15821
     c08:	10b33344 	addi	r2,r2,-13107
     c0c:	188bff32 	custom	252,r5,r3,r2
     c10:	d126d517 	ldw	r4,-25772(gp)
     c14:	00c00074 	movhi	r3,1
     c18:	18dc3404 	addi	r3,r3,28880
     c1c:	2005883a 	mov	r2,r4
     c20:	1085883a 	add	r2,r2,r2
     c24:	1105883a 	add	r2,r2,r4
     c28:	e13ffe17 	ldw	r4,-8(fp)
     c2c:	1105883a 	add	r2,r2,r4
     c30:	1085883a 	add	r2,r2,r2
     c34:	1085883a 	add	r2,r2,r2
     c38:	1887883a 	add	r3,r3,r2
     c3c:	18800017 	ldw	r2,0(r3)
     c40:	2885ff32 	custom	252,r2,r5,r2
     c44:	e0bfff15 	stw	r2,-4(fp)

     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;
     c48:	00800074 	movhi	r2,1
     c4c:	109b8904 	addi	r2,r2,28196
     c50:	e0fffe17 	ldw	r3,-8(fp)
     c54:	19000ca4 	muli	r4,r3,50
     c58:	e0fffd17 	ldw	r3,-12(fp)
     c5c:	20c7883a 	add	r3,r4,r3
     c60:	18c7883a 	add	r3,r3,r3
     c64:	18c7883a 	add	r3,r3,r3
     c68:	10c5883a 	add	r2,r2,r3
     c6c:	10c00017 	ldw	r3,0(r2)
     c70:	e0bfff17 	ldw	r2,-4(fp)
     c74:	1889ff72 	custom	253,r4,r3,r2
     c78:	00800074 	movhi	r2,1
     c7c:	109b8904 	addi	r2,r2,28196
     c80:	e0fffe17 	ldw	r3,-8(fp)
     c84:	19400ca4 	muli	r5,r3,50
     c88:	e0fffd17 	ldw	r3,-12(fp)
     c8c:	28c7883a 	add	r3,r5,r3
     c90:	18c7883a 	add	r3,r3,r3
     c94:	18c7883a 	add	r3,r3,r3
     c98:	10c5883a 	add	r2,r2,r3
     c9c:	11000015 	stw	r4,0(r2)

  int i=0;
  for(i = 0;i<numHidden1;i++)
  {
    int k=0;
	for( k = 0;k<numInputs+1;k++)
     ca0:	e0bffe17 	ldw	r2,-8(fp)
     ca4:	10800044 	addi	r2,r2,1
     ca8:	e0bffe15 	stw	r2,-8(fp)
     cac:	e0bffe17 	ldw	r2,-8(fp)
     cb0:	108000d0 	cmplti	r2,r2,3
     cb4:	103fcc1e 	bne	r2,zero,be8 <__alt_mem_onchip_memory+0xf7800be8>
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     cb8:	e0bffd17 	ldw	r2,-12(fp)
     cbc:	10800044 	addi	r2,r2,1
     cc0:	e0bffd15 	stw	r2,-12(fp)
     cc4:	e0bffd17 	ldw	r2,-12(fp)
     cc8:	10800c90 	cmplti	r2,r2,50
     ccc:	103fc31e 	bne	r2,zero,bdc <__alt_mem_onchip_memory+0xf7800bdc>
     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;

   }
  }

}
     cd0:	0001883a 	nop
     cd4:	e037883a 	mov	sp,fp
     cd8:	df000017 	ldw	fp,0(sp)
     cdc:	dec00104 	addi	sp,sp,4
     ce0:	f800283a 	ret

00000ce4 <getRand>:

//************************************
// generates a random number
float getRand(void)
{
     ce4:	defffe04 	addi	sp,sp,-8
     ce8:	dfc00115 	stw	ra,4(sp)
     cec:	df000015 	stw	fp,0(sp)
     cf0:	d839883a 	mov	fp,sp
 return ((float)rand())/(float)RAND_MAX;
     cf4:	0004dbc0 	call	4dbc <rand>
     cf8:	1007feb2 	custom	250,r3,r2,zero
     cfc:	0093c034 	movhi	r2,20224
     d00:	1885fff2 	custom	255,r2,r3,r2
     d04:	1007883a 	mov	r3,r2
}
     d08:	1805883a 	mov	r2,r3
     d0c:	e037883a 	mov	sp,fp
     d10:	dfc00117 	ldw	ra,4(sp)
     d14:	df000017 	ldw	fp,0(sp)
     d18:	dec00204 	addi	sp,sp,8
     d1c:	f800283a 	ret

00000d20 <initWeights>:


//************************************
// set weights to random numbers
void initWeights(void)
{
     d20:	defffb04 	addi	sp,sp,-20
     d24:	dfc00415 	stw	ra,16(sp)
     d28:	df000315 	stw	fp,12(sp)
     d2c:	df000304 	addi	fp,sp,12
 int j=0;
     d30:	e03ffd15 	stw	zero,-12(fp)
 int i=0;
     d34:	e03ffe15 	stw	zero,-8(fp)
 int k=0;
     d38:	e03fff15 	stw	zero,-4(fp)

 for( j = 0;j<numHidden2+1;j++)
     d3c:	e03ffd15 	stw	zero,-12(fp)
     d40:	00002606 	br	ddc <initWeights+0xbc>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
     d44:	0000ce40 	call	ce4 <getRand>
     d48:	1007883a 	mov	r3,r2
     d4c:	1809883a 	mov	r4,r3
     d50:	00047640 	call	4764 <__extendsfdf2>
     d54:	1011883a 	mov	r8,r2
     d58:	1813883a 	mov	r9,r3
     d5c:	000d883a 	mov	r6,zero
     d60:	01cff834 	movhi	r7,16352
     d64:	4009883a 	mov	r4,r8
     d68:	480b883a 	mov	r5,r9
     d6c:	0003d0c0 	call	3d0c <__subdf3>
     d70:	1009883a 	mov	r4,r2
     d74:	180b883a 	mov	r5,r3
     d78:	2005883a 	mov	r2,r4
     d7c:	2807883a 	mov	r3,r5
     d80:	000d883a 	mov	r6,zero
     d84:	01d00034 	movhi	r7,16384
     d88:	1009883a 	mov	r4,r2
     d8c:	180b883a 	mov	r5,r3
     d90:	0002b3c0 	call	2b3c <__divdf3>
     d94:	1009883a 	mov	r4,r2
     d98:	180b883a 	mov	r5,r3
     d9c:	2005883a 	mov	r2,r4
     da0:	2807883a 	mov	r3,r5
     da4:	1009883a 	mov	r4,r2
     da8:	180b883a 	mov	r5,r3
     dac:	00048740 	call	4874 <__truncdfsf2>
     db0:	1009883a 	mov	r4,r2
     db4:	00800074 	movhi	r2,1
     db8:	1096e204 	addi	r2,r2,23432
     dbc:	e0fffd17 	ldw	r3,-12(fp)
     dc0:	18c7883a 	add	r3,r3,r3
     dc4:	18c7883a 	add	r3,r3,r3
     dc8:	10c5883a 	add	r2,r2,r3
     dcc:	11000015 	stw	r4,0(r2)
{
 int j=0;
 int i=0;
 int k=0;

 for( j = 0;j<numHidden2+1;j++)
     dd0:	e0bffd17 	ldw	r2,-12(fp)
     dd4:	10800044 	addi	r2,r2,1
     dd8:	e0bffd15 	stw	r2,-12(fp)
     ddc:	e0bffd17 	ldw	r2,-12(fp)
     de0:	10800550 	cmplti	r2,r2,21
     de4:	103fd71e 	bne	r2,zero,d44 <__alt_mem_onchip_memory+0xf7800d44>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
     de8:	e03fff15 	stw	zero,-4(fp)
     dec:	00003106 	br	eb4 <initWeights+0x194>
   {
    for( i = 0;i<numHidden1+1;i++)
     df0:	e03ffe15 	stw	zero,-8(fp)
     df4:	00002906 	br	e9c <initWeights+0x17c>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     df8:	0000ce40 	call	ce4 <getRand>
     dfc:	1007883a 	mov	r3,r2
     e00:	1809883a 	mov	r4,r3
     e04:	00047640 	call	4764 <__extendsfdf2>
     e08:	1011883a 	mov	r8,r2
     e0c:	1813883a 	mov	r9,r3
     e10:	000d883a 	mov	r6,zero
     e14:	01cff834 	movhi	r7,16352
     e18:	4009883a 	mov	r4,r8
     e1c:	480b883a 	mov	r5,r9
     e20:	0003d0c0 	call	3d0c <__subdf3>
     e24:	1009883a 	mov	r4,r2
     e28:	180b883a 	mov	r5,r3
     e2c:	2005883a 	mov	r2,r4
     e30:	2807883a 	mov	r3,r5
     e34:	000d883a 	mov	r6,zero
     e38:	01d00034 	movhi	r7,16384
     e3c:	1009883a 	mov	r4,r2
     e40:	180b883a 	mov	r5,r3
     e44:	0002b3c0 	call	2b3c <__divdf3>
     e48:	1009883a 	mov	r4,r2
     e4c:	180b883a 	mov	r5,r3
     e50:	2005883a 	mov	r2,r4
     e54:	2807883a 	mov	r3,r5
     e58:	1009883a 	mov	r4,r2
     e5c:	180b883a 	mov	r5,r3
     e60:	00048740 	call	4874 <__truncdfsf2>
     e64:	100b883a 	mov	r5,r2
     e68:	00800074 	movhi	r2,1
     e6c:	109c5804 	addi	r2,r2,29024
     e70:	e0fffe17 	ldw	r3,-8(fp)
     e74:	19000524 	muli	r4,r3,20
     e78:	e0ffff17 	ldw	r3,-4(fp)
     e7c:	20c7883a 	add	r3,r4,r3
     e80:	18c7883a 	add	r3,r3,r3
     e84:	18c7883a 	add	r3,r3,r3
     e88:	10c5883a 	add	r2,r2,r3
     e8c:	11400015 	stw	r5,0(r2)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
   {
    for( i = 0;i<numHidden1+1;i++)
     e90:	e0bffe17 	ldw	r2,-8(fp)
     e94:	10800044 	addi	r2,r2,1
     e98:	e0bffe15 	stw	r2,-8(fp)
     e9c:	e0bffe17 	ldw	r2,-8(fp)
     ea0:	10800cd0 	cmplti	r2,r2,51
     ea4:	103fd41e 	bne	r2,zero,df8 <__alt_mem_onchip_memory+0xf7800df8>

 for( j = 0;j<numHidden2+1;j++)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
     ea8:	e0bfff17 	ldw	r2,-4(fp)
     eac:	10800044 	addi	r2,r2,1
     eb0:	e0bfff15 	stw	r2,-4(fp)
     eb4:	e0bfff17 	ldw	r2,-4(fp)
     eb8:	10800510 	cmplti	r2,r2,20
     ebc:	103fcc1e 	bne	r2,zero,df0 <__alt_mem_onchip_memory+0xf7800df0>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
     ec0:	e03fff15 	stw	zero,-4(fp)
     ec4:	00003106 	br	f8c <initWeights+0x26c>
   {
    for( i = 0;i<numInputs+1;i++)
     ec8:	e03ffe15 	stw	zero,-8(fp)
     ecc:	00002906 	br	f74 <initWeights+0x254>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     ed0:	0000ce40 	call	ce4 <getRand>
     ed4:	1007883a 	mov	r3,r2
     ed8:	1809883a 	mov	r4,r3
     edc:	00047640 	call	4764 <__extendsfdf2>
     ee0:	1011883a 	mov	r8,r2
     ee4:	1813883a 	mov	r9,r3
     ee8:	000d883a 	mov	r6,zero
     eec:	01cff834 	movhi	r7,16352
     ef0:	4009883a 	mov	r4,r8
     ef4:	480b883a 	mov	r5,r9
     ef8:	0003d0c0 	call	3d0c <__subdf3>
     efc:	1009883a 	mov	r4,r2
     f00:	180b883a 	mov	r5,r3
     f04:	2005883a 	mov	r2,r4
     f08:	2807883a 	mov	r3,r5
     f0c:	000d883a 	mov	r6,zero
     f10:	01d00034 	movhi	r7,16384
     f14:	1009883a 	mov	r4,r2
     f18:	180b883a 	mov	r5,r3
     f1c:	0002b3c0 	call	2b3c <__divdf3>
     f20:	1009883a 	mov	r4,r2
     f24:	180b883a 	mov	r5,r3
     f28:	2005883a 	mov	r2,r4
     f2c:	2807883a 	mov	r3,r5
     f30:	1009883a 	mov	r4,r2
     f34:	180b883a 	mov	r5,r3
     f38:	00048740 	call	4874 <__truncdfsf2>
     f3c:	100b883a 	mov	r5,r2
     f40:	00800074 	movhi	r2,1
     f44:	109b8904 	addi	r2,r2,28196
     f48:	e0fffe17 	ldw	r3,-8(fp)
     f4c:	19000ca4 	muli	r4,r3,50
     f50:	e0ffff17 	ldw	r3,-4(fp)
     f54:	20c7883a 	add	r3,r4,r3
     f58:	18c7883a 	add	r3,r3,r3
     f5c:	18c7883a 	add	r3,r3,r3
     f60:	10c5883a 	add	r2,r2,r3
     f64:	11400015 	stw	r5,0(r2)
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
   {
    for( i = 0;i<numInputs+1;i++)
     f68:	e0bffe17 	ldw	r2,-8(fp)
     f6c:	10800044 	addi	r2,r2,1
     f70:	e0bffe15 	stw	r2,-8(fp)
     f74:	e0bffe17 	ldw	r2,-8(fp)
     f78:	108000d0 	cmplti	r2,r2,3
     f7c:	103fd41e 	bne	r2,zero,ed0 <__alt_mem_onchip_memory+0xf7800ed0>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
     f80:	e0bfff17 	ldw	r2,-4(fp)
     f84:	10800044 	addi	r2,r2,1
     f88:	e0bfff15 	stw	r2,-4(fp)
     f8c:	e0bfff17 	ldw	r2,-4(fp)
     f90:	10800c90 	cmplti	r2,r2,50
     f94:	103fcc1e 	bne	r2,zero,ec8 <__alt_mem_onchip_memory+0xf7800ec8>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsIH1[i][k]);
    }
   }
}
     f98:	0001883a 	nop
     f9c:	e037883a 	mov	sp,fp
     fa0:	dfc00117 	ldw	ra,4(sp)
     fa4:	df000017 	ldw	fp,0(sp)
     fa8:	dec00204 	addi	sp,sp,8
     fac:	f800283a 	ret

00000fb0 <initData>:


//************************************
// read in the data
void initData(void)
{
     fb0:	defffe04 	addi	sp,sp,-8
     fb4:	dfc00115 	stw	ra,4(sp)
     fb8:	df000015 	stw	fp,0(sp)
     fbc:	d839883a 	mov	fp,sp
    printf("initialising data\n");
     fc0:	01000074 	movhi	r4,1
     fc4:	2107eb04 	addi	r4,r4,8108
     fc8:	0004d900 	call	4d90 <puts>
    // [-1][1]
    // an extra input valued 1 is also added
    // to act as the bias
    // the output must lie in the range -1 to 1

    trainInputs[0][0]  = 0.95;
     fcc:	00800074 	movhi	r2,1
     fd0:	109c3404 	addi	r2,r2,28880
     fd4:	00cfdcf4 	movhi	r3,16243
     fd8:	18ccccc4 	addi	r3,r3,13107
     fdc:	10c00015 	stw	r3,0(r2)
    trainInputs[0][1]  = -0.95;
     fe0:	00800074 	movhi	r2,1
     fe4:	109c3404 	addi	r2,r2,28880
     fe8:	00efdcf4 	movhi	r3,49011
     fec:	18ccccc4 	addi	r3,r3,13107
     ff0:	10c00115 	stw	r3,4(r2)
    trainInputs[0][2]  = 1;    //bias
     ff4:	00800074 	movhi	r2,1
     ff8:	109c3404 	addi	r2,r2,28880
     ffc:	00cfe034 	movhi	r3,16256
    1000:	10c00215 	stw	r3,8(r2)
    trainOutput[0] = 0.95;
    1004:	00800074 	movhi	r2,1
    1008:	109c4004 	addi	r2,r2,28928
    100c:	00cfdcf4 	movhi	r3,16243
    1010:	18ccccc4 	addi	r3,r3,13107
    1014:	10c00015 	stw	r3,0(r2)

    trainInputs[1][0]  = -0.95;
    1018:	00800074 	movhi	r2,1
    101c:	109c3404 	addi	r2,r2,28880
    1020:	00efdcf4 	movhi	r3,49011
    1024:	18ccccc4 	addi	r3,r3,13107
    1028:	10c00315 	stw	r3,12(r2)
    trainInputs[1][1]  = 0.95;
    102c:	00800074 	movhi	r2,1
    1030:	109c3404 	addi	r2,r2,28880
    1034:	00cfdcf4 	movhi	r3,16243
    1038:	18ccccc4 	addi	r3,r3,13107
    103c:	10c00415 	stw	r3,16(r2)
    trainInputs[1][2]  = 1;       //bias
    1040:	00800074 	movhi	r2,1
    1044:	109c3404 	addi	r2,r2,28880
    1048:	00cfe034 	movhi	r3,16256
    104c:	10c00515 	stw	r3,20(r2)
    trainOutput[1] = 0.95;
    1050:	00800074 	movhi	r2,1
    1054:	109c4004 	addi	r2,r2,28928
    1058:	00cfdcf4 	movhi	r3,16243
    105c:	18ccccc4 	addi	r3,r3,13107
    1060:	10c00115 	stw	r3,4(r2)

    trainInputs[2][0]  = 0.95;
    1064:	00800074 	movhi	r2,1
    1068:	109c3404 	addi	r2,r2,28880
    106c:	00cfdcf4 	movhi	r3,16243
    1070:	18ccccc4 	addi	r3,r3,13107
    1074:	10c00615 	stw	r3,24(r2)
    trainInputs[2][1]  = 0.95;
    1078:	00800074 	movhi	r2,1
    107c:	109c3404 	addi	r2,r2,28880
    1080:	00cfdcf4 	movhi	r3,16243
    1084:	18ccccc4 	addi	r3,r3,13107
    1088:	10c00715 	stw	r3,28(r2)
   trainInputs[2][2]  = 1;        //bias
    108c:	00800074 	movhi	r2,1
    1090:	109c3404 	addi	r2,r2,28880
    1094:	00cfe034 	movhi	r3,16256
    1098:	10c00815 	stw	r3,32(r2)
    trainOutput[2] = -0.95;
    109c:	00800074 	movhi	r2,1
    10a0:	109c4004 	addi	r2,r2,28928
    10a4:	00efdcf4 	movhi	r3,49011
    10a8:	18ccccc4 	addi	r3,r3,13107
    10ac:	10c00215 	stw	r3,8(r2)

    trainInputs[3][0]  = -0.95;
    10b0:	00800074 	movhi	r2,1
    10b4:	109c3404 	addi	r2,r2,28880
    10b8:	00efdcf4 	movhi	r3,49011
    10bc:	18ccccc4 	addi	r3,r3,13107
    10c0:	10c00915 	stw	r3,36(r2)
    trainInputs[3][1]  = -0.95;
    10c4:	00800074 	movhi	r2,1
    10c8:	109c3404 	addi	r2,r2,28880
    10cc:	00efdcf4 	movhi	r3,49011
    10d0:	18ccccc4 	addi	r3,r3,13107
    10d4:	10c00a15 	stw	r3,40(r2)
    trainInputs[3][2]  = 1;     //bias
    10d8:	00800074 	movhi	r2,1
    10dc:	109c3404 	addi	r2,r2,28880
    10e0:	00cfe034 	movhi	r3,16256
    10e4:	10c00b15 	stw	r3,44(r2)
    trainOutput[3] = -0.95;
    10e8:	00800074 	movhi	r2,1
    10ec:	109c4004 	addi	r2,r2,28928
    10f0:	00efdcf4 	movhi	r3,49011
    10f4:	18ccccc4 	addi	r3,r3,13107
    10f8:	10c00315 	stw	r3,12(r2)
hiddenVal1[numHidden1]=1;//bias capa oculta1
    10fc:	00800074 	movhi	r2,1
    1100:	109b5704 	addi	r2,r2,27996
    1104:	00cfe034 	movhi	r3,16256
    1108:	10c03215 	stw	r3,200(r2)
hiddenVal2[numHidden2]=1;//bias capa oculta2
    110c:	00800074 	movhi	r2,1
    1110:	1096ba04 	addi	r2,r2,23272
    1114:	00cfe034 	movhi	r3,16256
    1118:	10c01415 	stw	r3,80(r2)
}
    111c:	0001883a 	nop
    1120:	e037883a 	mov	sp,fp
    1124:	dfc00117 	ldw	ra,4(sp)
    1128:	df000017 	ldw	fp,0(sp)
    112c:	dec00204 	addi	sp,sp,8
    1130:	f800283a 	ret

00001134 <displayResults>:


//************************************
// display results
void displayResults(void)
{
    1134:	defff804 	addi	sp,sp,-32
    1138:	dfc00715 	stw	ra,28(sp)
    113c:	df000615 	stw	fp,24(sp)
    1140:	dc800515 	stw	r18,20(sp)
    1144:	dc400415 	stw	r17,16(sp)
    1148:	dc000315 	stw	r16,12(sp)
    114c:	df000604 	addi	fp,sp,24
 int i=0;
    1150:	e03ffc15 	stw	zero,-16(fp)
 for( i = 0;i<numPatterns;i++)
    1154:	e03ffc15 	stw	zero,-16(fp)
    1158:	00002006 	br	11dc <displayResults+0xa8>
 {
  patNum = i;
    115c:	e0bffc17 	ldw	r2,-16(fp)
    1160:	d0a6d515 	stw	r2,-25772(gp)
  calcNet();
    1164:	000034c0 	call	34c <calcNet>
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
    1168:	d0a6d517 	ldw	r2,-25772(gp)
    116c:	14800044 	addi	r18,r2,1
    1170:	d0e6d517 	ldw	r3,-25772(gp)
    1174:	00800074 	movhi	r2,1
    1178:	109c4004 	addi	r2,r2,28928
    117c:	18c7883a 	add	r3,r3,r3
    1180:	18c7883a 	add	r3,r3,r3
    1184:	10c5883a 	add	r2,r2,r3
    1188:	10c00017 	ldw	r3,0(r2)
    118c:	1809883a 	mov	r4,r3
    1190:	00047640 	call	4764 <__extendsfdf2>
    1194:	1021883a 	mov	r16,r2
    1198:	1823883a 	mov	r17,r3
    119c:	d0a6d917 	ldw	r2,-25756(gp)
    11a0:	1009883a 	mov	r4,r2
    11a4:	00047640 	call	4764 <__extendsfdf2>
    11a8:	1009883a 	mov	r4,r2
    11ac:	180b883a 	mov	r5,r3
    11b0:	d9000015 	stw	r4,0(sp)
    11b4:	d9400115 	stw	r5,4(sp)
    11b8:	800d883a 	mov	r6,r16
    11bc:	880f883a 	mov	r7,r17
    11c0:	900b883a 	mov	r5,r18
    11c4:	01000074 	movhi	r4,1
    11c8:	2107f004 	addi	r4,r4,8128
    11cc:	0004c740 	call	4c74 <printf>
//************************************
// display results
void displayResults(void)
{
 int i=0;
 for( i = 0;i<numPatterns;i++)
    11d0:	e0bffc17 	ldw	r2,-16(fp)
    11d4:	10800044 	addi	r2,r2,1
    11d8:	e0bffc15 	stw	r2,-16(fp)
    11dc:	e0bffc17 	ldw	r2,-16(fp)
    11e0:	10800110 	cmplti	r2,r2,4
    11e4:	103fdd1e 	bne	r2,zero,115c <__alt_mem_onchip_memory+0xf780115c>
 {
  patNum = i;
  calcNet();
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 }
}
    11e8:	0001883a 	nop
    11ec:	e6fffd04 	addi	sp,fp,-12
    11f0:	dfc00417 	ldw	ra,16(sp)
    11f4:	df000317 	ldw	fp,12(sp)
    11f8:	dc800217 	ldw	r18,8(sp)
    11fc:	dc400117 	ldw	r17,4(sp)
    1200:	dc000017 	ldw	r16,0(sp)
    1204:	dec00504 	addi	sp,sp,20
    1208:	f800283a 	ret

0000120c <calcOverallError>:


//************************************
// calculate the overall error
void calcOverallError(void)
{
    120c:	defffd04 	addi	sp,sp,-12
    1210:	dfc00215 	stw	ra,8(sp)
    1214:	df000115 	stw	fp,4(sp)
    1218:	df000104 	addi	fp,sp,4
     int i=0;
    121c:	e03fff15 	stw	zero,-4(fp)
     RMSerror = 0.0;
    1220:	d026d815 	stw	zero,-25760(gp)
     for(i = 0;i<numPatterns;i++)
    1224:	e03fff15 	stw	zero,-4(fp)
    1228:	00000c06 	br	125c <calcOverallError+0x50>
        {
         patNum = i;
    122c:	e0bfff17 	ldw	r2,-4(fp)
    1230:	d0a6d515 	stw	r2,-25772(gp)
         calcNet();
    1234:	000034c0 	call	34c <calcNet>
         RMSerror = RMSerror + (errThisPat * errThisPat);
    1238:	d0e6d617 	ldw	r3,-25768(gp)
    123c:	d0a6d617 	ldw	r2,-25768(gp)
    1240:	1887ff32 	custom	252,r3,r3,r2
    1244:	d0a6d817 	ldw	r2,-25760(gp)
    1248:	1885ff72 	custom	253,r2,r3,r2
    124c:	d0a6d815 	stw	r2,-25760(gp)
// calculate the overall error
void calcOverallError(void)
{
     int i=0;
     RMSerror = 0.0;
     for(i = 0;i<numPatterns;i++)
    1250:	e0bfff17 	ldw	r2,-4(fp)
    1254:	10800044 	addi	r2,r2,1
    1258:	e0bfff15 	stw	r2,-4(fp)
    125c:	e0bfff17 	ldw	r2,-4(fp)
    1260:	10800110 	cmplti	r2,r2,4
    1264:	103ff11e 	bne	r2,zero,122c <__alt_mem_onchip_memory+0xf780122c>
        {
         patNum = i;
         calcNet();
         RMSerror = RMSerror + (errThisPat * errThisPat);
        }
     RMSerror = RMSerror/numPatterns;
    1268:	d0e6d817 	ldw	r3,-25760(gp)
    126c:	00902034 	movhi	r2,16512
    1270:	1885fff2 	custom	255,r2,r3,r2
    1274:	d0a6d815 	stw	r2,-25760(gp)
     RMSerror = sqrt(RMSerror);
    1278:	d0a6d817 	ldw	r2,-25760(gp)
    127c:	1009883a 	mov	r4,r2
    1280:	00047640 	call	4764 <__extendsfdf2>
    1284:	100b883a 	mov	r5,r2
    1288:	180d883a 	mov	r6,r3
    128c:	2809883a 	mov	r4,r5
    1290:	300b883a 	mov	r5,r6
    1294:	00016d40 	call	16d4 <sqrt>
    1298:	100b883a 	mov	r5,r2
    129c:	180d883a 	mov	r6,r3
    12a0:	2809883a 	mov	r4,r5
    12a4:	300b883a 	mov	r5,r6
    12a8:	00048740 	call	4874 <__truncdfsf2>
    12ac:	1007883a 	mov	r3,r2
    12b0:	d0e6d815 	stw	r3,-25760(gp)
}
    12b4:	0001883a 	nop
    12b8:	e037883a 	mov	sp,fp
    12bc:	dfc00117 	ldw	ra,4(sp)
    12c0:	df000017 	ldw	fp,0(sp)
    12c4:	dec00204 	addi	sp,sp,8
    12c8:	f800283a 	ret

000012cc <main>:
//********** THIS IS THE MAIN PROGRAM **************************
//==============================================================


int main(void)
{
    12cc:	defff704 	addi	sp,sp,-36
    12d0:	dfc00815 	stw	ra,32(sp)
    12d4:	df000715 	stw	fp,28(sp)
    12d8:	df000704 	addi	fp,sp,28
 // seed random number function
 srand ( time(NULL) );
    12dc:	0009883a 	mov	r4,zero
    12e0:	0004f180 	call	4f18 <time>
    12e4:	1009883a 	mov	r4,r2
    12e8:	0004da40 	call	4da4 <srand>
  PERF_RESET(PERFORMANCE_COUNTER_BASE);
    12ec:	00c00044 	movi	r3,1
    12f0:	00840034 	movhi	r2,4096
    12f4:	10842004 	addi	r2,r2,4224
    12f8:	10c00035 	stwio	r3,0(r2)
  PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
    12fc:	0007883a 	mov	r3,zero
    1300:	00840034 	movhi	r2,4096
    1304:	10842104 	addi	r2,r2,4228
    1308:	10c00035 	stwio	r3,0(r2)
 // initiate the weights
  PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 1);
    130c:	0007883a 	mov	r3,zero
    1310:	00840034 	movhi	r2,4096
    1314:	10842504 	addi	r2,r2,4244
    1318:	10c00035 	stwio	r3,0(r2)
 initWeights();
    131c:	0000d200 	call	d20 <initWeights>
 // load in the data
 initData();
    1320:	0000fb00 	call	fb0 <initData>
   PERF_END (PERFORMANCE_COUNTER_BASE, 1);
    1324:	0007883a 	mov	r3,zero
    1328:	00840034 	movhi	r2,4096
    132c:	10842404 	addi	r2,r2,4240
    1330:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    1334:	e03ffe15 	stw	zero,-8(fp)
    1338:	00004906 	br	1460 <main+0x194>
    {
        for(i = 0;i<numPatterns;i++)
    133c:	e03fff15 	stw	zero,-4(fp)
    1340:	00002d06 	br	13f8 <main+0x12c>
        {
          //select a pattern at random
          patNum = rand()%numPatterns;
    1344:	0004dbc0 	call	4dbc <rand>
    1348:	1007883a 	mov	r3,r2
    134c:	00a00034 	movhi	r2,32768
    1350:	108000c4 	addi	r2,r2,3
    1354:	1884703a 	and	r2,r3,r2
    1358:	1000040e 	bge	r2,zero,136c <main+0xa0>
    135c:	10bfffc4 	addi	r2,r2,-1
    1360:	00ffff04 	movi	r3,-4
    1364:	10c4b03a 	or	r2,r2,r3
    1368:	10800044 	addi	r2,r2,1
    136c:	d0a6d515 	stw	r2,-25772(gp)

          //calculate the current network output
          //and error for this pattern
          //phase forward

          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 2);
    1370:	0007883a 	mov	r3,zero
    1374:	00840034 	movhi	r2,4096
    1378:	10842904 	addi	r2,r2,4260
    137c:	10c00035 	stwio	r3,0(r2)
          calcNet();
    1380:	000034c0 	call	34c <calcNet>
          PERF_END (PERFORMANCE_COUNTER_BASE, 2);
    1384:	0007883a 	mov	r3,zero
    1388:	00840034 	movhi	r2,4096
    138c:	10842804 	addi	r2,r2,4256
    1390:	10c00035 	stwio	r3,0(r2)
          //change network weights
          //phase backward and update weights
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 3);
    1394:	0007883a 	mov	r3,zero
    1398:	00840034 	movhi	r2,4096
    139c:	10842d04 	addi	r2,r2,4276
    13a0:	10c00035 	stwio	r3,0(r2)
          WeightChangesH2O();
    13a4:	00007440 	call	744 <WeightChangesH2O>
          WeightChangesH1H2();
    13a8:	00008740 	call	874 <WeightChangesH1H2>
          WeightChangesIH1();
    13ac:	0000a9c0 	call	a9c <WeightChangesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 3);
    13b0:	0007883a 	mov	r3,zero
    13b4:	00840034 	movhi	r2,4096
    13b8:	10842c04 	addi	r2,r2,4272
    13bc:	10c00035 	stwio	r3,0(r2)
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 4);
    13c0:	0007883a 	mov	r3,zero
    13c4:	00840034 	movhi	r2,4096
    13c8:	10843104 	addi	r2,r2,4292
    13cc:	10c00035 	stwio	r3,0(r2)
          WeightUpdatesH2O();
    13d0:	00007840 	call	784 <WeightUpdatesH2O>
          WeightUpdatesH1H2();
    13d4:	00009400 	call	940 <WeightUpdatesH1H2>
          WeightUpdatesIH1();
    13d8:	0000bc40 	call	bc4 <WeightUpdatesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
    13dc:	0007883a 	mov	r3,zero
    13e0:	00840034 	movhi	r2,4096
    13e4:	10843004 	addi	r2,r2,4288
    13e8:	10c00035 	stwio	r3,0(r2)


 // train the network
    for(j = 0;j <= numEpochs;j++)
    {
        for(i = 0;i<numPatterns;i++)
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	10800044 	addi	r2,r2,1
    13f4:	e0bfff15 	stw	r2,-4(fp)
    13f8:	e0bfff17 	ldw	r2,-4(fp)
    13fc:	10800110 	cmplti	r2,r2,4
    1400:	103fd01e 	bne	r2,zero,1344 <__alt_mem_onchip_memory+0xf7801344>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
        }

        //display the overall network error
        //after each epoch
        PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 5);
    1404:	0007883a 	mov	r3,zero
    1408:	00840034 	movhi	r2,4096
    140c:	10843504 	addi	r2,r2,4308
    1410:	10c00035 	stwio	r3,0(r2)
        calcOverallError();
    1414:	000120c0 	call	120c <calcOverallError>
        printf("epoch = %d RMS Error = %f\n",j,RMSerror);
    1418:	d0a6d817 	ldw	r2,-25760(gp)
    141c:	1009883a 	mov	r4,r2
    1420:	00047640 	call	4764 <__extendsfdf2>
    1424:	1009883a 	mov	r4,r2
    1428:	180b883a 	mov	r5,r3
    142c:	200d883a 	mov	r6,r4
    1430:	280f883a 	mov	r7,r5
    1434:	e17ffe17 	ldw	r5,-8(fp)
    1438:	01000074 	movhi	r4,1
    143c:	2107fa04 	addi	r4,r4,8168
    1440:	0004c740 	call	4c74 <printf>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    1444:	0007883a 	mov	r3,zero
    1448:	00840034 	movhi	r2,4096
    144c:	10843404 	addi	r2,r2,4304
    1450:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    1454:	e0bffe17 	ldw	r2,-8(fp)
    1458:	10800044 	addi	r2,r2,1
    145c:	e0bffe15 	stw	r2,-8(fp)
    1460:	00c03204 	movi	r3,200
    1464:	e0bffe17 	ldw	r2,-8(fp)
    1468:	18bfb40e 	bge	r3,r2,133c <__alt_mem_onchip_memory+0xf780133c>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    }

 //training has finished
 //display the results
 PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 6);
    146c:	0007883a 	mov	r3,zero
    1470:	00840034 	movhi	r2,4096
    1474:	10843904 	addi	r2,r2,4324
    1478:	10c00035 	stwio	r3,0(r2)
 displayResults();
    147c:	00011340 	call	1134 <displayResults>
 PERF_END (PERFORMANCE_COUNTER_BASE, 6);
    1480:	0007883a 	mov	r3,zero
    1484:	00840034 	movhi	r2,4096
    1488:	10843804 	addi	r2,r2,4320
    148c:	10c00035 	stwio	r3,0(r2)

 PERF_STOP_MEASURING(PERFORMANCE_COUNTER_BASE);
    1490:	0007883a 	mov	r3,zero
    1494:	00840034 	movhi	r2,4096
    1498:	10842004 	addi	r2,r2,4224
    149c:	10c00035 	stwio	r3,0(r2)

  perf_print_formatted_report((void *)PERFORMANCE_COUNTER_BASE,
    14a0:	00800074 	movhi	r2,1
    14a4:	10880304 	addi	r2,r2,8204
    14a8:	d8800415 	stw	r2,16(sp)
    14ac:	00800074 	movhi	r2,1
    14b0:	10880604 	addi	r2,r2,8216
    14b4:	d8800315 	stw	r2,12(sp)
    14b8:	00800074 	movhi	r2,1
    14bc:	10880a04 	addi	r2,r2,8232
    14c0:	d8800215 	stw	r2,8(sp)
    14c4:	00800074 	movhi	r2,1
    14c8:	10880d04 	addi	r2,r2,8244
    14cc:	d8800115 	stw	r2,4(sp)
    14d0:	00800074 	movhi	r2,1
    14d4:	10881104 	addi	r2,r2,8260
    14d8:	d8800015 	stw	r2,0(sp)
    14dc:	01c00074 	movhi	r7,1
    14e0:	39c80104 	addi	r7,r7,8196
    14e4:	01800184 	movi	r6,6
    14e8:	0140bef4 	movhi	r5,763
    14ec:	297c2004 	addi	r5,r5,-3968
    14f0:	01040034 	movhi	r4,4096
    14f4:	21042004 	addi	r4,r4,4224
    14f8:	0010a8c0 	call	10a8c <perf_print_formatted_report>
							  "FASE UPDATE",
                              "CALCULO ERROR",
                              "TEST FINAL"
                              );

 system("PAUSE");
    14fc:	01000074 	movhi	r4,1
    1500:	21081504 	addi	r4,r4,8276
    1504:	0004ee80 	call	4ee8 <system>
 return 0;
    1508:	0005883a 	mov	r2,zero
}
    150c:	e037883a 	mov	sp,fp
    1510:	dfc00117 	ldw	ra,4(sp)
    1514:	df000017 	ldw	fp,0(sp)
    1518:	dec00204 	addi	sp,sp,8
    151c:	f800283a 	ret

00001520 <tanh>:
    1520:	00a00034 	movhi	r2,32768
    1524:	defffc04 	addi	sp,sp,-16
    1528:	10bfffc4 	addi	r2,r2,-1
    152c:	00dffc34 	movhi	r3,32752
    1530:	dc400115 	stw	r17,4(sp)
    1534:	dc000015 	stw	r16,0(sp)
    1538:	dfc00315 	stw	ra,12(sp)
    153c:	dc800215 	stw	r18,8(sp)
    1540:	2884703a 	and	r2,r5,r2
    1544:	18ffffc4 	addi	r3,r3,-1
    1548:	2821883a 	mov	r16,r5
    154c:	2023883a 	mov	r17,r4
    1550:	1880110e 	bge	r3,r2,1598 <tanh+0x78>
    1554:	200d883a 	mov	r6,r4
    1558:	280f883a 	mov	r7,r5
    155c:	0009883a 	mov	r4,zero
    1560:	014ffc34 	movhi	r5,16368
    1564:	80003416 	blt	r16,zero,1638 <tanh+0x118>
    1568:	0002b3c0 	call	2b3c <__divdf3>
    156c:	000d883a 	mov	r6,zero
    1570:	01cffc34 	movhi	r7,16368
    1574:	1009883a 	mov	r4,r2
    1578:	180b883a 	mov	r5,r3
    157c:	00022900 	call	2290 <__adddf3>
    1580:	dfc00317 	ldw	ra,12(sp)
    1584:	dc800217 	ldw	r18,8(sp)
    1588:	dc400117 	ldw	r17,4(sp)
    158c:	dc000017 	ldw	r16,0(sp)
    1590:	dec00404 	addi	sp,sp,16
    1594:	f800283a 	ret
    1598:	00d00db4 	movhi	r3,16438
    159c:	18ffffc4 	addi	r3,r3,-1
    15a0:	18802116 	blt	r3,r2,1628 <tanh+0x108>
    15a4:	00cf2034 	movhi	r3,15488
    15a8:	18ffffc4 	addi	r3,r3,-1
    15ac:	1880290e 	bge	r3,r2,1654 <tanh+0x134>
    15b0:	00cffc34 	movhi	r3,16368
    15b4:	18ffffc4 	addi	r3,r3,-1
    15b8:	18802f0e 	bge	r3,r2,1678 <tanh+0x158>
    15bc:	00022000 	call	2200 <fabs>
    15c0:	100d883a 	mov	r6,r2
    15c4:	180f883a 	mov	r7,r3
    15c8:	1009883a 	mov	r4,r2
    15cc:	180b883a 	mov	r5,r3
    15d0:	00022900 	call	2290 <__adddf3>
    15d4:	1009883a 	mov	r4,r2
    15d8:	180b883a 	mov	r5,r3
    15dc:	0001a8c0 	call	1a8c <expm1>
    15e0:	1009883a 	mov	r4,r2
    15e4:	180b883a 	mov	r5,r3
    15e8:	000d883a 	mov	r6,zero
    15ec:	01d00034 	movhi	r7,16384
    15f0:	00022900 	call	2290 <__adddf3>
    15f4:	100d883a 	mov	r6,r2
    15f8:	180f883a 	mov	r7,r3
    15fc:	0009883a 	mov	r4,zero
    1600:	01500034 	movhi	r5,16384
    1604:	0002b3c0 	call	2b3c <__divdf3>
    1608:	100d883a 	mov	r6,r2
    160c:	180f883a 	mov	r7,r3
    1610:	0009883a 	mov	r4,zero
    1614:	014ffc34 	movhi	r5,16368
    1618:	0003d0c0 	call	3d0c <__subdf3>
    161c:	803fd80e 	bge	r16,zero,1580 <__alt_mem_onchip_memory+0xf7801580>
    1620:	18e0003c 	xorhi	r3,r3,32768
    1624:	003fd606 	br	1580 <__alt_mem_onchip_memory+0xf7801580>
    1628:	0005883a 	mov	r2,zero
    162c:	00cffc34 	movhi	r3,16368
    1630:	803fd30e 	bge	r16,zero,1580 <__alt_mem_onchip_memory+0xf7801580>
    1634:	003ffa06 	br	1620 <__alt_mem_onchip_memory+0xf7801620>
    1638:	0002b3c0 	call	2b3c <__divdf3>
    163c:	000d883a 	mov	r6,zero
    1640:	01cffc34 	movhi	r7,16368
    1644:	1009883a 	mov	r4,r2
    1648:	180b883a 	mov	r5,r3
    164c:	0003d0c0 	call	3d0c <__subdf3>
    1650:	003fcb06 	br	1580 <__alt_mem_onchip_memory+0xf7801580>
    1654:	000d883a 	mov	r6,zero
    1658:	01cffc34 	movhi	r7,16368
    165c:	00022900 	call	2290 <__adddf3>
    1660:	880d883a 	mov	r6,r17
    1664:	800f883a 	mov	r7,r16
    1668:	1009883a 	mov	r4,r2
    166c:	180b883a 	mov	r5,r3
    1670:	00035f40 	call	35f4 <__muldf3>
    1674:	003fc206 	br	1580 <__alt_mem_onchip_memory+0xf7801580>
    1678:	00022000 	call	2200 <fabs>
    167c:	000d883a 	mov	r6,zero
    1680:	01f00034 	movhi	r7,49152
    1684:	1009883a 	mov	r4,r2
    1688:	180b883a 	mov	r5,r3
    168c:	00035f40 	call	35f4 <__muldf3>
    1690:	1009883a 	mov	r4,r2
    1694:	180b883a 	mov	r5,r3
    1698:	0001a8c0 	call	1a8c <expm1>
    169c:	000d883a 	mov	r6,zero
    16a0:	01d00034 	movhi	r7,16384
    16a4:	1009883a 	mov	r4,r2
    16a8:	180b883a 	mov	r5,r3
    16ac:	1023883a 	mov	r17,r2
    16b0:	1ca0003c 	xorhi	r18,r3,32768
    16b4:	00022900 	call	2290 <__adddf3>
    16b8:	100d883a 	mov	r6,r2
    16bc:	180f883a 	mov	r7,r3
    16c0:	8809883a 	mov	r4,r17
    16c4:	900b883a 	mov	r5,r18
    16c8:	0002b3c0 	call	2b3c <__divdf3>
    16cc:	803fac0e 	bge	r16,zero,1580 <__alt_mem_onchip_memory+0xf7801580>
    16d0:	003fd306 	br	1620 <__alt_mem_onchip_memory+0xf7801620>

000016d4 <sqrt>:
    16d4:	defff104 	addi	sp,sp,-60
    16d8:	dd000d15 	stw	r20,52(sp)
    16dc:	05000074 	movhi	r20,1
    16e0:	dcc00c15 	stw	r19,48(sp)
    16e4:	dc800b15 	stw	r18,44(sp)
    16e8:	dc400a15 	stw	r17,40(sp)
    16ec:	dc000915 	stw	r16,36(sp)
    16f0:	dfc00e15 	stw	ra,56(sp)
    16f4:	a50fc604 	addi	r20,r20,16152
    16f8:	2027883a 	mov	r19,r4
    16fc:	2825883a 	mov	r18,r5
    1700:	00018040 	call	1804 <__ieee754_sqrt>
    1704:	1821883a 	mov	r16,r3
    1708:	a0c00017 	ldw	r3,0(r20)
    170c:	1023883a 	mov	r17,r2
    1710:	00bfffc4 	movi	r2,-1
    1714:	18800a26 	beq	r3,r2,1740 <sqrt+0x6c>
    1718:	9809883a 	mov	r4,r19
    171c:	900b883a 	mov	r5,r18
    1720:	00022140 	call	2214 <__fpclassifyd>
    1724:	10000626 	beq	r2,zero,1740 <sqrt+0x6c>
    1728:	000d883a 	mov	r6,zero
    172c:	000f883a 	mov	r7,zero
    1730:	9809883a 	mov	r4,r19
    1734:	900b883a 	mov	r5,r18
    1738:	00035000 	call	3500 <__ledf2>
    173c:	10000a16 	blt	r2,zero,1768 <sqrt+0x94>
    1740:	8805883a 	mov	r2,r17
    1744:	8007883a 	mov	r3,r16
    1748:	dfc00e17 	ldw	ra,56(sp)
    174c:	dd000d17 	ldw	r20,52(sp)
    1750:	dcc00c17 	ldw	r19,48(sp)
    1754:	dc800b17 	ldw	r18,44(sp)
    1758:	dc400a17 	ldw	r17,40(sp)
    175c:	dc000917 	ldw	r16,36(sp)
    1760:	dec00f04 	addi	sp,sp,60
    1764:	f800283a 	ret
    1768:	00800044 	movi	r2,1
    176c:	d8800015 	stw	r2,0(sp)
    1770:	a4000017 	ldw	r16,0(r20)
    1774:	00800074 	movhi	r2,1
    1778:	10881704 	addi	r2,r2,8284
    177c:	d8800115 	stw	r2,4(sp)
    1780:	d8000815 	stw	zero,32(sp)
    1784:	dcc00415 	stw	r19,16(sp)
    1788:	dc800515 	stw	r18,20(sp)
    178c:	dcc00215 	stw	r19,8(sp)
    1790:	dc800315 	stw	r18,12(sp)
    1794:	80000a1e 	bne	r16,zero,17c0 <sqrt+0xec>
    1798:	d8000615 	stw	zero,24(sp)
    179c:	d8000715 	stw	zero,28(sp)
    17a0:	d809883a 	mov	r4,sp
    17a4:	00022880 	call	2288 <matherr>
    17a8:	10000e26 	beq	r2,zero,17e4 <sqrt+0x110>
    17ac:	d8800817 	ldw	r2,32(sp)
    17b0:	1000101e 	bne	r2,zero,17f4 <sqrt+0x120>
    17b4:	d8800617 	ldw	r2,24(sp)
    17b8:	d8c00717 	ldw	r3,28(sp)
    17bc:	003fe206 	br	1748 <__alt_mem_onchip_memory+0xf7801748>
    17c0:	000d883a 	mov	r6,zero
    17c4:	000f883a 	mov	r7,zero
    17c8:	0009883a 	mov	r4,zero
    17cc:	000b883a 	mov	r5,zero
    17d0:	0002b3c0 	call	2b3c <__divdf3>
    17d4:	d8800615 	stw	r2,24(sp)
    17d8:	d8c00715 	stw	r3,28(sp)
    17dc:	00800084 	movi	r2,2
    17e0:	80bfef1e 	bne	r16,r2,17a0 <__alt_mem_onchip_memory+0xf78017a0>
    17e4:	0004c340 	call	4c34 <__errno>
    17e8:	00c00844 	movi	r3,33
    17ec:	10c00015 	stw	r3,0(r2)
    17f0:	003fee06 	br	17ac <__alt_mem_onchip_memory+0xf78017ac>
    17f4:	0004c340 	call	4c34 <__errno>
    17f8:	d8c00817 	ldw	r3,32(sp)
    17fc:	10c00015 	stw	r3,0(r2)
    1800:	003fec06 	br	17b4 <__alt_mem_onchip_memory+0xf78017b4>

00001804 <__ieee754_sqrt>:
    1804:	defffd04 	addi	sp,sp,-12
    1808:	dc400115 	stw	r17,4(sp)
    180c:	dc000015 	stw	r16,0(sp)
    1810:	dfc00215 	stw	ra,8(sp)
    1814:	28dffc2c 	andhi	r3,r5,32752
    1818:	009ffc34 	movhi	r2,32752
    181c:	2821883a 	mov	r16,r5
    1820:	2023883a 	mov	r17,r4
    1824:	200d883a 	mov	r6,r4
    1828:	18807b26 	beq	r3,r2,1a18 <__ieee754_sqrt+0x214>
    182c:	01405f0e 	bge	zero,r5,19ac <__ieee754_sqrt+0x1a8>
    1830:	2815d53a 	srai	r10,r5,20
    1834:	50006a26 	beq	r10,zero,19e0 <__ieee754_sqrt+0x1dc>
    1838:	00c00434 	movhi	r3,16
    183c:	52bf0044 	addi	r10,r10,-1023
    1840:	18ffffc4 	addi	r3,r3,-1
    1844:	80c6703a 	and	r3,r16,r3
    1848:	5080004c 	andi	r2,r10,1
    184c:	18c00434 	orhi	r3,r3,16
    1850:	1000511e 	bne	r2,zero,1998 <__ieee754_sqrt+0x194>
    1854:	3004d7fa 	srli	r2,r6,31
    1858:	5015d07a 	srai	r10,r10,1
    185c:	18c7883a 	add	r3,r3,r3
    1860:	10c5883a 	add	r2,r2,r3
    1864:	01400584 	movi	r5,22
    1868:	3187883a 	add	r3,r6,r6
    186c:	0013883a 	mov	r9,zero
    1870:	000f883a 	mov	r7,zero
    1874:	01000834 	movhi	r4,32
    1878:	390d883a 	add	r6,r7,r4
    187c:	1810d7fa 	srli	r8,r3,31
    1880:	297fffc4 	addi	r5,r5,-1
    1884:	11800316 	blt	r2,r6,1894 <__ieee754_sqrt+0x90>
    1888:	1185c83a 	sub	r2,r2,r6
    188c:	310f883a 	add	r7,r6,r4
    1890:	4913883a 	add	r9,r9,r4
    1894:	1085883a 	add	r2,r2,r2
    1898:	4085883a 	add	r2,r8,r2
    189c:	18c7883a 	add	r3,r3,r3
    18a0:	2008d07a 	srli	r4,r4,1
    18a4:	283ff41e 	bne	r5,zero,1878 <__alt_mem_onchip_memory+0xf7801878>
    18a8:	01200034 	movhi	r4,32768
    18ac:	01800804 	movi	r6,32
    18b0:	0011883a 	mov	r8,zero
    18b4:	0019883a 	mov	r12,zero
    18b8:	201b883a 	mov	r13,r4
    18bc:	00000806 	br	18e0 <__ieee754_sqrt+0xdc>
    18c0:	38801726 	beq	r7,r2,1920 <__ieee754_sqrt+0x11c>
    18c4:	180ad7fa 	srli	r5,r3,31
    18c8:	1085883a 	add	r2,r2,r2
    18cc:	31bfffc4 	addi	r6,r6,-1
    18d0:	2885883a 	add	r2,r5,r2
    18d4:	18c7883a 	add	r3,r3,r3
    18d8:	2008d07a 	srli	r4,r4,1
    18dc:	30001726 	beq	r6,zero,193c <__ieee754_sqrt+0x138>
    18e0:	230b883a 	add	r5,r4,r12
    18e4:	38bff60e 	bge	r7,r2,18c0 <__alt_mem_onchip_memory+0xf78018c0>
    18e8:	2ae0002c 	andhi	r11,r5,32768
    18ec:	2919883a 	add	r12,r5,r4
    18f0:	5b400826 	beq	r11,r13,1914 <__ieee754_sqrt+0x110>
    18f4:	3817883a 	mov	r11,r7
    18f8:	11c5c83a 	sub	r2,r2,r7
    18fc:	1940012e 	bgeu	r3,r5,1904 <__ieee754_sqrt+0x100>
    1900:	10bfffc4 	addi	r2,r2,-1
    1904:	1947c83a 	sub	r3,r3,r5
    1908:	4111883a 	add	r8,r8,r4
    190c:	580f883a 	mov	r7,r11
    1910:	003fec06 	br	18c4 <__alt_mem_onchip_memory+0xf78018c4>
    1914:	603ff716 	blt	r12,zero,18f4 <__alt_mem_onchip_memory+0xf78018f4>
    1918:	3ac00044 	addi	r11,r7,1
    191c:	003ff606 	br	18f8 <__alt_mem_onchip_memory+0xf78018f8>
    1920:	19401936 	bltu	r3,r5,1988 <__ieee754_sqrt+0x184>
    1924:	2ae0002c 	andhi	r11,r5,32768
    1928:	2919883a 	add	r12,r5,r4
    192c:	5b404526 	beq	r11,r13,1a44 <__ieee754_sqrt+0x240>
    1930:	1017883a 	mov	r11,r2
    1934:	0005883a 	mov	r2,zero
    1938:	003ff206 	br	1904 <__alt_mem_onchip_memory+0xf7801904>
    193c:	10c4b03a 	or	r2,r2,r3
    1940:	10000426 	beq	r2,zero,1954 <__ieee754_sqrt+0x150>
    1944:	00bfffc4 	movi	r2,-1
    1948:	40804026 	beq	r8,r2,1a4c <__ieee754_sqrt+0x248>
    194c:	4080004c 	andi	r2,r8,1
    1950:	4091883a 	add	r8,r8,r2
    1954:	4004d07a 	srli	r2,r8,1
    1958:	4807d07a 	srai	r3,r9,1
    195c:	010ff834 	movhi	r4,16352
    1960:	4a40004c 	andi	r9,r9,1
    1964:	1909883a 	add	r4,r3,r4
    1968:	4800091e 	bne	r9,zero,1990 <__ieee754_sqrt+0x18c>
    196c:	5006953a 	slli	r3,r10,20
    1970:	1907883a 	add	r3,r3,r4
    1974:	dfc00217 	ldw	ra,8(sp)
    1978:	dc400117 	ldw	r17,4(sp)
    197c:	dc000017 	ldw	r16,0(sp)
    1980:	dec00304 	addi	sp,sp,12
    1984:	f800283a 	ret
    1988:	3805883a 	mov	r2,r7
    198c:	003fcd06 	br	18c4 <__alt_mem_onchip_memory+0xf78018c4>
    1990:	10a00034 	orhi	r2,r2,32768
    1994:	003ff506 	br	196c <__alt_mem_onchip_memory+0xf780196c>
    1998:	3004d7fa 	srli	r2,r6,31
    199c:	18c7883a 	add	r3,r3,r3
    19a0:	318d883a 	add	r6,r6,r6
    19a4:	10c7883a 	add	r3,r2,r3
    19a8:	003faa06 	br	1854 <__alt_mem_onchip_memory+0xf7801854>
    19ac:	00a00034 	movhi	r2,32768
    19b0:	10bfffc4 	addi	r2,r2,-1
    19b4:	2884703a 	and	r2,r5,r2
    19b8:	1104b03a 	or	r2,r2,r4
    19bc:	10001e26 	beq	r2,zero,1a38 <__ieee754_sqrt+0x234>
    19c0:	2800291e 	bne	r5,zero,1a68 <__ieee754_sqrt+0x264>
    19c4:	0015883a 	mov	r10,zero
    19c8:	3020d2fa 	srli	r16,r6,11
    19cc:	52bffac4 	addi	r10,r10,-21
    19d0:	300c957a 	slli	r6,r6,21
    19d4:	803ffc26 	beq	r16,zero,19c8 <__alt_mem_onchip_memory+0xf78019c8>
    19d8:	8080042c 	andhi	r2,r16,16
    19dc:	10001e1e 	bne	r2,zero,1a58 <__ieee754_sqrt+0x254>
    19e0:	0005883a 	mov	r2,zero
    19e4:	00000106 	br	19ec <__ieee754_sqrt+0x1e8>
    19e8:	1805883a 	mov	r2,r3
    19ec:	8421883a 	add	r16,r16,r16
    19f0:	8100042c 	andhi	r4,r16,16
    19f4:	10c00044 	addi	r3,r2,1
    19f8:	203ffb26 	beq	r4,zero,19e8 <__alt_mem_onchip_memory+0xf78019e8>
    19fc:	01000804 	movi	r4,32
    1a00:	20c9c83a 	sub	r4,r4,r3
    1a04:	3108d83a 	srl	r4,r6,r4
    1a08:	5095c83a 	sub	r10,r10,r2
    1a0c:	30cc983a 	sll	r6,r6,r3
    1a10:	2420b03a 	or	r16,r4,r16
    1a14:	003f8806 	br	1838 <__alt_mem_onchip_memory+0xf7801838>
    1a18:	280f883a 	mov	r7,r5
    1a1c:	00035f40 	call	35f4 <__muldf3>
    1a20:	880d883a 	mov	r6,r17
    1a24:	800f883a 	mov	r7,r16
    1a28:	1009883a 	mov	r4,r2
    1a2c:	180b883a 	mov	r5,r3
    1a30:	00022900 	call	2290 <__adddf3>
    1a34:	003fcf06 	br	1974 <__alt_mem_onchip_memory+0xf7801974>
    1a38:	2005883a 	mov	r2,r4
    1a3c:	2807883a 	mov	r3,r5
    1a40:	003fcc06 	br	1974 <__alt_mem_onchip_memory+0xf7801974>
    1a44:	603fba16 	blt	r12,zero,1930 <__alt_mem_onchip_memory+0xf7801930>
    1a48:	003fb306 	br	1918 <__alt_mem_onchip_memory+0xf7801918>
    1a4c:	4a400044 	addi	r9,r9,1
    1a50:	0005883a 	mov	r2,zero
    1a54:	003fc006 	br	1958 <__alt_mem_onchip_memory+0xf7801958>
    1a58:	01000804 	movi	r4,32
    1a5c:	00bfffc4 	movi	r2,-1
    1a60:	0007883a 	mov	r3,zero
    1a64:	003fe706 	br	1a04 <__alt_mem_onchip_memory+0xf7801a04>
    1a68:	200d883a 	mov	r6,r4
    1a6c:	280f883a 	mov	r7,r5
    1a70:	0003d0c0 	call	3d0c <__subdf3>
    1a74:	100d883a 	mov	r6,r2
    1a78:	180f883a 	mov	r7,r3
    1a7c:	1009883a 	mov	r4,r2
    1a80:	180b883a 	mov	r5,r3
    1a84:	0002b3c0 	call	2b3c <__divdf3>
    1a88:	003fba06 	br	1974 <__alt_mem_onchip_memory+0xf7801974>

00001a8c <expm1>:
    1a8c:	00a00034 	movhi	r2,32768
    1a90:	defff404 	addi	sp,sp,-48
    1a94:	10bfffc4 	addi	r2,r2,-1
    1a98:	00d010f4 	movhi	r3,16451
    1a9c:	dc800415 	stw	r18,16(sp)
    1aa0:	dc400315 	stw	r17,12(sp)
    1aa4:	dc000215 	stw	r16,8(sp)
    1aa8:	dfc00b15 	stw	ra,44(sp)
    1aac:	df000a15 	stw	fp,40(sp)
    1ab0:	ddc00915 	stw	r23,36(sp)
    1ab4:	dd800815 	stw	r22,32(sp)
    1ab8:	dd400715 	stw	r21,28(sp)
    1abc:	dd000615 	stw	r20,24(sp)
    1ac0:	dcc00515 	stw	r19,20(sp)
    1ac4:	2884703a 	and	r2,r5,r2
    1ac8:	18da1e44 	addi	r3,r3,26745
    1acc:	2821883a 	mov	r16,r5
    1ad0:	2023883a 	mov	r17,r4
    1ad4:	2ca0002c 	andhi	r18,r5,32768
    1ad8:	18804f2e 	bgeu	r3,r2,1c18 <expm1+0x18c>
    1adc:	00d021b4 	movhi	r3,16518
    1ae0:	18cb9044 	addi	r3,r3,11841
    1ae4:	1880fa36 	bltu	r3,r2,1ed0 <expm1+0x444>
    1ae8:	90017b26 	beq	r18,zero,20d8 <expm1+0x64c>
    1aec:	01b0be74 	movhi	r6,49913
    1af0:	01c06974 	movhi	r7,421
    1af4:	31bcd644 	addi	r6,r6,-3239
    1af8:	39db87c4 	addi	r7,r7,28191
    1afc:	8809883a 	mov	r4,r17
    1b00:	800b883a 	mov	r5,r16
    1b04:	00022900 	call	2290 <__adddf3>
    1b08:	000d883a 	mov	r6,zero
    1b0c:	000f883a 	mov	r7,zero
    1b10:	1009883a 	mov	r4,r2
    1b14:	180b883a 	mov	r5,r3
    1b18:	00035000 	call	3500 <__ledf2>
    1b1c:	10014216 	blt	r2,zero,2028 <expm1+0x59c>
    1b20:	01994b34 	movhi	r6,25900
    1b24:	01cffdf4 	movhi	r7,16375
    1b28:	31a0bf84 	addi	r6,r6,-32002
    1b2c:	39c551c4 	addi	r7,r7,5447
    1b30:	8809883a 	mov	r4,r17
    1b34:	800b883a 	mov	r5,r16
    1b38:	00035f40 	call	35f4 <__muldf3>
    1b3c:	100d883a 	mov	r6,r2
    1b40:	180f883a 	mov	r7,r3
    1b44:	016ff834 	movhi	r5,49120
    1b48:	0009883a 	mov	r4,zero
    1b4c:	00022900 	call	2290 <__adddf3>
    1b50:	180b883a 	mov	r5,r3
    1b54:	1009883a 	mov	r4,r2
    1b58:	00046080 	call	4608 <__fixdfsi>
    1b5c:	1009883a 	mov	r4,r2
    1b60:	1029883a 	mov	r20,r2
    1b64:	00046880 	call	4688 <__floatsidf>
    1b68:	01cff9b4 	movhi	r7,16358
    1b6c:	39cb9084 	addi	r7,r7,11842
    1b70:	01bfb834 	movhi	r6,65248
    1b74:	1009883a 	mov	r4,r2
    1b78:	180b883a 	mov	r5,r3
    1b7c:	1027883a 	mov	r19,r2
    1b80:	1825883a 	mov	r18,r3
    1b84:	00035f40 	call	35f4 <__muldf3>
    1b88:	100d883a 	mov	r6,r2
    1b8c:	180f883a 	mov	r7,r3
    1b90:	8809883a 	mov	r4,r17
    1b94:	800b883a 	mov	r5,r16
    1b98:	0003d0c0 	call	3d0c <__subdf3>
    1b9c:	018d5e74 	movhi	r6,13689
    1ba0:	01cf7ab4 	movhi	r7,15850
    1ba4:	9809883a 	mov	r4,r19
    1ba8:	900b883a 	mov	r5,r18
    1bac:	318f1d84 	addi	r6,r6,15478
    1bb0:	39ce7bc4 	addi	r7,r7,14831
    1bb4:	102d883a 	mov	r22,r2
    1bb8:	182b883a 	mov	r21,r3
    1bbc:	00035f40 	call	35f4 <__muldf3>
    1bc0:	1027883a 	mov	r19,r2
    1bc4:	1825883a 	mov	r18,r3
    1bc8:	980d883a 	mov	r6,r19
    1bcc:	900f883a 	mov	r7,r18
    1bd0:	b009883a 	mov	r4,r22
    1bd4:	a80b883a 	mov	r5,r21
    1bd8:	0003d0c0 	call	3d0c <__subdf3>
    1bdc:	100d883a 	mov	r6,r2
    1be0:	180f883a 	mov	r7,r3
    1be4:	b009883a 	mov	r4,r22
    1be8:	a80b883a 	mov	r5,r21
    1bec:	1023883a 	mov	r17,r2
    1bf0:	1821883a 	mov	r16,r3
    1bf4:	0003d0c0 	call	3d0c <__subdf3>
    1bf8:	980d883a 	mov	r6,r19
    1bfc:	900f883a 	mov	r7,r18
    1c00:	1009883a 	mov	r4,r2
    1c04:	180b883a 	mov	r5,r3
    1c08:	0003d0c0 	call	3d0c <__subdf3>
    1c0c:	d8800015 	stw	r2,0(sp)
    1c10:	d8c00115 	stw	r3,4(sp)
    1c14:	00000706 	br	1c34 <expm1+0x1a8>
    1c18:	00cff5b4 	movhi	r3,16342
    1c1c:	18cb9084 	addi	r3,r3,11842
    1c20:	1880e036 	bltu	r3,r2,1fa4 <expm1+0x518>
    1c24:	00cf2434 	movhi	r3,15504
    1c28:	18ffffc4 	addi	r3,r3,-1
    1c2c:	18810a2e 	bgeu	r3,r2,2058 <expm1+0x5cc>
    1c30:	0029883a 	mov	r20,zero
    1c34:	000d883a 	mov	r6,zero
    1c38:	01cff834 	movhi	r7,16352
    1c3c:	8809883a 	mov	r4,r17
    1c40:	800b883a 	mov	r5,r16
    1c44:	00035f40 	call	35f4 <__muldf3>
    1c48:	100d883a 	mov	r6,r2
    1c4c:	180f883a 	mov	r7,r3
    1c50:	8809883a 	mov	r4,r17
    1c54:	800b883a 	mov	r5,r16
    1c58:	1039883a 	mov	fp,r2
    1c5c:	182f883a 	mov	r23,r3
    1c60:	00035f40 	call	35f4 <__muldf3>
    1c64:	019b82b4 	movhi	r6,28170
    1c68:	01efa2f4 	movhi	r7,48779
    1c6c:	31b0cb44 	addi	r6,r6,-15571
    1c70:	39ff6dc4 	addi	r7,r7,-585
    1c74:	1009883a 	mov	r4,r2
    1c78:	180b883a 	mov	r5,r3
    1c7c:	1027883a 	mov	r19,r2
    1c80:	1825883a 	mov	r18,r3
    1c84:	00035f40 	call	35f4 <__muldf3>
    1c88:	01a1b9b4 	movhi	r6,34534
    1c8c:	01cfb474 	movhi	r7,16081
    1c90:	31948e44 	addi	r6,r6,21049
    1c94:	39f3f284 	addi	r7,r7,-12342
    1c98:	1009883a 	mov	r4,r2
    1c9c:	180b883a 	mov	r5,r3
    1ca0:	00022900 	call	2290 <__adddf3>
    1ca4:	980d883a 	mov	r6,r19
    1ca8:	900f883a 	mov	r7,r18
    1cac:	1009883a 	mov	r4,r2
    1cb0:	180b883a 	mov	r5,r3
    1cb4:	00035f40 	call	35f4 <__muldf3>
    1cb8:	01a7aaf4 	movhi	r6,40619
    1cbc:	01cfc574 	movhi	r7,16149
    1cc0:	31b6edc4 	addi	r6,r6,-9289
    1cc4:	39f38644 	addi	r7,r7,-12775
    1cc8:	1009883a 	mov	r4,r2
    1ccc:	180b883a 	mov	r5,r3
    1cd0:	0003d0c0 	call	3d0c <__subdf3>
    1cd4:	980d883a 	mov	r6,r19
    1cd8:	900f883a 	mov	r7,r18
    1cdc:	1009883a 	mov	r4,r2
    1ce0:	180b883a 	mov	r5,r3
    1ce4:	00035f40 	call	35f4 <__muldf3>
    1ce8:	01867fb4 	movhi	r6,6654
    1cec:	01cfd6b4 	movhi	r7,16218
    1cf0:	31956144 	addi	r6,r6,21893
    1cf4:	39c06804 	addi	r7,r7,416
    1cf8:	1009883a 	mov	r4,r2
    1cfc:	180b883a 	mov	r5,r3
    1d00:	00022900 	call	2290 <__adddf3>
    1d04:	980d883a 	mov	r6,r19
    1d08:	900f883a 	mov	r7,r18
    1d0c:	1009883a 	mov	r4,r2
    1d10:	180b883a 	mov	r5,r3
    1d14:	00035f40 	call	35f4 <__muldf3>
    1d18:	01844474 	movhi	r6,4369
    1d1c:	01cfe874 	movhi	r7,16289
    1d20:	31843d04 	addi	r6,r6,4340
    1d24:	39c44444 	addi	r7,r7,4369
    1d28:	1009883a 	mov	r4,r2
    1d2c:	180b883a 	mov	r5,r3
    1d30:	0003d0c0 	call	3d0c <__subdf3>
    1d34:	980d883a 	mov	r6,r19
    1d38:	900f883a 	mov	r7,r18
    1d3c:	1009883a 	mov	r4,r2
    1d40:	180b883a 	mov	r5,r3
    1d44:	00035f40 	call	35f4 <__muldf3>
    1d48:	000d883a 	mov	r6,zero
    1d4c:	01cffc34 	movhi	r7,16368
    1d50:	1009883a 	mov	r4,r2
    1d54:	180b883a 	mov	r5,r3
    1d58:	00022900 	call	2290 <__adddf3>
    1d5c:	e009883a 	mov	r4,fp
    1d60:	b80b883a 	mov	r5,r23
    1d64:	100d883a 	mov	r6,r2
    1d68:	180f883a 	mov	r7,r3
    1d6c:	102d883a 	mov	r22,r2
    1d70:	182b883a 	mov	r21,r3
    1d74:	00035f40 	call	35f4 <__muldf3>
    1d78:	100d883a 	mov	r6,r2
    1d7c:	180f883a 	mov	r7,r3
    1d80:	0009883a 	mov	r4,zero
    1d84:	01500234 	movhi	r5,16392
    1d88:	0003d0c0 	call	3d0c <__subdf3>
    1d8c:	b009883a 	mov	r4,r22
    1d90:	a80b883a 	mov	r5,r21
    1d94:	100d883a 	mov	r6,r2
    1d98:	180f883a 	mov	r7,r3
    1d9c:	1039883a 	mov	fp,r2
    1da0:	182f883a 	mov	r23,r3
    1da4:	0003d0c0 	call	3d0c <__subdf3>
    1da8:	e00d883a 	mov	r6,fp
    1dac:	b80f883a 	mov	r7,r23
    1db0:	8809883a 	mov	r4,r17
    1db4:	800b883a 	mov	r5,r16
    1db8:	102d883a 	mov	r22,r2
    1dbc:	182b883a 	mov	r21,r3
    1dc0:	00035f40 	call	35f4 <__muldf3>
    1dc4:	100d883a 	mov	r6,r2
    1dc8:	180f883a 	mov	r7,r3
    1dcc:	0009883a 	mov	r4,zero
    1dd0:	01500634 	movhi	r5,16408
    1dd4:	0003d0c0 	call	3d0c <__subdf3>
    1dd8:	100d883a 	mov	r6,r2
    1ddc:	180f883a 	mov	r7,r3
    1de0:	b009883a 	mov	r4,r22
    1de4:	a80b883a 	mov	r5,r21
    1de8:	0002b3c0 	call	2b3c <__divdf3>
    1dec:	980d883a 	mov	r6,r19
    1df0:	900f883a 	mov	r7,r18
    1df4:	1009883a 	mov	r4,r2
    1df8:	180b883a 	mov	r5,r3
    1dfc:	00035f40 	call	35f4 <__muldf3>
    1e00:	a0003f26 	beq	r20,zero,1f00 <expm1+0x474>
    1e04:	d9800017 	ldw	r6,0(sp)
    1e08:	d9c00117 	ldw	r7,4(sp)
    1e0c:	1009883a 	mov	r4,r2
    1e10:	180b883a 	mov	r5,r3
    1e14:	0003d0c0 	call	3d0c <__subdf3>
    1e18:	880d883a 	mov	r6,r17
    1e1c:	800f883a 	mov	r7,r16
    1e20:	1009883a 	mov	r4,r2
    1e24:	180b883a 	mov	r5,r3
    1e28:	00035f40 	call	35f4 <__muldf3>
    1e2c:	d9800017 	ldw	r6,0(sp)
    1e30:	d9c00117 	ldw	r7,4(sp)
    1e34:	1009883a 	mov	r4,r2
    1e38:	180b883a 	mov	r5,r3
    1e3c:	0003d0c0 	call	3d0c <__subdf3>
    1e40:	980d883a 	mov	r6,r19
    1e44:	900f883a 	mov	r7,r18
    1e48:	1009883a 	mov	r4,r2
    1e4c:	180b883a 	mov	r5,r3
    1e50:	0003d0c0 	call	3d0c <__subdf3>
    1e54:	1027883a 	mov	r19,r2
    1e58:	00bfffc4 	movi	r2,-1
    1e5c:	1825883a 	mov	r18,r3
    1e60:	a080a826 	beq	r20,r2,2104 <expm1+0x678>
    1e64:	00800044 	movi	r2,1
    1e68:	a0808526 	beq	r20,r2,2080 <expm1+0x5f4>
    1e6c:	a0800044 	addi	r2,r20,1
    1e70:	00c00e44 	movi	r3,57
    1e74:	18805b36 	bltu	r3,r2,1fe4 <expm1+0x558>
    1e78:	008004c4 	movi	r2,19
    1e7c:	1500b10e 	bge	r2,r20,2144 <expm1+0x6b8>
    1e80:	01c0ffc4 	movi	r7,1023
    1e84:	3d0fc83a 	sub	r7,r7,r20
    1e88:	380e953a 	slli	r7,r7,20
    1e8c:	000d883a 	mov	r6,zero
    1e90:	9809883a 	mov	r4,r19
    1e94:	900b883a 	mov	r5,r18
    1e98:	00022900 	call	2290 <__adddf3>
    1e9c:	800b883a 	mov	r5,r16
    1ea0:	100d883a 	mov	r6,r2
    1ea4:	180f883a 	mov	r7,r3
    1ea8:	8809883a 	mov	r4,r17
    1eac:	0003d0c0 	call	3d0c <__subdf3>
    1eb0:	a020953a 	slli	r16,r20,20
    1eb4:	000d883a 	mov	r6,zero
    1eb8:	01cffc34 	movhi	r7,16368
    1ebc:	1009883a 	mov	r4,r2
    1ec0:	180b883a 	mov	r5,r3
    1ec4:	00022900 	call	2290 <__adddf3>
    1ec8:	80c7883a 	add	r3,r16,r3
    1ecc:	00001b06 	br	1f3c <expm1+0x4b0>
    1ed0:	00dffc34 	movhi	r3,32752
    1ed4:	18ffffc4 	addi	r3,r3,-1
    1ed8:	1880242e 	bgeu	r3,r2,1f6c <expm1+0x4e0>
    1edc:	00800434 	movhi	r2,16
    1ee0:	10bfffc4 	addi	r2,r2,-1
    1ee4:	2884703a 	and	r2,r5,r2
    1ee8:	1104b03a 	or	r2,r2,r4
    1eec:	1000c01e 	bne	r2,zero,21f0 <expm1+0x764>
    1ef0:	90004d1e 	bne	r18,zero,2028 <expm1+0x59c>
    1ef4:	2005883a 	mov	r2,r4
    1ef8:	2807883a 	mov	r3,r5
    1efc:	00000f06 	br	1f3c <expm1+0x4b0>
    1f00:	100d883a 	mov	r6,r2
    1f04:	180f883a 	mov	r7,r3
    1f08:	8809883a 	mov	r4,r17
    1f0c:	800b883a 	mov	r5,r16
    1f10:	00035f40 	call	35f4 <__muldf3>
    1f14:	980d883a 	mov	r6,r19
    1f18:	900f883a 	mov	r7,r18
    1f1c:	1009883a 	mov	r4,r2
    1f20:	180b883a 	mov	r5,r3
    1f24:	0003d0c0 	call	3d0c <__subdf3>
    1f28:	100d883a 	mov	r6,r2
    1f2c:	180f883a 	mov	r7,r3
    1f30:	8809883a 	mov	r4,r17
    1f34:	800b883a 	mov	r5,r16
    1f38:	0003d0c0 	call	3d0c <__subdf3>
    1f3c:	dfc00b17 	ldw	ra,44(sp)
    1f40:	df000a17 	ldw	fp,40(sp)
    1f44:	ddc00917 	ldw	r23,36(sp)
    1f48:	dd800817 	ldw	r22,32(sp)
    1f4c:	dd400717 	ldw	r21,28(sp)
    1f50:	dd000617 	ldw	r20,24(sp)
    1f54:	dcc00517 	ldw	r19,20(sp)
    1f58:	dc800417 	ldw	r18,16(sp)
    1f5c:	dc400317 	ldw	r17,12(sp)
    1f60:	dc000217 	ldw	r16,8(sp)
    1f64:	dec00c04 	addi	sp,sp,48
    1f68:	f800283a 	ret
    1f6c:	01bfbeb4 	movhi	r6,65274
    1f70:	01d021b4 	movhi	r7,16518
    1f74:	318e7bc4 	addi	r6,r6,14831
    1f78:	39cb9084 	addi	r7,r7,11842
    1f7c:	00034240 	call	3424 <__gedf2>
    1f80:	00bed90e 	bge	zero,r2,1ae8 <__alt_mem_onchip_memory+0xf7801ae8>
    1f84:	01a20034 	movhi	r6,34816
    1f88:	01df8e34 	movhi	r7,32312
    1f8c:	319d6704 	addi	r6,r6,30108
    1f90:	39f90f04 	addi	r7,r7,-7108
    1f94:	3009883a 	mov	r4,r6
    1f98:	380b883a 	mov	r5,r7
    1f9c:	00035f40 	call	35f4 <__muldf3>
    1fa0:	003fe606 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>
    1fa4:	00cffc74 	movhi	r3,16369
    1fa8:	18e8ac44 	addi	r3,r3,-23887
    1fac:	18807636 	bltu	r3,r2,2188 <expm1+0x6fc>
    1fb0:	01cff9b4 	movhi	r7,16358
    1fb4:	39cb9084 	addi	r7,r7,11842
    1fb8:	01bfb834 	movhi	r6,65248
    1fbc:	90001d26 	beq	r18,zero,2034 <expm1+0x5a8>
    1fc0:	00022900 	call	2290 <__adddf3>
    1fc4:	04cd5e74 	movhi	r19,13689
    1fc8:	04af7ab4 	movhi	r18,48618
    1fcc:	053fffc4 	movi	r20,-1
    1fd0:	102d883a 	mov	r22,r2
    1fd4:	182b883a 	mov	r21,r3
    1fd8:	9ccf1d84 	addi	r19,r19,15478
    1fdc:	948e7bc4 	addi	r18,r18,14831
    1fe0:	003ef906 	br	1bc8 <__alt_mem_onchip_memory+0xf7801bc8>
    1fe4:	9809883a 	mov	r4,r19
    1fe8:	900b883a 	mov	r5,r18
    1fec:	880d883a 	mov	r6,r17
    1ff0:	800f883a 	mov	r7,r16
    1ff4:	0003d0c0 	call	3d0c <__subdf3>
    1ff8:	100d883a 	mov	r6,r2
    1ffc:	180f883a 	mov	r7,r3
    2000:	0009883a 	mov	r4,zero
    2004:	014ffc34 	movhi	r5,16368
    2008:	0003d0c0 	call	3d0c <__subdf3>
    200c:	a00a953a 	slli	r5,r20,20
    2010:	000d883a 	mov	r6,zero
    2014:	01cffc34 	movhi	r7,16368
    2018:	1009883a 	mov	r4,r2
    201c:	28cb883a 	add	r5,r5,r3
    2020:	0003d0c0 	call	3d0c <__subdf3>
    2024:	003fc506 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>
    2028:	0005883a 	mov	r2,zero
    202c:	00effc34 	movhi	r3,49136
    2030:	003fc206 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>
    2034:	0003d0c0 	call	3d0c <__subdf3>
    2038:	04cd5e74 	movhi	r19,13689
    203c:	048f7ab4 	movhi	r18,15850
    2040:	05000044 	movi	r20,1
    2044:	102d883a 	mov	r22,r2
    2048:	182b883a 	mov	r21,r3
    204c:	9ccf1d84 	addi	r19,r19,15478
    2050:	948e7bc4 	addi	r18,r18,14831
    2054:	003edc06 	br	1bc8 <__alt_mem_onchip_memory+0xf7801bc8>
    2058:	01a20034 	movhi	r6,34816
    205c:	01df8e34 	movhi	r7,32312
    2060:	319d6704 	addi	r6,r6,30108
    2064:	39f90f04 	addi	r7,r7,-7108
    2068:	00022900 	call	2290 <__adddf3>
    206c:	100d883a 	mov	r6,r2
    2070:	180f883a 	mov	r7,r3
    2074:	1009883a 	mov	r4,r2
    2078:	180b883a 	mov	r5,r3
    207c:	003fa906 	br	1f24 <__alt_mem_onchip_memory+0xf7801f24>
    2080:	000d883a 	mov	r6,zero
    2084:	01eff434 	movhi	r7,49104
    2088:	8809883a 	mov	r4,r17
    208c:	800b883a 	mov	r5,r16
    2090:	00035000 	call	3500 <__ledf2>
    2094:	1000460e 	bge	r2,zero,21b0 <expm1+0x724>
    2098:	8809883a 	mov	r4,r17
    209c:	800b883a 	mov	r5,r16
    20a0:	000d883a 	mov	r6,zero
    20a4:	01cff834 	movhi	r7,16352
    20a8:	00022900 	call	2290 <__adddf3>
    20ac:	9809883a 	mov	r4,r19
    20b0:	900b883a 	mov	r5,r18
    20b4:	100d883a 	mov	r6,r2
    20b8:	180f883a 	mov	r7,r3
    20bc:	0003d0c0 	call	3d0c <__subdf3>
    20c0:	000d883a 	mov	r6,zero
    20c4:	01f00034 	movhi	r7,49152
    20c8:	1009883a 	mov	r4,r2
    20cc:	180b883a 	mov	r5,r3
    20d0:	00035f40 	call	35f4 <__muldf3>
    20d4:	003f9906 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>
    20d8:	01994b34 	movhi	r6,25900
    20dc:	01cffdf4 	movhi	r7,16375
    20e0:	31a0bf84 	addi	r6,r6,-32002
    20e4:	39c551c4 	addi	r7,r7,5447
    20e8:	800b883a 	mov	r5,r16
    20ec:	8809883a 	mov	r4,r17
    20f0:	00035f40 	call	35f4 <__muldf3>
    20f4:	100d883a 	mov	r6,r2
    20f8:	180f883a 	mov	r7,r3
    20fc:	014ff834 	movhi	r5,16352
    2100:	003e9106 	br	1b48 <__alt_mem_onchip_memory+0xf7801b48>
    2104:	980d883a 	mov	r6,r19
    2108:	8809883a 	mov	r4,r17
    210c:	800b883a 	mov	r5,r16
    2110:	180f883a 	mov	r7,r3
    2114:	0003d0c0 	call	3d0c <__subdf3>
    2118:	000d883a 	mov	r6,zero
    211c:	01cff834 	movhi	r7,16352
    2120:	1009883a 	mov	r4,r2
    2124:	180b883a 	mov	r5,r3
    2128:	00035f40 	call	35f4 <__muldf3>
    212c:	000d883a 	mov	r6,zero
    2130:	01cff834 	movhi	r7,16352
    2134:	1009883a 	mov	r4,r2
    2138:	180b883a 	mov	r5,r3
    213c:	0003d0c0 	call	3d0c <__subdf3>
    2140:	003f7e06 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>
    2144:	00c00834 	movhi	r3,32
    2148:	1d07d83a 	sra	r3,r3,r20
    214c:	800f883a 	mov	r7,r16
    2150:	9809883a 	mov	r4,r19
    2154:	900b883a 	mov	r5,r18
    2158:	880d883a 	mov	r6,r17
    215c:	008ffc34 	movhi	r2,16368
    2160:	10e1c83a 	sub	r16,r2,r3
    2164:	0003d0c0 	call	3d0c <__subdf3>
    2168:	800b883a 	mov	r5,r16
    216c:	a020953a 	slli	r16,r20,20
    2170:	100d883a 	mov	r6,r2
    2174:	180f883a 	mov	r7,r3
    2178:	0009883a 	mov	r4,zero
    217c:	0003d0c0 	call	3d0c <__subdf3>
    2180:	80c7883a 	add	r3,r16,r3
    2184:	003f6d06 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>
    2188:	01994b34 	movhi	r6,25900
    218c:	01cffdf4 	movhi	r7,16375
    2190:	31a0bf84 	addi	r6,r6,-32002
    2194:	39c551c4 	addi	r7,r7,5447
    2198:	00035f40 	call	35f4 <__muldf3>
    219c:	100d883a 	mov	r6,r2
    21a0:	180f883a 	mov	r7,r3
    21a4:	903e671e 	bne	r18,zero,1b44 <__alt_mem_onchip_memory+0xf7801b44>
    21a8:	014ff834 	movhi	r5,16352
    21ac:	003e6606 	br	1b48 <__alt_mem_onchip_memory+0xf7801b48>
    21b0:	980d883a 	mov	r6,r19
    21b4:	900f883a 	mov	r7,r18
    21b8:	8809883a 	mov	r4,r17
    21bc:	800b883a 	mov	r5,r16
    21c0:	0003d0c0 	call	3d0c <__subdf3>
    21c4:	100d883a 	mov	r6,r2
    21c8:	180f883a 	mov	r7,r3
    21cc:	1009883a 	mov	r4,r2
    21d0:	180b883a 	mov	r5,r3
    21d4:	00022900 	call	2290 <__adddf3>
    21d8:	000d883a 	mov	r6,zero
    21dc:	01cffc34 	movhi	r7,16368
    21e0:	1009883a 	mov	r4,r2
    21e4:	180b883a 	mov	r5,r3
    21e8:	00022900 	call	2290 <__adddf3>
    21ec:	003f5306 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>
    21f0:	200d883a 	mov	r6,r4
    21f4:	280f883a 	mov	r7,r5
    21f8:	00022900 	call	2290 <__adddf3>
    21fc:	003f4f06 	br	1f3c <__alt_mem_onchip_memory+0xf7801f3c>

00002200 <fabs>:
    2200:	00e00034 	movhi	r3,32768
    2204:	18ffffc4 	addi	r3,r3,-1
    2208:	2005883a 	mov	r2,r4
    220c:	28c6703a 	and	r3,r5,r3
    2210:	f800283a 	ret

00002214 <__fpclassifyd>:
    2214:	00a00034 	movhi	r2,32768
    2218:	10bfffc4 	addi	r2,r2,-1
    221c:	2884703a 	and	r2,r5,r2
    2220:	10000726 	beq	r2,zero,2240 <__fpclassifyd+0x2c>
    2224:	00fffc34 	movhi	r3,65520
    2228:	019ff834 	movhi	r6,32736
    222c:	28c7883a 	add	r3,r5,r3
    2230:	31bfffc4 	addi	r6,r6,-1
    2234:	30c00536 	bltu	r6,r3,224c <__fpclassifyd+0x38>
    2238:	00800104 	movi	r2,4
    223c:	f800283a 	ret
    2240:	2000021e 	bne	r4,zero,224c <__fpclassifyd+0x38>
    2244:	00800084 	movi	r2,2
    2248:	f800283a 	ret
    224c:	00dffc34 	movhi	r3,32752
    2250:	019ff834 	movhi	r6,32736
    2254:	28cb883a 	add	r5,r5,r3
    2258:	31bfffc4 	addi	r6,r6,-1
    225c:	317ff62e 	bgeu	r6,r5,2238 <__alt_mem_onchip_memory+0xf7802238>
    2260:	01400434 	movhi	r5,16
    2264:	297fffc4 	addi	r5,r5,-1
    2268:	28800236 	bltu	r5,r2,2274 <__fpclassifyd+0x60>
    226c:	008000c4 	movi	r2,3
    2270:	f800283a 	ret
    2274:	10c00226 	beq	r2,r3,2280 <__fpclassifyd+0x6c>
    2278:	0005883a 	mov	r2,zero
    227c:	f800283a 	ret
    2280:	2005003a 	cmpeq	r2,r4,zero
    2284:	f800283a 	ret

00002288 <matherr>:
    2288:	0005883a 	mov	r2,zero
    228c:	f800283a 	ret

00002290 <__adddf3>:
    2290:	02c00434 	movhi	r11,16
    2294:	5affffc4 	addi	r11,r11,-1
    2298:	2806d7fa 	srli	r3,r5,31
    229c:	2ad4703a 	and	r10,r5,r11
    22a0:	3ad2703a 	and	r9,r7,r11
    22a4:	3804d53a 	srli	r2,r7,20
    22a8:	3018d77a 	srli	r12,r6,29
    22ac:	280ad53a 	srli	r5,r5,20
    22b0:	501490fa 	slli	r10,r10,3
    22b4:	2010d77a 	srli	r8,r4,29
    22b8:	481290fa 	slli	r9,r9,3
    22bc:	380ed7fa 	srli	r7,r7,31
    22c0:	defffb04 	addi	sp,sp,-20
    22c4:	dc800215 	stw	r18,8(sp)
    22c8:	dc400115 	stw	r17,4(sp)
    22cc:	dc000015 	stw	r16,0(sp)
    22d0:	dfc00415 	stw	ra,16(sp)
    22d4:	dcc00315 	stw	r19,12(sp)
    22d8:	1c803fcc 	andi	r18,r3,255
    22dc:	2c01ffcc 	andi	r16,r5,2047
    22e0:	5210b03a 	or	r8,r10,r8
    22e4:	202290fa 	slli	r17,r4,3
    22e8:	1081ffcc 	andi	r2,r2,2047
    22ec:	4b12b03a 	or	r9,r9,r12
    22f0:	300c90fa 	slli	r6,r6,3
    22f4:	91c07526 	beq	r18,r7,24cc <__adddf3+0x23c>
    22f8:	8087c83a 	sub	r3,r16,r2
    22fc:	00c0ab0e 	bge	zero,r3,25ac <__adddf3+0x31c>
    2300:	10002a1e 	bne	r2,zero,23ac <__adddf3+0x11c>
    2304:	4984b03a 	or	r2,r9,r6
    2308:	1000961e 	bne	r2,zero,2564 <__adddf3+0x2d4>
    230c:	888001cc 	andi	r2,r17,7
    2310:	10000726 	beq	r2,zero,2330 <__adddf3+0xa0>
    2314:	888003cc 	andi	r2,r17,15
    2318:	00c00104 	movi	r3,4
    231c:	10c00426 	beq	r2,r3,2330 <__adddf3+0xa0>
    2320:	88c7883a 	add	r3,r17,r3
    2324:	1c63803a 	cmpltu	r17,r3,r17
    2328:	4451883a 	add	r8,r8,r17
    232c:	1823883a 	mov	r17,r3
    2330:	4080202c 	andhi	r2,r8,128
    2334:	10005926 	beq	r2,zero,249c <__adddf3+0x20c>
    2338:	84000044 	addi	r16,r16,1
    233c:	0081ffc4 	movi	r2,2047
    2340:	8080ba26 	beq	r16,r2,262c <__adddf3+0x39c>
    2344:	00bfe034 	movhi	r2,65408
    2348:	10bfffc4 	addi	r2,r2,-1
    234c:	4090703a 	and	r8,r8,r2
    2350:	4004977a 	slli	r2,r8,29
    2354:	4010927a 	slli	r8,r8,9
    2358:	8822d0fa 	srli	r17,r17,3
    235c:	8401ffcc 	andi	r16,r16,2047
    2360:	4010d33a 	srli	r8,r8,12
    2364:	9007883a 	mov	r3,r18
    2368:	1444b03a 	or	r2,r2,r17
    236c:	8401ffcc 	andi	r16,r16,2047
    2370:	8020953a 	slli	r16,r16,20
    2374:	18c03fcc 	andi	r3,r3,255
    2378:	01000434 	movhi	r4,16
    237c:	213fffc4 	addi	r4,r4,-1
    2380:	180697fa 	slli	r3,r3,31
    2384:	4110703a 	and	r8,r8,r4
    2388:	4410b03a 	or	r8,r8,r16
    238c:	40c6b03a 	or	r3,r8,r3
    2390:	dfc00417 	ldw	ra,16(sp)
    2394:	dcc00317 	ldw	r19,12(sp)
    2398:	dc800217 	ldw	r18,8(sp)
    239c:	dc400117 	ldw	r17,4(sp)
    23a0:	dc000017 	ldw	r16,0(sp)
    23a4:	dec00504 	addi	sp,sp,20
    23a8:	f800283a 	ret
    23ac:	0081ffc4 	movi	r2,2047
    23b0:	80bfd626 	beq	r16,r2,230c <__alt_mem_onchip_memory+0xf780230c>
    23b4:	4a402034 	orhi	r9,r9,128
    23b8:	00800e04 	movi	r2,56
    23bc:	10c09f16 	blt	r2,r3,263c <__adddf3+0x3ac>
    23c0:	008007c4 	movi	r2,31
    23c4:	10c0c216 	blt	r2,r3,26d0 <__adddf3+0x440>
    23c8:	00800804 	movi	r2,32
    23cc:	10c5c83a 	sub	r2,r2,r3
    23d0:	488a983a 	sll	r5,r9,r2
    23d4:	30c8d83a 	srl	r4,r6,r3
    23d8:	3084983a 	sll	r2,r6,r2
    23dc:	48c6d83a 	srl	r3,r9,r3
    23e0:	290cb03a 	or	r6,r5,r4
    23e4:	1004c03a 	cmpne	r2,r2,zero
    23e8:	308cb03a 	or	r6,r6,r2
    23ec:	898dc83a 	sub	r6,r17,r6
    23f0:	89a3803a 	cmpltu	r17,r17,r6
    23f4:	40d1c83a 	sub	r8,r8,r3
    23f8:	4451c83a 	sub	r8,r8,r17
    23fc:	3023883a 	mov	r17,r6
    2400:	4080202c 	andhi	r2,r8,128
    2404:	10002326 	beq	r2,zero,2494 <__adddf3+0x204>
    2408:	04c02034 	movhi	r19,128
    240c:	9cffffc4 	addi	r19,r19,-1
    2410:	44e6703a 	and	r19,r8,r19
    2414:	98007626 	beq	r19,zero,25f0 <__adddf3+0x360>
    2418:	9809883a 	mov	r4,r19
    241c:	0004a1c0 	call	4a1c <__clzsi2>
    2420:	10fffe04 	addi	r3,r2,-8
    2424:	010007c4 	movi	r4,31
    2428:	20c07716 	blt	r4,r3,2608 <__adddf3+0x378>
    242c:	00800804 	movi	r2,32
    2430:	10c5c83a 	sub	r2,r2,r3
    2434:	8884d83a 	srl	r2,r17,r2
    2438:	98d0983a 	sll	r8,r19,r3
    243c:	88e2983a 	sll	r17,r17,r3
    2440:	1204b03a 	or	r2,r2,r8
    2444:	1c007416 	blt	r3,r16,2618 <__adddf3+0x388>
    2448:	1c21c83a 	sub	r16,r3,r16
    244c:	82000044 	addi	r8,r16,1
    2450:	00c007c4 	movi	r3,31
    2454:	1a009116 	blt	r3,r8,269c <__adddf3+0x40c>
    2458:	00c00804 	movi	r3,32
    245c:	1a07c83a 	sub	r3,r3,r8
    2460:	8a08d83a 	srl	r4,r17,r8
    2464:	88e2983a 	sll	r17,r17,r3
    2468:	10c6983a 	sll	r3,r2,r3
    246c:	1210d83a 	srl	r8,r2,r8
    2470:	8804c03a 	cmpne	r2,r17,zero
    2474:	1906b03a 	or	r3,r3,r4
    2478:	18a2b03a 	or	r17,r3,r2
    247c:	0021883a 	mov	r16,zero
    2480:	003fa206 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2484:	1890b03a 	or	r8,r3,r2
    2488:	40017d26 	beq	r8,zero,2a80 <__adddf3+0x7f0>
    248c:	1011883a 	mov	r8,r2
    2490:	1823883a 	mov	r17,r3
    2494:	888001cc 	andi	r2,r17,7
    2498:	103f9e1e 	bne	r2,zero,2314 <__alt_mem_onchip_memory+0xf7802314>
    249c:	4004977a 	slli	r2,r8,29
    24a0:	8822d0fa 	srli	r17,r17,3
    24a4:	4010d0fa 	srli	r8,r8,3
    24a8:	9007883a 	mov	r3,r18
    24ac:	1444b03a 	or	r2,r2,r17
    24b0:	0101ffc4 	movi	r4,2047
    24b4:	81002426 	beq	r16,r4,2548 <__adddf3+0x2b8>
    24b8:	8120703a 	and	r16,r16,r4
    24bc:	01000434 	movhi	r4,16
    24c0:	213fffc4 	addi	r4,r4,-1
    24c4:	4110703a 	and	r8,r8,r4
    24c8:	003fa806 	br	236c <__alt_mem_onchip_memory+0xf780236c>
    24cc:	8089c83a 	sub	r4,r16,r2
    24d0:	01005e0e 	bge	zero,r4,264c <__adddf3+0x3bc>
    24d4:	10002b26 	beq	r2,zero,2584 <__adddf3+0x2f4>
    24d8:	0081ffc4 	movi	r2,2047
    24dc:	80bf8b26 	beq	r16,r2,230c <__alt_mem_onchip_memory+0xf780230c>
    24e0:	4a402034 	orhi	r9,r9,128
    24e4:	00800e04 	movi	r2,56
    24e8:	1100a40e 	bge	r2,r4,277c <__adddf3+0x4ec>
    24ec:	498cb03a 	or	r6,r9,r6
    24f0:	300ac03a 	cmpne	r5,r6,zero
    24f4:	0013883a 	mov	r9,zero
    24f8:	2c4b883a 	add	r5,r5,r17
    24fc:	2c63803a 	cmpltu	r17,r5,r17
    2500:	4a11883a 	add	r8,r9,r8
    2504:	8a11883a 	add	r8,r17,r8
    2508:	2823883a 	mov	r17,r5
    250c:	4080202c 	andhi	r2,r8,128
    2510:	103fe026 	beq	r2,zero,2494 <__alt_mem_onchip_memory+0xf7802494>
    2514:	84000044 	addi	r16,r16,1
    2518:	0081ffc4 	movi	r2,2047
    251c:	8080d226 	beq	r16,r2,2868 <__adddf3+0x5d8>
    2520:	00bfe034 	movhi	r2,65408
    2524:	10bfffc4 	addi	r2,r2,-1
    2528:	4090703a 	and	r8,r8,r2
    252c:	880ad07a 	srli	r5,r17,1
    2530:	400897fa 	slli	r4,r8,31
    2534:	88c0004c 	andi	r3,r17,1
    2538:	28e2b03a 	or	r17,r5,r3
    253c:	4010d07a 	srli	r8,r8,1
    2540:	2462b03a 	or	r17,r4,r17
    2544:	003f7106 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2548:	4088b03a 	or	r4,r8,r2
    254c:	20014526 	beq	r4,zero,2a64 <__adddf3+0x7d4>
    2550:	01000434 	movhi	r4,16
    2554:	42000234 	orhi	r8,r8,8
    2558:	213fffc4 	addi	r4,r4,-1
    255c:	4110703a 	and	r8,r8,r4
    2560:	003f8206 	br	236c <__alt_mem_onchip_memory+0xf780236c>
    2564:	18ffffc4 	addi	r3,r3,-1
    2568:	1800491e 	bne	r3,zero,2690 <__adddf3+0x400>
    256c:	898bc83a 	sub	r5,r17,r6
    2570:	8963803a 	cmpltu	r17,r17,r5
    2574:	4251c83a 	sub	r8,r8,r9
    2578:	4451c83a 	sub	r8,r8,r17
    257c:	2823883a 	mov	r17,r5
    2580:	003f9f06 	br	2400 <__alt_mem_onchip_memory+0xf7802400>
    2584:	4984b03a 	or	r2,r9,r6
    2588:	103f6026 	beq	r2,zero,230c <__alt_mem_onchip_memory+0xf780230c>
    258c:	213fffc4 	addi	r4,r4,-1
    2590:	2000931e 	bne	r4,zero,27e0 <__adddf3+0x550>
    2594:	898d883a 	add	r6,r17,r6
    2598:	3463803a 	cmpltu	r17,r6,r17
    259c:	4251883a 	add	r8,r8,r9
    25a0:	8a11883a 	add	r8,r17,r8
    25a4:	3023883a 	mov	r17,r6
    25a8:	003fd806 	br	250c <__alt_mem_onchip_memory+0xf780250c>
    25ac:	1800541e 	bne	r3,zero,2700 <__adddf3+0x470>
    25b0:	80800044 	addi	r2,r16,1
    25b4:	1081ffcc 	andi	r2,r2,2047
    25b8:	00c00044 	movi	r3,1
    25bc:	1880a00e 	bge	r3,r2,2840 <__adddf3+0x5b0>
    25c0:	8989c83a 	sub	r4,r17,r6
    25c4:	8905803a 	cmpltu	r2,r17,r4
    25c8:	4267c83a 	sub	r19,r8,r9
    25cc:	98a7c83a 	sub	r19,r19,r2
    25d0:	9880202c 	andhi	r2,r19,128
    25d4:	10006326 	beq	r2,zero,2764 <__adddf3+0x4d4>
    25d8:	3463c83a 	sub	r17,r6,r17
    25dc:	4a07c83a 	sub	r3,r9,r8
    25e0:	344d803a 	cmpltu	r6,r6,r17
    25e4:	19a7c83a 	sub	r19,r3,r6
    25e8:	3825883a 	mov	r18,r7
    25ec:	983f8a1e 	bne	r19,zero,2418 <__alt_mem_onchip_memory+0xf7802418>
    25f0:	8809883a 	mov	r4,r17
    25f4:	0004a1c0 	call	4a1c <__clzsi2>
    25f8:	10800804 	addi	r2,r2,32
    25fc:	10fffe04 	addi	r3,r2,-8
    2600:	010007c4 	movi	r4,31
    2604:	20ff890e 	bge	r4,r3,242c <__alt_mem_onchip_memory+0xf780242c>
    2608:	10bff604 	addi	r2,r2,-40
    260c:	8884983a 	sll	r2,r17,r2
    2610:	0023883a 	mov	r17,zero
    2614:	1c3f8c0e 	bge	r3,r16,2448 <__alt_mem_onchip_memory+0xf7802448>
    2618:	023fe034 	movhi	r8,65408
    261c:	423fffc4 	addi	r8,r8,-1
    2620:	80e1c83a 	sub	r16,r16,r3
    2624:	1210703a 	and	r8,r2,r8
    2628:	003f3806 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    262c:	9007883a 	mov	r3,r18
    2630:	0011883a 	mov	r8,zero
    2634:	0005883a 	mov	r2,zero
    2638:	003f4c06 	br	236c <__alt_mem_onchip_memory+0xf780236c>
    263c:	498cb03a 	or	r6,r9,r6
    2640:	300cc03a 	cmpne	r6,r6,zero
    2644:	0007883a 	mov	r3,zero
    2648:	003f6806 	br	23ec <__alt_mem_onchip_memory+0xf78023ec>
    264c:	20009c1e 	bne	r4,zero,28c0 <__adddf3+0x630>
    2650:	80800044 	addi	r2,r16,1
    2654:	1141ffcc 	andi	r5,r2,2047
    2658:	01000044 	movi	r4,1
    265c:	2140670e 	bge	r4,r5,27fc <__adddf3+0x56c>
    2660:	0101ffc4 	movi	r4,2047
    2664:	11007f26 	beq	r2,r4,2864 <__adddf3+0x5d4>
    2668:	898d883a 	add	r6,r17,r6
    266c:	4247883a 	add	r3,r8,r9
    2670:	3451803a 	cmpltu	r8,r6,r17
    2674:	40d1883a 	add	r8,r8,r3
    2678:	402297fa 	slli	r17,r8,31
    267c:	300cd07a 	srli	r6,r6,1
    2680:	4010d07a 	srli	r8,r8,1
    2684:	1021883a 	mov	r16,r2
    2688:	89a2b03a 	or	r17,r17,r6
    268c:	003f1f06 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2690:	0081ffc4 	movi	r2,2047
    2694:	80bf481e 	bne	r16,r2,23b8 <__alt_mem_onchip_memory+0xf78023b8>
    2698:	003f1c06 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    269c:	843ff844 	addi	r16,r16,-31
    26a0:	01000804 	movi	r4,32
    26a4:	1406d83a 	srl	r3,r2,r16
    26a8:	41005026 	beq	r8,r4,27ec <__adddf3+0x55c>
    26ac:	01001004 	movi	r4,64
    26b0:	2211c83a 	sub	r8,r4,r8
    26b4:	1204983a 	sll	r2,r2,r8
    26b8:	88a2b03a 	or	r17,r17,r2
    26bc:	8822c03a 	cmpne	r17,r17,zero
    26c0:	1c62b03a 	or	r17,r3,r17
    26c4:	0011883a 	mov	r8,zero
    26c8:	0021883a 	mov	r16,zero
    26cc:	003f7106 	br	2494 <__alt_mem_onchip_memory+0xf7802494>
    26d0:	193ff804 	addi	r4,r3,-32
    26d4:	00800804 	movi	r2,32
    26d8:	4908d83a 	srl	r4,r9,r4
    26dc:	18804526 	beq	r3,r2,27f4 <__adddf3+0x564>
    26e0:	00801004 	movi	r2,64
    26e4:	10c5c83a 	sub	r2,r2,r3
    26e8:	4886983a 	sll	r3,r9,r2
    26ec:	198cb03a 	or	r6,r3,r6
    26f0:	300cc03a 	cmpne	r6,r6,zero
    26f4:	218cb03a 	or	r6,r4,r6
    26f8:	0007883a 	mov	r3,zero
    26fc:	003f3b06 	br	23ec <__alt_mem_onchip_memory+0xf78023ec>
    2700:	80002a26 	beq	r16,zero,27ac <__adddf3+0x51c>
    2704:	0101ffc4 	movi	r4,2047
    2708:	11006826 	beq	r2,r4,28ac <__adddf3+0x61c>
    270c:	00c7c83a 	sub	r3,zero,r3
    2710:	42002034 	orhi	r8,r8,128
    2714:	01000e04 	movi	r4,56
    2718:	20c07c16 	blt	r4,r3,290c <__adddf3+0x67c>
    271c:	010007c4 	movi	r4,31
    2720:	20c0da16 	blt	r4,r3,2a8c <__adddf3+0x7fc>
    2724:	01000804 	movi	r4,32
    2728:	20c9c83a 	sub	r4,r4,r3
    272c:	4114983a 	sll	r10,r8,r4
    2730:	88cad83a 	srl	r5,r17,r3
    2734:	8908983a 	sll	r4,r17,r4
    2738:	40c6d83a 	srl	r3,r8,r3
    273c:	5162b03a 	or	r17,r10,r5
    2740:	2008c03a 	cmpne	r4,r4,zero
    2744:	8922b03a 	or	r17,r17,r4
    2748:	3463c83a 	sub	r17,r6,r17
    274c:	48c7c83a 	sub	r3,r9,r3
    2750:	344d803a 	cmpltu	r6,r6,r17
    2754:	1991c83a 	sub	r8,r3,r6
    2758:	1021883a 	mov	r16,r2
    275c:	3825883a 	mov	r18,r7
    2760:	003f2706 	br	2400 <__alt_mem_onchip_memory+0xf7802400>
    2764:	24d0b03a 	or	r8,r4,r19
    2768:	40001b1e 	bne	r8,zero,27d8 <__adddf3+0x548>
    276c:	0005883a 	mov	r2,zero
    2770:	0007883a 	mov	r3,zero
    2774:	0021883a 	mov	r16,zero
    2778:	003f4d06 	br	24b0 <__alt_mem_onchip_memory+0xf78024b0>
    277c:	008007c4 	movi	r2,31
    2780:	11003c16 	blt	r2,r4,2874 <__adddf3+0x5e4>
    2784:	00800804 	movi	r2,32
    2788:	1105c83a 	sub	r2,r2,r4
    278c:	488e983a 	sll	r7,r9,r2
    2790:	310ad83a 	srl	r5,r6,r4
    2794:	3084983a 	sll	r2,r6,r2
    2798:	4912d83a 	srl	r9,r9,r4
    279c:	394ab03a 	or	r5,r7,r5
    27a0:	1004c03a 	cmpne	r2,r2,zero
    27a4:	288ab03a 	or	r5,r5,r2
    27a8:	003f5306 	br	24f8 <__alt_mem_onchip_memory+0xf78024f8>
    27ac:	4448b03a 	or	r4,r8,r17
    27b0:	20003e26 	beq	r4,zero,28ac <__adddf3+0x61c>
    27b4:	00c6303a 	nor	r3,zero,r3
    27b8:	18003a1e 	bne	r3,zero,28a4 <__adddf3+0x614>
    27bc:	3463c83a 	sub	r17,r6,r17
    27c0:	4a07c83a 	sub	r3,r9,r8
    27c4:	344d803a 	cmpltu	r6,r6,r17
    27c8:	1991c83a 	sub	r8,r3,r6
    27cc:	1021883a 	mov	r16,r2
    27d0:	3825883a 	mov	r18,r7
    27d4:	003f0a06 	br	2400 <__alt_mem_onchip_memory+0xf7802400>
    27d8:	2023883a 	mov	r17,r4
    27dc:	003f0d06 	br	2414 <__alt_mem_onchip_memory+0xf7802414>
    27e0:	0081ffc4 	movi	r2,2047
    27e4:	80bf3f1e 	bne	r16,r2,24e4 <__alt_mem_onchip_memory+0xf78024e4>
    27e8:	003ec806 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    27ec:	0005883a 	mov	r2,zero
    27f0:	003fb106 	br	26b8 <__alt_mem_onchip_memory+0xf78026b8>
    27f4:	0007883a 	mov	r3,zero
    27f8:	003fbc06 	br	26ec <__alt_mem_onchip_memory+0xf78026ec>
    27fc:	4444b03a 	or	r2,r8,r17
    2800:	8000871e 	bne	r16,zero,2a20 <__adddf3+0x790>
    2804:	1000ba26 	beq	r2,zero,2af0 <__adddf3+0x860>
    2808:	4984b03a 	or	r2,r9,r6
    280c:	103ebf26 	beq	r2,zero,230c <__alt_mem_onchip_memory+0xf780230c>
    2810:	8985883a 	add	r2,r17,r6
    2814:	4247883a 	add	r3,r8,r9
    2818:	1451803a 	cmpltu	r8,r2,r17
    281c:	40d1883a 	add	r8,r8,r3
    2820:	40c0202c 	andhi	r3,r8,128
    2824:	1023883a 	mov	r17,r2
    2828:	183f1a26 	beq	r3,zero,2494 <__alt_mem_onchip_memory+0xf7802494>
    282c:	00bfe034 	movhi	r2,65408
    2830:	10bfffc4 	addi	r2,r2,-1
    2834:	2021883a 	mov	r16,r4
    2838:	4090703a 	and	r8,r8,r2
    283c:	003eb306 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2840:	4444b03a 	or	r2,r8,r17
    2844:	8000291e 	bne	r16,zero,28ec <__adddf3+0x65c>
    2848:	10004b1e 	bne	r2,zero,2978 <__adddf3+0x6e8>
    284c:	4990b03a 	or	r8,r9,r6
    2850:	40008b26 	beq	r8,zero,2a80 <__adddf3+0x7f0>
    2854:	4811883a 	mov	r8,r9
    2858:	3023883a 	mov	r17,r6
    285c:	3825883a 	mov	r18,r7
    2860:	003eaa06 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2864:	1021883a 	mov	r16,r2
    2868:	0011883a 	mov	r8,zero
    286c:	0005883a 	mov	r2,zero
    2870:	003f0f06 	br	24b0 <__alt_mem_onchip_memory+0xf78024b0>
    2874:	217ff804 	addi	r5,r4,-32
    2878:	00800804 	movi	r2,32
    287c:	494ad83a 	srl	r5,r9,r5
    2880:	20807d26 	beq	r4,r2,2a78 <__adddf3+0x7e8>
    2884:	00801004 	movi	r2,64
    2888:	1109c83a 	sub	r4,r2,r4
    288c:	4912983a 	sll	r9,r9,r4
    2890:	498cb03a 	or	r6,r9,r6
    2894:	300cc03a 	cmpne	r6,r6,zero
    2898:	298ab03a 	or	r5,r5,r6
    289c:	0013883a 	mov	r9,zero
    28a0:	003f1506 	br	24f8 <__alt_mem_onchip_memory+0xf78024f8>
    28a4:	0101ffc4 	movi	r4,2047
    28a8:	113f9a1e 	bne	r2,r4,2714 <__alt_mem_onchip_memory+0xf7802714>
    28ac:	4811883a 	mov	r8,r9
    28b0:	3023883a 	mov	r17,r6
    28b4:	1021883a 	mov	r16,r2
    28b8:	3825883a 	mov	r18,r7
    28bc:	003e9306 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    28c0:	8000161e 	bne	r16,zero,291c <__adddf3+0x68c>
    28c4:	444ab03a 	or	r5,r8,r17
    28c8:	28005126 	beq	r5,zero,2a10 <__adddf3+0x780>
    28cc:	0108303a 	nor	r4,zero,r4
    28d0:	20004d1e 	bne	r4,zero,2a08 <__adddf3+0x778>
    28d4:	89a3883a 	add	r17,r17,r6
    28d8:	4253883a 	add	r9,r8,r9
    28dc:	898d803a 	cmpltu	r6,r17,r6
    28e0:	3251883a 	add	r8,r6,r9
    28e4:	1021883a 	mov	r16,r2
    28e8:	003f0806 	br	250c <__alt_mem_onchip_memory+0xf780250c>
    28ec:	1000301e 	bne	r2,zero,29b0 <__adddf3+0x720>
    28f0:	4984b03a 	or	r2,r9,r6
    28f4:	10007126 	beq	r2,zero,2abc <__adddf3+0x82c>
    28f8:	4811883a 	mov	r8,r9
    28fc:	3023883a 	mov	r17,r6
    2900:	3825883a 	mov	r18,r7
    2904:	0401ffc4 	movi	r16,2047
    2908:	003e8006 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    290c:	4462b03a 	or	r17,r8,r17
    2910:	8822c03a 	cmpne	r17,r17,zero
    2914:	0007883a 	mov	r3,zero
    2918:	003f8b06 	br	2748 <__alt_mem_onchip_memory+0xf7802748>
    291c:	0141ffc4 	movi	r5,2047
    2920:	11403b26 	beq	r2,r5,2a10 <__adddf3+0x780>
    2924:	0109c83a 	sub	r4,zero,r4
    2928:	42002034 	orhi	r8,r8,128
    292c:	01400e04 	movi	r5,56
    2930:	29006716 	blt	r5,r4,2ad0 <__adddf3+0x840>
    2934:	014007c4 	movi	r5,31
    2938:	29007016 	blt	r5,r4,2afc <__adddf3+0x86c>
    293c:	01400804 	movi	r5,32
    2940:	290bc83a 	sub	r5,r5,r4
    2944:	4154983a 	sll	r10,r8,r5
    2948:	890ed83a 	srl	r7,r17,r4
    294c:	894a983a 	sll	r5,r17,r5
    2950:	4108d83a 	srl	r4,r8,r4
    2954:	51e2b03a 	or	r17,r10,r7
    2958:	280ac03a 	cmpne	r5,r5,zero
    295c:	8962b03a 	or	r17,r17,r5
    2960:	89a3883a 	add	r17,r17,r6
    2964:	2253883a 	add	r9,r4,r9
    2968:	898d803a 	cmpltu	r6,r17,r6
    296c:	3251883a 	add	r8,r6,r9
    2970:	1021883a 	mov	r16,r2
    2974:	003ee506 	br	250c <__alt_mem_onchip_memory+0xf780250c>
    2978:	4984b03a 	or	r2,r9,r6
    297c:	103e6326 	beq	r2,zero,230c <__alt_mem_onchip_memory+0xf780230c>
    2980:	8987c83a 	sub	r3,r17,r6
    2984:	88c9803a 	cmpltu	r4,r17,r3
    2988:	4245c83a 	sub	r2,r8,r9
    298c:	1105c83a 	sub	r2,r2,r4
    2990:	1100202c 	andhi	r4,r2,128
    2994:	203ebb26 	beq	r4,zero,2484 <__alt_mem_onchip_memory+0xf7802484>
    2998:	3463c83a 	sub	r17,r6,r17
    299c:	4a07c83a 	sub	r3,r9,r8
    29a0:	344d803a 	cmpltu	r6,r6,r17
    29a4:	1991c83a 	sub	r8,r3,r6
    29a8:	3825883a 	mov	r18,r7
    29ac:	003e5706 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    29b0:	4984b03a 	or	r2,r9,r6
    29b4:	10002e26 	beq	r2,zero,2a70 <__adddf3+0x7e0>
    29b8:	4004d0fa 	srli	r2,r8,3
    29bc:	8822d0fa 	srli	r17,r17,3
    29c0:	4010977a 	slli	r8,r8,29
    29c4:	10c0022c 	andhi	r3,r2,8
    29c8:	4462b03a 	or	r17,r8,r17
    29cc:	18000826 	beq	r3,zero,29f0 <__adddf3+0x760>
    29d0:	4808d0fa 	srli	r4,r9,3
    29d4:	20c0022c 	andhi	r3,r4,8
    29d8:	1800051e 	bne	r3,zero,29f0 <__adddf3+0x760>
    29dc:	300cd0fa 	srli	r6,r6,3
    29e0:	4806977a 	slli	r3,r9,29
    29e4:	2005883a 	mov	r2,r4
    29e8:	3825883a 	mov	r18,r7
    29ec:	19a2b03a 	or	r17,r3,r6
    29f0:	8810d77a 	srli	r8,r17,29
    29f4:	100490fa 	slli	r2,r2,3
    29f8:	882290fa 	slli	r17,r17,3
    29fc:	0401ffc4 	movi	r16,2047
    2a00:	4090b03a 	or	r8,r8,r2
    2a04:	003e4106 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2a08:	0141ffc4 	movi	r5,2047
    2a0c:	117fc71e 	bne	r2,r5,292c <__alt_mem_onchip_memory+0xf780292c>
    2a10:	4811883a 	mov	r8,r9
    2a14:	3023883a 	mov	r17,r6
    2a18:	1021883a 	mov	r16,r2
    2a1c:	003e3b06 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2a20:	10002f26 	beq	r2,zero,2ae0 <__adddf3+0x850>
    2a24:	4984b03a 	or	r2,r9,r6
    2a28:	10001126 	beq	r2,zero,2a70 <__adddf3+0x7e0>
    2a2c:	4004d0fa 	srli	r2,r8,3
    2a30:	8822d0fa 	srli	r17,r17,3
    2a34:	4010977a 	slli	r8,r8,29
    2a38:	10c0022c 	andhi	r3,r2,8
    2a3c:	4462b03a 	or	r17,r8,r17
    2a40:	183feb26 	beq	r3,zero,29f0 <__alt_mem_onchip_memory+0xf78029f0>
    2a44:	4808d0fa 	srli	r4,r9,3
    2a48:	20c0022c 	andhi	r3,r4,8
    2a4c:	183fe81e 	bne	r3,zero,29f0 <__alt_mem_onchip_memory+0xf78029f0>
    2a50:	300cd0fa 	srli	r6,r6,3
    2a54:	4806977a 	slli	r3,r9,29
    2a58:	2005883a 	mov	r2,r4
    2a5c:	19a2b03a 	or	r17,r3,r6
    2a60:	003fe306 	br	29f0 <__alt_mem_onchip_memory+0xf78029f0>
    2a64:	0011883a 	mov	r8,zero
    2a68:	0005883a 	mov	r2,zero
    2a6c:	003e3f06 	br	236c <__alt_mem_onchip_memory+0xf780236c>
    2a70:	0401ffc4 	movi	r16,2047
    2a74:	003e2506 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2a78:	0013883a 	mov	r9,zero
    2a7c:	003f8406 	br	2890 <__alt_mem_onchip_memory+0xf7802890>
    2a80:	0005883a 	mov	r2,zero
    2a84:	0007883a 	mov	r3,zero
    2a88:	003e8906 	br	24b0 <__alt_mem_onchip_memory+0xf78024b0>
    2a8c:	197ff804 	addi	r5,r3,-32
    2a90:	01000804 	movi	r4,32
    2a94:	414ad83a 	srl	r5,r8,r5
    2a98:	19002426 	beq	r3,r4,2b2c <__adddf3+0x89c>
    2a9c:	01001004 	movi	r4,64
    2aa0:	20c7c83a 	sub	r3,r4,r3
    2aa4:	40c6983a 	sll	r3,r8,r3
    2aa8:	1c46b03a 	or	r3,r3,r17
    2aac:	1806c03a 	cmpne	r3,r3,zero
    2ab0:	28e2b03a 	or	r17,r5,r3
    2ab4:	0007883a 	mov	r3,zero
    2ab8:	003f2306 	br	2748 <__alt_mem_onchip_memory+0xf7802748>
    2abc:	0007883a 	mov	r3,zero
    2ac0:	5811883a 	mov	r8,r11
    2ac4:	00bfffc4 	movi	r2,-1
    2ac8:	0401ffc4 	movi	r16,2047
    2acc:	003e7806 	br	24b0 <__alt_mem_onchip_memory+0xf78024b0>
    2ad0:	4462b03a 	or	r17,r8,r17
    2ad4:	8822c03a 	cmpne	r17,r17,zero
    2ad8:	0009883a 	mov	r4,zero
    2adc:	003fa006 	br	2960 <__alt_mem_onchip_memory+0xf7802960>
    2ae0:	4811883a 	mov	r8,r9
    2ae4:	3023883a 	mov	r17,r6
    2ae8:	0401ffc4 	movi	r16,2047
    2aec:	003e0706 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2af0:	4811883a 	mov	r8,r9
    2af4:	3023883a 	mov	r17,r6
    2af8:	003e0406 	br	230c <__alt_mem_onchip_memory+0xf780230c>
    2afc:	21fff804 	addi	r7,r4,-32
    2b00:	01400804 	movi	r5,32
    2b04:	41ced83a 	srl	r7,r8,r7
    2b08:	21400a26 	beq	r4,r5,2b34 <__adddf3+0x8a4>
    2b0c:	01401004 	movi	r5,64
    2b10:	2909c83a 	sub	r4,r5,r4
    2b14:	4108983a 	sll	r4,r8,r4
    2b18:	2448b03a 	or	r4,r4,r17
    2b1c:	2008c03a 	cmpne	r4,r4,zero
    2b20:	3922b03a 	or	r17,r7,r4
    2b24:	0009883a 	mov	r4,zero
    2b28:	003f8d06 	br	2960 <__alt_mem_onchip_memory+0xf7802960>
    2b2c:	0007883a 	mov	r3,zero
    2b30:	003fdd06 	br	2aa8 <__alt_mem_onchip_memory+0xf7802aa8>
    2b34:	0009883a 	mov	r4,zero
    2b38:	003ff706 	br	2b18 <__alt_mem_onchip_memory+0xf7802b18>

00002b3c <__divdf3>:
    2b3c:	defff204 	addi	sp,sp,-56
    2b40:	dd400915 	stw	r21,36(sp)
    2b44:	282ad53a 	srli	r21,r5,20
    2b48:	dd000815 	stw	r20,32(sp)
    2b4c:	2828d7fa 	srli	r20,r5,31
    2b50:	dc000415 	stw	r16,16(sp)
    2b54:	04000434 	movhi	r16,16
    2b58:	df000c15 	stw	fp,48(sp)
    2b5c:	843fffc4 	addi	r16,r16,-1
    2b60:	dfc00d15 	stw	ra,52(sp)
    2b64:	ddc00b15 	stw	r23,44(sp)
    2b68:	dd800a15 	stw	r22,40(sp)
    2b6c:	dcc00715 	stw	r19,28(sp)
    2b70:	dc800615 	stw	r18,24(sp)
    2b74:	dc400515 	stw	r17,20(sp)
    2b78:	ad41ffcc 	andi	r21,r21,2047
    2b7c:	2c20703a 	and	r16,r5,r16
    2b80:	a7003fcc 	andi	fp,r20,255
    2b84:	a8006126 	beq	r21,zero,2d0c <__divdf3+0x1d0>
    2b88:	0081ffc4 	movi	r2,2047
    2b8c:	2025883a 	mov	r18,r4
    2b90:	a8803726 	beq	r21,r2,2c70 <__divdf3+0x134>
    2b94:	80800434 	orhi	r2,r16,16
    2b98:	100490fa 	slli	r2,r2,3
    2b9c:	2020d77a 	srli	r16,r4,29
    2ba0:	202490fa 	slli	r18,r4,3
    2ba4:	ad7f0044 	addi	r21,r21,-1023
    2ba8:	80a0b03a 	or	r16,r16,r2
    2bac:	0027883a 	mov	r19,zero
    2bb0:	0013883a 	mov	r9,zero
    2bb4:	3804d53a 	srli	r2,r7,20
    2bb8:	382cd7fa 	srli	r22,r7,31
    2bbc:	04400434 	movhi	r17,16
    2bc0:	8c7fffc4 	addi	r17,r17,-1
    2bc4:	1081ffcc 	andi	r2,r2,2047
    2bc8:	3011883a 	mov	r8,r6
    2bcc:	3c62703a 	and	r17,r7,r17
    2bd0:	b5c03fcc 	andi	r23,r22,255
    2bd4:	10006c26 	beq	r2,zero,2d88 <__divdf3+0x24c>
    2bd8:	00c1ffc4 	movi	r3,2047
    2bdc:	10c06426 	beq	r2,r3,2d70 <__divdf3+0x234>
    2be0:	88c00434 	orhi	r3,r17,16
    2be4:	180690fa 	slli	r3,r3,3
    2be8:	3022d77a 	srli	r17,r6,29
    2bec:	301090fa 	slli	r8,r6,3
    2bf0:	10bf0044 	addi	r2,r2,-1023
    2bf4:	88e2b03a 	or	r17,r17,r3
    2bf8:	000f883a 	mov	r7,zero
    2bfc:	a58cf03a 	xor	r6,r20,r22
    2c00:	3cc8b03a 	or	r4,r7,r19
    2c04:	a8abc83a 	sub	r21,r21,r2
    2c08:	008003c4 	movi	r2,15
    2c0c:	3007883a 	mov	r3,r6
    2c10:	34c03fcc 	andi	r19,r6,255
    2c14:	11009036 	bltu	r2,r4,2e58 <__divdf3+0x31c>
    2c18:	200890ba 	slli	r4,r4,2
    2c1c:	00800034 	movhi	r2,0
    2c20:	108b0c04 	addi	r2,r2,11312
    2c24:	2089883a 	add	r4,r4,r2
    2c28:	20800017 	ldw	r2,0(r4)
    2c2c:	1000683a 	jmp	r2
    2c30:	00002e58 	cmpnei	zero,zero,185
    2c34:	00002ca8 	cmpgeui	zero,zero,178
    2c38:	00002e48 	cmpgei	zero,zero,185
    2c3c:	00002c9c 	xori	zero,zero,178
    2c40:	00002e48 	cmpgei	zero,zero,185
    2c44:	00002e1c 	xori	zero,zero,184
    2c48:	00002e48 	cmpgei	zero,zero,185
    2c4c:	00002c9c 	xori	zero,zero,178
    2c50:	00002ca8 	cmpgeui	zero,zero,178
    2c54:	00002ca8 	cmpgeui	zero,zero,178
    2c58:	00002e1c 	xori	zero,zero,184
    2c5c:	00002c9c 	xori	zero,zero,178
    2c60:	00002c8c 	andi	zero,zero,178
    2c64:	00002c8c 	andi	zero,zero,178
    2c68:	00002c8c 	andi	zero,zero,178
    2c6c:	0000313c 	xorhi	zero,zero,196
    2c70:	2404b03a 	or	r2,r4,r16
    2c74:	1000661e 	bne	r2,zero,2e10 <__divdf3+0x2d4>
    2c78:	04c00204 	movi	r19,8
    2c7c:	0021883a 	mov	r16,zero
    2c80:	0025883a 	mov	r18,zero
    2c84:	02400084 	movi	r9,2
    2c88:	003fca06 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2c8c:	8023883a 	mov	r17,r16
    2c90:	9011883a 	mov	r8,r18
    2c94:	e02f883a 	mov	r23,fp
    2c98:	480f883a 	mov	r7,r9
    2c9c:	00800084 	movi	r2,2
    2ca0:	3881311e 	bne	r7,r2,3168 <__divdf3+0x62c>
    2ca4:	b827883a 	mov	r19,r23
    2ca8:	98c0004c 	andi	r3,r19,1
    2cac:	0081ffc4 	movi	r2,2047
    2cb0:	000b883a 	mov	r5,zero
    2cb4:	0025883a 	mov	r18,zero
    2cb8:	1004953a 	slli	r2,r2,20
    2cbc:	18c03fcc 	andi	r3,r3,255
    2cc0:	04400434 	movhi	r17,16
    2cc4:	8c7fffc4 	addi	r17,r17,-1
    2cc8:	180697fa 	slli	r3,r3,31
    2ccc:	2c4a703a 	and	r5,r5,r17
    2cd0:	288ab03a 	or	r5,r5,r2
    2cd4:	28c6b03a 	or	r3,r5,r3
    2cd8:	9005883a 	mov	r2,r18
    2cdc:	dfc00d17 	ldw	ra,52(sp)
    2ce0:	df000c17 	ldw	fp,48(sp)
    2ce4:	ddc00b17 	ldw	r23,44(sp)
    2ce8:	dd800a17 	ldw	r22,40(sp)
    2cec:	dd400917 	ldw	r21,36(sp)
    2cf0:	dd000817 	ldw	r20,32(sp)
    2cf4:	dcc00717 	ldw	r19,28(sp)
    2cf8:	dc800617 	ldw	r18,24(sp)
    2cfc:	dc400517 	ldw	r17,20(sp)
    2d00:	dc000417 	ldw	r16,16(sp)
    2d04:	dec00e04 	addi	sp,sp,56
    2d08:	f800283a 	ret
    2d0c:	2404b03a 	or	r2,r4,r16
    2d10:	2027883a 	mov	r19,r4
    2d14:	10003926 	beq	r2,zero,2dfc <__divdf3+0x2c0>
    2d18:	80012e26 	beq	r16,zero,31d4 <__divdf3+0x698>
    2d1c:	8009883a 	mov	r4,r16
    2d20:	d9800315 	stw	r6,12(sp)
    2d24:	d9c00215 	stw	r7,8(sp)
    2d28:	0004a1c0 	call	4a1c <__clzsi2>
    2d2c:	d9800317 	ldw	r6,12(sp)
    2d30:	d9c00217 	ldw	r7,8(sp)
    2d34:	113ffd44 	addi	r4,r2,-11
    2d38:	00c00704 	movi	r3,28
    2d3c:	19012116 	blt	r3,r4,31c4 <__divdf3+0x688>
    2d40:	00c00744 	movi	r3,29
    2d44:	147ffe04 	addi	r17,r2,-8
    2d48:	1907c83a 	sub	r3,r3,r4
    2d4c:	8460983a 	sll	r16,r16,r17
    2d50:	98c6d83a 	srl	r3,r19,r3
    2d54:	9c64983a 	sll	r18,r19,r17
    2d58:	1c20b03a 	or	r16,r3,r16
    2d5c:	1080fcc4 	addi	r2,r2,1011
    2d60:	00abc83a 	sub	r21,zero,r2
    2d64:	0027883a 	mov	r19,zero
    2d68:	0013883a 	mov	r9,zero
    2d6c:	003f9106 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2d70:	3446b03a 	or	r3,r6,r17
    2d74:	18001f1e 	bne	r3,zero,2df4 <__divdf3+0x2b8>
    2d78:	0023883a 	mov	r17,zero
    2d7c:	0011883a 	mov	r8,zero
    2d80:	01c00084 	movi	r7,2
    2d84:	003f9d06 	br	2bfc <__alt_mem_onchip_memory+0xf7802bfc>
    2d88:	3446b03a 	or	r3,r6,r17
    2d8c:	18001526 	beq	r3,zero,2de4 <__divdf3+0x2a8>
    2d90:	88011b26 	beq	r17,zero,3200 <__divdf3+0x6c4>
    2d94:	8809883a 	mov	r4,r17
    2d98:	d9800315 	stw	r6,12(sp)
    2d9c:	da400115 	stw	r9,4(sp)
    2da0:	0004a1c0 	call	4a1c <__clzsi2>
    2da4:	d9800317 	ldw	r6,12(sp)
    2da8:	da400117 	ldw	r9,4(sp)
    2dac:	113ffd44 	addi	r4,r2,-11
    2db0:	00c00704 	movi	r3,28
    2db4:	19010e16 	blt	r3,r4,31f0 <__divdf3+0x6b4>
    2db8:	00c00744 	movi	r3,29
    2dbc:	123ffe04 	addi	r8,r2,-8
    2dc0:	1907c83a 	sub	r3,r3,r4
    2dc4:	8a22983a 	sll	r17,r17,r8
    2dc8:	30c6d83a 	srl	r3,r6,r3
    2dcc:	3210983a 	sll	r8,r6,r8
    2dd0:	1c62b03a 	or	r17,r3,r17
    2dd4:	1080fcc4 	addi	r2,r2,1011
    2dd8:	0085c83a 	sub	r2,zero,r2
    2ddc:	000f883a 	mov	r7,zero
    2de0:	003f8606 	br	2bfc <__alt_mem_onchip_memory+0xf7802bfc>
    2de4:	0023883a 	mov	r17,zero
    2de8:	0011883a 	mov	r8,zero
    2dec:	01c00044 	movi	r7,1
    2df0:	003f8206 	br	2bfc <__alt_mem_onchip_memory+0xf7802bfc>
    2df4:	01c000c4 	movi	r7,3
    2df8:	003f8006 	br	2bfc <__alt_mem_onchip_memory+0xf7802bfc>
    2dfc:	04c00104 	movi	r19,4
    2e00:	0021883a 	mov	r16,zero
    2e04:	0025883a 	mov	r18,zero
    2e08:	02400044 	movi	r9,1
    2e0c:	003f6906 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2e10:	04c00304 	movi	r19,12
    2e14:	024000c4 	movi	r9,3
    2e18:	003f6606 	br	2bb4 <__alt_mem_onchip_memory+0xf7802bb4>
    2e1c:	01400434 	movhi	r5,16
    2e20:	0007883a 	mov	r3,zero
    2e24:	297fffc4 	addi	r5,r5,-1
    2e28:	04bfffc4 	movi	r18,-1
    2e2c:	0081ffc4 	movi	r2,2047
    2e30:	003fa106 	br	2cb8 <__alt_mem_onchip_memory+0xf7802cb8>
    2e34:	00c00044 	movi	r3,1
    2e38:	1887c83a 	sub	r3,r3,r2
    2e3c:	01000e04 	movi	r4,56
    2e40:	20c1210e 	bge	r4,r3,32c8 <__divdf3+0x78c>
    2e44:	98c0004c 	andi	r3,r19,1
    2e48:	0005883a 	mov	r2,zero
    2e4c:	000b883a 	mov	r5,zero
    2e50:	0025883a 	mov	r18,zero
    2e54:	003f9806 	br	2cb8 <__alt_mem_onchip_memory+0xf7802cb8>
    2e58:	8c00fd36 	bltu	r17,r16,3250 <__divdf3+0x714>
    2e5c:	8440fb26 	beq	r16,r17,324c <__divdf3+0x710>
    2e60:	8007883a 	mov	r3,r16
    2e64:	ad7fffc4 	addi	r21,r21,-1
    2e68:	0021883a 	mov	r16,zero
    2e6c:	4004d63a 	srli	r2,r8,24
    2e70:	8822923a 	slli	r17,r17,8
    2e74:	1809883a 	mov	r4,r3
    2e78:	402c923a 	slli	r22,r8,8
    2e7c:	88b8b03a 	or	fp,r17,r2
    2e80:	e028d43a 	srli	r20,fp,16
    2e84:	d8c00015 	stw	r3,0(sp)
    2e88:	e5ffffcc 	andi	r23,fp,65535
    2e8c:	a00b883a 	mov	r5,r20
    2e90:	0004b780 	call	4b78 <__udivsi3>
    2e94:	d8c00017 	ldw	r3,0(sp)
    2e98:	a00b883a 	mov	r5,r20
    2e9c:	d8800315 	stw	r2,12(sp)
    2ea0:	1809883a 	mov	r4,r3
    2ea4:	0004bdc0 	call	4bdc <__umodsi3>
    2ea8:	d9800317 	ldw	r6,12(sp)
    2eac:	1006943a 	slli	r3,r2,16
    2eb0:	9004d43a 	srli	r2,r18,16
    2eb4:	b9a3383a 	mul	r17,r23,r6
    2eb8:	10c4b03a 	or	r2,r2,r3
    2ebc:	1440062e 	bgeu	r2,r17,2ed8 <__divdf3+0x39c>
    2ec0:	1705883a 	add	r2,r2,fp
    2ec4:	30ffffc4 	addi	r3,r6,-1
    2ec8:	1700ee36 	bltu	r2,fp,3284 <__divdf3+0x748>
    2ecc:	1440ed2e 	bgeu	r2,r17,3284 <__divdf3+0x748>
    2ed0:	31bfff84 	addi	r6,r6,-2
    2ed4:	1705883a 	add	r2,r2,fp
    2ed8:	1463c83a 	sub	r17,r2,r17
    2edc:	a00b883a 	mov	r5,r20
    2ee0:	8809883a 	mov	r4,r17
    2ee4:	d9800315 	stw	r6,12(sp)
    2ee8:	0004b780 	call	4b78 <__udivsi3>
    2eec:	a00b883a 	mov	r5,r20
    2ef0:	8809883a 	mov	r4,r17
    2ef4:	d8800215 	stw	r2,8(sp)
    2ef8:	0004bdc0 	call	4bdc <__umodsi3>
    2efc:	d9c00217 	ldw	r7,8(sp)
    2f00:	1004943a 	slli	r2,r2,16
    2f04:	94bfffcc 	andi	r18,r18,65535
    2f08:	b9d1383a 	mul	r8,r23,r7
    2f0c:	90a4b03a 	or	r18,r18,r2
    2f10:	d9800317 	ldw	r6,12(sp)
    2f14:	9200062e 	bgeu	r18,r8,2f30 <__divdf3+0x3f4>
    2f18:	9725883a 	add	r18,r18,fp
    2f1c:	38bfffc4 	addi	r2,r7,-1
    2f20:	9700d636 	bltu	r18,fp,327c <__divdf3+0x740>
    2f24:	9200d52e 	bgeu	r18,r8,327c <__divdf3+0x740>
    2f28:	39ffff84 	addi	r7,r7,-2
    2f2c:	9725883a 	add	r18,r18,fp
    2f30:	3004943a 	slli	r2,r6,16
    2f34:	b012d43a 	srli	r9,r22,16
    2f38:	b1bfffcc 	andi	r6,r22,65535
    2f3c:	11e2b03a 	or	r17,r2,r7
    2f40:	8806d43a 	srli	r3,r17,16
    2f44:	893fffcc 	andi	r4,r17,65535
    2f48:	218b383a 	mul	r5,r4,r6
    2f4c:	30c5383a 	mul	r2,r6,r3
    2f50:	2249383a 	mul	r4,r4,r9
    2f54:	280ed43a 	srli	r7,r5,16
    2f58:	9225c83a 	sub	r18,r18,r8
    2f5c:	2089883a 	add	r4,r4,r2
    2f60:	3909883a 	add	r4,r7,r4
    2f64:	1a47383a 	mul	r3,r3,r9
    2f68:	2080022e 	bgeu	r4,r2,2f74 <__divdf3+0x438>
    2f6c:	00800074 	movhi	r2,1
    2f70:	1887883a 	add	r3,r3,r2
    2f74:	2004d43a 	srli	r2,r4,16
    2f78:	2008943a 	slli	r4,r4,16
    2f7c:	297fffcc 	andi	r5,r5,65535
    2f80:	10c7883a 	add	r3,r2,r3
    2f84:	2149883a 	add	r4,r4,r5
    2f88:	90c0a536 	bltu	r18,r3,3220 <__divdf3+0x6e4>
    2f8c:	90c0bf26 	beq	r18,r3,328c <__divdf3+0x750>
    2f90:	90c7c83a 	sub	r3,r18,r3
    2f94:	810fc83a 	sub	r7,r16,r4
    2f98:	81e5803a 	cmpltu	r18,r16,r7
    2f9c:	1ca5c83a 	sub	r18,r3,r18
    2fa0:	e480c126 	beq	fp,r18,32a8 <__divdf3+0x76c>
    2fa4:	a00b883a 	mov	r5,r20
    2fa8:	9009883a 	mov	r4,r18
    2fac:	d9800315 	stw	r6,12(sp)
    2fb0:	d9c00215 	stw	r7,8(sp)
    2fb4:	da400115 	stw	r9,4(sp)
    2fb8:	0004b780 	call	4b78 <__udivsi3>
    2fbc:	a00b883a 	mov	r5,r20
    2fc0:	9009883a 	mov	r4,r18
    2fc4:	d8800015 	stw	r2,0(sp)
    2fc8:	0004bdc0 	call	4bdc <__umodsi3>
    2fcc:	d9c00217 	ldw	r7,8(sp)
    2fd0:	da000017 	ldw	r8,0(sp)
    2fd4:	1006943a 	slli	r3,r2,16
    2fd8:	3804d43a 	srli	r2,r7,16
    2fdc:	ba21383a 	mul	r16,r23,r8
    2fe0:	d9800317 	ldw	r6,12(sp)
    2fe4:	10c4b03a 	or	r2,r2,r3
    2fe8:	da400117 	ldw	r9,4(sp)
    2fec:	1400062e 	bgeu	r2,r16,3008 <__divdf3+0x4cc>
    2ff0:	1705883a 	add	r2,r2,fp
    2ff4:	40ffffc4 	addi	r3,r8,-1
    2ff8:	1700ad36 	bltu	r2,fp,32b0 <__divdf3+0x774>
    2ffc:	1400ac2e 	bgeu	r2,r16,32b0 <__divdf3+0x774>
    3000:	423fff84 	addi	r8,r8,-2
    3004:	1705883a 	add	r2,r2,fp
    3008:	1421c83a 	sub	r16,r2,r16
    300c:	a00b883a 	mov	r5,r20
    3010:	8009883a 	mov	r4,r16
    3014:	d9800315 	stw	r6,12(sp)
    3018:	d9c00215 	stw	r7,8(sp)
    301c:	da000015 	stw	r8,0(sp)
    3020:	da400115 	stw	r9,4(sp)
    3024:	0004b780 	call	4b78 <__udivsi3>
    3028:	8009883a 	mov	r4,r16
    302c:	a00b883a 	mov	r5,r20
    3030:	1025883a 	mov	r18,r2
    3034:	0004bdc0 	call	4bdc <__umodsi3>
    3038:	d9c00217 	ldw	r7,8(sp)
    303c:	1004943a 	slli	r2,r2,16
    3040:	bcaf383a 	mul	r23,r23,r18
    3044:	393fffcc 	andi	r4,r7,65535
    3048:	2088b03a 	or	r4,r4,r2
    304c:	d9800317 	ldw	r6,12(sp)
    3050:	da000017 	ldw	r8,0(sp)
    3054:	da400117 	ldw	r9,4(sp)
    3058:	25c0062e 	bgeu	r4,r23,3074 <__divdf3+0x538>
    305c:	2709883a 	add	r4,r4,fp
    3060:	90bfffc4 	addi	r2,r18,-1
    3064:	27009436 	bltu	r4,fp,32b8 <__divdf3+0x77c>
    3068:	25c0932e 	bgeu	r4,r23,32b8 <__divdf3+0x77c>
    306c:	94bfff84 	addi	r18,r18,-2
    3070:	2709883a 	add	r4,r4,fp
    3074:	4004943a 	slli	r2,r8,16
    3078:	25efc83a 	sub	r23,r4,r23
    307c:	1490b03a 	or	r8,r2,r18
    3080:	4008d43a 	srli	r4,r8,16
    3084:	40ffffcc 	andi	r3,r8,65535
    3088:	30c5383a 	mul	r2,r6,r3
    308c:	1a47383a 	mul	r3,r3,r9
    3090:	310d383a 	mul	r6,r6,r4
    3094:	100ad43a 	srli	r5,r2,16
    3098:	4913383a 	mul	r9,r9,r4
    309c:	1987883a 	add	r3,r3,r6
    30a0:	28c7883a 	add	r3,r5,r3
    30a4:	1980022e 	bgeu	r3,r6,30b0 <__divdf3+0x574>
    30a8:	01000074 	movhi	r4,1
    30ac:	4913883a 	add	r9,r9,r4
    30b0:	1808d43a 	srli	r4,r3,16
    30b4:	1806943a 	slli	r3,r3,16
    30b8:	10bfffcc 	andi	r2,r2,65535
    30bc:	2253883a 	add	r9,r4,r9
    30c0:	1887883a 	add	r3,r3,r2
    30c4:	ba403836 	bltu	r23,r9,31a8 <__divdf3+0x66c>
    30c8:	ba403626 	beq	r23,r9,31a4 <__divdf3+0x668>
    30cc:	42000054 	ori	r8,r8,1
    30d0:	a880ffc4 	addi	r2,r21,1023
    30d4:	00bf570e 	bge	zero,r2,2e34 <__alt_mem_onchip_memory+0xf7802e34>
    30d8:	40c001cc 	andi	r3,r8,7
    30dc:	18000726 	beq	r3,zero,30fc <__divdf3+0x5c0>
    30e0:	40c003cc 	andi	r3,r8,15
    30e4:	01000104 	movi	r4,4
    30e8:	19000426 	beq	r3,r4,30fc <__divdf3+0x5c0>
    30ec:	4107883a 	add	r3,r8,r4
    30f0:	1a11803a 	cmpltu	r8,r3,r8
    30f4:	8a23883a 	add	r17,r17,r8
    30f8:	1811883a 	mov	r8,r3
    30fc:	88c0402c 	andhi	r3,r17,256
    3100:	18000426 	beq	r3,zero,3114 <__divdf3+0x5d8>
    3104:	00ffc034 	movhi	r3,65280
    3108:	18ffffc4 	addi	r3,r3,-1
    310c:	a8810004 	addi	r2,r21,1024
    3110:	88e2703a 	and	r17,r17,r3
    3114:	00c1ff84 	movi	r3,2046
    3118:	18bee316 	blt	r3,r2,2ca8 <__alt_mem_onchip_memory+0xf7802ca8>
    311c:	8824977a 	slli	r18,r17,29
    3120:	4010d0fa 	srli	r8,r8,3
    3124:	8822927a 	slli	r17,r17,9
    3128:	1081ffcc 	andi	r2,r2,2047
    312c:	9224b03a 	or	r18,r18,r8
    3130:	880ad33a 	srli	r5,r17,12
    3134:	98c0004c 	andi	r3,r19,1
    3138:	003edf06 	br	2cb8 <__alt_mem_onchip_memory+0xf7802cb8>
    313c:	8080022c 	andhi	r2,r16,8
    3140:	10001226 	beq	r2,zero,318c <__divdf3+0x650>
    3144:	8880022c 	andhi	r2,r17,8
    3148:	1000101e 	bne	r2,zero,318c <__divdf3+0x650>
    314c:	00800434 	movhi	r2,16
    3150:	89400234 	orhi	r5,r17,8
    3154:	10bfffc4 	addi	r2,r2,-1
    3158:	b007883a 	mov	r3,r22
    315c:	288a703a 	and	r5,r5,r2
    3160:	4025883a 	mov	r18,r8
    3164:	003f3106 	br	2e2c <__alt_mem_onchip_memory+0xf7802e2c>
    3168:	008000c4 	movi	r2,3
    316c:	3880a626 	beq	r7,r2,3408 <__divdf3+0x8cc>
    3170:	00800044 	movi	r2,1
    3174:	3880521e 	bne	r7,r2,32c0 <__divdf3+0x784>
    3178:	b807883a 	mov	r3,r23
    317c:	0005883a 	mov	r2,zero
    3180:	000b883a 	mov	r5,zero
    3184:	0025883a 	mov	r18,zero
    3188:	003ecb06 	br	2cb8 <__alt_mem_onchip_memory+0xf7802cb8>
    318c:	00800434 	movhi	r2,16
    3190:	81400234 	orhi	r5,r16,8
    3194:	10bfffc4 	addi	r2,r2,-1
    3198:	a007883a 	mov	r3,r20
    319c:	288a703a 	and	r5,r5,r2
    31a0:	003f2206 	br	2e2c <__alt_mem_onchip_memory+0xf7802e2c>
    31a4:	183fca26 	beq	r3,zero,30d0 <__alt_mem_onchip_memory+0xf78030d0>
    31a8:	e5ef883a 	add	r23,fp,r23
    31ac:	40bfffc4 	addi	r2,r8,-1
    31b0:	bf00392e 	bgeu	r23,fp,3298 <__divdf3+0x75c>
    31b4:	1011883a 	mov	r8,r2
    31b8:	ba7fc41e 	bne	r23,r9,30cc <__alt_mem_onchip_memory+0xf78030cc>
    31bc:	b0ffc31e 	bne	r22,r3,30cc <__alt_mem_onchip_memory+0xf78030cc>
    31c0:	003fc306 	br	30d0 <__alt_mem_onchip_memory+0xf78030d0>
    31c4:	143ff604 	addi	r16,r2,-40
    31c8:	9c20983a 	sll	r16,r19,r16
    31cc:	0025883a 	mov	r18,zero
    31d0:	003ee206 	br	2d5c <__alt_mem_onchip_memory+0xf7802d5c>
    31d4:	d9800315 	stw	r6,12(sp)
    31d8:	d9c00215 	stw	r7,8(sp)
    31dc:	0004a1c0 	call	4a1c <__clzsi2>
    31e0:	10800804 	addi	r2,r2,32
    31e4:	d9c00217 	ldw	r7,8(sp)
    31e8:	d9800317 	ldw	r6,12(sp)
    31ec:	003ed106 	br	2d34 <__alt_mem_onchip_memory+0xf7802d34>
    31f0:	147ff604 	addi	r17,r2,-40
    31f4:	3462983a 	sll	r17,r6,r17
    31f8:	0011883a 	mov	r8,zero
    31fc:	003ef506 	br	2dd4 <__alt_mem_onchip_memory+0xf7802dd4>
    3200:	3009883a 	mov	r4,r6
    3204:	d9800315 	stw	r6,12(sp)
    3208:	da400115 	stw	r9,4(sp)
    320c:	0004a1c0 	call	4a1c <__clzsi2>
    3210:	10800804 	addi	r2,r2,32
    3214:	da400117 	ldw	r9,4(sp)
    3218:	d9800317 	ldw	r6,12(sp)
    321c:	003ee306 	br	2dac <__alt_mem_onchip_memory+0xf7802dac>
    3220:	85a1883a 	add	r16,r16,r22
    3224:	8585803a 	cmpltu	r2,r16,r22
    3228:	1705883a 	add	r2,r2,fp
    322c:	14a5883a 	add	r18,r2,r18
    3230:	88bfffc4 	addi	r2,r17,-1
    3234:	e4800c2e 	bgeu	fp,r18,3268 <__divdf3+0x72c>
    3238:	90c03e36 	bltu	r18,r3,3334 <__divdf3+0x7f8>
    323c:	1c806926 	beq	r3,r18,33e4 <__divdf3+0x8a8>
    3240:	90c7c83a 	sub	r3,r18,r3
    3244:	1023883a 	mov	r17,r2
    3248:	003f5206 	br	2f94 <__alt_mem_onchip_memory+0xf7802f94>
    324c:	923f0436 	bltu	r18,r8,2e60 <__alt_mem_onchip_memory+0xf7802e60>
    3250:	800897fa 	slli	r4,r16,31
    3254:	9004d07a 	srli	r2,r18,1
    3258:	8006d07a 	srli	r3,r16,1
    325c:	902097fa 	slli	r16,r18,31
    3260:	20a4b03a 	or	r18,r4,r2
    3264:	003f0106 	br	2e6c <__alt_mem_onchip_memory+0xf7802e6c>
    3268:	e4bff51e 	bne	fp,r18,3240 <__alt_mem_onchip_memory+0xf7803240>
    326c:	85bff22e 	bgeu	r16,r22,3238 <__alt_mem_onchip_memory+0xf7803238>
    3270:	e0c7c83a 	sub	r3,fp,r3
    3274:	1023883a 	mov	r17,r2
    3278:	003f4606 	br	2f94 <__alt_mem_onchip_memory+0xf7802f94>
    327c:	100f883a 	mov	r7,r2
    3280:	003f2b06 	br	2f30 <__alt_mem_onchip_memory+0xf7802f30>
    3284:	180d883a 	mov	r6,r3
    3288:	003f1306 	br	2ed8 <__alt_mem_onchip_memory+0xf7802ed8>
    328c:	813fe436 	bltu	r16,r4,3220 <__alt_mem_onchip_memory+0xf7803220>
    3290:	0007883a 	mov	r3,zero
    3294:	003f3f06 	br	2f94 <__alt_mem_onchip_memory+0xf7802f94>
    3298:	ba402c36 	bltu	r23,r9,334c <__divdf3+0x810>
    329c:	4dc05426 	beq	r9,r23,33f0 <__divdf3+0x8b4>
    32a0:	1011883a 	mov	r8,r2
    32a4:	003f8906 	br	30cc <__alt_mem_onchip_memory+0xf78030cc>
    32a8:	023fffc4 	movi	r8,-1
    32ac:	003f8806 	br	30d0 <__alt_mem_onchip_memory+0xf78030d0>
    32b0:	1811883a 	mov	r8,r3
    32b4:	003f5406 	br	3008 <__alt_mem_onchip_memory+0xf7803008>
    32b8:	1025883a 	mov	r18,r2
    32bc:	003f6d06 	br	3074 <__alt_mem_onchip_memory+0xf7803074>
    32c0:	b827883a 	mov	r19,r23
    32c4:	003f8206 	br	30d0 <__alt_mem_onchip_memory+0xf78030d0>
    32c8:	010007c4 	movi	r4,31
    32cc:	20c02616 	blt	r4,r3,3368 <__divdf3+0x82c>
    32d0:	00800804 	movi	r2,32
    32d4:	10c5c83a 	sub	r2,r2,r3
    32d8:	888a983a 	sll	r5,r17,r2
    32dc:	40c8d83a 	srl	r4,r8,r3
    32e0:	4084983a 	sll	r2,r8,r2
    32e4:	88e2d83a 	srl	r17,r17,r3
    32e8:	2906b03a 	or	r3,r5,r4
    32ec:	1004c03a 	cmpne	r2,r2,zero
    32f0:	1886b03a 	or	r3,r3,r2
    32f4:	188001cc 	andi	r2,r3,7
    32f8:	10000726 	beq	r2,zero,3318 <__divdf3+0x7dc>
    32fc:	188003cc 	andi	r2,r3,15
    3300:	01000104 	movi	r4,4
    3304:	11000426 	beq	r2,r4,3318 <__divdf3+0x7dc>
    3308:	1805883a 	mov	r2,r3
    330c:	10c00104 	addi	r3,r2,4
    3310:	1885803a 	cmpltu	r2,r3,r2
    3314:	88a3883a 	add	r17,r17,r2
    3318:	8880202c 	andhi	r2,r17,128
    331c:	10002726 	beq	r2,zero,33bc <__divdf3+0x880>
    3320:	98c0004c 	andi	r3,r19,1
    3324:	00800044 	movi	r2,1
    3328:	000b883a 	mov	r5,zero
    332c:	0025883a 	mov	r18,zero
    3330:	003e6106 	br	2cb8 <__alt_mem_onchip_memory+0xf7802cb8>
    3334:	85a1883a 	add	r16,r16,r22
    3338:	8585803a 	cmpltu	r2,r16,r22
    333c:	1705883a 	add	r2,r2,fp
    3340:	14a5883a 	add	r18,r2,r18
    3344:	8c7fff84 	addi	r17,r17,-2
    3348:	003f1106 	br	2f90 <__alt_mem_onchip_memory+0xf7802f90>
    334c:	b589883a 	add	r4,r22,r22
    3350:	25ad803a 	cmpltu	r22,r4,r22
    3354:	b739883a 	add	fp,r22,fp
    3358:	40bfff84 	addi	r2,r8,-2
    335c:	bf2f883a 	add	r23,r23,fp
    3360:	202d883a 	mov	r22,r4
    3364:	003f9306 	br	31b4 <__alt_mem_onchip_memory+0xf78031b4>
    3368:	013ff844 	movi	r4,-31
    336c:	2085c83a 	sub	r2,r4,r2
    3370:	8888d83a 	srl	r4,r17,r2
    3374:	00800804 	movi	r2,32
    3378:	18802126 	beq	r3,r2,3400 <__divdf3+0x8c4>
    337c:	00801004 	movi	r2,64
    3380:	10c5c83a 	sub	r2,r2,r3
    3384:	8884983a 	sll	r2,r17,r2
    3388:	1204b03a 	or	r2,r2,r8
    338c:	1004c03a 	cmpne	r2,r2,zero
    3390:	2084b03a 	or	r2,r4,r2
    3394:	144001cc 	andi	r17,r2,7
    3398:	88000d1e 	bne	r17,zero,33d0 <__divdf3+0x894>
    339c:	000b883a 	mov	r5,zero
    33a0:	1024d0fa 	srli	r18,r2,3
    33a4:	98c0004c 	andi	r3,r19,1
    33a8:	0005883a 	mov	r2,zero
    33ac:	9464b03a 	or	r18,r18,r17
    33b0:	003e4106 	br	2cb8 <__alt_mem_onchip_memory+0xf7802cb8>
    33b4:	1007883a 	mov	r3,r2
    33b8:	0023883a 	mov	r17,zero
    33bc:	880a927a 	slli	r5,r17,9
    33c0:	1805883a 	mov	r2,r3
    33c4:	8822977a 	slli	r17,r17,29
    33c8:	280ad33a 	srli	r5,r5,12
    33cc:	003ff406 	br	33a0 <__alt_mem_onchip_memory+0xf78033a0>
    33d0:	10c003cc 	andi	r3,r2,15
    33d4:	01000104 	movi	r4,4
    33d8:	193ff626 	beq	r3,r4,33b4 <__alt_mem_onchip_memory+0xf78033b4>
    33dc:	0023883a 	mov	r17,zero
    33e0:	003fca06 	br	330c <__alt_mem_onchip_memory+0xf780330c>
    33e4:	813fd336 	bltu	r16,r4,3334 <__alt_mem_onchip_memory+0xf7803334>
    33e8:	1023883a 	mov	r17,r2
    33ec:	003fa806 	br	3290 <__alt_mem_onchip_memory+0xf7803290>
    33f0:	b0ffd636 	bltu	r22,r3,334c <__alt_mem_onchip_memory+0xf780334c>
    33f4:	1011883a 	mov	r8,r2
    33f8:	b0ff341e 	bne	r22,r3,30cc <__alt_mem_onchip_memory+0xf78030cc>
    33fc:	003f3406 	br	30d0 <__alt_mem_onchip_memory+0xf78030d0>
    3400:	0005883a 	mov	r2,zero
    3404:	003fe006 	br	3388 <__alt_mem_onchip_memory+0xf7803388>
    3408:	00800434 	movhi	r2,16
    340c:	89400234 	orhi	r5,r17,8
    3410:	10bfffc4 	addi	r2,r2,-1
    3414:	b807883a 	mov	r3,r23
    3418:	288a703a 	and	r5,r5,r2
    341c:	4025883a 	mov	r18,r8
    3420:	003e8206 	br	2e2c <__alt_mem_onchip_memory+0xf7802e2c>

00003424 <__gedf2>:
    3424:	2804d53a 	srli	r2,r5,20
    3428:	3806d53a 	srli	r3,r7,20
    342c:	02000434 	movhi	r8,16
    3430:	423fffc4 	addi	r8,r8,-1
    3434:	1081ffcc 	andi	r2,r2,2047
    3438:	0241ffc4 	movi	r9,2047
    343c:	2a14703a 	and	r10,r5,r8
    3440:	18c1ffcc 	andi	r3,r3,2047
    3444:	3a10703a 	and	r8,r7,r8
    3448:	280ad7fa 	srli	r5,r5,31
    344c:	380ed7fa 	srli	r7,r7,31
    3450:	12401d26 	beq	r2,r9,34c8 <__gedf2+0xa4>
    3454:	0241ffc4 	movi	r9,2047
    3458:	1a401226 	beq	r3,r9,34a4 <__gedf2+0x80>
    345c:	1000081e 	bne	r2,zero,3480 <__gedf2+0x5c>
    3460:	2296b03a 	or	r11,r4,r10
    3464:	5813003a 	cmpeq	r9,r11,zero
    3468:	1800091e 	bne	r3,zero,3490 <__gedf2+0x6c>
    346c:	3218b03a 	or	r12,r6,r8
    3470:	6000071e 	bne	r12,zero,3490 <__gedf2+0x6c>
    3474:	0005883a 	mov	r2,zero
    3478:	5800101e 	bne	r11,zero,34bc <__gedf2+0x98>
    347c:	f800283a 	ret
    3480:	18000c1e 	bne	r3,zero,34b4 <__gedf2+0x90>
    3484:	3212b03a 	or	r9,r6,r8
    3488:	48000c26 	beq	r9,zero,34bc <__gedf2+0x98>
    348c:	0013883a 	mov	r9,zero
    3490:	39c03fcc 	andi	r7,r7,255
    3494:	48000826 	beq	r9,zero,34b8 <__gedf2+0x94>
    3498:	38000926 	beq	r7,zero,34c0 <__gedf2+0x9c>
    349c:	00800044 	movi	r2,1
    34a0:	f800283a 	ret
    34a4:	3212b03a 	or	r9,r6,r8
    34a8:	483fec26 	beq	r9,zero,345c <__alt_mem_onchip_memory+0xf780345c>
    34ac:	00bfff84 	movi	r2,-2
    34b0:	f800283a 	ret
    34b4:	39c03fcc 	andi	r7,r7,255
    34b8:	29c00626 	beq	r5,r7,34d4 <__gedf2+0xb0>
    34bc:	283ff726 	beq	r5,zero,349c <__alt_mem_onchip_memory+0xf780349c>
    34c0:	00bfffc4 	movi	r2,-1
    34c4:	f800283a 	ret
    34c8:	2292b03a 	or	r9,r4,r10
    34cc:	483fe126 	beq	r9,zero,3454 <__alt_mem_onchip_memory+0xf7803454>
    34d0:	003ff606 	br	34ac <__alt_mem_onchip_memory+0xf78034ac>
    34d4:	18bff916 	blt	r3,r2,34bc <__alt_mem_onchip_memory+0xf78034bc>
    34d8:	10c00316 	blt	r2,r3,34e8 <__gedf2+0xc4>
    34dc:	42bff736 	bltu	r8,r10,34bc <__alt_mem_onchip_memory+0xf78034bc>
    34e0:	52000326 	beq	r10,r8,34f0 <__gedf2+0xcc>
    34e4:	5200042e 	bgeu	r10,r8,34f8 <__gedf2+0xd4>
    34e8:	283fec1e 	bne	r5,zero,349c <__alt_mem_onchip_memory+0xf780349c>
    34ec:	003ff406 	br	34c0 <__alt_mem_onchip_memory+0xf78034c0>
    34f0:	313ff236 	bltu	r6,r4,34bc <__alt_mem_onchip_memory+0xf78034bc>
    34f4:	21bffc36 	bltu	r4,r6,34e8 <__alt_mem_onchip_memory+0xf78034e8>
    34f8:	0005883a 	mov	r2,zero
    34fc:	f800283a 	ret

00003500 <__ledf2>:
    3500:	2804d53a 	srli	r2,r5,20
    3504:	3810d53a 	srli	r8,r7,20
    3508:	00c00434 	movhi	r3,16
    350c:	18ffffc4 	addi	r3,r3,-1
    3510:	1081ffcc 	andi	r2,r2,2047
    3514:	0241ffc4 	movi	r9,2047
    3518:	28d4703a 	and	r10,r5,r3
    351c:	4201ffcc 	andi	r8,r8,2047
    3520:	38c6703a 	and	r3,r7,r3
    3524:	280ad7fa 	srli	r5,r5,31
    3528:	380ed7fa 	srli	r7,r7,31
    352c:	12401f26 	beq	r2,r9,35ac <__ledf2+0xac>
    3530:	0241ffc4 	movi	r9,2047
    3534:	42401426 	beq	r8,r9,3588 <__ledf2+0x88>
    3538:	1000091e 	bne	r2,zero,3560 <__ledf2+0x60>
    353c:	2296b03a 	or	r11,r4,r10
    3540:	5813003a 	cmpeq	r9,r11,zero
    3544:	29403fcc 	andi	r5,r5,255
    3548:	40000a1e 	bne	r8,zero,3574 <__ledf2+0x74>
    354c:	30d8b03a 	or	r12,r6,r3
    3550:	6000081e 	bne	r12,zero,3574 <__ledf2+0x74>
    3554:	0005883a 	mov	r2,zero
    3558:	5800111e 	bne	r11,zero,35a0 <__ledf2+0xa0>
    355c:	f800283a 	ret
    3560:	29403fcc 	andi	r5,r5,255
    3564:	40000c1e 	bne	r8,zero,3598 <__ledf2+0x98>
    3568:	30d2b03a 	or	r9,r6,r3
    356c:	48000c26 	beq	r9,zero,35a0 <__ledf2+0xa0>
    3570:	0013883a 	mov	r9,zero
    3574:	39c03fcc 	andi	r7,r7,255
    3578:	48000826 	beq	r9,zero,359c <__ledf2+0x9c>
    357c:	38001126 	beq	r7,zero,35c4 <__ledf2+0xc4>
    3580:	00800044 	movi	r2,1
    3584:	f800283a 	ret
    3588:	30d2b03a 	or	r9,r6,r3
    358c:	483fea26 	beq	r9,zero,3538 <__alt_mem_onchip_memory+0xf7803538>
    3590:	00800084 	movi	r2,2
    3594:	f800283a 	ret
    3598:	39c03fcc 	andi	r7,r7,255
    359c:	39400726 	beq	r7,r5,35bc <__ledf2+0xbc>
    35a0:	2800081e 	bne	r5,zero,35c4 <__ledf2+0xc4>
    35a4:	00800044 	movi	r2,1
    35a8:	f800283a 	ret
    35ac:	2292b03a 	or	r9,r4,r10
    35b0:	483fdf26 	beq	r9,zero,3530 <__alt_mem_onchip_memory+0xf7803530>
    35b4:	00800084 	movi	r2,2
    35b8:	f800283a 	ret
    35bc:	4080030e 	bge	r8,r2,35cc <__ledf2+0xcc>
    35c0:	383fef26 	beq	r7,zero,3580 <__alt_mem_onchip_memory+0xf7803580>
    35c4:	00bfffc4 	movi	r2,-1
    35c8:	f800283a 	ret
    35cc:	123feb16 	blt	r2,r8,357c <__alt_mem_onchip_memory+0xf780357c>
    35d0:	1abff336 	bltu	r3,r10,35a0 <__alt_mem_onchip_memory+0xf78035a0>
    35d4:	50c00326 	beq	r10,r3,35e4 <__ledf2+0xe4>
    35d8:	50c0042e 	bgeu	r10,r3,35ec <__ledf2+0xec>
    35dc:	283fe81e 	bne	r5,zero,3580 <__alt_mem_onchip_memory+0xf7803580>
    35e0:	003ff806 	br	35c4 <__alt_mem_onchip_memory+0xf78035c4>
    35e4:	313fee36 	bltu	r6,r4,35a0 <__alt_mem_onchip_memory+0xf78035a0>
    35e8:	21bffc36 	bltu	r4,r6,35dc <__alt_mem_onchip_memory+0xf78035dc>
    35ec:	0005883a 	mov	r2,zero
    35f0:	f800283a 	ret

000035f4 <__muldf3>:
    35f4:	defff304 	addi	sp,sp,-52
    35f8:	2804d53a 	srli	r2,r5,20
    35fc:	dd800915 	stw	r22,36(sp)
    3600:	282cd7fa 	srli	r22,r5,31
    3604:	dc000315 	stw	r16,12(sp)
    3608:	04000434 	movhi	r16,16
    360c:	dd400815 	stw	r21,32(sp)
    3610:	dc800515 	stw	r18,20(sp)
    3614:	843fffc4 	addi	r16,r16,-1
    3618:	dfc00c15 	stw	ra,48(sp)
    361c:	df000b15 	stw	fp,44(sp)
    3620:	ddc00a15 	stw	r23,40(sp)
    3624:	dd000715 	stw	r20,28(sp)
    3628:	dcc00615 	stw	r19,24(sp)
    362c:	dc400415 	stw	r17,16(sp)
    3630:	1481ffcc 	andi	r18,r2,2047
    3634:	2c20703a 	and	r16,r5,r16
    3638:	b02b883a 	mov	r21,r22
    363c:	b2403fcc 	andi	r9,r22,255
    3640:	90006026 	beq	r18,zero,37c4 <__muldf3+0x1d0>
    3644:	0081ffc4 	movi	r2,2047
    3648:	2029883a 	mov	r20,r4
    364c:	90803626 	beq	r18,r2,3728 <__muldf3+0x134>
    3650:	80800434 	orhi	r2,r16,16
    3654:	100490fa 	slli	r2,r2,3
    3658:	2020d77a 	srli	r16,r4,29
    365c:	202890fa 	slli	r20,r4,3
    3660:	94bf0044 	addi	r18,r18,-1023
    3664:	80a0b03a 	or	r16,r16,r2
    3668:	0027883a 	mov	r19,zero
    366c:	0039883a 	mov	fp,zero
    3670:	3804d53a 	srli	r2,r7,20
    3674:	382ed7fa 	srli	r23,r7,31
    3678:	04400434 	movhi	r17,16
    367c:	8c7fffc4 	addi	r17,r17,-1
    3680:	1081ffcc 	andi	r2,r2,2047
    3684:	3011883a 	mov	r8,r6
    3688:	3c62703a 	and	r17,r7,r17
    368c:	ba803fcc 	andi	r10,r23,255
    3690:	10006d26 	beq	r2,zero,3848 <__muldf3+0x254>
    3694:	00c1ffc4 	movi	r3,2047
    3698:	10c06526 	beq	r2,r3,3830 <__muldf3+0x23c>
    369c:	88c00434 	orhi	r3,r17,16
    36a0:	180690fa 	slli	r3,r3,3
    36a4:	3022d77a 	srli	r17,r6,29
    36a8:	301090fa 	slli	r8,r6,3
    36ac:	10bf0044 	addi	r2,r2,-1023
    36b0:	88e2b03a 	or	r17,r17,r3
    36b4:	000b883a 	mov	r5,zero
    36b8:	9085883a 	add	r2,r18,r2
    36bc:	2cc8b03a 	or	r4,r5,r19
    36c0:	00c003c4 	movi	r3,15
    36c4:	bdacf03a 	xor	r22,r23,r22
    36c8:	12c00044 	addi	r11,r2,1
    36cc:	19009936 	bltu	r3,r4,3934 <__muldf3+0x340>
    36d0:	200890ba 	slli	r4,r4,2
    36d4:	00c00034 	movhi	r3,0
    36d8:	18cdba04 	addi	r3,r3,14056
    36dc:	20c9883a 	add	r4,r4,r3
    36e0:	20c00017 	ldw	r3,0(r4)
    36e4:	1800683a 	jmp	r3
    36e8:	00003934 	movhi	zero,228
    36ec:	00003748 	cmpgei	zero,zero,221
    36f0:	00003748 	cmpgei	zero,zero,221
    36f4:	00003744 	movi	zero,221
    36f8:	00003910 	cmplti	zero,zero,228
    36fc:	00003910 	cmplti	zero,zero,228
    3700:	000038f8 	rdprs	zero,zero,227
    3704:	00003744 	movi	zero,221
    3708:	00003910 	cmplti	zero,zero,228
    370c:	000038f8 	rdprs	zero,zero,227
    3710:	00003910 	cmplti	zero,zero,228
    3714:	00003744 	movi	zero,221
    3718:	00003920 	cmpeqi	zero,zero,228
    371c:	00003920 	cmpeqi	zero,zero,228
    3720:	00003920 	cmpeqi	zero,zero,228
    3724:	00003b3c 	xorhi	zero,zero,236
    3728:	2404b03a 	or	r2,r4,r16
    372c:	10006f1e 	bne	r2,zero,38ec <__muldf3+0x2f8>
    3730:	04c00204 	movi	r19,8
    3734:	0021883a 	mov	r16,zero
    3738:	0029883a 	mov	r20,zero
    373c:	07000084 	movi	fp,2
    3740:	003fcb06 	br	3670 <__alt_mem_onchip_memory+0xf7803670>
    3744:	502d883a 	mov	r22,r10
    3748:	00800084 	movi	r2,2
    374c:	28805726 	beq	r5,r2,38ac <__muldf3+0x2b8>
    3750:	008000c4 	movi	r2,3
    3754:	28816626 	beq	r5,r2,3cf0 <__muldf3+0x6fc>
    3758:	00800044 	movi	r2,1
    375c:	2881411e 	bne	r5,r2,3c64 <__muldf3+0x670>
    3760:	b02b883a 	mov	r21,r22
    3764:	0005883a 	mov	r2,zero
    3768:	000b883a 	mov	r5,zero
    376c:	0029883a 	mov	r20,zero
    3770:	1004953a 	slli	r2,r2,20
    3774:	a8c03fcc 	andi	r3,r21,255
    3778:	04400434 	movhi	r17,16
    377c:	8c7fffc4 	addi	r17,r17,-1
    3780:	180697fa 	slli	r3,r3,31
    3784:	2c4a703a 	and	r5,r5,r17
    3788:	288ab03a 	or	r5,r5,r2
    378c:	28c6b03a 	or	r3,r5,r3
    3790:	a005883a 	mov	r2,r20
    3794:	dfc00c17 	ldw	ra,48(sp)
    3798:	df000b17 	ldw	fp,44(sp)
    379c:	ddc00a17 	ldw	r23,40(sp)
    37a0:	dd800917 	ldw	r22,36(sp)
    37a4:	dd400817 	ldw	r21,32(sp)
    37a8:	dd000717 	ldw	r20,28(sp)
    37ac:	dcc00617 	ldw	r19,24(sp)
    37b0:	dc800517 	ldw	r18,20(sp)
    37b4:	dc400417 	ldw	r17,16(sp)
    37b8:	dc000317 	ldw	r16,12(sp)
    37bc:	dec00d04 	addi	sp,sp,52
    37c0:	f800283a 	ret
    37c4:	2404b03a 	or	r2,r4,r16
    37c8:	2027883a 	mov	r19,r4
    37cc:	10004226 	beq	r2,zero,38d8 <__muldf3+0x2e4>
    37d0:	8000fc26 	beq	r16,zero,3bc4 <__muldf3+0x5d0>
    37d4:	8009883a 	mov	r4,r16
    37d8:	d9800215 	stw	r6,8(sp)
    37dc:	d9c00015 	stw	r7,0(sp)
    37e0:	da400115 	stw	r9,4(sp)
    37e4:	0004a1c0 	call	4a1c <__clzsi2>
    37e8:	d9800217 	ldw	r6,8(sp)
    37ec:	d9c00017 	ldw	r7,0(sp)
    37f0:	da400117 	ldw	r9,4(sp)
    37f4:	113ffd44 	addi	r4,r2,-11
    37f8:	00c00704 	movi	r3,28
    37fc:	1900ed16 	blt	r3,r4,3bb4 <__muldf3+0x5c0>
    3800:	00c00744 	movi	r3,29
    3804:	147ffe04 	addi	r17,r2,-8
    3808:	1907c83a 	sub	r3,r3,r4
    380c:	8460983a 	sll	r16,r16,r17
    3810:	98c6d83a 	srl	r3,r19,r3
    3814:	9c68983a 	sll	r20,r19,r17
    3818:	1c20b03a 	or	r16,r3,r16
    381c:	1080fcc4 	addi	r2,r2,1011
    3820:	00a5c83a 	sub	r18,zero,r2
    3824:	0027883a 	mov	r19,zero
    3828:	0039883a 	mov	fp,zero
    382c:	003f9006 	br	3670 <__alt_mem_onchip_memory+0xf7803670>
    3830:	3446b03a 	or	r3,r6,r17
    3834:	1800261e 	bne	r3,zero,38d0 <__muldf3+0x2dc>
    3838:	0023883a 	mov	r17,zero
    383c:	0011883a 	mov	r8,zero
    3840:	01400084 	movi	r5,2
    3844:	003f9c06 	br	36b8 <__alt_mem_onchip_memory+0xf78036b8>
    3848:	3446b03a 	or	r3,r6,r17
    384c:	18001c26 	beq	r3,zero,38c0 <__muldf3+0x2cc>
    3850:	8800ce26 	beq	r17,zero,3b8c <__muldf3+0x598>
    3854:	8809883a 	mov	r4,r17
    3858:	d9800215 	stw	r6,8(sp)
    385c:	da400115 	stw	r9,4(sp)
    3860:	da800015 	stw	r10,0(sp)
    3864:	0004a1c0 	call	4a1c <__clzsi2>
    3868:	d9800217 	ldw	r6,8(sp)
    386c:	da400117 	ldw	r9,4(sp)
    3870:	da800017 	ldw	r10,0(sp)
    3874:	113ffd44 	addi	r4,r2,-11
    3878:	00c00704 	movi	r3,28
    387c:	1900bf16 	blt	r3,r4,3b7c <__muldf3+0x588>
    3880:	00c00744 	movi	r3,29
    3884:	123ffe04 	addi	r8,r2,-8
    3888:	1907c83a 	sub	r3,r3,r4
    388c:	8a22983a 	sll	r17,r17,r8
    3890:	30c6d83a 	srl	r3,r6,r3
    3894:	3210983a 	sll	r8,r6,r8
    3898:	1c62b03a 	or	r17,r3,r17
    389c:	1080fcc4 	addi	r2,r2,1011
    38a0:	0085c83a 	sub	r2,zero,r2
    38a4:	000b883a 	mov	r5,zero
    38a8:	003f8306 	br	36b8 <__alt_mem_onchip_memory+0xf78036b8>
    38ac:	b02b883a 	mov	r21,r22
    38b0:	0081ffc4 	movi	r2,2047
    38b4:	000b883a 	mov	r5,zero
    38b8:	0029883a 	mov	r20,zero
    38bc:	003fac06 	br	3770 <__alt_mem_onchip_memory+0xf7803770>
    38c0:	0023883a 	mov	r17,zero
    38c4:	0011883a 	mov	r8,zero
    38c8:	01400044 	movi	r5,1
    38cc:	003f7a06 	br	36b8 <__alt_mem_onchip_memory+0xf78036b8>
    38d0:	014000c4 	movi	r5,3
    38d4:	003f7806 	br	36b8 <__alt_mem_onchip_memory+0xf78036b8>
    38d8:	04c00104 	movi	r19,4
    38dc:	0021883a 	mov	r16,zero
    38e0:	0029883a 	mov	r20,zero
    38e4:	07000044 	movi	fp,1
    38e8:	003f6106 	br	3670 <__alt_mem_onchip_memory+0xf7803670>
    38ec:	04c00304 	movi	r19,12
    38f0:	070000c4 	movi	fp,3
    38f4:	003f5e06 	br	3670 <__alt_mem_onchip_memory+0xf7803670>
    38f8:	01400434 	movhi	r5,16
    38fc:	002b883a 	mov	r21,zero
    3900:	297fffc4 	addi	r5,r5,-1
    3904:	053fffc4 	movi	r20,-1
    3908:	0081ffc4 	movi	r2,2047
    390c:	003f9806 	br	3770 <__alt_mem_onchip_memory+0xf7803770>
    3910:	8023883a 	mov	r17,r16
    3914:	a011883a 	mov	r8,r20
    3918:	e00b883a 	mov	r5,fp
    391c:	003f8a06 	br	3748 <__alt_mem_onchip_memory+0xf7803748>
    3920:	8023883a 	mov	r17,r16
    3924:	a011883a 	mov	r8,r20
    3928:	482d883a 	mov	r22,r9
    392c:	e00b883a 	mov	r5,fp
    3930:	003f8506 	br	3748 <__alt_mem_onchip_memory+0xf7803748>
    3934:	a00ad43a 	srli	r5,r20,16
    3938:	401ad43a 	srli	r13,r8,16
    393c:	a53fffcc 	andi	r20,r20,65535
    3940:	423fffcc 	andi	r8,r8,65535
    3944:	4519383a 	mul	r12,r8,r20
    3948:	4147383a 	mul	r3,r8,r5
    394c:	6d09383a 	mul	r4,r13,r20
    3950:	600cd43a 	srli	r6,r12,16
    3954:	2b5d383a 	mul	r14,r5,r13
    3958:	20c9883a 	add	r4,r4,r3
    395c:	310d883a 	add	r6,r6,r4
    3960:	30c0022e 	bgeu	r6,r3,396c <__muldf3+0x378>
    3964:	00c00074 	movhi	r3,1
    3968:	70dd883a 	add	r14,r14,r3
    396c:	8826d43a 	srli	r19,r17,16
    3970:	8bffffcc 	andi	r15,r17,65535
    3974:	7d23383a 	mul	r17,r15,r20
    3978:	7949383a 	mul	r4,r15,r5
    397c:	9d29383a 	mul	r20,r19,r20
    3980:	8814d43a 	srli	r10,r17,16
    3984:	3012943a 	slli	r9,r6,16
    3988:	a129883a 	add	r20,r20,r4
    398c:	633fffcc 	andi	r12,r12,65535
    3990:	5515883a 	add	r10,r10,r20
    3994:	3006d43a 	srli	r3,r6,16
    3998:	4b13883a 	add	r9,r9,r12
    399c:	2ccb383a 	mul	r5,r5,r19
    39a0:	5100022e 	bgeu	r10,r4,39ac <__muldf3+0x3b8>
    39a4:	01000074 	movhi	r4,1
    39a8:	290b883a 	add	r5,r5,r4
    39ac:	802ad43a 	srli	r21,r16,16
    39b0:	843fffcc 	andi	r16,r16,65535
    39b4:	440d383a 	mul	r6,r8,r16
    39b8:	4565383a 	mul	r18,r8,r21
    39bc:	8349383a 	mul	r4,r16,r13
    39c0:	500e943a 	slli	r7,r10,16
    39c4:	3010d43a 	srli	r8,r6,16
    39c8:	5028d43a 	srli	r20,r10,16
    39cc:	2489883a 	add	r4,r4,r18
    39d0:	8abfffcc 	andi	r10,r17,65535
    39d4:	3a95883a 	add	r10,r7,r10
    39d8:	4119883a 	add	r12,r8,r4
    39dc:	a169883a 	add	r20,r20,r5
    39e0:	1a87883a 	add	r3,r3,r10
    39e4:	6d5b383a 	mul	r13,r13,r21
    39e8:	6480022e 	bgeu	r12,r18,39f4 <__muldf3+0x400>
    39ec:	01000074 	movhi	r4,1
    39f0:	691b883a 	add	r13,r13,r4
    39f4:	7c25383a 	mul	r18,r15,r16
    39f8:	7d4b383a 	mul	r5,r15,r21
    39fc:	84cf383a 	mul	r7,r16,r19
    3a00:	901ed43a 	srli	r15,r18,16
    3a04:	6008d43a 	srli	r4,r12,16
    3a08:	6010943a 	slli	r8,r12,16
    3a0c:	394f883a 	add	r7,r7,r5
    3a10:	333fffcc 	andi	r12,r6,65535
    3a14:	79df883a 	add	r15,r15,r7
    3a18:	235b883a 	add	r13,r4,r13
    3a1c:	9d63383a 	mul	r17,r19,r21
    3a20:	4309883a 	add	r4,r8,r12
    3a24:	7940022e 	bgeu	r15,r5,3a30 <__muldf3+0x43c>
    3a28:	01400074 	movhi	r5,1
    3a2c:	8963883a 	add	r17,r17,r5
    3a30:	780a943a 	slli	r5,r15,16
    3a34:	91bfffcc 	andi	r6,r18,65535
    3a38:	70c7883a 	add	r3,r14,r3
    3a3c:	298d883a 	add	r6,r5,r6
    3a40:	1a8f803a 	cmpltu	r7,r3,r10
    3a44:	350b883a 	add	r5,r6,r20
    3a48:	20c7883a 	add	r3,r4,r3
    3a4c:	3955883a 	add	r10,r7,r5
    3a50:	1909803a 	cmpltu	r4,r3,r4
    3a54:	6a91883a 	add	r8,r13,r10
    3a58:	780cd43a 	srli	r6,r15,16
    3a5c:	2219883a 	add	r12,r4,r8
    3a60:	2d0b803a 	cmpltu	r5,r5,r20
    3a64:	51cf803a 	cmpltu	r7,r10,r7
    3a68:	29ceb03a 	or	r7,r5,r7
    3a6c:	4351803a 	cmpltu	r8,r8,r13
    3a70:	610b803a 	cmpltu	r5,r12,r4
    3a74:	4148b03a 	or	r4,r8,r5
    3a78:	398f883a 	add	r7,r7,r6
    3a7c:	3909883a 	add	r4,r7,r4
    3a80:	1810927a 	slli	r8,r3,9
    3a84:	2449883a 	add	r4,r4,r17
    3a88:	2008927a 	slli	r4,r4,9
    3a8c:	6022d5fa 	srli	r17,r12,23
    3a90:	1806d5fa 	srli	r3,r3,23
    3a94:	4252b03a 	or	r9,r8,r9
    3a98:	600a927a 	slli	r5,r12,9
    3a9c:	4810c03a 	cmpne	r8,r9,zero
    3aa0:	2462b03a 	or	r17,r4,r17
    3aa4:	40c6b03a 	or	r3,r8,r3
    3aa8:	8900402c 	andhi	r4,r17,256
    3aac:	1950b03a 	or	r8,r3,r5
    3ab0:	20000726 	beq	r4,zero,3ad0 <__muldf3+0x4dc>
    3ab4:	4006d07a 	srli	r3,r8,1
    3ab8:	880497fa 	slli	r2,r17,31
    3abc:	4200004c 	andi	r8,r8,1
    3ac0:	8822d07a 	srli	r17,r17,1
    3ac4:	1a10b03a 	or	r8,r3,r8
    3ac8:	1210b03a 	or	r8,r2,r8
    3acc:	5805883a 	mov	r2,r11
    3ad0:	1140ffc4 	addi	r5,r2,1023
    3ad4:	0140440e 	bge	zero,r5,3be8 <__muldf3+0x5f4>
    3ad8:	40c001cc 	andi	r3,r8,7
    3adc:	18000726 	beq	r3,zero,3afc <__muldf3+0x508>
    3ae0:	40c003cc 	andi	r3,r8,15
    3ae4:	01000104 	movi	r4,4
    3ae8:	19000426 	beq	r3,r4,3afc <__muldf3+0x508>
    3aec:	4107883a 	add	r3,r8,r4
    3af0:	1a11803a 	cmpltu	r8,r3,r8
    3af4:	8a23883a 	add	r17,r17,r8
    3af8:	1811883a 	mov	r8,r3
    3afc:	88c0402c 	andhi	r3,r17,256
    3b00:	18000426 	beq	r3,zero,3b14 <__muldf3+0x520>
    3b04:	11410004 	addi	r5,r2,1024
    3b08:	00bfc034 	movhi	r2,65280
    3b0c:	10bfffc4 	addi	r2,r2,-1
    3b10:	88a2703a 	and	r17,r17,r2
    3b14:	0081ff84 	movi	r2,2046
    3b18:	117f6416 	blt	r2,r5,38ac <__alt_mem_onchip_memory+0xf78038ac>
    3b1c:	8828977a 	slli	r20,r17,29
    3b20:	4010d0fa 	srli	r8,r8,3
    3b24:	8822927a 	slli	r17,r17,9
    3b28:	2881ffcc 	andi	r2,r5,2047
    3b2c:	a228b03a 	or	r20,r20,r8
    3b30:	880ad33a 	srli	r5,r17,12
    3b34:	b02b883a 	mov	r21,r22
    3b38:	003f0d06 	br	3770 <__alt_mem_onchip_memory+0xf7803770>
    3b3c:	8080022c 	andhi	r2,r16,8
    3b40:	10000926 	beq	r2,zero,3b68 <__muldf3+0x574>
    3b44:	8880022c 	andhi	r2,r17,8
    3b48:	1000071e 	bne	r2,zero,3b68 <__muldf3+0x574>
    3b4c:	00800434 	movhi	r2,16
    3b50:	89400234 	orhi	r5,r17,8
    3b54:	10bfffc4 	addi	r2,r2,-1
    3b58:	b82b883a 	mov	r21,r23
    3b5c:	288a703a 	and	r5,r5,r2
    3b60:	4029883a 	mov	r20,r8
    3b64:	003f6806 	br	3908 <__alt_mem_onchip_memory+0xf7803908>
    3b68:	00800434 	movhi	r2,16
    3b6c:	81400234 	orhi	r5,r16,8
    3b70:	10bfffc4 	addi	r2,r2,-1
    3b74:	288a703a 	and	r5,r5,r2
    3b78:	003f6306 	br	3908 <__alt_mem_onchip_memory+0xf7803908>
    3b7c:	147ff604 	addi	r17,r2,-40
    3b80:	3462983a 	sll	r17,r6,r17
    3b84:	0011883a 	mov	r8,zero
    3b88:	003f4406 	br	389c <__alt_mem_onchip_memory+0xf780389c>
    3b8c:	3009883a 	mov	r4,r6
    3b90:	d9800215 	stw	r6,8(sp)
    3b94:	da400115 	stw	r9,4(sp)
    3b98:	da800015 	stw	r10,0(sp)
    3b9c:	0004a1c0 	call	4a1c <__clzsi2>
    3ba0:	10800804 	addi	r2,r2,32
    3ba4:	da800017 	ldw	r10,0(sp)
    3ba8:	da400117 	ldw	r9,4(sp)
    3bac:	d9800217 	ldw	r6,8(sp)
    3bb0:	003f3006 	br	3874 <__alt_mem_onchip_memory+0xf7803874>
    3bb4:	143ff604 	addi	r16,r2,-40
    3bb8:	9c20983a 	sll	r16,r19,r16
    3bbc:	0029883a 	mov	r20,zero
    3bc0:	003f1606 	br	381c <__alt_mem_onchip_memory+0xf780381c>
    3bc4:	d9800215 	stw	r6,8(sp)
    3bc8:	d9c00015 	stw	r7,0(sp)
    3bcc:	da400115 	stw	r9,4(sp)
    3bd0:	0004a1c0 	call	4a1c <__clzsi2>
    3bd4:	10800804 	addi	r2,r2,32
    3bd8:	da400117 	ldw	r9,4(sp)
    3bdc:	d9c00017 	ldw	r7,0(sp)
    3be0:	d9800217 	ldw	r6,8(sp)
    3be4:	003f0306 	br	37f4 <__alt_mem_onchip_memory+0xf78037f4>
    3be8:	00c00044 	movi	r3,1
    3bec:	1947c83a 	sub	r3,r3,r5
    3bf0:	00800e04 	movi	r2,56
    3bf4:	10feda16 	blt	r2,r3,3760 <__alt_mem_onchip_memory+0xf7803760>
    3bf8:	008007c4 	movi	r2,31
    3bfc:	10c01b16 	blt	r2,r3,3c6c <__muldf3+0x678>
    3c00:	00800804 	movi	r2,32
    3c04:	10c5c83a 	sub	r2,r2,r3
    3c08:	888a983a 	sll	r5,r17,r2
    3c0c:	40c8d83a 	srl	r4,r8,r3
    3c10:	4084983a 	sll	r2,r8,r2
    3c14:	88e2d83a 	srl	r17,r17,r3
    3c18:	2906b03a 	or	r3,r5,r4
    3c1c:	1004c03a 	cmpne	r2,r2,zero
    3c20:	1886b03a 	or	r3,r3,r2
    3c24:	188001cc 	andi	r2,r3,7
    3c28:	10000726 	beq	r2,zero,3c48 <__muldf3+0x654>
    3c2c:	188003cc 	andi	r2,r3,15
    3c30:	01000104 	movi	r4,4
    3c34:	11000426 	beq	r2,r4,3c48 <__muldf3+0x654>
    3c38:	1805883a 	mov	r2,r3
    3c3c:	10c00104 	addi	r3,r2,4
    3c40:	1885803a 	cmpltu	r2,r3,r2
    3c44:	88a3883a 	add	r17,r17,r2
    3c48:	8880202c 	andhi	r2,r17,128
    3c4c:	10001c26 	beq	r2,zero,3cc0 <__muldf3+0x6cc>
    3c50:	b02b883a 	mov	r21,r22
    3c54:	00800044 	movi	r2,1
    3c58:	000b883a 	mov	r5,zero
    3c5c:	0029883a 	mov	r20,zero
    3c60:	003ec306 	br	3770 <__alt_mem_onchip_memory+0xf7803770>
    3c64:	5805883a 	mov	r2,r11
    3c68:	003f9906 	br	3ad0 <__alt_mem_onchip_memory+0xf7803ad0>
    3c6c:	00bff844 	movi	r2,-31
    3c70:	1145c83a 	sub	r2,r2,r5
    3c74:	8888d83a 	srl	r4,r17,r2
    3c78:	00800804 	movi	r2,32
    3c7c:	18801a26 	beq	r3,r2,3ce8 <__muldf3+0x6f4>
    3c80:	00801004 	movi	r2,64
    3c84:	10c5c83a 	sub	r2,r2,r3
    3c88:	8884983a 	sll	r2,r17,r2
    3c8c:	1204b03a 	or	r2,r2,r8
    3c90:	1004c03a 	cmpne	r2,r2,zero
    3c94:	2084b03a 	or	r2,r4,r2
    3c98:	144001cc 	andi	r17,r2,7
    3c9c:	88000d1e 	bne	r17,zero,3cd4 <__muldf3+0x6e0>
    3ca0:	000b883a 	mov	r5,zero
    3ca4:	1028d0fa 	srli	r20,r2,3
    3ca8:	b02b883a 	mov	r21,r22
    3cac:	0005883a 	mov	r2,zero
    3cb0:	a468b03a 	or	r20,r20,r17
    3cb4:	003eae06 	br	3770 <__alt_mem_onchip_memory+0xf7803770>
    3cb8:	1007883a 	mov	r3,r2
    3cbc:	0023883a 	mov	r17,zero
    3cc0:	880a927a 	slli	r5,r17,9
    3cc4:	1805883a 	mov	r2,r3
    3cc8:	8822977a 	slli	r17,r17,29
    3ccc:	280ad33a 	srli	r5,r5,12
    3cd0:	003ff406 	br	3ca4 <__alt_mem_onchip_memory+0xf7803ca4>
    3cd4:	10c003cc 	andi	r3,r2,15
    3cd8:	01000104 	movi	r4,4
    3cdc:	193ff626 	beq	r3,r4,3cb8 <__alt_mem_onchip_memory+0xf7803cb8>
    3ce0:	0023883a 	mov	r17,zero
    3ce4:	003fd506 	br	3c3c <__alt_mem_onchip_memory+0xf7803c3c>
    3ce8:	0005883a 	mov	r2,zero
    3cec:	003fe706 	br	3c8c <__alt_mem_onchip_memory+0xf7803c8c>
    3cf0:	00800434 	movhi	r2,16
    3cf4:	89400234 	orhi	r5,r17,8
    3cf8:	10bfffc4 	addi	r2,r2,-1
    3cfc:	b02b883a 	mov	r21,r22
    3d00:	288a703a 	and	r5,r5,r2
    3d04:	4029883a 	mov	r20,r8
    3d08:	003eff06 	br	3908 <__alt_mem_onchip_memory+0xf7803908>

00003d0c <__subdf3>:
    3d0c:	02000434 	movhi	r8,16
    3d10:	423fffc4 	addi	r8,r8,-1
    3d14:	defffb04 	addi	sp,sp,-20
    3d18:	2a14703a 	and	r10,r5,r8
    3d1c:	3812d53a 	srli	r9,r7,20
    3d20:	3a10703a 	and	r8,r7,r8
    3d24:	2006d77a 	srli	r3,r4,29
    3d28:	3004d77a 	srli	r2,r6,29
    3d2c:	dc000015 	stw	r16,0(sp)
    3d30:	501490fa 	slli	r10,r10,3
    3d34:	2820d53a 	srli	r16,r5,20
    3d38:	401090fa 	slli	r8,r8,3
    3d3c:	dc800215 	stw	r18,8(sp)
    3d40:	dc400115 	stw	r17,4(sp)
    3d44:	dfc00415 	stw	ra,16(sp)
    3d48:	202290fa 	slli	r17,r4,3
    3d4c:	dcc00315 	stw	r19,12(sp)
    3d50:	4a41ffcc 	andi	r9,r9,2047
    3d54:	0101ffc4 	movi	r4,2047
    3d58:	2824d7fa 	srli	r18,r5,31
    3d5c:	8401ffcc 	andi	r16,r16,2047
    3d60:	50c6b03a 	or	r3,r10,r3
    3d64:	380ed7fa 	srli	r7,r7,31
    3d68:	408ab03a 	or	r5,r8,r2
    3d6c:	300c90fa 	slli	r6,r6,3
    3d70:	49009626 	beq	r9,r4,3fcc <__subdf3+0x2c0>
    3d74:	39c0005c 	xori	r7,r7,1
    3d78:	8245c83a 	sub	r2,r16,r9
    3d7c:	3c807426 	beq	r7,r18,3f50 <__subdf3+0x244>
    3d80:	0080af0e 	bge	zero,r2,4040 <__subdf3+0x334>
    3d84:	48002a1e 	bne	r9,zero,3e30 <__subdf3+0x124>
    3d88:	2988b03a 	or	r4,r5,r6
    3d8c:	20009a1e 	bne	r4,zero,3ff8 <__subdf3+0x2ec>
    3d90:	888001cc 	andi	r2,r17,7
    3d94:	10000726 	beq	r2,zero,3db4 <__subdf3+0xa8>
    3d98:	888003cc 	andi	r2,r17,15
    3d9c:	01000104 	movi	r4,4
    3da0:	11000426 	beq	r2,r4,3db4 <__subdf3+0xa8>
    3da4:	890b883a 	add	r5,r17,r4
    3da8:	2c63803a 	cmpltu	r17,r5,r17
    3dac:	1c47883a 	add	r3,r3,r17
    3db0:	2823883a 	mov	r17,r5
    3db4:	1880202c 	andhi	r2,r3,128
    3db8:	10005926 	beq	r2,zero,3f20 <__subdf3+0x214>
    3dbc:	84000044 	addi	r16,r16,1
    3dc0:	0081ffc4 	movi	r2,2047
    3dc4:	8080be26 	beq	r16,r2,40c0 <__subdf3+0x3b4>
    3dc8:	017fe034 	movhi	r5,65408
    3dcc:	297fffc4 	addi	r5,r5,-1
    3dd0:	1946703a 	and	r3,r3,r5
    3dd4:	1804977a 	slli	r2,r3,29
    3dd8:	1806927a 	slli	r3,r3,9
    3ddc:	8822d0fa 	srli	r17,r17,3
    3de0:	8401ffcc 	andi	r16,r16,2047
    3de4:	180ad33a 	srli	r5,r3,12
    3de8:	9100004c 	andi	r4,r18,1
    3dec:	1444b03a 	or	r2,r2,r17
    3df0:	80c1ffcc 	andi	r3,r16,2047
    3df4:	1820953a 	slli	r16,r3,20
    3df8:	20c03fcc 	andi	r3,r4,255
    3dfc:	180897fa 	slli	r4,r3,31
    3e00:	00c00434 	movhi	r3,16
    3e04:	18ffffc4 	addi	r3,r3,-1
    3e08:	28c6703a 	and	r3,r5,r3
    3e0c:	1c06b03a 	or	r3,r3,r16
    3e10:	1906b03a 	or	r3,r3,r4
    3e14:	dfc00417 	ldw	ra,16(sp)
    3e18:	dcc00317 	ldw	r19,12(sp)
    3e1c:	dc800217 	ldw	r18,8(sp)
    3e20:	dc400117 	ldw	r17,4(sp)
    3e24:	dc000017 	ldw	r16,0(sp)
    3e28:	dec00504 	addi	sp,sp,20
    3e2c:	f800283a 	ret
    3e30:	0101ffc4 	movi	r4,2047
    3e34:	813fd626 	beq	r16,r4,3d90 <__alt_mem_onchip_memory+0xf7803d90>
    3e38:	29402034 	orhi	r5,r5,128
    3e3c:	01000e04 	movi	r4,56
    3e40:	2080a316 	blt	r4,r2,40d0 <__subdf3+0x3c4>
    3e44:	010007c4 	movi	r4,31
    3e48:	2080c616 	blt	r4,r2,4164 <__subdf3+0x458>
    3e4c:	01000804 	movi	r4,32
    3e50:	2089c83a 	sub	r4,r4,r2
    3e54:	2910983a 	sll	r8,r5,r4
    3e58:	308ed83a 	srl	r7,r6,r2
    3e5c:	3108983a 	sll	r4,r6,r4
    3e60:	2884d83a 	srl	r2,r5,r2
    3e64:	41ccb03a 	or	r6,r8,r7
    3e68:	2008c03a 	cmpne	r4,r4,zero
    3e6c:	310cb03a 	or	r6,r6,r4
    3e70:	898dc83a 	sub	r6,r17,r6
    3e74:	89a3803a 	cmpltu	r17,r17,r6
    3e78:	1887c83a 	sub	r3,r3,r2
    3e7c:	1c47c83a 	sub	r3,r3,r17
    3e80:	3023883a 	mov	r17,r6
    3e84:	1880202c 	andhi	r2,r3,128
    3e88:	10002326 	beq	r2,zero,3f18 <__subdf3+0x20c>
    3e8c:	04c02034 	movhi	r19,128
    3e90:	9cffffc4 	addi	r19,r19,-1
    3e94:	1ce6703a 	and	r19,r3,r19
    3e98:	98007a26 	beq	r19,zero,4084 <__subdf3+0x378>
    3e9c:	9809883a 	mov	r4,r19
    3ea0:	0004a1c0 	call	4a1c <__clzsi2>
    3ea4:	113ffe04 	addi	r4,r2,-8
    3ea8:	00c007c4 	movi	r3,31
    3eac:	19007b16 	blt	r3,r4,409c <__subdf3+0x390>
    3eb0:	00800804 	movi	r2,32
    3eb4:	1105c83a 	sub	r2,r2,r4
    3eb8:	8884d83a 	srl	r2,r17,r2
    3ebc:	9906983a 	sll	r3,r19,r4
    3ec0:	8922983a 	sll	r17,r17,r4
    3ec4:	10c4b03a 	or	r2,r2,r3
    3ec8:	24007816 	blt	r4,r16,40ac <__subdf3+0x3a0>
    3ecc:	2421c83a 	sub	r16,r4,r16
    3ed0:	80c00044 	addi	r3,r16,1
    3ed4:	010007c4 	movi	r4,31
    3ed8:	20c09516 	blt	r4,r3,4130 <__subdf3+0x424>
    3edc:	01400804 	movi	r5,32
    3ee0:	28cbc83a 	sub	r5,r5,r3
    3ee4:	88c8d83a 	srl	r4,r17,r3
    3ee8:	8962983a 	sll	r17,r17,r5
    3eec:	114a983a 	sll	r5,r2,r5
    3ef0:	10c6d83a 	srl	r3,r2,r3
    3ef4:	8804c03a 	cmpne	r2,r17,zero
    3ef8:	290ab03a 	or	r5,r5,r4
    3efc:	28a2b03a 	or	r17,r5,r2
    3f00:	0021883a 	mov	r16,zero
    3f04:	003fa206 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    3f08:	2090b03a 	or	r8,r4,r2
    3f0c:	40018e26 	beq	r8,zero,4548 <__subdf3+0x83c>
    3f10:	1007883a 	mov	r3,r2
    3f14:	2023883a 	mov	r17,r4
    3f18:	888001cc 	andi	r2,r17,7
    3f1c:	103f9e1e 	bne	r2,zero,3d98 <__alt_mem_onchip_memory+0xf7803d98>
    3f20:	1804977a 	slli	r2,r3,29
    3f24:	8822d0fa 	srli	r17,r17,3
    3f28:	1810d0fa 	srli	r8,r3,3
    3f2c:	9100004c 	andi	r4,r18,1
    3f30:	1444b03a 	or	r2,r2,r17
    3f34:	00c1ffc4 	movi	r3,2047
    3f38:	80c02826 	beq	r16,r3,3fdc <__subdf3+0x2d0>
    3f3c:	01400434 	movhi	r5,16
    3f40:	297fffc4 	addi	r5,r5,-1
    3f44:	80e0703a 	and	r16,r16,r3
    3f48:	414a703a 	and	r5,r8,r5
    3f4c:	003fa806 	br	3df0 <__alt_mem_onchip_memory+0xf7803df0>
    3f50:	0080630e 	bge	zero,r2,40e0 <__subdf3+0x3d4>
    3f54:	48003026 	beq	r9,zero,4018 <__subdf3+0x30c>
    3f58:	0101ffc4 	movi	r4,2047
    3f5c:	813f8c26 	beq	r16,r4,3d90 <__alt_mem_onchip_memory+0xf7803d90>
    3f60:	29402034 	orhi	r5,r5,128
    3f64:	01000e04 	movi	r4,56
    3f68:	2080a90e 	bge	r4,r2,4210 <__subdf3+0x504>
    3f6c:	298cb03a 	or	r6,r5,r6
    3f70:	3012c03a 	cmpne	r9,r6,zero
    3f74:	0005883a 	mov	r2,zero
    3f78:	4c53883a 	add	r9,r9,r17
    3f7c:	4c63803a 	cmpltu	r17,r9,r17
    3f80:	10c7883a 	add	r3,r2,r3
    3f84:	88c7883a 	add	r3,r17,r3
    3f88:	4823883a 	mov	r17,r9
    3f8c:	1880202c 	andhi	r2,r3,128
    3f90:	1000d026 	beq	r2,zero,42d4 <__subdf3+0x5c8>
    3f94:	84000044 	addi	r16,r16,1
    3f98:	0081ffc4 	movi	r2,2047
    3f9c:	8080fe26 	beq	r16,r2,4398 <__subdf3+0x68c>
    3fa0:	00bfe034 	movhi	r2,65408
    3fa4:	10bfffc4 	addi	r2,r2,-1
    3fa8:	1886703a 	and	r3,r3,r2
    3fac:	880ad07a 	srli	r5,r17,1
    3fb0:	180497fa 	slli	r2,r3,31
    3fb4:	8900004c 	andi	r4,r17,1
    3fb8:	2922b03a 	or	r17,r5,r4
    3fbc:	1806d07a 	srli	r3,r3,1
    3fc0:	1462b03a 	or	r17,r2,r17
    3fc4:	3825883a 	mov	r18,r7
    3fc8:	003f7106 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    3fcc:	2984b03a 	or	r2,r5,r6
    3fd0:	103f6826 	beq	r2,zero,3d74 <__alt_mem_onchip_memory+0xf7803d74>
    3fd4:	39c03fcc 	andi	r7,r7,255
    3fd8:	003f6706 	br	3d78 <__alt_mem_onchip_memory+0xf7803d78>
    3fdc:	4086b03a 	or	r3,r8,r2
    3fe0:	18015226 	beq	r3,zero,452c <__subdf3+0x820>
    3fe4:	00c00434 	movhi	r3,16
    3fe8:	41400234 	orhi	r5,r8,8
    3fec:	18ffffc4 	addi	r3,r3,-1
    3ff0:	28ca703a 	and	r5,r5,r3
    3ff4:	003f7e06 	br	3df0 <__alt_mem_onchip_memory+0xf7803df0>
    3ff8:	10bfffc4 	addi	r2,r2,-1
    3ffc:	1000491e 	bne	r2,zero,4124 <__subdf3+0x418>
    4000:	898fc83a 	sub	r7,r17,r6
    4004:	89e3803a 	cmpltu	r17,r17,r7
    4008:	1947c83a 	sub	r3,r3,r5
    400c:	1c47c83a 	sub	r3,r3,r17
    4010:	3823883a 	mov	r17,r7
    4014:	003f9b06 	br	3e84 <__alt_mem_onchip_memory+0xf7803e84>
    4018:	2988b03a 	or	r4,r5,r6
    401c:	203f5c26 	beq	r4,zero,3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4020:	10bfffc4 	addi	r2,r2,-1
    4024:	1000931e 	bne	r2,zero,4274 <__subdf3+0x568>
    4028:	898d883a 	add	r6,r17,r6
    402c:	3463803a 	cmpltu	r17,r6,r17
    4030:	1947883a 	add	r3,r3,r5
    4034:	88c7883a 	add	r3,r17,r3
    4038:	3023883a 	mov	r17,r6
    403c:	003fd306 	br	3f8c <__alt_mem_onchip_memory+0xf7803f8c>
    4040:	1000541e 	bne	r2,zero,4194 <__subdf3+0x488>
    4044:	80800044 	addi	r2,r16,1
    4048:	1081ffcc 	andi	r2,r2,2047
    404c:	01000044 	movi	r4,1
    4050:	2080a20e 	bge	r4,r2,42dc <__subdf3+0x5d0>
    4054:	8989c83a 	sub	r4,r17,r6
    4058:	8905803a 	cmpltu	r2,r17,r4
    405c:	1967c83a 	sub	r19,r3,r5
    4060:	98a7c83a 	sub	r19,r19,r2
    4064:	9880202c 	andhi	r2,r19,128
    4068:	10006326 	beq	r2,zero,41f8 <__subdf3+0x4ec>
    406c:	3463c83a 	sub	r17,r6,r17
    4070:	28c7c83a 	sub	r3,r5,r3
    4074:	344d803a 	cmpltu	r6,r6,r17
    4078:	19a7c83a 	sub	r19,r3,r6
    407c:	3825883a 	mov	r18,r7
    4080:	983f861e 	bne	r19,zero,3e9c <__alt_mem_onchip_memory+0xf7803e9c>
    4084:	8809883a 	mov	r4,r17
    4088:	0004a1c0 	call	4a1c <__clzsi2>
    408c:	10800804 	addi	r2,r2,32
    4090:	113ffe04 	addi	r4,r2,-8
    4094:	00c007c4 	movi	r3,31
    4098:	193f850e 	bge	r3,r4,3eb0 <__alt_mem_onchip_memory+0xf7803eb0>
    409c:	10bff604 	addi	r2,r2,-40
    40a0:	8884983a 	sll	r2,r17,r2
    40a4:	0023883a 	mov	r17,zero
    40a8:	243f880e 	bge	r4,r16,3ecc <__alt_mem_onchip_memory+0xf7803ecc>
    40ac:	00ffe034 	movhi	r3,65408
    40b0:	18ffffc4 	addi	r3,r3,-1
    40b4:	8121c83a 	sub	r16,r16,r4
    40b8:	10c6703a 	and	r3,r2,r3
    40bc:	003f3406 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    40c0:	9100004c 	andi	r4,r18,1
    40c4:	000b883a 	mov	r5,zero
    40c8:	0005883a 	mov	r2,zero
    40cc:	003f4806 	br	3df0 <__alt_mem_onchip_memory+0xf7803df0>
    40d0:	298cb03a 	or	r6,r5,r6
    40d4:	300cc03a 	cmpne	r6,r6,zero
    40d8:	0005883a 	mov	r2,zero
    40dc:	003f6406 	br	3e70 <__alt_mem_onchip_memory+0xf7803e70>
    40e0:	10009a1e 	bne	r2,zero,434c <__subdf3+0x640>
    40e4:	82400044 	addi	r9,r16,1
    40e8:	4881ffcc 	andi	r2,r9,2047
    40ec:	02800044 	movi	r10,1
    40f0:	5080670e 	bge	r10,r2,4290 <__subdf3+0x584>
    40f4:	0081ffc4 	movi	r2,2047
    40f8:	4880af26 	beq	r9,r2,43b8 <__subdf3+0x6ac>
    40fc:	898d883a 	add	r6,r17,r6
    4100:	1945883a 	add	r2,r3,r5
    4104:	3447803a 	cmpltu	r3,r6,r17
    4108:	1887883a 	add	r3,r3,r2
    410c:	182297fa 	slli	r17,r3,31
    4110:	300cd07a 	srli	r6,r6,1
    4114:	1806d07a 	srli	r3,r3,1
    4118:	4821883a 	mov	r16,r9
    411c:	89a2b03a 	or	r17,r17,r6
    4120:	003f1b06 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4124:	0101ffc4 	movi	r4,2047
    4128:	813f441e 	bne	r16,r4,3e3c <__alt_mem_onchip_memory+0xf7803e3c>
    412c:	003f1806 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4130:	843ff844 	addi	r16,r16,-31
    4134:	01400804 	movi	r5,32
    4138:	1408d83a 	srl	r4,r2,r16
    413c:	19405026 	beq	r3,r5,4280 <__subdf3+0x574>
    4140:	01401004 	movi	r5,64
    4144:	28c7c83a 	sub	r3,r5,r3
    4148:	10c4983a 	sll	r2,r2,r3
    414c:	88a2b03a 	or	r17,r17,r2
    4150:	8822c03a 	cmpne	r17,r17,zero
    4154:	2462b03a 	or	r17,r4,r17
    4158:	0007883a 	mov	r3,zero
    415c:	0021883a 	mov	r16,zero
    4160:	003f6d06 	br	3f18 <__alt_mem_onchip_memory+0xf7803f18>
    4164:	11fff804 	addi	r7,r2,-32
    4168:	01000804 	movi	r4,32
    416c:	29ced83a 	srl	r7,r5,r7
    4170:	11004526 	beq	r2,r4,4288 <__subdf3+0x57c>
    4174:	01001004 	movi	r4,64
    4178:	2089c83a 	sub	r4,r4,r2
    417c:	2904983a 	sll	r2,r5,r4
    4180:	118cb03a 	or	r6,r2,r6
    4184:	300cc03a 	cmpne	r6,r6,zero
    4188:	398cb03a 	or	r6,r7,r6
    418c:	0005883a 	mov	r2,zero
    4190:	003f3706 	br	3e70 <__alt_mem_onchip_memory+0xf7803e70>
    4194:	80002a26 	beq	r16,zero,4240 <__subdf3+0x534>
    4198:	0101ffc4 	movi	r4,2047
    419c:	49006626 	beq	r9,r4,4338 <__subdf3+0x62c>
    41a0:	0085c83a 	sub	r2,zero,r2
    41a4:	18c02034 	orhi	r3,r3,128
    41a8:	01000e04 	movi	r4,56
    41ac:	20807e16 	blt	r4,r2,43a8 <__subdf3+0x69c>
    41b0:	010007c4 	movi	r4,31
    41b4:	2080e716 	blt	r4,r2,4554 <__subdf3+0x848>
    41b8:	01000804 	movi	r4,32
    41bc:	2089c83a 	sub	r4,r4,r2
    41c0:	1914983a 	sll	r10,r3,r4
    41c4:	8890d83a 	srl	r8,r17,r2
    41c8:	8908983a 	sll	r4,r17,r4
    41cc:	1884d83a 	srl	r2,r3,r2
    41d0:	5222b03a 	or	r17,r10,r8
    41d4:	2006c03a 	cmpne	r3,r4,zero
    41d8:	88e2b03a 	or	r17,r17,r3
    41dc:	3463c83a 	sub	r17,r6,r17
    41e0:	2885c83a 	sub	r2,r5,r2
    41e4:	344d803a 	cmpltu	r6,r6,r17
    41e8:	1187c83a 	sub	r3,r2,r6
    41ec:	4821883a 	mov	r16,r9
    41f0:	3825883a 	mov	r18,r7
    41f4:	003f2306 	br	3e84 <__alt_mem_onchip_memory+0xf7803e84>
    41f8:	24d0b03a 	or	r8,r4,r19
    41fc:	40001b1e 	bne	r8,zero,426c <__subdf3+0x560>
    4200:	0005883a 	mov	r2,zero
    4204:	0009883a 	mov	r4,zero
    4208:	0021883a 	mov	r16,zero
    420c:	003f4906 	br	3f34 <__alt_mem_onchip_memory+0xf7803f34>
    4210:	010007c4 	movi	r4,31
    4214:	20803a16 	blt	r4,r2,4300 <__subdf3+0x5f4>
    4218:	01000804 	movi	r4,32
    421c:	2089c83a 	sub	r4,r4,r2
    4220:	2912983a 	sll	r9,r5,r4
    4224:	3090d83a 	srl	r8,r6,r2
    4228:	3108983a 	sll	r4,r6,r4
    422c:	2884d83a 	srl	r2,r5,r2
    4230:	4a12b03a 	or	r9,r9,r8
    4234:	2008c03a 	cmpne	r4,r4,zero
    4238:	4912b03a 	or	r9,r9,r4
    423c:	003f4e06 	br	3f78 <__alt_mem_onchip_memory+0xf7803f78>
    4240:	1c48b03a 	or	r4,r3,r17
    4244:	20003c26 	beq	r4,zero,4338 <__subdf3+0x62c>
    4248:	0084303a 	nor	r2,zero,r2
    424c:	1000381e 	bne	r2,zero,4330 <__subdf3+0x624>
    4250:	3463c83a 	sub	r17,r6,r17
    4254:	28c5c83a 	sub	r2,r5,r3
    4258:	344d803a 	cmpltu	r6,r6,r17
    425c:	1187c83a 	sub	r3,r2,r6
    4260:	4821883a 	mov	r16,r9
    4264:	3825883a 	mov	r18,r7
    4268:	003f0606 	br	3e84 <__alt_mem_onchip_memory+0xf7803e84>
    426c:	2023883a 	mov	r17,r4
    4270:	003f0906 	br	3e98 <__alt_mem_onchip_memory+0xf7803e98>
    4274:	0101ffc4 	movi	r4,2047
    4278:	813f3a1e 	bne	r16,r4,3f64 <__alt_mem_onchip_memory+0xf7803f64>
    427c:	003ec406 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4280:	0005883a 	mov	r2,zero
    4284:	003fb106 	br	414c <__alt_mem_onchip_memory+0xf780414c>
    4288:	0005883a 	mov	r2,zero
    428c:	003fbc06 	br	4180 <__alt_mem_onchip_memory+0xf7804180>
    4290:	1c44b03a 	or	r2,r3,r17
    4294:	80008e1e 	bne	r16,zero,44d0 <__subdf3+0x7c4>
    4298:	1000c826 	beq	r2,zero,45bc <__subdf3+0x8b0>
    429c:	2984b03a 	or	r2,r5,r6
    42a0:	103ebb26 	beq	r2,zero,3d90 <__alt_mem_onchip_memory+0xf7803d90>
    42a4:	8989883a 	add	r4,r17,r6
    42a8:	1945883a 	add	r2,r3,r5
    42ac:	2447803a 	cmpltu	r3,r4,r17
    42b0:	1887883a 	add	r3,r3,r2
    42b4:	1880202c 	andhi	r2,r3,128
    42b8:	2023883a 	mov	r17,r4
    42bc:	103f1626 	beq	r2,zero,3f18 <__alt_mem_onchip_memory+0xf7803f18>
    42c0:	00bfe034 	movhi	r2,65408
    42c4:	10bfffc4 	addi	r2,r2,-1
    42c8:	5021883a 	mov	r16,r10
    42cc:	1886703a 	and	r3,r3,r2
    42d0:	003eaf06 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    42d4:	3825883a 	mov	r18,r7
    42d8:	003f0f06 	br	3f18 <__alt_mem_onchip_memory+0xf7803f18>
    42dc:	1c44b03a 	or	r2,r3,r17
    42e0:	8000251e 	bne	r16,zero,4378 <__subdf3+0x66c>
    42e4:	1000661e 	bne	r2,zero,4480 <__subdf3+0x774>
    42e8:	2990b03a 	or	r8,r5,r6
    42ec:	40009626 	beq	r8,zero,4548 <__subdf3+0x83c>
    42f0:	2807883a 	mov	r3,r5
    42f4:	3023883a 	mov	r17,r6
    42f8:	3825883a 	mov	r18,r7
    42fc:	003ea406 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4300:	127ff804 	addi	r9,r2,-32
    4304:	01000804 	movi	r4,32
    4308:	2a52d83a 	srl	r9,r5,r9
    430c:	11008c26 	beq	r2,r4,4540 <__subdf3+0x834>
    4310:	01001004 	movi	r4,64
    4314:	2085c83a 	sub	r2,r4,r2
    4318:	2884983a 	sll	r2,r5,r2
    431c:	118cb03a 	or	r6,r2,r6
    4320:	300cc03a 	cmpne	r6,r6,zero
    4324:	4992b03a 	or	r9,r9,r6
    4328:	0005883a 	mov	r2,zero
    432c:	003f1206 	br	3f78 <__alt_mem_onchip_memory+0xf7803f78>
    4330:	0101ffc4 	movi	r4,2047
    4334:	493f9c1e 	bne	r9,r4,41a8 <__alt_mem_onchip_memory+0xf78041a8>
    4338:	2807883a 	mov	r3,r5
    433c:	3023883a 	mov	r17,r6
    4340:	4821883a 	mov	r16,r9
    4344:	3825883a 	mov	r18,r7
    4348:	003e9106 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    434c:	80001f1e 	bne	r16,zero,43cc <__subdf3+0x6c0>
    4350:	1c48b03a 	or	r4,r3,r17
    4354:	20005a26 	beq	r4,zero,44c0 <__subdf3+0x7b4>
    4358:	0084303a 	nor	r2,zero,r2
    435c:	1000561e 	bne	r2,zero,44b8 <__subdf3+0x7ac>
    4360:	89a3883a 	add	r17,r17,r6
    4364:	1945883a 	add	r2,r3,r5
    4368:	898d803a 	cmpltu	r6,r17,r6
    436c:	3087883a 	add	r3,r6,r2
    4370:	4821883a 	mov	r16,r9
    4374:	003f0506 	br	3f8c <__alt_mem_onchip_memory+0xf7803f8c>
    4378:	10002b1e 	bne	r2,zero,4428 <__subdf3+0x71c>
    437c:	2984b03a 	or	r2,r5,r6
    4380:	10008026 	beq	r2,zero,4584 <__subdf3+0x878>
    4384:	2807883a 	mov	r3,r5
    4388:	3023883a 	mov	r17,r6
    438c:	3825883a 	mov	r18,r7
    4390:	0401ffc4 	movi	r16,2047
    4394:	003e7e06 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4398:	3809883a 	mov	r4,r7
    439c:	0011883a 	mov	r8,zero
    43a0:	0005883a 	mov	r2,zero
    43a4:	003ee306 	br	3f34 <__alt_mem_onchip_memory+0xf7803f34>
    43a8:	1c62b03a 	or	r17,r3,r17
    43ac:	8822c03a 	cmpne	r17,r17,zero
    43b0:	0005883a 	mov	r2,zero
    43b4:	003f8906 	br	41dc <__alt_mem_onchip_memory+0xf78041dc>
    43b8:	3809883a 	mov	r4,r7
    43bc:	4821883a 	mov	r16,r9
    43c0:	0011883a 	mov	r8,zero
    43c4:	0005883a 	mov	r2,zero
    43c8:	003eda06 	br	3f34 <__alt_mem_onchip_memory+0xf7803f34>
    43cc:	0101ffc4 	movi	r4,2047
    43d0:	49003b26 	beq	r9,r4,44c0 <__subdf3+0x7b4>
    43d4:	0085c83a 	sub	r2,zero,r2
    43d8:	18c02034 	orhi	r3,r3,128
    43dc:	01000e04 	movi	r4,56
    43e0:	20806e16 	blt	r4,r2,459c <__subdf3+0x890>
    43e4:	010007c4 	movi	r4,31
    43e8:	20807716 	blt	r4,r2,45c8 <__subdf3+0x8bc>
    43ec:	01000804 	movi	r4,32
    43f0:	2089c83a 	sub	r4,r4,r2
    43f4:	1914983a 	sll	r10,r3,r4
    43f8:	8890d83a 	srl	r8,r17,r2
    43fc:	8908983a 	sll	r4,r17,r4
    4400:	1884d83a 	srl	r2,r3,r2
    4404:	5222b03a 	or	r17,r10,r8
    4408:	2006c03a 	cmpne	r3,r4,zero
    440c:	88e2b03a 	or	r17,r17,r3
    4410:	89a3883a 	add	r17,r17,r6
    4414:	1145883a 	add	r2,r2,r5
    4418:	898d803a 	cmpltu	r6,r17,r6
    441c:	3087883a 	add	r3,r6,r2
    4420:	4821883a 	mov	r16,r9
    4424:	003ed906 	br	3f8c <__alt_mem_onchip_memory+0xf7803f8c>
    4428:	2984b03a 	or	r2,r5,r6
    442c:	10004226 	beq	r2,zero,4538 <__subdf3+0x82c>
    4430:	1808d0fa 	srli	r4,r3,3
    4434:	8822d0fa 	srli	r17,r17,3
    4438:	1806977a 	slli	r3,r3,29
    443c:	2080022c 	andhi	r2,r4,8
    4440:	1c62b03a 	or	r17,r3,r17
    4444:	10000826 	beq	r2,zero,4468 <__subdf3+0x75c>
    4448:	2812d0fa 	srli	r9,r5,3
    444c:	4880022c 	andhi	r2,r9,8
    4450:	1000051e 	bne	r2,zero,4468 <__subdf3+0x75c>
    4454:	300cd0fa 	srli	r6,r6,3
    4458:	2804977a 	slli	r2,r5,29
    445c:	4809883a 	mov	r4,r9
    4460:	3825883a 	mov	r18,r7
    4464:	11a2b03a 	or	r17,r2,r6
    4468:	8806d77a 	srli	r3,r17,29
    446c:	200890fa 	slli	r4,r4,3
    4470:	882290fa 	slli	r17,r17,3
    4474:	0401ffc4 	movi	r16,2047
    4478:	1906b03a 	or	r3,r3,r4
    447c:	003e4406 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4480:	2984b03a 	or	r2,r5,r6
    4484:	103e4226 	beq	r2,zero,3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4488:	8989c83a 	sub	r4,r17,r6
    448c:	8911803a 	cmpltu	r8,r17,r4
    4490:	1945c83a 	sub	r2,r3,r5
    4494:	1205c83a 	sub	r2,r2,r8
    4498:	1200202c 	andhi	r8,r2,128
    449c:	403e9a26 	beq	r8,zero,3f08 <__alt_mem_onchip_memory+0xf7803f08>
    44a0:	3463c83a 	sub	r17,r6,r17
    44a4:	28c5c83a 	sub	r2,r5,r3
    44a8:	344d803a 	cmpltu	r6,r6,r17
    44ac:	1187c83a 	sub	r3,r2,r6
    44b0:	3825883a 	mov	r18,r7
    44b4:	003e3606 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    44b8:	0101ffc4 	movi	r4,2047
    44bc:	493fc71e 	bne	r9,r4,43dc <__alt_mem_onchip_memory+0xf78043dc>
    44c0:	2807883a 	mov	r3,r5
    44c4:	3023883a 	mov	r17,r6
    44c8:	4821883a 	mov	r16,r9
    44cc:	003e3006 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    44d0:	10003626 	beq	r2,zero,45ac <__subdf3+0x8a0>
    44d4:	2984b03a 	or	r2,r5,r6
    44d8:	10001726 	beq	r2,zero,4538 <__subdf3+0x82c>
    44dc:	1808d0fa 	srli	r4,r3,3
    44e0:	8822d0fa 	srli	r17,r17,3
    44e4:	1806977a 	slli	r3,r3,29
    44e8:	2080022c 	andhi	r2,r4,8
    44ec:	1c62b03a 	or	r17,r3,r17
    44f0:	10000726 	beq	r2,zero,4510 <__subdf3+0x804>
    44f4:	2812d0fa 	srli	r9,r5,3
    44f8:	4880022c 	andhi	r2,r9,8
    44fc:	1000041e 	bne	r2,zero,4510 <__subdf3+0x804>
    4500:	300cd0fa 	srli	r6,r6,3
    4504:	2804977a 	slli	r2,r5,29
    4508:	4809883a 	mov	r4,r9
    450c:	11a2b03a 	or	r17,r2,r6
    4510:	8806d77a 	srli	r3,r17,29
    4514:	200890fa 	slli	r4,r4,3
    4518:	882290fa 	slli	r17,r17,3
    451c:	3825883a 	mov	r18,r7
    4520:	1906b03a 	or	r3,r3,r4
    4524:	0401ffc4 	movi	r16,2047
    4528:	003e1906 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    452c:	000b883a 	mov	r5,zero
    4530:	0005883a 	mov	r2,zero
    4534:	003e2e06 	br	3df0 <__alt_mem_onchip_memory+0xf7803df0>
    4538:	0401ffc4 	movi	r16,2047
    453c:	003e1406 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    4540:	0005883a 	mov	r2,zero
    4544:	003f7506 	br	431c <__alt_mem_onchip_memory+0xf780431c>
    4548:	0005883a 	mov	r2,zero
    454c:	0009883a 	mov	r4,zero
    4550:	003e7806 	br	3f34 <__alt_mem_onchip_memory+0xf7803f34>
    4554:	123ff804 	addi	r8,r2,-32
    4558:	01000804 	movi	r4,32
    455c:	1a10d83a 	srl	r8,r3,r8
    4560:	11002526 	beq	r2,r4,45f8 <__subdf3+0x8ec>
    4564:	01001004 	movi	r4,64
    4568:	2085c83a 	sub	r2,r4,r2
    456c:	1884983a 	sll	r2,r3,r2
    4570:	1444b03a 	or	r2,r2,r17
    4574:	1004c03a 	cmpne	r2,r2,zero
    4578:	40a2b03a 	or	r17,r8,r2
    457c:	0005883a 	mov	r2,zero
    4580:	003f1606 	br	41dc <__alt_mem_onchip_memory+0xf78041dc>
    4584:	02000434 	movhi	r8,16
    4588:	0009883a 	mov	r4,zero
    458c:	423fffc4 	addi	r8,r8,-1
    4590:	00bfffc4 	movi	r2,-1
    4594:	0401ffc4 	movi	r16,2047
    4598:	003e6606 	br	3f34 <__alt_mem_onchip_memory+0xf7803f34>
    459c:	1c62b03a 	or	r17,r3,r17
    45a0:	8822c03a 	cmpne	r17,r17,zero
    45a4:	0005883a 	mov	r2,zero
    45a8:	003f9906 	br	4410 <__alt_mem_onchip_memory+0xf7804410>
    45ac:	2807883a 	mov	r3,r5
    45b0:	3023883a 	mov	r17,r6
    45b4:	0401ffc4 	movi	r16,2047
    45b8:	003df506 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    45bc:	2807883a 	mov	r3,r5
    45c0:	3023883a 	mov	r17,r6
    45c4:	003df206 	br	3d90 <__alt_mem_onchip_memory+0xf7803d90>
    45c8:	123ff804 	addi	r8,r2,-32
    45cc:	01000804 	movi	r4,32
    45d0:	1a10d83a 	srl	r8,r3,r8
    45d4:	11000a26 	beq	r2,r4,4600 <__subdf3+0x8f4>
    45d8:	01001004 	movi	r4,64
    45dc:	2085c83a 	sub	r2,r4,r2
    45e0:	1884983a 	sll	r2,r3,r2
    45e4:	1444b03a 	or	r2,r2,r17
    45e8:	1004c03a 	cmpne	r2,r2,zero
    45ec:	40a2b03a 	or	r17,r8,r2
    45f0:	0005883a 	mov	r2,zero
    45f4:	003f8606 	br	4410 <__alt_mem_onchip_memory+0xf7804410>
    45f8:	0005883a 	mov	r2,zero
    45fc:	003fdc06 	br	4570 <__alt_mem_onchip_memory+0xf7804570>
    4600:	0005883a 	mov	r2,zero
    4604:	003ff706 	br	45e4 <__alt_mem_onchip_memory+0xf78045e4>

00004608 <__fixdfsi>:
    4608:	280cd53a 	srli	r6,r5,20
    460c:	00c00434 	movhi	r3,16
    4610:	18ffffc4 	addi	r3,r3,-1
    4614:	3181ffcc 	andi	r6,r6,2047
    4618:	01c0ff84 	movi	r7,1022
    461c:	28c6703a 	and	r3,r5,r3
    4620:	280ad7fa 	srli	r5,r5,31
    4624:	3980120e 	bge	r7,r6,4670 <__fixdfsi+0x68>
    4628:	00810744 	movi	r2,1053
    462c:	11800c16 	blt	r2,r6,4660 <__fixdfsi+0x58>
    4630:	00810cc4 	movi	r2,1075
    4634:	1185c83a 	sub	r2,r2,r6
    4638:	01c007c4 	movi	r7,31
    463c:	18c00434 	orhi	r3,r3,16
    4640:	38800d16 	blt	r7,r2,4678 <__fixdfsi+0x70>
    4644:	31befb44 	addi	r6,r6,-1043
    4648:	2084d83a 	srl	r2,r4,r2
    464c:	1986983a 	sll	r3,r3,r6
    4650:	1884b03a 	or	r2,r3,r2
    4654:	28000726 	beq	r5,zero,4674 <__fixdfsi+0x6c>
    4658:	0085c83a 	sub	r2,zero,r2
    465c:	f800283a 	ret
    4660:	00a00034 	movhi	r2,32768
    4664:	10bfffc4 	addi	r2,r2,-1
    4668:	2885883a 	add	r2,r5,r2
    466c:	f800283a 	ret
    4670:	0005883a 	mov	r2,zero
    4674:	f800283a 	ret
    4678:	008104c4 	movi	r2,1043
    467c:	1185c83a 	sub	r2,r2,r6
    4680:	1884d83a 	srl	r2,r3,r2
    4684:	003ff306 	br	4654 <__alt_mem_onchip_memory+0xf7804654>

00004688 <__floatsidf>:
    4688:	defffd04 	addi	sp,sp,-12
    468c:	dfc00215 	stw	ra,8(sp)
    4690:	dc400115 	stw	r17,4(sp)
    4694:	dc000015 	stw	r16,0(sp)
    4698:	20002b26 	beq	r4,zero,4748 <__floatsidf+0xc0>
    469c:	2023883a 	mov	r17,r4
    46a0:	2020d7fa 	srli	r16,r4,31
    46a4:	20002d16 	blt	r4,zero,475c <__floatsidf+0xd4>
    46a8:	8809883a 	mov	r4,r17
    46ac:	0004a1c0 	call	4a1c <__clzsi2>
    46b0:	01410784 	movi	r5,1054
    46b4:	288bc83a 	sub	r5,r5,r2
    46b8:	01010cc4 	movi	r4,1075
    46bc:	2149c83a 	sub	r4,r4,r5
    46c0:	00c007c4 	movi	r3,31
    46c4:	1900160e 	bge	r3,r4,4720 <__floatsidf+0x98>
    46c8:	00c104c4 	movi	r3,1043
    46cc:	1947c83a 	sub	r3,r3,r5
    46d0:	88c6983a 	sll	r3,r17,r3
    46d4:	00800434 	movhi	r2,16
    46d8:	10bfffc4 	addi	r2,r2,-1
    46dc:	1886703a 	and	r3,r3,r2
    46e0:	2941ffcc 	andi	r5,r5,2047
    46e4:	800d883a 	mov	r6,r16
    46e8:	0005883a 	mov	r2,zero
    46ec:	280a953a 	slli	r5,r5,20
    46f0:	31803fcc 	andi	r6,r6,255
    46f4:	01000434 	movhi	r4,16
    46f8:	300c97fa 	slli	r6,r6,31
    46fc:	213fffc4 	addi	r4,r4,-1
    4700:	1906703a 	and	r3,r3,r4
    4704:	1946b03a 	or	r3,r3,r5
    4708:	1986b03a 	or	r3,r3,r6
    470c:	dfc00217 	ldw	ra,8(sp)
    4710:	dc400117 	ldw	r17,4(sp)
    4714:	dc000017 	ldw	r16,0(sp)
    4718:	dec00304 	addi	sp,sp,12
    471c:	f800283a 	ret
    4720:	00c002c4 	movi	r3,11
    4724:	1887c83a 	sub	r3,r3,r2
    4728:	88c6d83a 	srl	r3,r17,r3
    472c:	8904983a 	sll	r2,r17,r4
    4730:	01000434 	movhi	r4,16
    4734:	213fffc4 	addi	r4,r4,-1
    4738:	2941ffcc 	andi	r5,r5,2047
    473c:	1906703a 	and	r3,r3,r4
    4740:	800d883a 	mov	r6,r16
    4744:	003fe906 	br	46ec <__alt_mem_onchip_memory+0xf78046ec>
    4748:	000d883a 	mov	r6,zero
    474c:	000b883a 	mov	r5,zero
    4750:	0007883a 	mov	r3,zero
    4754:	0005883a 	mov	r2,zero
    4758:	003fe406 	br	46ec <__alt_mem_onchip_memory+0xf78046ec>
    475c:	0123c83a 	sub	r17,zero,r4
    4760:	003fd106 	br	46a8 <__alt_mem_onchip_memory+0xf78046a8>

00004764 <__extendsfdf2>:
    4764:	200ad5fa 	srli	r5,r4,23
    4768:	defffd04 	addi	sp,sp,-12
    476c:	dc400115 	stw	r17,4(sp)
    4770:	29403fcc 	andi	r5,r5,255
    4774:	29800044 	addi	r6,r5,1
    4778:	04402034 	movhi	r17,128
    477c:	dc000015 	stw	r16,0(sp)
    4780:	8c7fffc4 	addi	r17,r17,-1
    4784:	dfc00215 	stw	ra,8(sp)
    4788:	31803fcc 	andi	r6,r6,255
    478c:	00800044 	movi	r2,1
    4790:	8922703a 	and	r17,r17,r4
    4794:	2020d7fa 	srli	r16,r4,31
    4798:	1180110e 	bge	r2,r6,47e0 <__extendsfdf2+0x7c>
    479c:	880cd0fa 	srli	r6,r17,3
    47a0:	8822977a 	slli	r17,r17,29
    47a4:	2940e004 	addi	r5,r5,896
    47a8:	2941ffcc 	andi	r5,r5,2047
    47ac:	2804953a 	slli	r2,r5,20
    47b0:	01400434 	movhi	r5,16
    47b4:	800697fa 	slli	r3,r16,31
    47b8:	297fffc4 	addi	r5,r5,-1
    47bc:	314a703a 	and	r5,r6,r5
    47c0:	288ab03a 	or	r5,r5,r2
    47c4:	28c6b03a 	or	r3,r5,r3
    47c8:	8805883a 	mov	r2,r17
    47cc:	dfc00217 	ldw	ra,8(sp)
    47d0:	dc400117 	ldw	r17,4(sp)
    47d4:	dc000017 	ldw	r16,0(sp)
    47d8:	dec00304 	addi	sp,sp,12
    47dc:	f800283a 	ret
    47e0:	2800111e 	bne	r5,zero,4828 <__extendsfdf2+0xc4>
    47e4:	88001c26 	beq	r17,zero,4858 <__extendsfdf2+0xf4>
    47e8:	8809883a 	mov	r4,r17
    47ec:	0004a1c0 	call	4a1c <__clzsi2>
    47f0:	00c00284 	movi	r3,10
    47f4:	18801b16 	blt	r3,r2,4864 <__extendsfdf2+0x100>
    47f8:	018002c4 	movi	r6,11
    47fc:	308dc83a 	sub	r6,r6,r2
    4800:	11000544 	addi	r4,r2,21
    4804:	8986d83a 	srl	r3,r17,r6
    4808:	8922983a 	sll	r17,r17,r4
    480c:	0180e244 	movi	r6,905
    4810:	01400434 	movhi	r5,16
    4814:	3085c83a 	sub	r2,r6,r2
    4818:	297fffc4 	addi	r5,r5,-1
    481c:	194c703a 	and	r6,r3,r5
    4820:	1141ffcc 	andi	r5,r2,2047
    4824:	003fe006 	br	47a8 <__alt_mem_onchip_memory+0xf78047a8>
    4828:	88000826 	beq	r17,zero,484c <__extendsfdf2+0xe8>
    482c:	880cd0fa 	srli	r6,r17,3
    4830:	00800434 	movhi	r2,16
    4834:	10bfffc4 	addi	r2,r2,-1
    4838:	31800234 	orhi	r6,r6,8
    483c:	8822977a 	slli	r17,r17,29
    4840:	308c703a 	and	r6,r6,r2
    4844:	0141ffc4 	movi	r5,2047
    4848:	003fd706 	br	47a8 <__alt_mem_onchip_memory+0xf78047a8>
    484c:	0141ffc4 	movi	r5,2047
    4850:	000d883a 	mov	r6,zero
    4854:	003fd406 	br	47a8 <__alt_mem_onchip_memory+0xf78047a8>
    4858:	000b883a 	mov	r5,zero
    485c:	000d883a 	mov	r6,zero
    4860:	003fd106 	br	47a8 <__alt_mem_onchip_memory+0xf78047a8>
    4864:	11bffd44 	addi	r6,r2,-11
    4868:	8986983a 	sll	r3,r17,r6
    486c:	0023883a 	mov	r17,zero
    4870:	003fe606 	br	480c <__alt_mem_onchip_memory+0xf780480c>

00004874 <__truncdfsf2>:
    4874:	2810d53a 	srli	r8,r5,20
    4878:	01c00434 	movhi	r7,16
    487c:	39ffffc4 	addi	r7,r7,-1
    4880:	29ce703a 	and	r7,r5,r7
    4884:	4201ffcc 	andi	r8,r8,2047
    4888:	380e90fa 	slli	r7,r7,3
    488c:	200cd77a 	srli	r6,r4,29
    4890:	42400044 	addi	r9,r8,1
    4894:	4a41ffcc 	andi	r9,r9,2047
    4898:	00c00044 	movi	r3,1
    489c:	280ad7fa 	srli	r5,r5,31
    48a0:	31ceb03a 	or	r7,r6,r7
    48a4:	200490fa 	slli	r2,r4,3
    48a8:	1a40230e 	bge	r3,r9,4938 <__truncdfsf2+0xc4>
    48ac:	40ff2004 	addi	r3,r8,-896
    48b0:	01803f84 	movi	r6,254
    48b4:	30c01516 	blt	r6,r3,490c <__truncdfsf2+0x98>
    48b8:	00c0380e 	bge	zero,r3,499c <__truncdfsf2+0x128>
    48bc:	200c91ba 	slli	r6,r4,6
    48c0:	380e90fa 	slli	r7,r7,3
    48c4:	1004d77a 	srli	r2,r2,29
    48c8:	300cc03a 	cmpne	r6,r6,zero
    48cc:	31ccb03a 	or	r6,r6,r7
    48d0:	308cb03a 	or	r6,r6,r2
    48d4:	308001cc 	andi	r2,r6,7
    48d8:	10000426 	beq	r2,zero,48ec <__truncdfsf2+0x78>
    48dc:	308003cc 	andi	r2,r6,15
    48e0:	01000104 	movi	r4,4
    48e4:	11000126 	beq	r2,r4,48ec <__truncdfsf2+0x78>
    48e8:	31800104 	addi	r6,r6,4
    48ec:	3081002c 	andhi	r2,r6,1024
    48f0:	10001626 	beq	r2,zero,494c <__truncdfsf2+0xd8>
    48f4:	18c00044 	addi	r3,r3,1
    48f8:	00803fc4 	movi	r2,255
    48fc:	18800326 	beq	r3,r2,490c <__truncdfsf2+0x98>
    4900:	300c91ba 	slli	r6,r6,6
    4904:	300cd27a 	srli	r6,r6,9
    4908:	00000206 	br	4914 <__truncdfsf2+0xa0>
    490c:	00ffffc4 	movi	r3,-1
    4910:	000d883a 	mov	r6,zero
    4914:	18c03fcc 	andi	r3,r3,255
    4918:	180895fa 	slli	r4,r3,23
    491c:	00c02034 	movhi	r3,128
    4920:	280a97fa 	slli	r5,r5,31
    4924:	18ffffc4 	addi	r3,r3,-1
    4928:	30c6703a 	and	r3,r6,r3
    492c:	1906b03a 	or	r3,r3,r4
    4930:	1944b03a 	or	r2,r3,r5
    4934:	f800283a 	ret
    4938:	40000b1e 	bne	r8,zero,4968 <__truncdfsf2+0xf4>
    493c:	388cb03a 	or	r6,r7,r2
    4940:	0007883a 	mov	r3,zero
    4944:	30000426 	beq	r6,zero,4958 <__truncdfsf2+0xe4>
    4948:	01800144 	movi	r6,5
    494c:	00803fc4 	movi	r2,255
    4950:	300cd0fa 	srli	r6,r6,3
    4954:	18800a26 	beq	r3,r2,4980 <__truncdfsf2+0x10c>
    4958:	00802034 	movhi	r2,128
    495c:	10bfffc4 	addi	r2,r2,-1
    4960:	308c703a 	and	r6,r6,r2
    4964:	003feb06 	br	4914 <__alt_mem_onchip_memory+0xf7804914>
    4968:	3888b03a 	or	r4,r7,r2
    496c:	203fe726 	beq	r4,zero,490c <__alt_mem_onchip_memory+0xf780490c>
    4970:	380c90fa 	slli	r6,r7,3
    4974:	00c03fc4 	movi	r3,255
    4978:	31808034 	orhi	r6,r6,512
    497c:	003fd506 	br	48d4 <__alt_mem_onchip_memory+0xf78048d4>
    4980:	303fe226 	beq	r6,zero,490c <__alt_mem_onchip_memory+0xf780490c>
    4984:	00802034 	movhi	r2,128
    4988:	31801034 	orhi	r6,r6,64
    498c:	10bfffc4 	addi	r2,r2,-1
    4990:	00ffffc4 	movi	r3,-1
    4994:	308c703a 	and	r6,r6,r2
    4998:	003fde06 	br	4914 <__alt_mem_onchip_memory+0xf7804914>
    499c:	013ffa44 	movi	r4,-23
    49a0:	19000e16 	blt	r3,r4,49dc <__truncdfsf2+0x168>
    49a4:	01000784 	movi	r4,30
    49a8:	20c9c83a 	sub	r4,r4,r3
    49ac:	018007c4 	movi	r6,31
    49b0:	39c02034 	orhi	r7,r7,128
    49b4:	31000b16 	blt	r6,r4,49e4 <__truncdfsf2+0x170>
    49b8:	423f2084 	addi	r8,r8,-894
    49bc:	120c983a 	sll	r6,r2,r8
    49c0:	3a0e983a 	sll	r7,r7,r8
    49c4:	1104d83a 	srl	r2,r2,r4
    49c8:	300cc03a 	cmpne	r6,r6,zero
    49cc:	31ceb03a 	or	r7,r6,r7
    49d0:	388cb03a 	or	r6,r7,r2
    49d4:	0007883a 	mov	r3,zero
    49d8:	003fbe06 	br	48d4 <__alt_mem_onchip_memory+0xf78048d4>
    49dc:	0007883a 	mov	r3,zero
    49e0:	003fd906 	br	4948 <__alt_mem_onchip_memory+0xf7804948>
    49e4:	01bfff84 	movi	r6,-2
    49e8:	30cdc83a 	sub	r6,r6,r3
    49ec:	00c00804 	movi	r3,32
    49f0:	398cd83a 	srl	r6,r7,r6
    49f4:	20c00726 	beq	r4,r3,4a14 <__truncdfsf2+0x1a0>
    49f8:	423f2884 	addi	r8,r8,-862
    49fc:	3a0e983a 	sll	r7,r7,r8
    4a00:	3884b03a 	or	r2,r7,r2
    4a04:	1004c03a 	cmpne	r2,r2,zero
    4a08:	118cb03a 	or	r6,r2,r6
    4a0c:	0007883a 	mov	r3,zero
    4a10:	003fb006 	br	48d4 <__alt_mem_onchip_memory+0xf78048d4>
    4a14:	000f883a 	mov	r7,zero
    4a18:	003ff906 	br	4a00 <__alt_mem_onchip_memory+0xf7804a00>

00004a1c <__clzsi2>:
    4a1c:	00bfffd4 	movui	r2,65535
    4a20:	11000536 	bltu	r2,r4,4a38 <__clzsi2+0x1c>
    4a24:	00803fc4 	movi	r2,255
    4a28:	11000f36 	bltu	r2,r4,4a68 <__clzsi2+0x4c>
    4a2c:	00800804 	movi	r2,32
    4a30:	0007883a 	mov	r3,zero
    4a34:	00000506 	br	4a4c <__clzsi2+0x30>
    4a38:	00804034 	movhi	r2,256
    4a3c:	10bfffc4 	addi	r2,r2,-1
    4a40:	11000c2e 	bgeu	r2,r4,4a74 <__clzsi2+0x58>
    4a44:	00800204 	movi	r2,8
    4a48:	00c00604 	movi	r3,24
    4a4c:	20c8d83a 	srl	r4,r4,r3
    4a50:	00c00074 	movhi	r3,1
    4a54:	18c81844 	addi	r3,r3,8289
    4a58:	1909883a 	add	r4,r3,r4
    4a5c:	20c00003 	ldbu	r3,0(r4)
    4a60:	10c5c83a 	sub	r2,r2,r3
    4a64:	f800283a 	ret
    4a68:	00800604 	movi	r2,24
    4a6c:	00c00204 	movi	r3,8
    4a70:	003ff606 	br	4a4c <__alt_mem_onchip_memory+0xf7804a4c>
    4a74:	00800404 	movi	r2,16
    4a78:	1007883a 	mov	r3,r2
    4a7c:	003ff306 	br	4a4c <__alt_mem_onchip_memory+0xf7804a4c>

00004a80 <__divsi3>:
    4a80:	20001b16 	blt	r4,zero,4af0 <__divsi3+0x70>
    4a84:	000f883a 	mov	r7,zero
    4a88:	28001616 	blt	r5,zero,4ae4 <__divsi3+0x64>
    4a8c:	200d883a 	mov	r6,r4
    4a90:	29001a2e 	bgeu	r5,r4,4afc <__divsi3+0x7c>
    4a94:	00800804 	movi	r2,32
    4a98:	00c00044 	movi	r3,1
    4a9c:	00000106 	br	4aa4 <__divsi3+0x24>
    4aa0:	10000d26 	beq	r2,zero,4ad8 <__divsi3+0x58>
    4aa4:	294b883a 	add	r5,r5,r5
    4aa8:	10bfffc4 	addi	r2,r2,-1
    4aac:	18c7883a 	add	r3,r3,r3
    4ab0:	293ffb36 	bltu	r5,r4,4aa0 <__alt_mem_onchip_memory+0xf7804aa0>
    4ab4:	0005883a 	mov	r2,zero
    4ab8:	18000726 	beq	r3,zero,4ad8 <__divsi3+0x58>
    4abc:	0005883a 	mov	r2,zero
    4ac0:	31400236 	bltu	r6,r5,4acc <__divsi3+0x4c>
    4ac4:	314dc83a 	sub	r6,r6,r5
    4ac8:	10c4b03a 	or	r2,r2,r3
    4acc:	1806d07a 	srli	r3,r3,1
    4ad0:	280ad07a 	srli	r5,r5,1
    4ad4:	183ffa1e 	bne	r3,zero,4ac0 <__alt_mem_onchip_memory+0xf7804ac0>
    4ad8:	38000126 	beq	r7,zero,4ae0 <__divsi3+0x60>
    4adc:	0085c83a 	sub	r2,zero,r2
    4ae0:	f800283a 	ret
    4ae4:	014bc83a 	sub	r5,zero,r5
    4ae8:	39c0005c 	xori	r7,r7,1
    4aec:	003fe706 	br	4a8c <__alt_mem_onchip_memory+0xf7804a8c>
    4af0:	0109c83a 	sub	r4,zero,r4
    4af4:	01c00044 	movi	r7,1
    4af8:	003fe306 	br	4a88 <__alt_mem_onchip_memory+0xf7804a88>
    4afc:	00c00044 	movi	r3,1
    4b00:	003fee06 	br	4abc <__alt_mem_onchip_memory+0xf7804abc>

00004b04 <__modsi3>:
    4b04:	20001716 	blt	r4,zero,4b64 <__modsi3+0x60>
    4b08:	000f883a 	mov	r7,zero
    4b0c:	2005883a 	mov	r2,r4
    4b10:	28001216 	blt	r5,zero,4b5c <__modsi3+0x58>
    4b14:	2900162e 	bgeu	r5,r4,4b70 <__modsi3+0x6c>
    4b18:	01800804 	movi	r6,32
    4b1c:	00c00044 	movi	r3,1
    4b20:	00000106 	br	4b28 <__modsi3+0x24>
    4b24:	30000a26 	beq	r6,zero,4b50 <__modsi3+0x4c>
    4b28:	294b883a 	add	r5,r5,r5
    4b2c:	31bfffc4 	addi	r6,r6,-1
    4b30:	18c7883a 	add	r3,r3,r3
    4b34:	293ffb36 	bltu	r5,r4,4b24 <__alt_mem_onchip_memory+0xf7804b24>
    4b38:	18000526 	beq	r3,zero,4b50 <__modsi3+0x4c>
    4b3c:	1806d07a 	srli	r3,r3,1
    4b40:	11400136 	bltu	r2,r5,4b48 <__modsi3+0x44>
    4b44:	1145c83a 	sub	r2,r2,r5
    4b48:	280ad07a 	srli	r5,r5,1
    4b4c:	183ffb1e 	bne	r3,zero,4b3c <__alt_mem_onchip_memory+0xf7804b3c>
    4b50:	38000126 	beq	r7,zero,4b58 <__modsi3+0x54>
    4b54:	0085c83a 	sub	r2,zero,r2
    4b58:	f800283a 	ret
    4b5c:	014bc83a 	sub	r5,zero,r5
    4b60:	003fec06 	br	4b14 <__alt_mem_onchip_memory+0xf7804b14>
    4b64:	0109c83a 	sub	r4,zero,r4
    4b68:	01c00044 	movi	r7,1
    4b6c:	003fe706 	br	4b0c <__alt_mem_onchip_memory+0xf7804b0c>
    4b70:	00c00044 	movi	r3,1
    4b74:	003ff106 	br	4b3c <__alt_mem_onchip_memory+0xf7804b3c>

00004b78 <__udivsi3>:
    4b78:	200d883a 	mov	r6,r4
    4b7c:	2900152e 	bgeu	r5,r4,4bd4 <__udivsi3+0x5c>
    4b80:	28001416 	blt	r5,zero,4bd4 <__udivsi3+0x5c>
    4b84:	00800804 	movi	r2,32
    4b88:	00c00044 	movi	r3,1
    4b8c:	00000206 	br	4b98 <__udivsi3+0x20>
    4b90:	10000e26 	beq	r2,zero,4bcc <__udivsi3+0x54>
    4b94:	28000516 	blt	r5,zero,4bac <__udivsi3+0x34>
    4b98:	294b883a 	add	r5,r5,r5
    4b9c:	10bfffc4 	addi	r2,r2,-1
    4ba0:	18c7883a 	add	r3,r3,r3
    4ba4:	293ffa36 	bltu	r5,r4,4b90 <__alt_mem_onchip_memory+0xf7804b90>
    4ba8:	18000826 	beq	r3,zero,4bcc <__udivsi3+0x54>
    4bac:	0005883a 	mov	r2,zero
    4bb0:	31400236 	bltu	r6,r5,4bbc <__udivsi3+0x44>
    4bb4:	314dc83a 	sub	r6,r6,r5
    4bb8:	10c4b03a 	or	r2,r2,r3
    4bbc:	1806d07a 	srli	r3,r3,1
    4bc0:	280ad07a 	srli	r5,r5,1
    4bc4:	183ffa1e 	bne	r3,zero,4bb0 <__alt_mem_onchip_memory+0xf7804bb0>
    4bc8:	f800283a 	ret
    4bcc:	0005883a 	mov	r2,zero
    4bd0:	f800283a 	ret
    4bd4:	00c00044 	movi	r3,1
    4bd8:	003ff406 	br	4bac <__alt_mem_onchip_memory+0xf7804bac>

00004bdc <__umodsi3>:
    4bdc:	2005883a 	mov	r2,r4
    4be0:	2900122e 	bgeu	r5,r4,4c2c <__umodsi3+0x50>
    4be4:	28001116 	blt	r5,zero,4c2c <__umodsi3+0x50>
    4be8:	01800804 	movi	r6,32
    4bec:	00c00044 	movi	r3,1
    4bf0:	00000206 	br	4bfc <__umodsi3+0x20>
    4bf4:	30000c26 	beq	r6,zero,4c28 <__umodsi3+0x4c>
    4bf8:	28000516 	blt	r5,zero,4c10 <__umodsi3+0x34>
    4bfc:	294b883a 	add	r5,r5,r5
    4c00:	31bfffc4 	addi	r6,r6,-1
    4c04:	18c7883a 	add	r3,r3,r3
    4c08:	293ffa36 	bltu	r5,r4,4bf4 <__alt_mem_onchip_memory+0xf7804bf4>
    4c0c:	18000626 	beq	r3,zero,4c28 <__umodsi3+0x4c>
    4c10:	1806d07a 	srli	r3,r3,1
    4c14:	11400136 	bltu	r2,r5,4c1c <__umodsi3+0x40>
    4c18:	1145c83a 	sub	r2,r2,r5
    4c1c:	280ad07a 	srli	r5,r5,1
    4c20:	183ffb1e 	bne	r3,zero,4c10 <__alt_mem_onchip_memory+0xf7804c10>
    4c24:	f800283a 	ret
    4c28:	f800283a 	ret
    4c2c:	00c00044 	movi	r3,1
    4c30:	003ff706 	br	4c10 <__alt_mem_onchip_memory+0xf7804c10>

00004c34 <__errno>:
    4c34:	00800074 	movhi	r2,1
    4c38:	108fc804 	addi	r2,r2,16160
    4c3c:	10800017 	ldw	r2,0(r2)
    4c40:	f800283a 	ret

00004c44 <_printf_r>:
    4c44:	defffd04 	addi	sp,sp,-12
    4c48:	2805883a 	mov	r2,r5
    4c4c:	dfc00015 	stw	ra,0(sp)
    4c50:	d9800115 	stw	r6,4(sp)
    4c54:	d9c00215 	stw	r7,8(sp)
    4c58:	21400217 	ldw	r5,8(r4)
    4c5c:	d9c00104 	addi	r7,sp,4
    4c60:	100d883a 	mov	r6,r2
    4c64:	0004f680 	call	4f68 <___vfprintf_internal_r>
    4c68:	dfc00017 	ldw	ra,0(sp)
    4c6c:	dec00304 	addi	sp,sp,12
    4c70:	f800283a 	ret

00004c74 <printf>:
    4c74:	defffc04 	addi	sp,sp,-16
    4c78:	dfc00015 	stw	ra,0(sp)
    4c7c:	d9400115 	stw	r5,4(sp)
    4c80:	d9800215 	stw	r6,8(sp)
    4c84:	d9c00315 	stw	r7,12(sp)
    4c88:	00800074 	movhi	r2,1
    4c8c:	108fc804 	addi	r2,r2,16160
    4c90:	10800017 	ldw	r2,0(r2)
    4c94:	200b883a 	mov	r5,r4
    4c98:	d9800104 	addi	r6,sp,4
    4c9c:	11000217 	ldw	r4,8(r2)
    4ca0:	00071600 	call	7160 <__vfprintf_internal>
    4ca4:	dfc00017 	ldw	ra,0(sp)
    4ca8:	dec00404 	addi	sp,sp,16
    4cac:	f800283a 	ret

00004cb0 <_putchar_r>:
    4cb0:	21800217 	ldw	r6,8(r4)
    4cb4:	000bc801 	jmpi	bc80 <_putc_r>

00004cb8 <putchar>:
    4cb8:	00800074 	movhi	r2,1
    4cbc:	108fc804 	addi	r2,r2,16160
    4cc0:	200b883a 	mov	r5,r4
    4cc4:	11000017 	ldw	r4,0(r2)
    4cc8:	21800217 	ldw	r6,8(r4)
    4ccc:	000bc801 	jmpi	bc80 <_putc_r>

00004cd0 <_puts_r>:
    4cd0:	defff604 	addi	sp,sp,-40
    4cd4:	dc000715 	stw	r16,28(sp)
    4cd8:	2021883a 	mov	r16,r4
    4cdc:	2809883a 	mov	r4,r5
    4ce0:	dc400815 	stw	r17,32(sp)
    4ce4:	dfc00915 	stw	ra,36(sp)
    4ce8:	2823883a 	mov	r17,r5
    4cec:	0004e200 	call	4e20 <strlen>
    4cf0:	10c00044 	addi	r3,r2,1
    4cf4:	d8800115 	stw	r2,4(sp)
    4cf8:	00800074 	movhi	r2,1
    4cfc:	10885a04 	addi	r2,r2,8552
    4d00:	d8800215 	stw	r2,8(sp)
    4d04:	00800044 	movi	r2,1
    4d08:	d8800315 	stw	r2,12(sp)
    4d0c:	00800084 	movi	r2,2
    4d10:	dc400015 	stw	r17,0(sp)
    4d14:	d8c00615 	stw	r3,24(sp)
    4d18:	dec00415 	stw	sp,16(sp)
    4d1c:	d8800515 	stw	r2,20(sp)
    4d20:	80000226 	beq	r16,zero,4d2c <_puts_r+0x5c>
    4d24:	80800e17 	ldw	r2,56(r16)
    4d28:	10001426 	beq	r2,zero,4d7c <_puts_r+0xac>
    4d2c:	81400217 	ldw	r5,8(r16)
    4d30:	2880030b 	ldhu	r2,12(r5)
    4d34:	10c8000c 	andi	r3,r2,8192
    4d38:	1800061e 	bne	r3,zero,4d54 <_puts_r+0x84>
    4d3c:	29001917 	ldw	r4,100(r5)
    4d40:	00f7ffc4 	movi	r3,-8193
    4d44:	10880014 	ori	r2,r2,8192
    4d48:	20c6703a 	and	r3,r4,r3
    4d4c:	2880030d 	sth	r2,12(r5)
    4d50:	28c01915 	stw	r3,100(r5)
    4d54:	d9800404 	addi	r6,sp,16
    4d58:	8009883a 	mov	r4,r16
    4d5c:	00096900 	call	9690 <__sfvwrite_r>
    4d60:	1000091e 	bne	r2,zero,4d88 <_puts_r+0xb8>
    4d64:	00800284 	movi	r2,10
    4d68:	dfc00917 	ldw	ra,36(sp)
    4d6c:	dc400817 	ldw	r17,32(sp)
    4d70:	dc000717 	ldw	r16,28(sp)
    4d74:	dec00a04 	addi	sp,sp,40
    4d78:	f800283a 	ret
    4d7c:	8009883a 	mov	r4,r16
    4d80:	000920c0 	call	920c <__sinit>
    4d84:	003fe906 	br	4d2c <__alt_mem_onchip_memory+0xf7804d2c>
    4d88:	00bfffc4 	movi	r2,-1
    4d8c:	003ff606 	br	4d68 <__alt_mem_onchip_memory+0xf7804d68>

00004d90 <puts>:
    4d90:	00800074 	movhi	r2,1
    4d94:	108fc804 	addi	r2,r2,16160
    4d98:	200b883a 	mov	r5,r4
    4d9c:	11000017 	ldw	r4,0(r2)
    4da0:	0004cd01 	jmpi	4cd0 <_puts_r>

00004da4 <srand>:
    4da4:	00800074 	movhi	r2,1
    4da8:	108fc804 	addi	r2,r2,16160
    4dac:	10800017 	ldw	r2,0(r2)
    4db0:	11002915 	stw	r4,164(r2)
    4db4:	10002a15 	stw	zero,168(r2)
    4db8:	f800283a 	ret

00004dbc <rand>:
    4dbc:	00800074 	movhi	r2,1
    4dc0:	defffe04 	addi	sp,sp,-8
    4dc4:	108fc804 	addi	r2,r2,16160
    4dc8:	dc000015 	stw	r16,0(sp)
    4dcc:	14000017 	ldw	r16,0(r2)
    4dd0:	dfc00115 	stw	ra,4(sp)
    4dd4:	01932574 	movhi	r6,19605
    4dd8:	81002917 	ldw	r4,164(r16)
    4ddc:	81402a17 	ldw	r5,168(r16)
    4de0:	01d614b4 	movhi	r7,22610
    4de4:	319fcb44 	addi	r6,r6,32557
    4de8:	39fd0b44 	addi	r7,r7,-3027
    4dec:	000e5340 	call	e534 <__muldi3>
    4df0:	11000044 	addi	r4,r2,1
    4df4:	2085803a 	cmpltu	r2,r4,r2
    4df8:	10c7883a 	add	r3,r2,r3
    4dfc:	00a00034 	movhi	r2,32768
    4e00:	10bfffc4 	addi	r2,r2,-1
    4e04:	1884703a 	and	r2,r3,r2
    4e08:	81002915 	stw	r4,164(r16)
    4e0c:	80c02a15 	stw	r3,168(r16)
    4e10:	dfc00117 	ldw	ra,4(sp)
    4e14:	dc000017 	ldw	r16,0(sp)
    4e18:	dec00204 	addi	sp,sp,8
    4e1c:	f800283a 	ret

00004e20 <strlen>:
    4e20:	208000cc 	andi	r2,r4,3
    4e24:	10002026 	beq	r2,zero,4ea8 <strlen+0x88>
    4e28:	20800007 	ldb	r2,0(r4)
    4e2c:	10002026 	beq	r2,zero,4eb0 <strlen+0x90>
    4e30:	2005883a 	mov	r2,r4
    4e34:	00000206 	br	4e40 <strlen+0x20>
    4e38:	10c00007 	ldb	r3,0(r2)
    4e3c:	18001826 	beq	r3,zero,4ea0 <strlen+0x80>
    4e40:	10800044 	addi	r2,r2,1
    4e44:	10c000cc 	andi	r3,r2,3
    4e48:	183ffb1e 	bne	r3,zero,4e38 <__alt_mem_onchip_memory+0xf7804e38>
    4e4c:	10c00017 	ldw	r3,0(r2)
    4e50:	01ffbff4 	movhi	r7,65279
    4e54:	39ffbfc4 	addi	r7,r7,-257
    4e58:	00ca303a 	nor	r5,zero,r3
    4e5c:	01a02074 	movhi	r6,32897
    4e60:	19c7883a 	add	r3,r3,r7
    4e64:	31a02004 	addi	r6,r6,-32640
    4e68:	1946703a 	and	r3,r3,r5
    4e6c:	1986703a 	and	r3,r3,r6
    4e70:	1800091e 	bne	r3,zero,4e98 <strlen+0x78>
    4e74:	10800104 	addi	r2,r2,4
    4e78:	10c00017 	ldw	r3,0(r2)
    4e7c:	19cb883a 	add	r5,r3,r7
    4e80:	00c6303a 	nor	r3,zero,r3
    4e84:	28c6703a 	and	r3,r5,r3
    4e88:	1986703a 	and	r3,r3,r6
    4e8c:	183ff926 	beq	r3,zero,4e74 <__alt_mem_onchip_memory+0xf7804e74>
    4e90:	00000106 	br	4e98 <strlen+0x78>
    4e94:	10800044 	addi	r2,r2,1
    4e98:	10c00007 	ldb	r3,0(r2)
    4e9c:	183ffd1e 	bne	r3,zero,4e94 <__alt_mem_onchip_memory+0xf7804e94>
    4ea0:	1105c83a 	sub	r2,r2,r4
    4ea4:	f800283a 	ret
    4ea8:	2005883a 	mov	r2,r4
    4eac:	003fe706 	br	4e4c <__alt_mem_onchip_memory+0xf7804e4c>
    4eb0:	0005883a 	mov	r2,zero
    4eb4:	f800283a 	ret

00004eb8 <_system_r>:
    4eb8:	2800021e 	bne	r5,zero,4ec4 <_system_r+0xc>
    4ebc:	0005883a 	mov	r2,zero
    4ec0:	f800283a 	ret
    4ec4:	deffff04 	addi	sp,sp,-4
    4ec8:	dfc00015 	stw	ra,0(sp)
    4ecc:	0004c340 	call	4c34 <__errno>
    4ed0:	00c01604 	movi	r3,88
    4ed4:	10c00015 	stw	r3,0(r2)
    4ed8:	00bfffc4 	movi	r2,-1
    4edc:	dfc00017 	ldw	ra,0(sp)
    4ee0:	dec00104 	addi	sp,sp,4
    4ee4:	f800283a 	ret

00004ee8 <system>:
    4ee8:	20000926 	beq	r4,zero,4f10 <system+0x28>
    4eec:	deffff04 	addi	sp,sp,-4
    4ef0:	dfc00015 	stw	ra,0(sp)
    4ef4:	0004c340 	call	4c34 <__errno>
    4ef8:	00c01604 	movi	r3,88
    4efc:	10c00015 	stw	r3,0(r2)
    4f00:	00bfffc4 	movi	r2,-1
    4f04:	dfc00017 	ldw	ra,0(sp)
    4f08:	dec00104 	addi	sp,sp,4
    4f0c:	f800283a 	ret
    4f10:	0005883a 	mov	r2,zero
    4f14:	f800283a 	ret

00004f18 <time>:
    4f18:	00800074 	movhi	r2,1
    4f1c:	defffc04 	addi	sp,sp,-16
    4f20:	108fc804 	addi	r2,r2,16160
    4f24:	dc000215 	stw	r16,8(sp)
    4f28:	2021883a 	mov	r16,r4
    4f2c:	11000017 	ldw	r4,0(r2)
    4f30:	000d883a 	mov	r6,zero
    4f34:	d80b883a 	mov	r5,sp
    4f38:	dfc00315 	stw	ra,12(sp)
    4f3c:	0009cd40 	call	9cd4 <_gettimeofday_r>
    4f40:	10000716 	blt	r2,zero,4f60 <time+0x48>
    4f44:	d8800017 	ldw	r2,0(sp)
    4f48:	80000126 	beq	r16,zero,4f50 <time+0x38>
    4f4c:	80800015 	stw	r2,0(r16)
    4f50:	dfc00317 	ldw	ra,12(sp)
    4f54:	dc000217 	ldw	r16,8(sp)
    4f58:	dec00404 	addi	sp,sp,16
    4f5c:	f800283a 	ret
    4f60:	00bfffc4 	movi	r2,-1
    4f64:	003ffa06 	br	4f50 <__alt_mem_onchip_memory+0xf7804f50>

00004f68 <___vfprintf_internal_r>:
    4f68:	deffb804 	addi	sp,sp,-288
    4f6c:	dfc04715 	stw	ra,284(sp)
    4f70:	ddc04515 	stw	r23,276(sp)
    4f74:	dd404315 	stw	r21,268(sp)
    4f78:	d9002c15 	stw	r4,176(sp)
    4f7c:	282f883a 	mov	r23,r5
    4f80:	302b883a 	mov	r21,r6
    4f84:	d9c02d15 	stw	r7,180(sp)
    4f88:	df004615 	stw	fp,280(sp)
    4f8c:	dd804415 	stw	r22,272(sp)
    4f90:	dd004215 	stw	r20,264(sp)
    4f94:	dcc04115 	stw	r19,260(sp)
    4f98:	dc804015 	stw	r18,256(sp)
    4f9c:	dc403f15 	stw	r17,252(sp)
    4fa0:	dc003e15 	stw	r16,248(sp)
    4fa4:	0009ddc0 	call	9ddc <_localeconv_r>
    4fa8:	10800017 	ldw	r2,0(r2)
    4fac:	1009883a 	mov	r4,r2
    4fb0:	d8803415 	stw	r2,208(sp)
    4fb4:	0004e200 	call	4e20 <strlen>
    4fb8:	d8803715 	stw	r2,220(sp)
    4fbc:	d8802c17 	ldw	r2,176(sp)
    4fc0:	10000226 	beq	r2,zero,4fcc <___vfprintf_internal_r+0x64>
    4fc4:	10800e17 	ldw	r2,56(r2)
    4fc8:	1000f926 	beq	r2,zero,53b0 <___vfprintf_internal_r+0x448>
    4fcc:	b880030b 	ldhu	r2,12(r23)
    4fd0:	10c8000c 	andi	r3,r2,8192
    4fd4:	1800061e 	bne	r3,zero,4ff0 <___vfprintf_internal_r+0x88>
    4fd8:	b9001917 	ldw	r4,100(r23)
    4fdc:	00f7ffc4 	movi	r3,-8193
    4fe0:	10880014 	ori	r2,r2,8192
    4fe4:	20c6703a 	and	r3,r4,r3
    4fe8:	b880030d 	sth	r2,12(r23)
    4fec:	b8c01915 	stw	r3,100(r23)
    4ff0:	10c0020c 	andi	r3,r2,8
    4ff4:	1800c126 	beq	r3,zero,52fc <___vfprintf_internal_r+0x394>
    4ff8:	b8c00417 	ldw	r3,16(r23)
    4ffc:	1800bf26 	beq	r3,zero,52fc <___vfprintf_internal_r+0x394>
    5000:	1080068c 	andi	r2,r2,26
    5004:	00c00284 	movi	r3,10
    5008:	10c0c426 	beq	r2,r3,531c <___vfprintf_internal_r+0x3b4>
    500c:	d8c00404 	addi	r3,sp,16
    5010:	05000074 	movhi	r20,1
    5014:	d9001e04 	addi	r4,sp,120
    5018:	a5086b84 	addi	r20,r20,8622
    501c:	d8c01e15 	stw	r3,120(sp)
    5020:	d8002015 	stw	zero,128(sp)
    5024:	d8001f15 	stw	zero,124(sp)
    5028:	d8003315 	stw	zero,204(sp)
    502c:	d8003615 	stw	zero,216(sp)
    5030:	d8003815 	stw	zero,224(sp)
    5034:	1811883a 	mov	r8,r3
    5038:	d8003915 	stw	zero,228(sp)
    503c:	d8003a15 	stw	zero,232(sp)
    5040:	d8002f15 	stw	zero,188(sp)
    5044:	d9002815 	stw	r4,160(sp)
    5048:	a8800007 	ldb	r2,0(r21)
    504c:	10027b26 	beq	r2,zero,5a3c <___vfprintf_internal_r+0xad4>
    5050:	00c00944 	movi	r3,37
    5054:	a821883a 	mov	r16,r21
    5058:	10c0021e 	bne	r2,r3,5064 <___vfprintf_internal_r+0xfc>
    505c:	00001406 	br	50b0 <___vfprintf_internal_r+0x148>
    5060:	10c00326 	beq	r2,r3,5070 <___vfprintf_internal_r+0x108>
    5064:	84000044 	addi	r16,r16,1
    5068:	80800007 	ldb	r2,0(r16)
    506c:	103ffc1e 	bne	r2,zero,5060 <__alt_mem_onchip_memory+0xf7805060>
    5070:	8563c83a 	sub	r17,r16,r21
    5074:	88000e26 	beq	r17,zero,50b0 <___vfprintf_internal_r+0x148>
    5078:	d8c02017 	ldw	r3,128(sp)
    507c:	d8801f17 	ldw	r2,124(sp)
    5080:	45400015 	stw	r21,0(r8)
    5084:	1c47883a 	add	r3,r3,r17
    5088:	10800044 	addi	r2,r2,1
    508c:	d8c02015 	stw	r3,128(sp)
    5090:	44400115 	stw	r17,4(r8)
    5094:	d8801f15 	stw	r2,124(sp)
    5098:	00c001c4 	movi	r3,7
    509c:	1880a716 	blt	r3,r2,533c <___vfprintf_internal_r+0x3d4>
    50a0:	42000204 	addi	r8,r8,8
    50a4:	d9402f17 	ldw	r5,188(sp)
    50a8:	2c4b883a 	add	r5,r5,r17
    50ac:	d9402f15 	stw	r5,188(sp)
    50b0:	80800007 	ldb	r2,0(r16)
    50b4:	1000a826 	beq	r2,zero,5358 <___vfprintf_internal_r+0x3f0>
    50b8:	84400047 	ldb	r17,1(r16)
    50bc:	00bfffc4 	movi	r2,-1
    50c0:	85400044 	addi	r21,r16,1
    50c4:	d8002785 	stb	zero,158(sp)
    50c8:	0007883a 	mov	r3,zero
    50cc:	000f883a 	mov	r7,zero
    50d0:	d8802915 	stw	r2,164(sp)
    50d4:	d8003115 	stw	zero,196(sp)
    50d8:	0025883a 	mov	r18,zero
    50dc:	01401604 	movi	r5,88
    50e0:	01800244 	movi	r6,9
    50e4:	02800a84 	movi	r10,42
    50e8:	02401b04 	movi	r9,108
    50ec:	ad400044 	addi	r21,r21,1
    50f0:	88bff804 	addi	r2,r17,-32
    50f4:	28830436 	bltu	r5,r2,5d08 <___vfprintf_internal_r+0xda0>
    50f8:	100490ba 	slli	r2,r2,2
    50fc:	01000034 	movhi	r4,0
    5100:	21144404 	addi	r4,r4,20752
    5104:	1105883a 	add	r2,r2,r4
    5108:	10800017 	ldw	r2,0(r2)
    510c:	1000683a 	jmp	r2
    5110:	00005c28 	cmpgeui	zero,zero,368
    5114:	00005d08 	cmpgei	zero,zero,372
    5118:	00005d08 	cmpgei	zero,zero,372
    511c:	00005c48 	cmpgei	zero,zero,369
    5120:	00005d08 	cmpgei	zero,zero,372
    5124:	00005d08 	cmpgei	zero,zero,372
    5128:	00005d08 	cmpgei	zero,zero,372
    512c:	00005d08 	cmpgei	zero,zero,372
    5130:	00005d08 	cmpgei	zero,zero,372
    5134:	00005d08 	cmpgei	zero,zero,372
    5138:	000053bc 	xorhi	zero,zero,334
    513c:	00005b64 	muli	zero,zero,365
    5140:	00005d08 	cmpgei	zero,zero,372
    5144:	00005284 	movi	zero,330
    5148:	000053e4 	muli	zero,zero,335
    514c:	00005d08 	cmpgei	zero,zero,372
    5150:	00005424 	muli	zero,zero,336
    5154:	00005430 	cmpltui	zero,zero,336
    5158:	00005430 	cmpltui	zero,zero,336
    515c:	00005430 	cmpltui	zero,zero,336
    5160:	00005430 	cmpltui	zero,zero,336
    5164:	00005430 	cmpltui	zero,zero,336
    5168:	00005430 	cmpltui	zero,zero,336
    516c:	00005430 	cmpltui	zero,zero,336
    5170:	00005430 	cmpltui	zero,zero,336
    5174:	00005430 	cmpltui	zero,zero,336
    5178:	00005d08 	cmpgei	zero,zero,372
    517c:	00005d08 	cmpgei	zero,zero,372
    5180:	00005d08 	cmpgei	zero,zero,372
    5184:	00005d08 	cmpgei	zero,zero,372
    5188:	00005d08 	cmpgei	zero,zero,372
    518c:	00005d08 	cmpgei	zero,zero,372
    5190:	00005d08 	cmpgei	zero,zero,372
    5194:	00005d08 	cmpgei	zero,zero,372
    5198:	00005d08 	cmpgei	zero,zero,372
    519c:	00005d08 	cmpgei	zero,zero,372
    51a0:	00005464 	muli	zero,zero,337
    51a4:	00005520 	cmpeqi	zero,zero,340
    51a8:	00005d08 	cmpgei	zero,zero,372
    51ac:	00005520 	cmpeqi	zero,zero,340
    51b0:	00005d08 	cmpgei	zero,zero,372
    51b4:	00005d08 	cmpgei	zero,zero,372
    51b8:	00005d08 	cmpgei	zero,zero,372
    51bc:	00005d08 	cmpgei	zero,zero,372
    51c0:	000055c0 	call	55c <calcNet+0x210>
    51c4:	00005d08 	cmpgei	zero,zero,372
    51c8:	00005d08 	cmpgei	zero,zero,372
    51cc:	000055cc 	andi	zero,zero,343
    51d0:	00005d08 	cmpgei	zero,zero,372
    51d4:	00005d08 	cmpgei	zero,zero,372
    51d8:	00005d08 	cmpgei	zero,zero,372
    51dc:	00005d08 	cmpgei	zero,zero,372
    51e0:	00005d08 	cmpgei	zero,zero,372
    51e4:	00005a44 	movi	zero,361
    51e8:	00005d08 	cmpgei	zero,zero,372
    51ec:	00005d08 	cmpgei	zero,zero,372
    51f0:	00005aa4 	muli	zero,zero,362
    51f4:	00005d08 	cmpgei	zero,zero,372
    51f8:	00005d08 	cmpgei	zero,zero,372
    51fc:	00005d08 	cmpgei	zero,zero,372
    5200:	00005d08 	cmpgei	zero,zero,372
    5204:	00005d08 	cmpgei	zero,zero,372
    5208:	00005d08 	cmpgei	zero,zero,372
    520c:	00005d08 	cmpgei	zero,zero,372
    5210:	00005d08 	cmpgei	zero,zero,372
    5214:	00005d08 	cmpgei	zero,zero,372
    5218:	00005d08 	cmpgei	zero,zero,372
    521c:	00005cb4 	movhi	zero,370
    5220:	00005c54 	movui	zero,369
    5224:	00005520 	cmpeqi	zero,zero,340
    5228:	00005520 	cmpeqi	zero,zero,340
    522c:	00005520 	cmpeqi	zero,zero,340
    5230:	00005c64 	muli	zero,zero,369
    5234:	00005c54 	movui	zero,369
    5238:	00005d08 	cmpgei	zero,zero,372
    523c:	00005d08 	cmpgei	zero,zero,372
    5240:	00005c70 	cmpltui	zero,zero,369
    5244:	00005d08 	cmpgei	zero,zero,372
    5248:	00005c80 	call	5c8 <calcNet+0x27c>
    524c:	00005b54 	movui	zero,365
    5250:	00005290 	cmplti	zero,zero,330
    5254:	00005b74 	movhi	zero,365
    5258:	00005d08 	cmpgei	zero,zero,372
    525c:	00005b80 	call	5b8 <calcNet+0x26c>
    5260:	00005d08 	cmpgei	zero,zero,372
    5264:	00005bdc 	xori	zero,zero,367
    5268:	00005d08 	cmpgei	zero,zero,372
    526c:	00005d08 	cmpgei	zero,zero,372
    5270:	00005bec 	andhi	zero,zero,367
    5274:	d9003117 	ldw	r4,196(sp)
    5278:	d8802d15 	stw	r2,180(sp)
    527c:	0109c83a 	sub	r4,zero,r4
    5280:	d9003115 	stw	r4,196(sp)
    5284:	94800114 	ori	r18,r18,4
    5288:	ac400007 	ldb	r17,0(r21)
    528c:	003f9706 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5290:	00800c04 	movi	r2,48
    5294:	d9002d17 	ldw	r4,180(sp)
    5298:	d9402917 	ldw	r5,164(sp)
    529c:	d8802705 	stb	r2,156(sp)
    52a0:	00801e04 	movi	r2,120
    52a4:	d8802745 	stb	r2,157(sp)
    52a8:	d8002785 	stb	zero,158(sp)
    52ac:	20c00104 	addi	r3,r4,4
    52b0:	24c00017 	ldw	r19,0(r4)
    52b4:	002d883a 	mov	r22,zero
    52b8:	90800094 	ori	r2,r18,2
    52bc:	28029a16 	blt	r5,zero,5d28 <___vfprintf_internal_r+0xdc0>
    52c0:	00bfdfc4 	movi	r2,-129
    52c4:	90a4703a 	and	r18,r18,r2
    52c8:	d8c02d15 	stw	r3,180(sp)
    52cc:	94800094 	ori	r18,r18,2
    52d0:	9802871e 	bne	r19,zero,5cf0 <___vfprintf_internal_r+0xd88>
    52d4:	00800074 	movhi	r2,1
    52d8:	10886404 	addi	r2,r2,8592
    52dc:	d8803915 	stw	r2,228(sp)
    52e0:	04401e04 	movi	r17,120
    52e4:	d8802917 	ldw	r2,164(sp)
    52e8:	0039883a 	mov	fp,zero
    52ec:	1001e926 	beq	r2,zero,5a94 <___vfprintf_internal_r+0xb2c>
    52f0:	0027883a 	mov	r19,zero
    52f4:	002d883a 	mov	r22,zero
    52f8:	00020506 	br	5b10 <___vfprintf_internal_r+0xba8>
    52fc:	d9002c17 	ldw	r4,176(sp)
    5300:	b80b883a 	mov	r5,r23
    5304:	00072380 	call	7238 <__swsetup_r>
    5308:	1005ac1e 	bne	r2,zero,69bc <___vfprintf_internal_r+0x1a54>
    530c:	b880030b 	ldhu	r2,12(r23)
    5310:	00c00284 	movi	r3,10
    5314:	1080068c 	andi	r2,r2,26
    5318:	10ff3c1e 	bne	r2,r3,500c <__alt_mem_onchip_memory+0xf780500c>
    531c:	b880038f 	ldh	r2,14(r23)
    5320:	103f3a16 	blt	r2,zero,500c <__alt_mem_onchip_memory+0xf780500c>
    5324:	d9c02d17 	ldw	r7,180(sp)
    5328:	d9002c17 	ldw	r4,176(sp)
    532c:	a80d883a 	mov	r6,r21
    5330:	b80b883a 	mov	r5,r23
    5334:	000717c0 	call	717c <__sbprintf>
    5338:	00001106 	br	5380 <___vfprintf_internal_r+0x418>
    533c:	d9002c17 	ldw	r4,176(sp)
    5340:	d9801e04 	addi	r6,sp,120
    5344:	b80b883a 	mov	r5,r23
    5348:	000c6b40 	call	c6b4 <__sprint_r>
    534c:	1000081e 	bne	r2,zero,5370 <___vfprintf_internal_r+0x408>
    5350:	da000404 	addi	r8,sp,16
    5354:	003f5306 	br	50a4 <__alt_mem_onchip_memory+0xf78050a4>
    5358:	d8802017 	ldw	r2,128(sp)
    535c:	10000426 	beq	r2,zero,5370 <___vfprintf_internal_r+0x408>
    5360:	d9002c17 	ldw	r4,176(sp)
    5364:	d9801e04 	addi	r6,sp,120
    5368:	b80b883a 	mov	r5,r23
    536c:	000c6b40 	call	c6b4 <__sprint_r>
    5370:	b880030b 	ldhu	r2,12(r23)
    5374:	1080100c 	andi	r2,r2,64
    5378:	1005901e 	bne	r2,zero,69bc <___vfprintf_internal_r+0x1a54>
    537c:	d8802f17 	ldw	r2,188(sp)
    5380:	dfc04717 	ldw	ra,284(sp)
    5384:	df004617 	ldw	fp,280(sp)
    5388:	ddc04517 	ldw	r23,276(sp)
    538c:	dd804417 	ldw	r22,272(sp)
    5390:	dd404317 	ldw	r21,268(sp)
    5394:	dd004217 	ldw	r20,264(sp)
    5398:	dcc04117 	ldw	r19,260(sp)
    539c:	dc804017 	ldw	r18,256(sp)
    53a0:	dc403f17 	ldw	r17,252(sp)
    53a4:	dc003e17 	ldw	r16,248(sp)
    53a8:	dec04804 	addi	sp,sp,288
    53ac:	f800283a 	ret
    53b0:	d9002c17 	ldw	r4,176(sp)
    53b4:	000920c0 	call	920c <__sinit>
    53b8:	003f0406 	br	4fcc <__alt_mem_onchip_memory+0xf7804fcc>
    53bc:	d8802d17 	ldw	r2,180(sp)
    53c0:	d9002d17 	ldw	r4,180(sp)
    53c4:	10800017 	ldw	r2,0(r2)
    53c8:	d8803115 	stw	r2,196(sp)
    53cc:	20800104 	addi	r2,r4,4
    53d0:	d9003117 	ldw	r4,196(sp)
    53d4:	203fa716 	blt	r4,zero,5274 <__alt_mem_onchip_memory+0xf7805274>
    53d8:	d8802d15 	stw	r2,180(sp)
    53dc:	ac400007 	ldb	r17,0(r21)
    53e0:	003f4206 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    53e4:	ac400007 	ldb	r17,0(r21)
    53e8:	aac00044 	addi	r11,r21,1
    53ec:	8a872826 	beq	r17,r10,7090 <___vfprintf_internal_r+0x2128>
    53f0:	88bff404 	addi	r2,r17,-48
    53f4:	0009883a 	mov	r4,zero
    53f8:	30867d36 	bltu	r6,r2,6df0 <___vfprintf_internal_r+0x1e88>
    53fc:	5c400007 	ldb	r17,0(r11)
    5400:	210002a4 	muli	r4,r4,10
    5404:	5d400044 	addi	r21,r11,1
    5408:	a817883a 	mov	r11,r21
    540c:	2089883a 	add	r4,r4,r2
    5410:	88bff404 	addi	r2,r17,-48
    5414:	30bff92e 	bgeu	r6,r2,53fc <__alt_mem_onchip_memory+0xf78053fc>
    5418:	2005c916 	blt	r4,zero,6b40 <___vfprintf_internal_r+0x1bd8>
    541c:	d9002915 	stw	r4,164(sp)
    5420:	003f3306 	br	50f0 <__alt_mem_onchip_memory+0xf78050f0>
    5424:	94802014 	ori	r18,r18,128
    5428:	ac400007 	ldb	r17,0(r21)
    542c:	003f2f06 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5430:	a809883a 	mov	r4,r21
    5434:	d8003115 	stw	zero,196(sp)
    5438:	88bff404 	addi	r2,r17,-48
    543c:	0017883a 	mov	r11,zero
    5440:	24400007 	ldb	r17,0(r4)
    5444:	5ac002a4 	muli	r11,r11,10
    5448:	ad400044 	addi	r21,r21,1
    544c:	a809883a 	mov	r4,r21
    5450:	12d7883a 	add	r11,r2,r11
    5454:	88bff404 	addi	r2,r17,-48
    5458:	30bff92e 	bgeu	r6,r2,5440 <__alt_mem_onchip_memory+0xf7805440>
    545c:	dac03115 	stw	r11,196(sp)
    5460:	003f2306 	br	50f0 <__alt_mem_onchip_memory+0xf78050f0>
    5464:	18c03fcc 	andi	r3,r3,255
    5468:	18072b1e 	bne	r3,zero,7118 <___vfprintf_internal_r+0x21b0>
    546c:	94800414 	ori	r18,r18,16
    5470:	9080080c 	andi	r2,r18,32
    5474:	10037b26 	beq	r2,zero,6264 <___vfprintf_internal_r+0x12fc>
    5478:	d9402d17 	ldw	r5,180(sp)
    547c:	28800117 	ldw	r2,4(r5)
    5480:	2cc00017 	ldw	r19,0(r5)
    5484:	29400204 	addi	r5,r5,8
    5488:	d9402d15 	stw	r5,180(sp)
    548c:	102d883a 	mov	r22,r2
    5490:	10044b16 	blt	r2,zero,65c0 <___vfprintf_internal_r+0x1658>
    5494:	d9402917 	ldw	r5,164(sp)
    5498:	df002783 	ldbu	fp,158(sp)
    549c:	2803bc16 	blt	r5,zero,6390 <___vfprintf_internal_r+0x1428>
    54a0:	00ffdfc4 	movi	r3,-129
    54a4:	9d84b03a 	or	r2,r19,r22
    54a8:	90e4703a 	and	r18,r18,r3
    54ac:	10017726 	beq	r2,zero,5a8c <___vfprintf_internal_r+0xb24>
    54b0:	b0038326 	beq	r22,zero,62c0 <___vfprintf_internal_r+0x1358>
    54b4:	dc402a15 	stw	r17,168(sp)
    54b8:	dc001e04 	addi	r16,sp,120
    54bc:	b023883a 	mov	r17,r22
    54c0:	402d883a 	mov	r22,r8
    54c4:	9809883a 	mov	r4,r19
    54c8:	880b883a 	mov	r5,r17
    54cc:	01800284 	movi	r6,10
    54d0:	000f883a 	mov	r7,zero
    54d4:	000eb0c0 	call	eb0c <__umoddi3>
    54d8:	10800c04 	addi	r2,r2,48
    54dc:	843fffc4 	addi	r16,r16,-1
    54e0:	9809883a 	mov	r4,r19
    54e4:	880b883a 	mov	r5,r17
    54e8:	80800005 	stb	r2,0(r16)
    54ec:	01800284 	movi	r6,10
    54f0:	000f883a 	mov	r7,zero
    54f4:	000e5940 	call	e594 <__udivdi3>
    54f8:	1027883a 	mov	r19,r2
    54fc:	10c4b03a 	or	r2,r2,r3
    5500:	1823883a 	mov	r17,r3
    5504:	103fef1e 	bne	r2,zero,54c4 <__alt_mem_onchip_memory+0xf78054c4>
    5508:	d8c02817 	ldw	r3,160(sp)
    550c:	dc402a17 	ldw	r17,168(sp)
    5510:	b011883a 	mov	r8,r22
    5514:	1c07c83a 	sub	r3,r3,r16
    5518:	d8c02e15 	stw	r3,184(sp)
    551c:	00005906 	br	5684 <___vfprintf_internal_r+0x71c>
    5520:	18c03fcc 	andi	r3,r3,255
    5524:	1806fa1e 	bne	r3,zero,7110 <___vfprintf_internal_r+0x21a8>
    5528:	9080020c 	andi	r2,r18,8
    552c:	10048a26 	beq	r2,zero,6758 <___vfprintf_internal_r+0x17f0>
    5530:	d8c02d17 	ldw	r3,180(sp)
    5534:	d9002d17 	ldw	r4,180(sp)
    5538:	d9402d17 	ldw	r5,180(sp)
    553c:	18c00017 	ldw	r3,0(r3)
    5540:	21000117 	ldw	r4,4(r4)
    5544:	29400204 	addi	r5,r5,8
    5548:	d8c03615 	stw	r3,216(sp)
    554c:	d9003815 	stw	r4,224(sp)
    5550:	d9402d15 	stw	r5,180(sp)
    5554:	d9003617 	ldw	r4,216(sp)
    5558:	d9403817 	ldw	r5,224(sp)
    555c:	da003d15 	stw	r8,244(sp)
    5560:	04000044 	movi	r16,1
    5564:	00022140 	call	2214 <__fpclassifyd>
    5568:	da003d17 	ldw	r8,244(sp)
    556c:	14041f1e 	bne	r2,r16,65ec <___vfprintf_internal_r+0x1684>
    5570:	d9003617 	ldw	r4,216(sp)
    5574:	d9403817 	ldw	r5,224(sp)
    5578:	000d883a 	mov	r6,zero
    557c:	000f883a 	mov	r7,zero
    5580:	00035000 	call	3500 <__ledf2>
    5584:	da003d17 	ldw	r8,244(sp)
    5588:	1005be16 	blt	r2,zero,6c84 <___vfprintf_internal_r+0x1d1c>
    558c:	df002783 	ldbu	fp,158(sp)
    5590:	008011c4 	movi	r2,71
    5594:	1445330e 	bge	r2,r17,6a64 <___vfprintf_internal_r+0x1afc>
    5598:	04000074 	movhi	r16,1
    559c:	84085c04 	addi	r16,r16,8560
    55a0:	00c000c4 	movi	r3,3
    55a4:	00bfdfc4 	movi	r2,-129
    55a8:	d8c02a15 	stw	r3,168(sp)
    55ac:	90a4703a 	and	r18,r18,r2
    55b0:	d8c02e15 	stw	r3,184(sp)
    55b4:	d8002915 	stw	zero,164(sp)
    55b8:	d8003215 	stw	zero,200(sp)
    55bc:	00003706 	br	569c <___vfprintf_internal_r+0x734>
    55c0:	94800214 	ori	r18,r18,8
    55c4:	ac400007 	ldb	r17,0(r21)
    55c8:	003ec806 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    55cc:	18c03fcc 	andi	r3,r3,255
    55d0:	1806db1e 	bne	r3,zero,7140 <___vfprintf_internal_r+0x21d8>
    55d4:	94800414 	ori	r18,r18,16
    55d8:	9080080c 	andi	r2,r18,32
    55dc:	1002d826 	beq	r2,zero,6140 <___vfprintf_internal_r+0x11d8>
    55e0:	d9402d17 	ldw	r5,180(sp)
    55e4:	d8c02917 	ldw	r3,164(sp)
    55e8:	d8002785 	stb	zero,158(sp)
    55ec:	28800204 	addi	r2,r5,8
    55f0:	2cc00017 	ldw	r19,0(r5)
    55f4:	2d800117 	ldw	r22,4(r5)
    55f8:	18048f16 	blt	r3,zero,6838 <___vfprintf_internal_r+0x18d0>
    55fc:	013fdfc4 	movi	r4,-129
    5600:	9d86b03a 	or	r3,r19,r22
    5604:	d8802d15 	stw	r2,180(sp)
    5608:	9124703a 	and	r18,r18,r4
    560c:	1802d91e 	bne	r3,zero,6174 <___vfprintf_internal_r+0x120c>
    5610:	d8c02917 	ldw	r3,164(sp)
    5614:	0039883a 	mov	fp,zero
    5618:	1805c326 	beq	r3,zero,6d28 <___vfprintf_internal_r+0x1dc0>
    561c:	0027883a 	mov	r19,zero
    5620:	002d883a 	mov	r22,zero
    5624:	dc001e04 	addi	r16,sp,120
    5628:	9806d0fa 	srli	r3,r19,3
    562c:	b008977a 	slli	r4,r22,29
    5630:	b02cd0fa 	srli	r22,r22,3
    5634:	9cc001cc 	andi	r19,r19,7
    5638:	98800c04 	addi	r2,r19,48
    563c:	843fffc4 	addi	r16,r16,-1
    5640:	20e6b03a 	or	r19,r4,r3
    5644:	80800005 	stb	r2,0(r16)
    5648:	9d86b03a 	or	r3,r19,r22
    564c:	183ff61e 	bne	r3,zero,5628 <__alt_mem_onchip_memory+0xf7805628>
    5650:	90c0004c 	andi	r3,r18,1
    5654:	18013b26 	beq	r3,zero,5b44 <___vfprintf_internal_r+0xbdc>
    5658:	10803fcc 	andi	r2,r2,255
    565c:	1080201c 	xori	r2,r2,128
    5660:	10bfe004 	addi	r2,r2,-128
    5664:	00c00c04 	movi	r3,48
    5668:	10c13626 	beq	r2,r3,5b44 <___vfprintf_internal_r+0xbdc>
    566c:	80ffffc5 	stb	r3,-1(r16)
    5670:	d8c02817 	ldw	r3,160(sp)
    5674:	80bfffc4 	addi	r2,r16,-1
    5678:	1021883a 	mov	r16,r2
    567c:	1887c83a 	sub	r3,r3,r2
    5680:	d8c02e15 	stw	r3,184(sp)
    5684:	d8802e17 	ldw	r2,184(sp)
    5688:	d9002917 	ldw	r4,164(sp)
    568c:	1100010e 	bge	r2,r4,5694 <___vfprintf_internal_r+0x72c>
    5690:	2005883a 	mov	r2,r4
    5694:	d8802a15 	stw	r2,168(sp)
    5698:	d8003215 	stw	zero,200(sp)
    569c:	e7003fcc 	andi	fp,fp,255
    56a0:	e700201c 	xori	fp,fp,128
    56a4:	e73fe004 	addi	fp,fp,-128
    56a8:	e0000326 	beq	fp,zero,56b8 <___vfprintf_internal_r+0x750>
    56ac:	d8c02a17 	ldw	r3,168(sp)
    56b0:	18c00044 	addi	r3,r3,1
    56b4:	d8c02a15 	stw	r3,168(sp)
    56b8:	90c0008c 	andi	r3,r18,2
    56bc:	d8c02b15 	stw	r3,172(sp)
    56c0:	18000326 	beq	r3,zero,56d0 <___vfprintf_internal_r+0x768>
    56c4:	d8c02a17 	ldw	r3,168(sp)
    56c8:	18c00084 	addi	r3,r3,2
    56cc:	d8c02a15 	stw	r3,168(sp)
    56d0:	90c0210c 	andi	r3,r18,132
    56d4:	d8c03015 	stw	r3,192(sp)
    56d8:	1801a31e 	bne	r3,zero,5d68 <___vfprintf_internal_r+0xe00>
    56dc:	d9003117 	ldw	r4,196(sp)
    56e0:	d8c02a17 	ldw	r3,168(sp)
    56e4:	20e7c83a 	sub	r19,r4,r3
    56e8:	04c19f0e 	bge	zero,r19,5d68 <___vfprintf_internal_r+0xe00>
    56ec:	02400404 	movi	r9,16
    56f0:	d8c02017 	ldw	r3,128(sp)
    56f4:	d8801f17 	ldw	r2,124(sp)
    56f8:	4cc50d0e 	bge	r9,r19,6b30 <___vfprintf_internal_r+0x1bc8>
    56fc:	01400074 	movhi	r5,1
    5700:	29486f84 	addi	r5,r5,8638
    5704:	dc403b15 	stw	r17,236(sp)
    5708:	d9403515 	stw	r5,212(sp)
    570c:	9823883a 	mov	r17,r19
    5710:	482d883a 	mov	r22,r9
    5714:	9027883a 	mov	r19,r18
    5718:	070001c4 	movi	fp,7
    571c:	8025883a 	mov	r18,r16
    5720:	dc002c17 	ldw	r16,176(sp)
    5724:	00000306 	br	5734 <___vfprintf_internal_r+0x7cc>
    5728:	8c7ffc04 	addi	r17,r17,-16
    572c:	42000204 	addi	r8,r8,8
    5730:	b440130e 	bge	r22,r17,5780 <___vfprintf_internal_r+0x818>
    5734:	01000074 	movhi	r4,1
    5738:	18c00404 	addi	r3,r3,16
    573c:	10800044 	addi	r2,r2,1
    5740:	21086f84 	addi	r4,r4,8638
    5744:	41000015 	stw	r4,0(r8)
    5748:	45800115 	stw	r22,4(r8)
    574c:	d8c02015 	stw	r3,128(sp)
    5750:	d8801f15 	stw	r2,124(sp)
    5754:	e0bff40e 	bge	fp,r2,5728 <__alt_mem_onchip_memory+0xf7805728>
    5758:	d9801e04 	addi	r6,sp,120
    575c:	b80b883a 	mov	r5,r23
    5760:	8009883a 	mov	r4,r16
    5764:	000c6b40 	call	c6b4 <__sprint_r>
    5768:	103f011e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    576c:	8c7ffc04 	addi	r17,r17,-16
    5770:	d8c02017 	ldw	r3,128(sp)
    5774:	d8801f17 	ldw	r2,124(sp)
    5778:	da000404 	addi	r8,sp,16
    577c:	b47fed16 	blt	r22,r17,5734 <__alt_mem_onchip_memory+0xf7805734>
    5780:	9021883a 	mov	r16,r18
    5784:	9825883a 	mov	r18,r19
    5788:	8827883a 	mov	r19,r17
    578c:	dc403b17 	ldw	r17,236(sp)
    5790:	d9403517 	ldw	r5,212(sp)
    5794:	98c7883a 	add	r3,r19,r3
    5798:	10800044 	addi	r2,r2,1
    579c:	41400015 	stw	r5,0(r8)
    57a0:	44c00115 	stw	r19,4(r8)
    57a4:	d8c02015 	stw	r3,128(sp)
    57a8:	d8801f15 	stw	r2,124(sp)
    57ac:	010001c4 	movi	r4,7
    57b0:	2082a316 	blt	r4,r2,6240 <___vfprintf_internal_r+0x12d8>
    57b4:	df002787 	ldb	fp,158(sp)
    57b8:	42000204 	addi	r8,r8,8
    57bc:	e0000c26 	beq	fp,zero,57f0 <___vfprintf_internal_r+0x888>
    57c0:	d8801f17 	ldw	r2,124(sp)
    57c4:	d9002784 	addi	r4,sp,158
    57c8:	18c00044 	addi	r3,r3,1
    57cc:	10800044 	addi	r2,r2,1
    57d0:	41000015 	stw	r4,0(r8)
    57d4:	01000044 	movi	r4,1
    57d8:	41000115 	stw	r4,4(r8)
    57dc:	d8c02015 	stw	r3,128(sp)
    57e0:	d8801f15 	stw	r2,124(sp)
    57e4:	010001c4 	movi	r4,7
    57e8:	20823c16 	blt	r4,r2,60dc <___vfprintf_internal_r+0x1174>
    57ec:	42000204 	addi	r8,r8,8
    57f0:	d8802b17 	ldw	r2,172(sp)
    57f4:	10000c26 	beq	r2,zero,5828 <___vfprintf_internal_r+0x8c0>
    57f8:	d8801f17 	ldw	r2,124(sp)
    57fc:	d9002704 	addi	r4,sp,156
    5800:	18c00084 	addi	r3,r3,2
    5804:	10800044 	addi	r2,r2,1
    5808:	41000015 	stw	r4,0(r8)
    580c:	01000084 	movi	r4,2
    5810:	41000115 	stw	r4,4(r8)
    5814:	d8c02015 	stw	r3,128(sp)
    5818:	d8801f15 	stw	r2,124(sp)
    581c:	010001c4 	movi	r4,7
    5820:	20823616 	blt	r4,r2,60fc <___vfprintf_internal_r+0x1194>
    5824:	42000204 	addi	r8,r8,8
    5828:	d9003017 	ldw	r4,192(sp)
    582c:	00802004 	movi	r2,128
    5830:	20819926 	beq	r4,r2,5e98 <___vfprintf_internal_r+0xf30>
    5834:	d9402917 	ldw	r5,164(sp)
    5838:	d8802e17 	ldw	r2,184(sp)
    583c:	28adc83a 	sub	r22,r5,r2
    5840:	0580310e 	bge	zero,r22,5908 <___vfprintf_internal_r+0x9a0>
    5844:	07000404 	movi	fp,16
    5848:	d8801f17 	ldw	r2,124(sp)
    584c:	e584140e 	bge	fp,r22,68a0 <___vfprintf_internal_r+0x1938>
    5850:	01400074 	movhi	r5,1
    5854:	29486b84 	addi	r5,r5,8622
    5858:	dc402915 	stw	r17,164(sp)
    585c:	d9402b15 	stw	r5,172(sp)
    5860:	b023883a 	mov	r17,r22
    5864:	04c001c4 	movi	r19,7
    5868:	a82d883a 	mov	r22,r21
    586c:	902b883a 	mov	r21,r18
    5870:	8025883a 	mov	r18,r16
    5874:	dc002c17 	ldw	r16,176(sp)
    5878:	00000306 	br	5888 <___vfprintf_internal_r+0x920>
    587c:	8c7ffc04 	addi	r17,r17,-16
    5880:	42000204 	addi	r8,r8,8
    5884:	e440110e 	bge	fp,r17,58cc <___vfprintf_internal_r+0x964>
    5888:	18c00404 	addi	r3,r3,16
    588c:	10800044 	addi	r2,r2,1
    5890:	45000015 	stw	r20,0(r8)
    5894:	47000115 	stw	fp,4(r8)
    5898:	d8c02015 	stw	r3,128(sp)
    589c:	d8801f15 	stw	r2,124(sp)
    58a0:	98bff60e 	bge	r19,r2,587c <__alt_mem_onchip_memory+0xf780587c>
    58a4:	d9801e04 	addi	r6,sp,120
    58a8:	b80b883a 	mov	r5,r23
    58ac:	8009883a 	mov	r4,r16
    58b0:	000c6b40 	call	c6b4 <__sprint_r>
    58b4:	103eae1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    58b8:	8c7ffc04 	addi	r17,r17,-16
    58bc:	d8c02017 	ldw	r3,128(sp)
    58c0:	d8801f17 	ldw	r2,124(sp)
    58c4:	da000404 	addi	r8,sp,16
    58c8:	e47fef16 	blt	fp,r17,5888 <__alt_mem_onchip_memory+0xf7805888>
    58cc:	9021883a 	mov	r16,r18
    58d0:	a825883a 	mov	r18,r21
    58d4:	b02b883a 	mov	r21,r22
    58d8:	882d883a 	mov	r22,r17
    58dc:	dc402917 	ldw	r17,164(sp)
    58e0:	d9002b17 	ldw	r4,172(sp)
    58e4:	1d87883a 	add	r3,r3,r22
    58e8:	10800044 	addi	r2,r2,1
    58ec:	41000015 	stw	r4,0(r8)
    58f0:	45800115 	stw	r22,4(r8)
    58f4:	d8c02015 	stw	r3,128(sp)
    58f8:	d8801f15 	stw	r2,124(sp)
    58fc:	010001c4 	movi	r4,7
    5900:	2081ee16 	blt	r4,r2,60bc <___vfprintf_internal_r+0x1154>
    5904:	42000204 	addi	r8,r8,8
    5908:	9080400c 	andi	r2,r18,256
    590c:	1001181e 	bne	r2,zero,5d70 <___vfprintf_internal_r+0xe08>
    5910:	d9402e17 	ldw	r5,184(sp)
    5914:	d8801f17 	ldw	r2,124(sp)
    5918:	44000015 	stw	r16,0(r8)
    591c:	1947883a 	add	r3,r3,r5
    5920:	10800044 	addi	r2,r2,1
    5924:	41400115 	stw	r5,4(r8)
    5928:	d8c02015 	stw	r3,128(sp)
    592c:	d8801f15 	stw	r2,124(sp)
    5930:	010001c4 	movi	r4,7
    5934:	2081d316 	blt	r4,r2,6084 <___vfprintf_internal_r+0x111c>
    5938:	42000204 	addi	r8,r8,8
    593c:	9480010c 	andi	r18,r18,4
    5940:	90003226 	beq	r18,zero,5a0c <___vfprintf_internal_r+0xaa4>
    5944:	d9403117 	ldw	r5,196(sp)
    5948:	d8802a17 	ldw	r2,168(sp)
    594c:	28a1c83a 	sub	r16,r5,r2
    5950:	04002e0e 	bge	zero,r16,5a0c <___vfprintf_internal_r+0xaa4>
    5954:	04400404 	movi	r17,16
    5958:	d8801f17 	ldw	r2,124(sp)
    595c:	8c04a20e 	bge	r17,r16,6be8 <___vfprintf_internal_r+0x1c80>
    5960:	01400074 	movhi	r5,1
    5964:	29486f84 	addi	r5,r5,8638
    5968:	d9403515 	stw	r5,212(sp)
    596c:	048001c4 	movi	r18,7
    5970:	dcc02c17 	ldw	r19,176(sp)
    5974:	00000306 	br	5984 <___vfprintf_internal_r+0xa1c>
    5978:	843ffc04 	addi	r16,r16,-16
    597c:	42000204 	addi	r8,r8,8
    5980:	8c00130e 	bge	r17,r16,59d0 <___vfprintf_internal_r+0xa68>
    5984:	01000074 	movhi	r4,1
    5988:	18c00404 	addi	r3,r3,16
    598c:	10800044 	addi	r2,r2,1
    5990:	21086f84 	addi	r4,r4,8638
    5994:	41000015 	stw	r4,0(r8)
    5998:	44400115 	stw	r17,4(r8)
    599c:	d8c02015 	stw	r3,128(sp)
    59a0:	d8801f15 	stw	r2,124(sp)
    59a4:	90bff40e 	bge	r18,r2,5978 <__alt_mem_onchip_memory+0xf7805978>
    59a8:	d9801e04 	addi	r6,sp,120
    59ac:	b80b883a 	mov	r5,r23
    59b0:	9809883a 	mov	r4,r19
    59b4:	000c6b40 	call	c6b4 <__sprint_r>
    59b8:	103e6d1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    59bc:	843ffc04 	addi	r16,r16,-16
    59c0:	d8c02017 	ldw	r3,128(sp)
    59c4:	d8801f17 	ldw	r2,124(sp)
    59c8:	da000404 	addi	r8,sp,16
    59cc:	8c3fed16 	blt	r17,r16,5984 <__alt_mem_onchip_memory+0xf7805984>
    59d0:	d9403517 	ldw	r5,212(sp)
    59d4:	1c07883a 	add	r3,r3,r16
    59d8:	10800044 	addi	r2,r2,1
    59dc:	41400015 	stw	r5,0(r8)
    59e0:	44000115 	stw	r16,4(r8)
    59e4:	d8c02015 	stw	r3,128(sp)
    59e8:	d8801f15 	stw	r2,124(sp)
    59ec:	010001c4 	movi	r4,7
    59f0:	2080060e 	bge	r4,r2,5a0c <___vfprintf_internal_r+0xaa4>
    59f4:	d9002c17 	ldw	r4,176(sp)
    59f8:	d9801e04 	addi	r6,sp,120
    59fc:	b80b883a 	mov	r5,r23
    5a00:	000c6b40 	call	c6b4 <__sprint_r>
    5a04:	103e5a1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    5a08:	d8c02017 	ldw	r3,128(sp)
    5a0c:	d8803117 	ldw	r2,196(sp)
    5a10:	d9002a17 	ldw	r4,168(sp)
    5a14:	1100010e 	bge	r2,r4,5a1c <___vfprintf_internal_r+0xab4>
    5a18:	2005883a 	mov	r2,r4
    5a1c:	d9402f17 	ldw	r5,188(sp)
    5a20:	288b883a 	add	r5,r5,r2
    5a24:	d9402f15 	stw	r5,188(sp)
    5a28:	18019e1e 	bne	r3,zero,60a4 <___vfprintf_internal_r+0x113c>
    5a2c:	a8800007 	ldb	r2,0(r21)
    5a30:	d8001f15 	stw	zero,124(sp)
    5a34:	da000404 	addi	r8,sp,16
    5a38:	103d851e 	bne	r2,zero,5050 <__alt_mem_onchip_memory+0xf7805050>
    5a3c:	a821883a 	mov	r16,r21
    5a40:	003d9b06 	br	50b0 <__alt_mem_onchip_memory+0xf78050b0>
    5a44:	18c03fcc 	andi	r3,r3,255
    5a48:	1805c11e 	bne	r3,zero,7150 <___vfprintf_internal_r+0x21e8>
    5a4c:	94800414 	ori	r18,r18,16
    5a50:	9080080c 	andi	r2,r18,32
    5a54:	10020c26 	beq	r2,zero,6288 <___vfprintf_internal_r+0x1320>
    5a58:	d8802d17 	ldw	r2,180(sp)
    5a5c:	d9002917 	ldw	r4,164(sp)
    5a60:	d8002785 	stb	zero,158(sp)
    5a64:	10c00204 	addi	r3,r2,8
    5a68:	14c00017 	ldw	r19,0(r2)
    5a6c:	15800117 	ldw	r22,4(r2)
    5a70:	20040f16 	blt	r4,zero,6ab0 <___vfprintf_internal_r+0x1b48>
    5a74:	013fdfc4 	movi	r4,-129
    5a78:	9d84b03a 	or	r2,r19,r22
    5a7c:	d8c02d15 	stw	r3,180(sp)
    5a80:	9124703a 	and	r18,r18,r4
    5a84:	0039883a 	mov	fp,zero
    5a88:	103e891e 	bne	r2,zero,54b0 <__alt_mem_onchip_memory+0xf78054b0>
    5a8c:	d9002917 	ldw	r4,164(sp)
    5a90:	2002c11e 	bne	r4,zero,6598 <___vfprintf_internal_r+0x1630>
    5a94:	d8002915 	stw	zero,164(sp)
    5a98:	d8002e15 	stw	zero,184(sp)
    5a9c:	dc001e04 	addi	r16,sp,120
    5aa0:	003ef806 	br	5684 <__alt_mem_onchip_memory+0xf7805684>
    5aa4:	18c03fcc 	andi	r3,r3,255
    5aa8:	18059d1e 	bne	r3,zero,7120 <___vfprintf_internal_r+0x21b8>
    5aac:	01400074 	movhi	r5,1
    5ab0:	29485f04 	addi	r5,r5,8572
    5ab4:	d9403915 	stw	r5,228(sp)
    5ab8:	9080080c 	andi	r2,r18,32
    5abc:	10005226 	beq	r2,zero,5c08 <___vfprintf_internal_r+0xca0>
    5ac0:	d8802d17 	ldw	r2,180(sp)
    5ac4:	14c00017 	ldw	r19,0(r2)
    5ac8:	15800117 	ldw	r22,4(r2)
    5acc:	10800204 	addi	r2,r2,8
    5ad0:	d8802d15 	stw	r2,180(sp)
    5ad4:	9080004c 	andi	r2,r18,1
    5ad8:	10019026 	beq	r2,zero,611c <___vfprintf_internal_r+0x11b4>
    5adc:	9d84b03a 	or	r2,r19,r22
    5ae0:	10036926 	beq	r2,zero,6888 <___vfprintf_internal_r+0x1920>
    5ae4:	d8c02917 	ldw	r3,164(sp)
    5ae8:	00800c04 	movi	r2,48
    5aec:	d8802705 	stb	r2,156(sp)
    5af0:	dc402745 	stb	r17,157(sp)
    5af4:	d8002785 	stb	zero,158(sp)
    5af8:	90800094 	ori	r2,r18,2
    5afc:	18045d16 	blt	r3,zero,6c74 <___vfprintf_internal_r+0x1d0c>
    5b00:	00bfdfc4 	movi	r2,-129
    5b04:	90a4703a 	and	r18,r18,r2
    5b08:	94800094 	ori	r18,r18,2
    5b0c:	0039883a 	mov	fp,zero
    5b10:	d9003917 	ldw	r4,228(sp)
    5b14:	dc001e04 	addi	r16,sp,120
    5b18:	988003cc 	andi	r2,r19,15
    5b1c:	b006973a 	slli	r3,r22,28
    5b20:	2085883a 	add	r2,r4,r2
    5b24:	9826d13a 	srli	r19,r19,4
    5b28:	10800003 	ldbu	r2,0(r2)
    5b2c:	b02cd13a 	srli	r22,r22,4
    5b30:	843fffc4 	addi	r16,r16,-1
    5b34:	1ce6b03a 	or	r19,r3,r19
    5b38:	80800005 	stb	r2,0(r16)
    5b3c:	9d84b03a 	or	r2,r19,r22
    5b40:	103ff51e 	bne	r2,zero,5b18 <__alt_mem_onchip_memory+0xf7805b18>
    5b44:	d8c02817 	ldw	r3,160(sp)
    5b48:	1c07c83a 	sub	r3,r3,r16
    5b4c:	d8c02e15 	stw	r3,184(sp)
    5b50:	003ecc06 	br	5684 <__alt_mem_onchip_memory+0xf7805684>
    5b54:	18c03fcc 	andi	r3,r3,255
    5b58:	183e9f26 	beq	r3,zero,55d8 <__alt_mem_onchip_memory+0xf78055d8>
    5b5c:	d9c02785 	stb	r7,158(sp)
    5b60:	003e9d06 	br	55d8 <__alt_mem_onchip_memory+0xf78055d8>
    5b64:	00c00044 	movi	r3,1
    5b68:	01c00ac4 	movi	r7,43
    5b6c:	ac400007 	ldb	r17,0(r21)
    5b70:	003d5e06 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5b74:	94800814 	ori	r18,r18,32
    5b78:	ac400007 	ldb	r17,0(r21)
    5b7c:	003d5b06 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5b80:	d8c02d17 	ldw	r3,180(sp)
    5b84:	d8002785 	stb	zero,158(sp)
    5b88:	1c000017 	ldw	r16,0(r3)
    5b8c:	1cc00104 	addi	r19,r3,4
    5b90:	80041926 	beq	r16,zero,6bf8 <___vfprintf_internal_r+0x1c90>
    5b94:	d9002917 	ldw	r4,164(sp)
    5b98:	2003d016 	blt	r4,zero,6adc <___vfprintf_internal_r+0x1b74>
    5b9c:	200d883a 	mov	r6,r4
    5ba0:	000b883a 	mov	r5,zero
    5ba4:	8009883a 	mov	r4,r16
    5ba8:	da003d15 	stw	r8,244(sp)
    5bac:	000a7d40 	call	a7d4 <memchr>
    5bb0:	da003d17 	ldw	r8,244(sp)
    5bb4:	10045426 	beq	r2,zero,6d08 <___vfprintf_internal_r+0x1da0>
    5bb8:	1405c83a 	sub	r2,r2,r16
    5bbc:	d8802e15 	stw	r2,184(sp)
    5bc0:	1003cc16 	blt	r2,zero,6af4 <___vfprintf_internal_r+0x1b8c>
    5bc4:	df002783 	ldbu	fp,158(sp)
    5bc8:	d8802a15 	stw	r2,168(sp)
    5bcc:	dcc02d15 	stw	r19,180(sp)
    5bd0:	d8002915 	stw	zero,164(sp)
    5bd4:	d8003215 	stw	zero,200(sp)
    5bd8:	003eb006 	br	569c <__alt_mem_onchip_memory+0xf780569c>
    5bdc:	18c03fcc 	andi	r3,r3,255
    5be0:	183f9b26 	beq	r3,zero,5a50 <__alt_mem_onchip_memory+0xf7805a50>
    5be4:	d9c02785 	stb	r7,158(sp)
    5be8:	003f9906 	br	5a50 <__alt_mem_onchip_memory+0xf7805a50>
    5bec:	18c03fcc 	andi	r3,r3,255
    5bf0:	1805551e 	bne	r3,zero,7148 <___vfprintf_internal_r+0x21e0>
    5bf4:	01400074 	movhi	r5,1
    5bf8:	29486404 	addi	r5,r5,8592
    5bfc:	d9403915 	stw	r5,228(sp)
    5c00:	9080080c 	andi	r2,r18,32
    5c04:	103fae1e 	bne	r2,zero,5ac0 <__alt_mem_onchip_memory+0xf7805ac0>
    5c08:	9080040c 	andi	r2,r18,16
    5c0c:	1002de26 	beq	r2,zero,6788 <___vfprintf_internal_r+0x1820>
    5c10:	d8c02d17 	ldw	r3,180(sp)
    5c14:	002d883a 	mov	r22,zero
    5c18:	1cc00017 	ldw	r19,0(r3)
    5c1c:	18c00104 	addi	r3,r3,4
    5c20:	d8c02d15 	stw	r3,180(sp)
    5c24:	003fab06 	br	5ad4 <__alt_mem_onchip_memory+0xf7805ad4>
    5c28:	38803fcc 	andi	r2,r7,255
    5c2c:	1080201c 	xori	r2,r2,128
    5c30:	10bfe004 	addi	r2,r2,-128
    5c34:	1002d21e 	bne	r2,zero,6780 <___vfprintf_internal_r+0x1818>
    5c38:	00c00044 	movi	r3,1
    5c3c:	01c00804 	movi	r7,32
    5c40:	ac400007 	ldb	r17,0(r21)
    5c44:	003d2906 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5c48:	94800054 	ori	r18,r18,1
    5c4c:	ac400007 	ldb	r17,0(r21)
    5c50:	003d2606 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5c54:	18c03fcc 	andi	r3,r3,255
    5c58:	183e0526 	beq	r3,zero,5470 <__alt_mem_onchip_memory+0xf7805470>
    5c5c:	d9c02785 	stb	r7,158(sp)
    5c60:	003e0306 	br	5470 <__alt_mem_onchip_memory+0xf7805470>
    5c64:	94801014 	ori	r18,r18,64
    5c68:	ac400007 	ldb	r17,0(r21)
    5c6c:	003d1f06 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5c70:	ac400007 	ldb	r17,0(r21)
    5c74:	8a438726 	beq	r17,r9,6a94 <___vfprintf_internal_r+0x1b2c>
    5c78:	94800414 	ori	r18,r18,16
    5c7c:	003d1b06 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    5c80:	18c03fcc 	andi	r3,r3,255
    5c84:	1805341e 	bne	r3,zero,7158 <___vfprintf_internal_r+0x21f0>
    5c88:	9080080c 	andi	r2,r18,32
    5c8c:	1002cd26 	beq	r2,zero,67c4 <___vfprintf_internal_r+0x185c>
    5c90:	d9402d17 	ldw	r5,180(sp)
    5c94:	d9002f17 	ldw	r4,188(sp)
    5c98:	28800017 	ldw	r2,0(r5)
    5c9c:	2007d7fa 	srai	r3,r4,31
    5ca0:	29400104 	addi	r5,r5,4
    5ca4:	d9402d15 	stw	r5,180(sp)
    5ca8:	11000015 	stw	r4,0(r2)
    5cac:	10c00115 	stw	r3,4(r2)
    5cb0:	003ce506 	br	5048 <__alt_mem_onchip_memory+0xf7805048>
    5cb4:	d8c02d17 	ldw	r3,180(sp)
    5cb8:	d9002d17 	ldw	r4,180(sp)
    5cbc:	d8002785 	stb	zero,158(sp)
    5cc0:	18800017 	ldw	r2,0(r3)
    5cc4:	21000104 	addi	r4,r4,4
    5cc8:	00c00044 	movi	r3,1
    5ccc:	d8c02a15 	stw	r3,168(sp)
    5cd0:	d8801405 	stb	r2,80(sp)
    5cd4:	d9002d15 	stw	r4,180(sp)
    5cd8:	d8c02e15 	stw	r3,184(sp)
    5cdc:	d8002915 	stw	zero,164(sp)
    5ce0:	d8003215 	stw	zero,200(sp)
    5ce4:	dc001404 	addi	r16,sp,80
    5ce8:	0039883a 	mov	fp,zero
    5cec:	003e7206 	br	56b8 <__alt_mem_onchip_memory+0xf78056b8>
    5cf0:	01000074 	movhi	r4,1
    5cf4:	21086404 	addi	r4,r4,8592
    5cf8:	0039883a 	mov	fp,zero
    5cfc:	d9003915 	stw	r4,228(sp)
    5d00:	04401e04 	movi	r17,120
    5d04:	003f8206 	br	5b10 <__alt_mem_onchip_memory+0xf7805b10>
    5d08:	18c03fcc 	andi	r3,r3,255
    5d0c:	1805061e 	bne	r3,zero,7128 <___vfprintf_internal_r+0x21c0>
    5d10:	883d9126 	beq	r17,zero,5358 <__alt_mem_onchip_memory+0xf7805358>
    5d14:	00c00044 	movi	r3,1
    5d18:	d8c02a15 	stw	r3,168(sp)
    5d1c:	dc401405 	stb	r17,80(sp)
    5d20:	d8002785 	stb	zero,158(sp)
    5d24:	003fec06 	br	5cd8 <__alt_mem_onchip_memory+0xf7805cd8>
    5d28:	01400074 	movhi	r5,1
    5d2c:	29486404 	addi	r5,r5,8592
    5d30:	d9403915 	stw	r5,228(sp)
    5d34:	d8c02d15 	stw	r3,180(sp)
    5d38:	1025883a 	mov	r18,r2
    5d3c:	04401e04 	movi	r17,120
    5d40:	9d84b03a 	or	r2,r19,r22
    5d44:	1000fc1e 	bne	r2,zero,6138 <___vfprintf_internal_r+0x11d0>
    5d48:	0039883a 	mov	fp,zero
    5d4c:	00800084 	movi	r2,2
    5d50:	10803fcc 	andi	r2,r2,255
    5d54:	00c00044 	movi	r3,1
    5d58:	10c20f26 	beq	r2,r3,6598 <___vfprintf_internal_r+0x1630>
    5d5c:	00c00084 	movi	r3,2
    5d60:	10fd6326 	beq	r2,r3,52f0 <__alt_mem_onchip_memory+0xf78052f0>
    5d64:	003e2d06 	br	561c <__alt_mem_onchip_memory+0xf780561c>
    5d68:	d8c02017 	ldw	r3,128(sp)
    5d6c:	003e9306 	br	57bc <__alt_mem_onchip_memory+0xf78057bc>
    5d70:	00801944 	movi	r2,101
    5d74:	14407e0e 	bge	r2,r17,5f70 <___vfprintf_internal_r+0x1008>
    5d78:	d9003617 	ldw	r4,216(sp)
    5d7c:	d9403817 	ldw	r5,224(sp)
    5d80:	000d883a 	mov	r6,zero
    5d84:	000f883a 	mov	r7,zero
    5d88:	d8c03c15 	stw	r3,240(sp)
    5d8c:	da003d15 	stw	r8,244(sp)
    5d90:	000f0440 	call	f044 <__eqdf2>
    5d94:	d8c03c17 	ldw	r3,240(sp)
    5d98:	da003d17 	ldw	r8,244(sp)
    5d9c:	1000f71e 	bne	r2,zero,617c <___vfprintf_internal_r+0x1214>
    5da0:	d8801f17 	ldw	r2,124(sp)
    5da4:	01000074 	movhi	r4,1
    5da8:	21086b04 	addi	r4,r4,8620
    5dac:	18c00044 	addi	r3,r3,1
    5db0:	10800044 	addi	r2,r2,1
    5db4:	41000015 	stw	r4,0(r8)
    5db8:	01000044 	movi	r4,1
    5dbc:	41000115 	stw	r4,4(r8)
    5dc0:	d8c02015 	stw	r3,128(sp)
    5dc4:	d8801f15 	stw	r2,124(sp)
    5dc8:	010001c4 	movi	r4,7
    5dcc:	2082b816 	blt	r4,r2,68b0 <___vfprintf_internal_r+0x1948>
    5dd0:	42000204 	addi	r8,r8,8
    5dd4:	d8802617 	ldw	r2,152(sp)
    5dd8:	d9403317 	ldw	r5,204(sp)
    5ddc:	11400216 	blt	r2,r5,5de8 <___vfprintf_internal_r+0xe80>
    5de0:	9080004c 	andi	r2,r18,1
    5de4:	103ed526 	beq	r2,zero,593c <__alt_mem_onchip_memory+0xf780593c>
    5de8:	d8803717 	ldw	r2,220(sp)
    5dec:	d9003417 	ldw	r4,208(sp)
    5df0:	d9403717 	ldw	r5,220(sp)
    5df4:	1887883a 	add	r3,r3,r2
    5df8:	d8801f17 	ldw	r2,124(sp)
    5dfc:	41000015 	stw	r4,0(r8)
    5e00:	41400115 	stw	r5,4(r8)
    5e04:	10800044 	addi	r2,r2,1
    5e08:	d8c02015 	stw	r3,128(sp)
    5e0c:	d8801f15 	stw	r2,124(sp)
    5e10:	010001c4 	movi	r4,7
    5e14:	20832916 	blt	r4,r2,6abc <___vfprintf_internal_r+0x1b54>
    5e18:	42000204 	addi	r8,r8,8
    5e1c:	d8803317 	ldw	r2,204(sp)
    5e20:	143fffc4 	addi	r16,r2,-1
    5e24:	043ec50e 	bge	zero,r16,593c <__alt_mem_onchip_memory+0xf780593c>
    5e28:	04400404 	movi	r17,16
    5e2c:	d8801f17 	ldw	r2,124(sp)
    5e30:	8c00880e 	bge	r17,r16,6054 <___vfprintf_internal_r+0x10ec>
    5e34:	01400074 	movhi	r5,1
    5e38:	29486b84 	addi	r5,r5,8622
    5e3c:	d9402b15 	stw	r5,172(sp)
    5e40:	058001c4 	movi	r22,7
    5e44:	dcc02c17 	ldw	r19,176(sp)
    5e48:	00000306 	br	5e58 <___vfprintf_internal_r+0xef0>
    5e4c:	42000204 	addi	r8,r8,8
    5e50:	843ffc04 	addi	r16,r16,-16
    5e54:	8c00820e 	bge	r17,r16,6060 <___vfprintf_internal_r+0x10f8>
    5e58:	18c00404 	addi	r3,r3,16
    5e5c:	10800044 	addi	r2,r2,1
    5e60:	45000015 	stw	r20,0(r8)
    5e64:	44400115 	stw	r17,4(r8)
    5e68:	d8c02015 	stw	r3,128(sp)
    5e6c:	d8801f15 	stw	r2,124(sp)
    5e70:	b0bff60e 	bge	r22,r2,5e4c <__alt_mem_onchip_memory+0xf7805e4c>
    5e74:	d9801e04 	addi	r6,sp,120
    5e78:	b80b883a 	mov	r5,r23
    5e7c:	9809883a 	mov	r4,r19
    5e80:	000c6b40 	call	c6b4 <__sprint_r>
    5e84:	103d3a1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    5e88:	d8c02017 	ldw	r3,128(sp)
    5e8c:	d8801f17 	ldw	r2,124(sp)
    5e90:	da000404 	addi	r8,sp,16
    5e94:	003fee06 	br	5e50 <__alt_mem_onchip_memory+0xf7805e50>
    5e98:	d9403117 	ldw	r5,196(sp)
    5e9c:	d8802a17 	ldw	r2,168(sp)
    5ea0:	28adc83a 	sub	r22,r5,r2
    5ea4:	05be630e 	bge	zero,r22,5834 <__alt_mem_onchip_memory+0xf7805834>
    5ea8:	07000404 	movi	fp,16
    5eac:	d8801f17 	ldw	r2,124(sp)
    5eb0:	e5838f0e 	bge	fp,r22,6cf0 <___vfprintf_internal_r+0x1d88>
    5eb4:	01400074 	movhi	r5,1
    5eb8:	29486b84 	addi	r5,r5,8622
    5ebc:	dc403015 	stw	r17,192(sp)
    5ec0:	d9402b15 	stw	r5,172(sp)
    5ec4:	b023883a 	mov	r17,r22
    5ec8:	04c001c4 	movi	r19,7
    5ecc:	a82d883a 	mov	r22,r21
    5ed0:	902b883a 	mov	r21,r18
    5ed4:	8025883a 	mov	r18,r16
    5ed8:	dc002c17 	ldw	r16,176(sp)
    5edc:	00000306 	br	5eec <___vfprintf_internal_r+0xf84>
    5ee0:	8c7ffc04 	addi	r17,r17,-16
    5ee4:	42000204 	addi	r8,r8,8
    5ee8:	e440110e 	bge	fp,r17,5f30 <___vfprintf_internal_r+0xfc8>
    5eec:	18c00404 	addi	r3,r3,16
    5ef0:	10800044 	addi	r2,r2,1
    5ef4:	45000015 	stw	r20,0(r8)
    5ef8:	47000115 	stw	fp,4(r8)
    5efc:	d8c02015 	stw	r3,128(sp)
    5f00:	d8801f15 	stw	r2,124(sp)
    5f04:	98bff60e 	bge	r19,r2,5ee0 <__alt_mem_onchip_memory+0xf7805ee0>
    5f08:	d9801e04 	addi	r6,sp,120
    5f0c:	b80b883a 	mov	r5,r23
    5f10:	8009883a 	mov	r4,r16
    5f14:	000c6b40 	call	c6b4 <__sprint_r>
    5f18:	103d151e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    5f1c:	8c7ffc04 	addi	r17,r17,-16
    5f20:	d8c02017 	ldw	r3,128(sp)
    5f24:	d8801f17 	ldw	r2,124(sp)
    5f28:	da000404 	addi	r8,sp,16
    5f2c:	e47fef16 	blt	fp,r17,5eec <__alt_mem_onchip_memory+0xf7805eec>
    5f30:	9021883a 	mov	r16,r18
    5f34:	a825883a 	mov	r18,r21
    5f38:	b02b883a 	mov	r21,r22
    5f3c:	882d883a 	mov	r22,r17
    5f40:	dc403017 	ldw	r17,192(sp)
    5f44:	d9002b17 	ldw	r4,172(sp)
    5f48:	1d87883a 	add	r3,r3,r22
    5f4c:	10800044 	addi	r2,r2,1
    5f50:	41000015 	stw	r4,0(r8)
    5f54:	45800115 	stw	r22,4(r8)
    5f58:	d8c02015 	stw	r3,128(sp)
    5f5c:	d8801f15 	stw	r2,124(sp)
    5f60:	010001c4 	movi	r4,7
    5f64:	20818e16 	blt	r4,r2,65a0 <___vfprintf_internal_r+0x1638>
    5f68:	42000204 	addi	r8,r8,8
    5f6c:	003e3106 	br	5834 <__alt_mem_onchip_memory+0xf7805834>
    5f70:	d9403317 	ldw	r5,204(sp)
    5f74:	00800044 	movi	r2,1
    5f78:	18c00044 	addi	r3,r3,1
    5f7c:	1141530e 	bge	r2,r5,64cc <___vfprintf_internal_r+0x1564>
    5f80:	dc401f17 	ldw	r17,124(sp)
    5f84:	00800044 	movi	r2,1
    5f88:	40800115 	stw	r2,4(r8)
    5f8c:	8c400044 	addi	r17,r17,1
    5f90:	44000015 	stw	r16,0(r8)
    5f94:	d8c02015 	stw	r3,128(sp)
    5f98:	dc401f15 	stw	r17,124(sp)
    5f9c:	008001c4 	movi	r2,7
    5fa0:	14416b16 	blt	r2,r17,6550 <___vfprintf_internal_r+0x15e8>
    5fa4:	42000204 	addi	r8,r8,8
    5fa8:	d8803717 	ldw	r2,220(sp)
    5fac:	d9003417 	ldw	r4,208(sp)
    5fb0:	8c400044 	addi	r17,r17,1
    5fb4:	10c7883a 	add	r3,r2,r3
    5fb8:	40800115 	stw	r2,4(r8)
    5fbc:	41000015 	stw	r4,0(r8)
    5fc0:	d8c02015 	stw	r3,128(sp)
    5fc4:	dc401f15 	stw	r17,124(sp)
    5fc8:	008001c4 	movi	r2,7
    5fcc:	14416916 	blt	r2,r17,6574 <___vfprintf_internal_r+0x160c>
    5fd0:	45800204 	addi	r22,r8,8
    5fd4:	d9003617 	ldw	r4,216(sp)
    5fd8:	d9403817 	ldw	r5,224(sp)
    5fdc:	000d883a 	mov	r6,zero
    5fe0:	000f883a 	mov	r7,zero
    5fe4:	d8c03c15 	stw	r3,240(sp)
    5fe8:	000f0440 	call	f044 <__eqdf2>
    5fec:	d8c03c17 	ldw	r3,240(sp)
    5ff0:	1000bc26 	beq	r2,zero,62e4 <___vfprintf_internal_r+0x137c>
    5ff4:	d9403317 	ldw	r5,204(sp)
    5ff8:	84000044 	addi	r16,r16,1
    5ffc:	8c400044 	addi	r17,r17,1
    6000:	28bfffc4 	addi	r2,r5,-1
    6004:	1887883a 	add	r3,r3,r2
    6008:	b0800115 	stw	r2,4(r22)
    600c:	b4000015 	stw	r16,0(r22)
    6010:	d8c02015 	stw	r3,128(sp)
    6014:	dc401f15 	stw	r17,124(sp)
    6018:	008001c4 	movi	r2,7
    601c:	14414316 	blt	r2,r17,652c <___vfprintf_internal_r+0x15c4>
    6020:	b5800204 	addi	r22,r22,8
    6024:	d9003a17 	ldw	r4,232(sp)
    6028:	df0022c4 	addi	fp,sp,139
    602c:	8c400044 	addi	r17,r17,1
    6030:	20c7883a 	add	r3,r4,r3
    6034:	b7000015 	stw	fp,0(r22)
    6038:	b1000115 	stw	r4,4(r22)
    603c:	d8c02015 	stw	r3,128(sp)
    6040:	dc401f15 	stw	r17,124(sp)
    6044:	008001c4 	movi	r2,7
    6048:	14400e16 	blt	r2,r17,6084 <___vfprintf_internal_r+0x111c>
    604c:	b2000204 	addi	r8,r22,8
    6050:	003e3a06 	br	593c <__alt_mem_onchip_memory+0xf780593c>
    6054:	01000074 	movhi	r4,1
    6058:	21086b84 	addi	r4,r4,8622
    605c:	d9002b15 	stw	r4,172(sp)
    6060:	d9002b17 	ldw	r4,172(sp)
    6064:	1c07883a 	add	r3,r3,r16
    6068:	44000115 	stw	r16,4(r8)
    606c:	41000015 	stw	r4,0(r8)
    6070:	10800044 	addi	r2,r2,1
    6074:	d8c02015 	stw	r3,128(sp)
    6078:	d8801f15 	stw	r2,124(sp)
    607c:	010001c4 	movi	r4,7
    6080:	20be2d0e 	bge	r4,r2,5938 <__alt_mem_onchip_memory+0xf7805938>
    6084:	d9002c17 	ldw	r4,176(sp)
    6088:	d9801e04 	addi	r6,sp,120
    608c:	b80b883a 	mov	r5,r23
    6090:	000c6b40 	call	c6b4 <__sprint_r>
    6094:	103cb61e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6098:	d8c02017 	ldw	r3,128(sp)
    609c:	da000404 	addi	r8,sp,16
    60a0:	003e2606 	br	593c <__alt_mem_onchip_memory+0xf780593c>
    60a4:	d9002c17 	ldw	r4,176(sp)
    60a8:	d9801e04 	addi	r6,sp,120
    60ac:	b80b883a 	mov	r5,r23
    60b0:	000c6b40 	call	c6b4 <__sprint_r>
    60b4:	103e5d26 	beq	r2,zero,5a2c <__alt_mem_onchip_memory+0xf7805a2c>
    60b8:	003cad06 	br	5370 <__alt_mem_onchip_memory+0xf7805370>
    60bc:	d9002c17 	ldw	r4,176(sp)
    60c0:	d9801e04 	addi	r6,sp,120
    60c4:	b80b883a 	mov	r5,r23
    60c8:	000c6b40 	call	c6b4 <__sprint_r>
    60cc:	103ca81e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    60d0:	d8c02017 	ldw	r3,128(sp)
    60d4:	da000404 	addi	r8,sp,16
    60d8:	003e0b06 	br	5908 <__alt_mem_onchip_memory+0xf7805908>
    60dc:	d9002c17 	ldw	r4,176(sp)
    60e0:	d9801e04 	addi	r6,sp,120
    60e4:	b80b883a 	mov	r5,r23
    60e8:	000c6b40 	call	c6b4 <__sprint_r>
    60ec:	103ca01e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    60f0:	d8c02017 	ldw	r3,128(sp)
    60f4:	da000404 	addi	r8,sp,16
    60f8:	003dbd06 	br	57f0 <__alt_mem_onchip_memory+0xf78057f0>
    60fc:	d9002c17 	ldw	r4,176(sp)
    6100:	d9801e04 	addi	r6,sp,120
    6104:	b80b883a 	mov	r5,r23
    6108:	000c6b40 	call	c6b4 <__sprint_r>
    610c:	103c981e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6110:	d8c02017 	ldw	r3,128(sp)
    6114:	da000404 	addi	r8,sp,16
    6118:	003dc306 	br	5828 <__alt_mem_onchip_memory+0xf7805828>
    611c:	d8802917 	ldw	r2,164(sp)
    6120:	d8002785 	stb	zero,158(sp)
    6124:	103f0616 	blt	r2,zero,5d40 <__alt_mem_onchip_memory+0xf7805d40>
    6128:	00ffdfc4 	movi	r3,-129
    612c:	9d84b03a 	or	r2,r19,r22
    6130:	90e4703a 	and	r18,r18,r3
    6134:	103c6b26 	beq	r2,zero,52e4 <__alt_mem_onchip_memory+0xf78052e4>
    6138:	0039883a 	mov	fp,zero
    613c:	003e7406 	br	5b10 <__alt_mem_onchip_memory+0xf7805b10>
    6140:	9080040c 	andi	r2,r18,16
    6144:	1001b326 	beq	r2,zero,6814 <___vfprintf_internal_r+0x18ac>
    6148:	d9002d17 	ldw	r4,180(sp)
    614c:	d9402917 	ldw	r5,164(sp)
    6150:	d8002785 	stb	zero,158(sp)
    6154:	20800104 	addi	r2,r4,4
    6158:	24c00017 	ldw	r19,0(r4)
    615c:	002d883a 	mov	r22,zero
    6160:	2801b516 	blt	r5,zero,6838 <___vfprintf_internal_r+0x18d0>
    6164:	00ffdfc4 	movi	r3,-129
    6168:	d8802d15 	stw	r2,180(sp)
    616c:	90e4703a 	and	r18,r18,r3
    6170:	983d2726 	beq	r19,zero,5610 <__alt_mem_onchip_memory+0xf7805610>
    6174:	0039883a 	mov	fp,zero
    6178:	003d2a06 	br	5624 <__alt_mem_onchip_memory+0xf7805624>
    617c:	dc402617 	ldw	r17,152(sp)
    6180:	0441d30e 	bge	zero,r17,68d0 <___vfprintf_internal_r+0x1968>
    6184:	dc403217 	ldw	r17,200(sp)
    6188:	d8803317 	ldw	r2,204(sp)
    618c:	1440010e 	bge	r2,r17,6194 <___vfprintf_internal_r+0x122c>
    6190:	1023883a 	mov	r17,r2
    6194:	04400a0e 	bge	zero,r17,61c0 <___vfprintf_internal_r+0x1258>
    6198:	d8801f17 	ldw	r2,124(sp)
    619c:	1c47883a 	add	r3,r3,r17
    61a0:	44000015 	stw	r16,0(r8)
    61a4:	10800044 	addi	r2,r2,1
    61a8:	44400115 	stw	r17,4(r8)
    61ac:	d8c02015 	stw	r3,128(sp)
    61b0:	d8801f15 	stw	r2,124(sp)
    61b4:	010001c4 	movi	r4,7
    61b8:	20826516 	blt	r4,r2,6b50 <___vfprintf_internal_r+0x1be8>
    61bc:	42000204 	addi	r8,r8,8
    61c0:	88026116 	blt	r17,zero,6b48 <___vfprintf_internal_r+0x1be0>
    61c4:	d9003217 	ldw	r4,200(sp)
    61c8:	2463c83a 	sub	r17,r4,r17
    61cc:	04407b0e 	bge	zero,r17,63bc <___vfprintf_internal_r+0x1454>
    61d0:	05800404 	movi	r22,16
    61d4:	d8801f17 	ldw	r2,124(sp)
    61d8:	b4419d0e 	bge	r22,r17,6850 <___vfprintf_internal_r+0x18e8>
    61dc:	01000074 	movhi	r4,1
    61e0:	21086b84 	addi	r4,r4,8622
    61e4:	d9002b15 	stw	r4,172(sp)
    61e8:	070001c4 	movi	fp,7
    61ec:	dcc02c17 	ldw	r19,176(sp)
    61f0:	00000306 	br	6200 <___vfprintf_internal_r+0x1298>
    61f4:	42000204 	addi	r8,r8,8
    61f8:	8c7ffc04 	addi	r17,r17,-16
    61fc:	b441970e 	bge	r22,r17,685c <___vfprintf_internal_r+0x18f4>
    6200:	18c00404 	addi	r3,r3,16
    6204:	10800044 	addi	r2,r2,1
    6208:	45000015 	stw	r20,0(r8)
    620c:	45800115 	stw	r22,4(r8)
    6210:	d8c02015 	stw	r3,128(sp)
    6214:	d8801f15 	stw	r2,124(sp)
    6218:	e0bff60e 	bge	fp,r2,61f4 <__alt_mem_onchip_memory+0xf78061f4>
    621c:	d9801e04 	addi	r6,sp,120
    6220:	b80b883a 	mov	r5,r23
    6224:	9809883a 	mov	r4,r19
    6228:	000c6b40 	call	c6b4 <__sprint_r>
    622c:	103c501e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6230:	d8c02017 	ldw	r3,128(sp)
    6234:	d8801f17 	ldw	r2,124(sp)
    6238:	da000404 	addi	r8,sp,16
    623c:	003fee06 	br	61f8 <__alt_mem_onchip_memory+0xf78061f8>
    6240:	d9002c17 	ldw	r4,176(sp)
    6244:	d9801e04 	addi	r6,sp,120
    6248:	b80b883a 	mov	r5,r23
    624c:	000c6b40 	call	c6b4 <__sprint_r>
    6250:	103c471e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6254:	d8c02017 	ldw	r3,128(sp)
    6258:	df002787 	ldb	fp,158(sp)
    625c:	da000404 	addi	r8,sp,16
    6260:	003d5606 	br	57bc <__alt_mem_onchip_memory+0xf78057bc>
    6264:	9080040c 	andi	r2,r18,16
    6268:	10016126 	beq	r2,zero,67f0 <___vfprintf_internal_r+0x1888>
    626c:	d8802d17 	ldw	r2,180(sp)
    6270:	14c00017 	ldw	r19,0(r2)
    6274:	10800104 	addi	r2,r2,4
    6278:	d8802d15 	stw	r2,180(sp)
    627c:	982dd7fa 	srai	r22,r19,31
    6280:	b005883a 	mov	r2,r22
    6284:	003c8206 	br	5490 <__alt_mem_onchip_memory+0xf7805490>
    6288:	9080040c 	andi	r2,r18,16
    628c:	10003526 	beq	r2,zero,6364 <___vfprintf_internal_r+0x13fc>
    6290:	d9402d17 	ldw	r5,180(sp)
    6294:	d8c02917 	ldw	r3,164(sp)
    6298:	d8002785 	stb	zero,158(sp)
    629c:	28800104 	addi	r2,r5,4
    62a0:	2cc00017 	ldw	r19,0(r5)
    62a4:	002d883a 	mov	r22,zero
    62a8:	18003716 	blt	r3,zero,6388 <___vfprintf_internal_r+0x1420>
    62ac:	00ffdfc4 	movi	r3,-129
    62b0:	d8802d15 	stw	r2,180(sp)
    62b4:	90e4703a 	and	r18,r18,r3
    62b8:	0039883a 	mov	fp,zero
    62bc:	983df326 	beq	r19,zero,5a8c <__alt_mem_onchip_memory+0xf7805a8c>
    62c0:	00800244 	movi	r2,9
    62c4:	14fc7b36 	bltu	r2,r19,54b4 <__alt_mem_onchip_memory+0xf78054b4>
    62c8:	d8c02817 	ldw	r3,160(sp)
    62cc:	dc001dc4 	addi	r16,sp,119
    62d0:	9cc00c04 	addi	r19,r19,48
    62d4:	1c07c83a 	sub	r3,r3,r16
    62d8:	dcc01dc5 	stb	r19,119(sp)
    62dc:	d8c02e15 	stw	r3,184(sp)
    62e0:	003ce806 	br	5684 <__alt_mem_onchip_memory+0xf7805684>
    62e4:	d8803317 	ldw	r2,204(sp)
    62e8:	143fffc4 	addi	r16,r2,-1
    62ec:	043f4d0e 	bge	zero,r16,6024 <__alt_mem_onchip_memory+0xf7806024>
    62f0:	07000404 	movi	fp,16
    62f4:	e400810e 	bge	fp,r16,64fc <___vfprintf_internal_r+0x1594>
    62f8:	01400074 	movhi	r5,1
    62fc:	29486b84 	addi	r5,r5,8622
    6300:	d9402b15 	stw	r5,172(sp)
    6304:	01c001c4 	movi	r7,7
    6308:	dcc02c17 	ldw	r19,176(sp)
    630c:	00000306 	br	631c <___vfprintf_internal_r+0x13b4>
    6310:	b5800204 	addi	r22,r22,8
    6314:	843ffc04 	addi	r16,r16,-16
    6318:	e4007b0e 	bge	fp,r16,6508 <___vfprintf_internal_r+0x15a0>
    631c:	18c00404 	addi	r3,r3,16
    6320:	8c400044 	addi	r17,r17,1
    6324:	b5000015 	stw	r20,0(r22)
    6328:	b7000115 	stw	fp,4(r22)
    632c:	d8c02015 	stw	r3,128(sp)
    6330:	dc401f15 	stw	r17,124(sp)
    6334:	3c7ff60e 	bge	r7,r17,6310 <__alt_mem_onchip_memory+0xf7806310>
    6338:	d9801e04 	addi	r6,sp,120
    633c:	b80b883a 	mov	r5,r23
    6340:	9809883a 	mov	r4,r19
    6344:	d9c03c15 	stw	r7,240(sp)
    6348:	000c6b40 	call	c6b4 <__sprint_r>
    634c:	d9c03c17 	ldw	r7,240(sp)
    6350:	103c071e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6354:	d8c02017 	ldw	r3,128(sp)
    6358:	dc401f17 	ldw	r17,124(sp)
    635c:	dd800404 	addi	r22,sp,16
    6360:	003fec06 	br	6314 <__alt_mem_onchip_memory+0xf7806314>
    6364:	9080100c 	andi	r2,r18,64
    6368:	d8002785 	stb	zero,158(sp)
    636c:	10010e26 	beq	r2,zero,67a8 <___vfprintf_internal_r+0x1840>
    6370:	d9002d17 	ldw	r4,180(sp)
    6374:	d9402917 	ldw	r5,164(sp)
    6378:	002d883a 	mov	r22,zero
    637c:	20800104 	addi	r2,r4,4
    6380:	24c0000b 	ldhu	r19,0(r4)
    6384:	283fc90e 	bge	r5,zero,62ac <__alt_mem_onchip_memory+0xf78062ac>
    6388:	d8802d15 	stw	r2,180(sp)
    638c:	0039883a 	mov	fp,zero
    6390:	9d84b03a 	or	r2,r19,r22
    6394:	103c461e 	bne	r2,zero,54b0 <__alt_mem_onchip_memory+0xf78054b0>
    6398:	00800044 	movi	r2,1
    639c:	003e6c06 	br	5d50 <__alt_mem_onchip_memory+0xf7805d50>
    63a0:	d9002c17 	ldw	r4,176(sp)
    63a4:	d9801e04 	addi	r6,sp,120
    63a8:	b80b883a 	mov	r5,r23
    63ac:	000c6b40 	call	c6b4 <__sprint_r>
    63b0:	103bef1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    63b4:	d8c02017 	ldw	r3,128(sp)
    63b8:	da000404 	addi	r8,sp,16
    63bc:	d9003217 	ldw	r4,200(sp)
    63c0:	d8802617 	ldw	r2,152(sp)
    63c4:	d9403317 	ldw	r5,204(sp)
    63c8:	8123883a 	add	r17,r16,r4
    63cc:	11400216 	blt	r2,r5,63d8 <___vfprintf_internal_r+0x1470>
    63d0:	9100004c 	andi	r4,r18,1
    63d4:	20000d26 	beq	r4,zero,640c <___vfprintf_internal_r+0x14a4>
    63d8:	d9003717 	ldw	r4,220(sp)
    63dc:	d9403417 	ldw	r5,208(sp)
    63e0:	1907883a 	add	r3,r3,r4
    63e4:	d9001f17 	ldw	r4,124(sp)
    63e8:	41400015 	stw	r5,0(r8)
    63ec:	d9403717 	ldw	r5,220(sp)
    63f0:	21000044 	addi	r4,r4,1
    63f4:	d8c02015 	stw	r3,128(sp)
    63f8:	41400115 	stw	r5,4(r8)
    63fc:	d9001f15 	stw	r4,124(sp)
    6400:	014001c4 	movi	r5,7
    6404:	2901e816 	blt	r5,r4,6ba8 <___vfprintf_internal_r+0x1c40>
    6408:	42000204 	addi	r8,r8,8
    640c:	d9003317 	ldw	r4,204(sp)
    6410:	8121883a 	add	r16,r16,r4
    6414:	2085c83a 	sub	r2,r4,r2
    6418:	8461c83a 	sub	r16,r16,r17
    641c:	1400010e 	bge	r2,r16,6424 <___vfprintf_internal_r+0x14bc>
    6420:	1021883a 	mov	r16,r2
    6424:	04000a0e 	bge	zero,r16,6450 <___vfprintf_internal_r+0x14e8>
    6428:	d9001f17 	ldw	r4,124(sp)
    642c:	1c07883a 	add	r3,r3,r16
    6430:	44400015 	stw	r17,0(r8)
    6434:	21000044 	addi	r4,r4,1
    6438:	44000115 	stw	r16,4(r8)
    643c:	d8c02015 	stw	r3,128(sp)
    6440:	d9001f15 	stw	r4,124(sp)
    6444:	014001c4 	movi	r5,7
    6448:	2901fb16 	blt	r5,r4,6c38 <___vfprintf_internal_r+0x1cd0>
    644c:	42000204 	addi	r8,r8,8
    6450:	8001f716 	blt	r16,zero,6c30 <___vfprintf_internal_r+0x1cc8>
    6454:	1421c83a 	sub	r16,r2,r16
    6458:	043d380e 	bge	zero,r16,593c <__alt_mem_onchip_memory+0xf780593c>
    645c:	04400404 	movi	r17,16
    6460:	d8801f17 	ldw	r2,124(sp)
    6464:	8c3efb0e 	bge	r17,r16,6054 <__alt_mem_onchip_memory+0xf7806054>
    6468:	01400074 	movhi	r5,1
    646c:	29486b84 	addi	r5,r5,8622
    6470:	d9402b15 	stw	r5,172(sp)
    6474:	058001c4 	movi	r22,7
    6478:	dcc02c17 	ldw	r19,176(sp)
    647c:	00000306 	br	648c <___vfprintf_internal_r+0x1524>
    6480:	42000204 	addi	r8,r8,8
    6484:	843ffc04 	addi	r16,r16,-16
    6488:	8c3ef50e 	bge	r17,r16,6060 <__alt_mem_onchip_memory+0xf7806060>
    648c:	18c00404 	addi	r3,r3,16
    6490:	10800044 	addi	r2,r2,1
    6494:	45000015 	stw	r20,0(r8)
    6498:	44400115 	stw	r17,4(r8)
    649c:	d8c02015 	stw	r3,128(sp)
    64a0:	d8801f15 	stw	r2,124(sp)
    64a4:	b0bff60e 	bge	r22,r2,6480 <__alt_mem_onchip_memory+0xf7806480>
    64a8:	d9801e04 	addi	r6,sp,120
    64ac:	b80b883a 	mov	r5,r23
    64b0:	9809883a 	mov	r4,r19
    64b4:	000c6b40 	call	c6b4 <__sprint_r>
    64b8:	103bad1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    64bc:	d8c02017 	ldw	r3,128(sp)
    64c0:	d8801f17 	ldw	r2,124(sp)
    64c4:	da000404 	addi	r8,sp,16
    64c8:	003fee06 	br	6484 <__alt_mem_onchip_memory+0xf7806484>
    64cc:	9088703a 	and	r4,r18,r2
    64d0:	203eab1e 	bne	r4,zero,5f80 <__alt_mem_onchip_memory+0xf7805f80>
    64d4:	dc401f17 	ldw	r17,124(sp)
    64d8:	40800115 	stw	r2,4(r8)
    64dc:	44000015 	stw	r16,0(r8)
    64e0:	8c400044 	addi	r17,r17,1
    64e4:	d8c02015 	stw	r3,128(sp)
    64e8:	dc401f15 	stw	r17,124(sp)
    64ec:	008001c4 	movi	r2,7
    64f0:	14400e16 	blt	r2,r17,652c <___vfprintf_internal_r+0x15c4>
    64f4:	45800204 	addi	r22,r8,8
    64f8:	003eca06 	br	6024 <__alt_mem_onchip_memory+0xf7806024>
    64fc:	01000074 	movhi	r4,1
    6500:	21086b84 	addi	r4,r4,8622
    6504:	d9002b15 	stw	r4,172(sp)
    6508:	d8802b17 	ldw	r2,172(sp)
    650c:	1c07883a 	add	r3,r3,r16
    6510:	8c400044 	addi	r17,r17,1
    6514:	b0800015 	stw	r2,0(r22)
    6518:	b4000115 	stw	r16,4(r22)
    651c:	d8c02015 	stw	r3,128(sp)
    6520:	dc401f15 	stw	r17,124(sp)
    6524:	008001c4 	movi	r2,7
    6528:	147ebd0e 	bge	r2,r17,6020 <__alt_mem_onchip_memory+0xf7806020>
    652c:	d9002c17 	ldw	r4,176(sp)
    6530:	d9801e04 	addi	r6,sp,120
    6534:	b80b883a 	mov	r5,r23
    6538:	000c6b40 	call	c6b4 <__sprint_r>
    653c:	103b8c1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6540:	d8c02017 	ldw	r3,128(sp)
    6544:	dc401f17 	ldw	r17,124(sp)
    6548:	dd800404 	addi	r22,sp,16
    654c:	003eb506 	br	6024 <__alt_mem_onchip_memory+0xf7806024>
    6550:	d9002c17 	ldw	r4,176(sp)
    6554:	d9801e04 	addi	r6,sp,120
    6558:	b80b883a 	mov	r5,r23
    655c:	000c6b40 	call	c6b4 <__sprint_r>
    6560:	103b831e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6564:	d8c02017 	ldw	r3,128(sp)
    6568:	dc401f17 	ldw	r17,124(sp)
    656c:	da000404 	addi	r8,sp,16
    6570:	003e8d06 	br	5fa8 <__alt_mem_onchip_memory+0xf7805fa8>
    6574:	d9002c17 	ldw	r4,176(sp)
    6578:	d9801e04 	addi	r6,sp,120
    657c:	b80b883a 	mov	r5,r23
    6580:	000c6b40 	call	c6b4 <__sprint_r>
    6584:	103b7a1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6588:	d8c02017 	ldw	r3,128(sp)
    658c:	dc401f17 	ldw	r17,124(sp)
    6590:	dd800404 	addi	r22,sp,16
    6594:	003e8f06 	br	5fd4 <__alt_mem_onchip_memory+0xf7805fd4>
    6598:	0027883a 	mov	r19,zero
    659c:	003f4a06 	br	62c8 <__alt_mem_onchip_memory+0xf78062c8>
    65a0:	d9002c17 	ldw	r4,176(sp)
    65a4:	d9801e04 	addi	r6,sp,120
    65a8:	b80b883a 	mov	r5,r23
    65ac:	000c6b40 	call	c6b4 <__sprint_r>
    65b0:	103b6f1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    65b4:	d8c02017 	ldw	r3,128(sp)
    65b8:	da000404 	addi	r8,sp,16
    65bc:	003c9d06 	br	5834 <__alt_mem_onchip_memory+0xf7805834>
    65c0:	04e7c83a 	sub	r19,zero,r19
    65c4:	9804c03a 	cmpne	r2,r19,zero
    65c8:	05adc83a 	sub	r22,zero,r22
    65cc:	b0adc83a 	sub	r22,r22,r2
    65d0:	d8802917 	ldw	r2,164(sp)
    65d4:	07000b44 	movi	fp,45
    65d8:	df002785 	stb	fp,158(sp)
    65dc:	10017b16 	blt	r2,zero,6bcc <___vfprintf_internal_r+0x1c64>
    65e0:	00bfdfc4 	movi	r2,-129
    65e4:	90a4703a 	and	r18,r18,r2
    65e8:	003bb106 	br	54b0 <__alt_mem_onchip_memory+0xf78054b0>
    65ec:	d9003617 	ldw	r4,216(sp)
    65f0:	d9403817 	ldw	r5,224(sp)
    65f4:	da003d15 	stw	r8,244(sp)
    65f8:	00022140 	call	2214 <__fpclassifyd>
    65fc:	da003d17 	ldw	r8,244(sp)
    6600:	1000f026 	beq	r2,zero,69c4 <___vfprintf_internal_r+0x1a5c>
    6604:	d9002917 	ldw	r4,164(sp)
    6608:	05bff7c4 	movi	r22,-33
    660c:	00bfffc4 	movi	r2,-1
    6610:	8dac703a 	and	r22,r17,r22
    6614:	20820026 	beq	r4,r2,6e18 <___vfprintf_internal_r+0x1eb0>
    6618:	008011c4 	movi	r2,71
    661c:	b081f726 	beq	r22,r2,6dfc <___vfprintf_internal_r+0x1e94>
    6620:	d9003817 	ldw	r4,224(sp)
    6624:	90c04014 	ori	r3,r18,256
    6628:	d8c02b15 	stw	r3,172(sp)
    662c:	20021516 	blt	r4,zero,6e84 <___vfprintf_internal_r+0x1f1c>
    6630:	dcc03817 	ldw	r19,224(sp)
    6634:	d8002a05 	stb	zero,168(sp)
    6638:	00801984 	movi	r2,102
    663c:	8881f926 	beq	r17,r2,6e24 <___vfprintf_internal_r+0x1ebc>
    6640:	00801184 	movi	r2,70
    6644:	88821c26 	beq	r17,r2,6eb8 <___vfprintf_internal_r+0x1f50>
    6648:	00801144 	movi	r2,69
    664c:	b081ef26 	beq	r22,r2,6e0c <___vfprintf_internal_r+0x1ea4>
    6650:	d8c02917 	ldw	r3,164(sp)
    6654:	d8802104 	addi	r2,sp,132
    6658:	d8800315 	stw	r2,12(sp)
    665c:	d9403617 	ldw	r5,216(sp)
    6660:	d8802504 	addi	r2,sp,148
    6664:	d9002c17 	ldw	r4,176(sp)
    6668:	d8800215 	stw	r2,8(sp)
    666c:	d8802604 	addi	r2,sp,152
    6670:	d8c00015 	stw	r3,0(sp)
    6674:	d8800115 	stw	r2,4(sp)
    6678:	01c00084 	movi	r7,2
    667c:	980d883a 	mov	r6,r19
    6680:	d8c03c15 	stw	r3,240(sp)
    6684:	da003d15 	stw	r8,244(sp)
    6688:	000758c0 	call	758c <_dtoa_r>
    668c:	1021883a 	mov	r16,r2
    6690:	008019c4 	movi	r2,103
    6694:	d8c03c17 	ldw	r3,240(sp)
    6698:	da003d17 	ldw	r8,244(sp)
    669c:	88817126 	beq	r17,r2,6c64 <___vfprintf_internal_r+0x1cfc>
    66a0:	008011c4 	movi	r2,71
    66a4:	88829226 	beq	r17,r2,70f0 <___vfprintf_internal_r+0x2188>
    66a8:	80f9883a 	add	fp,r16,r3
    66ac:	d9003617 	ldw	r4,216(sp)
    66b0:	000d883a 	mov	r6,zero
    66b4:	000f883a 	mov	r7,zero
    66b8:	980b883a 	mov	r5,r19
    66bc:	da003d15 	stw	r8,244(sp)
    66c0:	000f0440 	call	f044 <__eqdf2>
    66c4:	da003d17 	ldw	r8,244(sp)
    66c8:	10018d26 	beq	r2,zero,6d00 <___vfprintf_internal_r+0x1d98>
    66cc:	d8802117 	ldw	r2,132(sp)
    66d0:	1700062e 	bgeu	r2,fp,66ec <___vfprintf_internal_r+0x1784>
    66d4:	01000c04 	movi	r4,48
    66d8:	10c00044 	addi	r3,r2,1
    66dc:	d8c02115 	stw	r3,132(sp)
    66e0:	11000005 	stb	r4,0(r2)
    66e4:	d8802117 	ldw	r2,132(sp)
    66e8:	173ffb36 	bltu	r2,fp,66d8 <__alt_mem_onchip_memory+0xf78066d8>
    66ec:	1405c83a 	sub	r2,r2,r16
    66f0:	d8803315 	stw	r2,204(sp)
    66f4:	008011c4 	movi	r2,71
    66f8:	b0817626 	beq	r22,r2,6cd4 <___vfprintf_internal_r+0x1d6c>
    66fc:	00801944 	movi	r2,101
    6700:	1442810e 	bge	r2,r17,7108 <___vfprintf_internal_r+0x21a0>
    6704:	d8c02617 	ldw	r3,152(sp)
    6708:	00801984 	movi	r2,102
    670c:	d8c03215 	stw	r3,200(sp)
    6710:	8881fe26 	beq	r17,r2,6f0c <___vfprintf_internal_r+0x1fa4>
    6714:	d8c03217 	ldw	r3,200(sp)
    6718:	d9003317 	ldw	r4,204(sp)
    671c:	1901dd16 	blt	r3,r4,6e94 <___vfprintf_internal_r+0x1f2c>
    6720:	9480004c 	andi	r18,r18,1
    6724:	90022b1e 	bne	r18,zero,6fd4 <___vfprintf_internal_r+0x206c>
    6728:	1805883a 	mov	r2,r3
    672c:	18028016 	blt	r3,zero,7130 <___vfprintf_internal_r+0x21c8>
    6730:	d8c03217 	ldw	r3,200(sp)
    6734:	044019c4 	movi	r17,103
    6738:	d8c02e15 	stw	r3,184(sp)
    673c:	df002a07 	ldb	fp,168(sp)
    6740:	e001531e 	bne	fp,zero,6c90 <___vfprintf_internal_r+0x1d28>
    6744:	df002783 	ldbu	fp,158(sp)
    6748:	d8802a15 	stw	r2,168(sp)
    674c:	dc802b17 	ldw	r18,172(sp)
    6750:	d8002915 	stw	zero,164(sp)
    6754:	003bd106 	br	569c <__alt_mem_onchip_memory+0xf780569c>
    6758:	d8802d17 	ldw	r2,180(sp)
    675c:	d8c02d17 	ldw	r3,180(sp)
    6760:	d9002d17 	ldw	r4,180(sp)
    6764:	10800017 	ldw	r2,0(r2)
    6768:	18c00117 	ldw	r3,4(r3)
    676c:	21000204 	addi	r4,r4,8
    6770:	d8803615 	stw	r2,216(sp)
    6774:	d8c03815 	stw	r3,224(sp)
    6778:	d9002d15 	stw	r4,180(sp)
    677c:	003b7506 	br	5554 <__alt_mem_onchip_memory+0xf7805554>
    6780:	ac400007 	ldb	r17,0(r21)
    6784:	003a5906 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    6788:	9080100c 	andi	r2,r18,64
    678c:	1000a826 	beq	r2,zero,6a30 <___vfprintf_internal_r+0x1ac8>
    6790:	d9002d17 	ldw	r4,180(sp)
    6794:	002d883a 	mov	r22,zero
    6798:	24c0000b 	ldhu	r19,0(r4)
    679c:	21000104 	addi	r4,r4,4
    67a0:	d9002d15 	stw	r4,180(sp)
    67a4:	003ccb06 	br	5ad4 <__alt_mem_onchip_memory+0xf7805ad4>
    67a8:	d8c02d17 	ldw	r3,180(sp)
    67ac:	d9002917 	ldw	r4,164(sp)
    67b0:	002d883a 	mov	r22,zero
    67b4:	18800104 	addi	r2,r3,4
    67b8:	1cc00017 	ldw	r19,0(r3)
    67bc:	203ebb0e 	bge	r4,zero,62ac <__alt_mem_onchip_memory+0xf78062ac>
    67c0:	003ef106 	br	6388 <__alt_mem_onchip_memory+0xf7806388>
    67c4:	9080040c 	andi	r2,r18,16
    67c8:	1000921e 	bne	r2,zero,6a14 <___vfprintf_internal_r+0x1aac>
    67cc:	9480100c 	andi	r18,r18,64
    67d0:	90013926 	beq	r18,zero,6cb8 <___vfprintf_internal_r+0x1d50>
    67d4:	d9002d17 	ldw	r4,180(sp)
    67d8:	d9402f17 	ldw	r5,188(sp)
    67dc:	20800017 	ldw	r2,0(r4)
    67e0:	21000104 	addi	r4,r4,4
    67e4:	d9002d15 	stw	r4,180(sp)
    67e8:	1140000d 	sth	r5,0(r2)
    67ec:	003a1606 	br	5048 <__alt_mem_onchip_memory+0xf7805048>
    67f0:	9080100c 	andi	r2,r18,64
    67f4:	10008026 	beq	r2,zero,69f8 <___vfprintf_internal_r+0x1a90>
    67f8:	d8c02d17 	ldw	r3,180(sp)
    67fc:	1cc0000f 	ldh	r19,0(r3)
    6800:	18c00104 	addi	r3,r3,4
    6804:	d8c02d15 	stw	r3,180(sp)
    6808:	982dd7fa 	srai	r22,r19,31
    680c:	b005883a 	mov	r2,r22
    6810:	003b1f06 	br	5490 <__alt_mem_onchip_memory+0xf7805490>
    6814:	9080100c 	andi	r2,r18,64
    6818:	d8002785 	stb	zero,158(sp)
    681c:	10008a1e 	bne	r2,zero,6a48 <___vfprintf_internal_r+0x1ae0>
    6820:	d9402d17 	ldw	r5,180(sp)
    6824:	d8c02917 	ldw	r3,164(sp)
    6828:	002d883a 	mov	r22,zero
    682c:	28800104 	addi	r2,r5,4
    6830:	2cc00017 	ldw	r19,0(r5)
    6834:	183e4b0e 	bge	r3,zero,6164 <__alt_mem_onchip_memory+0xf7806164>
    6838:	9d86b03a 	or	r3,r19,r22
    683c:	d8802d15 	stw	r2,180(sp)
    6840:	183e4c1e 	bne	r3,zero,6174 <__alt_mem_onchip_memory+0xf7806174>
    6844:	0039883a 	mov	fp,zero
    6848:	0005883a 	mov	r2,zero
    684c:	003d4006 	br	5d50 <__alt_mem_onchip_memory+0xf7805d50>
    6850:	01400074 	movhi	r5,1
    6854:	29486b84 	addi	r5,r5,8622
    6858:	d9402b15 	stw	r5,172(sp)
    685c:	d9402b17 	ldw	r5,172(sp)
    6860:	1c47883a 	add	r3,r3,r17
    6864:	10800044 	addi	r2,r2,1
    6868:	41400015 	stw	r5,0(r8)
    686c:	44400115 	stw	r17,4(r8)
    6870:	d8c02015 	stw	r3,128(sp)
    6874:	d8801f15 	stw	r2,124(sp)
    6878:	010001c4 	movi	r4,7
    687c:	20bec816 	blt	r4,r2,63a0 <__alt_mem_onchip_memory+0xf78063a0>
    6880:	42000204 	addi	r8,r8,8
    6884:	003ecd06 	br	63bc <__alt_mem_onchip_memory+0xf78063bc>
    6888:	d9002917 	ldw	r4,164(sp)
    688c:	d8002785 	stb	zero,158(sp)
    6890:	203d2d16 	blt	r4,zero,5d48 <__alt_mem_onchip_memory+0xf7805d48>
    6894:	00bfdfc4 	movi	r2,-129
    6898:	90a4703a 	and	r18,r18,r2
    689c:	003a9106 	br	52e4 <__alt_mem_onchip_memory+0xf78052e4>
    68a0:	01000074 	movhi	r4,1
    68a4:	21086b84 	addi	r4,r4,8622
    68a8:	d9002b15 	stw	r4,172(sp)
    68ac:	003c0c06 	br	58e0 <__alt_mem_onchip_memory+0xf78058e0>
    68b0:	d9002c17 	ldw	r4,176(sp)
    68b4:	d9801e04 	addi	r6,sp,120
    68b8:	b80b883a 	mov	r5,r23
    68bc:	000c6b40 	call	c6b4 <__sprint_r>
    68c0:	103aab1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    68c4:	d8c02017 	ldw	r3,128(sp)
    68c8:	da000404 	addi	r8,sp,16
    68cc:	003d4106 	br	5dd4 <__alt_mem_onchip_memory+0xf7805dd4>
    68d0:	d8801f17 	ldw	r2,124(sp)
    68d4:	01400074 	movhi	r5,1
    68d8:	01000044 	movi	r4,1
    68dc:	18c00044 	addi	r3,r3,1
    68e0:	10800044 	addi	r2,r2,1
    68e4:	29486b04 	addi	r5,r5,8620
    68e8:	41000115 	stw	r4,4(r8)
    68ec:	41400015 	stw	r5,0(r8)
    68f0:	d8c02015 	stw	r3,128(sp)
    68f4:	d8801f15 	stw	r2,124(sp)
    68f8:	010001c4 	movi	r4,7
    68fc:	20805c16 	blt	r4,r2,6a70 <___vfprintf_internal_r+0x1b08>
    6900:	42000204 	addi	r8,r8,8
    6904:	8800041e 	bne	r17,zero,6918 <___vfprintf_internal_r+0x19b0>
    6908:	d8803317 	ldw	r2,204(sp)
    690c:	1000021e 	bne	r2,zero,6918 <___vfprintf_internal_r+0x19b0>
    6910:	9080004c 	andi	r2,r18,1
    6914:	103c0926 	beq	r2,zero,593c <__alt_mem_onchip_memory+0xf780593c>
    6918:	d9003717 	ldw	r4,220(sp)
    691c:	d8801f17 	ldw	r2,124(sp)
    6920:	d9403417 	ldw	r5,208(sp)
    6924:	20c7883a 	add	r3,r4,r3
    6928:	10800044 	addi	r2,r2,1
    692c:	41000115 	stw	r4,4(r8)
    6930:	41400015 	stw	r5,0(r8)
    6934:	d8c02015 	stw	r3,128(sp)
    6938:	d8801f15 	stw	r2,124(sp)
    693c:	010001c4 	movi	r4,7
    6940:	20812116 	blt	r4,r2,6dc8 <___vfprintf_internal_r+0x1e60>
    6944:	42000204 	addi	r8,r8,8
    6948:	0463c83a 	sub	r17,zero,r17
    694c:	0440730e 	bge	zero,r17,6b1c <___vfprintf_internal_r+0x1bb4>
    6950:	05800404 	movi	r22,16
    6954:	b440860e 	bge	r22,r17,6b70 <___vfprintf_internal_r+0x1c08>
    6958:	01400074 	movhi	r5,1
    695c:	29486b84 	addi	r5,r5,8622
    6960:	d9402b15 	stw	r5,172(sp)
    6964:	070001c4 	movi	fp,7
    6968:	dcc02c17 	ldw	r19,176(sp)
    696c:	00000306 	br	697c <___vfprintf_internal_r+0x1a14>
    6970:	42000204 	addi	r8,r8,8
    6974:	8c7ffc04 	addi	r17,r17,-16
    6978:	b440800e 	bge	r22,r17,6b7c <___vfprintf_internal_r+0x1c14>
    697c:	18c00404 	addi	r3,r3,16
    6980:	10800044 	addi	r2,r2,1
    6984:	45000015 	stw	r20,0(r8)
    6988:	45800115 	stw	r22,4(r8)
    698c:	d8c02015 	stw	r3,128(sp)
    6990:	d8801f15 	stw	r2,124(sp)
    6994:	e0bff60e 	bge	fp,r2,6970 <__alt_mem_onchip_memory+0xf7806970>
    6998:	d9801e04 	addi	r6,sp,120
    699c:	b80b883a 	mov	r5,r23
    69a0:	9809883a 	mov	r4,r19
    69a4:	000c6b40 	call	c6b4 <__sprint_r>
    69a8:	103a711e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    69ac:	d8c02017 	ldw	r3,128(sp)
    69b0:	d8801f17 	ldw	r2,124(sp)
    69b4:	da000404 	addi	r8,sp,16
    69b8:	003fee06 	br	6974 <__alt_mem_onchip_memory+0xf7806974>
    69bc:	00bfffc4 	movi	r2,-1
    69c0:	003a6f06 	br	5380 <__alt_mem_onchip_memory+0xf7805380>
    69c4:	008011c4 	movi	r2,71
    69c8:	1440b816 	blt	r2,r17,6cac <___vfprintf_internal_r+0x1d44>
    69cc:	04000074 	movhi	r16,1
    69d0:	84085d04 	addi	r16,r16,8564
    69d4:	00c000c4 	movi	r3,3
    69d8:	00bfdfc4 	movi	r2,-129
    69dc:	d8c02a15 	stw	r3,168(sp)
    69e0:	90a4703a 	and	r18,r18,r2
    69e4:	df002783 	ldbu	fp,158(sp)
    69e8:	d8c02e15 	stw	r3,184(sp)
    69ec:	d8002915 	stw	zero,164(sp)
    69f0:	d8003215 	stw	zero,200(sp)
    69f4:	003b2906 	br	569c <__alt_mem_onchip_memory+0xf780569c>
    69f8:	d9002d17 	ldw	r4,180(sp)
    69fc:	24c00017 	ldw	r19,0(r4)
    6a00:	21000104 	addi	r4,r4,4
    6a04:	d9002d15 	stw	r4,180(sp)
    6a08:	982dd7fa 	srai	r22,r19,31
    6a0c:	b005883a 	mov	r2,r22
    6a10:	003a9f06 	br	5490 <__alt_mem_onchip_memory+0xf7805490>
    6a14:	d9402d17 	ldw	r5,180(sp)
    6a18:	d8c02f17 	ldw	r3,188(sp)
    6a1c:	28800017 	ldw	r2,0(r5)
    6a20:	29400104 	addi	r5,r5,4
    6a24:	d9402d15 	stw	r5,180(sp)
    6a28:	10c00015 	stw	r3,0(r2)
    6a2c:	00398606 	br	5048 <__alt_mem_onchip_memory+0xf7805048>
    6a30:	d9402d17 	ldw	r5,180(sp)
    6a34:	002d883a 	mov	r22,zero
    6a38:	2cc00017 	ldw	r19,0(r5)
    6a3c:	29400104 	addi	r5,r5,4
    6a40:	d9402d15 	stw	r5,180(sp)
    6a44:	003c2306 	br	5ad4 <__alt_mem_onchip_memory+0xf7805ad4>
    6a48:	d8c02d17 	ldw	r3,180(sp)
    6a4c:	d9002917 	ldw	r4,164(sp)
    6a50:	002d883a 	mov	r22,zero
    6a54:	18800104 	addi	r2,r3,4
    6a58:	1cc0000b 	ldhu	r19,0(r3)
    6a5c:	203dc10e 	bge	r4,zero,6164 <__alt_mem_onchip_memory+0xf7806164>
    6a60:	003f7506 	br	6838 <__alt_mem_onchip_memory+0xf7806838>
    6a64:	04000074 	movhi	r16,1
    6a68:	84085b04 	addi	r16,r16,8556
    6a6c:	003acc06 	br	55a0 <__alt_mem_onchip_memory+0xf78055a0>
    6a70:	d9002c17 	ldw	r4,176(sp)
    6a74:	d9801e04 	addi	r6,sp,120
    6a78:	b80b883a 	mov	r5,r23
    6a7c:	000c6b40 	call	c6b4 <__sprint_r>
    6a80:	103a3b1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6a84:	dc402617 	ldw	r17,152(sp)
    6a88:	d8c02017 	ldw	r3,128(sp)
    6a8c:	da000404 	addi	r8,sp,16
    6a90:	003f9c06 	br	6904 <__alt_mem_onchip_memory+0xf7806904>
    6a94:	ac400043 	ldbu	r17,1(r21)
    6a98:	94800814 	ori	r18,r18,32
    6a9c:	ad400044 	addi	r21,r21,1
    6aa0:	8c403fcc 	andi	r17,r17,255
    6aa4:	8c40201c 	xori	r17,r17,128
    6aa8:	8c7fe004 	addi	r17,r17,-128
    6aac:	00398f06 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    6ab0:	d8c02d15 	stw	r3,180(sp)
    6ab4:	0039883a 	mov	fp,zero
    6ab8:	003e3506 	br	6390 <__alt_mem_onchip_memory+0xf7806390>
    6abc:	d9002c17 	ldw	r4,176(sp)
    6ac0:	d9801e04 	addi	r6,sp,120
    6ac4:	b80b883a 	mov	r5,r23
    6ac8:	000c6b40 	call	c6b4 <__sprint_r>
    6acc:	103a281e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6ad0:	d8c02017 	ldw	r3,128(sp)
    6ad4:	da000404 	addi	r8,sp,16
    6ad8:	003cd006 	br	5e1c <__alt_mem_onchip_memory+0xf7805e1c>
    6adc:	8009883a 	mov	r4,r16
    6ae0:	da003d15 	stw	r8,244(sp)
    6ae4:	0004e200 	call	4e20 <strlen>
    6ae8:	d8802e15 	stw	r2,184(sp)
    6aec:	da003d17 	ldw	r8,244(sp)
    6af0:	103c340e 	bge	r2,zero,5bc4 <__alt_mem_onchip_memory+0xf7805bc4>
    6af4:	0005883a 	mov	r2,zero
    6af8:	003c3206 	br	5bc4 <__alt_mem_onchip_memory+0xf7805bc4>
    6afc:	d9002c17 	ldw	r4,176(sp)
    6b00:	d9801e04 	addi	r6,sp,120
    6b04:	b80b883a 	mov	r5,r23
    6b08:	000c6b40 	call	c6b4 <__sprint_r>
    6b0c:	103a181e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6b10:	d8c02017 	ldw	r3,128(sp)
    6b14:	d8801f17 	ldw	r2,124(sp)
    6b18:	da000404 	addi	r8,sp,16
    6b1c:	d9403317 	ldw	r5,204(sp)
    6b20:	10800044 	addi	r2,r2,1
    6b24:	44000015 	stw	r16,0(r8)
    6b28:	28c7883a 	add	r3,r5,r3
    6b2c:	003b7d06 	br	5924 <__alt_mem_onchip_memory+0xf7805924>
    6b30:	01000074 	movhi	r4,1
    6b34:	21086f84 	addi	r4,r4,8638
    6b38:	d9003515 	stw	r4,212(sp)
    6b3c:	003b1406 	br	5790 <__alt_mem_onchip_memory+0xf7805790>
    6b40:	013fffc4 	movi	r4,-1
    6b44:	003a3506 	br	541c <__alt_mem_onchip_memory+0xf780541c>
    6b48:	0023883a 	mov	r17,zero
    6b4c:	003d9d06 	br	61c4 <__alt_mem_onchip_memory+0xf78061c4>
    6b50:	d9002c17 	ldw	r4,176(sp)
    6b54:	d9801e04 	addi	r6,sp,120
    6b58:	b80b883a 	mov	r5,r23
    6b5c:	000c6b40 	call	c6b4 <__sprint_r>
    6b60:	103a031e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6b64:	d8c02017 	ldw	r3,128(sp)
    6b68:	da000404 	addi	r8,sp,16
    6b6c:	003d9406 	br	61c0 <__alt_mem_onchip_memory+0xf78061c0>
    6b70:	01000074 	movhi	r4,1
    6b74:	21086b84 	addi	r4,r4,8622
    6b78:	d9002b15 	stw	r4,172(sp)
    6b7c:	d9002b17 	ldw	r4,172(sp)
    6b80:	1c47883a 	add	r3,r3,r17
    6b84:	10800044 	addi	r2,r2,1
    6b88:	41000015 	stw	r4,0(r8)
    6b8c:	44400115 	stw	r17,4(r8)
    6b90:	d8c02015 	stw	r3,128(sp)
    6b94:	d8801f15 	stw	r2,124(sp)
    6b98:	010001c4 	movi	r4,7
    6b9c:	20bfd716 	blt	r4,r2,6afc <__alt_mem_onchip_memory+0xf7806afc>
    6ba0:	42000204 	addi	r8,r8,8
    6ba4:	003fdd06 	br	6b1c <__alt_mem_onchip_memory+0xf7806b1c>
    6ba8:	d9002c17 	ldw	r4,176(sp)
    6bac:	d9801e04 	addi	r6,sp,120
    6bb0:	b80b883a 	mov	r5,r23
    6bb4:	000c6b40 	call	c6b4 <__sprint_r>
    6bb8:	1039ed1e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6bbc:	d8802617 	ldw	r2,152(sp)
    6bc0:	d8c02017 	ldw	r3,128(sp)
    6bc4:	da000404 	addi	r8,sp,16
    6bc8:	003e1006 	br	640c <__alt_mem_onchip_memory+0xf780640c>
    6bcc:	00800044 	movi	r2,1
    6bd0:	10803fcc 	andi	r2,r2,255
    6bd4:	00c00044 	movi	r3,1
    6bd8:	10fa3526 	beq	r2,r3,54b0 <__alt_mem_onchip_memory+0xf78054b0>
    6bdc:	00c00084 	movi	r3,2
    6be0:	10fbcb26 	beq	r2,r3,5b10 <__alt_mem_onchip_memory+0xf7805b10>
    6be4:	003a8f06 	br	5624 <__alt_mem_onchip_memory+0xf7805624>
    6be8:	01000074 	movhi	r4,1
    6bec:	21086f84 	addi	r4,r4,8638
    6bf0:	d9003515 	stw	r4,212(sp)
    6bf4:	003b7606 	br	59d0 <__alt_mem_onchip_memory+0xf78059d0>
    6bf8:	d8802917 	ldw	r2,164(sp)
    6bfc:	00c00184 	movi	r3,6
    6c00:	1880012e 	bgeu	r3,r2,6c08 <___vfprintf_internal_r+0x1ca0>
    6c04:	1805883a 	mov	r2,r3
    6c08:	d8802e15 	stw	r2,184(sp)
    6c0c:	1000ef16 	blt	r2,zero,6fcc <___vfprintf_internal_r+0x2064>
    6c10:	04000074 	movhi	r16,1
    6c14:	d8802a15 	stw	r2,168(sp)
    6c18:	dcc02d15 	stw	r19,180(sp)
    6c1c:	d8002915 	stw	zero,164(sp)
    6c20:	d8003215 	stw	zero,200(sp)
    6c24:	84086904 	addi	r16,r16,8612
    6c28:	0039883a 	mov	fp,zero
    6c2c:	003aa206 	br	56b8 <__alt_mem_onchip_memory+0xf78056b8>
    6c30:	0021883a 	mov	r16,zero
    6c34:	003e0706 	br	6454 <__alt_mem_onchip_memory+0xf7806454>
    6c38:	d9002c17 	ldw	r4,176(sp)
    6c3c:	d9801e04 	addi	r6,sp,120
    6c40:	b80b883a 	mov	r5,r23
    6c44:	000c6b40 	call	c6b4 <__sprint_r>
    6c48:	1039c91e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6c4c:	d8802617 	ldw	r2,152(sp)
    6c50:	d9403317 	ldw	r5,204(sp)
    6c54:	d8c02017 	ldw	r3,128(sp)
    6c58:	da000404 	addi	r8,sp,16
    6c5c:	2885c83a 	sub	r2,r5,r2
    6c60:	003dfb06 	br	6450 <__alt_mem_onchip_memory+0xf7806450>
    6c64:	9080004c 	andi	r2,r18,1
    6c68:	103e8f1e 	bne	r2,zero,66a8 <__alt_mem_onchip_memory+0xf78066a8>
    6c6c:	d8802117 	ldw	r2,132(sp)
    6c70:	003e9e06 	br	66ec <__alt_mem_onchip_memory+0xf78066ec>
    6c74:	1025883a 	mov	r18,r2
    6c78:	0039883a 	mov	fp,zero
    6c7c:	00800084 	movi	r2,2
    6c80:	003fd306 	br	6bd0 <__alt_mem_onchip_memory+0xf7806bd0>
    6c84:	07000b44 	movi	fp,45
    6c88:	df002785 	stb	fp,158(sp)
    6c8c:	003a4006 	br	5590 <__alt_mem_onchip_memory+0xf7805590>
    6c90:	00c00b44 	movi	r3,45
    6c94:	d8c02785 	stb	r3,158(sp)
    6c98:	d8802a15 	stw	r2,168(sp)
    6c9c:	dc802b17 	ldw	r18,172(sp)
    6ca0:	d8002915 	stw	zero,164(sp)
    6ca4:	07000b44 	movi	fp,45
    6ca8:	003a8006 	br	56ac <__alt_mem_onchip_memory+0xf78056ac>
    6cac:	04000074 	movhi	r16,1
    6cb0:	84085e04 	addi	r16,r16,8568
    6cb4:	003f4706 	br	69d4 <__alt_mem_onchip_memory+0xf78069d4>
    6cb8:	d8c02d17 	ldw	r3,180(sp)
    6cbc:	d9002f17 	ldw	r4,188(sp)
    6cc0:	18800017 	ldw	r2,0(r3)
    6cc4:	18c00104 	addi	r3,r3,4
    6cc8:	d8c02d15 	stw	r3,180(sp)
    6ccc:	11000015 	stw	r4,0(r2)
    6cd0:	0038dd06 	br	5048 <__alt_mem_onchip_memory+0xf7805048>
    6cd4:	dd802617 	ldw	r22,152(sp)
    6cd8:	00bfff44 	movi	r2,-3
    6cdc:	b0801c16 	blt	r22,r2,6d50 <___vfprintf_internal_r+0x1de8>
    6ce0:	d9402917 	ldw	r5,164(sp)
    6ce4:	2d801a16 	blt	r5,r22,6d50 <___vfprintf_internal_r+0x1de8>
    6ce8:	dd803215 	stw	r22,200(sp)
    6cec:	003e8906 	br	6714 <__alt_mem_onchip_memory+0xf7806714>
    6cf0:	01000074 	movhi	r4,1
    6cf4:	21086b84 	addi	r4,r4,8622
    6cf8:	d9002b15 	stw	r4,172(sp)
    6cfc:	003c9106 	br	5f44 <__alt_mem_onchip_memory+0xf7805f44>
    6d00:	e005883a 	mov	r2,fp
    6d04:	003e7906 	br	66ec <__alt_mem_onchip_memory+0xf78066ec>
    6d08:	d9402917 	ldw	r5,164(sp)
    6d0c:	df002783 	ldbu	fp,158(sp)
    6d10:	dcc02d15 	stw	r19,180(sp)
    6d14:	d9402a15 	stw	r5,168(sp)
    6d18:	d9402e15 	stw	r5,184(sp)
    6d1c:	d8002915 	stw	zero,164(sp)
    6d20:	d8003215 	stw	zero,200(sp)
    6d24:	003a5d06 	br	569c <__alt_mem_onchip_memory+0xf780569c>
    6d28:	9080004c 	andi	r2,r18,1
    6d2c:	0039883a 	mov	fp,zero
    6d30:	10000426 	beq	r2,zero,6d44 <___vfprintf_internal_r+0x1ddc>
    6d34:	00800c04 	movi	r2,48
    6d38:	dc001dc4 	addi	r16,sp,119
    6d3c:	d8801dc5 	stb	r2,119(sp)
    6d40:	003b8006 	br	5b44 <__alt_mem_onchip_memory+0xf7805b44>
    6d44:	d8002e15 	stw	zero,184(sp)
    6d48:	dc001e04 	addi	r16,sp,120
    6d4c:	003a4d06 	br	5684 <__alt_mem_onchip_memory+0xf7805684>
    6d50:	8c7fff84 	addi	r17,r17,-2
    6d54:	b5bfffc4 	addi	r22,r22,-1
    6d58:	dd802615 	stw	r22,152(sp)
    6d5c:	dc4022c5 	stb	r17,139(sp)
    6d60:	b000bf16 	blt	r22,zero,7060 <___vfprintf_internal_r+0x20f8>
    6d64:	00800ac4 	movi	r2,43
    6d68:	d8802305 	stb	r2,140(sp)
    6d6c:	00800244 	movi	r2,9
    6d70:	15807016 	blt	r2,r22,6f34 <___vfprintf_internal_r+0x1fcc>
    6d74:	00800c04 	movi	r2,48
    6d78:	b5800c04 	addi	r22,r22,48
    6d7c:	d8802345 	stb	r2,141(sp)
    6d80:	dd802385 	stb	r22,142(sp)
    6d84:	d88023c4 	addi	r2,sp,143
    6d88:	df0022c4 	addi	fp,sp,139
    6d8c:	d8c03317 	ldw	r3,204(sp)
    6d90:	1739c83a 	sub	fp,r2,fp
    6d94:	d9003317 	ldw	r4,204(sp)
    6d98:	e0c7883a 	add	r3,fp,r3
    6d9c:	df003a15 	stw	fp,232(sp)
    6da0:	d8c02e15 	stw	r3,184(sp)
    6da4:	00800044 	movi	r2,1
    6da8:	1100b30e 	bge	r2,r4,7078 <___vfprintf_internal_r+0x2110>
    6dac:	d8c02e17 	ldw	r3,184(sp)
    6db0:	18c00044 	addi	r3,r3,1
    6db4:	d8c02e15 	stw	r3,184(sp)
    6db8:	1805883a 	mov	r2,r3
    6dbc:	1800ac16 	blt	r3,zero,7070 <___vfprintf_internal_r+0x2108>
    6dc0:	d8003215 	stw	zero,200(sp)
    6dc4:	003e5d06 	br	673c <__alt_mem_onchip_memory+0xf780673c>
    6dc8:	d9002c17 	ldw	r4,176(sp)
    6dcc:	d9801e04 	addi	r6,sp,120
    6dd0:	b80b883a 	mov	r5,r23
    6dd4:	000c6b40 	call	c6b4 <__sprint_r>
    6dd8:	1039651e 	bne	r2,zero,5370 <__alt_mem_onchip_memory+0xf7805370>
    6ddc:	dc402617 	ldw	r17,152(sp)
    6de0:	d8c02017 	ldw	r3,128(sp)
    6de4:	d8801f17 	ldw	r2,124(sp)
    6de8:	da000404 	addi	r8,sp,16
    6dec:	003ed606 	br	6948 <__alt_mem_onchip_memory+0xf7806948>
    6df0:	582b883a 	mov	r21,r11
    6df4:	d8002915 	stw	zero,164(sp)
    6df8:	0038bd06 	br	50f0 <__alt_mem_onchip_memory+0xf78050f0>
    6dfc:	d8802917 	ldw	r2,164(sp)
    6e00:	103e071e 	bne	r2,zero,6620 <__alt_mem_onchip_memory+0xf7806620>
    6e04:	dc002915 	stw	r16,164(sp)
    6e08:	003e0506 	br	6620 <__alt_mem_onchip_memory+0xf7806620>
    6e0c:	d9002917 	ldw	r4,164(sp)
    6e10:	20c00044 	addi	r3,r4,1
    6e14:	003e0f06 	br	6654 <__alt_mem_onchip_memory+0xf7806654>
    6e18:	01400184 	movi	r5,6
    6e1c:	d9402915 	stw	r5,164(sp)
    6e20:	003dff06 	br	6620 <__alt_mem_onchip_memory+0xf7806620>
    6e24:	d8802104 	addi	r2,sp,132
    6e28:	d8800315 	stw	r2,12(sp)
    6e2c:	d8802504 	addi	r2,sp,148
    6e30:	d8800215 	stw	r2,8(sp)
    6e34:	d8802604 	addi	r2,sp,152
    6e38:	d8800115 	stw	r2,4(sp)
    6e3c:	d8802917 	ldw	r2,164(sp)
    6e40:	d9403617 	ldw	r5,216(sp)
    6e44:	d9002c17 	ldw	r4,176(sp)
    6e48:	d8800015 	stw	r2,0(sp)
    6e4c:	01c000c4 	movi	r7,3
    6e50:	980d883a 	mov	r6,r19
    6e54:	da003d15 	stw	r8,244(sp)
    6e58:	000758c0 	call	758c <_dtoa_r>
    6e5c:	d8c02917 	ldw	r3,164(sp)
    6e60:	da003d17 	ldw	r8,244(sp)
    6e64:	1021883a 	mov	r16,r2
    6e68:	10f9883a 	add	fp,r2,r3
    6e6c:	81000007 	ldb	r4,0(r16)
    6e70:	00800c04 	movi	r2,48
    6e74:	20805e26 	beq	r4,r2,6ff0 <___vfprintf_internal_r+0x2088>
    6e78:	d8c02617 	ldw	r3,152(sp)
    6e7c:	e0f9883a 	add	fp,fp,r3
    6e80:	003e0a06 	br	66ac <__alt_mem_onchip_memory+0xf78066ac>
    6e84:	00c00b44 	movi	r3,45
    6e88:	24e0003c 	xorhi	r19,r4,32768
    6e8c:	d8c02a05 	stb	r3,168(sp)
    6e90:	003de906 	br	6638 <__alt_mem_onchip_memory+0xf7806638>
    6e94:	d8c03217 	ldw	r3,200(sp)
    6e98:	00c07a0e 	bge	zero,r3,7084 <___vfprintf_internal_r+0x211c>
    6e9c:	00800044 	movi	r2,1
    6ea0:	d9003317 	ldw	r4,204(sp)
    6ea4:	1105883a 	add	r2,r2,r4
    6ea8:	d8802e15 	stw	r2,184(sp)
    6eac:	10004e16 	blt	r2,zero,6fe8 <___vfprintf_internal_r+0x2080>
    6eb0:	044019c4 	movi	r17,103
    6eb4:	003e2106 	br	673c <__alt_mem_onchip_memory+0xf780673c>
    6eb8:	d9002917 	ldw	r4,164(sp)
    6ebc:	d8802104 	addi	r2,sp,132
    6ec0:	d8800315 	stw	r2,12(sp)
    6ec4:	d9000015 	stw	r4,0(sp)
    6ec8:	d8802504 	addi	r2,sp,148
    6ecc:	d9403617 	ldw	r5,216(sp)
    6ed0:	d9002c17 	ldw	r4,176(sp)
    6ed4:	d8800215 	stw	r2,8(sp)
    6ed8:	d8802604 	addi	r2,sp,152
    6edc:	d8800115 	stw	r2,4(sp)
    6ee0:	01c000c4 	movi	r7,3
    6ee4:	980d883a 	mov	r6,r19
    6ee8:	da003d15 	stw	r8,244(sp)
    6eec:	000758c0 	call	758c <_dtoa_r>
    6ef0:	d8c02917 	ldw	r3,164(sp)
    6ef4:	da003d17 	ldw	r8,244(sp)
    6ef8:	1021883a 	mov	r16,r2
    6efc:	00801184 	movi	r2,70
    6f00:	80f9883a 	add	fp,r16,r3
    6f04:	88bfd926 	beq	r17,r2,6e6c <__alt_mem_onchip_memory+0xf7806e6c>
    6f08:	003de806 	br	66ac <__alt_mem_onchip_memory+0xf78066ac>
    6f0c:	d9002917 	ldw	r4,164(sp)
    6f10:	00c04d0e 	bge	zero,r3,7048 <___vfprintf_internal_r+0x20e0>
    6f14:	2000441e 	bne	r4,zero,7028 <___vfprintf_internal_r+0x20c0>
    6f18:	9480004c 	andi	r18,r18,1
    6f1c:	9000421e 	bne	r18,zero,7028 <___vfprintf_internal_r+0x20c0>
    6f20:	1805883a 	mov	r2,r3
    6f24:	18007016 	blt	r3,zero,70e8 <___vfprintf_internal_r+0x2180>
    6f28:	d8c03217 	ldw	r3,200(sp)
    6f2c:	d8c02e15 	stw	r3,184(sp)
    6f30:	003e0206 	br	673c <__alt_mem_onchip_memory+0xf780673c>
    6f34:	df0022c4 	addi	fp,sp,139
    6f38:	dc002915 	stw	r16,164(sp)
    6f3c:	4027883a 	mov	r19,r8
    6f40:	e021883a 	mov	r16,fp
    6f44:	b009883a 	mov	r4,r22
    6f48:	01400284 	movi	r5,10
    6f4c:	0004b040 	call	4b04 <__modsi3>
    6f50:	10800c04 	addi	r2,r2,48
    6f54:	843fffc4 	addi	r16,r16,-1
    6f58:	b009883a 	mov	r4,r22
    6f5c:	01400284 	movi	r5,10
    6f60:	80800005 	stb	r2,0(r16)
    6f64:	0004a800 	call	4a80 <__divsi3>
    6f68:	102d883a 	mov	r22,r2
    6f6c:	00800244 	movi	r2,9
    6f70:	15bff416 	blt	r2,r22,6f44 <__alt_mem_onchip_memory+0xf7806f44>
    6f74:	9811883a 	mov	r8,r19
    6f78:	b0800c04 	addi	r2,r22,48
    6f7c:	8027883a 	mov	r19,r16
    6f80:	997fffc4 	addi	r5,r19,-1
    6f84:	98bfffc5 	stb	r2,-1(r19)
    6f88:	dc002917 	ldw	r16,164(sp)
    6f8c:	2f006a2e 	bgeu	r5,fp,7138 <___vfprintf_internal_r+0x21d0>
    6f90:	d9c02384 	addi	r7,sp,142
    6f94:	3ccfc83a 	sub	r7,r7,r19
    6f98:	d9002344 	addi	r4,sp,141
    6f9c:	e1cf883a 	add	r7,fp,r7
    6fa0:	00000106 	br	6fa8 <___vfprintf_internal_r+0x2040>
    6fa4:	28800003 	ldbu	r2,0(r5)
    6fa8:	20800005 	stb	r2,0(r4)
    6fac:	21000044 	addi	r4,r4,1
    6fb0:	29400044 	addi	r5,r5,1
    6fb4:	393ffb1e 	bne	r7,r4,6fa4 <__alt_mem_onchip_memory+0xf7806fa4>
    6fb8:	d8802304 	addi	r2,sp,140
    6fbc:	14c5c83a 	sub	r2,r2,r19
    6fc0:	d8c02344 	addi	r3,sp,141
    6fc4:	1885883a 	add	r2,r3,r2
    6fc8:	003f7006 	br	6d8c <__alt_mem_onchip_memory+0xf7806d8c>
    6fcc:	0005883a 	mov	r2,zero
    6fd0:	003f0f06 	br	6c10 <__alt_mem_onchip_memory+0xf7806c10>
    6fd4:	d8c03217 	ldw	r3,200(sp)
    6fd8:	18c00044 	addi	r3,r3,1
    6fdc:	d8c02e15 	stw	r3,184(sp)
    6fe0:	1805883a 	mov	r2,r3
    6fe4:	183fb20e 	bge	r3,zero,6eb0 <__alt_mem_onchip_memory+0xf7806eb0>
    6fe8:	0005883a 	mov	r2,zero
    6fec:	003fb006 	br	6eb0 <__alt_mem_onchip_memory+0xf7806eb0>
    6ff0:	d9003617 	ldw	r4,216(sp)
    6ff4:	000d883a 	mov	r6,zero
    6ff8:	000f883a 	mov	r7,zero
    6ffc:	980b883a 	mov	r5,r19
    7000:	d8c03c15 	stw	r3,240(sp)
    7004:	da003d15 	stw	r8,244(sp)
    7008:	000f0440 	call	f044 <__eqdf2>
    700c:	d8c03c17 	ldw	r3,240(sp)
    7010:	da003d17 	ldw	r8,244(sp)
    7014:	103f9826 	beq	r2,zero,6e78 <__alt_mem_onchip_memory+0xf7806e78>
    7018:	00800044 	movi	r2,1
    701c:	10c7c83a 	sub	r3,r2,r3
    7020:	d8c02615 	stw	r3,152(sp)
    7024:	003f9506 	br	6e7c <__alt_mem_onchip_memory+0xf7806e7c>
    7028:	d9002917 	ldw	r4,164(sp)
    702c:	d8c03217 	ldw	r3,200(sp)
    7030:	20800044 	addi	r2,r4,1
    7034:	1885883a 	add	r2,r3,r2
    7038:	d8802e15 	stw	r2,184(sp)
    703c:	103dbf0e 	bge	r2,zero,673c <__alt_mem_onchip_memory+0xf780673c>
    7040:	0005883a 	mov	r2,zero
    7044:	003dbd06 	br	673c <__alt_mem_onchip_memory+0xf780673c>
    7048:	2000211e 	bne	r4,zero,70d0 <___vfprintf_internal_r+0x2168>
    704c:	9480004c 	andi	r18,r18,1
    7050:	90001f1e 	bne	r18,zero,70d0 <___vfprintf_internal_r+0x2168>
    7054:	00800044 	movi	r2,1
    7058:	d8802e15 	stw	r2,184(sp)
    705c:	003db706 	br	673c <__alt_mem_onchip_memory+0xf780673c>
    7060:	00800b44 	movi	r2,45
    7064:	05adc83a 	sub	r22,zero,r22
    7068:	d8802305 	stb	r2,140(sp)
    706c:	003f3f06 	br	6d6c <__alt_mem_onchip_memory+0xf7806d6c>
    7070:	0005883a 	mov	r2,zero
    7074:	003f5206 	br	6dc0 <__alt_mem_onchip_memory+0xf7806dc0>
    7078:	90a4703a 	and	r18,r18,r2
    707c:	903f4e26 	beq	r18,zero,6db8 <__alt_mem_onchip_memory+0xf7806db8>
    7080:	003f4a06 	br	6dac <__alt_mem_onchip_memory+0xf7806dac>
    7084:	00800084 	movi	r2,2
    7088:	10c5c83a 	sub	r2,r2,r3
    708c:	003f8406 	br	6ea0 <__alt_mem_onchip_memory+0xf7806ea0>
    7090:	d8802d17 	ldw	r2,180(sp)
    7094:	d9002d17 	ldw	r4,180(sp)
    7098:	ac400043 	ldbu	r17,1(r21)
    709c:	10800017 	ldw	r2,0(r2)
    70a0:	582b883a 	mov	r21,r11
    70a4:	d8802915 	stw	r2,164(sp)
    70a8:	20800104 	addi	r2,r4,4
    70ac:	d9002917 	ldw	r4,164(sp)
    70b0:	d8802d15 	stw	r2,180(sp)
    70b4:	203e7a0e 	bge	r4,zero,6aa0 <__alt_mem_onchip_memory+0xf7806aa0>
    70b8:	8c403fcc 	andi	r17,r17,255
    70bc:	00bfffc4 	movi	r2,-1
    70c0:	8c40201c 	xori	r17,r17,128
    70c4:	d8802915 	stw	r2,164(sp)
    70c8:	8c7fe004 	addi	r17,r17,-128
    70cc:	00380706 	br	50ec <__alt_mem_onchip_memory+0xf78050ec>
    70d0:	d8c02917 	ldw	r3,164(sp)
    70d4:	18c00084 	addi	r3,r3,2
    70d8:	d8c02e15 	stw	r3,184(sp)
    70dc:	1805883a 	mov	r2,r3
    70e0:	183d960e 	bge	r3,zero,673c <__alt_mem_onchip_memory+0xf780673c>
    70e4:	003fd606 	br	7040 <__alt_mem_onchip_memory+0xf7807040>
    70e8:	0005883a 	mov	r2,zero
    70ec:	003f8e06 	br	6f28 <__alt_mem_onchip_memory+0xf7806f28>
    70f0:	9080004c 	andi	r2,r18,1
    70f4:	103f811e 	bne	r2,zero,6efc <__alt_mem_onchip_memory+0xf7806efc>
    70f8:	d8802117 	ldw	r2,132(sp)
    70fc:	1405c83a 	sub	r2,r2,r16
    7100:	d8803315 	stw	r2,204(sp)
    7104:	b47ef326 	beq	r22,r17,6cd4 <__alt_mem_onchip_memory+0xf7806cd4>
    7108:	dd802617 	ldw	r22,152(sp)
    710c:	003f1106 	br	6d54 <__alt_mem_onchip_memory+0xf7806d54>
    7110:	d9c02785 	stb	r7,158(sp)
    7114:	00390406 	br	5528 <__alt_mem_onchip_memory+0xf7805528>
    7118:	d9c02785 	stb	r7,158(sp)
    711c:	0038d306 	br	546c <__alt_mem_onchip_memory+0xf780546c>
    7120:	d9c02785 	stb	r7,158(sp)
    7124:	003a6106 	br	5aac <__alt_mem_onchip_memory+0xf7805aac>
    7128:	d9c02785 	stb	r7,158(sp)
    712c:	003af806 	br	5d10 <__alt_mem_onchip_memory+0xf7805d10>
    7130:	0005883a 	mov	r2,zero
    7134:	003d7e06 	br	6730 <__alt_mem_onchip_memory+0xf7806730>
    7138:	d8802344 	addi	r2,sp,141
    713c:	003f1306 	br	6d8c <__alt_mem_onchip_memory+0xf7806d8c>
    7140:	d9c02785 	stb	r7,158(sp)
    7144:	00392306 	br	55d4 <__alt_mem_onchip_memory+0xf78055d4>
    7148:	d9c02785 	stb	r7,158(sp)
    714c:	003aa906 	br	5bf4 <__alt_mem_onchip_memory+0xf7805bf4>
    7150:	d9c02785 	stb	r7,158(sp)
    7154:	003a3d06 	br	5a4c <__alt_mem_onchip_memory+0xf7805a4c>
    7158:	d9c02785 	stb	r7,158(sp)
    715c:	003aca06 	br	5c88 <__alt_mem_onchip_memory+0xf7805c88>

00007160 <__vfprintf_internal>:
    7160:	00800074 	movhi	r2,1
    7164:	108fc804 	addi	r2,r2,16160
    7168:	300f883a 	mov	r7,r6
    716c:	280d883a 	mov	r6,r5
    7170:	200b883a 	mov	r5,r4
    7174:	11000017 	ldw	r4,0(r2)
    7178:	0004f681 	jmpi	4f68 <___vfprintf_internal_r>

0000717c <__sbprintf>:
    717c:	2880030b 	ldhu	r2,12(r5)
    7180:	2ac01917 	ldw	r11,100(r5)
    7184:	2a80038b 	ldhu	r10,14(r5)
    7188:	2a400717 	ldw	r9,28(r5)
    718c:	2a000917 	ldw	r8,36(r5)
    7190:	defee204 	addi	sp,sp,-1144
    7194:	00c10004 	movi	r3,1024
    7198:	dc011a15 	stw	r16,1128(sp)
    719c:	10bfff4c 	andi	r2,r2,65533
    71a0:	2821883a 	mov	r16,r5
    71a4:	d8cb883a 	add	r5,sp,r3
    71a8:	dc811c15 	stw	r18,1136(sp)
    71ac:	dc411b15 	stw	r17,1132(sp)
    71b0:	dfc11d15 	stw	ra,1140(sp)
    71b4:	2025883a 	mov	r18,r4
    71b8:	d881030d 	sth	r2,1036(sp)
    71bc:	dac11915 	stw	r11,1124(sp)
    71c0:	da81038d 	sth	r10,1038(sp)
    71c4:	da410715 	stw	r9,1052(sp)
    71c8:	da010915 	stw	r8,1060(sp)
    71cc:	dec10015 	stw	sp,1024(sp)
    71d0:	dec10415 	stw	sp,1040(sp)
    71d4:	d8c10215 	stw	r3,1032(sp)
    71d8:	d8c10515 	stw	r3,1044(sp)
    71dc:	d8010615 	stw	zero,1048(sp)
    71e0:	0004f680 	call	4f68 <___vfprintf_internal_r>
    71e4:	1023883a 	mov	r17,r2
    71e8:	10000416 	blt	r2,zero,71fc <__sbprintf+0x80>
    71ec:	d9410004 	addi	r5,sp,1024
    71f0:	9009883a 	mov	r4,r18
    71f4:	0008e300 	call	8e30 <_fflush_r>
    71f8:	10000d1e 	bne	r2,zero,7230 <__sbprintf+0xb4>
    71fc:	d881030b 	ldhu	r2,1036(sp)
    7200:	1080100c 	andi	r2,r2,64
    7204:	10000326 	beq	r2,zero,7214 <__sbprintf+0x98>
    7208:	8080030b 	ldhu	r2,12(r16)
    720c:	10801014 	ori	r2,r2,64
    7210:	8080030d 	sth	r2,12(r16)
    7214:	8805883a 	mov	r2,r17
    7218:	dfc11d17 	ldw	ra,1140(sp)
    721c:	dc811c17 	ldw	r18,1136(sp)
    7220:	dc411b17 	ldw	r17,1132(sp)
    7224:	dc011a17 	ldw	r16,1128(sp)
    7228:	dec11e04 	addi	sp,sp,1144
    722c:	f800283a 	ret
    7230:	047fffc4 	movi	r17,-1
    7234:	003ff106 	br	71fc <__alt_mem_onchip_memory+0xf78071fc>

00007238 <__swsetup_r>:
    7238:	00800074 	movhi	r2,1
    723c:	defffd04 	addi	sp,sp,-12
    7240:	108fc804 	addi	r2,r2,16160
    7244:	dc400115 	stw	r17,4(sp)
    7248:	2023883a 	mov	r17,r4
    724c:	11000017 	ldw	r4,0(r2)
    7250:	dc000015 	stw	r16,0(sp)
    7254:	dfc00215 	stw	ra,8(sp)
    7258:	2821883a 	mov	r16,r5
    725c:	20000226 	beq	r4,zero,7268 <__swsetup_r+0x30>
    7260:	20800e17 	ldw	r2,56(r4)
    7264:	10003126 	beq	r2,zero,732c <__swsetup_r+0xf4>
    7268:	8080030b 	ldhu	r2,12(r16)
    726c:	10c0020c 	andi	r3,r2,8
    7270:	1009883a 	mov	r4,r2
    7274:	18000f26 	beq	r3,zero,72b4 <__swsetup_r+0x7c>
    7278:	80c00417 	ldw	r3,16(r16)
    727c:	18001526 	beq	r3,zero,72d4 <__swsetup_r+0x9c>
    7280:	1100004c 	andi	r4,r2,1
    7284:	20001c1e 	bne	r4,zero,72f8 <__swsetup_r+0xc0>
    7288:	1080008c 	andi	r2,r2,2
    728c:	1000291e 	bne	r2,zero,7334 <__swsetup_r+0xfc>
    7290:	80800517 	ldw	r2,20(r16)
    7294:	80800215 	stw	r2,8(r16)
    7298:	18001c26 	beq	r3,zero,730c <__swsetup_r+0xd4>
    729c:	0005883a 	mov	r2,zero
    72a0:	dfc00217 	ldw	ra,8(sp)
    72a4:	dc400117 	ldw	r17,4(sp)
    72a8:	dc000017 	ldw	r16,0(sp)
    72ac:	dec00304 	addi	sp,sp,12
    72b0:	f800283a 	ret
    72b4:	2080040c 	andi	r2,r4,16
    72b8:	10002e26 	beq	r2,zero,7374 <__swsetup_r+0x13c>
    72bc:	2080010c 	andi	r2,r4,4
    72c0:	10001e1e 	bne	r2,zero,733c <__swsetup_r+0x104>
    72c4:	80c00417 	ldw	r3,16(r16)
    72c8:	20800214 	ori	r2,r4,8
    72cc:	8080030d 	sth	r2,12(r16)
    72d0:	183feb1e 	bne	r3,zero,7280 <__alt_mem_onchip_memory+0xf7807280>
    72d4:	1100a00c 	andi	r4,r2,640
    72d8:	01408004 	movi	r5,512
    72dc:	217fe826 	beq	r4,r5,7280 <__alt_mem_onchip_memory+0xf7807280>
    72e0:	800b883a 	mov	r5,r16
    72e4:	8809883a 	mov	r4,r17
    72e8:	0009e0c0 	call	9e0c <__smakebuf_r>
    72ec:	8080030b 	ldhu	r2,12(r16)
    72f0:	80c00417 	ldw	r3,16(r16)
    72f4:	003fe206 	br	7280 <__alt_mem_onchip_memory+0xf7807280>
    72f8:	80800517 	ldw	r2,20(r16)
    72fc:	80000215 	stw	zero,8(r16)
    7300:	0085c83a 	sub	r2,zero,r2
    7304:	80800615 	stw	r2,24(r16)
    7308:	183fe41e 	bne	r3,zero,729c <__alt_mem_onchip_memory+0xf780729c>
    730c:	80c0030b 	ldhu	r3,12(r16)
    7310:	0005883a 	mov	r2,zero
    7314:	1900200c 	andi	r4,r3,128
    7318:	203fe126 	beq	r4,zero,72a0 <__alt_mem_onchip_memory+0xf78072a0>
    731c:	18c01014 	ori	r3,r3,64
    7320:	80c0030d 	sth	r3,12(r16)
    7324:	00bfffc4 	movi	r2,-1
    7328:	003fdd06 	br	72a0 <__alt_mem_onchip_memory+0xf78072a0>
    732c:	000920c0 	call	920c <__sinit>
    7330:	003fcd06 	br	7268 <__alt_mem_onchip_memory+0xf7807268>
    7334:	0005883a 	mov	r2,zero
    7338:	003fd606 	br	7294 <__alt_mem_onchip_memory+0xf7807294>
    733c:	81400c17 	ldw	r5,48(r16)
    7340:	28000626 	beq	r5,zero,735c <__swsetup_r+0x124>
    7344:	80801004 	addi	r2,r16,64
    7348:	28800326 	beq	r5,r2,7358 <__swsetup_r+0x120>
    734c:	8809883a 	mov	r4,r17
    7350:	00093800 	call	9380 <_free_r>
    7354:	8100030b 	ldhu	r4,12(r16)
    7358:	80000c15 	stw	zero,48(r16)
    735c:	80c00417 	ldw	r3,16(r16)
    7360:	00bff6c4 	movi	r2,-37
    7364:	1108703a 	and	r4,r2,r4
    7368:	80000115 	stw	zero,4(r16)
    736c:	80c00015 	stw	r3,0(r16)
    7370:	003fd506 	br	72c8 <__alt_mem_onchip_memory+0xf78072c8>
    7374:	00800244 	movi	r2,9
    7378:	88800015 	stw	r2,0(r17)
    737c:	20801014 	ori	r2,r4,64
    7380:	8080030d 	sth	r2,12(r16)
    7384:	00bfffc4 	movi	r2,-1
    7388:	003fc506 	br	72a0 <__alt_mem_onchip_memory+0xf78072a0>

0000738c <quorem>:
    738c:	defff704 	addi	sp,sp,-36
    7390:	dc800215 	stw	r18,8(sp)
    7394:	20800417 	ldw	r2,16(r4)
    7398:	2c800417 	ldw	r18,16(r5)
    739c:	dfc00815 	stw	ra,32(sp)
    73a0:	ddc00715 	stw	r23,28(sp)
    73a4:	dd800615 	stw	r22,24(sp)
    73a8:	dd400515 	stw	r21,20(sp)
    73ac:	dd000415 	stw	r20,16(sp)
    73b0:	dcc00315 	stw	r19,12(sp)
    73b4:	dc400115 	stw	r17,4(sp)
    73b8:	dc000015 	stw	r16,0(sp)
    73bc:	14807116 	blt	r2,r18,7584 <quorem+0x1f8>
    73c0:	94bfffc4 	addi	r18,r18,-1
    73c4:	94ad883a 	add	r22,r18,r18
    73c8:	b5ad883a 	add	r22,r22,r22
    73cc:	2c400504 	addi	r17,r5,20
    73d0:	8da9883a 	add	r20,r17,r22
    73d4:	25400504 	addi	r21,r4,20
    73d8:	282f883a 	mov	r23,r5
    73dc:	adad883a 	add	r22,r21,r22
    73e0:	a1400017 	ldw	r5,0(r20)
    73e4:	2021883a 	mov	r16,r4
    73e8:	b1000017 	ldw	r4,0(r22)
    73ec:	29400044 	addi	r5,r5,1
    73f0:	0004b780 	call	4b78 <__udivsi3>
    73f4:	1027883a 	mov	r19,r2
    73f8:	10002c26 	beq	r2,zero,74ac <quorem+0x120>
    73fc:	a813883a 	mov	r9,r21
    7400:	880b883a 	mov	r5,r17
    7404:	0009883a 	mov	r4,zero
    7408:	000d883a 	mov	r6,zero
    740c:	2a000017 	ldw	r8,0(r5)
    7410:	49c00017 	ldw	r7,0(r9)
    7414:	29400104 	addi	r5,r5,4
    7418:	40bfffcc 	andi	r2,r8,65535
    741c:	14c5383a 	mul	r2,r2,r19
    7420:	4010d43a 	srli	r8,r8,16
    7424:	38ffffcc 	andi	r3,r7,65535
    7428:	1105883a 	add	r2,r2,r4
    742c:	1008d43a 	srli	r4,r2,16
    7430:	44d1383a 	mul	r8,r8,r19
    7434:	198d883a 	add	r6,r3,r6
    7438:	10ffffcc 	andi	r3,r2,65535
    743c:	30c7c83a 	sub	r3,r6,r3
    7440:	380ed43a 	srli	r7,r7,16
    7444:	4105883a 	add	r2,r8,r4
    7448:	180dd43a 	srai	r6,r3,16
    744c:	113fffcc 	andi	r4,r2,65535
    7450:	390fc83a 	sub	r7,r7,r4
    7454:	398d883a 	add	r6,r7,r6
    7458:	300e943a 	slli	r7,r6,16
    745c:	18ffffcc 	andi	r3,r3,65535
    7460:	1008d43a 	srli	r4,r2,16
    7464:	38ceb03a 	or	r7,r7,r3
    7468:	49c00015 	stw	r7,0(r9)
    746c:	300dd43a 	srai	r6,r6,16
    7470:	4a400104 	addi	r9,r9,4
    7474:	a17fe52e 	bgeu	r20,r5,740c <__alt_mem_onchip_memory+0xf780740c>
    7478:	b0800017 	ldw	r2,0(r22)
    747c:	10000b1e 	bne	r2,zero,74ac <quorem+0x120>
    7480:	b0bfff04 	addi	r2,r22,-4
    7484:	a880082e 	bgeu	r21,r2,74a8 <quorem+0x11c>
    7488:	b0ffff17 	ldw	r3,-4(r22)
    748c:	18000326 	beq	r3,zero,749c <quorem+0x110>
    7490:	00000506 	br	74a8 <quorem+0x11c>
    7494:	10c00017 	ldw	r3,0(r2)
    7498:	1800031e 	bne	r3,zero,74a8 <quorem+0x11c>
    749c:	10bfff04 	addi	r2,r2,-4
    74a0:	94bfffc4 	addi	r18,r18,-1
    74a4:	a8bffb36 	bltu	r21,r2,7494 <__alt_mem_onchip_memory+0xf7807494>
    74a8:	84800415 	stw	r18,16(r16)
    74ac:	b80b883a 	mov	r5,r23
    74b0:	8009883a 	mov	r4,r16
    74b4:	000b54c0 	call	b54c <__mcmp>
    74b8:	10002616 	blt	r2,zero,7554 <quorem+0x1c8>
    74bc:	9cc00044 	addi	r19,r19,1
    74c0:	a805883a 	mov	r2,r21
    74c4:	000b883a 	mov	r5,zero
    74c8:	11000017 	ldw	r4,0(r2)
    74cc:	89800017 	ldw	r6,0(r17)
    74d0:	10800104 	addi	r2,r2,4
    74d4:	20ffffcc 	andi	r3,r4,65535
    74d8:	194b883a 	add	r5,r3,r5
    74dc:	30ffffcc 	andi	r3,r6,65535
    74e0:	28c7c83a 	sub	r3,r5,r3
    74e4:	300cd43a 	srli	r6,r6,16
    74e8:	2008d43a 	srli	r4,r4,16
    74ec:	180bd43a 	srai	r5,r3,16
    74f0:	18ffffcc 	andi	r3,r3,65535
    74f4:	2189c83a 	sub	r4,r4,r6
    74f8:	2149883a 	add	r4,r4,r5
    74fc:	200c943a 	slli	r6,r4,16
    7500:	8c400104 	addi	r17,r17,4
    7504:	200bd43a 	srai	r5,r4,16
    7508:	30c6b03a 	or	r3,r6,r3
    750c:	10ffff15 	stw	r3,-4(r2)
    7510:	a47fed2e 	bgeu	r20,r17,74c8 <__alt_mem_onchip_memory+0xf78074c8>
    7514:	9485883a 	add	r2,r18,r18
    7518:	1085883a 	add	r2,r2,r2
    751c:	a887883a 	add	r3,r21,r2
    7520:	18800017 	ldw	r2,0(r3)
    7524:	10000b1e 	bne	r2,zero,7554 <quorem+0x1c8>
    7528:	18bfff04 	addi	r2,r3,-4
    752c:	a880082e 	bgeu	r21,r2,7550 <quorem+0x1c4>
    7530:	18ffff17 	ldw	r3,-4(r3)
    7534:	18000326 	beq	r3,zero,7544 <quorem+0x1b8>
    7538:	00000506 	br	7550 <quorem+0x1c4>
    753c:	10c00017 	ldw	r3,0(r2)
    7540:	1800031e 	bne	r3,zero,7550 <quorem+0x1c4>
    7544:	10bfff04 	addi	r2,r2,-4
    7548:	94bfffc4 	addi	r18,r18,-1
    754c:	a8bffb36 	bltu	r21,r2,753c <__alt_mem_onchip_memory+0xf780753c>
    7550:	84800415 	stw	r18,16(r16)
    7554:	9805883a 	mov	r2,r19
    7558:	dfc00817 	ldw	ra,32(sp)
    755c:	ddc00717 	ldw	r23,28(sp)
    7560:	dd800617 	ldw	r22,24(sp)
    7564:	dd400517 	ldw	r21,20(sp)
    7568:	dd000417 	ldw	r20,16(sp)
    756c:	dcc00317 	ldw	r19,12(sp)
    7570:	dc800217 	ldw	r18,8(sp)
    7574:	dc400117 	ldw	r17,4(sp)
    7578:	dc000017 	ldw	r16,0(sp)
    757c:	dec00904 	addi	sp,sp,36
    7580:	f800283a 	ret
    7584:	0005883a 	mov	r2,zero
    7588:	003ff306 	br	7558 <__alt_mem_onchip_memory+0xf7807558>

0000758c <_dtoa_r>:
    758c:	20801017 	ldw	r2,64(r4)
    7590:	deffde04 	addi	sp,sp,-136
    7594:	df002015 	stw	fp,128(sp)
    7598:	dcc01b15 	stw	r19,108(sp)
    759c:	dc801a15 	stw	r18,104(sp)
    75a0:	dc401915 	stw	r17,100(sp)
    75a4:	dc001815 	stw	r16,96(sp)
    75a8:	dfc02115 	stw	ra,132(sp)
    75ac:	ddc01f15 	stw	r23,124(sp)
    75b0:	dd801e15 	stw	r22,120(sp)
    75b4:	dd401d15 	stw	r21,116(sp)
    75b8:	dd001c15 	stw	r20,112(sp)
    75bc:	d9c00315 	stw	r7,12(sp)
    75c0:	2039883a 	mov	fp,r4
    75c4:	3023883a 	mov	r17,r6
    75c8:	2825883a 	mov	r18,r5
    75cc:	dc002417 	ldw	r16,144(sp)
    75d0:	3027883a 	mov	r19,r6
    75d4:	10000826 	beq	r2,zero,75f8 <_dtoa_r+0x6c>
    75d8:	21801117 	ldw	r6,68(r4)
    75dc:	00c00044 	movi	r3,1
    75e0:	100b883a 	mov	r5,r2
    75e4:	1986983a 	sll	r3,r3,r6
    75e8:	11800115 	stw	r6,4(r2)
    75ec:	10c00215 	stw	r3,8(r2)
    75f0:	000ad2c0 	call	ad2c <_Bfree>
    75f4:	e0001015 	stw	zero,64(fp)
    75f8:	88002e16 	blt	r17,zero,76b4 <_dtoa_r+0x128>
    75fc:	80000015 	stw	zero,0(r16)
    7600:	889ffc2c 	andhi	r2,r17,32752
    7604:	00dffc34 	movhi	r3,32752
    7608:	10c01c26 	beq	r2,r3,767c <_dtoa_r+0xf0>
    760c:	000d883a 	mov	r6,zero
    7610:	000f883a 	mov	r7,zero
    7614:	9009883a 	mov	r4,r18
    7618:	980b883a 	mov	r5,r19
    761c:	000f0440 	call	f044 <__eqdf2>
    7620:	10002b1e 	bne	r2,zero,76d0 <_dtoa_r+0x144>
    7624:	d9c02317 	ldw	r7,140(sp)
    7628:	00800044 	movi	r2,1
    762c:	38800015 	stw	r2,0(r7)
    7630:	d8802517 	ldw	r2,148(sp)
    7634:	10019e26 	beq	r2,zero,7cb0 <_dtoa_r+0x724>
    7638:	d8c02517 	ldw	r3,148(sp)
    763c:	00800074 	movhi	r2,1
    7640:	10886b44 	addi	r2,r2,8621
    7644:	18800015 	stw	r2,0(r3)
    7648:	10bfffc4 	addi	r2,r2,-1
    764c:	dfc02117 	ldw	ra,132(sp)
    7650:	df002017 	ldw	fp,128(sp)
    7654:	ddc01f17 	ldw	r23,124(sp)
    7658:	dd801e17 	ldw	r22,120(sp)
    765c:	dd401d17 	ldw	r21,116(sp)
    7660:	dd001c17 	ldw	r20,112(sp)
    7664:	dcc01b17 	ldw	r19,108(sp)
    7668:	dc801a17 	ldw	r18,104(sp)
    766c:	dc401917 	ldw	r17,100(sp)
    7670:	dc001817 	ldw	r16,96(sp)
    7674:	dec02204 	addi	sp,sp,136
    7678:	f800283a 	ret
    767c:	d8c02317 	ldw	r3,140(sp)
    7680:	0089c3c4 	movi	r2,9999
    7684:	18800015 	stw	r2,0(r3)
    7688:	90017726 	beq	r18,zero,7c68 <_dtoa_r+0x6dc>
    768c:	00800074 	movhi	r2,1
    7690:	10887704 	addi	r2,r2,8668
    7694:	d9002517 	ldw	r4,148(sp)
    7698:	203fec26 	beq	r4,zero,764c <__alt_mem_onchip_memory+0xf780764c>
    769c:	10c000c7 	ldb	r3,3(r2)
    76a0:	1801781e 	bne	r3,zero,7c84 <_dtoa_r+0x6f8>
    76a4:	10c000c4 	addi	r3,r2,3
    76a8:	d9802517 	ldw	r6,148(sp)
    76ac:	30c00015 	stw	r3,0(r6)
    76b0:	003fe606 	br	764c <__alt_mem_onchip_memory+0xf780764c>
    76b4:	04e00034 	movhi	r19,32768
    76b8:	9cffffc4 	addi	r19,r19,-1
    76bc:	00800044 	movi	r2,1
    76c0:	8ce6703a 	and	r19,r17,r19
    76c4:	80800015 	stw	r2,0(r16)
    76c8:	9823883a 	mov	r17,r19
    76cc:	003fcc06 	br	7600 <__alt_mem_onchip_memory+0xf7807600>
    76d0:	d8800204 	addi	r2,sp,8
    76d4:	d8800015 	stw	r2,0(sp)
    76d8:	d9c00104 	addi	r7,sp,4
    76dc:	900b883a 	mov	r5,r18
    76e0:	980d883a 	mov	r6,r19
    76e4:	e009883a 	mov	r4,fp
    76e8:	8820d53a 	srli	r16,r17,20
    76ec:	000b9180 	call	b918 <__d2b>
    76f0:	d8800915 	stw	r2,36(sp)
    76f4:	8001651e 	bne	r16,zero,7c8c <_dtoa_r+0x700>
    76f8:	dd800217 	ldw	r22,8(sp)
    76fc:	dc000117 	ldw	r16,4(sp)
    7700:	00800804 	movi	r2,32
    7704:	b421883a 	add	r16,r22,r16
    7708:	80c10c84 	addi	r3,r16,1074
    770c:	10c2d10e 	bge	r2,r3,8254 <_dtoa_r+0xcc8>
    7710:	00801004 	movi	r2,64
    7714:	81010484 	addi	r4,r16,1042
    7718:	10c7c83a 	sub	r3,r2,r3
    771c:	9108d83a 	srl	r4,r18,r4
    7720:	88e2983a 	sll	r17,r17,r3
    7724:	2448b03a 	or	r4,r4,r17
    7728:	000f0cc0 	call	f0cc <__floatunsidf>
    772c:	017f8434 	movhi	r5,65040
    7730:	01800044 	movi	r6,1
    7734:	1009883a 	mov	r4,r2
    7738:	194b883a 	add	r5,r3,r5
    773c:	843fffc4 	addi	r16,r16,-1
    7740:	d9801115 	stw	r6,68(sp)
    7744:	000d883a 	mov	r6,zero
    7748:	01cffe34 	movhi	r7,16376
    774c:	0003d0c0 	call	3d0c <__subdf3>
    7750:	0198dbf4 	movhi	r6,25455
    7754:	01cff4f4 	movhi	r7,16339
    7758:	3190d844 	addi	r6,r6,17249
    775c:	39e1e9c4 	addi	r7,r7,-30809
    7760:	1009883a 	mov	r4,r2
    7764:	180b883a 	mov	r5,r3
    7768:	00035f40 	call	35f4 <__muldf3>
    776c:	01a2d874 	movhi	r6,35681
    7770:	01cff1f4 	movhi	r7,16327
    7774:	31b22cc4 	addi	r6,r6,-14157
    7778:	39e28a04 	addi	r7,r7,-30168
    777c:	180b883a 	mov	r5,r3
    7780:	1009883a 	mov	r4,r2
    7784:	00022900 	call	2290 <__adddf3>
    7788:	8009883a 	mov	r4,r16
    778c:	1029883a 	mov	r20,r2
    7790:	1823883a 	mov	r17,r3
    7794:	00046880 	call	4688 <__floatsidf>
    7798:	019427f4 	movhi	r6,20639
    779c:	01cff4f4 	movhi	r7,16339
    77a0:	319e7ec4 	addi	r6,r6,31227
    77a4:	39d104c4 	addi	r7,r7,17427
    77a8:	1009883a 	mov	r4,r2
    77ac:	180b883a 	mov	r5,r3
    77b0:	00035f40 	call	35f4 <__muldf3>
    77b4:	100d883a 	mov	r6,r2
    77b8:	180f883a 	mov	r7,r3
    77bc:	a009883a 	mov	r4,r20
    77c0:	880b883a 	mov	r5,r17
    77c4:	00022900 	call	2290 <__adddf3>
    77c8:	1009883a 	mov	r4,r2
    77cc:	180b883a 	mov	r5,r3
    77d0:	1029883a 	mov	r20,r2
    77d4:	1823883a 	mov	r17,r3
    77d8:	00046080 	call	4608 <__fixdfsi>
    77dc:	000d883a 	mov	r6,zero
    77e0:	000f883a 	mov	r7,zero
    77e4:	a009883a 	mov	r4,r20
    77e8:	880b883a 	mov	r5,r17
    77ec:	d8800515 	stw	r2,20(sp)
    77f0:	00035000 	call	3500 <__ledf2>
    77f4:	10028716 	blt	r2,zero,8214 <_dtoa_r+0xc88>
    77f8:	d8c00517 	ldw	r3,20(sp)
    77fc:	00800584 	movi	r2,22
    7800:	10c27536 	bltu	r2,r3,81d8 <_dtoa_r+0xc4c>
    7804:	180490fa 	slli	r2,r3,3
    7808:	00c00074 	movhi	r3,1
    780c:	18c89204 	addi	r3,r3,8776
    7810:	1885883a 	add	r2,r3,r2
    7814:	11000017 	ldw	r4,0(r2)
    7818:	11400117 	ldw	r5,4(r2)
    781c:	900d883a 	mov	r6,r18
    7820:	980f883a 	mov	r7,r19
    7824:	00034240 	call	3424 <__gedf2>
    7828:	00828d0e 	bge	zero,r2,8260 <_dtoa_r+0xcd4>
    782c:	d9000517 	ldw	r4,20(sp)
    7830:	d8000e15 	stw	zero,56(sp)
    7834:	213fffc4 	addi	r4,r4,-1
    7838:	d9000515 	stw	r4,20(sp)
    783c:	b42dc83a 	sub	r22,r22,r16
    7840:	b5bfffc4 	addi	r22,r22,-1
    7844:	b0026f16 	blt	r22,zero,8204 <_dtoa_r+0xc78>
    7848:	d8000815 	stw	zero,32(sp)
    784c:	d9c00517 	ldw	r7,20(sp)
    7850:	38026416 	blt	r7,zero,81e4 <_dtoa_r+0xc58>
    7854:	b1ed883a 	add	r22,r22,r7
    7858:	d9c00d15 	stw	r7,52(sp)
    785c:	d8000a15 	stw	zero,40(sp)
    7860:	d9800317 	ldw	r6,12(sp)
    7864:	00800244 	movi	r2,9
    7868:	11811436 	bltu	r2,r6,7cbc <_dtoa_r+0x730>
    786c:	00800144 	movi	r2,5
    7870:	1184e10e 	bge	r2,r6,8bf8 <_dtoa_r+0x166c>
    7874:	31bfff04 	addi	r6,r6,-4
    7878:	d9800315 	stw	r6,12(sp)
    787c:	0023883a 	mov	r17,zero
    7880:	d9800317 	ldw	r6,12(sp)
    7884:	008000c4 	movi	r2,3
    7888:	30836726 	beq	r6,r2,8628 <_dtoa_r+0x109c>
    788c:	1183410e 	bge	r2,r6,8594 <_dtoa_r+0x1008>
    7890:	d9c00317 	ldw	r7,12(sp)
    7894:	00800104 	movi	r2,4
    7898:	38827c26 	beq	r7,r2,828c <_dtoa_r+0xd00>
    789c:	00800144 	movi	r2,5
    78a0:	3884c41e 	bne	r7,r2,8bb4 <_dtoa_r+0x1628>
    78a4:	00800044 	movi	r2,1
    78a8:	d8800b15 	stw	r2,44(sp)
    78ac:	d8c00517 	ldw	r3,20(sp)
    78b0:	d9002217 	ldw	r4,136(sp)
    78b4:	1907883a 	add	r3,r3,r4
    78b8:	19800044 	addi	r6,r3,1
    78bc:	d8c00c15 	stw	r3,48(sp)
    78c0:	d9800615 	stw	r6,24(sp)
    78c4:	0183a40e 	bge	zero,r6,8758 <_dtoa_r+0x11cc>
    78c8:	d9800617 	ldw	r6,24(sp)
    78cc:	3021883a 	mov	r16,r6
    78d0:	e0001115 	stw	zero,68(fp)
    78d4:	008005c4 	movi	r2,23
    78d8:	1184c92e 	bgeu	r2,r6,8c00 <_dtoa_r+0x1674>
    78dc:	00c00044 	movi	r3,1
    78e0:	00800104 	movi	r2,4
    78e4:	1085883a 	add	r2,r2,r2
    78e8:	11000504 	addi	r4,r2,20
    78ec:	180b883a 	mov	r5,r3
    78f0:	18c00044 	addi	r3,r3,1
    78f4:	313ffb2e 	bgeu	r6,r4,78e4 <__alt_mem_onchip_memory+0xf78078e4>
    78f8:	e1401115 	stw	r5,68(fp)
    78fc:	e009883a 	mov	r4,fp
    7900:	000ac840 	call	ac84 <_Balloc>
    7904:	d8800715 	stw	r2,28(sp)
    7908:	e0801015 	stw	r2,64(fp)
    790c:	00800384 	movi	r2,14
    7910:	1400f736 	bltu	r2,r16,7cf0 <_dtoa_r+0x764>
    7914:	8800f626 	beq	r17,zero,7cf0 <_dtoa_r+0x764>
    7918:	d9c00517 	ldw	r7,20(sp)
    791c:	01c39a0e 	bge	zero,r7,8788 <_dtoa_r+0x11fc>
    7920:	388003cc 	andi	r2,r7,15
    7924:	100490fa 	slli	r2,r2,3
    7928:	382bd13a 	srai	r21,r7,4
    792c:	00c00074 	movhi	r3,1
    7930:	18c89204 	addi	r3,r3,8776
    7934:	1885883a 	add	r2,r3,r2
    7938:	a8c0040c 	andi	r3,r21,16
    793c:	12400017 	ldw	r9,0(r2)
    7940:	12000117 	ldw	r8,4(r2)
    7944:	18037926 	beq	r3,zero,872c <_dtoa_r+0x11a0>
    7948:	00800074 	movhi	r2,1
    794c:	10888804 	addi	r2,r2,8736
    7950:	11800817 	ldw	r6,32(r2)
    7954:	11c00917 	ldw	r7,36(r2)
    7958:	9009883a 	mov	r4,r18
    795c:	980b883a 	mov	r5,r19
    7960:	da001715 	stw	r8,92(sp)
    7964:	da401615 	stw	r9,88(sp)
    7968:	0002b3c0 	call	2b3c <__divdf3>
    796c:	da001717 	ldw	r8,92(sp)
    7970:	da401617 	ldw	r9,88(sp)
    7974:	ad4003cc 	andi	r21,r21,15
    7978:	040000c4 	movi	r16,3
    797c:	1023883a 	mov	r17,r2
    7980:	1829883a 	mov	r20,r3
    7984:	a8001126 	beq	r21,zero,79cc <_dtoa_r+0x440>
    7988:	05c00074 	movhi	r23,1
    798c:	bdc88804 	addi	r23,r23,8736
    7990:	4805883a 	mov	r2,r9
    7994:	4007883a 	mov	r3,r8
    7998:	a980004c 	andi	r6,r21,1
    799c:	1009883a 	mov	r4,r2
    79a0:	a82bd07a 	srai	r21,r21,1
    79a4:	180b883a 	mov	r5,r3
    79a8:	30000426 	beq	r6,zero,79bc <_dtoa_r+0x430>
    79ac:	b9800017 	ldw	r6,0(r23)
    79b0:	b9c00117 	ldw	r7,4(r23)
    79b4:	84000044 	addi	r16,r16,1
    79b8:	00035f40 	call	35f4 <__muldf3>
    79bc:	bdc00204 	addi	r23,r23,8
    79c0:	a83ff51e 	bne	r21,zero,7998 <__alt_mem_onchip_memory+0xf7807998>
    79c4:	1013883a 	mov	r9,r2
    79c8:	1811883a 	mov	r8,r3
    79cc:	480d883a 	mov	r6,r9
    79d0:	400f883a 	mov	r7,r8
    79d4:	8809883a 	mov	r4,r17
    79d8:	a00b883a 	mov	r5,r20
    79dc:	0002b3c0 	call	2b3c <__divdf3>
    79e0:	d8800f15 	stw	r2,60(sp)
    79e4:	d8c01015 	stw	r3,64(sp)
    79e8:	d8c00e17 	ldw	r3,56(sp)
    79ec:	18000626 	beq	r3,zero,7a08 <_dtoa_r+0x47c>
    79f0:	d9000f17 	ldw	r4,60(sp)
    79f4:	d9401017 	ldw	r5,64(sp)
    79f8:	000d883a 	mov	r6,zero
    79fc:	01cffc34 	movhi	r7,16368
    7a00:	00035000 	call	3500 <__ledf2>
    7a04:	10040b16 	blt	r2,zero,8a34 <_dtoa_r+0x14a8>
    7a08:	8009883a 	mov	r4,r16
    7a0c:	00046880 	call	4688 <__floatsidf>
    7a10:	d9800f17 	ldw	r6,60(sp)
    7a14:	d9c01017 	ldw	r7,64(sp)
    7a18:	1009883a 	mov	r4,r2
    7a1c:	180b883a 	mov	r5,r3
    7a20:	00035f40 	call	35f4 <__muldf3>
    7a24:	000d883a 	mov	r6,zero
    7a28:	01d00734 	movhi	r7,16412
    7a2c:	1009883a 	mov	r4,r2
    7a30:	180b883a 	mov	r5,r3
    7a34:	00022900 	call	2290 <__adddf3>
    7a38:	1021883a 	mov	r16,r2
    7a3c:	d8800617 	ldw	r2,24(sp)
    7a40:	047f3034 	movhi	r17,64704
    7a44:	1c63883a 	add	r17,r3,r17
    7a48:	10031826 	beq	r2,zero,86ac <_dtoa_r+0x1120>
    7a4c:	d8c00517 	ldw	r3,20(sp)
    7a50:	db000617 	ldw	r12,24(sp)
    7a54:	d8c01315 	stw	r3,76(sp)
    7a58:	d9000b17 	ldw	r4,44(sp)
    7a5c:	20038f26 	beq	r4,zero,889c <_dtoa_r+0x1310>
    7a60:	60bfffc4 	addi	r2,r12,-1
    7a64:	100490fa 	slli	r2,r2,3
    7a68:	00c00074 	movhi	r3,1
    7a6c:	18c89204 	addi	r3,r3,8776
    7a70:	1885883a 	add	r2,r3,r2
    7a74:	11800017 	ldw	r6,0(r2)
    7a78:	11c00117 	ldw	r7,4(r2)
    7a7c:	d8800717 	ldw	r2,28(sp)
    7a80:	0009883a 	mov	r4,zero
    7a84:	014ff834 	movhi	r5,16352
    7a88:	db001615 	stw	r12,88(sp)
    7a8c:	15c00044 	addi	r23,r2,1
    7a90:	0002b3c0 	call	2b3c <__divdf3>
    7a94:	800d883a 	mov	r6,r16
    7a98:	880f883a 	mov	r7,r17
    7a9c:	1009883a 	mov	r4,r2
    7aa0:	180b883a 	mov	r5,r3
    7aa4:	0003d0c0 	call	3d0c <__subdf3>
    7aa8:	d9401017 	ldw	r5,64(sp)
    7aac:	d9000f17 	ldw	r4,60(sp)
    7ab0:	102b883a 	mov	r21,r2
    7ab4:	d8c01215 	stw	r3,72(sp)
    7ab8:	00046080 	call	4608 <__fixdfsi>
    7abc:	1009883a 	mov	r4,r2
    7ac0:	1029883a 	mov	r20,r2
    7ac4:	00046880 	call	4688 <__floatsidf>
    7ac8:	d9000f17 	ldw	r4,60(sp)
    7acc:	d9401017 	ldw	r5,64(sp)
    7ad0:	100d883a 	mov	r6,r2
    7ad4:	180f883a 	mov	r7,r3
    7ad8:	0003d0c0 	call	3d0c <__subdf3>
    7adc:	1823883a 	mov	r17,r3
    7ae0:	d8c00717 	ldw	r3,28(sp)
    7ae4:	d9401217 	ldw	r5,72(sp)
    7ae8:	a2000c04 	addi	r8,r20,48
    7aec:	1021883a 	mov	r16,r2
    7af0:	1a000005 	stb	r8,0(r3)
    7af4:	800d883a 	mov	r6,r16
    7af8:	880f883a 	mov	r7,r17
    7afc:	a809883a 	mov	r4,r21
    7b00:	4029883a 	mov	r20,r8
    7b04:	00034240 	call	3424 <__gedf2>
    7b08:	00841d16 	blt	zero,r2,8b80 <_dtoa_r+0x15f4>
    7b0c:	800d883a 	mov	r6,r16
    7b10:	880f883a 	mov	r7,r17
    7b14:	0009883a 	mov	r4,zero
    7b18:	014ffc34 	movhi	r5,16368
    7b1c:	0003d0c0 	call	3d0c <__subdf3>
    7b20:	d9401217 	ldw	r5,72(sp)
    7b24:	100d883a 	mov	r6,r2
    7b28:	180f883a 	mov	r7,r3
    7b2c:	a809883a 	mov	r4,r21
    7b30:	00034240 	call	3424 <__gedf2>
    7b34:	db001617 	ldw	r12,88(sp)
    7b38:	00840e16 	blt	zero,r2,8b74 <_dtoa_r+0x15e8>
    7b3c:	00800044 	movi	r2,1
    7b40:	13006b0e 	bge	r2,r12,7cf0 <_dtoa_r+0x764>
    7b44:	d9000717 	ldw	r4,28(sp)
    7b48:	dd800f15 	stw	r22,60(sp)
    7b4c:	dcc01015 	stw	r19,64(sp)
    7b50:	2319883a 	add	r12,r4,r12
    7b54:	dcc01217 	ldw	r19,72(sp)
    7b58:	602d883a 	mov	r22,r12
    7b5c:	dc801215 	stw	r18,72(sp)
    7b60:	b825883a 	mov	r18,r23
    7b64:	00000906 	br	7b8c <_dtoa_r+0x600>
    7b68:	0003d0c0 	call	3d0c <__subdf3>
    7b6c:	a80d883a 	mov	r6,r21
    7b70:	980f883a 	mov	r7,r19
    7b74:	1009883a 	mov	r4,r2
    7b78:	180b883a 	mov	r5,r3
    7b7c:	00035000 	call	3500 <__ledf2>
    7b80:	1003e816 	blt	r2,zero,8b24 <_dtoa_r+0x1598>
    7b84:	b825883a 	mov	r18,r23
    7b88:	bd83e926 	beq	r23,r22,8b30 <_dtoa_r+0x15a4>
    7b8c:	a809883a 	mov	r4,r21
    7b90:	980b883a 	mov	r5,r19
    7b94:	000d883a 	mov	r6,zero
    7b98:	01d00934 	movhi	r7,16420
    7b9c:	00035f40 	call	35f4 <__muldf3>
    7ba0:	000d883a 	mov	r6,zero
    7ba4:	01d00934 	movhi	r7,16420
    7ba8:	8009883a 	mov	r4,r16
    7bac:	880b883a 	mov	r5,r17
    7bb0:	102b883a 	mov	r21,r2
    7bb4:	1827883a 	mov	r19,r3
    7bb8:	00035f40 	call	35f4 <__muldf3>
    7bbc:	180b883a 	mov	r5,r3
    7bc0:	1009883a 	mov	r4,r2
    7bc4:	1821883a 	mov	r16,r3
    7bc8:	1023883a 	mov	r17,r2
    7bcc:	00046080 	call	4608 <__fixdfsi>
    7bd0:	1009883a 	mov	r4,r2
    7bd4:	1029883a 	mov	r20,r2
    7bd8:	00046880 	call	4688 <__floatsidf>
    7bdc:	8809883a 	mov	r4,r17
    7be0:	800b883a 	mov	r5,r16
    7be4:	100d883a 	mov	r6,r2
    7be8:	180f883a 	mov	r7,r3
    7bec:	0003d0c0 	call	3d0c <__subdf3>
    7bf0:	a5000c04 	addi	r20,r20,48
    7bf4:	a80d883a 	mov	r6,r21
    7bf8:	980f883a 	mov	r7,r19
    7bfc:	1009883a 	mov	r4,r2
    7c00:	180b883a 	mov	r5,r3
    7c04:	95000005 	stb	r20,0(r18)
    7c08:	1021883a 	mov	r16,r2
    7c0c:	1823883a 	mov	r17,r3
    7c10:	00035000 	call	3500 <__ledf2>
    7c14:	bdc00044 	addi	r23,r23,1
    7c18:	800d883a 	mov	r6,r16
    7c1c:	880f883a 	mov	r7,r17
    7c20:	0009883a 	mov	r4,zero
    7c24:	014ffc34 	movhi	r5,16368
    7c28:	103fcf0e 	bge	r2,zero,7b68 <__alt_mem_onchip_memory+0xf7807b68>
    7c2c:	d8c01317 	ldw	r3,76(sp)
    7c30:	d8c00515 	stw	r3,20(sp)
    7c34:	d9400917 	ldw	r5,36(sp)
    7c38:	e009883a 	mov	r4,fp
    7c3c:	000ad2c0 	call	ad2c <_Bfree>
    7c40:	d9000517 	ldw	r4,20(sp)
    7c44:	d9802317 	ldw	r6,140(sp)
    7c48:	d9c02517 	ldw	r7,148(sp)
    7c4c:	b8000005 	stb	zero,0(r23)
    7c50:	20800044 	addi	r2,r4,1
    7c54:	30800015 	stw	r2,0(r6)
    7c58:	3802aa26 	beq	r7,zero,8704 <_dtoa_r+0x1178>
    7c5c:	3dc00015 	stw	r23,0(r7)
    7c60:	d8800717 	ldw	r2,28(sp)
    7c64:	003e7906 	br	764c <__alt_mem_onchip_memory+0xf780764c>
    7c68:	00800434 	movhi	r2,16
    7c6c:	10bfffc4 	addi	r2,r2,-1
    7c70:	88a2703a 	and	r17,r17,r2
    7c74:	883e851e 	bne	r17,zero,768c <__alt_mem_onchip_memory+0xf780768c>
    7c78:	00800074 	movhi	r2,1
    7c7c:	10887404 	addi	r2,r2,8656
    7c80:	003e8406 	br	7694 <__alt_mem_onchip_memory+0xf7807694>
    7c84:	10c00204 	addi	r3,r2,8
    7c88:	003e8706 	br	76a8 <__alt_mem_onchip_memory+0xf78076a8>
    7c8c:	01400434 	movhi	r5,16
    7c90:	297fffc4 	addi	r5,r5,-1
    7c94:	994a703a 	and	r5,r19,r5
    7c98:	9009883a 	mov	r4,r18
    7c9c:	843f0044 	addi	r16,r16,-1023
    7ca0:	294ffc34 	orhi	r5,r5,16368
    7ca4:	dd800217 	ldw	r22,8(sp)
    7ca8:	d8001115 	stw	zero,68(sp)
    7cac:	003ea506 	br	7744 <__alt_mem_onchip_memory+0xf7807744>
    7cb0:	00800074 	movhi	r2,1
    7cb4:	10886b04 	addi	r2,r2,8620
    7cb8:	003e6406 	br	764c <__alt_mem_onchip_memory+0xf780764c>
    7cbc:	e0001115 	stw	zero,68(fp)
    7cc0:	000b883a 	mov	r5,zero
    7cc4:	e009883a 	mov	r4,fp
    7cc8:	000ac840 	call	ac84 <_Balloc>
    7ccc:	01bfffc4 	movi	r6,-1
    7cd0:	01c00044 	movi	r7,1
    7cd4:	d8800715 	stw	r2,28(sp)
    7cd8:	d9800c15 	stw	r6,48(sp)
    7cdc:	e0801015 	stw	r2,64(fp)
    7ce0:	d8000315 	stw	zero,12(sp)
    7ce4:	d9c00b15 	stw	r7,44(sp)
    7ce8:	d9800615 	stw	r6,24(sp)
    7cec:	d8002215 	stw	zero,136(sp)
    7cf0:	d8800117 	ldw	r2,4(sp)
    7cf4:	10008916 	blt	r2,zero,7f1c <_dtoa_r+0x990>
    7cf8:	d9000517 	ldw	r4,20(sp)
    7cfc:	00c00384 	movi	r3,14
    7d00:	19008616 	blt	r3,r4,7f1c <_dtoa_r+0x990>
    7d04:	200490fa 	slli	r2,r4,3
    7d08:	00c00074 	movhi	r3,1
    7d0c:	d9802217 	ldw	r6,136(sp)
    7d10:	18c89204 	addi	r3,r3,8776
    7d14:	1885883a 	add	r2,r3,r2
    7d18:	14000017 	ldw	r16,0(r2)
    7d1c:	14400117 	ldw	r17,4(r2)
    7d20:	30016316 	blt	r6,zero,82b0 <_dtoa_r+0xd24>
    7d24:	800d883a 	mov	r6,r16
    7d28:	880f883a 	mov	r7,r17
    7d2c:	9009883a 	mov	r4,r18
    7d30:	980b883a 	mov	r5,r19
    7d34:	0002b3c0 	call	2b3c <__divdf3>
    7d38:	180b883a 	mov	r5,r3
    7d3c:	1009883a 	mov	r4,r2
    7d40:	00046080 	call	4608 <__fixdfsi>
    7d44:	1009883a 	mov	r4,r2
    7d48:	102b883a 	mov	r21,r2
    7d4c:	00046880 	call	4688 <__floatsidf>
    7d50:	800d883a 	mov	r6,r16
    7d54:	880f883a 	mov	r7,r17
    7d58:	1009883a 	mov	r4,r2
    7d5c:	180b883a 	mov	r5,r3
    7d60:	00035f40 	call	35f4 <__muldf3>
    7d64:	100d883a 	mov	r6,r2
    7d68:	180f883a 	mov	r7,r3
    7d6c:	9009883a 	mov	r4,r18
    7d70:	980b883a 	mov	r5,r19
    7d74:	0003d0c0 	call	3d0c <__subdf3>
    7d78:	d9c00717 	ldw	r7,28(sp)
    7d7c:	1009883a 	mov	r4,r2
    7d80:	a8800c04 	addi	r2,r21,48
    7d84:	38800005 	stb	r2,0(r7)
    7d88:	3dc00044 	addi	r23,r7,1
    7d8c:	d9c00617 	ldw	r7,24(sp)
    7d90:	01800044 	movi	r6,1
    7d94:	180b883a 	mov	r5,r3
    7d98:	2005883a 	mov	r2,r4
    7d9c:	39803826 	beq	r7,r6,7e80 <_dtoa_r+0x8f4>
    7da0:	000d883a 	mov	r6,zero
    7da4:	01d00934 	movhi	r7,16420
    7da8:	00035f40 	call	35f4 <__muldf3>
    7dac:	000d883a 	mov	r6,zero
    7db0:	000f883a 	mov	r7,zero
    7db4:	1009883a 	mov	r4,r2
    7db8:	180b883a 	mov	r5,r3
    7dbc:	1025883a 	mov	r18,r2
    7dc0:	1827883a 	mov	r19,r3
    7dc4:	000f0440 	call	f044 <__eqdf2>
    7dc8:	103f9a26 	beq	r2,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    7dcc:	d9c00617 	ldw	r7,24(sp)
    7dd0:	d8c00717 	ldw	r3,28(sp)
    7dd4:	b829883a 	mov	r20,r23
    7dd8:	38bfffc4 	addi	r2,r7,-1
    7ddc:	18ad883a 	add	r22,r3,r2
    7de0:	00000a06 	br	7e0c <_dtoa_r+0x880>
    7de4:	00035f40 	call	35f4 <__muldf3>
    7de8:	000d883a 	mov	r6,zero
    7dec:	000f883a 	mov	r7,zero
    7df0:	1009883a 	mov	r4,r2
    7df4:	180b883a 	mov	r5,r3
    7df8:	1025883a 	mov	r18,r2
    7dfc:	1827883a 	mov	r19,r3
    7e00:	b829883a 	mov	r20,r23
    7e04:	000f0440 	call	f044 <__eqdf2>
    7e08:	103f8a26 	beq	r2,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    7e0c:	800d883a 	mov	r6,r16
    7e10:	880f883a 	mov	r7,r17
    7e14:	9009883a 	mov	r4,r18
    7e18:	980b883a 	mov	r5,r19
    7e1c:	0002b3c0 	call	2b3c <__divdf3>
    7e20:	180b883a 	mov	r5,r3
    7e24:	1009883a 	mov	r4,r2
    7e28:	00046080 	call	4608 <__fixdfsi>
    7e2c:	1009883a 	mov	r4,r2
    7e30:	102b883a 	mov	r21,r2
    7e34:	00046880 	call	4688 <__floatsidf>
    7e38:	800d883a 	mov	r6,r16
    7e3c:	880f883a 	mov	r7,r17
    7e40:	1009883a 	mov	r4,r2
    7e44:	180b883a 	mov	r5,r3
    7e48:	00035f40 	call	35f4 <__muldf3>
    7e4c:	100d883a 	mov	r6,r2
    7e50:	180f883a 	mov	r7,r3
    7e54:	9009883a 	mov	r4,r18
    7e58:	980b883a 	mov	r5,r19
    7e5c:	0003d0c0 	call	3d0c <__subdf3>
    7e60:	aa000c04 	addi	r8,r21,48
    7e64:	a2000005 	stb	r8,0(r20)
    7e68:	000d883a 	mov	r6,zero
    7e6c:	01d00934 	movhi	r7,16420
    7e70:	1009883a 	mov	r4,r2
    7e74:	180b883a 	mov	r5,r3
    7e78:	a5c00044 	addi	r23,r20,1
    7e7c:	b53fd91e 	bne	r22,r20,7de4 <__alt_mem_onchip_memory+0xf7807de4>
    7e80:	100d883a 	mov	r6,r2
    7e84:	180f883a 	mov	r7,r3
    7e88:	1009883a 	mov	r4,r2
    7e8c:	180b883a 	mov	r5,r3
    7e90:	00022900 	call	2290 <__adddf3>
    7e94:	100d883a 	mov	r6,r2
    7e98:	180f883a 	mov	r7,r3
    7e9c:	8009883a 	mov	r4,r16
    7ea0:	880b883a 	mov	r5,r17
    7ea4:	1027883a 	mov	r19,r2
    7ea8:	1825883a 	mov	r18,r3
    7eac:	00035000 	call	3500 <__ledf2>
    7eb0:	10000816 	blt	r2,zero,7ed4 <_dtoa_r+0x948>
    7eb4:	980d883a 	mov	r6,r19
    7eb8:	900f883a 	mov	r7,r18
    7ebc:	8009883a 	mov	r4,r16
    7ec0:	880b883a 	mov	r5,r17
    7ec4:	000f0440 	call	f044 <__eqdf2>
    7ec8:	103f5a1e 	bne	r2,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    7ecc:	ad40004c 	andi	r21,r21,1
    7ed0:	a83f5826 	beq	r21,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    7ed4:	bd3fffc3 	ldbu	r20,-1(r23)
    7ed8:	b8bfffc4 	addi	r2,r23,-1
    7edc:	1007883a 	mov	r3,r2
    7ee0:	01400e44 	movi	r5,57
    7ee4:	d9800717 	ldw	r6,28(sp)
    7ee8:	00000506 	br	7f00 <_dtoa_r+0x974>
    7eec:	18ffffc4 	addi	r3,r3,-1
    7ef0:	11824726 	beq	r2,r6,8810 <_dtoa_r+0x1284>
    7ef4:	1d000003 	ldbu	r20,0(r3)
    7ef8:	102f883a 	mov	r23,r2
    7efc:	10bfffc4 	addi	r2,r2,-1
    7f00:	a1003fcc 	andi	r4,r20,255
    7f04:	2100201c 	xori	r4,r4,128
    7f08:	213fe004 	addi	r4,r4,-128
    7f0c:	217ff726 	beq	r4,r5,7eec <__alt_mem_onchip_memory+0xf7807eec>
    7f10:	a2000044 	addi	r8,r20,1
    7f14:	12000005 	stb	r8,0(r2)
    7f18:	003f4606 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    7f1c:	d9000b17 	ldw	r4,44(sp)
    7f20:	2000c826 	beq	r4,zero,8244 <_dtoa_r+0xcb8>
    7f24:	d9800317 	ldw	r6,12(sp)
    7f28:	00c00044 	movi	r3,1
    7f2c:	1980f90e 	bge	r3,r6,8314 <_dtoa_r+0xd88>
    7f30:	d8800617 	ldw	r2,24(sp)
    7f34:	d8c00a17 	ldw	r3,40(sp)
    7f38:	157fffc4 	addi	r21,r2,-1
    7f3c:	1d41f316 	blt	r3,r21,870c <_dtoa_r+0x1180>
    7f40:	1d6bc83a 	sub	r21,r3,r21
    7f44:	d9c00617 	ldw	r7,24(sp)
    7f48:	3802aa16 	blt	r7,zero,89f4 <_dtoa_r+0x1468>
    7f4c:	dd000817 	ldw	r20,32(sp)
    7f50:	d8800617 	ldw	r2,24(sp)
    7f54:	d8c00817 	ldw	r3,32(sp)
    7f58:	01400044 	movi	r5,1
    7f5c:	e009883a 	mov	r4,fp
    7f60:	1887883a 	add	r3,r3,r2
    7f64:	d8c00815 	stw	r3,32(sp)
    7f68:	b0ad883a 	add	r22,r22,r2
    7f6c:	000b0900 	call	b090 <__i2b>
    7f70:	1023883a 	mov	r17,r2
    7f74:	a0000826 	beq	r20,zero,7f98 <_dtoa_r+0xa0c>
    7f78:	0580070e 	bge	zero,r22,7f98 <_dtoa_r+0xa0c>
    7f7c:	a005883a 	mov	r2,r20
    7f80:	b500b916 	blt	r22,r20,8268 <_dtoa_r+0xcdc>
    7f84:	d9000817 	ldw	r4,32(sp)
    7f88:	a0a9c83a 	sub	r20,r20,r2
    7f8c:	b0adc83a 	sub	r22,r22,r2
    7f90:	2089c83a 	sub	r4,r4,r2
    7f94:	d9000815 	stw	r4,32(sp)
    7f98:	d9800a17 	ldw	r6,40(sp)
    7f9c:	0181810e 	bge	zero,r6,85a4 <_dtoa_r+0x1018>
    7fa0:	d9c00b17 	ldw	r7,44(sp)
    7fa4:	3800b326 	beq	r7,zero,8274 <_dtoa_r+0xce8>
    7fa8:	a800b226 	beq	r21,zero,8274 <_dtoa_r+0xce8>
    7fac:	880b883a 	mov	r5,r17
    7fb0:	a80d883a 	mov	r6,r21
    7fb4:	e009883a 	mov	r4,fp
    7fb8:	000b2c40 	call	b2c4 <__pow5mult>
    7fbc:	d9800917 	ldw	r6,36(sp)
    7fc0:	100b883a 	mov	r5,r2
    7fc4:	e009883a 	mov	r4,fp
    7fc8:	1023883a 	mov	r17,r2
    7fcc:	000b0cc0 	call	b0cc <__multiply>
    7fd0:	1021883a 	mov	r16,r2
    7fd4:	d8800a17 	ldw	r2,40(sp)
    7fd8:	d9400917 	ldw	r5,36(sp)
    7fdc:	e009883a 	mov	r4,fp
    7fe0:	1545c83a 	sub	r2,r2,r21
    7fe4:	d8800a15 	stw	r2,40(sp)
    7fe8:	000ad2c0 	call	ad2c <_Bfree>
    7fec:	d8c00a17 	ldw	r3,40(sp)
    7ff0:	18009f1e 	bne	r3,zero,8270 <_dtoa_r+0xce4>
    7ff4:	05c00044 	movi	r23,1
    7ff8:	e009883a 	mov	r4,fp
    7ffc:	b80b883a 	mov	r5,r23
    8000:	000b0900 	call	b090 <__i2b>
    8004:	d9000d17 	ldw	r4,52(sp)
    8008:	102b883a 	mov	r21,r2
    800c:	2000ce26 	beq	r4,zero,8348 <_dtoa_r+0xdbc>
    8010:	200d883a 	mov	r6,r4
    8014:	100b883a 	mov	r5,r2
    8018:	e009883a 	mov	r4,fp
    801c:	000b2c40 	call	b2c4 <__pow5mult>
    8020:	d9800317 	ldw	r6,12(sp)
    8024:	102b883a 	mov	r21,r2
    8028:	b981810e 	bge	r23,r6,8630 <_dtoa_r+0x10a4>
    802c:	0027883a 	mov	r19,zero
    8030:	a8800417 	ldw	r2,16(r21)
    8034:	05c00804 	movi	r23,32
    8038:	10800104 	addi	r2,r2,4
    803c:	1085883a 	add	r2,r2,r2
    8040:	1085883a 	add	r2,r2,r2
    8044:	a885883a 	add	r2,r21,r2
    8048:	11000017 	ldw	r4,0(r2)
    804c:	000af780 	call	af78 <__hi0bits>
    8050:	b885c83a 	sub	r2,r23,r2
    8054:	1585883a 	add	r2,r2,r22
    8058:	108007cc 	andi	r2,r2,31
    805c:	1000b326 	beq	r2,zero,832c <_dtoa_r+0xda0>
    8060:	00c00804 	movi	r3,32
    8064:	1887c83a 	sub	r3,r3,r2
    8068:	01000104 	movi	r4,4
    806c:	20c2cd0e 	bge	r4,r3,8ba4 <_dtoa_r+0x1618>
    8070:	00c00704 	movi	r3,28
    8074:	1885c83a 	sub	r2,r3,r2
    8078:	d8c00817 	ldw	r3,32(sp)
    807c:	a0a9883a 	add	r20,r20,r2
    8080:	b0ad883a 	add	r22,r22,r2
    8084:	1887883a 	add	r3,r3,r2
    8088:	d8c00815 	stw	r3,32(sp)
    808c:	d9800817 	ldw	r6,32(sp)
    8090:	0180040e 	bge	zero,r6,80a4 <_dtoa_r+0xb18>
    8094:	800b883a 	mov	r5,r16
    8098:	e009883a 	mov	r4,fp
    809c:	000b4040 	call	b404 <__lshift>
    80a0:	1021883a 	mov	r16,r2
    80a4:	0580050e 	bge	zero,r22,80bc <_dtoa_r+0xb30>
    80a8:	a80b883a 	mov	r5,r21
    80ac:	b00d883a 	mov	r6,r22
    80b0:	e009883a 	mov	r4,fp
    80b4:	000b4040 	call	b404 <__lshift>
    80b8:	102b883a 	mov	r21,r2
    80bc:	d9c00e17 	ldw	r7,56(sp)
    80c0:	3801211e 	bne	r7,zero,8548 <_dtoa_r+0xfbc>
    80c4:	d9800617 	ldw	r6,24(sp)
    80c8:	0181380e 	bge	zero,r6,85ac <_dtoa_r+0x1020>
    80cc:	d8c00b17 	ldw	r3,44(sp)
    80d0:	1800ab1e 	bne	r3,zero,8380 <_dtoa_r+0xdf4>
    80d4:	dc800717 	ldw	r18,28(sp)
    80d8:	dcc00617 	ldw	r19,24(sp)
    80dc:	9029883a 	mov	r20,r18
    80e0:	00000206 	br	80ec <_dtoa_r+0xb60>
    80e4:	000ad540 	call	ad54 <__multadd>
    80e8:	1021883a 	mov	r16,r2
    80ec:	a80b883a 	mov	r5,r21
    80f0:	8009883a 	mov	r4,r16
    80f4:	000738c0 	call	738c <quorem>
    80f8:	10800c04 	addi	r2,r2,48
    80fc:	90800005 	stb	r2,0(r18)
    8100:	94800044 	addi	r18,r18,1
    8104:	9507c83a 	sub	r3,r18,r20
    8108:	000f883a 	mov	r7,zero
    810c:	01800284 	movi	r6,10
    8110:	800b883a 	mov	r5,r16
    8114:	e009883a 	mov	r4,fp
    8118:	1cfff216 	blt	r3,r19,80e4 <__alt_mem_onchip_memory+0xf78080e4>
    811c:	1011883a 	mov	r8,r2
    8120:	d8800617 	ldw	r2,24(sp)
    8124:	0082370e 	bge	zero,r2,8a04 <_dtoa_r+0x1478>
    8128:	d9000717 	ldw	r4,28(sp)
    812c:	0025883a 	mov	r18,zero
    8130:	20af883a 	add	r23,r4,r2
    8134:	01800044 	movi	r6,1
    8138:	800b883a 	mov	r5,r16
    813c:	e009883a 	mov	r4,fp
    8140:	da001715 	stw	r8,92(sp)
    8144:	000b4040 	call	b404 <__lshift>
    8148:	a80b883a 	mov	r5,r21
    814c:	1009883a 	mov	r4,r2
    8150:	d8800915 	stw	r2,36(sp)
    8154:	000b54c0 	call	b54c <__mcmp>
    8158:	da001717 	ldw	r8,92(sp)
    815c:	0081800e 	bge	zero,r2,8760 <_dtoa_r+0x11d4>
    8160:	b93fffc3 	ldbu	r4,-1(r23)
    8164:	b8bfffc4 	addi	r2,r23,-1
    8168:	1007883a 	mov	r3,r2
    816c:	01800e44 	movi	r6,57
    8170:	d9c00717 	ldw	r7,28(sp)
    8174:	00000506 	br	818c <_dtoa_r+0xc00>
    8178:	18ffffc4 	addi	r3,r3,-1
    817c:	11c12326 	beq	r2,r7,860c <_dtoa_r+0x1080>
    8180:	19000003 	ldbu	r4,0(r3)
    8184:	102f883a 	mov	r23,r2
    8188:	10bfffc4 	addi	r2,r2,-1
    818c:	21403fcc 	andi	r5,r4,255
    8190:	2940201c 	xori	r5,r5,128
    8194:	297fe004 	addi	r5,r5,-128
    8198:	29bff726 	beq	r5,r6,8178 <__alt_mem_onchip_memory+0xf7808178>
    819c:	21000044 	addi	r4,r4,1
    81a0:	11000005 	stb	r4,0(r2)
    81a4:	a80b883a 	mov	r5,r21
    81a8:	e009883a 	mov	r4,fp
    81ac:	000ad2c0 	call	ad2c <_Bfree>
    81b0:	883ea026 	beq	r17,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    81b4:	90000426 	beq	r18,zero,81c8 <_dtoa_r+0xc3c>
    81b8:	94400326 	beq	r18,r17,81c8 <_dtoa_r+0xc3c>
    81bc:	900b883a 	mov	r5,r18
    81c0:	e009883a 	mov	r4,fp
    81c4:	000ad2c0 	call	ad2c <_Bfree>
    81c8:	880b883a 	mov	r5,r17
    81cc:	e009883a 	mov	r4,fp
    81d0:	000ad2c0 	call	ad2c <_Bfree>
    81d4:	003e9706 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    81d8:	01800044 	movi	r6,1
    81dc:	d9800e15 	stw	r6,56(sp)
    81e0:	003d9606 	br	783c <__alt_mem_onchip_memory+0xf780783c>
    81e4:	d8800817 	ldw	r2,32(sp)
    81e8:	d8c00517 	ldw	r3,20(sp)
    81ec:	d8000d15 	stw	zero,52(sp)
    81f0:	10c5c83a 	sub	r2,r2,r3
    81f4:	00c9c83a 	sub	r4,zero,r3
    81f8:	d8800815 	stw	r2,32(sp)
    81fc:	d9000a15 	stw	r4,40(sp)
    8200:	003d9706 	br	7860 <__alt_mem_onchip_memory+0xf7807860>
    8204:	05adc83a 	sub	r22,zero,r22
    8208:	dd800815 	stw	r22,32(sp)
    820c:	002d883a 	mov	r22,zero
    8210:	003d8e06 	br	784c <__alt_mem_onchip_memory+0xf780784c>
    8214:	d9000517 	ldw	r4,20(sp)
    8218:	00046880 	call	4688 <__floatsidf>
    821c:	100d883a 	mov	r6,r2
    8220:	180f883a 	mov	r7,r3
    8224:	a009883a 	mov	r4,r20
    8228:	880b883a 	mov	r5,r17
    822c:	000f0440 	call	f044 <__eqdf2>
    8230:	103d7126 	beq	r2,zero,77f8 <__alt_mem_onchip_memory+0xf78077f8>
    8234:	d9c00517 	ldw	r7,20(sp)
    8238:	39ffffc4 	addi	r7,r7,-1
    823c:	d9c00515 	stw	r7,20(sp)
    8240:	003d6d06 	br	77f8 <__alt_mem_onchip_memory+0xf78077f8>
    8244:	dd400a17 	ldw	r21,40(sp)
    8248:	dd000817 	ldw	r20,32(sp)
    824c:	0023883a 	mov	r17,zero
    8250:	003f4806 	br	7f74 <__alt_mem_onchip_memory+0xf7807f74>
    8254:	10e3c83a 	sub	r17,r2,r3
    8258:	9448983a 	sll	r4,r18,r17
    825c:	003d3206 	br	7728 <__alt_mem_onchip_memory+0xf7807728>
    8260:	d8000e15 	stw	zero,56(sp)
    8264:	003d7506 	br	783c <__alt_mem_onchip_memory+0xf780783c>
    8268:	b005883a 	mov	r2,r22
    826c:	003f4506 	br	7f84 <__alt_mem_onchip_memory+0xf7807f84>
    8270:	dc000915 	stw	r16,36(sp)
    8274:	d9800a17 	ldw	r6,40(sp)
    8278:	d9400917 	ldw	r5,36(sp)
    827c:	e009883a 	mov	r4,fp
    8280:	000b2c40 	call	b2c4 <__pow5mult>
    8284:	1021883a 	mov	r16,r2
    8288:	003f5a06 	br	7ff4 <__alt_mem_onchip_memory+0xf7807ff4>
    828c:	01c00044 	movi	r7,1
    8290:	d9c00b15 	stw	r7,44(sp)
    8294:	d8802217 	ldw	r2,136(sp)
    8298:	0081280e 	bge	zero,r2,873c <_dtoa_r+0x11b0>
    829c:	100d883a 	mov	r6,r2
    82a0:	1021883a 	mov	r16,r2
    82a4:	d8800c15 	stw	r2,48(sp)
    82a8:	d8800615 	stw	r2,24(sp)
    82ac:	003d8806 	br	78d0 <__alt_mem_onchip_memory+0xf78078d0>
    82b0:	d8800617 	ldw	r2,24(sp)
    82b4:	00be9b16 	blt	zero,r2,7d24 <__alt_mem_onchip_memory+0xf7807d24>
    82b8:	10010f1e 	bne	r2,zero,86f8 <_dtoa_r+0x116c>
    82bc:	880b883a 	mov	r5,r17
    82c0:	000d883a 	mov	r6,zero
    82c4:	01d00534 	movhi	r7,16404
    82c8:	8009883a 	mov	r4,r16
    82cc:	00035f40 	call	35f4 <__muldf3>
    82d0:	900d883a 	mov	r6,r18
    82d4:	980f883a 	mov	r7,r19
    82d8:	1009883a 	mov	r4,r2
    82dc:	180b883a 	mov	r5,r3
    82e0:	00034240 	call	3424 <__gedf2>
    82e4:	002b883a 	mov	r21,zero
    82e8:	0023883a 	mov	r17,zero
    82ec:	1000bf16 	blt	r2,zero,85ec <_dtoa_r+0x1060>
    82f0:	d9802217 	ldw	r6,136(sp)
    82f4:	ddc00717 	ldw	r23,28(sp)
    82f8:	018c303a 	nor	r6,zero,r6
    82fc:	d9800515 	stw	r6,20(sp)
    8300:	a80b883a 	mov	r5,r21
    8304:	e009883a 	mov	r4,fp
    8308:	000ad2c0 	call	ad2c <_Bfree>
    830c:	883e4926 	beq	r17,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    8310:	003fad06 	br	81c8 <__alt_mem_onchip_memory+0xf78081c8>
    8314:	d9c01117 	ldw	r7,68(sp)
    8318:	3801bc26 	beq	r7,zero,8a0c <_dtoa_r+0x1480>
    831c:	10810cc4 	addi	r2,r2,1075
    8320:	dd400a17 	ldw	r21,40(sp)
    8324:	dd000817 	ldw	r20,32(sp)
    8328:	003f0a06 	br	7f54 <__alt_mem_onchip_memory+0xf7807f54>
    832c:	00800704 	movi	r2,28
    8330:	d9000817 	ldw	r4,32(sp)
    8334:	a0a9883a 	add	r20,r20,r2
    8338:	b0ad883a 	add	r22,r22,r2
    833c:	2089883a 	add	r4,r4,r2
    8340:	d9000815 	stw	r4,32(sp)
    8344:	003f5106 	br	808c <__alt_mem_onchip_memory+0xf780808c>
    8348:	d8c00317 	ldw	r3,12(sp)
    834c:	b8c1fc0e 	bge	r23,r3,8b40 <_dtoa_r+0x15b4>
    8350:	0027883a 	mov	r19,zero
    8354:	b805883a 	mov	r2,r23
    8358:	003f3e06 	br	8054 <__alt_mem_onchip_memory+0xf7808054>
    835c:	880b883a 	mov	r5,r17
    8360:	e009883a 	mov	r4,fp
    8364:	000f883a 	mov	r7,zero
    8368:	01800284 	movi	r6,10
    836c:	000ad540 	call	ad54 <__multadd>
    8370:	d9000c17 	ldw	r4,48(sp)
    8374:	1023883a 	mov	r17,r2
    8378:	0102040e 	bge	zero,r4,8b8c <_dtoa_r+0x1600>
    837c:	d9000615 	stw	r4,24(sp)
    8380:	0500050e 	bge	zero,r20,8398 <_dtoa_r+0xe0c>
    8384:	880b883a 	mov	r5,r17
    8388:	a00d883a 	mov	r6,r20
    838c:	e009883a 	mov	r4,fp
    8390:	000b4040 	call	b404 <__lshift>
    8394:	1023883a 	mov	r17,r2
    8398:	9801241e 	bne	r19,zero,882c <_dtoa_r+0x12a0>
    839c:	8829883a 	mov	r20,r17
    83a0:	d9000617 	ldw	r4,24(sp)
    83a4:	dcc00717 	ldw	r19,28(sp)
    83a8:	9480004c 	andi	r18,r18,1
    83ac:	20bfffc4 	addi	r2,r4,-1
    83b0:	9885883a 	add	r2,r19,r2
    83b4:	d8800415 	stw	r2,16(sp)
    83b8:	dc800615 	stw	r18,24(sp)
    83bc:	a80b883a 	mov	r5,r21
    83c0:	8009883a 	mov	r4,r16
    83c4:	000738c0 	call	738c <quorem>
    83c8:	880b883a 	mov	r5,r17
    83cc:	8009883a 	mov	r4,r16
    83d0:	102f883a 	mov	r23,r2
    83d4:	000b54c0 	call	b54c <__mcmp>
    83d8:	a80b883a 	mov	r5,r21
    83dc:	a00d883a 	mov	r6,r20
    83e0:	e009883a 	mov	r4,fp
    83e4:	102d883a 	mov	r22,r2
    83e8:	000b5ac0 	call	b5ac <__mdiff>
    83ec:	1007883a 	mov	r3,r2
    83f0:	10800317 	ldw	r2,12(r2)
    83f4:	bc800c04 	addi	r18,r23,48
    83f8:	180b883a 	mov	r5,r3
    83fc:	10004e1e 	bne	r2,zero,8538 <_dtoa_r+0xfac>
    8400:	8009883a 	mov	r4,r16
    8404:	d8c01615 	stw	r3,88(sp)
    8408:	000b54c0 	call	b54c <__mcmp>
    840c:	d8c01617 	ldw	r3,88(sp)
    8410:	e009883a 	mov	r4,fp
    8414:	d8801615 	stw	r2,88(sp)
    8418:	180b883a 	mov	r5,r3
    841c:	000ad2c0 	call	ad2c <_Bfree>
    8420:	d8801617 	ldw	r2,88(sp)
    8424:	1000041e 	bne	r2,zero,8438 <_dtoa_r+0xeac>
    8428:	d9800317 	ldw	r6,12(sp)
    842c:	3000021e 	bne	r6,zero,8438 <_dtoa_r+0xeac>
    8430:	d8c00617 	ldw	r3,24(sp)
    8434:	18003726 	beq	r3,zero,8514 <_dtoa_r+0xf88>
    8438:	b0002016 	blt	r22,zero,84bc <_dtoa_r+0xf30>
    843c:	b000041e 	bne	r22,zero,8450 <_dtoa_r+0xec4>
    8440:	d9000317 	ldw	r4,12(sp)
    8444:	2000021e 	bne	r4,zero,8450 <_dtoa_r+0xec4>
    8448:	d8c00617 	ldw	r3,24(sp)
    844c:	18001b26 	beq	r3,zero,84bc <_dtoa_r+0xf30>
    8450:	00810716 	blt	zero,r2,8870 <_dtoa_r+0x12e4>
    8454:	d8c00417 	ldw	r3,16(sp)
    8458:	9d800044 	addi	r22,r19,1
    845c:	9c800005 	stb	r18,0(r19)
    8460:	b02f883a 	mov	r23,r22
    8464:	98c10626 	beq	r19,r3,8880 <_dtoa_r+0x12f4>
    8468:	800b883a 	mov	r5,r16
    846c:	000f883a 	mov	r7,zero
    8470:	01800284 	movi	r6,10
    8474:	e009883a 	mov	r4,fp
    8478:	000ad540 	call	ad54 <__multadd>
    847c:	1021883a 	mov	r16,r2
    8480:	000f883a 	mov	r7,zero
    8484:	01800284 	movi	r6,10
    8488:	880b883a 	mov	r5,r17
    848c:	e009883a 	mov	r4,fp
    8490:	8d002526 	beq	r17,r20,8528 <_dtoa_r+0xf9c>
    8494:	000ad540 	call	ad54 <__multadd>
    8498:	a00b883a 	mov	r5,r20
    849c:	000f883a 	mov	r7,zero
    84a0:	01800284 	movi	r6,10
    84a4:	e009883a 	mov	r4,fp
    84a8:	1023883a 	mov	r17,r2
    84ac:	000ad540 	call	ad54 <__multadd>
    84b0:	1029883a 	mov	r20,r2
    84b4:	b027883a 	mov	r19,r22
    84b8:	003fc006 	br	83bc <__alt_mem_onchip_memory+0xf78083bc>
    84bc:	9011883a 	mov	r8,r18
    84c0:	00800e0e 	bge	zero,r2,84fc <_dtoa_r+0xf70>
    84c4:	800b883a 	mov	r5,r16
    84c8:	01800044 	movi	r6,1
    84cc:	e009883a 	mov	r4,fp
    84d0:	da001715 	stw	r8,92(sp)
    84d4:	000b4040 	call	b404 <__lshift>
    84d8:	a80b883a 	mov	r5,r21
    84dc:	1009883a 	mov	r4,r2
    84e0:	1021883a 	mov	r16,r2
    84e4:	000b54c0 	call	b54c <__mcmp>
    84e8:	da001717 	ldw	r8,92(sp)
    84ec:	0081960e 	bge	zero,r2,8b48 <_dtoa_r+0x15bc>
    84f0:	00800e44 	movi	r2,57
    84f4:	40817026 	beq	r8,r2,8ab8 <_dtoa_r+0x152c>
    84f8:	ba000c44 	addi	r8,r23,49
    84fc:	8825883a 	mov	r18,r17
    8500:	9dc00044 	addi	r23,r19,1
    8504:	9a000005 	stb	r8,0(r19)
    8508:	a023883a 	mov	r17,r20
    850c:	dc000915 	stw	r16,36(sp)
    8510:	003f2406 	br	81a4 <__alt_mem_onchip_memory+0xf78081a4>
    8514:	00800e44 	movi	r2,57
    8518:	9011883a 	mov	r8,r18
    851c:	90816626 	beq	r18,r2,8ab8 <_dtoa_r+0x152c>
    8520:	05bff516 	blt	zero,r22,84f8 <__alt_mem_onchip_memory+0xf78084f8>
    8524:	003ff506 	br	84fc <__alt_mem_onchip_memory+0xf78084fc>
    8528:	000ad540 	call	ad54 <__multadd>
    852c:	1023883a 	mov	r17,r2
    8530:	1029883a 	mov	r20,r2
    8534:	003fdf06 	br	84b4 <__alt_mem_onchip_memory+0xf78084b4>
    8538:	e009883a 	mov	r4,fp
    853c:	000ad2c0 	call	ad2c <_Bfree>
    8540:	00800044 	movi	r2,1
    8544:	003fbc06 	br	8438 <__alt_mem_onchip_memory+0xf7808438>
    8548:	a80b883a 	mov	r5,r21
    854c:	8009883a 	mov	r4,r16
    8550:	000b54c0 	call	b54c <__mcmp>
    8554:	103edb0e 	bge	r2,zero,80c4 <__alt_mem_onchip_memory+0xf78080c4>
    8558:	800b883a 	mov	r5,r16
    855c:	000f883a 	mov	r7,zero
    8560:	01800284 	movi	r6,10
    8564:	e009883a 	mov	r4,fp
    8568:	000ad540 	call	ad54 <__multadd>
    856c:	1021883a 	mov	r16,r2
    8570:	d8800517 	ldw	r2,20(sp)
    8574:	d8c00b17 	ldw	r3,44(sp)
    8578:	10bfffc4 	addi	r2,r2,-1
    857c:	d8800515 	stw	r2,20(sp)
    8580:	183f761e 	bne	r3,zero,835c <__alt_mem_onchip_memory+0xf780835c>
    8584:	d9000c17 	ldw	r4,48(sp)
    8588:	0101730e 	bge	zero,r4,8b58 <_dtoa_r+0x15cc>
    858c:	d9000615 	stw	r4,24(sp)
    8590:	003ed006 	br	80d4 <__alt_mem_onchip_memory+0xf78080d4>
    8594:	00800084 	movi	r2,2
    8598:	3081861e 	bne	r6,r2,8bb4 <_dtoa_r+0x1628>
    859c:	d8000b15 	stw	zero,44(sp)
    85a0:	003f3c06 	br	8294 <__alt_mem_onchip_memory+0xf7808294>
    85a4:	dc000917 	ldw	r16,36(sp)
    85a8:	003e9206 	br	7ff4 <__alt_mem_onchip_memory+0xf7807ff4>
    85ac:	d9c00317 	ldw	r7,12(sp)
    85b0:	00800084 	movi	r2,2
    85b4:	11fec50e 	bge	r2,r7,80cc <__alt_mem_onchip_memory+0xf78080cc>
    85b8:	d9000617 	ldw	r4,24(sp)
    85bc:	20013c1e 	bne	r4,zero,8ab0 <_dtoa_r+0x1524>
    85c0:	a80b883a 	mov	r5,r21
    85c4:	000f883a 	mov	r7,zero
    85c8:	01800144 	movi	r6,5
    85cc:	e009883a 	mov	r4,fp
    85d0:	000ad540 	call	ad54 <__multadd>
    85d4:	100b883a 	mov	r5,r2
    85d8:	8009883a 	mov	r4,r16
    85dc:	102b883a 	mov	r21,r2
    85e0:	000b54c0 	call	b54c <__mcmp>
    85e4:	dc000915 	stw	r16,36(sp)
    85e8:	00bf410e 	bge	zero,r2,82f0 <__alt_mem_onchip_memory+0xf78082f0>
    85ec:	d9c00717 	ldw	r7,28(sp)
    85f0:	00800c44 	movi	r2,49
    85f4:	38800005 	stb	r2,0(r7)
    85f8:	d8800517 	ldw	r2,20(sp)
    85fc:	3dc00044 	addi	r23,r7,1
    8600:	10800044 	addi	r2,r2,1
    8604:	d8800515 	stw	r2,20(sp)
    8608:	003f3d06 	br	8300 <__alt_mem_onchip_memory+0xf7808300>
    860c:	d9800517 	ldw	r6,20(sp)
    8610:	d9c00717 	ldw	r7,28(sp)
    8614:	00800c44 	movi	r2,49
    8618:	31800044 	addi	r6,r6,1
    861c:	d9800515 	stw	r6,20(sp)
    8620:	38800005 	stb	r2,0(r7)
    8624:	003edf06 	br	81a4 <__alt_mem_onchip_memory+0xf78081a4>
    8628:	d8000b15 	stw	zero,44(sp)
    862c:	003c9f06 	br	78ac <__alt_mem_onchip_memory+0xf78078ac>
    8630:	903e7e1e 	bne	r18,zero,802c <__alt_mem_onchip_memory+0xf780802c>
    8634:	00800434 	movhi	r2,16
    8638:	10bfffc4 	addi	r2,r2,-1
    863c:	9884703a 	and	r2,r19,r2
    8640:	1000ea1e 	bne	r2,zero,89ec <_dtoa_r+0x1460>
    8644:	9cdffc2c 	andhi	r19,r19,32752
    8648:	9800e826 	beq	r19,zero,89ec <_dtoa_r+0x1460>
    864c:	d9c00817 	ldw	r7,32(sp)
    8650:	b5800044 	addi	r22,r22,1
    8654:	04c00044 	movi	r19,1
    8658:	39c00044 	addi	r7,r7,1
    865c:	d9c00815 	stw	r7,32(sp)
    8660:	d8800d17 	ldw	r2,52(sp)
    8664:	103e721e 	bne	r2,zero,8030 <__alt_mem_onchip_memory+0xf7808030>
    8668:	00800044 	movi	r2,1
    866c:	003e7906 	br	8054 <__alt_mem_onchip_memory+0xf7808054>
    8670:	8009883a 	mov	r4,r16
    8674:	00046880 	call	4688 <__floatsidf>
    8678:	d9800f17 	ldw	r6,60(sp)
    867c:	d9c01017 	ldw	r7,64(sp)
    8680:	1009883a 	mov	r4,r2
    8684:	180b883a 	mov	r5,r3
    8688:	00035f40 	call	35f4 <__muldf3>
    868c:	000d883a 	mov	r6,zero
    8690:	01d00734 	movhi	r7,16412
    8694:	1009883a 	mov	r4,r2
    8698:	180b883a 	mov	r5,r3
    869c:	00022900 	call	2290 <__adddf3>
    86a0:	047f3034 	movhi	r17,64704
    86a4:	1021883a 	mov	r16,r2
    86a8:	1c63883a 	add	r17,r3,r17
    86ac:	d9000f17 	ldw	r4,60(sp)
    86b0:	d9401017 	ldw	r5,64(sp)
    86b4:	000d883a 	mov	r6,zero
    86b8:	01d00534 	movhi	r7,16404
    86bc:	0003d0c0 	call	3d0c <__subdf3>
    86c0:	800d883a 	mov	r6,r16
    86c4:	880f883a 	mov	r7,r17
    86c8:	1009883a 	mov	r4,r2
    86cc:	180b883a 	mov	r5,r3
    86d0:	102b883a 	mov	r21,r2
    86d4:	1829883a 	mov	r20,r3
    86d8:	00034240 	call	3424 <__gedf2>
    86dc:	00806c16 	blt	zero,r2,8890 <_dtoa_r+0x1304>
    86e0:	89e0003c 	xorhi	r7,r17,32768
    86e4:	800d883a 	mov	r6,r16
    86e8:	a809883a 	mov	r4,r21
    86ec:	a00b883a 	mov	r5,r20
    86f0:	00035000 	call	3500 <__ledf2>
    86f4:	103d7e0e 	bge	r2,zero,7cf0 <__alt_mem_onchip_memory+0xf7807cf0>
    86f8:	002b883a 	mov	r21,zero
    86fc:	0023883a 	mov	r17,zero
    8700:	003efb06 	br	82f0 <__alt_mem_onchip_memory+0xf78082f0>
    8704:	d8800717 	ldw	r2,28(sp)
    8708:	003bd006 	br	764c <__alt_mem_onchip_memory+0xf780764c>
    870c:	d9000a17 	ldw	r4,40(sp)
    8710:	d9800d17 	ldw	r6,52(sp)
    8714:	dd400a15 	stw	r21,40(sp)
    8718:	a905c83a 	sub	r2,r21,r4
    871c:	308d883a 	add	r6,r6,r2
    8720:	d9800d15 	stw	r6,52(sp)
    8724:	002b883a 	mov	r21,zero
    8728:	003e0606 	br	7f44 <__alt_mem_onchip_memory+0xf7807f44>
    872c:	9023883a 	mov	r17,r18
    8730:	9829883a 	mov	r20,r19
    8734:	04000084 	movi	r16,2
    8738:	003c9206 	br	7984 <__alt_mem_onchip_memory+0xf7807984>
    873c:	04000044 	movi	r16,1
    8740:	dc000c15 	stw	r16,48(sp)
    8744:	dc000615 	stw	r16,24(sp)
    8748:	dc002215 	stw	r16,136(sp)
    874c:	e0001115 	stw	zero,68(fp)
    8750:	000b883a 	mov	r5,zero
    8754:	003c6906 	br	78fc <__alt_mem_onchip_memory+0xf78078fc>
    8758:	3021883a 	mov	r16,r6
    875c:	003ffb06 	br	874c <__alt_mem_onchip_memory+0xf780874c>
    8760:	1000021e 	bne	r2,zero,876c <_dtoa_r+0x11e0>
    8764:	4200004c 	andi	r8,r8,1
    8768:	403e7d1e 	bne	r8,zero,8160 <__alt_mem_onchip_memory+0xf7808160>
    876c:	01000c04 	movi	r4,48
    8770:	00000106 	br	8778 <_dtoa_r+0x11ec>
    8774:	102f883a 	mov	r23,r2
    8778:	b8bfffc4 	addi	r2,r23,-1
    877c:	10c00007 	ldb	r3,0(r2)
    8780:	193ffc26 	beq	r3,r4,8774 <__alt_mem_onchip_memory+0xf7808774>
    8784:	003e8706 	br	81a4 <__alt_mem_onchip_memory+0xf78081a4>
    8788:	d8800517 	ldw	r2,20(sp)
    878c:	00a3c83a 	sub	r17,zero,r2
    8790:	8800a426 	beq	r17,zero,8a24 <_dtoa_r+0x1498>
    8794:	888003cc 	andi	r2,r17,15
    8798:	100490fa 	slli	r2,r2,3
    879c:	00c00074 	movhi	r3,1
    87a0:	18c89204 	addi	r3,r3,8776
    87a4:	1885883a 	add	r2,r3,r2
    87a8:	11800017 	ldw	r6,0(r2)
    87ac:	11c00117 	ldw	r7,4(r2)
    87b0:	9009883a 	mov	r4,r18
    87b4:	980b883a 	mov	r5,r19
    87b8:	8823d13a 	srai	r17,r17,4
    87bc:	00035f40 	call	35f4 <__muldf3>
    87c0:	d8800f15 	stw	r2,60(sp)
    87c4:	d8c01015 	stw	r3,64(sp)
    87c8:	8800e826 	beq	r17,zero,8b6c <_dtoa_r+0x15e0>
    87cc:	05000074 	movhi	r20,1
    87d0:	a5088804 	addi	r20,r20,8736
    87d4:	04000084 	movi	r16,2
    87d8:	8980004c 	andi	r6,r17,1
    87dc:	1009883a 	mov	r4,r2
    87e0:	8823d07a 	srai	r17,r17,1
    87e4:	180b883a 	mov	r5,r3
    87e8:	30000426 	beq	r6,zero,87fc <_dtoa_r+0x1270>
    87ec:	a1800017 	ldw	r6,0(r20)
    87f0:	a1c00117 	ldw	r7,4(r20)
    87f4:	84000044 	addi	r16,r16,1
    87f8:	00035f40 	call	35f4 <__muldf3>
    87fc:	a5000204 	addi	r20,r20,8
    8800:	883ff51e 	bne	r17,zero,87d8 <__alt_mem_onchip_memory+0xf78087d8>
    8804:	d8800f15 	stw	r2,60(sp)
    8808:	d8c01015 	stw	r3,64(sp)
    880c:	003c7606 	br	79e8 <__alt_mem_onchip_memory+0xf78079e8>
    8810:	00c00c04 	movi	r3,48
    8814:	10c00005 	stb	r3,0(r2)
    8818:	d8c00517 	ldw	r3,20(sp)
    881c:	bd3fffc3 	ldbu	r20,-1(r23)
    8820:	18c00044 	addi	r3,r3,1
    8824:	d8c00515 	stw	r3,20(sp)
    8828:	003db906 	br	7f10 <__alt_mem_onchip_memory+0xf7807f10>
    882c:	89400117 	ldw	r5,4(r17)
    8830:	e009883a 	mov	r4,fp
    8834:	000ac840 	call	ac84 <_Balloc>
    8838:	89800417 	ldw	r6,16(r17)
    883c:	89400304 	addi	r5,r17,12
    8840:	11000304 	addi	r4,r2,12
    8844:	31800084 	addi	r6,r6,2
    8848:	318d883a 	add	r6,r6,r6
    884c:	318d883a 	add	r6,r6,r6
    8850:	1027883a 	mov	r19,r2
    8854:	000a8b80 	call	a8b8 <memcpy>
    8858:	01800044 	movi	r6,1
    885c:	980b883a 	mov	r5,r19
    8860:	e009883a 	mov	r4,fp
    8864:	000b4040 	call	b404 <__lshift>
    8868:	1029883a 	mov	r20,r2
    886c:	003ecc06 	br	83a0 <__alt_mem_onchip_memory+0xf78083a0>
    8870:	00800e44 	movi	r2,57
    8874:	90809026 	beq	r18,r2,8ab8 <_dtoa_r+0x152c>
    8878:	92000044 	addi	r8,r18,1
    887c:	003f1f06 	br	84fc <__alt_mem_onchip_memory+0xf78084fc>
    8880:	9011883a 	mov	r8,r18
    8884:	8825883a 	mov	r18,r17
    8888:	a023883a 	mov	r17,r20
    888c:	003e2906 	br	8134 <__alt_mem_onchip_memory+0xf7808134>
    8890:	002b883a 	mov	r21,zero
    8894:	0023883a 	mov	r17,zero
    8898:	003f5406 	br	85ec <__alt_mem_onchip_memory+0xf78085ec>
    889c:	61bfffc4 	addi	r6,r12,-1
    88a0:	300490fa 	slli	r2,r6,3
    88a4:	00c00074 	movhi	r3,1
    88a8:	18c89204 	addi	r3,r3,8776
    88ac:	1885883a 	add	r2,r3,r2
    88b0:	11000017 	ldw	r4,0(r2)
    88b4:	11400117 	ldw	r5,4(r2)
    88b8:	d8800717 	ldw	r2,28(sp)
    88bc:	880f883a 	mov	r7,r17
    88c0:	d9801215 	stw	r6,72(sp)
    88c4:	800d883a 	mov	r6,r16
    88c8:	db001615 	stw	r12,88(sp)
    88cc:	15c00044 	addi	r23,r2,1
    88d0:	00035f40 	call	35f4 <__muldf3>
    88d4:	d9401017 	ldw	r5,64(sp)
    88d8:	d9000f17 	ldw	r4,60(sp)
    88dc:	d8c01515 	stw	r3,84(sp)
    88e0:	d8801415 	stw	r2,80(sp)
    88e4:	00046080 	call	4608 <__fixdfsi>
    88e8:	1009883a 	mov	r4,r2
    88ec:	1021883a 	mov	r16,r2
    88f0:	00046880 	call	4688 <__floatsidf>
    88f4:	d9000f17 	ldw	r4,60(sp)
    88f8:	d9401017 	ldw	r5,64(sp)
    88fc:	100d883a 	mov	r6,r2
    8900:	180f883a 	mov	r7,r3
    8904:	0003d0c0 	call	3d0c <__subdf3>
    8908:	1829883a 	mov	r20,r3
    890c:	d8c00717 	ldw	r3,28(sp)
    8910:	84000c04 	addi	r16,r16,48
    8914:	1023883a 	mov	r17,r2
    8918:	1c000005 	stb	r16,0(r3)
    891c:	db001617 	ldw	r12,88(sp)
    8920:	00800044 	movi	r2,1
    8924:	60802226 	beq	r12,r2,89b0 <_dtoa_r+0x1424>
    8928:	d9c00717 	ldw	r7,28(sp)
    892c:	8805883a 	mov	r2,r17
    8930:	b82b883a 	mov	r21,r23
    8934:	3b19883a 	add	r12,r7,r12
    8938:	6023883a 	mov	r17,r12
    893c:	a007883a 	mov	r3,r20
    8940:	dc800f15 	stw	r18,60(sp)
    8944:	000d883a 	mov	r6,zero
    8948:	01d00934 	movhi	r7,16420
    894c:	1009883a 	mov	r4,r2
    8950:	180b883a 	mov	r5,r3
    8954:	00035f40 	call	35f4 <__muldf3>
    8958:	180b883a 	mov	r5,r3
    895c:	1009883a 	mov	r4,r2
    8960:	1829883a 	mov	r20,r3
    8964:	1025883a 	mov	r18,r2
    8968:	00046080 	call	4608 <__fixdfsi>
    896c:	1009883a 	mov	r4,r2
    8970:	1021883a 	mov	r16,r2
    8974:	00046880 	call	4688 <__floatsidf>
    8978:	100d883a 	mov	r6,r2
    897c:	180f883a 	mov	r7,r3
    8980:	9009883a 	mov	r4,r18
    8984:	a00b883a 	mov	r5,r20
    8988:	84000c04 	addi	r16,r16,48
    898c:	0003d0c0 	call	3d0c <__subdf3>
    8990:	ad400044 	addi	r21,r21,1
    8994:	ac3fffc5 	stb	r16,-1(r21)
    8998:	ac7fea1e 	bne	r21,r17,8944 <__alt_mem_onchip_memory+0xf7808944>
    899c:	1023883a 	mov	r17,r2
    89a0:	d8801217 	ldw	r2,72(sp)
    89a4:	dc800f17 	ldw	r18,60(sp)
    89a8:	1829883a 	mov	r20,r3
    89ac:	b8af883a 	add	r23,r23,r2
    89b0:	d9001417 	ldw	r4,80(sp)
    89b4:	d9401517 	ldw	r5,84(sp)
    89b8:	000d883a 	mov	r6,zero
    89bc:	01cff834 	movhi	r7,16352
    89c0:	00022900 	call	2290 <__adddf3>
    89c4:	880d883a 	mov	r6,r17
    89c8:	a00f883a 	mov	r7,r20
    89cc:	1009883a 	mov	r4,r2
    89d0:	180b883a 	mov	r5,r3
    89d4:	00035000 	call	3500 <__ledf2>
    89d8:	10003e0e 	bge	r2,zero,8ad4 <_dtoa_r+0x1548>
    89dc:	d9001317 	ldw	r4,76(sp)
    89e0:	bd3fffc3 	ldbu	r20,-1(r23)
    89e4:	d9000515 	stw	r4,20(sp)
    89e8:	003d3b06 	br	7ed8 <__alt_mem_onchip_memory+0xf7807ed8>
    89ec:	0027883a 	mov	r19,zero
    89f0:	003f1b06 	br	8660 <__alt_mem_onchip_memory+0xf7808660>
    89f4:	d8800817 	ldw	r2,32(sp)
    89f8:	11e9c83a 	sub	r20,r2,r7
    89fc:	0005883a 	mov	r2,zero
    8a00:	003d5406 	br	7f54 <__alt_mem_onchip_memory+0xf7807f54>
    8a04:	00800044 	movi	r2,1
    8a08:	003dc706 	br	8128 <__alt_mem_onchip_memory+0xf7808128>
    8a0c:	d8c00217 	ldw	r3,8(sp)
    8a10:	00800d84 	movi	r2,54
    8a14:	dd400a17 	ldw	r21,40(sp)
    8a18:	10c5c83a 	sub	r2,r2,r3
    8a1c:	dd000817 	ldw	r20,32(sp)
    8a20:	003d4c06 	br	7f54 <__alt_mem_onchip_memory+0xf7807f54>
    8a24:	dc800f15 	stw	r18,60(sp)
    8a28:	dcc01015 	stw	r19,64(sp)
    8a2c:	04000084 	movi	r16,2
    8a30:	003bed06 	br	79e8 <__alt_mem_onchip_memory+0xf78079e8>
    8a34:	d9000617 	ldw	r4,24(sp)
    8a38:	203f0d26 	beq	r4,zero,8670 <__alt_mem_onchip_memory+0xf7808670>
    8a3c:	d9800c17 	ldw	r6,48(sp)
    8a40:	01bcab0e 	bge	zero,r6,7cf0 <__alt_mem_onchip_memory+0xf7807cf0>
    8a44:	d9401017 	ldw	r5,64(sp)
    8a48:	d9000f17 	ldw	r4,60(sp)
    8a4c:	000d883a 	mov	r6,zero
    8a50:	01d00934 	movhi	r7,16420
    8a54:	00035f40 	call	35f4 <__muldf3>
    8a58:	81000044 	addi	r4,r16,1
    8a5c:	d8800f15 	stw	r2,60(sp)
    8a60:	d8c01015 	stw	r3,64(sp)
    8a64:	00046880 	call	4688 <__floatsidf>
    8a68:	d9800f17 	ldw	r6,60(sp)
    8a6c:	d9c01017 	ldw	r7,64(sp)
    8a70:	1009883a 	mov	r4,r2
    8a74:	180b883a 	mov	r5,r3
    8a78:	00035f40 	call	35f4 <__muldf3>
    8a7c:	01d00734 	movhi	r7,16412
    8a80:	000d883a 	mov	r6,zero
    8a84:	1009883a 	mov	r4,r2
    8a88:	180b883a 	mov	r5,r3
    8a8c:	00022900 	call	2290 <__adddf3>
    8a90:	d9c00517 	ldw	r7,20(sp)
    8a94:	047f3034 	movhi	r17,64704
    8a98:	1021883a 	mov	r16,r2
    8a9c:	39ffffc4 	addi	r7,r7,-1
    8aa0:	d9c01315 	stw	r7,76(sp)
    8aa4:	1c63883a 	add	r17,r3,r17
    8aa8:	db000c17 	ldw	r12,48(sp)
    8aac:	003bea06 	br	7a58 <__alt_mem_onchip_memory+0xf7807a58>
    8ab0:	dc000915 	stw	r16,36(sp)
    8ab4:	003e0e06 	br	82f0 <__alt_mem_onchip_memory+0xf78082f0>
    8ab8:	01000e44 	movi	r4,57
    8abc:	8825883a 	mov	r18,r17
    8ac0:	9dc00044 	addi	r23,r19,1
    8ac4:	99000005 	stb	r4,0(r19)
    8ac8:	a023883a 	mov	r17,r20
    8acc:	dc000915 	stw	r16,36(sp)
    8ad0:	003da406 	br	8164 <__alt_mem_onchip_memory+0xf7808164>
    8ad4:	d9801417 	ldw	r6,80(sp)
    8ad8:	d9c01517 	ldw	r7,84(sp)
    8adc:	0009883a 	mov	r4,zero
    8ae0:	014ff834 	movhi	r5,16352
    8ae4:	0003d0c0 	call	3d0c <__subdf3>
    8ae8:	880d883a 	mov	r6,r17
    8aec:	a00f883a 	mov	r7,r20
    8af0:	1009883a 	mov	r4,r2
    8af4:	180b883a 	mov	r5,r3
    8af8:	00034240 	call	3424 <__gedf2>
    8afc:	00bc7c0e 	bge	zero,r2,7cf0 <__alt_mem_onchip_memory+0xf7807cf0>
    8b00:	01000c04 	movi	r4,48
    8b04:	00000106 	br	8b0c <_dtoa_r+0x1580>
    8b08:	102f883a 	mov	r23,r2
    8b0c:	b8bfffc4 	addi	r2,r23,-1
    8b10:	10c00007 	ldb	r3,0(r2)
    8b14:	193ffc26 	beq	r3,r4,8b08 <__alt_mem_onchip_memory+0xf7808b08>
    8b18:	d9801317 	ldw	r6,76(sp)
    8b1c:	d9800515 	stw	r6,20(sp)
    8b20:	003c4406 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    8b24:	d9801317 	ldw	r6,76(sp)
    8b28:	d9800515 	stw	r6,20(sp)
    8b2c:	003cea06 	br	7ed8 <__alt_mem_onchip_memory+0xf7807ed8>
    8b30:	dd800f17 	ldw	r22,60(sp)
    8b34:	dcc01017 	ldw	r19,64(sp)
    8b38:	dc801217 	ldw	r18,72(sp)
    8b3c:	003c6c06 	br	7cf0 <__alt_mem_onchip_memory+0xf7807cf0>
    8b40:	903e031e 	bne	r18,zero,8350 <__alt_mem_onchip_memory+0xf7808350>
    8b44:	003ebb06 	br	8634 <__alt_mem_onchip_memory+0xf7808634>
    8b48:	103e6c1e 	bne	r2,zero,84fc <__alt_mem_onchip_memory+0xf78084fc>
    8b4c:	4080004c 	andi	r2,r8,1
    8b50:	103e6a26 	beq	r2,zero,84fc <__alt_mem_onchip_memory+0xf78084fc>
    8b54:	003e6606 	br	84f0 <__alt_mem_onchip_memory+0xf78084f0>
    8b58:	d8c00317 	ldw	r3,12(sp)
    8b5c:	00800084 	movi	r2,2
    8b60:	10c02916 	blt	r2,r3,8c08 <_dtoa_r+0x167c>
    8b64:	d9000c17 	ldw	r4,48(sp)
    8b68:	003e8806 	br	858c <__alt_mem_onchip_memory+0xf780858c>
    8b6c:	04000084 	movi	r16,2
    8b70:	003b9d06 	br	79e8 <__alt_mem_onchip_memory+0xf78079e8>
    8b74:	d9001317 	ldw	r4,76(sp)
    8b78:	d9000515 	stw	r4,20(sp)
    8b7c:	003cd606 	br	7ed8 <__alt_mem_onchip_memory+0xf7807ed8>
    8b80:	d8801317 	ldw	r2,76(sp)
    8b84:	d8800515 	stw	r2,20(sp)
    8b88:	003c2a06 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    8b8c:	d9800317 	ldw	r6,12(sp)
    8b90:	00800084 	movi	r2,2
    8b94:	11801516 	blt	r2,r6,8bec <_dtoa_r+0x1660>
    8b98:	d9c00c17 	ldw	r7,48(sp)
    8b9c:	d9c00615 	stw	r7,24(sp)
    8ba0:	003df706 	br	8380 <__alt_mem_onchip_memory+0xf7808380>
    8ba4:	193d3926 	beq	r3,r4,808c <__alt_mem_onchip_memory+0xf780808c>
    8ba8:	00c00f04 	movi	r3,60
    8bac:	1885c83a 	sub	r2,r3,r2
    8bb0:	003ddf06 	br	8330 <__alt_mem_onchip_memory+0xf7808330>
    8bb4:	e009883a 	mov	r4,fp
    8bb8:	e0001115 	stw	zero,68(fp)
    8bbc:	000b883a 	mov	r5,zero
    8bc0:	000ac840 	call	ac84 <_Balloc>
    8bc4:	d8800715 	stw	r2,28(sp)
    8bc8:	d8c00717 	ldw	r3,28(sp)
    8bcc:	00bfffc4 	movi	r2,-1
    8bd0:	01000044 	movi	r4,1
    8bd4:	d8800c15 	stw	r2,48(sp)
    8bd8:	e0c01015 	stw	r3,64(fp)
    8bdc:	d9000b15 	stw	r4,44(sp)
    8be0:	d8800615 	stw	r2,24(sp)
    8be4:	d8002215 	stw	zero,136(sp)
    8be8:	003c4106 	br	7cf0 <__alt_mem_onchip_memory+0xf7807cf0>
    8bec:	d8c00c17 	ldw	r3,48(sp)
    8bf0:	d8c00615 	stw	r3,24(sp)
    8bf4:	003e7006 	br	85b8 <__alt_mem_onchip_memory+0xf78085b8>
    8bf8:	04400044 	movi	r17,1
    8bfc:	003b2006 	br	7880 <__alt_mem_onchip_memory+0xf7807880>
    8c00:	000b883a 	mov	r5,zero
    8c04:	003b3d06 	br	78fc <__alt_mem_onchip_memory+0xf78078fc>
    8c08:	d8800c17 	ldw	r2,48(sp)
    8c0c:	d8800615 	stw	r2,24(sp)
    8c10:	003e6906 	br	85b8 <__alt_mem_onchip_memory+0xf78085b8>

00008c14 <__sflush_r>:
    8c14:	2880030b 	ldhu	r2,12(r5)
    8c18:	defffb04 	addi	sp,sp,-20
    8c1c:	dcc00315 	stw	r19,12(sp)
    8c20:	dc400115 	stw	r17,4(sp)
    8c24:	dfc00415 	stw	ra,16(sp)
    8c28:	dc800215 	stw	r18,8(sp)
    8c2c:	dc000015 	stw	r16,0(sp)
    8c30:	10c0020c 	andi	r3,r2,8
    8c34:	2823883a 	mov	r17,r5
    8c38:	2027883a 	mov	r19,r4
    8c3c:	1800311e 	bne	r3,zero,8d04 <__sflush_r+0xf0>
    8c40:	28c00117 	ldw	r3,4(r5)
    8c44:	10820014 	ori	r2,r2,2048
    8c48:	2880030d 	sth	r2,12(r5)
    8c4c:	00c04b0e 	bge	zero,r3,8d7c <__sflush_r+0x168>
    8c50:	8a000a17 	ldw	r8,40(r17)
    8c54:	40002326 	beq	r8,zero,8ce4 <__sflush_r+0xd0>
    8c58:	9c000017 	ldw	r16,0(r19)
    8c5c:	10c4000c 	andi	r3,r2,4096
    8c60:	98000015 	stw	zero,0(r19)
    8c64:	18004826 	beq	r3,zero,8d88 <__sflush_r+0x174>
    8c68:	89801417 	ldw	r6,80(r17)
    8c6c:	10c0010c 	andi	r3,r2,4
    8c70:	18000626 	beq	r3,zero,8c8c <__sflush_r+0x78>
    8c74:	88c00117 	ldw	r3,4(r17)
    8c78:	88800c17 	ldw	r2,48(r17)
    8c7c:	30cdc83a 	sub	r6,r6,r3
    8c80:	10000226 	beq	r2,zero,8c8c <__sflush_r+0x78>
    8c84:	88800f17 	ldw	r2,60(r17)
    8c88:	308dc83a 	sub	r6,r6,r2
    8c8c:	89400717 	ldw	r5,28(r17)
    8c90:	000f883a 	mov	r7,zero
    8c94:	9809883a 	mov	r4,r19
    8c98:	403ee83a 	callr	r8
    8c9c:	00ffffc4 	movi	r3,-1
    8ca0:	10c04426 	beq	r2,r3,8db4 <__sflush_r+0x1a0>
    8ca4:	88c0030b 	ldhu	r3,12(r17)
    8ca8:	89000417 	ldw	r4,16(r17)
    8cac:	88000115 	stw	zero,4(r17)
    8cb0:	197dffcc 	andi	r5,r3,63487
    8cb4:	8940030d 	sth	r5,12(r17)
    8cb8:	89000015 	stw	r4,0(r17)
    8cbc:	18c4000c 	andi	r3,r3,4096
    8cc0:	18002c1e 	bne	r3,zero,8d74 <__sflush_r+0x160>
    8cc4:	89400c17 	ldw	r5,48(r17)
    8cc8:	9c000015 	stw	r16,0(r19)
    8ccc:	28000526 	beq	r5,zero,8ce4 <__sflush_r+0xd0>
    8cd0:	88801004 	addi	r2,r17,64
    8cd4:	28800226 	beq	r5,r2,8ce0 <__sflush_r+0xcc>
    8cd8:	9809883a 	mov	r4,r19
    8cdc:	00093800 	call	9380 <_free_r>
    8ce0:	88000c15 	stw	zero,48(r17)
    8ce4:	0005883a 	mov	r2,zero
    8ce8:	dfc00417 	ldw	ra,16(sp)
    8cec:	dcc00317 	ldw	r19,12(sp)
    8cf0:	dc800217 	ldw	r18,8(sp)
    8cf4:	dc400117 	ldw	r17,4(sp)
    8cf8:	dc000017 	ldw	r16,0(sp)
    8cfc:	dec00504 	addi	sp,sp,20
    8d00:	f800283a 	ret
    8d04:	2c800417 	ldw	r18,16(r5)
    8d08:	903ff626 	beq	r18,zero,8ce4 <__alt_mem_onchip_memory+0xf7808ce4>
    8d0c:	2c000017 	ldw	r16,0(r5)
    8d10:	108000cc 	andi	r2,r2,3
    8d14:	2c800015 	stw	r18,0(r5)
    8d18:	84a1c83a 	sub	r16,r16,r18
    8d1c:	1000131e 	bne	r2,zero,8d6c <__sflush_r+0x158>
    8d20:	28800517 	ldw	r2,20(r5)
    8d24:	88800215 	stw	r2,8(r17)
    8d28:	04000316 	blt	zero,r16,8d38 <__sflush_r+0x124>
    8d2c:	003fed06 	br	8ce4 <__alt_mem_onchip_memory+0xf7808ce4>
    8d30:	90a5883a 	add	r18,r18,r2
    8d34:	043feb0e 	bge	zero,r16,8ce4 <__alt_mem_onchip_memory+0xf7808ce4>
    8d38:	88800917 	ldw	r2,36(r17)
    8d3c:	89400717 	ldw	r5,28(r17)
    8d40:	800f883a 	mov	r7,r16
    8d44:	900d883a 	mov	r6,r18
    8d48:	9809883a 	mov	r4,r19
    8d4c:	103ee83a 	callr	r2
    8d50:	80a1c83a 	sub	r16,r16,r2
    8d54:	00bff616 	blt	zero,r2,8d30 <__alt_mem_onchip_memory+0xf7808d30>
    8d58:	88c0030b 	ldhu	r3,12(r17)
    8d5c:	00bfffc4 	movi	r2,-1
    8d60:	18c01014 	ori	r3,r3,64
    8d64:	88c0030d 	sth	r3,12(r17)
    8d68:	003fdf06 	br	8ce8 <__alt_mem_onchip_memory+0xf7808ce8>
    8d6c:	0005883a 	mov	r2,zero
    8d70:	003fec06 	br	8d24 <__alt_mem_onchip_memory+0xf7808d24>
    8d74:	88801415 	stw	r2,80(r17)
    8d78:	003fd206 	br	8cc4 <__alt_mem_onchip_memory+0xf7808cc4>
    8d7c:	28c00f17 	ldw	r3,60(r5)
    8d80:	00ffb316 	blt	zero,r3,8c50 <__alt_mem_onchip_memory+0xf7808c50>
    8d84:	003fd706 	br	8ce4 <__alt_mem_onchip_memory+0xf7808ce4>
    8d88:	89400717 	ldw	r5,28(r17)
    8d8c:	000d883a 	mov	r6,zero
    8d90:	01c00044 	movi	r7,1
    8d94:	9809883a 	mov	r4,r19
    8d98:	403ee83a 	callr	r8
    8d9c:	100d883a 	mov	r6,r2
    8da0:	00bfffc4 	movi	r2,-1
    8da4:	30801426 	beq	r6,r2,8df8 <__sflush_r+0x1e4>
    8da8:	8880030b 	ldhu	r2,12(r17)
    8dac:	8a000a17 	ldw	r8,40(r17)
    8db0:	003fae06 	br	8c6c <__alt_mem_onchip_memory+0xf7808c6c>
    8db4:	98c00017 	ldw	r3,0(r19)
    8db8:	183fba26 	beq	r3,zero,8ca4 <__alt_mem_onchip_memory+0xf7808ca4>
    8dbc:	01000744 	movi	r4,29
    8dc0:	19000626 	beq	r3,r4,8ddc <__sflush_r+0x1c8>
    8dc4:	01000584 	movi	r4,22
    8dc8:	19000426 	beq	r3,r4,8ddc <__sflush_r+0x1c8>
    8dcc:	88c0030b 	ldhu	r3,12(r17)
    8dd0:	18c01014 	ori	r3,r3,64
    8dd4:	88c0030d 	sth	r3,12(r17)
    8dd8:	003fc306 	br	8ce8 <__alt_mem_onchip_memory+0xf7808ce8>
    8ddc:	8880030b 	ldhu	r2,12(r17)
    8de0:	88c00417 	ldw	r3,16(r17)
    8de4:	88000115 	stw	zero,4(r17)
    8de8:	10bdffcc 	andi	r2,r2,63487
    8dec:	8880030d 	sth	r2,12(r17)
    8df0:	88c00015 	stw	r3,0(r17)
    8df4:	003fb306 	br	8cc4 <__alt_mem_onchip_memory+0xf7808cc4>
    8df8:	98800017 	ldw	r2,0(r19)
    8dfc:	103fea26 	beq	r2,zero,8da8 <__alt_mem_onchip_memory+0xf7808da8>
    8e00:	00c00744 	movi	r3,29
    8e04:	10c00226 	beq	r2,r3,8e10 <__sflush_r+0x1fc>
    8e08:	00c00584 	movi	r3,22
    8e0c:	10c0031e 	bne	r2,r3,8e1c <__sflush_r+0x208>
    8e10:	9c000015 	stw	r16,0(r19)
    8e14:	0005883a 	mov	r2,zero
    8e18:	003fb306 	br	8ce8 <__alt_mem_onchip_memory+0xf7808ce8>
    8e1c:	88c0030b 	ldhu	r3,12(r17)
    8e20:	3005883a 	mov	r2,r6
    8e24:	18c01014 	ori	r3,r3,64
    8e28:	88c0030d 	sth	r3,12(r17)
    8e2c:	003fae06 	br	8ce8 <__alt_mem_onchip_memory+0xf7808ce8>

00008e30 <_fflush_r>:
    8e30:	defffd04 	addi	sp,sp,-12
    8e34:	dc000115 	stw	r16,4(sp)
    8e38:	dfc00215 	stw	ra,8(sp)
    8e3c:	2021883a 	mov	r16,r4
    8e40:	20000226 	beq	r4,zero,8e4c <_fflush_r+0x1c>
    8e44:	20800e17 	ldw	r2,56(r4)
    8e48:	10000c26 	beq	r2,zero,8e7c <_fflush_r+0x4c>
    8e4c:	2880030f 	ldh	r2,12(r5)
    8e50:	1000051e 	bne	r2,zero,8e68 <_fflush_r+0x38>
    8e54:	0005883a 	mov	r2,zero
    8e58:	dfc00217 	ldw	ra,8(sp)
    8e5c:	dc000117 	ldw	r16,4(sp)
    8e60:	dec00304 	addi	sp,sp,12
    8e64:	f800283a 	ret
    8e68:	8009883a 	mov	r4,r16
    8e6c:	dfc00217 	ldw	ra,8(sp)
    8e70:	dc000117 	ldw	r16,4(sp)
    8e74:	dec00304 	addi	sp,sp,12
    8e78:	0008c141 	jmpi	8c14 <__sflush_r>
    8e7c:	d9400015 	stw	r5,0(sp)
    8e80:	000920c0 	call	920c <__sinit>
    8e84:	d9400017 	ldw	r5,0(sp)
    8e88:	003ff006 	br	8e4c <__alt_mem_onchip_memory+0xf7808e4c>

00008e8c <fflush>:
    8e8c:	20000526 	beq	r4,zero,8ea4 <fflush+0x18>
    8e90:	00800074 	movhi	r2,1
    8e94:	108fc804 	addi	r2,r2,16160
    8e98:	200b883a 	mov	r5,r4
    8e9c:	11000017 	ldw	r4,0(r2)
    8ea0:	0008e301 	jmpi	8e30 <_fflush_r>
    8ea4:	00800074 	movhi	r2,1
    8ea8:	108fc704 	addi	r2,r2,16156
    8eac:	11000017 	ldw	r4,0(r2)
    8eb0:	01400074 	movhi	r5,1
    8eb4:	29638c04 	addi	r5,r5,-29136
    8eb8:	0009c101 	jmpi	9c10 <_fwalk_reent>

00008ebc <__fp_unlock>:
    8ebc:	0005883a 	mov	r2,zero
    8ec0:	f800283a 	ret

00008ec4 <_cleanup_r>:
    8ec4:	01400074 	movhi	r5,1
    8ec8:	2977b404 	addi	r5,r5,-8496
    8ecc:	0009c101 	jmpi	9c10 <_fwalk_reent>

00008ed0 <__sinit.part.1>:
    8ed0:	defff704 	addi	sp,sp,-36
    8ed4:	00c00074 	movhi	r3,1
    8ed8:	dfc00815 	stw	ra,32(sp)
    8edc:	ddc00715 	stw	r23,28(sp)
    8ee0:	dd800615 	stw	r22,24(sp)
    8ee4:	dd400515 	stw	r21,20(sp)
    8ee8:	dd000415 	stw	r20,16(sp)
    8eec:	dcc00315 	stw	r19,12(sp)
    8ef0:	dc800215 	stw	r18,8(sp)
    8ef4:	dc400115 	stw	r17,4(sp)
    8ef8:	dc000015 	stw	r16,0(sp)
    8efc:	18e3b104 	addi	r3,r3,-28988
    8f00:	24000117 	ldw	r16,4(r4)
    8f04:	20c00f15 	stw	r3,60(r4)
    8f08:	2080bb04 	addi	r2,r4,748
    8f0c:	00c000c4 	movi	r3,3
    8f10:	20c0b915 	stw	r3,740(r4)
    8f14:	2080ba15 	stw	r2,744(r4)
    8f18:	2000b815 	stw	zero,736(r4)
    8f1c:	05c00204 	movi	r23,8
    8f20:	00800104 	movi	r2,4
    8f24:	2025883a 	mov	r18,r4
    8f28:	b80d883a 	mov	r6,r23
    8f2c:	81001704 	addi	r4,r16,92
    8f30:	000b883a 	mov	r5,zero
    8f34:	80000015 	stw	zero,0(r16)
    8f38:	80000115 	stw	zero,4(r16)
    8f3c:	80000215 	stw	zero,8(r16)
    8f40:	8080030d 	sth	r2,12(r16)
    8f44:	80001915 	stw	zero,100(r16)
    8f48:	8000038d 	sth	zero,14(r16)
    8f4c:	80000415 	stw	zero,16(r16)
    8f50:	80000515 	stw	zero,20(r16)
    8f54:	80000615 	stw	zero,24(r16)
    8f58:	000ab5c0 	call	ab5c <memset>
    8f5c:	05800074 	movhi	r22,1
    8f60:	94400217 	ldw	r17,8(r18)
    8f64:	05400074 	movhi	r21,1
    8f68:	05000074 	movhi	r20,1
    8f6c:	04c00074 	movhi	r19,1
    8f70:	b5b0e804 	addi	r22,r22,-15456
    8f74:	ad70ff04 	addi	r21,r21,-15364
    8f78:	a5311e04 	addi	r20,r20,-15240
    8f7c:	9cf13504 	addi	r19,r19,-15148
    8f80:	85800815 	stw	r22,32(r16)
    8f84:	85400915 	stw	r21,36(r16)
    8f88:	85000a15 	stw	r20,40(r16)
    8f8c:	84c00b15 	stw	r19,44(r16)
    8f90:	84000715 	stw	r16,28(r16)
    8f94:	00800284 	movi	r2,10
    8f98:	8880030d 	sth	r2,12(r17)
    8f9c:	00800044 	movi	r2,1
    8fa0:	b80d883a 	mov	r6,r23
    8fa4:	89001704 	addi	r4,r17,92
    8fa8:	000b883a 	mov	r5,zero
    8fac:	88000015 	stw	zero,0(r17)
    8fb0:	88000115 	stw	zero,4(r17)
    8fb4:	88000215 	stw	zero,8(r17)
    8fb8:	88001915 	stw	zero,100(r17)
    8fbc:	8880038d 	sth	r2,14(r17)
    8fc0:	88000415 	stw	zero,16(r17)
    8fc4:	88000515 	stw	zero,20(r17)
    8fc8:	88000615 	stw	zero,24(r17)
    8fcc:	000ab5c0 	call	ab5c <memset>
    8fd0:	94000317 	ldw	r16,12(r18)
    8fd4:	00800484 	movi	r2,18
    8fd8:	8c400715 	stw	r17,28(r17)
    8fdc:	8d800815 	stw	r22,32(r17)
    8fe0:	8d400915 	stw	r21,36(r17)
    8fe4:	8d000a15 	stw	r20,40(r17)
    8fe8:	8cc00b15 	stw	r19,44(r17)
    8fec:	8080030d 	sth	r2,12(r16)
    8ff0:	00800084 	movi	r2,2
    8ff4:	80000015 	stw	zero,0(r16)
    8ff8:	80000115 	stw	zero,4(r16)
    8ffc:	80000215 	stw	zero,8(r16)
    9000:	80001915 	stw	zero,100(r16)
    9004:	8080038d 	sth	r2,14(r16)
    9008:	80000415 	stw	zero,16(r16)
    900c:	80000515 	stw	zero,20(r16)
    9010:	80000615 	stw	zero,24(r16)
    9014:	b80d883a 	mov	r6,r23
    9018:	000b883a 	mov	r5,zero
    901c:	81001704 	addi	r4,r16,92
    9020:	000ab5c0 	call	ab5c <memset>
    9024:	00800044 	movi	r2,1
    9028:	84000715 	stw	r16,28(r16)
    902c:	85800815 	stw	r22,32(r16)
    9030:	85400915 	stw	r21,36(r16)
    9034:	85000a15 	stw	r20,40(r16)
    9038:	84c00b15 	stw	r19,44(r16)
    903c:	90800e15 	stw	r2,56(r18)
    9040:	dfc00817 	ldw	ra,32(sp)
    9044:	ddc00717 	ldw	r23,28(sp)
    9048:	dd800617 	ldw	r22,24(sp)
    904c:	dd400517 	ldw	r21,20(sp)
    9050:	dd000417 	ldw	r20,16(sp)
    9054:	dcc00317 	ldw	r19,12(sp)
    9058:	dc800217 	ldw	r18,8(sp)
    905c:	dc400117 	ldw	r17,4(sp)
    9060:	dc000017 	ldw	r16,0(sp)
    9064:	dec00904 	addi	sp,sp,36
    9068:	f800283a 	ret

0000906c <__fp_lock>:
    906c:	0005883a 	mov	r2,zero
    9070:	f800283a 	ret

00009074 <__sfmoreglue>:
    9074:	defffc04 	addi	sp,sp,-16
    9078:	dc400115 	stw	r17,4(sp)
    907c:	2c7fffc4 	addi	r17,r5,-1
    9080:	8c401a24 	muli	r17,r17,104
    9084:	dc800215 	stw	r18,8(sp)
    9088:	2825883a 	mov	r18,r5
    908c:	89401d04 	addi	r5,r17,116
    9090:	dc000015 	stw	r16,0(sp)
    9094:	dfc00315 	stw	ra,12(sp)
    9098:	0009fc80 	call	9fc8 <_malloc_r>
    909c:	1021883a 	mov	r16,r2
    90a0:	10000726 	beq	r2,zero,90c0 <__sfmoreglue+0x4c>
    90a4:	11000304 	addi	r4,r2,12
    90a8:	10000015 	stw	zero,0(r2)
    90ac:	14800115 	stw	r18,4(r2)
    90b0:	11000215 	stw	r4,8(r2)
    90b4:	89801a04 	addi	r6,r17,104
    90b8:	000b883a 	mov	r5,zero
    90bc:	000ab5c0 	call	ab5c <memset>
    90c0:	8005883a 	mov	r2,r16
    90c4:	dfc00317 	ldw	ra,12(sp)
    90c8:	dc800217 	ldw	r18,8(sp)
    90cc:	dc400117 	ldw	r17,4(sp)
    90d0:	dc000017 	ldw	r16,0(sp)
    90d4:	dec00404 	addi	sp,sp,16
    90d8:	f800283a 	ret

000090dc <__sfp>:
    90dc:	defffb04 	addi	sp,sp,-20
    90e0:	dc000015 	stw	r16,0(sp)
    90e4:	04000074 	movhi	r16,1
    90e8:	840fc704 	addi	r16,r16,16156
    90ec:	dcc00315 	stw	r19,12(sp)
    90f0:	2027883a 	mov	r19,r4
    90f4:	81000017 	ldw	r4,0(r16)
    90f8:	dfc00415 	stw	ra,16(sp)
    90fc:	dc800215 	stw	r18,8(sp)
    9100:	20800e17 	ldw	r2,56(r4)
    9104:	dc400115 	stw	r17,4(sp)
    9108:	1000021e 	bne	r2,zero,9114 <__sfp+0x38>
    910c:	0008ed00 	call	8ed0 <__sinit.part.1>
    9110:	81000017 	ldw	r4,0(r16)
    9114:	2480b804 	addi	r18,r4,736
    9118:	047fffc4 	movi	r17,-1
    911c:	91000117 	ldw	r4,4(r18)
    9120:	94000217 	ldw	r16,8(r18)
    9124:	213fffc4 	addi	r4,r4,-1
    9128:	20000a16 	blt	r4,zero,9154 <__sfp+0x78>
    912c:	8080030f 	ldh	r2,12(r16)
    9130:	10000c26 	beq	r2,zero,9164 <__sfp+0x88>
    9134:	80c01d04 	addi	r3,r16,116
    9138:	00000206 	br	9144 <__sfp+0x68>
    913c:	18bfe60f 	ldh	r2,-104(r3)
    9140:	10000826 	beq	r2,zero,9164 <__sfp+0x88>
    9144:	213fffc4 	addi	r4,r4,-1
    9148:	1c3ffd04 	addi	r16,r3,-12
    914c:	18c01a04 	addi	r3,r3,104
    9150:	247ffa1e 	bne	r4,r17,913c <__alt_mem_onchip_memory+0xf780913c>
    9154:	90800017 	ldw	r2,0(r18)
    9158:	10001d26 	beq	r2,zero,91d0 <__sfp+0xf4>
    915c:	1025883a 	mov	r18,r2
    9160:	003fee06 	br	911c <__alt_mem_onchip_memory+0xf780911c>
    9164:	00bfffc4 	movi	r2,-1
    9168:	8080038d 	sth	r2,14(r16)
    916c:	00800044 	movi	r2,1
    9170:	8080030d 	sth	r2,12(r16)
    9174:	80001915 	stw	zero,100(r16)
    9178:	80000015 	stw	zero,0(r16)
    917c:	80000215 	stw	zero,8(r16)
    9180:	80000115 	stw	zero,4(r16)
    9184:	80000415 	stw	zero,16(r16)
    9188:	80000515 	stw	zero,20(r16)
    918c:	80000615 	stw	zero,24(r16)
    9190:	01800204 	movi	r6,8
    9194:	000b883a 	mov	r5,zero
    9198:	81001704 	addi	r4,r16,92
    919c:	000ab5c0 	call	ab5c <memset>
    91a0:	8005883a 	mov	r2,r16
    91a4:	80000c15 	stw	zero,48(r16)
    91a8:	80000d15 	stw	zero,52(r16)
    91ac:	80001115 	stw	zero,68(r16)
    91b0:	80001215 	stw	zero,72(r16)
    91b4:	dfc00417 	ldw	ra,16(sp)
    91b8:	dcc00317 	ldw	r19,12(sp)
    91bc:	dc800217 	ldw	r18,8(sp)
    91c0:	dc400117 	ldw	r17,4(sp)
    91c4:	dc000017 	ldw	r16,0(sp)
    91c8:	dec00504 	addi	sp,sp,20
    91cc:	f800283a 	ret
    91d0:	01400104 	movi	r5,4
    91d4:	9809883a 	mov	r4,r19
    91d8:	00090740 	call	9074 <__sfmoreglue>
    91dc:	90800015 	stw	r2,0(r18)
    91e0:	103fde1e 	bne	r2,zero,915c <__alt_mem_onchip_memory+0xf780915c>
    91e4:	00800304 	movi	r2,12
    91e8:	98800015 	stw	r2,0(r19)
    91ec:	0005883a 	mov	r2,zero
    91f0:	003ff006 	br	91b4 <__alt_mem_onchip_memory+0xf78091b4>

000091f4 <_cleanup>:
    91f4:	00800074 	movhi	r2,1
    91f8:	108fc704 	addi	r2,r2,16156
    91fc:	11000017 	ldw	r4,0(r2)
    9200:	01400074 	movhi	r5,1
    9204:	2977b404 	addi	r5,r5,-8496
    9208:	0009c101 	jmpi	9c10 <_fwalk_reent>

0000920c <__sinit>:
    920c:	20800e17 	ldw	r2,56(r4)
    9210:	10000126 	beq	r2,zero,9218 <__sinit+0xc>
    9214:	f800283a 	ret
    9218:	0008ed01 	jmpi	8ed0 <__sinit.part.1>

0000921c <__sfp_lock_acquire>:
    921c:	f800283a 	ret

00009220 <__sfp_lock_release>:
    9220:	f800283a 	ret

00009224 <__sinit_lock_acquire>:
    9224:	f800283a 	ret

00009228 <__sinit_lock_release>:
    9228:	f800283a 	ret

0000922c <__fp_lock_all>:
    922c:	00800074 	movhi	r2,1
    9230:	108fc804 	addi	r2,r2,16160
    9234:	11000017 	ldw	r4,0(r2)
    9238:	01400074 	movhi	r5,1
    923c:	29641b04 	addi	r5,r5,-28564
    9240:	0009b4c1 	jmpi	9b4c <_fwalk>

00009244 <__fp_unlock_all>:
    9244:	00800074 	movhi	r2,1
    9248:	108fc804 	addi	r2,r2,16160
    924c:	11000017 	ldw	r4,0(r2)
    9250:	01400074 	movhi	r5,1
    9254:	2963af04 	addi	r5,r5,-28996
    9258:	0009b4c1 	jmpi	9b4c <_fwalk>

0000925c <_malloc_trim_r>:
    925c:	defffb04 	addi	sp,sp,-20
    9260:	dcc00315 	stw	r19,12(sp)
    9264:	04c00074 	movhi	r19,1
    9268:	dc800215 	stw	r18,8(sp)
    926c:	dc400115 	stw	r17,4(sp)
    9270:	dc000015 	stw	r16,0(sp)
    9274:	dfc00415 	stw	ra,16(sp)
    9278:	2821883a 	mov	r16,r5
    927c:	9cca3e04 	addi	r19,r19,10488
    9280:	2025883a 	mov	r18,r4
    9284:	000f8e40 	call	f8e4 <__malloc_lock>
    9288:	98800217 	ldw	r2,8(r19)
    928c:	14400117 	ldw	r17,4(r2)
    9290:	00bfff04 	movi	r2,-4
    9294:	88a2703a 	and	r17,r17,r2
    9298:	8c21c83a 	sub	r16,r17,r16
    929c:	8403fbc4 	addi	r16,r16,4079
    92a0:	8020d33a 	srli	r16,r16,12
    92a4:	0083ffc4 	movi	r2,4095
    92a8:	843fffc4 	addi	r16,r16,-1
    92ac:	8020933a 	slli	r16,r16,12
    92b0:	1400060e 	bge	r2,r16,92cc <_malloc_trim_r+0x70>
    92b4:	000b883a 	mov	r5,zero
    92b8:	9009883a 	mov	r4,r18
    92bc:	000c34c0 	call	c34c <_sbrk_r>
    92c0:	98c00217 	ldw	r3,8(r19)
    92c4:	1c47883a 	add	r3,r3,r17
    92c8:	10c00a26 	beq	r2,r3,92f4 <_malloc_trim_r+0x98>
    92cc:	9009883a 	mov	r4,r18
    92d0:	000f9080 	call	f908 <__malloc_unlock>
    92d4:	0005883a 	mov	r2,zero
    92d8:	dfc00417 	ldw	ra,16(sp)
    92dc:	dcc00317 	ldw	r19,12(sp)
    92e0:	dc800217 	ldw	r18,8(sp)
    92e4:	dc400117 	ldw	r17,4(sp)
    92e8:	dc000017 	ldw	r16,0(sp)
    92ec:	dec00504 	addi	sp,sp,20
    92f0:	f800283a 	ret
    92f4:	040bc83a 	sub	r5,zero,r16
    92f8:	9009883a 	mov	r4,r18
    92fc:	000c34c0 	call	c34c <_sbrk_r>
    9300:	00ffffc4 	movi	r3,-1
    9304:	10c00d26 	beq	r2,r3,933c <_malloc_trim_r+0xe0>
    9308:	00c00074 	movhi	r3,1
    930c:	18d6b004 	addi	r3,r3,23232
    9310:	18800017 	ldw	r2,0(r3)
    9314:	99000217 	ldw	r4,8(r19)
    9318:	8c23c83a 	sub	r17,r17,r16
    931c:	8c400054 	ori	r17,r17,1
    9320:	1421c83a 	sub	r16,r2,r16
    9324:	24400115 	stw	r17,4(r4)
    9328:	9009883a 	mov	r4,r18
    932c:	1c000015 	stw	r16,0(r3)
    9330:	000f9080 	call	f908 <__malloc_unlock>
    9334:	00800044 	movi	r2,1
    9338:	003fe706 	br	92d8 <__alt_mem_onchip_memory+0xf78092d8>
    933c:	000b883a 	mov	r5,zero
    9340:	9009883a 	mov	r4,r18
    9344:	000c34c0 	call	c34c <_sbrk_r>
    9348:	99000217 	ldw	r4,8(r19)
    934c:	014003c4 	movi	r5,15
    9350:	1107c83a 	sub	r3,r2,r4
    9354:	28ffdd0e 	bge	r5,r3,92cc <__alt_mem_onchip_memory+0xf78092cc>
    9358:	01400074 	movhi	r5,1
    935c:	294fca04 	addi	r5,r5,16168
    9360:	29400017 	ldw	r5,0(r5)
    9364:	18c00054 	ori	r3,r3,1
    9368:	20c00115 	stw	r3,4(r4)
    936c:	00c00074 	movhi	r3,1
    9370:	1145c83a 	sub	r2,r2,r5
    9374:	18d6b004 	addi	r3,r3,23232
    9378:	18800015 	stw	r2,0(r3)
    937c:	003fd306 	br	92cc <__alt_mem_onchip_memory+0xf78092cc>

00009380 <_free_r>:
    9380:	28004126 	beq	r5,zero,9488 <_free_r+0x108>
    9384:	defffd04 	addi	sp,sp,-12
    9388:	dc400115 	stw	r17,4(sp)
    938c:	dc000015 	stw	r16,0(sp)
    9390:	2023883a 	mov	r17,r4
    9394:	2821883a 	mov	r16,r5
    9398:	dfc00215 	stw	ra,8(sp)
    939c:	000f8e40 	call	f8e4 <__malloc_lock>
    93a0:	81ffff17 	ldw	r7,-4(r16)
    93a4:	00bfff84 	movi	r2,-2
    93a8:	01000074 	movhi	r4,1
    93ac:	81bffe04 	addi	r6,r16,-8
    93b0:	3884703a 	and	r2,r7,r2
    93b4:	210a3e04 	addi	r4,r4,10488
    93b8:	308b883a 	add	r5,r6,r2
    93bc:	2a400117 	ldw	r9,4(r5)
    93c0:	22000217 	ldw	r8,8(r4)
    93c4:	00ffff04 	movi	r3,-4
    93c8:	48c6703a 	and	r3,r9,r3
    93cc:	2a005726 	beq	r5,r8,952c <_free_r+0x1ac>
    93d0:	28c00115 	stw	r3,4(r5)
    93d4:	39c0004c 	andi	r7,r7,1
    93d8:	3800091e 	bne	r7,zero,9400 <_free_r+0x80>
    93dc:	823ffe17 	ldw	r8,-8(r16)
    93e0:	22400204 	addi	r9,r4,8
    93e4:	320dc83a 	sub	r6,r6,r8
    93e8:	31c00217 	ldw	r7,8(r6)
    93ec:	1205883a 	add	r2,r2,r8
    93f0:	3a406526 	beq	r7,r9,9588 <_free_r+0x208>
    93f4:	32000317 	ldw	r8,12(r6)
    93f8:	3a000315 	stw	r8,12(r7)
    93fc:	41c00215 	stw	r7,8(r8)
    9400:	28cf883a 	add	r7,r5,r3
    9404:	39c00117 	ldw	r7,4(r7)
    9408:	39c0004c 	andi	r7,r7,1
    940c:	38003a26 	beq	r7,zero,94f8 <_free_r+0x178>
    9410:	10c00054 	ori	r3,r2,1
    9414:	30c00115 	stw	r3,4(r6)
    9418:	3087883a 	add	r3,r6,r2
    941c:	18800015 	stw	r2,0(r3)
    9420:	00c07fc4 	movi	r3,511
    9424:	18801936 	bltu	r3,r2,948c <_free_r+0x10c>
    9428:	1004d0fa 	srli	r2,r2,3
    942c:	01c00044 	movi	r7,1
    9430:	21400117 	ldw	r5,4(r4)
    9434:	10c00044 	addi	r3,r2,1
    9438:	18c7883a 	add	r3,r3,r3
    943c:	1005d0ba 	srai	r2,r2,2
    9440:	18c7883a 	add	r3,r3,r3
    9444:	18c7883a 	add	r3,r3,r3
    9448:	1907883a 	add	r3,r3,r4
    944c:	3884983a 	sll	r2,r7,r2
    9450:	19c00017 	ldw	r7,0(r3)
    9454:	1a3ffe04 	addi	r8,r3,-8
    9458:	1144b03a 	or	r2,r2,r5
    945c:	32000315 	stw	r8,12(r6)
    9460:	31c00215 	stw	r7,8(r6)
    9464:	20800115 	stw	r2,4(r4)
    9468:	19800015 	stw	r6,0(r3)
    946c:	39800315 	stw	r6,12(r7)
    9470:	8809883a 	mov	r4,r17
    9474:	dfc00217 	ldw	ra,8(sp)
    9478:	dc400117 	ldw	r17,4(sp)
    947c:	dc000017 	ldw	r16,0(sp)
    9480:	dec00304 	addi	sp,sp,12
    9484:	000f9081 	jmpi	f908 <__malloc_unlock>
    9488:	f800283a 	ret
    948c:	100ad27a 	srli	r5,r2,9
    9490:	00c00104 	movi	r3,4
    9494:	19404a36 	bltu	r3,r5,95c0 <_free_r+0x240>
    9498:	100ad1ba 	srli	r5,r2,6
    949c:	28c00e44 	addi	r3,r5,57
    94a0:	18c7883a 	add	r3,r3,r3
    94a4:	29400e04 	addi	r5,r5,56
    94a8:	18c7883a 	add	r3,r3,r3
    94ac:	18c7883a 	add	r3,r3,r3
    94b0:	1909883a 	add	r4,r3,r4
    94b4:	20c00017 	ldw	r3,0(r4)
    94b8:	01c00074 	movhi	r7,1
    94bc:	213ffe04 	addi	r4,r4,-8
    94c0:	39ca3e04 	addi	r7,r7,10488
    94c4:	20c04426 	beq	r4,r3,95d8 <_free_r+0x258>
    94c8:	01ffff04 	movi	r7,-4
    94cc:	19400117 	ldw	r5,4(r3)
    94d0:	29ca703a 	and	r5,r5,r7
    94d4:	1140022e 	bgeu	r2,r5,94e0 <_free_r+0x160>
    94d8:	18c00217 	ldw	r3,8(r3)
    94dc:	20fffb1e 	bne	r4,r3,94cc <__alt_mem_onchip_memory+0xf78094cc>
    94e0:	19000317 	ldw	r4,12(r3)
    94e4:	31000315 	stw	r4,12(r6)
    94e8:	30c00215 	stw	r3,8(r6)
    94ec:	21800215 	stw	r6,8(r4)
    94f0:	19800315 	stw	r6,12(r3)
    94f4:	003fde06 	br	9470 <__alt_mem_onchip_memory+0xf7809470>
    94f8:	29c00217 	ldw	r7,8(r5)
    94fc:	10c5883a 	add	r2,r2,r3
    9500:	00c00074 	movhi	r3,1
    9504:	18ca4004 	addi	r3,r3,10496
    9508:	38c03b26 	beq	r7,r3,95f8 <_free_r+0x278>
    950c:	2a000317 	ldw	r8,12(r5)
    9510:	11400054 	ori	r5,r2,1
    9514:	3087883a 	add	r3,r6,r2
    9518:	3a000315 	stw	r8,12(r7)
    951c:	41c00215 	stw	r7,8(r8)
    9520:	31400115 	stw	r5,4(r6)
    9524:	18800015 	stw	r2,0(r3)
    9528:	003fbd06 	br	9420 <__alt_mem_onchip_memory+0xf7809420>
    952c:	39c0004c 	andi	r7,r7,1
    9530:	10c5883a 	add	r2,r2,r3
    9534:	3800071e 	bne	r7,zero,9554 <_free_r+0x1d4>
    9538:	81fffe17 	ldw	r7,-8(r16)
    953c:	31cdc83a 	sub	r6,r6,r7
    9540:	30c00317 	ldw	r3,12(r6)
    9544:	31400217 	ldw	r5,8(r6)
    9548:	11c5883a 	add	r2,r2,r7
    954c:	28c00315 	stw	r3,12(r5)
    9550:	19400215 	stw	r5,8(r3)
    9554:	10c00054 	ori	r3,r2,1
    9558:	30c00115 	stw	r3,4(r6)
    955c:	00c00074 	movhi	r3,1
    9560:	18cfcb04 	addi	r3,r3,16172
    9564:	18c00017 	ldw	r3,0(r3)
    9568:	21800215 	stw	r6,8(r4)
    956c:	10ffc036 	bltu	r2,r3,9470 <__alt_mem_onchip_memory+0xf7809470>
    9570:	00800074 	movhi	r2,1
    9574:	1096a404 	addi	r2,r2,23184
    9578:	11400017 	ldw	r5,0(r2)
    957c:	8809883a 	mov	r4,r17
    9580:	000925c0 	call	925c <_malloc_trim_r>
    9584:	003fba06 	br	9470 <__alt_mem_onchip_memory+0xf7809470>
    9588:	28c9883a 	add	r4,r5,r3
    958c:	21000117 	ldw	r4,4(r4)
    9590:	2100004c 	andi	r4,r4,1
    9594:	2000391e 	bne	r4,zero,967c <_free_r+0x2fc>
    9598:	29c00217 	ldw	r7,8(r5)
    959c:	29000317 	ldw	r4,12(r5)
    95a0:	1885883a 	add	r2,r3,r2
    95a4:	10c00054 	ori	r3,r2,1
    95a8:	39000315 	stw	r4,12(r7)
    95ac:	21c00215 	stw	r7,8(r4)
    95b0:	30c00115 	stw	r3,4(r6)
    95b4:	308d883a 	add	r6,r6,r2
    95b8:	30800015 	stw	r2,0(r6)
    95bc:	003fac06 	br	9470 <__alt_mem_onchip_memory+0xf7809470>
    95c0:	00c00504 	movi	r3,20
    95c4:	19401536 	bltu	r3,r5,961c <_free_r+0x29c>
    95c8:	28c01704 	addi	r3,r5,92
    95cc:	18c7883a 	add	r3,r3,r3
    95d0:	294016c4 	addi	r5,r5,91
    95d4:	003fb406 	br	94a8 <__alt_mem_onchip_memory+0xf78094a8>
    95d8:	280bd0ba 	srai	r5,r5,2
    95dc:	00c00044 	movi	r3,1
    95e0:	38800117 	ldw	r2,4(r7)
    95e4:	194a983a 	sll	r5,r3,r5
    95e8:	2007883a 	mov	r3,r4
    95ec:	2884b03a 	or	r2,r5,r2
    95f0:	38800115 	stw	r2,4(r7)
    95f4:	003fbb06 	br	94e4 <__alt_mem_onchip_memory+0xf78094e4>
    95f8:	21800515 	stw	r6,20(r4)
    95fc:	21800415 	stw	r6,16(r4)
    9600:	10c00054 	ori	r3,r2,1
    9604:	31c00315 	stw	r7,12(r6)
    9608:	31c00215 	stw	r7,8(r6)
    960c:	30c00115 	stw	r3,4(r6)
    9610:	308d883a 	add	r6,r6,r2
    9614:	30800015 	stw	r2,0(r6)
    9618:	003f9506 	br	9470 <__alt_mem_onchip_memory+0xf7809470>
    961c:	00c01504 	movi	r3,84
    9620:	19400536 	bltu	r3,r5,9638 <_free_r+0x2b8>
    9624:	100ad33a 	srli	r5,r2,12
    9628:	28c01bc4 	addi	r3,r5,111
    962c:	18c7883a 	add	r3,r3,r3
    9630:	29401b84 	addi	r5,r5,110
    9634:	003f9c06 	br	94a8 <__alt_mem_onchip_memory+0xf78094a8>
    9638:	00c05504 	movi	r3,340
    963c:	19400536 	bltu	r3,r5,9654 <_free_r+0x2d4>
    9640:	100ad3fa 	srli	r5,r2,15
    9644:	28c01e04 	addi	r3,r5,120
    9648:	18c7883a 	add	r3,r3,r3
    964c:	29401dc4 	addi	r5,r5,119
    9650:	003f9506 	br	94a8 <__alt_mem_onchip_memory+0xf78094a8>
    9654:	00c15504 	movi	r3,1364
    9658:	19400536 	bltu	r3,r5,9670 <_free_r+0x2f0>
    965c:	100ad4ba 	srli	r5,r2,18
    9660:	28c01f44 	addi	r3,r5,125
    9664:	18c7883a 	add	r3,r3,r3
    9668:	29401f04 	addi	r5,r5,124
    966c:	003f8e06 	br	94a8 <__alt_mem_onchip_memory+0xf78094a8>
    9670:	00c03f84 	movi	r3,254
    9674:	01401f84 	movi	r5,126
    9678:	003f8b06 	br	94a8 <__alt_mem_onchip_memory+0xf78094a8>
    967c:	10c00054 	ori	r3,r2,1
    9680:	30c00115 	stw	r3,4(r6)
    9684:	308d883a 	add	r6,r6,r2
    9688:	30800015 	stw	r2,0(r6)
    968c:	003f7806 	br	9470 <__alt_mem_onchip_memory+0xf7809470>

00009690 <__sfvwrite_r>:
    9690:	30800217 	ldw	r2,8(r6)
    9694:	10006726 	beq	r2,zero,9834 <__sfvwrite_r+0x1a4>
    9698:	28c0030b 	ldhu	r3,12(r5)
    969c:	defff404 	addi	sp,sp,-48
    96a0:	dd400715 	stw	r21,28(sp)
    96a4:	dd000615 	stw	r20,24(sp)
    96a8:	dc000215 	stw	r16,8(sp)
    96ac:	dfc00b15 	stw	ra,44(sp)
    96b0:	df000a15 	stw	fp,40(sp)
    96b4:	ddc00915 	stw	r23,36(sp)
    96b8:	dd800815 	stw	r22,32(sp)
    96bc:	dcc00515 	stw	r19,20(sp)
    96c0:	dc800415 	stw	r18,16(sp)
    96c4:	dc400315 	stw	r17,12(sp)
    96c8:	1880020c 	andi	r2,r3,8
    96cc:	2821883a 	mov	r16,r5
    96d0:	202b883a 	mov	r21,r4
    96d4:	3029883a 	mov	r20,r6
    96d8:	10002726 	beq	r2,zero,9778 <__sfvwrite_r+0xe8>
    96dc:	28800417 	ldw	r2,16(r5)
    96e0:	10002526 	beq	r2,zero,9778 <__sfvwrite_r+0xe8>
    96e4:	1880008c 	andi	r2,r3,2
    96e8:	a4400017 	ldw	r17,0(r20)
    96ec:	10002a26 	beq	r2,zero,9798 <__sfvwrite_r+0x108>
    96f0:	05a00034 	movhi	r22,32768
    96f4:	0027883a 	mov	r19,zero
    96f8:	0025883a 	mov	r18,zero
    96fc:	b5bf0004 	addi	r22,r22,-1024
    9700:	980d883a 	mov	r6,r19
    9704:	a809883a 	mov	r4,r21
    9708:	90004626 	beq	r18,zero,9824 <__sfvwrite_r+0x194>
    970c:	900f883a 	mov	r7,r18
    9710:	b480022e 	bgeu	r22,r18,971c <__sfvwrite_r+0x8c>
    9714:	01e00034 	movhi	r7,32768
    9718:	39ff0004 	addi	r7,r7,-1024
    971c:	80800917 	ldw	r2,36(r16)
    9720:	81400717 	ldw	r5,28(r16)
    9724:	103ee83a 	callr	r2
    9728:	0080570e 	bge	zero,r2,9888 <__sfvwrite_r+0x1f8>
    972c:	a0c00217 	ldw	r3,8(r20)
    9730:	98a7883a 	add	r19,r19,r2
    9734:	90a5c83a 	sub	r18,r18,r2
    9738:	1885c83a 	sub	r2,r3,r2
    973c:	a0800215 	stw	r2,8(r20)
    9740:	103fef1e 	bne	r2,zero,9700 <__alt_mem_onchip_memory+0xf7809700>
    9744:	0005883a 	mov	r2,zero
    9748:	dfc00b17 	ldw	ra,44(sp)
    974c:	df000a17 	ldw	fp,40(sp)
    9750:	ddc00917 	ldw	r23,36(sp)
    9754:	dd800817 	ldw	r22,32(sp)
    9758:	dd400717 	ldw	r21,28(sp)
    975c:	dd000617 	ldw	r20,24(sp)
    9760:	dcc00517 	ldw	r19,20(sp)
    9764:	dc800417 	ldw	r18,16(sp)
    9768:	dc400317 	ldw	r17,12(sp)
    976c:	dc000217 	ldw	r16,8(sp)
    9770:	dec00c04 	addi	sp,sp,48
    9774:	f800283a 	ret
    9778:	800b883a 	mov	r5,r16
    977c:	a809883a 	mov	r4,r21
    9780:	00072380 	call	7238 <__swsetup_r>
    9784:	1000eb1e 	bne	r2,zero,9b34 <__sfvwrite_r+0x4a4>
    9788:	80c0030b 	ldhu	r3,12(r16)
    978c:	a4400017 	ldw	r17,0(r20)
    9790:	1880008c 	andi	r2,r3,2
    9794:	103fd61e 	bne	r2,zero,96f0 <__alt_mem_onchip_memory+0xf78096f0>
    9798:	1880004c 	andi	r2,r3,1
    979c:	10003f1e 	bne	r2,zero,989c <__sfvwrite_r+0x20c>
    97a0:	0039883a 	mov	fp,zero
    97a4:	0025883a 	mov	r18,zero
    97a8:	90001a26 	beq	r18,zero,9814 <__sfvwrite_r+0x184>
    97ac:	1880800c 	andi	r2,r3,512
    97b0:	84c00217 	ldw	r19,8(r16)
    97b4:	10002126 	beq	r2,zero,983c <__sfvwrite_r+0x1ac>
    97b8:	982f883a 	mov	r23,r19
    97bc:	94c09336 	bltu	r18,r19,9a0c <__sfvwrite_r+0x37c>
    97c0:	1881200c 	andi	r2,r3,1152
    97c4:	10009e1e 	bne	r2,zero,9a40 <__sfvwrite_r+0x3b0>
    97c8:	81000017 	ldw	r4,0(r16)
    97cc:	b80d883a 	mov	r6,r23
    97d0:	e00b883a 	mov	r5,fp
    97d4:	000aa000 	call	aa00 <memmove>
    97d8:	80c00217 	ldw	r3,8(r16)
    97dc:	81000017 	ldw	r4,0(r16)
    97e0:	9005883a 	mov	r2,r18
    97e4:	1ce7c83a 	sub	r19,r3,r19
    97e8:	25cf883a 	add	r7,r4,r23
    97ec:	84c00215 	stw	r19,8(r16)
    97f0:	81c00015 	stw	r7,0(r16)
    97f4:	a0c00217 	ldw	r3,8(r20)
    97f8:	e0b9883a 	add	fp,fp,r2
    97fc:	90a5c83a 	sub	r18,r18,r2
    9800:	18a7c83a 	sub	r19,r3,r2
    9804:	a4c00215 	stw	r19,8(r20)
    9808:	983fce26 	beq	r19,zero,9744 <__alt_mem_onchip_memory+0xf7809744>
    980c:	80c0030b 	ldhu	r3,12(r16)
    9810:	903fe61e 	bne	r18,zero,97ac <__alt_mem_onchip_memory+0xf78097ac>
    9814:	8f000017 	ldw	fp,0(r17)
    9818:	8c800117 	ldw	r18,4(r17)
    981c:	8c400204 	addi	r17,r17,8
    9820:	003fe106 	br	97a8 <__alt_mem_onchip_memory+0xf78097a8>
    9824:	8cc00017 	ldw	r19,0(r17)
    9828:	8c800117 	ldw	r18,4(r17)
    982c:	8c400204 	addi	r17,r17,8
    9830:	003fb306 	br	9700 <__alt_mem_onchip_memory+0xf7809700>
    9834:	0005883a 	mov	r2,zero
    9838:	f800283a 	ret
    983c:	81000017 	ldw	r4,0(r16)
    9840:	80800417 	ldw	r2,16(r16)
    9844:	11005736 	bltu	r2,r4,99a4 <__sfvwrite_r+0x314>
    9848:	85c00517 	ldw	r23,20(r16)
    984c:	95c05536 	bltu	r18,r23,99a4 <__sfvwrite_r+0x314>
    9850:	00a00034 	movhi	r2,32768
    9854:	10bfffc4 	addi	r2,r2,-1
    9858:	9009883a 	mov	r4,r18
    985c:	1480012e 	bgeu	r2,r18,9864 <__sfvwrite_r+0x1d4>
    9860:	1009883a 	mov	r4,r2
    9864:	b80b883a 	mov	r5,r23
    9868:	0004a800 	call	4a80 <__divsi3>
    986c:	15cf383a 	mul	r7,r2,r23
    9870:	81400717 	ldw	r5,28(r16)
    9874:	80800917 	ldw	r2,36(r16)
    9878:	e00d883a 	mov	r6,fp
    987c:	a809883a 	mov	r4,r21
    9880:	103ee83a 	callr	r2
    9884:	00bfdb16 	blt	zero,r2,97f4 <__alt_mem_onchip_memory+0xf78097f4>
    9888:	8080030b 	ldhu	r2,12(r16)
    988c:	10801014 	ori	r2,r2,64
    9890:	8080030d 	sth	r2,12(r16)
    9894:	00bfffc4 	movi	r2,-1
    9898:	003fab06 	br	9748 <__alt_mem_onchip_memory+0xf7809748>
    989c:	0027883a 	mov	r19,zero
    98a0:	0011883a 	mov	r8,zero
    98a4:	0039883a 	mov	fp,zero
    98a8:	0025883a 	mov	r18,zero
    98ac:	90001f26 	beq	r18,zero,992c <__sfvwrite_r+0x29c>
    98b0:	40005a26 	beq	r8,zero,9a1c <__sfvwrite_r+0x38c>
    98b4:	982d883a 	mov	r22,r19
    98b8:	94c0012e 	bgeu	r18,r19,98c0 <__sfvwrite_r+0x230>
    98bc:	902d883a 	mov	r22,r18
    98c0:	81000017 	ldw	r4,0(r16)
    98c4:	80800417 	ldw	r2,16(r16)
    98c8:	b02f883a 	mov	r23,r22
    98cc:	81c00517 	ldw	r7,20(r16)
    98d0:	1100032e 	bgeu	r2,r4,98e0 <__sfvwrite_r+0x250>
    98d4:	80c00217 	ldw	r3,8(r16)
    98d8:	38c7883a 	add	r3,r7,r3
    98dc:	1d801816 	blt	r3,r22,9940 <__sfvwrite_r+0x2b0>
    98e0:	b1c03e16 	blt	r22,r7,99dc <__sfvwrite_r+0x34c>
    98e4:	80800917 	ldw	r2,36(r16)
    98e8:	81400717 	ldw	r5,28(r16)
    98ec:	e00d883a 	mov	r6,fp
    98f0:	da000115 	stw	r8,4(sp)
    98f4:	a809883a 	mov	r4,r21
    98f8:	103ee83a 	callr	r2
    98fc:	102f883a 	mov	r23,r2
    9900:	da000117 	ldw	r8,4(sp)
    9904:	00bfe00e 	bge	zero,r2,9888 <__alt_mem_onchip_memory+0xf7809888>
    9908:	9de7c83a 	sub	r19,r19,r23
    990c:	98001f26 	beq	r19,zero,998c <__sfvwrite_r+0x2fc>
    9910:	a0800217 	ldw	r2,8(r20)
    9914:	e5f9883a 	add	fp,fp,r23
    9918:	95e5c83a 	sub	r18,r18,r23
    991c:	15efc83a 	sub	r23,r2,r23
    9920:	a5c00215 	stw	r23,8(r20)
    9924:	b83f8726 	beq	r23,zero,9744 <__alt_mem_onchip_memory+0xf7809744>
    9928:	903fe11e 	bne	r18,zero,98b0 <__alt_mem_onchip_memory+0xf78098b0>
    992c:	8f000017 	ldw	fp,0(r17)
    9930:	8c800117 	ldw	r18,4(r17)
    9934:	0011883a 	mov	r8,zero
    9938:	8c400204 	addi	r17,r17,8
    993c:	003fdb06 	br	98ac <__alt_mem_onchip_memory+0xf78098ac>
    9940:	180d883a 	mov	r6,r3
    9944:	e00b883a 	mov	r5,fp
    9948:	da000115 	stw	r8,4(sp)
    994c:	d8c00015 	stw	r3,0(sp)
    9950:	000aa000 	call	aa00 <memmove>
    9954:	d8c00017 	ldw	r3,0(sp)
    9958:	80800017 	ldw	r2,0(r16)
    995c:	800b883a 	mov	r5,r16
    9960:	a809883a 	mov	r4,r21
    9964:	10c5883a 	add	r2,r2,r3
    9968:	80800015 	stw	r2,0(r16)
    996c:	d8c00015 	stw	r3,0(sp)
    9970:	0008e300 	call	8e30 <_fflush_r>
    9974:	d8c00017 	ldw	r3,0(sp)
    9978:	da000117 	ldw	r8,4(sp)
    997c:	103fc21e 	bne	r2,zero,9888 <__alt_mem_onchip_memory+0xf7809888>
    9980:	182f883a 	mov	r23,r3
    9984:	9de7c83a 	sub	r19,r19,r23
    9988:	983fe11e 	bne	r19,zero,9910 <__alt_mem_onchip_memory+0xf7809910>
    998c:	800b883a 	mov	r5,r16
    9990:	a809883a 	mov	r4,r21
    9994:	0008e300 	call	8e30 <_fflush_r>
    9998:	103fbb1e 	bne	r2,zero,9888 <__alt_mem_onchip_memory+0xf7809888>
    999c:	0011883a 	mov	r8,zero
    99a0:	003fdb06 	br	9910 <__alt_mem_onchip_memory+0xf7809910>
    99a4:	94c0012e 	bgeu	r18,r19,99ac <__sfvwrite_r+0x31c>
    99a8:	9027883a 	mov	r19,r18
    99ac:	980d883a 	mov	r6,r19
    99b0:	e00b883a 	mov	r5,fp
    99b4:	000aa000 	call	aa00 <memmove>
    99b8:	80800217 	ldw	r2,8(r16)
    99bc:	80c00017 	ldw	r3,0(r16)
    99c0:	14c5c83a 	sub	r2,r2,r19
    99c4:	1cc7883a 	add	r3,r3,r19
    99c8:	80800215 	stw	r2,8(r16)
    99cc:	80c00015 	stw	r3,0(r16)
    99d0:	10004326 	beq	r2,zero,9ae0 <__sfvwrite_r+0x450>
    99d4:	9805883a 	mov	r2,r19
    99d8:	003f8606 	br	97f4 <__alt_mem_onchip_memory+0xf78097f4>
    99dc:	b00d883a 	mov	r6,r22
    99e0:	e00b883a 	mov	r5,fp
    99e4:	da000115 	stw	r8,4(sp)
    99e8:	000aa000 	call	aa00 <memmove>
    99ec:	80800217 	ldw	r2,8(r16)
    99f0:	80c00017 	ldw	r3,0(r16)
    99f4:	da000117 	ldw	r8,4(sp)
    99f8:	1585c83a 	sub	r2,r2,r22
    99fc:	1dad883a 	add	r22,r3,r22
    9a00:	80800215 	stw	r2,8(r16)
    9a04:	85800015 	stw	r22,0(r16)
    9a08:	003fbf06 	br	9908 <__alt_mem_onchip_memory+0xf7809908>
    9a0c:	81000017 	ldw	r4,0(r16)
    9a10:	9027883a 	mov	r19,r18
    9a14:	902f883a 	mov	r23,r18
    9a18:	003f6c06 	br	97cc <__alt_mem_onchip_memory+0xf78097cc>
    9a1c:	900d883a 	mov	r6,r18
    9a20:	01400284 	movi	r5,10
    9a24:	e009883a 	mov	r4,fp
    9a28:	000a7d40 	call	a7d4 <memchr>
    9a2c:	10003e26 	beq	r2,zero,9b28 <__sfvwrite_r+0x498>
    9a30:	10800044 	addi	r2,r2,1
    9a34:	1727c83a 	sub	r19,r2,fp
    9a38:	02000044 	movi	r8,1
    9a3c:	003f9d06 	br	98b4 <__alt_mem_onchip_memory+0xf78098b4>
    9a40:	80800517 	ldw	r2,20(r16)
    9a44:	81400417 	ldw	r5,16(r16)
    9a48:	81c00017 	ldw	r7,0(r16)
    9a4c:	10a7883a 	add	r19,r2,r2
    9a50:	9885883a 	add	r2,r19,r2
    9a54:	1026d7fa 	srli	r19,r2,31
    9a58:	396dc83a 	sub	r22,r7,r5
    9a5c:	b1000044 	addi	r4,r22,1
    9a60:	9885883a 	add	r2,r19,r2
    9a64:	1027d07a 	srai	r19,r2,1
    9a68:	2485883a 	add	r2,r4,r18
    9a6c:	980d883a 	mov	r6,r19
    9a70:	9880022e 	bgeu	r19,r2,9a7c <__sfvwrite_r+0x3ec>
    9a74:	1027883a 	mov	r19,r2
    9a78:	100d883a 	mov	r6,r2
    9a7c:	18c1000c 	andi	r3,r3,1024
    9a80:	18001c26 	beq	r3,zero,9af4 <__sfvwrite_r+0x464>
    9a84:	300b883a 	mov	r5,r6
    9a88:	a809883a 	mov	r4,r21
    9a8c:	0009fc80 	call	9fc8 <_malloc_r>
    9a90:	102f883a 	mov	r23,r2
    9a94:	10002926 	beq	r2,zero,9b3c <__sfvwrite_r+0x4ac>
    9a98:	81400417 	ldw	r5,16(r16)
    9a9c:	b00d883a 	mov	r6,r22
    9aa0:	1009883a 	mov	r4,r2
    9aa4:	000a8b80 	call	a8b8 <memcpy>
    9aa8:	8080030b 	ldhu	r2,12(r16)
    9aac:	00fedfc4 	movi	r3,-1153
    9ab0:	10c4703a 	and	r2,r2,r3
    9ab4:	10802014 	ori	r2,r2,128
    9ab8:	8080030d 	sth	r2,12(r16)
    9abc:	bd89883a 	add	r4,r23,r22
    9ac0:	9d8fc83a 	sub	r7,r19,r22
    9ac4:	85c00415 	stw	r23,16(r16)
    9ac8:	84c00515 	stw	r19,20(r16)
    9acc:	81000015 	stw	r4,0(r16)
    9ad0:	9027883a 	mov	r19,r18
    9ad4:	81c00215 	stw	r7,8(r16)
    9ad8:	902f883a 	mov	r23,r18
    9adc:	003f3b06 	br	97cc <__alt_mem_onchip_memory+0xf78097cc>
    9ae0:	800b883a 	mov	r5,r16
    9ae4:	a809883a 	mov	r4,r21
    9ae8:	0008e300 	call	8e30 <_fflush_r>
    9aec:	103fb926 	beq	r2,zero,99d4 <__alt_mem_onchip_memory+0xf78099d4>
    9af0:	003f6506 	br	9888 <__alt_mem_onchip_memory+0xf7809888>
    9af4:	a809883a 	mov	r4,r21
    9af8:	000bde80 	call	bde8 <_realloc_r>
    9afc:	102f883a 	mov	r23,r2
    9b00:	103fee1e 	bne	r2,zero,9abc <__alt_mem_onchip_memory+0xf7809abc>
    9b04:	81400417 	ldw	r5,16(r16)
    9b08:	a809883a 	mov	r4,r21
    9b0c:	00093800 	call	9380 <_free_r>
    9b10:	8080030b 	ldhu	r2,12(r16)
    9b14:	00ffdfc4 	movi	r3,-129
    9b18:	1884703a 	and	r2,r3,r2
    9b1c:	00c00304 	movi	r3,12
    9b20:	a8c00015 	stw	r3,0(r21)
    9b24:	003f5906 	br	988c <__alt_mem_onchip_memory+0xf780988c>
    9b28:	94c00044 	addi	r19,r18,1
    9b2c:	02000044 	movi	r8,1
    9b30:	003f6006 	br	98b4 <__alt_mem_onchip_memory+0xf78098b4>
    9b34:	00bfffc4 	movi	r2,-1
    9b38:	003f0306 	br	9748 <__alt_mem_onchip_memory+0xf7809748>
    9b3c:	00800304 	movi	r2,12
    9b40:	a8800015 	stw	r2,0(r21)
    9b44:	8080030b 	ldhu	r2,12(r16)
    9b48:	003f5006 	br	988c <__alt_mem_onchip_memory+0xf780988c>

00009b4c <_fwalk>:
    9b4c:	defff704 	addi	sp,sp,-36
    9b50:	dd000415 	stw	r20,16(sp)
    9b54:	dfc00815 	stw	ra,32(sp)
    9b58:	ddc00715 	stw	r23,28(sp)
    9b5c:	dd800615 	stw	r22,24(sp)
    9b60:	dd400515 	stw	r21,20(sp)
    9b64:	dcc00315 	stw	r19,12(sp)
    9b68:	dc800215 	stw	r18,8(sp)
    9b6c:	dc400115 	stw	r17,4(sp)
    9b70:	dc000015 	stw	r16,0(sp)
    9b74:	2500b804 	addi	r20,r4,736
    9b78:	a0002326 	beq	r20,zero,9c08 <_fwalk+0xbc>
    9b7c:	282b883a 	mov	r21,r5
    9b80:	002f883a 	mov	r23,zero
    9b84:	05800044 	movi	r22,1
    9b88:	04ffffc4 	movi	r19,-1
    9b8c:	a4400117 	ldw	r17,4(r20)
    9b90:	a4800217 	ldw	r18,8(r20)
    9b94:	8c7fffc4 	addi	r17,r17,-1
    9b98:	88000d16 	blt	r17,zero,9bd0 <_fwalk+0x84>
    9b9c:	94000304 	addi	r16,r18,12
    9ba0:	94800384 	addi	r18,r18,14
    9ba4:	8080000b 	ldhu	r2,0(r16)
    9ba8:	8c7fffc4 	addi	r17,r17,-1
    9bac:	813ffd04 	addi	r4,r16,-12
    9bb0:	b080042e 	bgeu	r22,r2,9bc4 <_fwalk+0x78>
    9bb4:	9080000f 	ldh	r2,0(r18)
    9bb8:	14c00226 	beq	r2,r19,9bc4 <_fwalk+0x78>
    9bbc:	a83ee83a 	callr	r21
    9bc0:	b8aeb03a 	or	r23,r23,r2
    9bc4:	84001a04 	addi	r16,r16,104
    9bc8:	94801a04 	addi	r18,r18,104
    9bcc:	8cfff51e 	bne	r17,r19,9ba4 <__alt_mem_onchip_memory+0xf7809ba4>
    9bd0:	a5000017 	ldw	r20,0(r20)
    9bd4:	a03fed1e 	bne	r20,zero,9b8c <__alt_mem_onchip_memory+0xf7809b8c>
    9bd8:	b805883a 	mov	r2,r23
    9bdc:	dfc00817 	ldw	ra,32(sp)
    9be0:	ddc00717 	ldw	r23,28(sp)
    9be4:	dd800617 	ldw	r22,24(sp)
    9be8:	dd400517 	ldw	r21,20(sp)
    9bec:	dd000417 	ldw	r20,16(sp)
    9bf0:	dcc00317 	ldw	r19,12(sp)
    9bf4:	dc800217 	ldw	r18,8(sp)
    9bf8:	dc400117 	ldw	r17,4(sp)
    9bfc:	dc000017 	ldw	r16,0(sp)
    9c00:	dec00904 	addi	sp,sp,36
    9c04:	f800283a 	ret
    9c08:	002f883a 	mov	r23,zero
    9c0c:	003ff206 	br	9bd8 <__alt_mem_onchip_memory+0xf7809bd8>

00009c10 <_fwalk_reent>:
    9c10:	defff704 	addi	sp,sp,-36
    9c14:	dd000415 	stw	r20,16(sp)
    9c18:	dfc00815 	stw	ra,32(sp)
    9c1c:	ddc00715 	stw	r23,28(sp)
    9c20:	dd800615 	stw	r22,24(sp)
    9c24:	dd400515 	stw	r21,20(sp)
    9c28:	dcc00315 	stw	r19,12(sp)
    9c2c:	dc800215 	stw	r18,8(sp)
    9c30:	dc400115 	stw	r17,4(sp)
    9c34:	dc000015 	stw	r16,0(sp)
    9c38:	2500b804 	addi	r20,r4,736
    9c3c:	a0002326 	beq	r20,zero,9ccc <_fwalk_reent+0xbc>
    9c40:	282b883a 	mov	r21,r5
    9c44:	2027883a 	mov	r19,r4
    9c48:	002f883a 	mov	r23,zero
    9c4c:	05800044 	movi	r22,1
    9c50:	04bfffc4 	movi	r18,-1
    9c54:	a4400117 	ldw	r17,4(r20)
    9c58:	a4000217 	ldw	r16,8(r20)
    9c5c:	8c7fffc4 	addi	r17,r17,-1
    9c60:	88000c16 	blt	r17,zero,9c94 <_fwalk_reent+0x84>
    9c64:	84000304 	addi	r16,r16,12
    9c68:	8080000b 	ldhu	r2,0(r16)
    9c6c:	8c7fffc4 	addi	r17,r17,-1
    9c70:	817ffd04 	addi	r5,r16,-12
    9c74:	b080052e 	bgeu	r22,r2,9c8c <_fwalk_reent+0x7c>
    9c78:	8080008f 	ldh	r2,2(r16)
    9c7c:	9809883a 	mov	r4,r19
    9c80:	14800226 	beq	r2,r18,9c8c <_fwalk_reent+0x7c>
    9c84:	a83ee83a 	callr	r21
    9c88:	b8aeb03a 	or	r23,r23,r2
    9c8c:	84001a04 	addi	r16,r16,104
    9c90:	8cbff51e 	bne	r17,r18,9c68 <__alt_mem_onchip_memory+0xf7809c68>
    9c94:	a5000017 	ldw	r20,0(r20)
    9c98:	a03fee1e 	bne	r20,zero,9c54 <__alt_mem_onchip_memory+0xf7809c54>
    9c9c:	b805883a 	mov	r2,r23
    9ca0:	dfc00817 	ldw	ra,32(sp)
    9ca4:	ddc00717 	ldw	r23,28(sp)
    9ca8:	dd800617 	ldw	r22,24(sp)
    9cac:	dd400517 	ldw	r21,20(sp)
    9cb0:	dd000417 	ldw	r20,16(sp)
    9cb4:	dcc00317 	ldw	r19,12(sp)
    9cb8:	dc800217 	ldw	r18,8(sp)
    9cbc:	dc400117 	ldw	r17,4(sp)
    9cc0:	dc000017 	ldw	r16,0(sp)
    9cc4:	dec00904 	addi	sp,sp,36
    9cc8:	f800283a 	ret
    9ccc:	002f883a 	mov	r23,zero
    9cd0:	003ff206 	br	9c9c <__alt_mem_onchip_memory+0xf7809c9c>

00009cd4 <_gettimeofday_r>:
    9cd4:	defffd04 	addi	sp,sp,-12
    9cd8:	2805883a 	mov	r2,r5
    9cdc:	dc000015 	stw	r16,0(sp)
    9ce0:	04000074 	movhi	r16,1
    9ce4:	dc400115 	stw	r17,4(sp)
    9ce8:	84169e04 	addi	r16,r16,23160
    9cec:	2023883a 	mov	r17,r4
    9cf0:	300b883a 	mov	r5,r6
    9cf4:	1009883a 	mov	r4,r2
    9cf8:	dfc00215 	stw	ra,8(sp)
    9cfc:	80000015 	stw	zero,0(r16)
    9d00:	000f3980 	call	f398 <gettimeofday>
    9d04:	00ffffc4 	movi	r3,-1
    9d08:	10c00526 	beq	r2,r3,9d20 <_gettimeofday_r+0x4c>
    9d0c:	dfc00217 	ldw	ra,8(sp)
    9d10:	dc400117 	ldw	r17,4(sp)
    9d14:	dc000017 	ldw	r16,0(sp)
    9d18:	dec00304 	addi	sp,sp,12
    9d1c:	f800283a 	ret
    9d20:	80c00017 	ldw	r3,0(r16)
    9d24:	183ff926 	beq	r3,zero,9d0c <__alt_mem_onchip_memory+0xf7809d0c>
    9d28:	88c00015 	stw	r3,0(r17)
    9d2c:	003ff706 	br	9d0c <__alt_mem_onchip_memory+0xf7809d0c>

00009d30 <_setlocale_r>:
    9d30:	30001b26 	beq	r6,zero,9da0 <_setlocale_r+0x70>
    9d34:	01400074 	movhi	r5,1
    9d38:	defffe04 	addi	sp,sp,-8
    9d3c:	29487804 	addi	r5,r5,8672
    9d40:	3009883a 	mov	r4,r6
    9d44:	dc000015 	stw	r16,0(sp)
    9d48:	dfc00115 	stw	ra,4(sp)
    9d4c:	3021883a 	mov	r16,r6
    9d50:	000c4dc0 	call	c4dc <strcmp>
    9d54:	1000061e 	bne	r2,zero,9d70 <_setlocale_r+0x40>
    9d58:	00800074 	movhi	r2,1
    9d5c:	10885904 	addi	r2,r2,8548
    9d60:	dfc00117 	ldw	ra,4(sp)
    9d64:	dc000017 	ldw	r16,0(sp)
    9d68:	dec00204 	addi	sp,sp,8
    9d6c:	f800283a 	ret
    9d70:	01400074 	movhi	r5,1
    9d74:	29485904 	addi	r5,r5,8548
    9d78:	8009883a 	mov	r4,r16
    9d7c:	000c4dc0 	call	c4dc <strcmp>
    9d80:	103ff526 	beq	r2,zero,9d58 <__alt_mem_onchip_memory+0xf7809d58>
    9d84:	01400074 	movhi	r5,1
    9d88:	29486304 	addi	r5,r5,8588
    9d8c:	8009883a 	mov	r4,r16
    9d90:	000c4dc0 	call	c4dc <strcmp>
    9d94:	103ff026 	beq	r2,zero,9d58 <__alt_mem_onchip_memory+0xf7809d58>
    9d98:	0005883a 	mov	r2,zero
    9d9c:	003ff006 	br	9d60 <__alt_mem_onchip_memory+0xf7809d60>
    9da0:	00800074 	movhi	r2,1
    9da4:	10885904 	addi	r2,r2,8548
    9da8:	f800283a 	ret

00009dac <__locale_charset>:
    9dac:	00800074 	movhi	r2,1
    9db0:	108a2804 	addi	r2,r2,10400
    9db4:	f800283a 	ret

00009db8 <__locale_mb_cur_max>:
    9db8:	00800074 	movhi	r2,1
    9dbc:	108fc904 	addi	r2,r2,16164
    9dc0:	10800017 	ldw	r2,0(r2)
    9dc4:	f800283a 	ret

00009dc8 <__locale_msgcharset>:
    9dc8:	00800074 	movhi	r2,1
    9dcc:	108a2004 	addi	r2,r2,10368
    9dd0:	f800283a 	ret

00009dd4 <__locale_cjk_lang>:
    9dd4:	0005883a 	mov	r2,zero
    9dd8:	f800283a 	ret

00009ddc <_localeconv_r>:
    9ddc:	00800074 	movhi	r2,1
    9de0:	108a3004 	addi	r2,r2,10432
    9de4:	f800283a 	ret

00009de8 <setlocale>:
    9de8:	00800074 	movhi	r2,1
    9dec:	108fc804 	addi	r2,r2,16160
    9df0:	280d883a 	mov	r6,r5
    9df4:	200b883a 	mov	r5,r4
    9df8:	11000017 	ldw	r4,0(r2)
    9dfc:	0009d301 	jmpi	9d30 <_setlocale_r>

00009e00 <localeconv>:
    9e00:	00800074 	movhi	r2,1
    9e04:	108a3004 	addi	r2,r2,10432
    9e08:	f800283a 	ret

00009e0c <__smakebuf_r>:
    9e0c:	2880030b 	ldhu	r2,12(r5)
    9e10:	10c0008c 	andi	r3,r2,2
    9e14:	1800411e 	bne	r3,zero,9f1c <__smakebuf_r+0x110>
    9e18:	deffec04 	addi	sp,sp,-80
    9e1c:	dc000f15 	stw	r16,60(sp)
    9e20:	2821883a 	mov	r16,r5
    9e24:	2940038f 	ldh	r5,14(r5)
    9e28:	dc401015 	stw	r17,64(sp)
    9e2c:	dfc01315 	stw	ra,76(sp)
    9e30:	dcc01215 	stw	r19,72(sp)
    9e34:	dc801115 	stw	r18,68(sp)
    9e38:	2023883a 	mov	r17,r4
    9e3c:	28001c16 	blt	r5,zero,9eb0 <__smakebuf_r+0xa4>
    9e40:	d80d883a 	mov	r6,sp
    9e44:	000e1dc0 	call	e1dc <_fstat_r>
    9e48:	10001816 	blt	r2,zero,9eac <__smakebuf_r+0xa0>
    9e4c:	d8800117 	ldw	r2,4(sp)
    9e50:	00e00014 	movui	r3,32768
    9e54:	10bc000c 	andi	r2,r2,61440
    9e58:	14c80020 	cmpeqi	r19,r2,8192
    9e5c:	10c03726 	beq	r2,r3,9f3c <__smakebuf_r+0x130>
    9e60:	80c0030b 	ldhu	r3,12(r16)
    9e64:	18c20014 	ori	r3,r3,2048
    9e68:	80c0030d 	sth	r3,12(r16)
    9e6c:	00c80004 	movi	r3,8192
    9e70:	10c0521e 	bne	r2,r3,9fbc <__smakebuf_r+0x1b0>
    9e74:	8140038f 	ldh	r5,14(r16)
    9e78:	8809883a 	mov	r4,r17
    9e7c:	000e2380 	call	e238 <_isatty_r>
    9e80:	10004c26 	beq	r2,zero,9fb4 <__smakebuf_r+0x1a8>
    9e84:	8080030b 	ldhu	r2,12(r16)
    9e88:	80c010c4 	addi	r3,r16,67
    9e8c:	80c00015 	stw	r3,0(r16)
    9e90:	10800054 	ori	r2,r2,1
    9e94:	8080030d 	sth	r2,12(r16)
    9e98:	00800044 	movi	r2,1
    9e9c:	80c00415 	stw	r3,16(r16)
    9ea0:	80800515 	stw	r2,20(r16)
    9ea4:	04810004 	movi	r18,1024
    9ea8:	00000706 	br	9ec8 <__smakebuf_r+0xbc>
    9eac:	8080030b 	ldhu	r2,12(r16)
    9eb0:	10c0200c 	andi	r3,r2,128
    9eb4:	18001f1e 	bne	r3,zero,9f34 <__smakebuf_r+0x128>
    9eb8:	04810004 	movi	r18,1024
    9ebc:	10820014 	ori	r2,r2,2048
    9ec0:	8080030d 	sth	r2,12(r16)
    9ec4:	0027883a 	mov	r19,zero
    9ec8:	900b883a 	mov	r5,r18
    9ecc:	8809883a 	mov	r4,r17
    9ed0:	0009fc80 	call	9fc8 <_malloc_r>
    9ed4:	10002c26 	beq	r2,zero,9f88 <__smakebuf_r+0x17c>
    9ed8:	80c0030b 	ldhu	r3,12(r16)
    9edc:	01000074 	movhi	r4,1
    9ee0:	2123b104 	addi	r4,r4,-28988
    9ee4:	89000f15 	stw	r4,60(r17)
    9ee8:	18c02014 	ori	r3,r3,128
    9eec:	80c0030d 	sth	r3,12(r16)
    9ef0:	80800015 	stw	r2,0(r16)
    9ef4:	80800415 	stw	r2,16(r16)
    9ef8:	84800515 	stw	r18,20(r16)
    9efc:	98001a1e 	bne	r19,zero,9f68 <__smakebuf_r+0x15c>
    9f00:	dfc01317 	ldw	ra,76(sp)
    9f04:	dcc01217 	ldw	r19,72(sp)
    9f08:	dc801117 	ldw	r18,68(sp)
    9f0c:	dc401017 	ldw	r17,64(sp)
    9f10:	dc000f17 	ldw	r16,60(sp)
    9f14:	dec01404 	addi	sp,sp,80
    9f18:	f800283a 	ret
    9f1c:	288010c4 	addi	r2,r5,67
    9f20:	28800015 	stw	r2,0(r5)
    9f24:	28800415 	stw	r2,16(r5)
    9f28:	00800044 	movi	r2,1
    9f2c:	28800515 	stw	r2,20(r5)
    9f30:	f800283a 	ret
    9f34:	04801004 	movi	r18,64
    9f38:	003fe006 	br	9ebc <__alt_mem_onchip_memory+0xf7809ebc>
    9f3c:	81000a17 	ldw	r4,40(r16)
    9f40:	00c00074 	movhi	r3,1
    9f44:	18f11e04 	addi	r3,r3,-15240
    9f48:	20ffc51e 	bne	r4,r3,9e60 <__alt_mem_onchip_memory+0xf7809e60>
    9f4c:	8080030b 	ldhu	r2,12(r16)
    9f50:	04810004 	movi	r18,1024
    9f54:	84801315 	stw	r18,76(r16)
    9f58:	1484b03a 	or	r2,r2,r18
    9f5c:	8080030d 	sth	r2,12(r16)
    9f60:	0027883a 	mov	r19,zero
    9f64:	003fd806 	br	9ec8 <__alt_mem_onchip_memory+0xf7809ec8>
    9f68:	8140038f 	ldh	r5,14(r16)
    9f6c:	8809883a 	mov	r4,r17
    9f70:	000e2380 	call	e238 <_isatty_r>
    9f74:	103fe226 	beq	r2,zero,9f00 <__alt_mem_onchip_memory+0xf7809f00>
    9f78:	8080030b 	ldhu	r2,12(r16)
    9f7c:	10800054 	ori	r2,r2,1
    9f80:	8080030d 	sth	r2,12(r16)
    9f84:	003fde06 	br	9f00 <__alt_mem_onchip_memory+0xf7809f00>
    9f88:	8080030b 	ldhu	r2,12(r16)
    9f8c:	10c0800c 	andi	r3,r2,512
    9f90:	183fdb1e 	bne	r3,zero,9f00 <__alt_mem_onchip_memory+0xf7809f00>
    9f94:	10800094 	ori	r2,r2,2
    9f98:	80c010c4 	addi	r3,r16,67
    9f9c:	8080030d 	sth	r2,12(r16)
    9fa0:	00800044 	movi	r2,1
    9fa4:	80c00015 	stw	r3,0(r16)
    9fa8:	80c00415 	stw	r3,16(r16)
    9fac:	80800515 	stw	r2,20(r16)
    9fb0:	003fd306 	br	9f00 <__alt_mem_onchip_memory+0xf7809f00>
    9fb4:	04810004 	movi	r18,1024
    9fb8:	003fc306 	br	9ec8 <__alt_mem_onchip_memory+0xf7809ec8>
    9fbc:	0027883a 	mov	r19,zero
    9fc0:	04810004 	movi	r18,1024
    9fc4:	003fc006 	br	9ec8 <__alt_mem_onchip_memory+0xf7809ec8>

00009fc8 <_malloc_r>:
    9fc8:	defff504 	addi	sp,sp,-44
    9fcc:	dc800315 	stw	r18,12(sp)
    9fd0:	dfc00a15 	stw	ra,40(sp)
    9fd4:	df000915 	stw	fp,36(sp)
    9fd8:	ddc00815 	stw	r23,32(sp)
    9fdc:	dd800715 	stw	r22,28(sp)
    9fe0:	dd400615 	stw	r21,24(sp)
    9fe4:	dd000515 	stw	r20,20(sp)
    9fe8:	dcc00415 	stw	r19,16(sp)
    9fec:	dc400215 	stw	r17,8(sp)
    9ff0:	dc000115 	stw	r16,4(sp)
    9ff4:	288002c4 	addi	r2,r5,11
    9ff8:	00c00584 	movi	r3,22
    9ffc:	2025883a 	mov	r18,r4
    a000:	18807f2e 	bgeu	r3,r2,a200 <_malloc_r+0x238>
    a004:	047ffe04 	movi	r17,-8
    a008:	1462703a 	and	r17,r2,r17
    a00c:	8800a316 	blt	r17,zero,a29c <_malloc_r+0x2d4>
    a010:	8940a236 	bltu	r17,r5,a29c <_malloc_r+0x2d4>
    a014:	000f8e40 	call	f8e4 <__malloc_lock>
    a018:	00807dc4 	movi	r2,503
    a01c:	1441e92e 	bgeu	r2,r17,a7c4 <_malloc_r+0x7fc>
    a020:	8804d27a 	srli	r2,r17,9
    a024:	1000a126 	beq	r2,zero,a2ac <_malloc_r+0x2e4>
    a028:	00c00104 	movi	r3,4
    a02c:	18811e36 	bltu	r3,r2,a4a8 <_malloc_r+0x4e0>
    a030:	8804d1ba 	srli	r2,r17,6
    a034:	12000e44 	addi	r8,r2,57
    a038:	11c00e04 	addi	r7,r2,56
    a03c:	4209883a 	add	r4,r8,r8
    a040:	04c00074 	movhi	r19,1
    a044:	2109883a 	add	r4,r4,r4
    a048:	9cca3e04 	addi	r19,r19,10488
    a04c:	2109883a 	add	r4,r4,r4
    a050:	9909883a 	add	r4,r19,r4
    a054:	24000117 	ldw	r16,4(r4)
    a058:	213ffe04 	addi	r4,r4,-8
    a05c:	24009726 	beq	r4,r16,a2bc <_malloc_r+0x2f4>
    a060:	80800117 	ldw	r2,4(r16)
    a064:	01bfff04 	movi	r6,-4
    a068:	014003c4 	movi	r5,15
    a06c:	1184703a 	and	r2,r2,r6
    a070:	1447c83a 	sub	r3,r2,r17
    a074:	28c00716 	blt	r5,r3,a094 <_malloc_r+0xcc>
    a078:	1800920e 	bge	r3,zero,a2c4 <_malloc_r+0x2fc>
    a07c:	84000317 	ldw	r16,12(r16)
    a080:	24008e26 	beq	r4,r16,a2bc <_malloc_r+0x2f4>
    a084:	80800117 	ldw	r2,4(r16)
    a088:	1184703a 	and	r2,r2,r6
    a08c:	1447c83a 	sub	r3,r2,r17
    a090:	28fff90e 	bge	r5,r3,a078 <__alt_mem_onchip_memory+0xf780a078>
    a094:	3809883a 	mov	r4,r7
    a098:	01800074 	movhi	r6,1
    a09c:	9c000417 	ldw	r16,16(r19)
    a0a0:	318a3e04 	addi	r6,r6,10488
    a0a4:	32000204 	addi	r8,r6,8
    a0a8:	82013426 	beq	r16,r8,a57c <_malloc_r+0x5b4>
    a0ac:	80c00117 	ldw	r3,4(r16)
    a0b0:	00bfff04 	movi	r2,-4
    a0b4:	188e703a 	and	r7,r3,r2
    a0b8:	3c45c83a 	sub	r2,r7,r17
    a0bc:	00c003c4 	movi	r3,15
    a0c0:	18811f16 	blt	r3,r2,a540 <_malloc_r+0x578>
    a0c4:	32000515 	stw	r8,20(r6)
    a0c8:	32000415 	stw	r8,16(r6)
    a0cc:	10007f0e 	bge	r2,zero,a2cc <_malloc_r+0x304>
    a0d0:	00807fc4 	movi	r2,511
    a0d4:	11c0fd36 	bltu	r2,r7,a4cc <_malloc_r+0x504>
    a0d8:	3806d0fa 	srli	r3,r7,3
    a0dc:	01c00044 	movi	r7,1
    a0e0:	30800117 	ldw	r2,4(r6)
    a0e4:	19400044 	addi	r5,r3,1
    a0e8:	294b883a 	add	r5,r5,r5
    a0ec:	1807d0ba 	srai	r3,r3,2
    a0f0:	294b883a 	add	r5,r5,r5
    a0f4:	294b883a 	add	r5,r5,r5
    a0f8:	298b883a 	add	r5,r5,r6
    a0fc:	38c6983a 	sll	r3,r7,r3
    a100:	29c00017 	ldw	r7,0(r5)
    a104:	2a7ffe04 	addi	r9,r5,-8
    a108:	1886b03a 	or	r3,r3,r2
    a10c:	82400315 	stw	r9,12(r16)
    a110:	81c00215 	stw	r7,8(r16)
    a114:	30c00115 	stw	r3,4(r6)
    a118:	2c000015 	stw	r16,0(r5)
    a11c:	3c000315 	stw	r16,12(r7)
    a120:	2005d0ba 	srai	r2,r4,2
    a124:	01400044 	movi	r5,1
    a128:	288a983a 	sll	r5,r5,r2
    a12c:	19406f36 	bltu	r3,r5,a2ec <_malloc_r+0x324>
    a130:	28c4703a 	and	r2,r5,r3
    a134:	10000a1e 	bne	r2,zero,a160 <_malloc_r+0x198>
    a138:	00bfff04 	movi	r2,-4
    a13c:	294b883a 	add	r5,r5,r5
    a140:	2088703a 	and	r4,r4,r2
    a144:	28c4703a 	and	r2,r5,r3
    a148:	21000104 	addi	r4,r4,4
    a14c:	1000041e 	bne	r2,zero,a160 <_malloc_r+0x198>
    a150:	294b883a 	add	r5,r5,r5
    a154:	28c4703a 	and	r2,r5,r3
    a158:	21000104 	addi	r4,r4,4
    a15c:	103ffc26 	beq	r2,zero,a150 <__alt_mem_onchip_memory+0xf780a150>
    a160:	02bfff04 	movi	r10,-4
    a164:	024003c4 	movi	r9,15
    a168:	21800044 	addi	r6,r4,1
    a16c:	318d883a 	add	r6,r6,r6
    a170:	318d883a 	add	r6,r6,r6
    a174:	318d883a 	add	r6,r6,r6
    a178:	998d883a 	add	r6,r19,r6
    a17c:	333ffe04 	addi	r12,r6,-8
    a180:	2017883a 	mov	r11,r4
    a184:	31800104 	addi	r6,r6,4
    a188:	34000017 	ldw	r16,0(r6)
    a18c:	31fffd04 	addi	r7,r6,-12
    a190:	81c0041e 	bne	r16,r7,a1a4 <_malloc_r+0x1dc>
    a194:	0000fb06 	br	a584 <_malloc_r+0x5bc>
    a198:	1801030e 	bge	r3,zero,a5a8 <_malloc_r+0x5e0>
    a19c:	84000317 	ldw	r16,12(r16)
    a1a0:	81c0f826 	beq	r16,r7,a584 <_malloc_r+0x5bc>
    a1a4:	80800117 	ldw	r2,4(r16)
    a1a8:	1284703a 	and	r2,r2,r10
    a1ac:	1447c83a 	sub	r3,r2,r17
    a1b0:	48fff90e 	bge	r9,r3,a198 <__alt_mem_onchip_memory+0xf780a198>
    a1b4:	80800317 	ldw	r2,12(r16)
    a1b8:	81000217 	ldw	r4,8(r16)
    a1bc:	89400054 	ori	r5,r17,1
    a1c0:	81400115 	stw	r5,4(r16)
    a1c4:	20800315 	stw	r2,12(r4)
    a1c8:	11000215 	stw	r4,8(r2)
    a1cc:	8463883a 	add	r17,r16,r17
    a1d0:	9c400515 	stw	r17,20(r19)
    a1d4:	9c400415 	stw	r17,16(r19)
    a1d8:	18800054 	ori	r2,r3,1
    a1dc:	88800115 	stw	r2,4(r17)
    a1e0:	8a000315 	stw	r8,12(r17)
    a1e4:	8a000215 	stw	r8,8(r17)
    a1e8:	88e3883a 	add	r17,r17,r3
    a1ec:	88c00015 	stw	r3,0(r17)
    a1f0:	9009883a 	mov	r4,r18
    a1f4:	000f9080 	call	f908 <__malloc_unlock>
    a1f8:	80800204 	addi	r2,r16,8
    a1fc:	00001b06 	br	a26c <_malloc_r+0x2a4>
    a200:	04400404 	movi	r17,16
    a204:	89402536 	bltu	r17,r5,a29c <_malloc_r+0x2d4>
    a208:	000f8e40 	call	f8e4 <__malloc_lock>
    a20c:	00800184 	movi	r2,6
    a210:	01000084 	movi	r4,2
    a214:	04c00074 	movhi	r19,1
    a218:	1085883a 	add	r2,r2,r2
    a21c:	9cca3e04 	addi	r19,r19,10488
    a220:	1085883a 	add	r2,r2,r2
    a224:	9885883a 	add	r2,r19,r2
    a228:	14000117 	ldw	r16,4(r2)
    a22c:	10fffe04 	addi	r3,r2,-8
    a230:	80c0d926 	beq	r16,r3,a598 <_malloc_r+0x5d0>
    a234:	80c00117 	ldw	r3,4(r16)
    a238:	81000317 	ldw	r4,12(r16)
    a23c:	00bfff04 	movi	r2,-4
    a240:	1884703a 	and	r2,r3,r2
    a244:	81400217 	ldw	r5,8(r16)
    a248:	8085883a 	add	r2,r16,r2
    a24c:	10c00117 	ldw	r3,4(r2)
    a250:	29000315 	stw	r4,12(r5)
    a254:	21400215 	stw	r5,8(r4)
    a258:	18c00054 	ori	r3,r3,1
    a25c:	10c00115 	stw	r3,4(r2)
    a260:	9009883a 	mov	r4,r18
    a264:	000f9080 	call	f908 <__malloc_unlock>
    a268:	80800204 	addi	r2,r16,8
    a26c:	dfc00a17 	ldw	ra,40(sp)
    a270:	df000917 	ldw	fp,36(sp)
    a274:	ddc00817 	ldw	r23,32(sp)
    a278:	dd800717 	ldw	r22,28(sp)
    a27c:	dd400617 	ldw	r21,24(sp)
    a280:	dd000517 	ldw	r20,20(sp)
    a284:	dcc00417 	ldw	r19,16(sp)
    a288:	dc800317 	ldw	r18,12(sp)
    a28c:	dc400217 	ldw	r17,8(sp)
    a290:	dc000117 	ldw	r16,4(sp)
    a294:	dec00b04 	addi	sp,sp,44
    a298:	f800283a 	ret
    a29c:	00800304 	movi	r2,12
    a2a0:	90800015 	stw	r2,0(r18)
    a2a4:	0005883a 	mov	r2,zero
    a2a8:	003ff006 	br	a26c <__alt_mem_onchip_memory+0xf780a26c>
    a2ac:	01002004 	movi	r4,128
    a2b0:	02001004 	movi	r8,64
    a2b4:	01c00fc4 	movi	r7,63
    a2b8:	003f6106 	br	a040 <__alt_mem_onchip_memory+0xf780a040>
    a2bc:	4009883a 	mov	r4,r8
    a2c0:	003f7506 	br	a098 <__alt_mem_onchip_memory+0xf780a098>
    a2c4:	81000317 	ldw	r4,12(r16)
    a2c8:	003fde06 	br	a244 <__alt_mem_onchip_memory+0xf780a244>
    a2cc:	81c5883a 	add	r2,r16,r7
    a2d0:	11400117 	ldw	r5,4(r2)
    a2d4:	9009883a 	mov	r4,r18
    a2d8:	29400054 	ori	r5,r5,1
    a2dc:	11400115 	stw	r5,4(r2)
    a2e0:	000f9080 	call	f908 <__malloc_unlock>
    a2e4:	80800204 	addi	r2,r16,8
    a2e8:	003fe006 	br	a26c <__alt_mem_onchip_memory+0xf780a26c>
    a2ec:	9c000217 	ldw	r16,8(r19)
    a2f0:	00bfff04 	movi	r2,-4
    a2f4:	85800117 	ldw	r22,4(r16)
    a2f8:	b0ac703a 	and	r22,r22,r2
    a2fc:	b4400336 	bltu	r22,r17,a30c <_malloc_r+0x344>
    a300:	b445c83a 	sub	r2,r22,r17
    a304:	00c003c4 	movi	r3,15
    a308:	18805d16 	blt	r3,r2,a480 <_malloc_r+0x4b8>
    a30c:	05c00074 	movhi	r23,1
    a310:	00800074 	movhi	r2,1
    a314:	1096a404 	addi	r2,r2,23184
    a318:	bdcfca04 	addi	r23,r23,16168
    a31c:	15400017 	ldw	r21,0(r2)
    a320:	b8c00017 	ldw	r3,0(r23)
    a324:	00bfffc4 	movi	r2,-1
    a328:	858d883a 	add	r6,r16,r22
    a32c:	8d6b883a 	add	r21,r17,r21
    a330:	1880ea26 	beq	r3,r2,a6dc <_malloc_r+0x714>
    a334:	ad4403c4 	addi	r21,r21,4111
    a338:	00bc0004 	movi	r2,-4096
    a33c:	a8aa703a 	and	r21,r21,r2
    a340:	a80b883a 	mov	r5,r21
    a344:	9009883a 	mov	r4,r18
    a348:	d9800015 	stw	r6,0(sp)
    a34c:	000c34c0 	call	c34c <_sbrk_r>
    a350:	1029883a 	mov	r20,r2
    a354:	00bfffc4 	movi	r2,-1
    a358:	d9800017 	ldw	r6,0(sp)
    a35c:	a080e826 	beq	r20,r2,a700 <_malloc_r+0x738>
    a360:	a180a636 	bltu	r20,r6,a5fc <_malloc_r+0x634>
    a364:	07000074 	movhi	fp,1
    a368:	e716b004 	addi	fp,fp,23232
    a36c:	e0800017 	ldw	r2,0(fp)
    a370:	a887883a 	add	r3,r21,r2
    a374:	e0c00015 	stw	r3,0(fp)
    a378:	3500e626 	beq	r6,r20,a714 <_malloc_r+0x74c>
    a37c:	b9000017 	ldw	r4,0(r23)
    a380:	00bfffc4 	movi	r2,-1
    a384:	2080ee26 	beq	r4,r2,a740 <_malloc_r+0x778>
    a388:	a185c83a 	sub	r2,r20,r6
    a38c:	10c5883a 	add	r2,r2,r3
    a390:	e0800015 	stw	r2,0(fp)
    a394:	a0c001cc 	andi	r3,r20,7
    a398:	1800bc26 	beq	r3,zero,a68c <_malloc_r+0x6c4>
    a39c:	a0e9c83a 	sub	r20,r20,r3
    a3a0:	00840204 	movi	r2,4104
    a3a4:	a5000204 	addi	r20,r20,8
    a3a8:	10c7c83a 	sub	r3,r2,r3
    a3ac:	a545883a 	add	r2,r20,r21
    a3b0:	1083ffcc 	andi	r2,r2,4095
    a3b4:	18abc83a 	sub	r21,r3,r2
    a3b8:	a80b883a 	mov	r5,r21
    a3bc:	9009883a 	mov	r4,r18
    a3c0:	000c34c0 	call	c34c <_sbrk_r>
    a3c4:	00ffffc4 	movi	r3,-1
    a3c8:	10c0e126 	beq	r2,r3,a750 <_malloc_r+0x788>
    a3cc:	1505c83a 	sub	r2,r2,r20
    a3d0:	1545883a 	add	r2,r2,r21
    a3d4:	10800054 	ori	r2,r2,1
    a3d8:	e0c00017 	ldw	r3,0(fp)
    a3dc:	9d000215 	stw	r20,8(r19)
    a3e0:	a0800115 	stw	r2,4(r20)
    a3e4:	a8c7883a 	add	r3,r21,r3
    a3e8:	e0c00015 	stw	r3,0(fp)
    a3ec:	84c00e26 	beq	r16,r19,a428 <_malloc_r+0x460>
    a3f0:	018003c4 	movi	r6,15
    a3f4:	3580a72e 	bgeu	r6,r22,a694 <_malloc_r+0x6cc>
    a3f8:	81400117 	ldw	r5,4(r16)
    a3fc:	013ffe04 	movi	r4,-8
    a400:	b0bffd04 	addi	r2,r22,-12
    a404:	1104703a 	and	r2,r2,r4
    a408:	2900004c 	andi	r4,r5,1
    a40c:	2088b03a 	or	r4,r4,r2
    a410:	81000115 	stw	r4,4(r16)
    a414:	01400144 	movi	r5,5
    a418:	8089883a 	add	r4,r16,r2
    a41c:	21400115 	stw	r5,4(r4)
    a420:	21400215 	stw	r5,8(r4)
    a424:	3080cd36 	bltu	r6,r2,a75c <_malloc_r+0x794>
    a428:	00800074 	movhi	r2,1
    a42c:	1096a304 	addi	r2,r2,23180
    a430:	11000017 	ldw	r4,0(r2)
    a434:	20c0012e 	bgeu	r4,r3,a43c <_malloc_r+0x474>
    a438:	10c00015 	stw	r3,0(r2)
    a43c:	00800074 	movhi	r2,1
    a440:	1096a204 	addi	r2,r2,23176
    a444:	11000017 	ldw	r4,0(r2)
    a448:	9c000217 	ldw	r16,8(r19)
    a44c:	20c0012e 	bgeu	r4,r3,a454 <_malloc_r+0x48c>
    a450:	10c00015 	stw	r3,0(r2)
    a454:	80c00117 	ldw	r3,4(r16)
    a458:	00bfff04 	movi	r2,-4
    a45c:	1886703a 	and	r3,r3,r2
    a460:	1c45c83a 	sub	r2,r3,r17
    a464:	1c400236 	bltu	r3,r17,a470 <_malloc_r+0x4a8>
    a468:	00c003c4 	movi	r3,15
    a46c:	18800416 	blt	r3,r2,a480 <_malloc_r+0x4b8>
    a470:	9009883a 	mov	r4,r18
    a474:	000f9080 	call	f908 <__malloc_unlock>
    a478:	0005883a 	mov	r2,zero
    a47c:	003f7b06 	br	a26c <__alt_mem_onchip_memory+0xf780a26c>
    a480:	88c00054 	ori	r3,r17,1
    a484:	80c00115 	stw	r3,4(r16)
    a488:	8463883a 	add	r17,r16,r17
    a48c:	10800054 	ori	r2,r2,1
    a490:	9c400215 	stw	r17,8(r19)
    a494:	88800115 	stw	r2,4(r17)
    a498:	9009883a 	mov	r4,r18
    a49c:	000f9080 	call	f908 <__malloc_unlock>
    a4a0:	80800204 	addi	r2,r16,8
    a4a4:	003f7106 	br	a26c <__alt_mem_onchip_memory+0xf780a26c>
    a4a8:	00c00504 	movi	r3,20
    a4ac:	18804a2e 	bgeu	r3,r2,a5d8 <_malloc_r+0x610>
    a4b0:	00c01504 	movi	r3,84
    a4b4:	18806e36 	bltu	r3,r2,a670 <_malloc_r+0x6a8>
    a4b8:	8804d33a 	srli	r2,r17,12
    a4bc:	12001bc4 	addi	r8,r2,111
    a4c0:	11c01b84 	addi	r7,r2,110
    a4c4:	4209883a 	add	r4,r8,r8
    a4c8:	003edd06 	br	a040 <__alt_mem_onchip_memory+0xf780a040>
    a4cc:	3804d27a 	srli	r2,r7,9
    a4d0:	00c00104 	movi	r3,4
    a4d4:	1880442e 	bgeu	r3,r2,a5e8 <_malloc_r+0x620>
    a4d8:	00c00504 	movi	r3,20
    a4dc:	18808136 	bltu	r3,r2,a6e4 <_malloc_r+0x71c>
    a4e0:	11401704 	addi	r5,r2,92
    a4e4:	10c016c4 	addi	r3,r2,91
    a4e8:	294b883a 	add	r5,r5,r5
    a4ec:	294b883a 	add	r5,r5,r5
    a4f0:	294b883a 	add	r5,r5,r5
    a4f4:	994b883a 	add	r5,r19,r5
    a4f8:	28800017 	ldw	r2,0(r5)
    a4fc:	01800074 	movhi	r6,1
    a500:	297ffe04 	addi	r5,r5,-8
    a504:	318a3e04 	addi	r6,r6,10488
    a508:	28806526 	beq	r5,r2,a6a0 <_malloc_r+0x6d8>
    a50c:	01bfff04 	movi	r6,-4
    a510:	10c00117 	ldw	r3,4(r2)
    a514:	1986703a 	and	r3,r3,r6
    a518:	38c0022e 	bgeu	r7,r3,a524 <_malloc_r+0x55c>
    a51c:	10800217 	ldw	r2,8(r2)
    a520:	28bffb1e 	bne	r5,r2,a510 <__alt_mem_onchip_memory+0xf780a510>
    a524:	11400317 	ldw	r5,12(r2)
    a528:	98c00117 	ldw	r3,4(r19)
    a52c:	81400315 	stw	r5,12(r16)
    a530:	80800215 	stw	r2,8(r16)
    a534:	2c000215 	stw	r16,8(r5)
    a538:	14000315 	stw	r16,12(r2)
    a53c:	003ef806 	br	a120 <__alt_mem_onchip_memory+0xf780a120>
    a540:	88c00054 	ori	r3,r17,1
    a544:	80c00115 	stw	r3,4(r16)
    a548:	8463883a 	add	r17,r16,r17
    a54c:	34400515 	stw	r17,20(r6)
    a550:	34400415 	stw	r17,16(r6)
    a554:	10c00054 	ori	r3,r2,1
    a558:	8a000315 	stw	r8,12(r17)
    a55c:	8a000215 	stw	r8,8(r17)
    a560:	88c00115 	stw	r3,4(r17)
    a564:	88a3883a 	add	r17,r17,r2
    a568:	88800015 	stw	r2,0(r17)
    a56c:	9009883a 	mov	r4,r18
    a570:	000f9080 	call	f908 <__malloc_unlock>
    a574:	80800204 	addi	r2,r16,8
    a578:	003f3c06 	br	a26c <__alt_mem_onchip_memory+0xf780a26c>
    a57c:	30c00117 	ldw	r3,4(r6)
    a580:	003ee706 	br	a120 <__alt_mem_onchip_memory+0xf780a120>
    a584:	5ac00044 	addi	r11,r11,1
    a588:	588000cc 	andi	r2,r11,3
    a58c:	31800204 	addi	r6,r6,8
    a590:	103efd1e 	bne	r2,zero,a188 <__alt_mem_onchip_memory+0xf780a188>
    a594:	00002406 	br	a628 <_malloc_r+0x660>
    a598:	14000317 	ldw	r16,12(r2)
    a59c:	143f251e 	bne	r2,r16,a234 <__alt_mem_onchip_memory+0xf780a234>
    a5a0:	21000084 	addi	r4,r4,2
    a5a4:	003ebc06 	br	a098 <__alt_mem_onchip_memory+0xf780a098>
    a5a8:	8085883a 	add	r2,r16,r2
    a5ac:	10c00117 	ldw	r3,4(r2)
    a5b0:	81000317 	ldw	r4,12(r16)
    a5b4:	81400217 	ldw	r5,8(r16)
    a5b8:	18c00054 	ori	r3,r3,1
    a5bc:	10c00115 	stw	r3,4(r2)
    a5c0:	29000315 	stw	r4,12(r5)
    a5c4:	21400215 	stw	r5,8(r4)
    a5c8:	9009883a 	mov	r4,r18
    a5cc:	000f9080 	call	f908 <__malloc_unlock>
    a5d0:	80800204 	addi	r2,r16,8
    a5d4:	003f2506 	br	a26c <__alt_mem_onchip_memory+0xf780a26c>
    a5d8:	12001704 	addi	r8,r2,92
    a5dc:	11c016c4 	addi	r7,r2,91
    a5e0:	4209883a 	add	r4,r8,r8
    a5e4:	003e9606 	br	a040 <__alt_mem_onchip_memory+0xf780a040>
    a5e8:	3804d1ba 	srli	r2,r7,6
    a5ec:	11400e44 	addi	r5,r2,57
    a5f0:	10c00e04 	addi	r3,r2,56
    a5f4:	294b883a 	add	r5,r5,r5
    a5f8:	003fbc06 	br	a4ec <__alt_mem_onchip_memory+0xf780a4ec>
    a5fc:	84ff5926 	beq	r16,r19,a364 <__alt_mem_onchip_memory+0xf780a364>
    a600:	00800074 	movhi	r2,1
    a604:	108a3e04 	addi	r2,r2,10488
    a608:	14000217 	ldw	r16,8(r2)
    a60c:	00bfff04 	movi	r2,-4
    a610:	80c00117 	ldw	r3,4(r16)
    a614:	1886703a 	and	r3,r3,r2
    a618:	003f9106 	br	a460 <__alt_mem_onchip_memory+0xf780a460>
    a61c:	60800217 	ldw	r2,8(r12)
    a620:	213fffc4 	addi	r4,r4,-1
    a624:	1300651e 	bne	r2,r12,a7bc <_malloc_r+0x7f4>
    a628:	208000cc 	andi	r2,r4,3
    a62c:	633ffe04 	addi	r12,r12,-8
    a630:	103ffa1e 	bne	r2,zero,a61c <__alt_mem_onchip_memory+0xf780a61c>
    a634:	98800117 	ldw	r2,4(r19)
    a638:	0146303a 	nor	r3,zero,r5
    a63c:	1884703a 	and	r2,r3,r2
    a640:	98800115 	stw	r2,4(r19)
    a644:	294b883a 	add	r5,r5,r5
    a648:	117f2836 	bltu	r2,r5,a2ec <__alt_mem_onchip_memory+0xf780a2ec>
    a64c:	283f2726 	beq	r5,zero,a2ec <__alt_mem_onchip_memory+0xf780a2ec>
    a650:	2886703a 	and	r3,r5,r2
    a654:	5809883a 	mov	r4,r11
    a658:	183ec31e 	bne	r3,zero,a168 <__alt_mem_onchip_memory+0xf780a168>
    a65c:	294b883a 	add	r5,r5,r5
    a660:	2886703a 	and	r3,r5,r2
    a664:	21000104 	addi	r4,r4,4
    a668:	183ffc26 	beq	r3,zero,a65c <__alt_mem_onchip_memory+0xf780a65c>
    a66c:	003ebe06 	br	a168 <__alt_mem_onchip_memory+0xf780a168>
    a670:	00c05504 	movi	r3,340
    a674:	18801236 	bltu	r3,r2,a6c0 <_malloc_r+0x6f8>
    a678:	8804d3fa 	srli	r2,r17,15
    a67c:	12001e04 	addi	r8,r2,120
    a680:	11c01dc4 	addi	r7,r2,119
    a684:	4209883a 	add	r4,r8,r8
    a688:	003e6d06 	br	a040 <__alt_mem_onchip_memory+0xf780a040>
    a68c:	00c40004 	movi	r3,4096
    a690:	003f4606 	br	a3ac <__alt_mem_onchip_memory+0xf780a3ac>
    a694:	00800044 	movi	r2,1
    a698:	a0800115 	stw	r2,4(r20)
    a69c:	003f7406 	br	a470 <__alt_mem_onchip_memory+0xf780a470>
    a6a0:	1805d0ba 	srai	r2,r3,2
    a6a4:	01c00044 	movi	r7,1
    a6a8:	30c00117 	ldw	r3,4(r6)
    a6ac:	388e983a 	sll	r7,r7,r2
    a6b0:	2805883a 	mov	r2,r5
    a6b4:	38c6b03a 	or	r3,r7,r3
    a6b8:	30c00115 	stw	r3,4(r6)
    a6bc:	003f9b06 	br	a52c <__alt_mem_onchip_memory+0xf780a52c>
    a6c0:	00c15504 	movi	r3,1364
    a6c4:	18801a36 	bltu	r3,r2,a730 <_malloc_r+0x768>
    a6c8:	8804d4ba 	srli	r2,r17,18
    a6cc:	12001f44 	addi	r8,r2,125
    a6d0:	11c01f04 	addi	r7,r2,124
    a6d4:	4209883a 	add	r4,r8,r8
    a6d8:	003e5906 	br	a040 <__alt_mem_onchip_memory+0xf780a040>
    a6dc:	ad400404 	addi	r21,r21,16
    a6e0:	003f1706 	br	a340 <__alt_mem_onchip_memory+0xf780a340>
    a6e4:	00c01504 	movi	r3,84
    a6e8:	18802336 	bltu	r3,r2,a778 <_malloc_r+0x7b0>
    a6ec:	3804d33a 	srli	r2,r7,12
    a6f0:	11401bc4 	addi	r5,r2,111
    a6f4:	10c01b84 	addi	r3,r2,110
    a6f8:	294b883a 	add	r5,r5,r5
    a6fc:	003f7b06 	br	a4ec <__alt_mem_onchip_memory+0xf780a4ec>
    a700:	9c000217 	ldw	r16,8(r19)
    a704:	00bfff04 	movi	r2,-4
    a708:	80c00117 	ldw	r3,4(r16)
    a70c:	1886703a 	and	r3,r3,r2
    a710:	003f5306 	br	a460 <__alt_mem_onchip_memory+0xf780a460>
    a714:	3083ffcc 	andi	r2,r6,4095
    a718:	103f181e 	bne	r2,zero,a37c <__alt_mem_onchip_memory+0xf780a37c>
    a71c:	99000217 	ldw	r4,8(r19)
    a720:	b545883a 	add	r2,r22,r21
    a724:	10800054 	ori	r2,r2,1
    a728:	20800115 	stw	r2,4(r4)
    a72c:	003f3e06 	br	a428 <__alt_mem_onchip_memory+0xf780a428>
    a730:	01003f84 	movi	r4,254
    a734:	02001fc4 	movi	r8,127
    a738:	01c01f84 	movi	r7,126
    a73c:	003e4006 	br	a040 <__alt_mem_onchip_memory+0xf780a040>
    a740:	00800074 	movhi	r2,1
    a744:	108fca04 	addi	r2,r2,16168
    a748:	15000015 	stw	r20,0(r2)
    a74c:	003f1106 	br	a394 <__alt_mem_onchip_memory+0xf780a394>
    a750:	00800044 	movi	r2,1
    a754:	002b883a 	mov	r21,zero
    a758:	003f1f06 	br	a3d8 <__alt_mem_onchip_memory+0xf780a3d8>
    a75c:	81400204 	addi	r5,r16,8
    a760:	9009883a 	mov	r4,r18
    a764:	00093800 	call	9380 <_free_r>
    a768:	00800074 	movhi	r2,1
    a76c:	1096b004 	addi	r2,r2,23232
    a770:	10c00017 	ldw	r3,0(r2)
    a774:	003f2c06 	br	a428 <__alt_mem_onchip_memory+0xf780a428>
    a778:	00c05504 	movi	r3,340
    a77c:	18800536 	bltu	r3,r2,a794 <_malloc_r+0x7cc>
    a780:	3804d3fa 	srli	r2,r7,15
    a784:	11401e04 	addi	r5,r2,120
    a788:	10c01dc4 	addi	r3,r2,119
    a78c:	294b883a 	add	r5,r5,r5
    a790:	003f5606 	br	a4ec <__alt_mem_onchip_memory+0xf780a4ec>
    a794:	00c15504 	movi	r3,1364
    a798:	18800536 	bltu	r3,r2,a7b0 <_malloc_r+0x7e8>
    a79c:	3804d4ba 	srli	r2,r7,18
    a7a0:	11401f44 	addi	r5,r2,125
    a7a4:	10c01f04 	addi	r3,r2,124
    a7a8:	294b883a 	add	r5,r5,r5
    a7ac:	003f4f06 	br	a4ec <__alt_mem_onchip_memory+0xf780a4ec>
    a7b0:	01403f84 	movi	r5,254
    a7b4:	00c01f84 	movi	r3,126
    a7b8:	003f4c06 	br	a4ec <__alt_mem_onchip_memory+0xf780a4ec>
    a7bc:	98800117 	ldw	r2,4(r19)
    a7c0:	003fa006 	br	a644 <__alt_mem_onchip_memory+0xf780a644>
    a7c4:	8808d0fa 	srli	r4,r17,3
    a7c8:	20800044 	addi	r2,r4,1
    a7cc:	1085883a 	add	r2,r2,r2
    a7d0:	003e9006 	br	a214 <__alt_mem_onchip_memory+0xf780a214>

0000a7d4 <memchr>:
    a7d4:	208000cc 	andi	r2,r4,3
    a7d8:	280f883a 	mov	r7,r5
    a7dc:	10003426 	beq	r2,zero,a8b0 <memchr+0xdc>
    a7e0:	30bfffc4 	addi	r2,r6,-1
    a7e4:	30001a26 	beq	r6,zero,a850 <memchr+0x7c>
    a7e8:	20c00003 	ldbu	r3,0(r4)
    a7ec:	29803fcc 	andi	r6,r5,255
    a7f0:	30c0051e 	bne	r6,r3,a808 <memchr+0x34>
    a7f4:	00001806 	br	a858 <memchr+0x84>
    a7f8:	10001526 	beq	r2,zero,a850 <memchr+0x7c>
    a7fc:	20c00003 	ldbu	r3,0(r4)
    a800:	10bfffc4 	addi	r2,r2,-1
    a804:	30c01426 	beq	r6,r3,a858 <memchr+0x84>
    a808:	21000044 	addi	r4,r4,1
    a80c:	20c000cc 	andi	r3,r4,3
    a810:	183ff91e 	bne	r3,zero,a7f8 <__alt_mem_onchip_memory+0xf780a7f8>
    a814:	020000c4 	movi	r8,3
    a818:	40801136 	bltu	r8,r2,a860 <memchr+0x8c>
    a81c:	10000c26 	beq	r2,zero,a850 <memchr+0x7c>
    a820:	20c00003 	ldbu	r3,0(r4)
    a824:	29403fcc 	andi	r5,r5,255
    a828:	28c00b26 	beq	r5,r3,a858 <memchr+0x84>
    a82c:	20c00044 	addi	r3,r4,1
    a830:	39803fcc 	andi	r6,r7,255
    a834:	2089883a 	add	r4,r4,r2
    a838:	00000306 	br	a848 <memchr+0x74>
    a83c:	18c00044 	addi	r3,r3,1
    a840:	197fffc3 	ldbu	r5,-1(r3)
    a844:	31400526 	beq	r6,r5,a85c <memchr+0x88>
    a848:	1805883a 	mov	r2,r3
    a84c:	20fffb1e 	bne	r4,r3,a83c <__alt_mem_onchip_memory+0xf780a83c>
    a850:	0005883a 	mov	r2,zero
    a854:	f800283a 	ret
    a858:	2005883a 	mov	r2,r4
    a85c:	f800283a 	ret
    a860:	28c03fcc 	andi	r3,r5,255
    a864:	1812923a 	slli	r9,r3,8
    a868:	02ffbff4 	movhi	r11,65279
    a86c:	02a02074 	movhi	r10,32897
    a870:	48d2b03a 	or	r9,r9,r3
    a874:	4806943a 	slli	r3,r9,16
    a878:	5affbfc4 	addi	r11,r11,-257
    a87c:	52a02004 	addi	r10,r10,-32640
    a880:	48d2b03a 	or	r9,r9,r3
    a884:	20c00017 	ldw	r3,0(r4)
    a888:	48c6f03a 	xor	r3,r9,r3
    a88c:	1acd883a 	add	r6,r3,r11
    a890:	00c6303a 	nor	r3,zero,r3
    a894:	30c6703a 	and	r3,r6,r3
    a898:	1a86703a 	and	r3,r3,r10
    a89c:	183fe01e 	bne	r3,zero,a820 <__alt_mem_onchip_memory+0xf780a820>
    a8a0:	10bfff04 	addi	r2,r2,-4
    a8a4:	21000104 	addi	r4,r4,4
    a8a8:	40bff636 	bltu	r8,r2,a884 <__alt_mem_onchip_memory+0xf780a884>
    a8ac:	003fdb06 	br	a81c <__alt_mem_onchip_memory+0xf780a81c>
    a8b0:	3005883a 	mov	r2,r6
    a8b4:	003fd706 	br	a814 <__alt_mem_onchip_memory+0xf780a814>

0000a8b8 <memcpy>:
    a8b8:	defffd04 	addi	sp,sp,-12
    a8bc:	dfc00215 	stw	ra,8(sp)
    a8c0:	dc400115 	stw	r17,4(sp)
    a8c4:	dc000015 	stw	r16,0(sp)
    a8c8:	00c003c4 	movi	r3,15
    a8cc:	2005883a 	mov	r2,r4
    a8d0:	1980452e 	bgeu	r3,r6,a9e8 <memcpy+0x130>
    a8d4:	2906b03a 	or	r3,r5,r4
    a8d8:	18c000cc 	andi	r3,r3,3
    a8dc:	1800441e 	bne	r3,zero,a9f0 <memcpy+0x138>
    a8e0:	347ffc04 	addi	r17,r6,-16
    a8e4:	8822d13a 	srli	r17,r17,4
    a8e8:	28c00104 	addi	r3,r5,4
    a8ec:	23400104 	addi	r13,r4,4
    a8f0:	8820913a 	slli	r16,r17,4
    a8f4:	2b000204 	addi	r12,r5,8
    a8f8:	22c00204 	addi	r11,r4,8
    a8fc:	84000504 	addi	r16,r16,20
    a900:	2a800304 	addi	r10,r5,12
    a904:	22400304 	addi	r9,r4,12
    a908:	2c21883a 	add	r16,r5,r16
    a90c:	2811883a 	mov	r8,r5
    a910:	200f883a 	mov	r7,r4
    a914:	41000017 	ldw	r4,0(r8)
    a918:	1fc00017 	ldw	ra,0(r3)
    a91c:	63c00017 	ldw	r15,0(r12)
    a920:	39000015 	stw	r4,0(r7)
    a924:	53800017 	ldw	r14,0(r10)
    a928:	6fc00015 	stw	ra,0(r13)
    a92c:	5bc00015 	stw	r15,0(r11)
    a930:	4b800015 	stw	r14,0(r9)
    a934:	18c00404 	addi	r3,r3,16
    a938:	39c00404 	addi	r7,r7,16
    a93c:	42000404 	addi	r8,r8,16
    a940:	6b400404 	addi	r13,r13,16
    a944:	63000404 	addi	r12,r12,16
    a948:	5ac00404 	addi	r11,r11,16
    a94c:	52800404 	addi	r10,r10,16
    a950:	4a400404 	addi	r9,r9,16
    a954:	1c3fef1e 	bne	r3,r16,a914 <__alt_mem_onchip_memory+0xf780a914>
    a958:	89c00044 	addi	r7,r17,1
    a95c:	380e913a 	slli	r7,r7,4
    a960:	310003cc 	andi	r4,r6,15
    a964:	02c000c4 	movi	r11,3
    a968:	11c7883a 	add	r3,r2,r7
    a96c:	29cb883a 	add	r5,r5,r7
    a970:	5900212e 	bgeu	r11,r4,a9f8 <memcpy+0x140>
    a974:	1813883a 	mov	r9,r3
    a978:	2811883a 	mov	r8,r5
    a97c:	200f883a 	mov	r7,r4
    a980:	42800017 	ldw	r10,0(r8)
    a984:	4a400104 	addi	r9,r9,4
    a988:	39ffff04 	addi	r7,r7,-4
    a98c:	4abfff15 	stw	r10,-4(r9)
    a990:	42000104 	addi	r8,r8,4
    a994:	59fffa36 	bltu	r11,r7,a980 <__alt_mem_onchip_memory+0xf780a980>
    a998:	213fff04 	addi	r4,r4,-4
    a99c:	2008d0ba 	srli	r4,r4,2
    a9a0:	318000cc 	andi	r6,r6,3
    a9a4:	21000044 	addi	r4,r4,1
    a9a8:	2109883a 	add	r4,r4,r4
    a9ac:	2109883a 	add	r4,r4,r4
    a9b0:	1907883a 	add	r3,r3,r4
    a9b4:	290b883a 	add	r5,r5,r4
    a9b8:	30000626 	beq	r6,zero,a9d4 <memcpy+0x11c>
    a9bc:	198d883a 	add	r6,r3,r6
    a9c0:	29c00003 	ldbu	r7,0(r5)
    a9c4:	18c00044 	addi	r3,r3,1
    a9c8:	29400044 	addi	r5,r5,1
    a9cc:	19ffffc5 	stb	r7,-1(r3)
    a9d0:	19bffb1e 	bne	r3,r6,a9c0 <__alt_mem_onchip_memory+0xf780a9c0>
    a9d4:	dfc00217 	ldw	ra,8(sp)
    a9d8:	dc400117 	ldw	r17,4(sp)
    a9dc:	dc000017 	ldw	r16,0(sp)
    a9e0:	dec00304 	addi	sp,sp,12
    a9e4:	f800283a 	ret
    a9e8:	2007883a 	mov	r3,r4
    a9ec:	003ff206 	br	a9b8 <__alt_mem_onchip_memory+0xf780a9b8>
    a9f0:	2007883a 	mov	r3,r4
    a9f4:	003ff106 	br	a9bc <__alt_mem_onchip_memory+0xf780a9bc>
    a9f8:	200d883a 	mov	r6,r4
    a9fc:	003fee06 	br	a9b8 <__alt_mem_onchip_memory+0xf780a9b8>

0000aa00 <memmove>:
    aa00:	2005883a 	mov	r2,r4
    aa04:	29000b2e 	bgeu	r5,r4,aa34 <memmove+0x34>
    aa08:	298f883a 	add	r7,r5,r6
    aa0c:	21c0092e 	bgeu	r4,r7,aa34 <memmove+0x34>
    aa10:	2187883a 	add	r3,r4,r6
    aa14:	198bc83a 	sub	r5,r3,r6
    aa18:	30004826 	beq	r6,zero,ab3c <memmove+0x13c>
    aa1c:	39ffffc4 	addi	r7,r7,-1
    aa20:	39000003 	ldbu	r4,0(r7)
    aa24:	18ffffc4 	addi	r3,r3,-1
    aa28:	19000005 	stb	r4,0(r3)
    aa2c:	28fffb1e 	bne	r5,r3,aa1c <__alt_mem_onchip_memory+0xf780aa1c>
    aa30:	f800283a 	ret
    aa34:	00c003c4 	movi	r3,15
    aa38:	1980412e 	bgeu	r3,r6,ab40 <memmove+0x140>
    aa3c:	2886b03a 	or	r3,r5,r2
    aa40:	18c000cc 	andi	r3,r3,3
    aa44:	1800401e 	bne	r3,zero,ab48 <memmove+0x148>
    aa48:	33fffc04 	addi	r15,r6,-16
    aa4c:	781ed13a 	srli	r15,r15,4
    aa50:	28c00104 	addi	r3,r5,4
    aa54:	13400104 	addi	r13,r2,4
    aa58:	781c913a 	slli	r14,r15,4
    aa5c:	2b000204 	addi	r12,r5,8
    aa60:	12c00204 	addi	r11,r2,8
    aa64:	73800504 	addi	r14,r14,20
    aa68:	2a800304 	addi	r10,r5,12
    aa6c:	12400304 	addi	r9,r2,12
    aa70:	2b9d883a 	add	r14,r5,r14
    aa74:	2811883a 	mov	r8,r5
    aa78:	100f883a 	mov	r7,r2
    aa7c:	41000017 	ldw	r4,0(r8)
    aa80:	39c00404 	addi	r7,r7,16
    aa84:	18c00404 	addi	r3,r3,16
    aa88:	393ffc15 	stw	r4,-16(r7)
    aa8c:	193ffc17 	ldw	r4,-16(r3)
    aa90:	6b400404 	addi	r13,r13,16
    aa94:	5ac00404 	addi	r11,r11,16
    aa98:	693ffc15 	stw	r4,-16(r13)
    aa9c:	61000017 	ldw	r4,0(r12)
    aaa0:	4a400404 	addi	r9,r9,16
    aaa4:	42000404 	addi	r8,r8,16
    aaa8:	593ffc15 	stw	r4,-16(r11)
    aaac:	51000017 	ldw	r4,0(r10)
    aab0:	63000404 	addi	r12,r12,16
    aab4:	52800404 	addi	r10,r10,16
    aab8:	493ffc15 	stw	r4,-16(r9)
    aabc:	1bbfef1e 	bne	r3,r14,aa7c <__alt_mem_onchip_memory+0xf780aa7c>
    aac0:	79000044 	addi	r4,r15,1
    aac4:	2008913a 	slli	r4,r4,4
    aac8:	328003cc 	andi	r10,r6,15
    aacc:	02c000c4 	movi	r11,3
    aad0:	1107883a 	add	r3,r2,r4
    aad4:	290b883a 	add	r5,r5,r4
    aad8:	5a801e2e 	bgeu	r11,r10,ab54 <memmove+0x154>
    aadc:	1813883a 	mov	r9,r3
    aae0:	2811883a 	mov	r8,r5
    aae4:	500f883a 	mov	r7,r10
    aae8:	41000017 	ldw	r4,0(r8)
    aaec:	4a400104 	addi	r9,r9,4
    aaf0:	39ffff04 	addi	r7,r7,-4
    aaf4:	493fff15 	stw	r4,-4(r9)
    aaf8:	42000104 	addi	r8,r8,4
    aafc:	59fffa36 	bltu	r11,r7,aae8 <__alt_mem_onchip_memory+0xf780aae8>
    ab00:	513fff04 	addi	r4,r10,-4
    ab04:	2008d0ba 	srli	r4,r4,2
    ab08:	318000cc 	andi	r6,r6,3
    ab0c:	21000044 	addi	r4,r4,1
    ab10:	2109883a 	add	r4,r4,r4
    ab14:	2109883a 	add	r4,r4,r4
    ab18:	1907883a 	add	r3,r3,r4
    ab1c:	290b883a 	add	r5,r5,r4
    ab20:	30000b26 	beq	r6,zero,ab50 <memmove+0x150>
    ab24:	198d883a 	add	r6,r3,r6
    ab28:	29c00003 	ldbu	r7,0(r5)
    ab2c:	18c00044 	addi	r3,r3,1
    ab30:	29400044 	addi	r5,r5,1
    ab34:	19ffffc5 	stb	r7,-1(r3)
    ab38:	19bffb1e 	bne	r3,r6,ab28 <__alt_mem_onchip_memory+0xf780ab28>
    ab3c:	f800283a 	ret
    ab40:	1007883a 	mov	r3,r2
    ab44:	003ff606 	br	ab20 <__alt_mem_onchip_memory+0xf780ab20>
    ab48:	1007883a 	mov	r3,r2
    ab4c:	003ff506 	br	ab24 <__alt_mem_onchip_memory+0xf780ab24>
    ab50:	f800283a 	ret
    ab54:	500d883a 	mov	r6,r10
    ab58:	003ff106 	br	ab20 <__alt_mem_onchip_memory+0xf780ab20>

0000ab5c <memset>:
    ab5c:	20c000cc 	andi	r3,r4,3
    ab60:	2005883a 	mov	r2,r4
    ab64:	18004426 	beq	r3,zero,ac78 <memset+0x11c>
    ab68:	31ffffc4 	addi	r7,r6,-1
    ab6c:	30004026 	beq	r6,zero,ac70 <memset+0x114>
    ab70:	2813883a 	mov	r9,r5
    ab74:	200d883a 	mov	r6,r4
    ab78:	2007883a 	mov	r3,r4
    ab7c:	00000406 	br	ab90 <memset+0x34>
    ab80:	3a3fffc4 	addi	r8,r7,-1
    ab84:	31800044 	addi	r6,r6,1
    ab88:	38003926 	beq	r7,zero,ac70 <memset+0x114>
    ab8c:	400f883a 	mov	r7,r8
    ab90:	18c00044 	addi	r3,r3,1
    ab94:	32400005 	stb	r9,0(r6)
    ab98:	1a0000cc 	andi	r8,r3,3
    ab9c:	403ff81e 	bne	r8,zero,ab80 <__alt_mem_onchip_memory+0xf780ab80>
    aba0:	010000c4 	movi	r4,3
    aba4:	21c02d2e 	bgeu	r4,r7,ac5c <memset+0x100>
    aba8:	29003fcc 	andi	r4,r5,255
    abac:	200c923a 	slli	r6,r4,8
    abb0:	3108b03a 	or	r4,r6,r4
    abb4:	200c943a 	slli	r6,r4,16
    abb8:	218cb03a 	or	r6,r4,r6
    abbc:	010003c4 	movi	r4,15
    abc0:	21c0182e 	bgeu	r4,r7,ac24 <memset+0xc8>
    abc4:	3b3ffc04 	addi	r12,r7,-16
    abc8:	6018d13a 	srli	r12,r12,4
    abcc:	1a000104 	addi	r8,r3,4
    abd0:	1ac00204 	addi	r11,r3,8
    abd4:	6008913a 	slli	r4,r12,4
    abd8:	1a800304 	addi	r10,r3,12
    abdc:	1813883a 	mov	r9,r3
    abe0:	21000504 	addi	r4,r4,20
    abe4:	1909883a 	add	r4,r3,r4
    abe8:	49800015 	stw	r6,0(r9)
    abec:	41800015 	stw	r6,0(r8)
    abf0:	59800015 	stw	r6,0(r11)
    abf4:	51800015 	stw	r6,0(r10)
    abf8:	42000404 	addi	r8,r8,16
    abfc:	4a400404 	addi	r9,r9,16
    ac00:	5ac00404 	addi	r11,r11,16
    ac04:	52800404 	addi	r10,r10,16
    ac08:	413ff71e 	bne	r8,r4,abe8 <__alt_mem_onchip_memory+0xf780abe8>
    ac0c:	63000044 	addi	r12,r12,1
    ac10:	6018913a 	slli	r12,r12,4
    ac14:	39c003cc 	andi	r7,r7,15
    ac18:	010000c4 	movi	r4,3
    ac1c:	1b07883a 	add	r3,r3,r12
    ac20:	21c00e2e 	bgeu	r4,r7,ac5c <memset+0x100>
    ac24:	1813883a 	mov	r9,r3
    ac28:	3811883a 	mov	r8,r7
    ac2c:	010000c4 	movi	r4,3
    ac30:	49800015 	stw	r6,0(r9)
    ac34:	423fff04 	addi	r8,r8,-4
    ac38:	4a400104 	addi	r9,r9,4
    ac3c:	223ffc36 	bltu	r4,r8,ac30 <__alt_mem_onchip_memory+0xf780ac30>
    ac40:	393fff04 	addi	r4,r7,-4
    ac44:	2008d0ba 	srli	r4,r4,2
    ac48:	39c000cc 	andi	r7,r7,3
    ac4c:	21000044 	addi	r4,r4,1
    ac50:	2109883a 	add	r4,r4,r4
    ac54:	2109883a 	add	r4,r4,r4
    ac58:	1907883a 	add	r3,r3,r4
    ac5c:	38000526 	beq	r7,zero,ac74 <memset+0x118>
    ac60:	19cf883a 	add	r7,r3,r7
    ac64:	19400005 	stb	r5,0(r3)
    ac68:	18c00044 	addi	r3,r3,1
    ac6c:	38fffd1e 	bne	r7,r3,ac64 <__alt_mem_onchip_memory+0xf780ac64>
    ac70:	f800283a 	ret
    ac74:	f800283a 	ret
    ac78:	2007883a 	mov	r3,r4
    ac7c:	300f883a 	mov	r7,r6
    ac80:	003fc706 	br	aba0 <__alt_mem_onchip_memory+0xf780aba0>

0000ac84 <_Balloc>:
    ac84:	20801317 	ldw	r2,76(r4)
    ac88:	defffc04 	addi	sp,sp,-16
    ac8c:	dc400115 	stw	r17,4(sp)
    ac90:	dc000015 	stw	r16,0(sp)
    ac94:	dfc00315 	stw	ra,12(sp)
    ac98:	dc800215 	stw	r18,8(sp)
    ac9c:	2023883a 	mov	r17,r4
    aca0:	2821883a 	mov	r16,r5
    aca4:	10000f26 	beq	r2,zero,ace4 <_Balloc+0x60>
    aca8:	8407883a 	add	r3,r16,r16
    acac:	18c7883a 	add	r3,r3,r3
    acb0:	10c7883a 	add	r3,r2,r3
    acb4:	18800017 	ldw	r2,0(r3)
    acb8:	10001126 	beq	r2,zero,ad00 <_Balloc+0x7c>
    acbc:	11000017 	ldw	r4,0(r2)
    acc0:	19000015 	stw	r4,0(r3)
    acc4:	10000415 	stw	zero,16(r2)
    acc8:	10000315 	stw	zero,12(r2)
    accc:	dfc00317 	ldw	ra,12(sp)
    acd0:	dc800217 	ldw	r18,8(sp)
    acd4:	dc400117 	ldw	r17,4(sp)
    acd8:	dc000017 	ldw	r16,0(sp)
    acdc:	dec00404 	addi	sp,sp,16
    ace0:	f800283a 	ret
    ace4:	01800844 	movi	r6,33
    ace8:	01400104 	movi	r5,4
    acec:	000de0c0 	call	de0c <_calloc_r>
    acf0:	88801315 	stw	r2,76(r17)
    acf4:	103fec1e 	bne	r2,zero,aca8 <__alt_mem_onchip_memory+0xf780aca8>
    acf8:	0005883a 	mov	r2,zero
    acfc:	003ff306 	br	accc <__alt_mem_onchip_memory+0xf780accc>
    ad00:	01400044 	movi	r5,1
    ad04:	2c24983a 	sll	r18,r5,r16
    ad08:	8809883a 	mov	r4,r17
    ad0c:	91800144 	addi	r6,r18,5
    ad10:	318d883a 	add	r6,r6,r6
    ad14:	318d883a 	add	r6,r6,r6
    ad18:	000de0c0 	call	de0c <_calloc_r>
    ad1c:	103ff626 	beq	r2,zero,acf8 <__alt_mem_onchip_memory+0xf780acf8>
    ad20:	14000115 	stw	r16,4(r2)
    ad24:	14800215 	stw	r18,8(r2)
    ad28:	003fe606 	br	acc4 <__alt_mem_onchip_memory+0xf780acc4>

0000ad2c <_Bfree>:
    ad2c:	28000826 	beq	r5,zero,ad50 <_Bfree+0x24>
    ad30:	28c00117 	ldw	r3,4(r5)
    ad34:	20801317 	ldw	r2,76(r4)
    ad38:	18c7883a 	add	r3,r3,r3
    ad3c:	18c7883a 	add	r3,r3,r3
    ad40:	10c5883a 	add	r2,r2,r3
    ad44:	10c00017 	ldw	r3,0(r2)
    ad48:	28c00015 	stw	r3,0(r5)
    ad4c:	11400015 	stw	r5,0(r2)
    ad50:	f800283a 	ret

0000ad54 <__multadd>:
    ad54:	defffa04 	addi	sp,sp,-24
    ad58:	dc800315 	stw	r18,12(sp)
    ad5c:	dc400215 	stw	r17,8(sp)
    ad60:	dc000115 	stw	r16,4(sp)
    ad64:	2823883a 	mov	r17,r5
    ad68:	2c000417 	ldw	r16,16(r5)
    ad6c:	dfc00515 	stw	ra,20(sp)
    ad70:	dcc00415 	stw	r19,16(sp)
    ad74:	2025883a 	mov	r18,r4
    ad78:	29400504 	addi	r5,r5,20
    ad7c:	0011883a 	mov	r8,zero
    ad80:	28c00017 	ldw	r3,0(r5)
    ad84:	29400104 	addi	r5,r5,4
    ad88:	42000044 	addi	r8,r8,1
    ad8c:	18bfffcc 	andi	r2,r3,65535
    ad90:	1185383a 	mul	r2,r2,r6
    ad94:	1806d43a 	srli	r3,r3,16
    ad98:	11cf883a 	add	r7,r2,r7
    ad9c:	3808d43a 	srli	r4,r7,16
    ada0:	1987383a 	mul	r3,r3,r6
    ada4:	38bfffcc 	andi	r2,r7,65535
    ada8:	1907883a 	add	r3,r3,r4
    adac:	1808943a 	slli	r4,r3,16
    adb0:	180ed43a 	srli	r7,r3,16
    adb4:	2085883a 	add	r2,r4,r2
    adb8:	28bfff15 	stw	r2,-4(r5)
    adbc:	443ff016 	blt	r8,r16,ad80 <__alt_mem_onchip_memory+0xf780ad80>
    adc0:	38000926 	beq	r7,zero,ade8 <__multadd+0x94>
    adc4:	88800217 	ldw	r2,8(r17)
    adc8:	80800f0e 	bge	r16,r2,ae08 <__multadd+0xb4>
    adcc:	80800144 	addi	r2,r16,5
    add0:	1085883a 	add	r2,r2,r2
    add4:	1085883a 	add	r2,r2,r2
    add8:	8885883a 	add	r2,r17,r2
    addc:	11c00015 	stw	r7,0(r2)
    ade0:	84000044 	addi	r16,r16,1
    ade4:	8c000415 	stw	r16,16(r17)
    ade8:	8805883a 	mov	r2,r17
    adec:	dfc00517 	ldw	ra,20(sp)
    adf0:	dcc00417 	ldw	r19,16(sp)
    adf4:	dc800317 	ldw	r18,12(sp)
    adf8:	dc400217 	ldw	r17,8(sp)
    adfc:	dc000117 	ldw	r16,4(sp)
    ae00:	dec00604 	addi	sp,sp,24
    ae04:	f800283a 	ret
    ae08:	89400117 	ldw	r5,4(r17)
    ae0c:	9009883a 	mov	r4,r18
    ae10:	d9c00015 	stw	r7,0(sp)
    ae14:	29400044 	addi	r5,r5,1
    ae18:	000ac840 	call	ac84 <_Balloc>
    ae1c:	89800417 	ldw	r6,16(r17)
    ae20:	89400304 	addi	r5,r17,12
    ae24:	11000304 	addi	r4,r2,12
    ae28:	31800084 	addi	r6,r6,2
    ae2c:	318d883a 	add	r6,r6,r6
    ae30:	318d883a 	add	r6,r6,r6
    ae34:	1027883a 	mov	r19,r2
    ae38:	000a8b80 	call	a8b8 <memcpy>
    ae3c:	d9c00017 	ldw	r7,0(sp)
    ae40:	88000a26 	beq	r17,zero,ae6c <__multadd+0x118>
    ae44:	88c00117 	ldw	r3,4(r17)
    ae48:	90801317 	ldw	r2,76(r18)
    ae4c:	18c7883a 	add	r3,r3,r3
    ae50:	18c7883a 	add	r3,r3,r3
    ae54:	10c5883a 	add	r2,r2,r3
    ae58:	10c00017 	ldw	r3,0(r2)
    ae5c:	88c00015 	stw	r3,0(r17)
    ae60:	14400015 	stw	r17,0(r2)
    ae64:	9823883a 	mov	r17,r19
    ae68:	003fd806 	br	adcc <__alt_mem_onchip_memory+0xf780adcc>
    ae6c:	9823883a 	mov	r17,r19
    ae70:	003fd606 	br	adcc <__alt_mem_onchip_memory+0xf780adcc>

0000ae74 <__s2b>:
    ae74:	defff904 	addi	sp,sp,-28
    ae78:	dc400115 	stw	r17,4(sp)
    ae7c:	dc000015 	stw	r16,0(sp)
    ae80:	2023883a 	mov	r17,r4
    ae84:	2821883a 	mov	r16,r5
    ae88:	39000204 	addi	r4,r7,8
    ae8c:	01400244 	movi	r5,9
    ae90:	dcc00315 	stw	r19,12(sp)
    ae94:	dc800215 	stw	r18,8(sp)
    ae98:	dfc00615 	stw	ra,24(sp)
    ae9c:	dd400515 	stw	r21,20(sp)
    aea0:	dd000415 	stw	r20,16(sp)
    aea4:	3825883a 	mov	r18,r7
    aea8:	3027883a 	mov	r19,r6
    aeac:	0004a800 	call	4a80 <__divsi3>
    aeb0:	00c00044 	movi	r3,1
    aeb4:	000b883a 	mov	r5,zero
    aeb8:	1880030e 	bge	r3,r2,aec8 <__s2b+0x54>
    aebc:	18c7883a 	add	r3,r3,r3
    aec0:	29400044 	addi	r5,r5,1
    aec4:	18bffd16 	blt	r3,r2,aebc <__alt_mem_onchip_memory+0xf780aebc>
    aec8:	8809883a 	mov	r4,r17
    aecc:	000ac840 	call	ac84 <_Balloc>
    aed0:	d8c00717 	ldw	r3,28(sp)
    aed4:	10c00515 	stw	r3,20(r2)
    aed8:	00c00044 	movi	r3,1
    aedc:	10c00415 	stw	r3,16(r2)
    aee0:	00c00244 	movi	r3,9
    aee4:	1cc0210e 	bge	r3,r19,af6c <__s2b+0xf8>
    aee8:	80eb883a 	add	r21,r16,r3
    aeec:	a829883a 	mov	r20,r21
    aef0:	84e1883a 	add	r16,r16,r19
    aef4:	a1c00007 	ldb	r7,0(r20)
    aef8:	01800284 	movi	r6,10
    aefc:	a5000044 	addi	r20,r20,1
    af00:	100b883a 	mov	r5,r2
    af04:	39fff404 	addi	r7,r7,-48
    af08:	8809883a 	mov	r4,r17
    af0c:	000ad540 	call	ad54 <__multadd>
    af10:	a43ff81e 	bne	r20,r16,aef4 <__alt_mem_onchip_memory+0xf780aef4>
    af14:	ace1883a 	add	r16,r21,r19
    af18:	843ffe04 	addi	r16,r16,-8
    af1c:	9c800a0e 	bge	r19,r18,af48 <__s2b+0xd4>
    af20:	94e5c83a 	sub	r18,r18,r19
    af24:	84a5883a 	add	r18,r16,r18
    af28:	81c00007 	ldb	r7,0(r16)
    af2c:	01800284 	movi	r6,10
    af30:	84000044 	addi	r16,r16,1
    af34:	100b883a 	mov	r5,r2
    af38:	39fff404 	addi	r7,r7,-48
    af3c:	8809883a 	mov	r4,r17
    af40:	000ad540 	call	ad54 <__multadd>
    af44:	84bff81e 	bne	r16,r18,af28 <__alt_mem_onchip_memory+0xf780af28>
    af48:	dfc00617 	ldw	ra,24(sp)
    af4c:	dd400517 	ldw	r21,20(sp)
    af50:	dd000417 	ldw	r20,16(sp)
    af54:	dcc00317 	ldw	r19,12(sp)
    af58:	dc800217 	ldw	r18,8(sp)
    af5c:	dc400117 	ldw	r17,4(sp)
    af60:	dc000017 	ldw	r16,0(sp)
    af64:	dec00704 	addi	sp,sp,28
    af68:	f800283a 	ret
    af6c:	84000284 	addi	r16,r16,10
    af70:	1827883a 	mov	r19,r3
    af74:	003fe906 	br	af1c <__alt_mem_onchip_memory+0xf780af1c>

0000af78 <__hi0bits>:
    af78:	20bfffec 	andhi	r2,r4,65535
    af7c:	1000141e 	bne	r2,zero,afd0 <__hi0bits+0x58>
    af80:	2008943a 	slli	r4,r4,16
    af84:	00800404 	movi	r2,16
    af88:	20ffc02c 	andhi	r3,r4,65280
    af8c:	1800021e 	bne	r3,zero,af98 <__hi0bits+0x20>
    af90:	2008923a 	slli	r4,r4,8
    af94:	10800204 	addi	r2,r2,8
    af98:	20fc002c 	andhi	r3,r4,61440
    af9c:	1800021e 	bne	r3,zero,afa8 <__hi0bits+0x30>
    afa0:	2008913a 	slli	r4,r4,4
    afa4:	10800104 	addi	r2,r2,4
    afa8:	20f0002c 	andhi	r3,r4,49152
    afac:	1800031e 	bne	r3,zero,afbc <__hi0bits+0x44>
    afb0:	2109883a 	add	r4,r4,r4
    afb4:	10800084 	addi	r2,r2,2
    afb8:	2109883a 	add	r4,r4,r4
    afbc:	20000316 	blt	r4,zero,afcc <__hi0bits+0x54>
    afc0:	2110002c 	andhi	r4,r4,16384
    afc4:	2000041e 	bne	r4,zero,afd8 <__hi0bits+0x60>
    afc8:	00800804 	movi	r2,32
    afcc:	f800283a 	ret
    afd0:	0005883a 	mov	r2,zero
    afd4:	003fec06 	br	af88 <__alt_mem_onchip_memory+0xf780af88>
    afd8:	10800044 	addi	r2,r2,1
    afdc:	f800283a 	ret

0000afe0 <__lo0bits>:
    afe0:	20c00017 	ldw	r3,0(r4)
    afe4:	188001cc 	andi	r2,r3,7
    afe8:	10000826 	beq	r2,zero,b00c <__lo0bits+0x2c>
    afec:	1880004c 	andi	r2,r3,1
    aff0:	1000211e 	bne	r2,zero,b078 <__lo0bits+0x98>
    aff4:	1880008c 	andi	r2,r3,2
    aff8:	1000211e 	bne	r2,zero,b080 <__lo0bits+0xa0>
    affc:	1806d0ba 	srli	r3,r3,2
    b000:	00800084 	movi	r2,2
    b004:	20c00015 	stw	r3,0(r4)
    b008:	f800283a 	ret
    b00c:	18bfffcc 	andi	r2,r3,65535
    b010:	10001326 	beq	r2,zero,b060 <__lo0bits+0x80>
    b014:	0005883a 	mov	r2,zero
    b018:	19403fcc 	andi	r5,r3,255
    b01c:	2800021e 	bne	r5,zero,b028 <__lo0bits+0x48>
    b020:	1806d23a 	srli	r3,r3,8
    b024:	10800204 	addi	r2,r2,8
    b028:	194003cc 	andi	r5,r3,15
    b02c:	2800021e 	bne	r5,zero,b038 <__lo0bits+0x58>
    b030:	1806d13a 	srli	r3,r3,4
    b034:	10800104 	addi	r2,r2,4
    b038:	194000cc 	andi	r5,r3,3
    b03c:	2800021e 	bne	r5,zero,b048 <__lo0bits+0x68>
    b040:	1806d0ba 	srli	r3,r3,2
    b044:	10800084 	addi	r2,r2,2
    b048:	1940004c 	andi	r5,r3,1
    b04c:	2800081e 	bne	r5,zero,b070 <__lo0bits+0x90>
    b050:	1806d07a 	srli	r3,r3,1
    b054:	1800051e 	bne	r3,zero,b06c <__lo0bits+0x8c>
    b058:	00800804 	movi	r2,32
    b05c:	f800283a 	ret
    b060:	1806d43a 	srli	r3,r3,16
    b064:	00800404 	movi	r2,16
    b068:	003feb06 	br	b018 <__alt_mem_onchip_memory+0xf780b018>
    b06c:	10800044 	addi	r2,r2,1
    b070:	20c00015 	stw	r3,0(r4)
    b074:	f800283a 	ret
    b078:	0005883a 	mov	r2,zero
    b07c:	f800283a 	ret
    b080:	1806d07a 	srli	r3,r3,1
    b084:	00800044 	movi	r2,1
    b088:	20c00015 	stw	r3,0(r4)
    b08c:	f800283a 	ret

0000b090 <__i2b>:
    b090:	defffd04 	addi	sp,sp,-12
    b094:	dc000015 	stw	r16,0(sp)
    b098:	04000044 	movi	r16,1
    b09c:	dc400115 	stw	r17,4(sp)
    b0a0:	2823883a 	mov	r17,r5
    b0a4:	800b883a 	mov	r5,r16
    b0a8:	dfc00215 	stw	ra,8(sp)
    b0ac:	000ac840 	call	ac84 <_Balloc>
    b0b0:	14400515 	stw	r17,20(r2)
    b0b4:	14000415 	stw	r16,16(r2)
    b0b8:	dfc00217 	ldw	ra,8(sp)
    b0bc:	dc400117 	ldw	r17,4(sp)
    b0c0:	dc000017 	ldw	r16,0(sp)
    b0c4:	dec00304 	addi	sp,sp,12
    b0c8:	f800283a 	ret

0000b0cc <__multiply>:
    b0cc:	defffa04 	addi	sp,sp,-24
    b0d0:	dcc00315 	stw	r19,12(sp)
    b0d4:	dc800215 	stw	r18,8(sp)
    b0d8:	34c00417 	ldw	r19,16(r6)
    b0dc:	2c800417 	ldw	r18,16(r5)
    b0e0:	dd000415 	stw	r20,16(sp)
    b0e4:	dc400115 	stw	r17,4(sp)
    b0e8:	dfc00515 	stw	ra,20(sp)
    b0ec:	dc000015 	stw	r16,0(sp)
    b0f0:	2829883a 	mov	r20,r5
    b0f4:	3023883a 	mov	r17,r6
    b0f8:	94c0050e 	bge	r18,r19,b110 <__multiply+0x44>
    b0fc:	9007883a 	mov	r3,r18
    b100:	3029883a 	mov	r20,r6
    b104:	9825883a 	mov	r18,r19
    b108:	2823883a 	mov	r17,r5
    b10c:	1827883a 	mov	r19,r3
    b110:	a0800217 	ldw	r2,8(r20)
    b114:	94e1883a 	add	r16,r18,r19
    b118:	a1400117 	ldw	r5,4(r20)
    b11c:	1400010e 	bge	r2,r16,b124 <__multiply+0x58>
    b120:	29400044 	addi	r5,r5,1
    b124:	000ac840 	call	ac84 <_Balloc>
    b128:	8415883a 	add	r10,r16,r16
    b12c:	12c00504 	addi	r11,r2,20
    b130:	5295883a 	add	r10,r10,r10
    b134:	5a95883a 	add	r10,r11,r10
    b138:	5807883a 	mov	r3,r11
    b13c:	5a80032e 	bgeu	r11,r10,b14c <__multiply+0x80>
    b140:	18000015 	stw	zero,0(r3)
    b144:	18c00104 	addi	r3,r3,4
    b148:	1abffd36 	bltu	r3,r10,b140 <__alt_mem_onchip_memory+0xf780b140>
    b14c:	9ce7883a 	add	r19,r19,r19
    b150:	94a5883a 	add	r18,r18,r18
    b154:	89800504 	addi	r6,r17,20
    b158:	9ce7883a 	add	r19,r19,r19
    b15c:	a3400504 	addi	r13,r20,20
    b160:	94a5883a 	add	r18,r18,r18
    b164:	34d9883a 	add	r12,r6,r19
    b168:	6c93883a 	add	r9,r13,r18
    b16c:	3300422e 	bgeu	r6,r12,b278 <__multiply+0x1ac>
    b170:	37c00017 	ldw	ra,0(r6)
    b174:	fbffffcc 	andi	r15,ra,65535
    b178:	78001b26 	beq	r15,zero,b1e8 <__multiply+0x11c>
    b17c:	5811883a 	mov	r8,r11
    b180:	681d883a 	mov	r14,r13
    b184:	000f883a 	mov	r7,zero
    b188:	71000017 	ldw	r4,0(r14)
    b18c:	40c00017 	ldw	r3,0(r8)
    b190:	73800104 	addi	r14,r14,4
    b194:	217fffcc 	andi	r5,r4,65535
    b198:	2bcb383a 	mul	r5,r5,r15
    b19c:	2008d43a 	srli	r4,r4,16
    b1a0:	1c7fffcc 	andi	r17,r3,65535
    b1a4:	2c4b883a 	add	r5,r5,r17
    b1a8:	29cb883a 	add	r5,r5,r7
    b1ac:	23c9383a 	mul	r4,r4,r15
    b1b0:	1806d43a 	srli	r3,r3,16
    b1b4:	280ed43a 	srli	r7,r5,16
    b1b8:	297fffcc 	andi	r5,r5,65535
    b1bc:	20c7883a 	add	r3,r4,r3
    b1c0:	19c7883a 	add	r3,r3,r7
    b1c4:	1808943a 	slli	r4,r3,16
    b1c8:	4023883a 	mov	r17,r8
    b1cc:	180ed43a 	srli	r7,r3,16
    b1d0:	214ab03a 	or	r5,r4,r5
    b1d4:	41400015 	stw	r5,0(r8)
    b1d8:	42000104 	addi	r8,r8,4
    b1dc:	727fea36 	bltu	r14,r9,b188 <__alt_mem_onchip_memory+0xf780b188>
    b1e0:	89c00115 	stw	r7,4(r17)
    b1e4:	37c00017 	ldw	ra,0(r6)
    b1e8:	f83ed43a 	srli	ra,ra,16
    b1ec:	f8001f26 	beq	ra,zero,b26c <__multiply+0x1a0>
    b1f0:	58c00017 	ldw	r3,0(r11)
    b1f4:	681d883a 	mov	r14,r13
    b1f8:	581f883a 	mov	r15,r11
    b1fc:	1811883a 	mov	r8,r3
    b200:	5825883a 	mov	r18,r11
    b204:	000f883a 	mov	r7,zero
    b208:	00000106 	br	b210 <__multiply+0x144>
    b20c:	8825883a 	mov	r18,r17
    b210:	7140000b 	ldhu	r5,0(r14)
    b214:	4010d43a 	srli	r8,r8,16
    b218:	193fffcc 	andi	r4,r3,65535
    b21c:	2fcb383a 	mul	r5,r5,ra
    b220:	7bc00104 	addi	r15,r15,4
    b224:	73800104 	addi	r14,r14,4
    b228:	2a0b883a 	add	r5,r5,r8
    b22c:	29cb883a 	add	r5,r5,r7
    b230:	2806943a 	slli	r3,r5,16
    b234:	94400104 	addi	r17,r18,4
    b238:	280ad43a 	srli	r5,r5,16
    b23c:	1908b03a 	or	r4,r3,r4
    b240:	793fff15 	stw	r4,-4(r15)
    b244:	70ffff17 	ldw	r3,-4(r14)
    b248:	8a000017 	ldw	r8,0(r17)
    b24c:	1806d43a 	srli	r3,r3,16
    b250:	413fffcc 	andi	r4,r8,65535
    b254:	1fc7383a 	mul	r3,r3,ra
    b258:	1907883a 	add	r3,r3,r4
    b25c:	1947883a 	add	r3,r3,r5
    b260:	180ed43a 	srli	r7,r3,16
    b264:	727fe936 	bltu	r14,r9,b20c <__alt_mem_onchip_memory+0xf780b20c>
    b268:	90c00115 	stw	r3,4(r18)
    b26c:	31800104 	addi	r6,r6,4
    b270:	5ac00104 	addi	r11,r11,4
    b274:	333fbe36 	bltu	r6,r12,b170 <__alt_mem_onchip_memory+0xf780b170>
    b278:	0400090e 	bge	zero,r16,b2a0 <__multiply+0x1d4>
    b27c:	50ffff17 	ldw	r3,-4(r10)
    b280:	52bfff04 	addi	r10,r10,-4
    b284:	18000326 	beq	r3,zero,b294 <__multiply+0x1c8>
    b288:	00000506 	br	b2a0 <__multiply+0x1d4>
    b28c:	50c00017 	ldw	r3,0(r10)
    b290:	1800031e 	bne	r3,zero,b2a0 <__multiply+0x1d4>
    b294:	843fffc4 	addi	r16,r16,-1
    b298:	52bfff04 	addi	r10,r10,-4
    b29c:	803ffb1e 	bne	r16,zero,b28c <__alt_mem_onchip_memory+0xf780b28c>
    b2a0:	14000415 	stw	r16,16(r2)
    b2a4:	dfc00517 	ldw	ra,20(sp)
    b2a8:	dd000417 	ldw	r20,16(sp)
    b2ac:	dcc00317 	ldw	r19,12(sp)
    b2b0:	dc800217 	ldw	r18,8(sp)
    b2b4:	dc400117 	ldw	r17,4(sp)
    b2b8:	dc000017 	ldw	r16,0(sp)
    b2bc:	dec00604 	addi	sp,sp,24
    b2c0:	f800283a 	ret

0000b2c4 <__pow5mult>:
    b2c4:	defffa04 	addi	sp,sp,-24
    b2c8:	dcc00315 	stw	r19,12(sp)
    b2cc:	dc000015 	stw	r16,0(sp)
    b2d0:	dfc00515 	stw	ra,20(sp)
    b2d4:	dd000415 	stw	r20,16(sp)
    b2d8:	dc800215 	stw	r18,8(sp)
    b2dc:	dc400115 	stw	r17,4(sp)
    b2e0:	308000cc 	andi	r2,r6,3
    b2e4:	3021883a 	mov	r16,r6
    b2e8:	2027883a 	mov	r19,r4
    b2ec:	10002f1e 	bne	r2,zero,b3ac <__pow5mult+0xe8>
    b2f0:	2825883a 	mov	r18,r5
    b2f4:	8021d0ba 	srai	r16,r16,2
    b2f8:	80001a26 	beq	r16,zero,b364 <__pow5mult+0xa0>
    b2fc:	9c401217 	ldw	r17,72(r19)
    b300:	8800061e 	bne	r17,zero,b31c <__pow5mult+0x58>
    b304:	00003406 	br	b3d8 <__pow5mult+0x114>
    b308:	8021d07a 	srai	r16,r16,1
    b30c:	80001526 	beq	r16,zero,b364 <__pow5mult+0xa0>
    b310:	88800017 	ldw	r2,0(r17)
    b314:	10001c26 	beq	r2,zero,b388 <__pow5mult+0xc4>
    b318:	1023883a 	mov	r17,r2
    b31c:	8080004c 	andi	r2,r16,1
    b320:	103ff926 	beq	r2,zero,b308 <__alt_mem_onchip_memory+0xf780b308>
    b324:	880d883a 	mov	r6,r17
    b328:	900b883a 	mov	r5,r18
    b32c:	9809883a 	mov	r4,r19
    b330:	000b0cc0 	call	b0cc <__multiply>
    b334:	90001b26 	beq	r18,zero,b3a4 <__pow5mult+0xe0>
    b338:	91000117 	ldw	r4,4(r18)
    b33c:	98c01317 	ldw	r3,76(r19)
    b340:	8021d07a 	srai	r16,r16,1
    b344:	2109883a 	add	r4,r4,r4
    b348:	2109883a 	add	r4,r4,r4
    b34c:	1907883a 	add	r3,r3,r4
    b350:	19000017 	ldw	r4,0(r3)
    b354:	91000015 	stw	r4,0(r18)
    b358:	1c800015 	stw	r18,0(r3)
    b35c:	1025883a 	mov	r18,r2
    b360:	803feb1e 	bne	r16,zero,b310 <__alt_mem_onchip_memory+0xf780b310>
    b364:	9005883a 	mov	r2,r18
    b368:	dfc00517 	ldw	ra,20(sp)
    b36c:	dd000417 	ldw	r20,16(sp)
    b370:	dcc00317 	ldw	r19,12(sp)
    b374:	dc800217 	ldw	r18,8(sp)
    b378:	dc400117 	ldw	r17,4(sp)
    b37c:	dc000017 	ldw	r16,0(sp)
    b380:	dec00604 	addi	sp,sp,24
    b384:	f800283a 	ret
    b388:	880d883a 	mov	r6,r17
    b38c:	880b883a 	mov	r5,r17
    b390:	9809883a 	mov	r4,r19
    b394:	000b0cc0 	call	b0cc <__multiply>
    b398:	88800015 	stw	r2,0(r17)
    b39c:	10000015 	stw	zero,0(r2)
    b3a0:	003fdd06 	br	b318 <__alt_mem_onchip_memory+0xf780b318>
    b3a4:	1025883a 	mov	r18,r2
    b3a8:	003fd706 	br	b308 <__alt_mem_onchip_memory+0xf780b308>
    b3ac:	10bfffc4 	addi	r2,r2,-1
    b3b0:	1085883a 	add	r2,r2,r2
    b3b4:	00c00074 	movhi	r3,1
    b3b8:	18c87b04 	addi	r3,r3,8684
    b3bc:	1085883a 	add	r2,r2,r2
    b3c0:	1885883a 	add	r2,r3,r2
    b3c4:	11800017 	ldw	r6,0(r2)
    b3c8:	000f883a 	mov	r7,zero
    b3cc:	000ad540 	call	ad54 <__multadd>
    b3d0:	1025883a 	mov	r18,r2
    b3d4:	003fc706 	br	b2f4 <__alt_mem_onchip_memory+0xf780b2f4>
    b3d8:	05000044 	movi	r20,1
    b3dc:	a00b883a 	mov	r5,r20
    b3e0:	9809883a 	mov	r4,r19
    b3e4:	000ac840 	call	ac84 <_Balloc>
    b3e8:	1023883a 	mov	r17,r2
    b3ec:	00809c44 	movi	r2,625
    b3f0:	88800515 	stw	r2,20(r17)
    b3f4:	8d000415 	stw	r20,16(r17)
    b3f8:	9c401215 	stw	r17,72(r19)
    b3fc:	88000015 	stw	zero,0(r17)
    b400:	003fc606 	br	b31c <__alt_mem_onchip_memory+0xf780b31c>

0000b404 <__lshift>:
    b404:	defff904 	addi	sp,sp,-28
    b408:	dd400515 	stw	r21,20(sp)
    b40c:	dcc00315 	stw	r19,12(sp)
    b410:	302bd17a 	srai	r21,r6,5
    b414:	2cc00417 	ldw	r19,16(r5)
    b418:	28800217 	ldw	r2,8(r5)
    b41c:	dd000415 	stw	r20,16(sp)
    b420:	ace7883a 	add	r19,r21,r19
    b424:	dc800215 	stw	r18,8(sp)
    b428:	dc400115 	stw	r17,4(sp)
    b42c:	dc000015 	stw	r16,0(sp)
    b430:	dfc00615 	stw	ra,24(sp)
    b434:	9c000044 	addi	r16,r19,1
    b438:	2823883a 	mov	r17,r5
    b43c:	3029883a 	mov	r20,r6
    b440:	2025883a 	mov	r18,r4
    b444:	29400117 	ldw	r5,4(r5)
    b448:	1400030e 	bge	r2,r16,b458 <__lshift+0x54>
    b44c:	1085883a 	add	r2,r2,r2
    b450:	29400044 	addi	r5,r5,1
    b454:	143ffd16 	blt	r2,r16,b44c <__alt_mem_onchip_memory+0xf780b44c>
    b458:	9009883a 	mov	r4,r18
    b45c:	000ac840 	call	ac84 <_Balloc>
    b460:	10c00504 	addi	r3,r2,20
    b464:	0540070e 	bge	zero,r21,b484 <__lshift+0x80>
    b468:	ad6b883a 	add	r21,r21,r21
    b46c:	ad6b883a 	add	r21,r21,r21
    b470:	1809883a 	mov	r4,r3
    b474:	1d47883a 	add	r3,r3,r21
    b478:	20000015 	stw	zero,0(r4)
    b47c:	21000104 	addi	r4,r4,4
    b480:	193ffd1e 	bne	r3,r4,b478 <__alt_mem_onchip_memory+0xf780b478>
    b484:	8a000417 	ldw	r8,16(r17)
    b488:	89000504 	addi	r4,r17,20
    b48c:	a18007cc 	andi	r6,r20,31
    b490:	4211883a 	add	r8,r8,r8
    b494:	4211883a 	add	r8,r8,r8
    b498:	2211883a 	add	r8,r4,r8
    b49c:	30002326 	beq	r6,zero,b52c <__lshift+0x128>
    b4a0:	02400804 	movi	r9,32
    b4a4:	4993c83a 	sub	r9,r9,r6
    b4a8:	000b883a 	mov	r5,zero
    b4ac:	21c00017 	ldw	r7,0(r4)
    b4b0:	1815883a 	mov	r10,r3
    b4b4:	18c00104 	addi	r3,r3,4
    b4b8:	398e983a 	sll	r7,r7,r6
    b4bc:	21000104 	addi	r4,r4,4
    b4c0:	394ab03a 	or	r5,r7,r5
    b4c4:	197fff15 	stw	r5,-4(r3)
    b4c8:	217fff17 	ldw	r5,-4(r4)
    b4cc:	2a4ad83a 	srl	r5,r5,r9
    b4d0:	223ff636 	bltu	r4,r8,b4ac <__alt_mem_onchip_memory+0xf780b4ac>
    b4d4:	51400115 	stw	r5,4(r10)
    b4d8:	28001a1e 	bne	r5,zero,b544 <__lshift+0x140>
    b4dc:	843fffc4 	addi	r16,r16,-1
    b4e0:	14000415 	stw	r16,16(r2)
    b4e4:	88000826 	beq	r17,zero,b508 <__lshift+0x104>
    b4e8:	89000117 	ldw	r4,4(r17)
    b4ec:	90c01317 	ldw	r3,76(r18)
    b4f0:	2109883a 	add	r4,r4,r4
    b4f4:	2109883a 	add	r4,r4,r4
    b4f8:	1907883a 	add	r3,r3,r4
    b4fc:	19000017 	ldw	r4,0(r3)
    b500:	89000015 	stw	r4,0(r17)
    b504:	1c400015 	stw	r17,0(r3)
    b508:	dfc00617 	ldw	ra,24(sp)
    b50c:	dd400517 	ldw	r21,20(sp)
    b510:	dd000417 	ldw	r20,16(sp)
    b514:	dcc00317 	ldw	r19,12(sp)
    b518:	dc800217 	ldw	r18,8(sp)
    b51c:	dc400117 	ldw	r17,4(sp)
    b520:	dc000017 	ldw	r16,0(sp)
    b524:	dec00704 	addi	sp,sp,28
    b528:	f800283a 	ret
    b52c:	21400017 	ldw	r5,0(r4)
    b530:	18c00104 	addi	r3,r3,4
    b534:	21000104 	addi	r4,r4,4
    b538:	197fff15 	stw	r5,-4(r3)
    b53c:	223ffb36 	bltu	r4,r8,b52c <__alt_mem_onchip_memory+0xf780b52c>
    b540:	003fe606 	br	b4dc <__alt_mem_onchip_memory+0xf780b4dc>
    b544:	9c000084 	addi	r16,r19,2
    b548:	003fe406 	br	b4dc <__alt_mem_onchip_memory+0xf780b4dc>

0000b54c <__mcmp>:
    b54c:	20800417 	ldw	r2,16(r4)
    b550:	28c00417 	ldw	r3,16(r5)
    b554:	10c5c83a 	sub	r2,r2,r3
    b558:	1000111e 	bne	r2,zero,b5a0 <__mcmp+0x54>
    b55c:	18c7883a 	add	r3,r3,r3
    b560:	18c7883a 	add	r3,r3,r3
    b564:	21000504 	addi	r4,r4,20
    b568:	29400504 	addi	r5,r5,20
    b56c:	20c5883a 	add	r2,r4,r3
    b570:	28cb883a 	add	r5,r5,r3
    b574:	00000106 	br	b57c <__mcmp+0x30>
    b578:	20800a2e 	bgeu	r4,r2,b5a4 <__mcmp+0x58>
    b57c:	10bfff04 	addi	r2,r2,-4
    b580:	297fff04 	addi	r5,r5,-4
    b584:	11800017 	ldw	r6,0(r2)
    b588:	28c00017 	ldw	r3,0(r5)
    b58c:	30fffa26 	beq	r6,r3,b578 <__alt_mem_onchip_memory+0xf780b578>
    b590:	30c00236 	bltu	r6,r3,b59c <__mcmp+0x50>
    b594:	00800044 	movi	r2,1
    b598:	f800283a 	ret
    b59c:	00bfffc4 	movi	r2,-1
    b5a0:	f800283a 	ret
    b5a4:	0005883a 	mov	r2,zero
    b5a8:	f800283a 	ret

0000b5ac <__mdiff>:
    b5ac:	28c00417 	ldw	r3,16(r5)
    b5b0:	30800417 	ldw	r2,16(r6)
    b5b4:	defffa04 	addi	sp,sp,-24
    b5b8:	dcc00315 	stw	r19,12(sp)
    b5bc:	dc800215 	stw	r18,8(sp)
    b5c0:	dfc00515 	stw	ra,20(sp)
    b5c4:	dd000415 	stw	r20,16(sp)
    b5c8:	dc400115 	stw	r17,4(sp)
    b5cc:	dc000015 	stw	r16,0(sp)
    b5d0:	1887c83a 	sub	r3,r3,r2
    b5d4:	2825883a 	mov	r18,r5
    b5d8:	3027883a 	mov	r19,r6
    b5dc:	1800141e 	bne	r3,zero,b630 <__mdiff+0x84>
    b5e0:	1085883a 	add	r2,r2,r2
    b5e4:	1085883a 	add	r2,r2,r2
    b5e8:	2a000504 	addi	r8,r5,20
    b5ec:	34000504 	addi	r16,r6,20
    b5f0:	4087883a 	add	r3,r8,r2
    b5f4:	8085883a 	add	r2,r16,r2
    b5f8:	00000106 	br	b600 <__mdiff+0x54>
    b5fc:	40c0592e 	bgeu	r8,r3,b764 <__mdiff+0x1b8>
    b600:	18ffff04 	addi	r3,r3,-4
    b604:	10bfff04 	addi	r2,r2,-4
    b608:	19c00017 	ldw	r7,0(r3)
    b60c:	11400017 	ldw	r5,0(r2)
    b610:	397ffa26 	beq	r7,r5,b5fc <__alt_mem_onchip_memory+0xf780b5fc>
    b614:	3940592e 	bgeu	r7,r5,b77c <__mdiff+0x1d0>
    b618:	9005883a 	mov	r2,r18
    b61c:	4023883a 	mov	r17,r8
    b620:	9825883a 	mov	r18,r19
    b624:	05000044 	movi	r20,1
    b628:	1027883a 	mov	r19,r2
    b62c:	00000406 	br	b640 <__mdiff+0x94>
    b630:	18005616 	blt	r3,zero,b78c <__mdiff+0x1e0>
    b634:	34400504 	addi	r17,r6,20
    b638:	2c000504 	addi	r16,r5,20
    b63c:	0029883a 	mov	r20,zero
    b640:	91400117 	ldw	r5,4(r18)
    b644:	000ac840 	call	ac84 <_Balloc>
    b648:	92400417 	ldw	r9,16(r18)
    b64c:	9b000417 	ldw	r12,16(r19)
    b650:	12c00504 	addi	r11,r2,20
    b654:	4a51883a 	add	r8,r9,r9
    b658:	6319883a 	add	r12,r12,r12
    b65c:	4211883a 	add	r8,r8,r8
    b660:	6319883a 	add	r12,r12,r12
    b664:	15000315 	stw	r20,12(r2)
    b668:	8211883a 	add	r8,r16,r8
    b66c:	8b19883a 	add	r12,r17,r12
    b670:	0007883a 	mov	r3,zero
    b674:	81400017 	ldw	r5,0(r16)
    b678:	89c00017 	ldw	r7,0(r17)
    b67c:	59800104 	addi	r6,r11,4
    b680:	293fffcc 	andi	r4,r5,65535
    b684:	20c7883a 	add	r3,r4,r3
    b688:	393fffcc 	andi	r4,r7,65535
    b68c:	1909c83a 	sub	r4,r3,r4
    b690:	280ad43a 	srli	r5,r5,16
    b694:	380ed43a 	srli	r7,r7,16
    b698:	2007d43a 	srai	r3,r4,16
    b69c:	213fffcc 	andi	r4,r4,65535
    b6a0:	29cbc83a 	sub	r5,r5,r7
    b6a4:	28c7883a 	add	r3,r5,r3
    b6a8:	180a943a 	slli	r5,r3,16
    b6ac:	8c400104 	addi	r17,r17,4
    b6b0:	84000104 	addi	r16,r16,4
    b6b4:	2908b03a 	or	r4,r5,r4
    b6b8:	59000015 	stw	r4,0(r11)
    b6bc:	1807d43a 	srai	r3,r3,16
    b6c0:	3015883a 	mov	r10,r6
    b6c4:	3017883a 	mov	r11,r6
    b6c8:	8b3fea36 	bltu	r17,r12,b674 <__alt_mem_onchip_memory+0xf780b674>
    b6cc:	8200162e 	bgeu	r16,r8,b728 <__mdiff+0x17c>
    b6d0:	8017883a 	mov	r11,r16
    b6d4:	59400017 	ldw	r5,0(r11)
    b6d8:	31800104 	addi	r6,r6,4
    b6dc:	5ac00104 	addi	r11,r11,4
    b6e0:	293fffcc 	andi	r4,r5,65535
    b6e4:	20c7883a 	add	r3,r4,r3
    b6e8:	280ed43a 	srli	r7,r5,16
    b6ec:	180bd43a 	srai	r5,r3,16
    b6f0:	193fffcc 	andi	r4,r3,65535
    b6f4:	3947883a 	add	r3,r7,r5
    b6f8:	180a943a 	slli	r5,r3,16
    b6fc:	1807d43a 	srai	r3,r3,16
    b700:	2908b03a 	or	r4,r5,r4
    b704:	313fff15 	stw	r4,-4(r6)
    b708:	5a3ff236 	bltu	r11,r8,b6d4 <__alt_mem_onchip_memory+0xf780b6d4>
    b70c:	0406303a 	nor	r3,zero,r16
    b710:	1a07883a 	add	r3,r3,r8
    b714:	1806d0ba 	srli	r3,r3,2
    b718:	18c00044 	addi	r3,r3,1
    b71c:	18c7883a 	add	r3,r3,r3
    b720:	18c7883a 	add	r3,r3,r3
    b724:	50d5883a 	add	r10,r10,r3
    b728:	50ffff04 	addi	r3,r10,-4
    b72c:	2000041e 	bne	r4,zero,b740 <__mdiff+0x194>
    b730:	18ffff04 	addi	r3,r3,-4
    b734:	19000017 	ldw	r4,0(r3)
    b738:	4a7fffc4 	addi	r9,r9,-1
    b73c:	203ffc26 	beq	r4,zero,b730 <__alt_mem_onchip_memory+0xf780b730>
    b740:	12400415 	stw	r9,16(r2)
    b744:	dfc00517 	ldw	ra,20(sp)
    b748:	dd000417 	ldw	r20,16(sp)
    b74c:	dcc00317 	ldw	r19,12(sp)
    b750:	dc800217 	ldw	r18,8(sp)
    b754:	dc400117 	ldw	r17,4(sp)
    b758:	dc000017 	ldw	r16,0(sp)
    b75c:	dec00604 	addi	sp,sp,24
    b760:	f800283a 	ret
    b764:	000b883a 	mov	r5,zero
    b768:	000ac840 	call	ac84 <_Balloc>
    b76c:	00c00044 	movi	r3,1
    b770:	10c00415 	stw	r3,16(r2)
    b774:	10000515 	stw	zero,20(r2)
    b778:	003ff206 	br	b744 <__alt_mem_onchip_memory+0xf780b744>
    b77c:	8023883a 	mov	r17,r16
    b780:	0029883a 	mov	r20,zero
    b784:	4021883a 	mov	r16,r8
    b788:	003fad06 	br	b640 <__alt_mem_onchip_memory+0xf780b640>
    b78c:	9005883a 	mov	r2,r18
    b790:	94400504 	addi	r17,r18,20
    b794:	9c000504 	addi	r16,r19,20
    b798:	9825883a 	mov	r18,r19
    b79c:	05000044 	movi	r20,1
    b7a0:	1027883a 	mov	r19,r2
    b7a4:	003fa606 	br	b640 <__alt_mem_onchip_memory+0xf780b640>

0000b7a8 <__ulp>:
    b7a8:	295ffc2c 	andhi	r5,r5,32752
    b7ac:	00bf3034 	movhi	r2,64704
    b7b0:	2887883a 	add	r3,r5,r2
    b7b4:	00c0020e 	bge	zero,r3,b7c0 <__ulp+0x18>
    b7b8:	0005883a 	mov	r2,zero
    b7bc:	f800283a 	ret
    b7c0:	00c7c83a 	sub	r3,zero,r3
    b7c4:	1807d53a 	srai	r3,r3,20
    b7c8:	008004c4 	movi	r2,19
    b7cc:	10c00b0e 	bge	r2,r3,b7fc <__ulp+0x54>
    b7d0:	18bffb04 	addi	r2,r3,-20
    b7d4:	01000784 	movi	r4,30
    b7d8:	0007883a 	mov	r3,zero
    b7dc:	20800516 	blt	r4,r2,b7f4 <__ulp+0x4c>
    b7e0:	010007c4 	movi	r4,31
    b7e4:	2089c83a 	sub	r4,r4,r2
    b7e8:	00800044 	movi	r2,1
    b7ec:	1104983a 	sll	r2,r2,r4
    b7f0:	f800283a 	ret
    b7f4:	00800044 	movi	r2,1
    b7f8:	f800283a 	ret
    b7fc:	01400234 	movhi	r5,8
    b800:	28c7d83a 	sra	r3,r5,r3
    b804:	0005883a 	mov	r2,zero
    b808:	f800283a 	ret

0000b80c <__b2d>:
    b80c:	defffa04 	addi	sp,sp,-24
    b810:	dc000015 	stw	r16,0(sp)
    b814:	24000417 	ldw	r16,16(r4)
    b818:	dc400115 	stw	r17,4(sp)
    b81c:	24400504 	addi	r17,r4,20
    b820:	8421883a 	add	r16,r16,r16
    b824:	8421883a 	add	r16,r16,r16
    b828:	8c21883a 	add	r16,r17,r16
    b82c:	dc800215 	stw	r18,8(sp)
    b830:	84bfff17 	ldw	r18,-4(r16)
    b834:	dd000415 	stw	r20,16(sp)
    b838:	dcc00315 	stw	r19,12(sp)
    b83c:	9009883a 	mov	r4,r18
    b840:	2829883a 	mov	r20,r5
    b844:	dfc00515 	stw	ra,20(sp)
    b848:	000af780 	call	af78 <__hi0bits>
    b84c:	00c00804 	movi	r3,32
    b850:	1889c83a 	sub	r4,r3,r2
    b854:	a1000015 	stw	r4,0(r20)
    b858:	01000284 	movi	r4,10
    b85c:	84ffff04 	addi	r19,r16,-4
    b860:	20801216 	blt	r4,r2,b8ac <__b2d+0xa0>
    b864:	018002c4 	movi	r6,11
    b868:	308dc83a 	sub	r6,r6,r2
    b86c:	9186d83a 	srl	r3,r18,r6
    b870:	18cffc34 	orhi	r3,r3,16368
    b874:	8cc0212e 	bgeu	r17,r19,b8fc <__b2d+0xf0>
    b878:	813ffe17 	ldw	r4,-8(r16)
    b87c:	218cd83a 	srl	r6,r4,r6
    b880:	10800544 	addi	r2,r2,21
    b884:	9084983a 	sll	r2,r18,r2
    b888:	1184b03a 	or	r2,r2,r6
    b88c:	dfc00517 	ldw	ra,20(sp)
    b890:	dd000417 	ldw	r20,16(sp)
    b894:	dcc00317 	ldw	r19,12(sp)
    b898:	dc800217 	ldw	r18,8(sp)
    b89c:	dc400117 	ldw	r17,4(sp)
    b8a0:	dc000017 	ldw	r16,0(sp)
    b8a4:	dec00604 	addi	sp,sp,24
    b8a8:	f800283a 	ret
    b8ac:	8cc00f2e 	bgeu	r17,r19,b8ec <__b2d+0xe0>
    b8b0:	117ffd44 	addi	r5,r2,-11
    b8b4:	80bffe17 	ldw	r2,-8(r16)
    b8b8:	28000e26 	beq	r5,zero,b8f4 <__b2d+0xe8>
    b8bc:	1949c83a 	sub	r4,r3,r5
    b8c0:	9164983a 	sll	r18,r18,r5
    b8c4:	1106d83a 	srl	r3,r2,r4
    b8c8:	81bffe04 	addi	r6,r16,-8
    b8cc:	948ffc34 	orhi	r18,r18,16368
    b8d0:	90c6b03a 	or	r3,r18,r3
    b8d4:	89800e2e 	bgeu	r17,r6,b910 <__b2d+0x104>
    b8d8:	81bffd17 	ldw	r6,-12(r16)
    b8dc:	1144983a 	sll	r2,r2,r5
    b8e0:	310ad83a 	srl	r5,r6,r4
    b8e4:	2884b03a 	or	r2,r5,r2
    b8e8:	003fe806 	br	b88c <__alt_mem_onchip_memory+0xf780b88c>
    b8ec:	10bffd44 	addi	r2,r2,-11
    b8f0:	1000041e 	bne	r2,zero,b904 <__b2d+0xf8>
    b8f4:	90cffc34 	orhi	r3,r18,16368
    b8f8:	003fe406 	br	b88c <__alt_mem_onchip_memory+0xf780b88c>
    b8fc:	000d883a 	mov	r6,zero
    b900:	003fdf06 	br	b880 <__alt_mem_onchip_memory+0xf780b880>
    b904:	90a4983a 	sll	r18,r18,r2
    b908:	0005883a 	mov	r2,zero
    b90c:	003ff906 	br	b8f4 <__alt_mem_onchip_memory+0xf780b8f4>
    b910:	1144983a 	sll	r2,r2,r5
    b914:	003fdd06 	br	b88c <__alt_mem_onchip_memory+0xf780b88c>

0000b918 <__d2b>:
    b918:	defff804 	addi	sp,sp,-32
    b91c:	dc000215 	stw	r16,8(sp)
    b920:	3021883a 	mov	r16,r6
    b924:	dc400315 	stw	r17,12(sp)
    b928:	8022907a 	slli	r17,r16,1
    b92c:	dd000615 	stw	r20,24(sp)
    b930:	2829883a 	mov	r20,r5
    b934:	01400044 	movi	r5,1
    b938:	dcc00515 	stw	r19,20(sp)
    b93c:	dc800415 	stw	r18,16(sp)
    b940:	dfc00715 	stw	ra,28(sp)
    b944:	3825883a 	mov	r18,r7
    b948:	8822d57a 	srli	r17,r17,21
    b94c:	000ac840 	call	ac84 <_Balloc>
    b950:	1027883a 	mov	r19,r2
    b954:	00800434 	movhi	r2,16
    b958:	10bfffc4 	addi	r2,r2,-1
    b95c:	808c703a 	and	r6,r16,r2
    b960:	88000126 	beq	r17,zero,b968 <__d2b+0x50>
    b964:	31800434 	orhi	r6,r6,16
    b968:	d9800015 	stw	r6,0(sp)
    b96c:	a0002426 	beq	r20,zero,ba00 <__d2b+0xe8>
    b970:	d9000104 	addi	r4,sp,4
    b974:	dd000115 	stw	r20,4(sp)
    b978:	000afe00 	call	afe0 <__lo0bits>
    b97c:	d8c00017 	ldw	r3,0(sp)
    b980:	10002f1e 	bne	r2,zero,ba40 <__d2b+0x128>
    b984:	d9000117 	ldw	r4,4(sp)
    b988:	99000515 	stw	r4,20(r19)
    b98c:	1821003a 	cmpeq	r16,r3,zero
    b990:	01000084 	movi	r4,2
    b994:	2421c83a 	sub	r16,r4,r16
    b998:	98c00615 	stw	r3,24(r19)
    b99c:	9c000415 	stw	r16,16(r19)
    b9a0:	88001f1e 	bne	r17,zero,ba20 <__d2b+0x108>
    b9a4:	10bef384 	addi	r2,r2,-1074
    b9a8:	90800015 	stw	r2,0(r18)
    b9ac:	00900034 	movhi	r2,16384
    b9b0:	10bfffc4 	addi	r2,r2,-1
    b9b4:	8085883a 	add	r2,r16,r2
    b9b8:	1085883a 	add	r2,r2,r2
    b9bc:	1085883a 	add	r2,r2,r2
    b9c0:	9885883a 	add	r2,r19,r2
    b9c4:	11000517 	ldw	r4,20(r2)
    b9c8:	8020917a 	slli	r16,r16,5
    b9cc:	000af780 	call	af78 <__hi0bits>
    b9d0:	d8c00817 	ldw	r3,32(sp)
    b9d4:	8085c83a 	sub	r2,r16,r2
    b9d8:	18800015 	stw	r2,0(r3)
    b9dc:	9805883a 	mov	r2,r19
    b9e0:	dfc00717 	ldw	ra,28(sp)
    b9e4:	dd000617 	ldw	r20,24(sp)
    b9e8:	dcc00517 	ldw	r19,20(sp)
    b9ec:	dc800417 	ldw	r18,16(sp)
    b9f0:	dc400317 	ldw	r17,12(sp)
    b9f4:	dc000217 	ldw	r16,8(sp)
    b9f8:	dec00804 	addi	sp,sp,32
    b9fc:	f800283a 	ret
    ba00:	d809883a 	mov	r4,sp
    ba04:	000afe00 	call	afe0 <__lo0bits>
    ba08:	d8c00017 	ldw	r3,0(sp)
    ba0c:	04000044 	movi	r16,1
    ba10:	9c000415 	stw	r16,16(r19)
    ba14:	98c00515 	stw	r3,20(r19)
    ba18:	10800804 	addi	r2,r2,32
    ba1c:	883fe126 	beq	r17,zero,b9a4 <__alt_mem_onchip_memory+0xf780b9a4>
    ba20:	00c00d44 	movi	r3,53
    ba24:	8c7ef344 	addi	r17,r17,-1075
    ba28:	88a3883a 	add	r17,r17,r2
    ba2c:	1885c83a 	sub	r2,r3,r2
    ba30:	d8c00817 	ldw	r3,32(sp)
    ba34:	94400015 	stw	r17,0(r18)
    ba38:	18800015 	stw	r2,0(r3)
    ba3c:	003fe706 	br	b9dc <__alt_mem_onchip_memory+0xf780b9dc>
    ba40:	01000804 	movi	r4,32
    ba44:	2089c83a 	sub	r4,r4,r2
    ba48:	1908983a 	sll	r4,r3,r4
    ba4c:	d9400117 	ldw	r5,4(sp)
    ba50:	1886d83a 	srl	r3,r3,r2
    ba54:	2148b03a 	or	r4,r4,r5
    ba58:	99000515 	stw	r4,20(r19)
    ba5c:	d8c00015 	stw	r3,0(sp)
    ba60:	003fca06 	br	b98c <__alt_mem_onchip_memory+0xf780b98c>

0000ba64 <__ratio>:
    ba64:	defff904 	addi	sp,sp,-28
    ba68:	dc400315 	stw	r17,12(sp)
    ba6c:	2823883a 	mov	r17,r5
    ba70:	d9400104 	addi	r5,sp,4
    ba74:	dfc00615 	stw	ra,24(sp)
    ba78:	dcc00515 	stw	r19,20(sp)
    ba7c:	dc800415 	stw	r18,16(sp)
    ba80:	2027883a 	mov	r19,r4
    ba84:	dc000215 	stw	r16,8(sp)
    ba88:	000b80c0 	call	b80c <__b2d>
    ba8c:	d80b883a 	mov	r5,sp
    ba90:	8809883a 	mov	r4,r17
    ba94:	1025883a 	mov	r18,r2
    ba98:	1821883a 	mov	r16,r3
    ba9c:	000b80c0 	call	b80c <__b2d>
    baa0:	8a000417 	ldw	r8,16(r17)
    baa4:	99000417 	ldw	r4,16(r19)
    baa8:	d9400117 	ldw	r5,4(sp)
    baac:	2209c83a 	sub	r4,r4,r8
    bab0:	2010917a 	slli	r8,r4,5
    bab4:	d9000017 	ldw	r4,0(sp)
    bab8:	2909c83a 	sub	r4,r5,r4
    babc:	4109883a 	add	r4,r8,r4
    bac0:	01000e0e 	bge	zero,r4,bafc <__ratio+0x98>
    bac4:	2008953a 	slli	r4,r4,20
    bac8:	2421883a 	add	r16,r4,r16
    bacc:	100d883a 	mov	r6,r2
    bad0:	180f883a 	mov	r7,r3
    bad4:	9009883a 	mov	r4,r18
    bad8:	800b883a 	mov	r5,r16
    badc:	0002b3c0 	call	2b3c <__divdf3>
    bae0:	dfc00617 	ldw	ra,24(sp)
    bae4:	dcc00517 	ldw	r19,20(sp)
    bae8:	dc800417 	ldw	r18,16(sp)
    baec:	dc400317 	ldw	r17,12(sp)
    baf0:	dc000217 	ldw	r16,8(sp)
    baf4:	dec00704 	addi	sp,sp,28
    baf8:	f800283a 	ret
    bafc:	2008953a 	slli	r4,r4,20
    bb00:	1907c83a 	sub	r3,r3,r4
    bb04:	003ff106 	br	bacc <__alt_mem_onchip_memory+0xf780bacc>

0000bb08 <_mprec_log10>:
    bb08:	defffe04 	addi	sp,sp,-8
    bb0c:	dc000015 	stw	r16,0(sp)
    bb10:	dfc00115 	stw	ra,4(sp)
    bb14:	008005c4 	movi	r2,23
    bb18:	2021883a 	mov	r16,r4
    bb1c:	11000d0e 	bge	r2,r4,bb54 <_mprec_log10+0x4c>
    bb20:	0005883a 	mov	r2,zero
    bb24:	00cffc34 	movhi	r3,16368
    bb28:	843fffc4 	addi	r16,r16,-1
    bb2c:	000d883a 	mov	r6,zero
    bb30:	01d00934 	movhi	r7,16420
    bb34:	1009883a 	mov	r4,r2
    bb38:	180b883a 	mov	r5,r3
    bb3c:	00035f40 	call	35f4 <__muldf3>
    bb40:	803ff91e 	bne	r16,zero,bb28 <__alt_mem_onchip_memory+0xf780bb28>
    bb44:	dfc00117 	ldw	ra,4(sp)
    bb48:	dc000017 	ldw	r16,0(sp)
    bb4c:	dec00204 	addi	sp,sp,8
    bb50:	f800283a 	ret
    bb54:	202090fa 	slli	r16,r4,3
    bb58:	00800074 	movhi	r2,1
    bb5c:	10889204 	addi	r2,r2,8776
    bb60:	1421883a 	add	r16,r2,r16
    bb64:	80800017 	ldw	r2,0(r16)
    bb68:	80c00117 	ldw	r3,4(r16)
    bb6c:	dfc00117 	ldw	ra,4(sp)
    bb70:	dc000017 	ldw	r16,0(sp)
    bb74:	dec00204 	addi	sp,sp,8
    bb78:	f800283a 	ret

0000bb7c <__copybits>:
    bb7c:	297fffc4 	addi	r5,r5,-1
    bb80:	280fd17a 	srai	r7,r5,5
    bb84:	30c00417 	ldw	r3,16(r6)
    bb88:	30800504 	addi	r2,r6,20
    bb8c:	39c00044 	addi	r7,r7,1
    bb90:	18c7883a 	add	r3,r3,r3
    bb94:	39cf883a 	add	r7,r7,r7
    bb98:	18c7883a 	add	r3,r3,r3
    bb9c:	39cf883a 	add	r7,r7,r7
    bba0:	10c7883a 	add	r3,r2,r3
    bba4:	21cf883a 	add	r7,r4,r7
    bba8:	10c00d2e 	bgeu	r2,r3,bbe0 <__copybits+0x64>
    bbac:	200b883a 	mov	r5,r4
    bbb0:	12000017 	ldw	r8,0(r2)
    bbb4:	29400104 	addi	r5,r5,4
    bbb8:	10800104 	addi	r2,r2,4
    bbbc:	2a3fff15 	stw	r8,-4(r5)
    bbc0:	10fffb36 	bltu	r2,r3,bbb0 <__alt_mem_onchip_memory+0xf780bbb0>
    bbc4:	1985c83a 	sub	r2,r3,r6
    bbc8:	10bffac4 	addi	r2,r2,-21
    bbcc:	1004d0ba 	srli	r2,r2,2
    bbd0:	10800044 	addi	r2,r2,1
    bbd4:	1085883a 	add	r2,r2,r2
    bbd8:	1085883a 	add	r2,r2,r2
    bbdc:	2089883a 	add	r4,r4,r2
    bbe0:	21c0032e 	bgeu	r4,r7,bbf0 <__copybits+0x74>
    bbe4:	20000015 	stw	zero,0(r4)
    bbe8:	21000104 	addi	r4,r4,4
    bbec:	21fffd36 	bltu	r4,r7,bbe4 <__alt_mem_onchip_memory+0xf780bbe4>
    bbf0:	f800283a 	ret

0000bbf4 <__any_on>:
    bbf4:	20c00417 	ldw	r3,16(r4)
    bbf8:	2805d17a 	srai	r2,r5,5
    bbfc:	21000504 	addi	r4,r4,20
    bc00:	18800d0e 	bge	r3,r2,bc38 <__any_on+0x44>
    bc04:	18c7883a 	add	r3,r3,r3
    bc08:	18c7883a 	add	r3,r3,r3
    bc0c:	20c7883a 	add	r3,r4,r3
    bc10:	20c0192e 	bgeu	r4,r3,bc78 <__any_on+0x84>
    bc14:	18bfff17 	ldw	r2,-4(r3)
    bc18:	18ffff04 	addi	r3,r3,-4
    bc1c:	1000041e 	bne	r2,zero,bc30 <__any_on+0x3c>
    bc20:	20c0142e 	bgeu	r4,r3,bc74 <__any_on+0x80>
    bc24:	18ffff04 	addi	r3,r3,-4
    bc28:	19400017 	ldw	r5,0(r3)
    bc2c:	283ffc26 	beq	r5,zero,bc20 <__alt_mem_onchip_memory+0xf780bc20>
    bc30:	00800044 	movi	r2,1
    bc34:	f800283a 	ret
    bc38:	10c00a0e 	bge	r2,r3,bc64 <__any_on+0x70>
    bc3c:	1085883a 	add	r2,r2,r2
    bc40:	1085883a 	add	r2,r2,r2
    bc44:	294007cc 	andi	r5,r5,31
    bc48:	2087883a 	add	r3,r4,r2
    bc4c:	283ff026 	beq	r5,zero,bc10 <__alt_mem_onchip_memory+0xf780bc10>
    bc50:	19800017 	ldw	r6,0(r3)
    bc54:	3144d83a 	srl	r2,r6,r5
    bc58:	114a983a 	sll	r5,r2,r5
    bc5c:	317ff41e 	bne	r6,r5,bc30 <__alt_mem_onchip_memory+0xf780bc30>
    bc60:	003feb06 	br	bc10 <__alt_mem_onchip_memory+0xf780bc10>
    bc64:	1085883a 	add	r2,r2,r2
    bc68:	1085883a 	add	r2,r2,r2
    bc6c:	2087883a 	add	r3,r4,r2
    bc70:	003fe706 	br	bc10 <__alt_mem_onchip_memory+0xf780bc10>
    bc74:	f800283a 	ret
    bc78:	0005883a 	mov	r2,zero
    bc7c:	f800283a 	ret

0000bc80 <_putc_r>:
    bc80:	defffc04 	addi	sp,sp,-16
    bc84:	dc000215 	stw	r16,8(sp)
    bc88:	dfc00315 	stw	ra,12(sp)
    bc8c:	2021883a 	mov	r16,r4
    bc90:	20000226 	beq	r4,zero,bc9c <_putc_r+0x1c>
    bc94:	20800e17 	ldw	r2,56(r4)
    bc98:	10001b26 	beq	r2,zero,bd08 <_putc_r+0x88>
    bc9c:	30800217 	ldw	r2,8(r6)
    bca0:	10bfffc4 	addi	r2,r2,-1
    bca4:	30800215 	stw	r2,8(r6)
    bca8:	10000a16 	blt	r2,zero,bcd4 <_putc_r+0x54>
    bcac:	30800017 	ldw	r2,0(r6)
    bcb0:	11400005 	stb	r5,0(r2)
    bcb4:	30800017 	ldw	r2,0(r6)
    bcb8:	10c00044 	addi	r3,r2,1
    bcbc:	30c00015 	stw	r3,0(r6)
    bcc0:	10800003 	ldbu	r2,0(r2)
    bcc4:	dfc00317 	ldw	ra,12(sp)
    bcc8:	dc000217 	ldw	r16,8(sp)
    bccc:	dec00404 	addi	sp,sp,16
    bcd0:	f800283a 	ret
    bcd4:	30c00617 	ldw	r3,24(r6)
    bcd8:	10c00616 	blt	r2,r3,bcf4 <_putc_r+0x74>
    bcdc:	30800017 	ldw	r2,0(r6)
    bce0:	00c00284 	movi	r3,10
    bce4:	11400005 	stb	r5,0(r2)
    bce8:	30800017 	ldw	r2,0(r6)
    bcec:	11400003 	ldbu	r5,0(r2)
    bcf0:	28fff11e 	bne	r5,r3,bcb8 <__alt_mem_onchip_memory+0xf780bcb8>
    bcf4:	8009883a 	mov	r4,r16
    bcf8:	dfc00317 	ldw	ra,12(sp)
    bcfc:	dc000217 	ldw	r16,8(sp)
    bd00:	dec00404 	addi	sp,sp,16
    bd04:	000dc001 	jmpi	dc00 <__swbuf_r>
    bd08:	d9400015 	stw	r5,0(sp)
    bd0c:	d9800115 	stw	r6,4(sp)
    bd10:	000920c0 	call	920c <__sinit>
    bd14:	d9800117 	ldw	r6,4(sp)
    bd18:	d9400017 	ldw	r5,0(sp)
    bd1c:	003fdf06 	br	bc9c <__alt_mem_onchip_memory+0xf780bc9c>

0000bd20 <putc>:
    bd20:	00800074 	movhi	r2,1
    bd24:	defffc04 	addi	sp,sp,-16
    bd28:	108fc804 	addi	r2,r2,16160
    bd2c:	dc000115 	stw	r16,4(sp)
    bd30:	14000017 	ldw	r16,0(r2)
    bd34:	dc400215 	stw	r17,8(sp)
    bd38:	dfc00315 	stw	ra,12(sp)
    bd3c:	2023883a 	mov	r17,r4
    bd40:	80000226 	beq	r16,zero,bd4c <putc+0x2c>
    bd44:	80800e17 	ldw	r2,56(r16)
    bd48:	10001a26 	beq	r2,zero,bdb4 <putc+0x94>
    bd4c:	28800217 	ldw	r2,8(r5)
    bd50:	10bfffc4 	addi	r2,r2,-1
    bd54:	28800215 	stw	r2,8(r5)
    bd58:	10000b16 	blt	r2,zero,bd88 <putc+0x68>
    bd5c:	28800017 	ldw	r2,0(r5)
    bd60:	14400005 	stb	r17,0(r2)
    bd64:	28800017 	ldw	r2,0(r5)
    bd68:	10c00044 	addi	r3,r2,1
    bd6c:	28c00015 	stw	r3,0(r5)
    bd70:	10800003 	ldbu	r2,0(r2)
    bd74:	dfc00317 	ldw	ra,12(sp)
    bd78:	dc400217 	ldw	r17,8(sp)
    bd7c:	dc000117 	ldw	r16,4(sp)
    bd80:	dec00404 	addi	sp,sp,16
    bd84:	f800283a 	ret
    bd88:	28c00617 	ldw	r3,24(r5)
    bd8c:	10c00e16 	blt	r2,r3,bdc8 <putc+0xa8>
    bd90:	28800017 	ldw	r2,0(r5)
    bd94:	01000284 	movi	r4,10
    bd98:	14400005 	stb	r17,0(r2)
    bd9c:	28800017 	ldw	r2,0(r5)
    bda0:	10c00003 	ldbu	r3,0(r2)
    bda4:	193ff01e 	bne	r3,r4,bd68 <__alt_mem_onchip_memory+0xf780bd68>
    bda8:	280d883a 	mov	r6,r5
    bdac:	180b883a 	mov	r5,r3
    bdb0:	00000706 	br	bdd0 <putc+0xb0>
    bdb4:	8009883a 	mov	r4,r16
    bdb8:	d9400015 	stw	r5,0(sp)
    bdbc:	000920c0 	call	920c <__sinit>
    bdc0:	d9400017 	ldw	r5,0(sp)
    bdc4:	003fe106 	br	bd4c <__alt_mem_onchip_memory+0xf780bd4c>
    bdc8:	280d883a 	mov	r6,r5
    bdcc:	880b883a 	mov	r5,r17
    bdd0:	8009883a 	mov	r4,r16
    bdd4:	dfc00317 	ldw	ra,12(sp)
    bdd8:	dc400217 	ldw	r17,8(sp)
    bddc:	dc000117 	ldw	r16,4(sp)
    bde0:	dec00404 	addi	sp,sp,16
    bde4:	000dc001 	jmpi	dc00 <__swbuf_r>

0000bde8 <_realloc_r>:
    bde8:	defff604 	addi	sp,sp,-40
    bdec:	dc800215 	stw	r18,8(sp)
    bdf0:	dfc00915 	stw	ra,36(sp)
    bdf4:	df000815 	stw	fp,32(sp)
    bdf8:	ddc00715 	stw	r23,28(sp)
    bdfc:	dd800615 	stw	r22,24(sp)
    be00:	dd400515 	stw	r21,20(sp)
    be04:	dd000415 	stw	r20,16(sp)
    be08:	dcc00315 	stw	r19,12(sp)
    be0c:	dc400115 	stw	r17,4(sp)
    be10:	dc000015 	stw	r16,0(sp)
    be14:	3025883a 	mov	r18,r6
    be18:	2800b726 	beq	r5,zero,c0f8 <_realloc_r+0x310>
    be1c:	282b883a 	mov	r21,r5
    be20:	2029883a 	mov	r20,r4
    be24:	000f8e40 	call	f8e4 <__malloc_lock>
    be28:	a8bfff17 	ldw	r2,-4(r21)
    be2c:	043fff04 	movi	r16,-4
    be30:	90c002c4 	addi	r3,r18,11
    be34:	01000584 	movi	r4,22
    be38:	acfffe04 	addi	r19,r21,-8
    be3c:	1420703a 	and	r16,r2,r16
    be40:	20c0332e 	bgeu	r4,r3,bf10 <_realloc_r+0x128>
    be44:	047ffe04 	movi	r17,-8
    be48:	1c62703a 	and	r17,r3,r17
    be4c:	8807883a 	mov	r3,r17
    be50:	88005816 	blt	r17,zero,bfb4 <_realloc_r+0x1cc>
    be54:	8c805736 	bltu	r17,r18,bfb4 <_realloc_r+0x1cc>
    be58:	80c0300e 	bge	r16,r3,bf1c <_realloc_r+0x134>
    be5c:	07000074 	movhi	fp,1
    be60:	e70a3e04 	addi	fp,fp,10488
    be64:	e1c00217 	ldw	r7,8(fp)
    be68:	9c09883a 	add	r4,r19,r16
    be6c:	22000117 	ldw	r8,4(r4)
    be70:	21c06326 	beq	r4,r7,c000 <_realloc_r+0x218>
    be74:	017fff84 	movi	r5,-2
    be78:	414a703a 	and	r5,r8,r5
    be7c:	214b883a 	add	r5,r4,r5
    be80:	29800117 	ldw	r6,4(r5)
    be84:	3180004c 	andi	r6,r6,1
    be88:	30003f26 	beq	r6,zero,bf88 <_realloc_r+0x1a0>
    be8c:	1080004c 	andi	r2,r2,1
    be90:	10008326 	beq	r2,zero,c0a0 <_realloc_r+0x2b8>
    be94:	900b883a 	mov	r5,r18
    be98:	a009883a 	mov	r4,r20
    be9c:	0009fc80 	call	9fc8 <_malloc_r>
    bea0:	1025883a 	mov	r18,r2
    bea4:	10011e26 	beq	r2,zero,c320 <_realloc_r+0x538>
    bea8:	a93fff17 	ldw	r4,-4(r21)
    beac:	10fffe04 	addi	r3,r2,-8
    beb0:	00bfff84 	movi	r2,-2
    beb4:	2084703a 	and	r2,r4,r2
    beb8:	9885883a 	add	r2,r19,r2
    bebc:	1880ee26 	beq	r3,r2,c278 <_realloc_r+0x490>
    bec0:	81bfff04 	addi	r6,r16,-4
    bec4:	00800904 	movi	r2,36
    bec8:	1180b836 	bltu	r2,r6,c1ac <_realloc_r+0x3c4>
    becc:	00c004c4 	movi	r3,19
    bed0:	19809636 	bltu	r3,r6,c12c <_realloc_r+0x344>
    bed4:	9005883a 	mov	r2,r18
    bed8:	a807883a 	mov	r3,r21
    bedc:	19000017 	ldw	r4,0(r3)
    bee0:	11000015 	stw	r4,0(r2)
    bee4:	19000117 	ldw	r4,4(r3)
    bee8:	11000115 	stw	r4,4(r2)
    beec:	18c00217 	ldw	r3,8(r3)
    bef0:	10c00215 	stw	r3,8(r2)
    bef4:	a80b883a 	mov	r5,r21
    bef8:	a009883a 	mov	r4,r20
    befc:	00093800 	call	9380 <_free_r>
    bf00:	a009883a 	mov	r4,r20
    bf04:	000f9080 	call	f908 <__malloc_unlock>
    bf08:	9005883a 	mov	r2,r18
    bf0c:	00001206 	br	bf58 <_realloc_r+0x170>
    bf10:	00c00404 	movi	r3,16
    bf14:	1823883a 	mov	r17,r3
    bf18:	003fce06 	br	be54 <__alt_mem_onchip_memory+0xf780be54>
    bf1c:	a825883a 	mov	r18,r21
    bf20:	8445c83a 	sub	r2,r16,r17
    bf24:	00c003c4 	movi	r3,15
    bf28:	18802636 	bltu	r3,r2,bfc4 <_realloc_r+0x1dc>
    bf2c:	99800117 	ldw	r6,4(r19)
    bf30:	9c07883a 	add	r3,r19,r16
    bf34:	3180004c 	andi	r6,r6,1
    bf38:	3420b03a 	or	r16,r6,r16
    bf3c:	9c000115 	stw	r16,4(r19)
    bf40:	18800117 	ldw	r2,4(r3)
    bf44:	10800054 	ori	r2,r2,1
    bf48:	18800115 	stw	r2,4(r3)
    bf4c:	a009883a 	mov	r4,r20
    bf50:	000f9080 	call	f908 <__malloc_unlock>
    bf54:	9005883a 	mov	r2,r18
    bf58:	dfc00917 	ldw	ra,36(sp)
    bf5c:	df000817 	ldw	fp,32(sp)
    bf60:	ddc00717 	ldw	r23,28(sp)
    bf64:	dd800617 	ldw	r22,24(sp)
    bf68:	dd400517 	ldw	r21,20(sp)
    bf6c:	dd000417 	ldw	r20,16(sp)
    bf70:	dcc00317 	ldw	r19,12(sp)
    bf74:	dc800217 	ldw	r18,8(sp)
    bf78:	dc400117 	ldw	r17,4(sp)
    bf7c:	dc000017 	ldw	r16,0(sp)
    bf80:	dec00a04 	addi	sp,sp,40
    bf84:	f800283a 	ret
    bf88:	017fff04 	movi	r5,-4
    bf8c:	414a703a 	and	r5,r8,r5
    bf90:	814d883a 	add	r6,r16,r5
    bf94:	30c01f16 	blt	r6,r3,c014 <_realloc_r+0x22c>
    bf98:	20800317 	ldw	r2,12(r4)
    bf9c:	20c00217 	ldw	r3,8(r4)
    bfa0:	a825883a 	mov	r18,r21
    bfa4:	3021883a 	mov	r16,r6
    bfa8:	18800315 	stw	r2,12(r3)
    bfac:	10c00215 	stw	r3,8(r2)
    bfb0:	003fdb06 	br	bf20 <__alt_mem_onchip_memory+0xf780bf20>
    bfb4:	00800304 	movi	r2,12
    bfb8:	a0800015 	stw	r2,0(r20)
    bfbc:	0005883a 	mov	r2,zero
    bfc0:	003fe506 	br	bf58 <__alt_mem_onchip_memory+0xf780bf58>
    bfc4:	98c00117 	ldw	r3,4(r19)
    bfc8:	9c4b883a 	add	r5,r19,r17
    bfcc:	11000054 	ori	r4,r2,1
    bfd0:	18c0004c 	andi	r3,r3,1
    bfd4:	1c62b03a 	or	r17,r3,r17
    bfd8:	9c400115 	stw	r17,4(r19)
    bfdc:	29000115 	stw	r4,4(r5)
    bfe0:	2885883a 	add	r2,r5,r2
    bfe4:	10c00117 	ldw	r3,4(r2)
    bfe8:	29400204 	addi	r5,r5,8
    bfec:	a009883a 	mov	r4,r20
    bff0:	18c00054 	ori	r3,r3,1
    bff4:	10c00115 	stw	r3,4(r2)
    bff8:	00093800 	call	9380 <_free_r>
    bffc:	003fd306 	br	bf4c <__alt_mem_onchip_memory+0xf780bf4c>
    c000:	017fff04 	movi	r5,-4
    c004:	414a703a 	and	r5,r8,r5
    c008:	89800404 	addi	r6,r17,16
    c00c:	8151883a 	add	r8,r16,r5
    c010:	4180590e 	bge	r8,r6,c178 <_realloc_r+0x390>
    c014:	1080004c 	andi	r2,r2,1
    c018:	103f9e1e 	bne	r2,zero,be94 <__alt_mem_onchip_memory+0xf780be94>
    c01c:	adbffe17 	ldw	r22,-8(r21)
    c020:	00bfff04 	movi	r2,-4
    c024:	9dadc83a 	sub	r22,r19,r22
    c028:	b1800117 	ldw	r6,4(r22)
    c02c:	3084703a 	and	r2,r6,r2
    c030:	20002026 	beq	r4,zero,c0b4 <_realloc_r+0x2cc>
    c034:	80af883a 	add	r23,r16,r2
    c038:	b96f883a 	add	r23,r23,r5
    c03c:	21c05f26 	beq	r4,r7,c1bc <_realloc_r+0x3d4>
    c040:	b8c01c16 	blt	r23,r3,c0b4 <_realloc_r+0x2cc>
    c044:	20800317 	ldw	r2,12(r4)
    c048:	20c00217 	ldw	r3,8(r4)
    c04c:	81bfff04 	addi	r6,r16,-4
    c050:	01000904 	movi	r4,36
    c054:	18800315 	stw	r2,12(r3)
    c058:	10c00215 	stw	r3,8(r2)
    c05c:	b0c00217 	ldw	r3,8(r22)
    c060:	b0800317 	ldw	r2,12(r22)
    c064:	b4800204 	addi	r18,r22,8
    c068:	18800315 	stw	r2,12(r3)
    c06c:	10c00215 	stw	r3,8(r2)
    c070:	21801b36 	bltu	r4,r6,c0e0 <_realloc_r+0x2f8>
    c074:	008004c4 	movi	r2,19
    c078:	1180352e 	bgeu	r2,r6,c150 <_realloc_r+0x368>
    c07c:	a8800017 	ldw	r2,0(r21)
    c080:	b0800215 	stw	r2,8(r22)
    c084:	a8800117 	ldw	r2,4(r21)
    c088:	b0800315 	stw	r2,12(r22)
    c08c:	008006c4 	movi	r2,27
    c090:	11807f36 	bltu	r2,r6,c290 <_realloc_r+0x4a8>
    c094:	b0800404 	addi	r2,r22,16
    c098:	ad400204 	addi	r21,r21,8
    c09c:	00002d06 	br	c154 <_realloc_r+0x36c>
    c0a0:	adbffe17 	ldw	r22,-8(r21)
    c0a4:	00bfff04 	movi	r2,-4
    c0a8:	9dadc83a 	sub	r22,r19,r22
    c0ac:	b1000117 	ldw	r4,4(r22)
    c0b0:	2084703a 	and	r2,r4,r2
    c0b4:	b03f7726 	beq	r22,zero,be94 <__alt_mem_onchip_memory+0xf780be94>
    c0b8:	80af883a 	add	r23,r16,r2
    c0bc:	b8ff7516 	blt	r23,r3,be94 <__alt_mem_onchip_memory+0xf780be94>
    c0c0:	b0800317 	ldw	r2,12(r22)
    c0c4:	b0c00217 	ldw	r3,8(r22)
    c0c8:	81bfff04 	addi	r6,r16,-4
    c0cc:	01000904 	movi	r4,36
    c0d0:	18800315 	stw	r2,12(r3)
    c0d4:	10c00215 	stw	r3,8(r2)
    c0d8:	b4800204 	addi	r18,r22,8
    c0dc:	21bfe52e 	bgeu	r4,r6,c074 <__alt_mem_onchip_memory+0xf780c074>
    c0e0:	a80b883a 	mov	r5,r21
    c0e4:	9009883a 	mov	r4,r18
    c0e8:	000aa000 	call	aa00 <memmove>
    c0ec:	b821883a 	mov	r16,r23
    c0f0:	b027883a 	mov	r19,r22
    c0f4:	003f8a06 	br	bf20 <__alt_mem_onchip_memory+0xf780bf20>
    c0f8:	300b883a 	mov	r5,r6
    c0fc:	dfc00917 	ldw	ra,36(sp)
    c100:	df000817 	ldw	fp,32(sp)
    c104:	ddc00717 	ldw	r23,28(sp)
    c108:	dd800617 	ldw	r22,24(sp)
    c10c:	dd400517 	ldw	r21,20(sp)
    c110:	dd000417 	ldw	r20,16(sp)
    c114:	dcc00317 	ldw	r19,12(sp)
    c118:	dc800217 	ldw	r18,8(sp)
    c11c:	dc400117 	ldw	r17,4(sp)
    c120:	dc000017 	ldw	r16,0(sp)
    c124:	dec00a04 	addi	sp,sp,40
    c128:	0009fc81 	jmpi	9fc8 <_malloc_r>
    c12c:	a8c00017 	ldw	r3,0(r21)
    c130:	90c00015 	stw	r3,0(r18)
    c134:	a8c00117 	ldw	r3,4(r21)
    c138:	90c00115 	stw	r3,4(r18)
    c13c:	00c006c4 	movi	r3,27
    c140:	19804536 	bltu	r3,r6,c258 <_realloc_r+0x470>
    c144:	90800204 	addi	r2,r18,8
    c148:	a8c00204 	addi	r3,r21,8
    c14c:	003f6306 	br	bedc <__alt_mem_onchip_memory+0xf780bedc>
    c150:	9005883a 	mov	r2,r18
    c154:	a8c00017 	ldw	r3,0(r21)
    c158:	b821883a 	mov	r16,r23
    c15c:	b027883a 	mov	r19,r22
    c160:	10c00015 	stw	r3,0(r2)
    c164:	a8c00117 	ldw	r3,4(r21)
    c168:	10c00115 	stw	r3,4(r2)
    c16c:	a8c00217 	ldw	r3,8(r21)
    c170:	10c00215 	stw	r3,8(r2)
    c174:	003f6a06 	br	bf20 <__alt_mem_onchip_memory+0xf780bf20>
    c178:	9c67883a 	add	r19,r19,r17
    c17c:	4445c83a 	sub	r2,r8,r17
    c180:	e4c00215 	stw	r19,8(fp)
    c184:	10800054 	ori	r2,r2,1
    c188:	98800115 	stw	r2,4(r19)
    c18c:	a8bfff17 	ldw	r2,-4(r21)
    c190:	a009883a 	mov	r4,r20
    c194:	1080004c 	andi	r2,r2,1
    c198:	1462b03a 	or	r17,r2,r17
    c19c:	ac7fff15 	stw	r17,-4(r21)
    c1a0:	000f9080 	call	f908 <__malloc_unlock>
    c1a4:	a805883a 	mov	r2,r21
    c1a8:	003f6b06 	br	bf58 <__alt_mem_onchip_memory+0xf780bf58>
    c1ac:	a80b883a 	mov	r5,r21
    c1b0:	9009883a 	mov	r4,r18
    c1b4:	000aa000 	call	aa00 <memmove>
    c1b8:	003f4e06 	br	bef4 <__alt_mem_onchip_memory+0xf780bef4>
    c1bc:	89000404 	addi	r4,r17,16
    c1c0:	b93fbc16 	blt	r23,r4,c0b4 <__alt_mem_onchip_memory+0xf780c0b4>
    c1c4:	b0800317 	ldw	r2,12(r22)
    c1c8:	b0c00217 	ldw	r3,8(r22)
    c1cc:	81bfff04 	addi	r6,r16,-4
    c1d0:	01000904 	movi	r4,36
    c1d4:	18800315 	stw	r2,12(r3)
    c1d8:	10c00215 	stw	r3,8(r2)
    c1dc:	b4800204 	addi	r18,r22,8
    c1e0:	21804336 	bltu	r4,r6,c2f0 <_realloc_r+0x508>
    c1e4:	008004c4 	movi	r2,19
    c1e8:	11803f2e 	bgeu	r2,r6,c2e8 <_realloc_r+0x500>
    c1ec:	a8800017 	ldw	r2,0(r21)
    c1f0:	b0800215 	stw	r2,8(r22)
    c1f4:	a8800117 	ldw	r2,4(r21)
    c1f8:	b0800315 	stw	r2,12(r22)
    c1fc:	008006c4 	movi	r2,27
    c200:	11803f36 	bltu	r2,r6,c300 <_realloc_r+0x518>
    c204:	b0800404 	addi	r2,r22,16
    c208:	ad400204 	addi	r21,r21,8
    c20c:	a8c00017 	ldw	r3,0(r21)
    c210:	10c00015 	stw	r3,0(r2)
    c214:	a8c00117 	ldw	r3,4(r21)
    c218:	10c00115 	stw	r3,4(r2)
    c21c:	a8c00217 	ldw	r3,8(r21)
    c220:	10c00215 	stw	r3,8(r2)
    c224:	b447883a 	add	r3,r22,r17
    c228:	bc45c83a 	sub	r2,r23,r17
    c22c:	e0c00215 	stw	r3,8(fp)
    c230:	10800054 	ori	r2,r2,1
    c234:	18800115 	stw	r2,4(r3)
    c238:	b0800117 	ldw	r2,4(r22)
    c23c:	a009883a 	mov	r4,r20
    c240:	1080004c 	andi	r2,r2,1
    c244:	1462b03a 	or	r17,r2,r17
    c248:	b4400115 	stw	r17,4(r22)
    c24c:	000f9080 	call	f908 <__malloc_unlock>
    c250:	9005883a 	mov	r2,r18
    c254:	003f4006 	br	bf58 <__alt_mem_onchip_memory+0xf780bf58>
    c258:	a8c00217 	ldw	r3,8(r21)
    c25c:	90c00215 	stw	r3,8(r18)
    c260:	a8c00317 	ldw	r3,12(r21)
    c264:	90c00315 	stw	r3,12(r18)
    c268:	30801126 	beq	r6,r2,c2b0 <_realloc_r+0x4c8>
    c26c:	90800404 	addi	r2,r18,16
    c270:	a8c00404 	addi	r3,r21,16
    c274:	003f1906 	br	bedc <__alt_mem_onchip_memory+0xf780bedc>
    c278:	90ffff17 	ldw	r3,-4(r18)
    c27c:	00bfff04 	movi	r2,-4
    c280:	a825883a 	mov	r18,r21
    c284:	1884703a 	and	r2,r3,r2
    c288:	80a1883a 	add	r16,r16,r2
    c28c:	003f2406 	br	bf20 <__alt_mem_onchip_memory+0xf780bf20>
    c290:	a8800217 	ldw	r2,8(r21)
    c294:	b0800415 	stw	r2,16(r22)
    c298:	a8800317 	ldw	r2,12(r21)
    c29c:	b0800515 	stw	r2,20(r22)
    c2a0:	31000a26 	beq	r6,r4,c2cc <_realloc_r+0x4e4>
    c2a4:	b0800604 	addi	r2,r22,24
    c2a8:	ad400404 	addi	r21,r21,16
    c2ac:	003fa906 	br	c154 <__alt_mem_onchip_memory+0xf780c154>
    c2b0:	a9000417 	ldw	r4,16(r21)
    c2b4:	90800604 	addi	r2,r18,24
    c2b8:	a8c00604 	addi	r3,r21,24
    c2bc:	91000415 	stw	r4,16(r18)
    c2c0:	a9000517 	ldw	r4,20(r21)
    c2c4:	91000515 	stw	r4,20(r18)
    c2c8:	003f0406 	br	bedc <__alt_mem_onchip_memory+0xf780bedc>
    c2cc:	a8c00417 	ldw	r3,16(r21)
    c2d0:	ad400604 	addi	r21,r21,24
    c2d4:	b0800804 	addi	r2,r22,32
    c2d8:	b0c00615 	stw	r3,24(r22)
    c2dc:	a8ffff17 	ldw	r3,-4(r21)
    c2e0:	b0c00715 	stw	r3,28(r22)
    c2e4:	003f9b06 	br	c154 <__alt_mem_onchip_memory+0xf780c154>
    c2e8:	9005883a 	mov	r2,r18
    c2ec:	003fc706 	br	c20c <__alt_mem_onchip_memory+0xf780c20c>
    c2f0:	a80b883a 	mov	r5,r21
    c2f4:	9009883a 	mov	r4,r18
    c2f8:	000aa000 	call	aa00 <memmove>
    c2fc:	003fc906 	br	c224 <__alt_mem_onchip_memory+0xf780c224>
    c300:	a8800217 	ldw	r2,8(r21)
    c304:	b0800415 	stw	r2,16(r22)
    c308:	a8800317 	ldw	r2,12(r21)
    c30c:	b0800515 	stw	r2,20(r22)
    c310:	31000726 	beq	r6,r4,c330 <_realloc_r+0x548>
    c314:	b0800604 	addi	r2,r22,24
    c318:	ad400404 	addi	r21,r21,16
    c31c:	003fbb06 	br	c20c <__alt_mem_onchip_memory+0xf780c20c>
    c320:	a009883a 	mov	r4,r20
    c324:	000f9080 	call	f908 <__malloc_unlock>
    c328:	0005883a 	mov	r2,zero
    c32c:	003f0a06 	br	bf58 <__alt_mem_onchip_memory+0xf780bf58>
    c330:	a8c00417 	ldw	r3,16(r21)
    c334:	ad400604 	addi	r21,r21,24
    c338:	b0800804 	addi	r2,r22,32
    c33c:	b0c00615 	stw	r3,24(r22)
    c340:	a8ffff17 	ldw	r3,-4(r21)
    c344:	b0c00715 	stw	r3,28(r22)
    c348:	003fb006 	br	c20c <__alt_mem_onchip_memory+0xf780c20c>

0000c34c <_sbrk_r>:
    c34c:	defffd04 	addi	sp,sp,-12
    c350:	dc000015 	stw	r16,0(sp)
    c354:	04000074 	movhi	r16,1
    c358:	dc400115 	stw	r17,4(sp)
    c35c:	84169e04 	addi	r16,r16,23160
    c360:	2023883a 	mov	r17,r4
    c364:	2809883a 	mov	r4,r5
    c368:	dfc00215 	stw	ra,8(sp)
    c36c:	80000015 	stw	zero,0(r16)
    c370:	000fac80 	call	fac8 <sbrk>
    c374:	00ffffc4 	movi	r3,-1
    c378:	10c00526 	beq	r2,r3,c390 <_sbrk_r+0x44>
    c37c:	dfc00217 	ldw	ra,8(sp)
    c380:	dc400117 	ldw	r17,4(sp)
    c384:	dc000017 	ldw	r16,0(sp)
    c388:	dec00304 	addi	sp,sp,12
    c38c:	f800283a 	ret
    c390:	80c00017 	ldw	r3,0(r16)
    c394:	183ff926 	beq	r3,zero,c37c <__alt_mem_onchip_memory+0xf780c37c>
    c398:	88c00015 	stw	r3,0(r17)
    c39c:	003ff706 	br	c37c <__alt_mem_onchip_memory+0xf780c37c>

0000c3a0 <__sread>:
    c3a0:	defffe04 	addi	sp,sp,-8
    c3a4:	dc000015 	stw	r16,0(sp)
    c3a8:	2821883a 	mov	r16,r5
    c3ac:	2940038f 	ldh	r5,14(r5)
    c3b0:	dfc00115 	stw	ra,4(sp)
    c3b4:	000e2ec0 	call	e2ec <_read_r>
    c3b8:	10000716 	blt	r2,zero,c3d8 <__sread+0x38>
    c3bc:	80c01417 	ldw	r3,80(r16)
    c3c0:	1887883a 	add	r3,r3,r2
    c3c4:	80c01415 	stw	r3,80(r16)
    c3c8:	dfc00117 	ldw	ra,4(sp)
    c3cc:	dc000017 	ldw	r16,0(sp)
    c3d0:	dec00204 	addi	sp,sp,8
    c3d4:	f800283a 	ret
    c3d8:	80c0030b 	ldhu	r3,12(r16)
    c3dc:	18fbffcc 	andi	r3,r3,61439
    c3e0:	80c0030d 	sth	r3,12(r16)
    c3e4:	dfc00117 	ldw	ra,4(sp)
    c3e8:	dc000017 	ldw	r16,0(sp)
    c3ec:	dec00204 	addi	sp,sp,8
    c3f0:	f800283a 	ret

0000c3f4 <__seofread>:
    c3f4:	0005883a 	mov	r2,zero
    c3f8:	f800283a 	ret

0000c3fc <__swrite>:
    c3fc:	2880030b 	ldhu	r2,12(r5)
    c400:	defffb04 	addi	sp,sp,-20
    c404:	dcc00315 	stw	r19,12(sp)
    c408:	dc800215 	stw	r18,8(sp)
    c40c:	dc400115 	stw	r17,4(sp)
    c410:	dc000015 	stw	r16,0(sp)
    c414:	dfc00415 	stw	ra,16(sp)
    c418:	10c0400c 	andi	r3,r2,256
    c41c:	2821883a 	mov	r16,r5
    c420:	2023883a 	mov	r17,r4
    c424:	3025883a 	mov	r18,r6
    c428:	3827883a 	mov	r19,r7
    c42c:	18000526 	beq	r3,zero,c444 <__swrite+0x48>
    c430:	2940038f 	ldh	r5,14(r5)
    c434:	01c00084 	movi	r7,2
    c438:	000d883a 	mov	r6,zero
    c43c:	000e28c0 	call	e28c <_lseek_r>
    c440:	8080030b 	ldhu	r2,12(r16)
    c444:	8140038f 	ldh	r5,14(r16)
    c448:	10bbffcc 	andi	r2,r2,61439
    c44c:	980f883a 	mov	r7,r19
    c450:	900d883a 	mov	r6,r18
    c454:	8809883a 	mov	r4,r17
    c458:	8080030d 	sth	r2,12(r16)
    c45c:	dfc00417 	ldw	ra,16(sp)
    c460:	dcc00317 	ldw	r19,12(sp)
    c464:	dc800217 	ldw	r18,8(sp)
    c468:	dc400117 	ldw	r17,4(sp)
    c46c:	dc000017 	ldw	r16,0(sp)
    c470:	dec00504 	addi	sp,sp,20
    c474:	000dd581 	jmpi	dd58 <_write_r>

0000c478 <__sseek>:
    c478:	defffe04 	addi	sp,sp,-8
    c47c:	dc000015 	stw	r16,0(sp)
    c480:	2821883a 	mov	r16,r5
    c484:	2940038f 	ldh	r5,14(r5)
    c488:	dfc00115 	stw	ra,4(sp)
    c48c:	000e28c0 	call	e28c <_lseek_r>
    c490:	00ffffc4 	movi	r3,-1
    c494:	10c00826 	beq	r2,r3,c4b8 <__sseek+0x40>
    c498:	80c0030b 	ldhu	r3,12(r16)
    c49c:	80801415 	stw	r2,80(r16)
    c4a0:	18c40014 	ori	r3,r3,4096
    c4a4:	80c0030d 	sth	r3,12(r16)
    c4a8:	dfc00117 	ldw	ra,4(sp)
    c4ac:	dc000017 	ldw	r16,0(sp)
    c4b0:	dec00204 	addi	sp,sp,8
    c4b4:	f800283a 	ret
    c4b8:	80c0030b 	ldhu	r3,12(r16)
    c4bc:	18fbffcc 	andi	r3,r3,61439
    c4c0:	80c0030d 	sth	r3,12(r16)
    c4c4:	dfc00117 	ldw	ra,4(sp)
    c4c8:	dc000017 	ldw	r16,0(sp)
    c4cc:	dec00204 	addi	sp,sp,8
    c4d0:	f800283a 	ret

0000c4d4 <__sclose>:
    c4d4:	2940038f 	ldh	r5,14(r5)
    c4d8:	000ddb81 	jmpi	ddb8 <_close_r>

0000c4dc <strcmp>:
    c4dc:	2144b03a 	or	r2,r4,r5
    c4e0:	108000cc 	andi	r2,r2,3
    c4e4:	1000171e 	bne	r2,zero,c544 <strcmp+0x68>
    c4e8:	20800017 	ldw	r2,0(r4)
    c4ec:	28c00017 	ldw	r3,0(r5)
    c4f0:	10c0141e 	bne	r2,r3,c544 <strcmp+0x68>
    c4f4:	027fbff4 	movhi	r9,65279
    c4f8:	4a7fbfc4 	addi	r9,r9,-257
    c4fc:	0086303a 	nor	r3,zero,r2
    c500:	02202074 	movhi	r8,32897
    c504:	1245883a 	add	r2,r2,r9
    c508:	42202004 	addi	r8,r8,-32640
    c50c:	10c4703a 	and	r2,r2,r3
    c510:	1204703a 	and	r2,r2,r8
    c514:	10000226 	beq	r2,zero,c520 <strcmp+0x44>
    c518:	00002306 	br	c5a8 <strcmp+0xcc>
    c51c:	1000221e 	bne	r2,zero,c5a8 <strcmp+0xcc>
    c520:	21000104 	addi	r4,r4,4
    c524:	20c00017 	ldw	r3,0(r4)
    c528:	29400104 	addi	r5,r5,4
    c52c:	29800017 	ldw	r6,0(r5)
    c530:	1a4f883a 	add	r7,r3,r9
    c534:	00c4303a 	nor	r2,zero,r3
    c538:	3884703a 	and	r2,r7,r2
    c53c:	1204703a 	and	r2,r2,r8
    c540:	19bff626 	beq	r3,r6,c51c <__alt_mem_onchip_memory+0xf780c51c>
    c544:	20800003 	ldbu	r2,0(r4)
    c548:	10c03fcc 	andi	r3,r2,255
    c54c:	18c0201c 	xori	r3,r3,128
    c550:	18ffe004 	addi	r3,r3,-128
    c554:	18000c26 	beq	r3,zero,c588 <strcmp+0xac>
    c558:	29800007 	ldb	r6,0(r5)
    c55c:	19800326 	beq	r3,r6,c56c <strcmp+0x90>
    c560:	00001306 	br	c5b0 <strcmp+0xd4>
    c564:	29800007 	ldb	r6,0(r5)
    c568:	11800b1e 	bne	r2,r6,c598 <strcmp+0xbc>
    c56c:	21000044 	addi	r4,r4,1
    c570:	20c00003 	ldbu	r3,0(r4)
    c574:	29400044 	addi	r5,r5,1
    c578:	18803fcc 	andi	r2,r3,255
    c57c:	1080201c 	xori	r2,r2,128
    c580:	10bfe004 	addi	r2,r2,-128
    c584:	103ff71e 	bne	r2,zero,c564 <__alt_mem_onchip_memory+0xf780c564>
    c588:	0007883a 	mov	r3,zero
    c58c:	28800003 	ldbu	r2,0(r5)
    c590:	1885c83a 	sub	r2,r3,r2
    c594:	f800283a 	ret
    c598:	28800003 	ldbu	r2,0(r5)
    c59c:	18c03fcc 	andi	r3,r3,255
    c5a0:	1885c83a 	sub	r2,r3,r2
    c5a4:	f800283a 	ret
    c5a8:	0005883a 	mov	r2,zero
    c5ac:	f800283a 	ret
    c5b0:	10c03fcc 	andi	r3,r2,255
    c5b4:	003ff506 	br	c58c <__alt_mem_onchip_memory+0xf780c58c>

0000c5b8 <__sprint_r.part.0>:
    c5b8:	28801917 	ldw	r2,100(r5)
    c5bc:	defff604 	addi	sp,sp,-40
    c5c0:	dd400515 	stw	r21,20(sp)
    c5c4:	dfc00915 	stw	ra,36(sp)
    c5c8:	df000815 	stw	fp,32(sp)
    c5cc:	ddc00715 	stw	r23,28(sp)
    c5d0:	dd800615 	stw	r22,24(sp)
    c5d4:	dd000415 	stw	r20,16(sp)
    c5d8:	dcc00315 	stw	r19,12(sp)
    c5dc:	dc800215 	stw	r18,8(sp)
    c5e0:	dc400115 	stw	r17,4(sp)
    c5e4:	dc000015 	stw	r16,0(sp)
    c5e8:	1088000c 	andi	r2,r2,8192
    c5ec:	302b883a 	mov	r21,r6
    c5f0:	10002e26 	beq	r2,zero,c6ac <__sprint_r.part.0+0xf4>
    c5f4:	30800217 	ldw	r2,8(r6)
    c5f8:	35800017 	ldw	r22,0(r6)
    c5fc:	10002926 	beq	r2,zero,c6a4 <__sprint_r.part.0+0xec>
    c600:	2827883a 	mov	r19,r5
    c604:	2029883a 	mov	r20,r4
    c608:	b5c00104 	addi	r23,r22,4
    c60c:	04bfffc4 	movi	r18,-1
    c610:	bc400017 	ldw	r17,0(r23)
    c614:	b4000017 	ldw	r16,0(r22)
    c618:	0039883a 	mov	fp,zero
    c61c:	8822d0ba 	srli	r17,r17,2
    c620:	8800031e 	bne	r17,zero,c630 <__sprint_r.part.0+0x78>
    c624:	00001806 	br	c688 <__sprint_r.part.0+0xd0>
    c628:	84000104 	addi	r16,r16,4
    c62c:	8f001526 	beq	r17,fp,c684 <__sprint_r.part.0+0xcc>
    c630:	81400017 	ldw	r5,0(r16)
    c634:	980d883a 	mov	r6,r19
    c638:	a009883a 	mov	r4,r20
    c63c:	000e1380 	call	e138 <_fputwc_r>
    c640:	e7000044 	addi	fp,fp,1
    c644:	14bff81e 	bne	r2,r18,c628 <__alt_mem_onchip_memory+0xf780c628>
    c648:	9005883a 	mov	r2,r18
    c64c:	a8000215 	stw	zero,8(r21)
    c650:	a8000115 	stw	zero,4(r21)
    c654:	dfc00917 	ldw	ra,36(sp)
    c658:	df000817 	ldw	fp,32(sp)
    c65c:	ddc00717 	ldw	r23,28(sp)
    c660:	dd800617 	ldw	r22,24(sp)
    c664:	dd400517 	ldw	r21,20(sp)
    c668:	dd000417 	ldw	r20,16(sp)
    c66c:	dcc00317 	ldw	r19,12(sp)
    c670:	dc800217 	ldw	r18,8(sp)
    c674:	dc400117 	ldw	r17,4(sp)
    c678:	dc000017 	ldw	r16,0(sp)
    c67c:	dec00a04 	addi	sp,sp,40
    c680:	f800283a 	ret
    c684:	a8800217 	ldw	r2,8(r21)
    c688:	8c63883a 	add	r17,r17,r17
    c68c:	8c63883a 	add	r17,r17,r17
    c690:	1445c83a 	sub	r2,r2,r17
    c694:	a8800215 	stw	r2,8(r21)
    c698:	b5800204 	addi	r22,r22,8
    c69c:	bdc00204 	addi	r23,r23,8
    c6a0:	103fdb1e 	bne	r2,zero,c610 <__alt_mem_onchip_memory+0xf780c610>
    c6a4:	0005883a 	mov	r2,zero
    c6a8:	003fe806 	br	c64c <__alt_mem_onchip_memory+0xf780c64c>
    c6ac:	00096900 	call	9690 <__sfvwrite_r>
    c6b0:	003fe606 	br	c64c <__alt_mem_onchip_memory+0xf780c64c>

0000c6b4 <__sprint_r>:
    c6b4:	30c00217 	ldw	r3,8(r6)
    c6b8:	18000126 	beq	r3,zero,c6c0 <__sprint_r+0xc>
    c6bc:	000c5b81 	jmpi	c5b8 <__sprint_r.part.0>
    c6c0:	30000115 	stw	zero,4(r6)
    c6c4:	0005883a 	mov	r2,zero
    c6c8:	f800283a 	ret

0000c6cc <___vfiprintf_internal_r>:
    c6cc:	deffc904 	addi	sp,sp,-220
    c6d0:	df003515 	stw	fp,212(sp)
    c6d4:	dd003115 	stw	r20,196(sp)
    c6d8:	dfc03615 	stw	ra,216(sp)
    c6dc:	ddc03415 	stw	r23,208(sp)
    c6e0:	dd803315 	stw	r22,204(sp)
    c6e4:	dd403215 	stw	r21,200(sp)
    c6e8:	dcc03015 	stw	r19,192(sp)
    c6ec:	dc802f15 	stw	r18,188(sp)
    c6f0:	dc402e15 	stw	r17,184(sp)
    c6f4:	dc002d15 	stw	r16,180(sp)
    c6f8:	d9002015 	stw	r4,128(sp)
    c6fc:	d9c02215 	stw	r7,136(sp)
    c700:	2829883a 	mov	r20,r5
    c704:	3039883a 	mov	fp,r6
    c708:	20000226 	beq	r4,zero,c714 <___vfiprintf_internal_r+0x48>
    c70c:	20800e17 	ldw	r2,56(r4)
    c710:	1000cf26 	beq	r2,zero,ca50 <___vfiprintf_internal_r+0x384>
    c714:	a080030b 	ldhu	r2,12(r20)
    c718:	10c8000c 	andi	r3,r2,8192
    c71c:	1800061e 	bne	r3,zero,c738 <___vfiprintf_internal_r+0x6c>
    c720:	a1001917 	ldw	r4,100(r20)
    c724:	00f7ffc4 	movi	r3,-8193
    c728:	10880014 	ori	r2,r2,8192
    c72c:	20c6703a 	and	r3,r4,r3
    c730:	a080030d 	sth	r2,12(r20)
    c734:	a0c01915 	stw	r3,100(r20)
    c738:	10c0020c 	andi	r3,r2,8
    c73c:	1800a926 	beq	r3,zero,c9e4 <___vfiprintf_internal_r+0x318>
    c740:	a0c00417 	ldw	r3,16(r20)
    c744:	1800a726 	beq	r3,zero,c9e4 <___vfiprintf_internal_r+0x318>
    c748:	1080068c 	andi	r2,r2,26
    c74c:	00c00284 	movi	r3,10
    c750:	10c0ac26 	beq	r2,r3,ca04 <___vfiprintf_internal_r+0x338>
    c754:	da801a04 	addi	r10,sp,104
    c758:	da801e15 	stw	r10,120(sp)
    c75c:	d8801e17 	ldw	r2,120(sp)
    c760:	da8019c4 	addi	r10,sp,103
    c764:	05800074 	movhi	r22,1
    c768:	05c00074 	movhi	r23,1
    c76c:	da801f15 	stw	r10,124(sp)
    c770:	1295c83a 	sub	r10,r2,r10
    c774:	b588c804 	addi	r22,r22,8992
    c778:	bdc8c404 	addi	r23,r23,8976
    c77c:	dec01a15 	stw	sp,104(sp)
    c780:	d8001c15 	stw	zero,112(sp)
    c784:	d8001b15 	stw	zero,108(sp)
    c788:	d8002615 	stw	zero,152(sp)
    c78c:	d8002315 	stw	zero,140(sp)
    c790:	da802715 	stw	r10,156(sp)
    c794:	d811883a 	mov	r8,sp
    c798:	dd002115 	stw	r20,132(sp)
    c79c:	e021883a 	mov	r16,fp
    c7a0:	80800007 	ldb	r2,0(r16)
    c7a4:	1003ea26 	beq	r2,zero,d750 <___vfiprintf_internal_r+0x1084>
    c7a8:	00c00944 	movi	r3,37
    c7ac:	8025883a 	mov	r18,r16
    c7b0:	10c0021e 	bne	r2,r3,c7bc <___vfiprintf_internal_r+0xf0>
    c7b4:	00001606 	br	c810 <___vfiprintf_internal_r+0x144>
    c7b8:	10c00326 	beq	r2,r3,c7c8 <___vfiprintf_internal_r+0xfc>
    c7bc:	94800044 	addi	r18,r18,1
    c7c0:	90800007 	ldb	r2,0(r18)
    c7c4:	103ffc1e 	bne	r2,zero,c7b8 <__alt_mem_onchip_memory+0xf780c7b8>
    c7c8:	9423c83a 	sub	r17,r18,r16
    c7cc:	88001026 	beq	r17,zero,c810 <___vfiprintf_internal_r+0x144>
    c7d0:	d8c01c17 	ldw	r3,112(sp)
    c7d4:	d8801b17 	ldw	r2,108(sp)
    c7d8:	44000015 	stw	r16,0(r8)
    c7dc:	88c7883a 	add	r3,r17,r3
    c7e0:	10800044 	addi	r2,r2,1
    c7e4:	44400115 	stw	r17,4(r8)
    c7e8:	d8c01c15 	stw	r3,112(sp)
    c7ec:	d8801b15 	stw	r2,108(sp)
    c7f0:	010001c4 	movi	r4,7
    c7f4:	2080760e 	bge	r4,r2,c9d0 <___vfiprintf_internal_r+0x304>
    c7f8:	1803821e 	bne	r3,zero,d604 <___vfiprintf_internal_r+0xf38>
    c7fc:	da802317 	ldw	r10,140(sp)
    c800:	d8001b15 	stw	zero,108(sp)
    c804:	d811883a 	mov	r8,sp
    c808:	5455883a 	add	r10,r10,r17
    c80c:	da802315 	stw	r10,140(sp)
    c810:	90800007 	ldb	r2,0(r18)
    c814:	10044626 	beq	r2,zero,d930 <___vfiprintf_internal_r+0x1264>
    c818:	90c00047 	ldb	r3,1(r18)
    c81c:	94000044 	addi	r16,r18,1
    c820:	d8001d85 	stb	zero,118(sp)
    c824:	0009883a 	mov	r4,zero
    c828:	000f883a 	mov	r7,zero
    c82c:	027fffc4 	movi	r9,-1
    c830:	0023883a 	mov	r17,zero
    c834:	0029883a 	mov	r20,zero
    c838:	01401604 	movi	r5,88
    c83c:	01800244 	movi	r6,9
    c840:	03400a84 	movi	r13,42
    c844:	03001b04 	movi	r12,108
    c848:	84000044 	addi	r16,r16,1
    c84c:	18bff804 	addi	r2,r3,-32
    c850:	28827336 	bltu	r5,r2,d220 <___vfiprintf_internal_r+0xb54>
    c854:	100490ba 	slli	r2,r2,2
    c858:	02800074 	movhi	r10,1
    c85c:	52b21b04 	addi	r10,r10,-14228
    c860:	1285883a 	add	r2,r2,r10
    c864:	10800017 	ldw	r2,0(r2)
    c868:	1000683a 	jmp	r2
    c86c:	0000cf54 	movui	zero,829
    c870:	0000d220 	cmpeqi	zero,zero,840
    c874:	0000d220 	cmpeqi	zero,zero,840
    c878:	0000cf74 	movhi	zero,829
    c87c:	0000d220 	cmpeqi	zero,zero,840
    c880:	0000d220 	cmpeqi	zero,zero,840
    c884:	0000d220 	cmpeqi	zero,zero,840
    c888:	0000d220 	cmpeqi	zero,zero,840
    c88c:	0000d220 	cmpeqi	zero,zero,840
    c890:	0000d220 	cmpeqi	zero,zero,840
    c894:	0000d15c 	xori	zero,zero,837
    c898:	0000d178 	rdprs	zero,zero,837
    c89c:	0000d220 	cmpeqi	zero,zero,840
    c8a0:	0000ca60 	cmpeqi	zero,zero,809
    c8a4:	0000d188 	cmpgei	zero,zero,838
    c8a8:	0000d220 	cmpeqi	zero,zero,840
    c8ac:	0000cf80 	call	cf8 <getRand+0x14>
    c8b0:	0000cf8c 	andi	zero,zero,830
    c8b4:	0000cf8c 	andi	zero,zero,830
    c8b8:	0000cf8c 	andi	zero,zero,830
    c8bc:	0000cf8c 	andi	zero,zero,830
    c8c0:	0000cf8c 	andi	zero,zero,830
    c8c4:	0000cf8c 	andi	zero,zero,830
    c8c8:	0000cf8c 	andi	zero,zero,830
    c8cc:	0000cf8c 	andi	zero,zero,830
    c8d0:	0000cf8c 	andi	zero,zero,830
    c8d4:	0000d220 	cmpeqi	zero,zero,840
    c8d8:	0000d220 	cmpeqi	zero,zero,840
    c8dc:	0000d220 	cmpeqi	zero,zero,840
    c8e0:	0000d220 	cmpeqi	zero,zero,840
    c8e4:	0000d220 	cmpeqi	zero,zero,840
    c8e8:	0000d220 	cmpeqi	zero,zero,840
    c8ec:	0000d220 	cmpeqi	zero,zero,840
    c8f0:	0000d220 	cmpeqi	zero,zero,840
    c8f4:	0000d220 	cmpeqi	zero,zero,840
    c8f8:	0000d220 	cmpeqi	zero,zero,840
    c8fc:	0000cfb8 	rdprs	zero,zero,830
    c900:	0000d220 	cmpeqi	zero,zero,840
    c904:	0000d220 	cmpeqi	zero,zero,840
    c908:	0000d220 	cmpeqi	zero,zero,840
    c90c:	0000d220 	cmpeqi	zero,zero,840
    c910:	0000d220 	cmpeqi	zero,zero,840
    c914:	0000d220 	cmpeqi	zero,zero,840
    c918:	0000d220 	cmpeqi	zero,zero,840
    c91c:	0000d220 	cmpeqi	zero,zero,840
    c920:	0000d220 	cmpeqi	zero,zero,840
    c924:	0000d220 	cmpeqi	zero,zero,840
    c928:	0000cff0 	cmpltui	zero,zero,831
    c92c:	0000d220 	cmpeqi	zero,zero,840
    c930:	0000d220 	cmpeqi	zero,zero,840
    c934:	0000d220 	cmpeqi	zero,zero,840
    c938:	0000d220 	cmpeqi	zero,zero,840
    c93c:	0000d220 	cmpeqi	zero,zero,840
    c940:	0000d048 	cmpgei	zero,zero,833
    c944:	0000d220 	cmpeqi	zero,zero,840
    c948:	0000d220 	cmpeqi	zero,zero,840
    c94c:	0000d0b8 	rdprs	zero,zero,834
    c950:	0000d220 	cmpeqi	zero,zero,840
    c954:	0000d220 	cmpeqi	zero,zero,840
    c958:	0000d220 	cmpeqi	zero,zero,840
    c95c:	0000d220 	cmpeqi	zero,zero,840
    c960:	0000d220 	cmpeqi	zero,zero,840
    c964:	0000d220 	cmpeqi	zero,zero,840
    c968:	0000d220 	cmpeqi	zero,zero,840
    c96c:	0000d220 	cmpeqi	zero,zero,840
    c970:	0000d220 	cmpeqi	zero,zero,840
    c974:	0000d220 	cmpeqi	zero,zero,840
    c978:	0000ce64 	muli	zero,zero,825
    c97c:	0000ce90 	cmplti	zero,zero,826
    c980:	0000d220 	cmpeqi	zero,zero,840
    c984:	0000d220 	cmpeqi	zero,zero,840
    c988:	0000d220 	cmpeqi	zero,zero,840
    c98c:	0000d1c8 	cmpgei	zero,zero,839
    c990:	0000ce90 	cmplti	zero,zero,826
    c994:	0000d220 	cmpeqi	zero,zero,840
    c998:	0000d220 	cmpeqi	zero,zero,840
    c99c:	0000cd24 	muli	zero,zero,820
    c9a0:	0000d220 	cmpeqi	zero,zero,840
    c9a4:	0000cd34 	movhi	zero,820
    c9a8:	0000cd70 	cmpltui	zero,zero,821
    c9ac:	0000ca6c 	andhi	zero,zero,809
    c9b0:	0000cd18 	cmpnei	zero,zero,820
    c9b4:	0000d220 	cmpeqi	zero,zero,840
    c9b8:	0000d0f4 	movhi	zero,835
    c9bc:	0000d220 	cmpeqi	zero,zero,840
    c9c0:	0000d14c 	andi	zero,zero,837
    c9c4:	0000d220 	cmpeqi	zero,zero,840
    c9c8:	0000d220 	cmpeqi	zero,zero,840
    c9cc:	0000ce10 	cmplti	zero,zero,824
    c9d0:	42000204 	addi	r8,r8,8
    c9d4:	da802317 	ldw	r10,140(sp)
    c9d8:	5455883a 	add	r10,r10,r17
    c9dc:	da802315 	stw	r10,140(sp)
    c9e0:	003f8b06 	br	c810 <__alt_mem_onchip_memory+0xf780c810>
    c9e4:	d9002017 	ldw	r4,128(sp)
    c9e8:	a00b883a 	mov	r5,r20
    c9ec:	00072380 	call	7238 <__swsetup_r>
    c9f0:	1003b11e 	bne	r2,zero,d8b8 <___vfiprintf_internal_r+0x11ec>
    c9f4:	a080030b 	ldhu	r2,12(r20)
    c9f8:	00c00284 	movi	r3,10
    c9fc:	1080068c 	andi	r2,r2,26
    ca00:	10ff541e 	bne	r2,r3,c754 <__alt_mem_onchip_memory+0xf780c754>
    ca04:	a080038f 	ldh	r2,14(r20)
    ca08:	103f5216 	blt	r2,zero,c754 <__alt_mem_onchip_memory+0xf780c754>
    ca0c:	d9c02217 	ldw	r7,136(sp)
    ca10:	d9002017 	ldw	r4,128(sp)
    ca14:	e00d883a 	mov	r6,fp
    ca18:	a00b883a 	mov	r5,r20
    ca1c:	000db440 	call	db44 <__sbprintf>
    ca20:	dfc03617 	ldw	ra,216(sp)
    ca24:	df003517 	ldw	fp,212(sp)
    ca28:	ddc03417 	ldw	r23,208(sp)
    ca2c:	dd803317 	ldw	r22,204(sp)
    ca30:	dd403217 	ldw	r21,200(sp)
    ca34:	dd003117 	ldw	r20,196(sp)
    ca38:	dcc03017 	ldw	r19,192(sp)
    ca3c:	dc802f17 	ldw	r18,188(sp)
    ca40:	dc402e17 	ldw	r17,184(sp)
    ca44:	dc002d17 	ldw	r16,180(sp)
    ca48:	dec03704 	addi	sp,sp,220
    ca4c:	f800283a 	ret
    ca50:	000920c0 	call	920c <__sinit>
    ca54:	003f2f06 	br	c714 <__alt_mem_onchip_memory+0xf780c714>
    ca58:	0463c83a 	sub	r17,zero,r17
    ca5c:	d8802215 	stw	r2,136(sp)
    ca60:	a5000114 	ori	r20,r20,4
    ca64:	80c00007 	ldb	r3,0(r16)
    ca68:	003f7706 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    ca6c:	00800c04 	movi	r2,48
    ca70:	da802217 	ldw	r10,136(sp)
    ca74:	d8801d05 	stb	r2,116(sp)
    ca78:	00801e04 	movi	r2,120
    ca7c:	d8801d45 	stb	r2,117(sp)
    ca80:	d8001d85 	stb	zero,118(sp)
    ca84:	50c00104 	addi	r3,r10,4
    ca88:	54800017 	ldw	r18,0(r10)
    ca8c:	0027883a 	mov	r19,zero
    ca90:	a0800094 	ori	r2,r20,2
    ca94:	48030b16 	blt	r9,zero,d6c4 <___vfiprintf_internal_r+0xff8>
    ca98:	00bfdfc4 	movi	r2,-129
    ca9c:	a096703a 	and	r11,r20,r2
    caa0:	d8c02215 	stw	r3,136(sp)
    caa4:	5d000094 	ori	r20,r11,2
    caa8:	90032b1e 	bne	r18,zero,d758 <___vfiprintf_internal_r+0x108c>
    caac:	00800074 	movhi	r2,1
    cab0:	10886404 	addi	r2,r2,8592
    cab4:	d8802615 	stw	r2,152(sp)
    cab8:	0039883a 	mov	fp,zero
    cabc:	48017b1e 	bne	r9,zero,d0ac <___vfiprintf_internal_r+0x9e0>
    cac0:	0013883a 	mov	r9,zero
    cac4:	0027883a 	mov	r19,zero
    cac8:	dd401a04 	addi	r21,sp,104
    cacc:	4825883a 	mov	r18,r9
    cad0:	4cc0010e 	bge	r9,r19,cad8 <___vfiprintf_internal_r+0x40c>
    cad4:	9825883a 	mov	r18,r19
    cad8:	e7003fcc 	andi	fp,fp,255
    cadc:	e700201c 	xori	fp,fp,128
    cae0:	e73fe004 	addi	fp,fp,-128
    cae4:	e0000126 	beq	fp,zero,caec <___vfiprintf_internal_r+0x420>
    cae8:	94800044 	addi	r18,r18,1
    caec:	a380008c 	andi	r14,r20,2
    caf0:	70000126 	beq	r14,zero,caf8 <___vfiprintf_internal_r+0x42c>
    caf4:	94800084 	addi	r18,r18,2
    caf8:	a700210c 	andi	fp,r20,132
    cafc:	e001df1e 	bne	fp,zero,d27c <___vfiprintf_internal_r+0xbb0>
    cb00:	8c87c83a 	sub	r3,r17,r18
    cb04:	00c1dd0e 	bge	zero,r3,d27c <___vfiprintf_internal_r+0xbb0>
    cb08:	01c00404 	movi	r7,16
    cb0c:	d8801c17 	ldw	r2,112(sp)
    cb10:	38c3ad0e 	bge	r7,r3,d9c8 <___vfiprintf_internal_r+0x12fc>
    cb14:	02800074 	movhi	r10,1
    cb18:	5288c804 	addi	r10,r10,8992
    cb1c:	dc002915 	stw	r16,164(sp)
    cb20:	d9801b17 	ldw	r6,108(sp)
    cb24:	da802415 	stw	r10,144(sp)
    cb28:	03c001c4 	movi	r15,7
    cb2c:	da402515 	stw	r9,148(sp)
    cb30:	db802815 	stw	r14,160(sp)
    cb34:	1821883a 	mov	r16,r3
    cb38:	00000506 	br	cb50 <___vfiprintf_internal_r+0x484>
    cb3c:	31400084 	addi	r5,r6,2
    cb40:	42000204 	addi	r8,r8,8
    cb44:	200d883a 	mov	r6,r4
    cb48:	843ffc04 	addi	r16,r16,-16
    cb4c:	3c000d0e 	bge	r7,r16,cb84 <___vfiprintf_internal_r+0x4b8>
    cb50:	10800404 	addi	r2,r2,16
    cb54:	31000044 	addi	r4,r6,1
    cb58:	45800015 	stw	r22,0(r8)
    cb5c:	41c00115 	stw	r7,4(r8)
    cb60:	d8801c15 	stw	r2,112(sp)
    cb64:	d9001b15 	stw	r4,108(sp)
    cb68:	793ff40e 	bge	r15,r4,cb3c <__alt_mem_onchip_memory+0xf780cb3c>
    cb6c:	1001b51e 	bne	r2,zero,d244 <___vfiprintf_internal_r+0xb78>
    cb70:	843ffc04 	addi	r16,r16,-16
    cb74:	000d883a 	mov	r6,zero
    cb78:	01400044 	movi	r5,1
    cb7c:	d811883a 	mov	r8,sp
    cb80:	3c3ff316 	blt	r7,r16,cb50 <__alt_mem_onchip_memory+0xf780cb50>
    cb84:	8007883a 	mov	r3,r16
    cb88:	da402517 	ldw	r9,148(sp)
    cb8c:	db802817 	ldw	r14,160(sp)
    cb90:	dc002917 	ldw	r16,164(sp)
    cb94:	da802417 	ldw	r10,144(sp)
    cb98:	1885883a 	add	r2,r3,r2
    cb9c:	40c00115 	stw	r3,4(r8)
    cba0:	42800015 	stw	r10,0(r8)
    cba4:	d8801c15 	stw	r2,112(sp)
    cba8:	d9401b15 	stw	r5,108(sp)
    cbac:	00c001c4 	movi	r3,7
    cbb0:	19426016 	blt	r3,r5,d534 <___vfiprintf_internal_r+0xe68>
    cbb4:	d8c01d87 	ldb	r3,118(sp)
    cbb8:	42000204 	addi	r8,r8,8
    cbbc:	29000044 	addi	r4,r5,1
    cbc0:	1801b31e 	bne	r3,zero,d290 <___vfiprintf_internal_r+0xbc4>
    cbc4:	7001c026 	beq	r14,zero,d2c8 <___vfiprintf_internal_r+0xbfc>
    cbc8:	d8c01d04 	addi	r3,sp,116
    cbcc:	10800084 	addi	r2,r2,2
    cbd0:	40c00015 	stw	r3,0(r8)
    cbd4:	00c00084 	movi	r3,2
    cbd8:	40c00115 	stw	r3,4(r8)
    cbdc:	d8801c15 	stw	r2,112(sp)
    cbe0:	d9001b15 	stw	r4,108(sp)
    cbe4:	00c001c4 	movi	r3,7
    cbe8:	1902650e 	bge	r3,r4,d580 <___vfiprintf_internal_r+0xeb4>
    cbec:	10029a1e 	bne	r2,zero,d658 <___vfiprintf_internal_r+0xf8c>
    cbf0:	00c02004 	movi	r3,128
    cbf4:	01000044 	movi	r4,1
    cbf8:	000b883a 	mov	r5,zero
    cbfc:	d811883a 	mov	r8,sp
    cc00:	e0c1b31e 	bne	fp,r3,d2d0 <___vfiprintf_internal_r+0xc04>
    cc04:	8cb9c83a 	sub	fp,r17,r18
    cc08:	0701b10e 	bge	zero,fp,d2d0 <___vfiprintf_internal_r+0xc04>
    cc0c:	01c00404 	movi	r7,16
    cc10:	3f03890e 	bge	r7,fp,da38 <___vfiprintf_internal_r+0x136c>
    cc14:	00c00074 	movhi	r3,1
    cc18:	18c8c404 	addi	r3,r3,8976
    cc1c:	d8c02415 	stw	r3,144(sp)
    cc20:	8007883a 	mov	r3,r16
    cc24:	034001c4 	movi	r13,7
    cc28:	e021883a 	mov	r16,fp
    cc2c:	da402515 	stw	r9,148(sp)
    cc30:	1839883a 	mov	fp,r3
    cc34:	00000506 	br	cc4c <___vfiprintf_internal_r+0x580>
    cc38:	29800084 	addi	r6,r5,2
    cc3c:	42000204 	addi	r8,r8,8
    cc40:	180b883a 	mov	r5,r3
    cc44:	843ffc04 	addi	r16,r16,-16
    cc48:	3c000d0e 	bge	r7,r16,cc80 <___vfiprintf_internal_r+0x5b4>
    cc4c:	10800404 	addi	r2,r2,16
    cc50:	28c00044 	addi	r3,r5,1
    cc54:	45c00015 	stw	r23,0(r8)
    cc58:	41c00115 	stw	r7,4(r8)
    cc5c:	d8801c15 	stw	r2,112(sp)
    cc60:	d8c01b15 	stw	r3,108(sp)
    cc64:	68fff40e 	bge	r13,r3,cc38 <__alt_mem_onchip_memory+0xf780cc38>
    cc68:	1002241e 	bne	r2,zero,d4fc <___vfiprintf_internal_r+0xe30>
    cc6c:	843ffc04 	addi	r16,r16,-16
    cc70:	01800044 	movi	r6,1
    cc74:	000b883a 	mov	r5,zero
    cc78:	d811883a 	mov	r8,sp
    cc7c:	3c3ff316 	blt	r7,r16,cc4c <__alt_mem_onchip_memory+0xf780cc4c>
    cc80:	da402517 	ldw	r9,148(sp)
    cc84:	e007883a 	mov	r3,fp
    cc88:	8039883a 	mov	fp,r16
    cc8c:	1821883a 	mov	r16,r3
    cc90:	d8c02417 	ldw	r3,144(sp)
    cc94:	1705883a 	add	r2,r2,fp
    cc98:	47000115 	stw	fp,4(r8)
    cc9c:	40c00015 	stw	r3,0(r8)
    cca0:	d8801c15 	stw	r2,112(sp)
    cca4:	d9801b15 	stw	r6,108(sp)
    cca8:	00c001c4 	movi	r3,7
    ccac:	19827616 	blt	r3,r6,d688 <___vfiprintf_internal_r+0xfbc>
    ccb0:	4cf9c83a 	sub	fp,r9,r19
    ccb4:	42000204 	addi	r8,r8,8
    ccb8:	31000044 	addi	r4,r6,1
    ccbc:	300b883a 	mov	r5,r6
    ccc0:	07018516 	blt	zero,fp,d2d8 <___vfiprintf_internal_r+0xc0c>
    ccc4:	9885883a 	add	r2,r19,r2
    ccc8:	45400015 	stw	r21,0(r8)
    cccc:	44c00115 	stw	r19,4(r8)
    ccd0:	d8801c15 	stw	r2,112(sp)
    ccd4:	d9001b15 	stw	r4,108(sp)
    ccd8:	00c001c4 	movi	r3,7
    ccdc:	1901dd0e 	bge	r3,r4,d454 <___vfiprintf_internal_r+0xd88>
    cce0:	1002401e 	bne	r2,zero,d5e4 <___vfiprintf_internal_r+0xf18>
    cce4:	d8001b15 	stw	zero,108(sp)
    cce8:	a2c0010c 	andi	r11,r20,4
    ccec:	58000226 	beq	r11,zero,ccf8 <___vfiprintf_internal_r+0x62c>
    ccf0:	8ca7c83a 	sub	r19,r17,r18
    ccf4:	04c2f216 	blt	zero,r19,d8c0 <___vfiprintf_internal_r+0x11f4>
    ccf8:	8c80010e 	bge	r17,r18,cd00 <___vfiprintf_internal_r+0x634>
    ccfc:	9023883a 	mov	r17,r18
    cd00:	da802317 	ldw	r10,140(sp)
    cd04:	5455883a 	add	r10,r10,r17
    cd08:	da802315 	stw	r10,140(sp)
    cd0c:	d8001b15 	stw	zero,108(sp)
    cd10:	d811883a 	mov	r8,sp
    cd14:	003ea206 	br	c7a0 <__alt_mem_onchip_memory+0xf780c7a0>
    cd18:	a5000814 	ori	r20,r20,32
    cd1c:	80c00007 	ldb	r3,0(r16)
    cd20:	003ec906 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    cd24:	80c00007 	ldb	r3,0(r16)
    cd28:	1b030926 	beq	r3,r12,d950 <___vfiprintf_internal_r+0x1284>
    cd2c:	a5000414 	ori	r20,r20,16
    cd30:	003ec506 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    cd34:	21003fcc 	andi	r4,r4,255
    cd38:	20035e1e 	bne	r4,zero,dab4 <___vfiprintf_internal_r+0x13e8>
    cd3c:	a080080c 	andi	r2,r20,32
    cd40:	1002a526 	beq	r2,zero,d7d8 <___vfiprintf_internal_r+0x110c>
    cd44:	da802217 	ldw	r10,136(sp)
    cd48:	50800017 	ldw	r2,0(r10)
    cd4c:	da802317 	ldw	r10,140(sp)
    cd50:	5007d7fa 	srai	r3,r10,31
    cd54:	da802217 	ldw	r10,136(sp)
    cd58:	10c00115 	stw	r3,4(r2)
    cd5c:	52800104 	addi	r10,r10,4
    cd60:	da802215 	stw	r10,136(sp)
    cd64:	da802317 	ldw	r10,140(sp)
    cd68:	12800015 	stw	r10,0(r2)
    cd6c:	003e8c06 	br	c7a0 <__alt_mem_onchip_memory+0xf780c7a0>
    cd70:	21003fcc 	andi	r4,r4,255
    cd74:	2003511e 	bne	r4,zero,dabc <___vfiprintf_internal_r+0x13f0>
    cd78:	a080080c 	andi	r2,r20,32
    cd7c:	1000a126 	beq	r2,zero,d004 <___vfiprintf_internal_r+0x938>
    cd80:	da802217 	ldw	r10,136(sp)
    cd84:	d8001d85 	stb	zero,118(sp)
    cd88:	50800204 	addi	r2,r10,8
    cd8c:	54800017 	ldw	r18,0(r10)
    cd90:	54c00117 	ldw	r19,4(r10)
    cd94:	4802b416 	blt	r9,zero,d868 <___vfiprintf_internal_r+0x119c>
    cd98:	013fdfc4 	movi	r4,-129
    cd9c:	94c6b03a 	or	r3,r18,r19
    cda0:	d8802215 	stw	r2,136(sp)
    cda4:	a128703a 	and	r20,r20,r4
    cda8:	1800a226 	beq	r3,zero,d034 <___vfiprintf_internal_r+0x968>
    cdac:	0039883a 	mov	fp,zero
    cdb0:	dd401a04 	addi	r21,sp,104
    cdb4:	9006d0fa 	srli	r3,r18,3
    cdb8:	9808977a 	slli	r4,r19,29
    cdbc:	9826d0fa 	srli	r19,r19,3
    cdc0:	948001cc 	andi	r18,r18,7
    cdc4:	90800c04 	addi	r2,r18,48
    cdc8:	ad7fffc4 	addi	r21,r21,-1
    cdcc:	20e4b03a 	or	r18,r4,r3
    cdd0:	a8800005 	stb	r2,0(r21)
    cdd4:	94c6b03a 	or	r3,r18,r19
    cdd8:	183ff61e 	bne	r3,zero,cdb4 <__alt_mem_onchip_memory+0xf780cdb4>
    cddc:	a0c0004c 	andi	r3,r20,1
    cde0:	18005926 	beq	r3,zero,cf48 <___vfiprintf_internal_r+0x87c>
    cde4:	10803fcc 	andi	r2,r2,255
    cde8:	1080201c 	xori	r2,r2,128
    cdec:	10bfe004 	addi	r2,r2,-128
    cdf0:	00c00c04 	movi	r3,48
    cdf4:	10c05426 	beq	r2,r3,cf48 <___vfiprintf_internal_r+0x87c>
    cdf8:	da801e17 	ldw	r10,120(sp)
    cdfc:	a8bfffc4 	addi	r2,r21,-1
    ce00:	a8ffffc5 	stb	r3,-1(r21)
    ce04:	50a7c83a 	sub	r19,r10,r2
    ce08:	102b883a 	mov	r21,r2
    ce0c:	003f2f06 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    ce10:	21003fcc 	andi	r4,r4,255
    ce14:	2003421e 	bne	r4,zero,db20 <___vfiprintf_internal_r+0x1454>
    ce18:	00800074 	movhi	r2,1
    ce1c:	10886404 	addi	r2,r2,8592
    ce20:	d8802615 	stw	r2,152(sp)
    ce24:	a080080c 	andi	r2,r20,32
    ce28:	1000aa26 	beq	r2,zero,d0d4 <___vfiprintf_internal_r+0xa08>
    ce2c:	da802217 	ldw	r10,136(sp)
    ce30:	54800017 	ldw	r18,0(r10)
    ce34:	54c00117 	ldw	r19,4(r10)
    ce38:	52800204 	addi	r10,r10,8
    ce3c:	da802215 	stw	r10,136(sp)
    ce40:	a080004c 	andi	r2,r20,1
    ce44:	1001d226 	beq	r2,zero,d590 <___vfiprintf_internal_r+0xec4>
    ce48:	94c4b03a 	or	r2,r18,r19
    ce4c:	1002351e 	bne	r2,zero,d724 <___vfiprintf_internal_r+0x1058>
    ce50:	d8001d85 	stb	zero,118(sp)
    ce54:	48022216 	blt	r9,zero,d6e0 <___vfiprintf_internal_r+0x1014>
    ce58:	00bfdfc4 	movi	r2,-129
    ce5c:	a0a8703a 	and	r20,r20,r2
    ce60:	003f1506 	br	cab8 <__alt_mem_onchip_memory+0xf780cab8>
    ce64:	da802217 	ldw	r10,136(sp)
    ce68:	04800044 	movi	r18,1
    ce6c:	d8001d85 	stb	zero,118(sp)
    ce70:	50800017 	ldw	r2,0(r10)
    ce74:	52800104 	addi	r10,r10,4
    ce78:	da802215 	stw	r10,136(sp)
    ce7c:	d8801005 	stb	r2,64(sp)
    ce80:	9027883a 	mov	r19,r18
    ce84:	dd401004 	addi	r21,sp,64
    ce88:	0013883a 	mov	r9,zero
    ce8c:	003f1706 	br	caec <__alt_mem_onchip_memory+0xf780caec>
    ce90:	21003fcc 	andi	r4,r4,255
    ce94:	2003201e 	bne	r4,zero,db18 <___vfiprintf_internal_r+0x144c>
    ce98:	a080080c 	andi	r2,r20,32
    ce9c:	10004b26 	beq	r2,zero,cfcc <___vfiprintf_internal_r+0x900>
    cea0:	da802217 	ldw	r10,136(sp)
    cea4:	50800117 	ldw	r2,4(r10)
    cea8:	54800017 	ldw	r18,0(r10)
    ceac:	52800204 	addi	r10,r10,8
    ceb0:	da802215 	stw	r10,136(sp)
    ceb4:	1027883a 	mov	r19,r2
    ceb8:	10022c16 	blt	r2,zero,d76c <___vfiprintf_internal_r+0x10a0>
    cebc:	df001d83 	ldbu	fp,118(sp)
    cec0:	48007216 	blt	r9,zero,d08c <___vfiprintf_internal_r+0x9c0>
    cec4:	00ffdfc4 	movi	r3,-129
    cec8:	94c4b03a 	or	r2,r18,r19
    cecc:	a0e8703a 	and	r20,r20,r3
    ced0:	1000cc26 	beq	r2,zero,d204 <___vfiprintf_internal_r+0xb38>
    ced4:	98021026 	beq	r19,zero,d718 <___vfiprintf_internal_r+0x104c>
    ced8:	dc402415 	stw	r17,144(sp)
    cedc:	dc002515 	stw	r16,148(sp)
    cee0:	9823883a 	mov	r17,r19
    cee4:	9021883a 	mov	r16,r18
    cee8:	dd401a04 	addi	r21,sp,104
    ceec:	4825883a 	mov	r18,r9
    cef0:	4027883a 	mov	r19,r8
    cef4:	8009883a 	mov	r4,r16
    cef8:	880b883a 	mov	r5,r17
    cefc:	01800284 	movi	r6,10
    cf00:	000f883a 	mov	r7,zero
    cf04:	000eb0c0 	call	eb0c <__umoddi3>
    cf08:	10800c04 	addi	r2,r2,48
    cf0c:	ad7fffc4 	addi	r21,r21,-1
    cf10:	8009883a 	mov	r4,r16
    cf14:	880b883a 	mov	r5,r17
    cf18:	a8800005 	stb	r2,0(r21)
    cf1c:	01800284 	movi	r6,10
    cf20:	000f883a 	mov	r7,zero
    cf24:	000e5940 	call	e594 <__udivdi3>
    cf28:	1021883a 	mov	r16,r2
    cf2c:	10c4b03a 	or	r2,r2,r3
    cf30:	1823883a 	mov	r17,r3
    cf34:	103fef1e 	bne	r2,zero,cef4 <__alt_mem_onchip_memory+0xf780cef4>
    cf38:	dc402417 	ldw	r17,144(sp)
    cf3c:	dc002517 	ldw	r16,148(sp)
    cf40:	9013883a 	mov	r9,r18
    cf44:	9811883a 	mov	r8,r19
    cf48:	da801e17 	ldw	r10,120(sp)
    cf4c:	5567c83a 	sub	r19,r10,r21
    cf50:	003ede06 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    cf54:	38803fcc 	andi	r2,r7,255
    cf58:	1080201c 	xori	r2,r2,128
    cf5c:	10bfe004 	addi	r2,r2,-128
    cf60:	1002371e 	bne	r2,zero,d840 <___vfiprintf_internal_r+0x1174>
    cf64:	01000044 	movi	r4,1
    cf68:	01c00804 	movi	r7,32
    cf6c:	80c00007 	ldb	r3,0(r16)
    cf70:	003e3506 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    cf74:	a5000054 	ori	r20,r20,1
    cf78:	80c00007 	ldb	r3,0(r16)
    cf7c:	003e3206 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    cf80:	a5002014 	ori	r20,r20,128
    cf84:	80c00007 	ldb	r3,0(r16)
    cf88:	003e2f06 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    cf8c:	8015883a 	mov	r10,r16
    cf90:	0023883a 	mov	r17,zero
    cf94:	18bff404 	addi	r2,r3,-48
    cf98:	50c00007 	ldb	r3,0(r10)
    cf9c:	8c4002a4 	muli	r17,r17,10
    cfa0:	84000044 	addi	r16,r16,1
    cfa4:	8015883a 	mov	r10,r16
    cfa8:	1463883a 	add	r17,r2,r17
    cfac:	18bff404 	addi	r2,r3,-48
    cfb0:	30bff92e 	bgeu	r6,r2,cf98 <__alt_mem_onchip_memory+0xf780cf98>
    cfb4:	003e2506 	br	c84c <__alt_mem_onchip_memory+0xf780c84c>
    cfb8:	21003fcc 	andi	r4,r4,255
    cfbc:	2002d41e 	bne	r4,zero,db10 <___vfiprintf_internal_r+0x1444>
    cfc0:	a5000414 	ori	r20,r20,16
    cfc4:	a080080c 	andi	r2,r20,32
    cfc8:	103fb51e 	bne	r2,zero,cea0 <__alt_mem_onchip_memory+0xf780cea0>
    cfcc:	a080040c 	andi	r2,r20,16
    cfd0:	1001f826 	beq	r2,zero,d7b4 <___vfiprintf_internal_r+0x10e8>
    cfd4:	da802217 	ldw	r10,136(sp)
    cfd8:	54800017 	ldw	r18,0(r10)
    cfdc:	52800104 	addi	r10,r10,4
    cfe0:	da802215 	stw	r10,136(sp)
    cfe4:	9027d7fa 	srai	r19,r18,31
    cfe8:	9805883a 	mov	r2,r19
    cfec:	003fb206 	br	ceb8 <__alt_mem_onchip_memory+0xf780ceb8>
    cff0:	21003fcc 	andi	r4,r4,255
    cff4:	2002c41e 	bne	r4,zero,db08 <___vfiprintf_internal_r+0x143c>
    cff8:	a5000414 	ori	r20,r20,16
    cffc:	a080080c 	andi	r2,r20,32
    d000:	103f5f1e 	bne	r2,zero,cd80 <__alt_mem_onchip_memory+0xf780cd80>
    d004:	a080040c 	andi	r2,r20,16
    d008:	10020f26 	beq	r2,zero,d848 <___vfiprintf_internal_r+0x117c>
    d00c:	da802217 	ldw	r10,136(sp)
    d010:	d8001d85 	stb	zero,118(sp)
    d014:	0027883a 	mov	r19,zero
    d018:	50800104 	addi	r2,r10,4
    d01c:	54800017 	ldw	r18,0(r10)
    d020:	48021116 	blt	r9,zero,d868 <___vfiprintf_internal_r+0x119c>
    d024:	00ffdfc4 	movi	r3,-129
    d028:	d8802215 	stw	r2,136(sp)
    d02c:	a0e8703a 	and	r20,r20,r3
    d030:	903f5e1e 	bne	r18,zero,cdac <__alt_mem_onchip_memory+0xf780cdac>
    d034:	0039883a 	mov	fp,zero
    d038:	4802a626 	beq	r9,zero,dad4 <___vfiprintf_internal_r+0x1408>
    d03c:	0025883a 	mov	r18,zero
    d040:	0027883a 	mov	r19,zero
    d044:	003f5a06 	br	cdb0 <__alt_mem_onchip_memory+0xf780cdb0>
    d048:	21003fcc 	andi	r4,r4,255
    d04c:	20029f1e 	bne	r4,zero,dacc <___vfiprintf_internal_r+0x1400>
    d050:	a5000414 	ori	r20,r20,16
    d054:	a080080c 	andi	r2,r20,32
    d058:	10005e1e 	bne	r2,zero,d1d4 <___vfiprintf_internal_r+0xb08>
    d05c:	a080040c 	andi	r2,r20,16
    d060:	1001a21e 	bne	r2,zero,d6ec <___vfiprintf_internal_r+0x1020>
    d064:	a080100c 	andi	r2,r20,64
    d068:	d8001d85 	stb	zero,118(sp)
    d06c:	da802217 	ldw	r10,136(sp)
    d070:	1002231e 	bne	r2,zero,d900 <___vfiprintf_internal_r+0x1234>
    d074:	50800104 	addi	r2,r10,4
    d078:	54800017 	ldw	r18,0(r10)
    d07c:	0027883a 	mov	r19,zero
    d080:	4801a00e 	bge	r9,zero,d704 <___vfiprintf_internal_r+0x1038>
    d084:	d8802215 	stw	r2,136(sp)
    d088:	0039883a 	mov	fp,zero
    d08c:	94c4b03a 	or	r2,r18,r19
    d090:	103f901e 	bne	r2,zero,ced4 <__alt_mem_onchip_memory+0xf780ced4>
    d094:	00800044 	movi	r2,1
    d098:	10803fcc 	andi	r2,r2,255
    d09c:	00c00044 	movi	r3,1
    d0a0:	10c05926 	beq	r2,r3,d208 <___vfiprintf_internal_r+0xb3c>
    d0a4:	00c00084 	movi	r3,2
    d0a8:	10ffe41e 	bne	r2,r3,d03c <__alt_mem_onchip_memory+0xf780d03c>
    d0ac:	0025883a 	mov	r18,zero
    d0b0:	0027883a 	mov	r19,zero
    d0b4:	00013d06 	br	d5ac <___vfiprintf_internal_r+0xee0>
    d0b8:	21003fcc 	andi	r4,r4,255
    d0bc:	2002811e 	bne	r4,zero,dac4 <___vfiprintf_internal_r+0x13f8>
    d0c0:	00800074 	movhi	r2,1
    d0c4:	10885f04 	addi	r2,r2,8572
    d0c8:	d8802615 	stw	r2,152(sp)
    d0cc:	a080080c 	andi	r2,r20,32
    d0d0:	103f561e 	bne	r2,zero,ce2c <__alt_mem_onchip_memory+0xf780ce2c>
    d0d4:	a080040c 	andi	r2,r20,16
    d0d8:	1001d126 	beq	r2,zero,d820 <___vfiprintf_internal_r+0x1154>
    d0dc:	da802217 	ldw	r10,136(sp)
    d0e0:	0027883a 	mov	r19,zero
    d0e4:	54800017 	ldw	r18,0(r10)
    d0e8:	52800104 	addi	r10,r10,4
    d0ec:	da802215 	stw	r10,136(sp)
    d0f0:	003f5306 	br	ce40 <__alt_mem_onchip_memory+0xf780ce40>
    d0f4:	da802217 	ldw	r10,136(sp)
    d0f8:	d8001d85 	stb	zero,118(sp)
    d0fc:	55400017 	ldw	r21,0(r10)
    d100:	50c00104 	addi	r3,r10,4
    d104:	a8024226 	beq	r21,zero,da10 <___vfiprintf_internal_r+0x1344>
    d108:	48021816 	blt	r9,zero,d96c <___vfiprintf_internal_r+0x12a0>
    d10c:	480d883a 	mov	r6,r9
    d110:	000b883a 	mov	r5,zero
    d114:	a809883a 	mov	r4,r21
    d118:	d8c02a15 	stw	r3,168(sp)
    d11c:	da002b15 	stw	r8,172(sp)
    d120:	da402c15 	stw	r9,176(sp)
    d124:	000a7d40 	call	a7d4 <memchr>
    d128:	d8c02a17 	ldw	r3,168(sp)
    d12c:	da002b17 	ldw	r8,172(sp)
    d130:	da402c17 	ldw	r9,176(sp)
    d134:	10024826 	beq	r2,zero,da58 <___vfiprintf_internal_r+0x138c>
    d138:	1567c83a 	sub	r19,r2,r21
    d13c:	df001d83 	ldbu	fp,118(sp)
    d140:	d8c02215 	stw	r3,136(sp)
    d144:	0013883a 	mov	r9,zero
    d148:	003e6006 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    d14c:	21003fcc 	andi	r4,r4,255
    d150:	203fc026 	beq	r4,zero,d054 <__alt_mem_onchip_memory+0xf780d054>
    d154:	d9c01d85 	stb	r7,118(sp)
    d158:	003fbe06 	br	d054 <__alt_mem_onchip_memory+0xf780d054>
    d15c:	da802217 	ldw	r10,136(sp)
    d160:	54400017 	ldw	r17,0(r10)
    d164:	50800104 	addi	r2,r10,4
    d168:	883e3b16 	blt	r17,zero,ca58 <__alt_mem_onchip_memory+0xf780ca58>
    d16c:	d8802215 	stw	r2,136(sp)
    d170:	80c00007 	ldb	r3,0(r16)
    d174:	003db406 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    d178:	01000044 	movi	r4,1
    d17c:	01c00ac4 	movi	r7,43
    d180:	80c00007 	ldb	r3,0(r16)
    d184:	003db006 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    d188:	80c00007 	ldb	r3,0(r16)
    d18c:	82800044 	addi	r10,r16,1
    d190:	1b423c26 	beq	r3,r13,da84 <___vfiprintf_internal_r+0x13b8>
    d194:	18bff404 	addi	r2,r3,-48
    d198:	0013883a 	mov	r9,zero
    d19c:	30822b36 	bltu	r6,r2,da4c <___vfiprintf_internal_r+0x1380>
    d1a0:	50c00007 	ldb	r3,0(r10)
    d1a4:	4a4002a4 	muli	r9,r9,10
    d1a8:	54000044 	addi	r16,r10,1
    d1ac:	8015883a 	mov	r10,r16
    d1b0:	4893883a 	add	r9,r9,r2
    d1b4:	18bff404 	addi	r2,r3,-48
    d1b8:	30bff92e 	bgeu	r6,r2,d1a0 <__alt_mem_onchip_memory+0xf780d1a0>
    d1bc:	483da30e 	bge	r9,zero,c84c <__alt_mem_onchip_memory+0xf780c84c>
    d1c0:	027fffc4 	movi	r9,-1
    d1c4:	003da106 	br	c84c <__alt_mem_onchip_memory+0xf780c84c>
    d1c8:	a5001014 	ori	r20,r20,64
    d1cc:	80c00007 	ldb	r3,0(r16)
    d1d0:	003d9d06 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    d1d4:	da802217 	ldw	r10,136(sp)
    d1d8:	d8001d85 	stb	zero,118(sp)
    d1dc:	50c00204 	addi	r3,r10,8
    d1e0:	54800017 	ldw	r18,0(r10)
    d1e4:	54c00117 	ldw	r19,4(r10)
    d1e8:	4801ca16 	blt	r9,zero,d914 <___vfiprintf_internal_r+0x1248>
    d1ec:	013fdfc4 	movi	r4,-129
    d1f0:	94c4b03a 	or	r2,r18,r19
    d1f4:	d8c02215 	stw	r3,136(sp)
    d1f8:	a128703a 	and	r20,r20,r4
    d1fc:	0039883a 	mov	fp,zero
    d200:	103f341e 	bne	r2,zero,ced4 <__alt_mem_onchip_memory+0xf780ced4>
    d204:	483e2e26 	beq	r9,zero,cac0 <__alt_mem_onchip_memory+0xf780cac0>
    d208:	0025883a 	mov	r18,zero
    d20c:	94800c04 	addi	r18,r18,48
    d210:	dc8019c5 	stb	r18,103(sp)
    d214:	dcc02717 	ldw	r19,156(sp)
    d218:	dd4019c4 	addi	r21,sp,103
    d21c:	003e2b06 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    d220:	21003fcc 	andi	r4,r4,255
    d224:	2002361e 	bne	r4,zero,db00 <___vfiprintf_internal_r+0x1434>
    d228:	1801c126 	beq	r3,zero,d930 <___vfiprintf_internal_r+0x1264>
    d22c:	04800044 	movi	r18,1
    d230:	d8c01005 	stb	r3,64(sp)
    d234:	d8001d85 	stb	zero,118(sp)
    d238:	9027883a 	mov	r19,r18
    d23c:	dd401004 	addi	r21,sp,64
    d240:	003f1106 	br	ce88 <__alt_mem_onchip_memory+0xf780ce88>
    d244:	d9402117 	ldw	r5,132(sp)
    d248:	d9002017 	ldw	r4,128(sp)
    d24c:	d9801a04 	addi	r6,sp,104
    d250:	d9c02b15 	stw	r7,172(sp)
    d254:	dbc02a15 	stw	r15,168(sp)
    d258:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d25c:	d9c02b17 	ldw	r7,172(sp)
    d260:	dbc02a17 	ldw	r15,168(sp)
    d264:	10006d1e 	bne	r2,zero,d41c <___vfiprintf_internal_r+0xd50>
    d268:	d9801b17 	ldw	r6,108(sp)
    d26c:	d8801c17 	ldw	r2,112(sp)
    d270:	d811883a 	mov	r8,sp
    d274:	31400044 	addi	r5,r6,1
    d278:	003e3306 	br	cb48 <__alt_mem_onchip_memory+0xf780cb48>
    d27c:	d9401b17 	ldw	r5,108(sp)
    d280:	d8801c17 	ldw	r2,112(sp)
    d284:	29000044 	addi	r4,r5,1
    d288:	d8c01d87 	ldb	r3,118(sp)
    d28c:	183e4d26 	beq	r3,zero,cbc4 <__alt_mem_onchip_memory+0xf780cbc4>
    d290:	00c00044 	movi	r3,1
    d294:	d9401d84 	addi	r5,sp,118
    d298:	10c5883a 	add	r2,r2,r3
    d29c:	41400015 	stw	r5,0(r8)
    d2a0:	40c00115 	stw	r3,4(r8)
    d2a4:	d8801c15 	stw	r2,112(sp)
    d2a8:	d9001b15 	stw	r4,108(sp)
    d2ac:	014001c4 	movi	r5,7
    d2b0:	2900a90e 	bge	r5,r4,d558 <___vfiprintf_internal_r+0xe8c>
    d2b4:	1000da1e 	bne	r2,zero,d620 <___vfiprintf_internal_r+0xf54>
    d2b8:	7000ab1e 	bne	r14,zero,d568 <___vfiprintf_internal_r+0xe9c>
    d2bc:	000b883a 	mov	r5,zero
    d2c0:	1809883a 	mov	r4,r3
    d2c4:	d811883a 	mov	r8,sp
    d2c8:	00c02004 	movi	r3,128
    d2cc:	e0fe4d26 	beq	fp,r3,cc04 <__alt_mem_onchip_memory+0xf780cc04>
    d2d0:	4cf9c83a 	sub	fp,r9,r19
    d2d4:	073e7b0e 	bge	zero,fp,ccc4 <__alt_mem_onchip_memory+0xf780ccc4>
    d2d8:	01c00404 	movi	r7,16
    d2dc:	3f01900e 	bge	r7,fp,d920 <___vfiprintf_internal_r+0x1254>
    d2e0:	00c00074 	movhi	r3,1
    d2e4:	18c8c404 	addi	r3,r3,8976
    d2e8:	d8c02415 	stw	r3,144(sp)
    d2ec:	034001c4 	movi	r13,7
    d2f0:	00000506 	br	d308 <___vfiprintf_internal_r+0xc3c>
    d2f4:	29000084 	addi	r4,r5,2
    d2f8:	42000204 	addi	r8,r8,8
    d2fc:	180b883a 	mov	r5,r3
    d300:	e73ffc04 	addi	fp,fp,-16
    d304:	3f000d0e 	bge	r7,fp,d33c <___vfiprintf_internal_r+0xc70>
    d308:	10800404 	addi	r2,r2,16
    d30c:	28c00044 	addi	r3,r5,1
    d310:	45c00015 	stw	r23,0(r8)
    d314:	41c00115 	stw	r7,4(r8)
    d318:	d8801c15 	stw	r2,112(sp)
    d31c:	d8c01b15 	stw	r3,108(sp)
    d320:	68fff40e 	bge	r13,r3,d2f4 <__alt_mem_onchip_memory+0xf780d2f4>
    d324:	1000101e 	bne	r2,zero,d368 <___vfiprintf_internal_r+0xc9c>
    d328:	e73ffc04 	addi	fp,fp,-16
    d32c:	01000044 	movi	r4,1
    d330:	000b883a 	mov	r5,zero
    d334:	d811883a 	mov	r8,sp
    d338:	3f3ff316 	blt	r7,fp,d308 <__alt_mem_onchip_memory+0xf780d308>
    d33c:	da802417 	ldw	r10,144(sp)
    d340:	1705883a 	add	r2,r2,fp
    d344:	47000115 	stw	fp,4(r8)
    d348:	42800015 	stw	r10,0(r8)
    d34c:	d8801c15 	stw	r2,112(sp)
    d350:	d9001b15 	stw	r4,108(sp)
    d354:	00c001c4 	movi	r3,7
    d358:	19003616 	blt	r3,r4,d434 <___vfiprintf_internal_r+0xd68>
    d35c:	42000204 	addi	r8,r8,8
    d360:	21000044 	addi	r4,r4,1
    d364:	003e5706 	br	ccc4 <__alt_mem_onchip_memory+0xf780ccc4>
    d368:	d9402117 	ldw	r5,132(sp)
    d36c:	d9002017 	ldw	r4,128(sp)
    d370:	d9801a04 	addi	r6,sp,104
    d374:	d9c02b15 	stw	r7,172(sp)
    d378:	db402a15 	stw	r13,168(sp)
    d37c:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d380:	d9c02b17 	ldw	r7,172(sp)
    d384:	db402a17 	ldw	r13,168(sp)
    d388:	1000241e 	bne	r2,zero,d41c <___vfiprintf_internal_r+0xd50>
    d38c:	d9401b17 	ldw	r5,108(sp)
    d390:	d8801c17 	ldw	r2,112(sp)
    d394:	d811883a 	mov	r8,sp
    d398:	29000044 	addi	r4,r5,1
    d39c:	003fd806 	br	d300 <__alt_mem_onchip_memory+0xf780d300>
    d3a0:	d9401b17 	ldw	r5,108(sp)
    d3a4:	00c00074 	movhi	r3,1
    d3a8:	18c8c804 	addi	r3,r3,8992
    d3ac:	d8c02415 	stw	r3,144(sp)
    d3b0:	29400044 	addi	r5,r5,1
    d3b4:	d8c02417 	ldw	r3,144(sp)
    d3b8:	14c5883a 	add	r2,r2,r19
    d3bc:	44c00115 	stw	r19,4(r8)
    d3c0:	40c00015 	stw	r3,0(r8)
    d3c4:	d8801c15 	stw	r2,112(sp)
    d3c8:	d9401b15 	stw	r5,108(sp)
    d3cc:	00c001c4 	movi	r3,7
    d3d0:	1940070e 	bge	r3,r5,d3f0 <___vfiprintf_internal_r+0xd24>
    d3d4:	103e4826 	beq	r2,zero,ccf8 <__alt_mem_onchip_memory+0xf780ccf8>
    d3d8:	d9402117 	ldw	r5,132(sp)
    d3dc:	d9002017 	ldw	r4,128(sp)
    d3e0:	d9801a04 	addi	r6,sp,104
    d3e4:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d3e8:	10000c1e 	bne	r2,zero,d41c <___vfiprintf_internal_r+0xd50>
    d3ec:	d8801c17 	ldw	r2,112(sp)
    d3f0:	8c80010e 	bge	r17,r18,d3f8 <___vfiprintf_internal_r+0xd2c>
    d3f4:	9023883a 	mov	r17,r18
    d3f8:	da802317 	ldw	r10,140(sp)
    d3fc:	5455883a 	add	r10,r10,r17
    d400:	da802315 	stw	r10,140(sp)
    d404:	103e4126 	beq	r2,zero,cd0c <__alt_mem_onchip_memory+0xf780cd0c>
    d408:	d9402117 	ldw	r5,132(sp)
    d40c:	d9002017 	ldw	r4,128(sp)
    d410:	d9801a04 	addi	r6,sp,104
    d414:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d418:	103e3c26 	beq	r2,zero,cd0c <__alt_mem_onchip_memory+0xf780cd0c>
    d41c:	dd002117 	ldw	r20,132(sp)
    d420:	a080030b 	ldhu	r2,12(r20)
    d424:	1080100c 	andi	r2,r2,64
    d428:	1001231e 	bne	r2,zero,d8b8 <___vfiprintf_internal_r+0x11ec>
    d42c:	d8802317 	ldw	r2,140(sp)
    d430:	003d7b06 	br	ca20 <__alt_mem_onchip_memory+0xf780ca20>
    d434:	1000991e 	bne	r2,zero,d69c <___vfiprintf_internal_r+0xfd0>
    d438:	00c00044 	movi	r3,1
    d43c:	9805883a 	mov	r2,r19
    d440:	dd400015 	stw	r21,0(sp)
    d444:	dcc00115 	stw	r19,4(sp)
    d448:	dcc01c15 	stw	r19,112(sp)
    d44c:	d8c01b15 	stw	r3,108(sp)
    d450:	d811883a 	mov	r8,sp
    d454:	42000204 	addi	r8,r8,8
    d458:	a2c0010c 	andi	r11,r20,4
    d45c:	583fe426 	beq	r11,zero,d3f0 <__alt_mem_onchip_memory+0xf780d3f0>
    d460:	8ca7c83a 	sub	r19,r17,r18
    d464:	04ffe20e 	bge	zero,r19,d3f0 <__alt_mem_onchip_memory+0xf780d3f0>
    d468:	01c00404 	movi	r7,16
    d46c:	3cffcc0e 	bge	r7,r19,d3a0 <__alt_mem_onchip_memory+0xf780d3a0>
    d470:	02800074 	movhi	r10,1
    d474:	5288c804 	addi	r10,r10,8992
    d478:	d9001b17 	ldw	r4,108(sp)
    d47c:	da802415 	stw	r10,144(sp)
    d480:	382b883a 	mov	r21,r7
    d484:	050001c4 	movi	r20,7
    d488:	df002017 	ldw	fp,128(sp)
    d48c:	00000506 	br	d4a4 <___vfiprintf_internal_r+0xdd8>
    d490:	21400084 	addi	r5,r4,2
    d494:	42000204 	addi	r8,r8,8
    d498:	1809883a 	mov	r4,r3
    d49c:	9cfffc04 	addi	r19,r19,-16
    d4a0:	acffc40e 	bge	r21,r19,d3b4 <__alt_mem_onchip_memory+0xf780d3b4>
    d4a4:	10800404 	addi	r2,r2,16
    d4a8:	20c00044 	addi	r3,r4,1
    d4ac:	45800015 	stw	r22,0(r8)
    d4b0:	45400115 	stw	r21,4(r8)
    d4b4:	d8801c15 	stw	r2,112(sp)
    d4b8:	d8c01b15 	stw	r3,108(sp)
    d4bc:	a0fff40e 	bge	r20,r3,d490 <__alt_mem_onchip_memory+0xf780d490>
    d4c0:	1000041e 	bne	r2,zero,d4d4 <___vfiprintf_internal_r+0xe08>
    d4c4:	01400044 	movi	r5,1
    d4c8:	0009883a 	mov	r4,zero
    d4cc:	d811883a 	mov	r8,sp
    d4d0:	003ff206 	br	d49c <__alt_mem_onchip_memory+0xf780d49c>
    d4d4:	d9402117 	ldw	r5,132(sp)
    d4d8:	d9801a04 	addi	r6,sp,104
    d4dc:	e009883a 	mov	r4,fp
    d4e0:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d4e4:	103fcd1e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d4e8:	d9001b17 	ldw	r4,108(sp)
    d4ec:	d8801c17 	ldw	r2,112(sp)
    d4f0:	d811883a 	mov	r8,sp
    d4f4:	21400044 	addi	r5,r4,1
    d4f8:	003fe806 	br	d49c <__alt_mem_onchip_memory+0xf780d49c>
    d4fc:	d9402117 	ldw	r5,132(sp)
    d500:	d9002017 	ldw	r4,128(sp)
    d504:	d9801a04 	addi	r6,sp,104
    d508:	d9c02b15 	stw	r7,172(sp)
    d50c:	db402a15 	stw	r13,168(sp)
    d510:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d514:	d9c02b17 	ldw	r7,172(sp)
    d518:	db402a17 	ldw	r13,168(sp)
    d51c:	103fbf1e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d520:	d9401b17 	ldw	r5,108(sp)
    d524:	d8801c17 	ldw	r2,112(sp)
    d528:	d811883a 	mov	r8,sp
    d52c:	29800044 	addi	r6,r5,1
    d530:	003dc406 	br	cc44 <__alt_mem_onchip_memory+0xf780cc44>
    d534:	1000d21e 	bne	r2,zero,d880 <___vfiprintf_internal_r+0x11b4>
    d538:	d8c01d87 	ldb	r3,118(sp)
    d53c:	18009526 	beq	r3,zero,d794 <___vfiprintf_internal_r+0x10c8>
    d540:	00800044 	movi	r2,1
    d544:	d8c01d84 	addi	r3,sp,118
    d548:	1009883a 	mov	r4,r2
    d54c:	d8c00015 	stw	r3,0(sp)
    d550:	d8800115 	stw	r2,4(sp)
    d554:	d811883a 	mov	r8,sp
    d558:	200b883a 	mov	r5,r4
    d55c:	42000204 	addi	r8,r8,8
    d560:	21000044 	addi	r4,r4,1
    d564:	003d9706 	br	cbc4 <__alt_mem_onchip_memory+0xf780cbc4>
    d568:	d9001d04 	addi	r4,sp,116
    d56c:	00800084 	movi	r2,2
    d570:	d9000015 	stw	r4,0(sp)
    d574:	d8800115 	stw	r2,4(sp)
    d578:	1809883a 	mov	r4,r3
    d57c:	d811883a 	mov	r8,sp
    d580:	200b883a 	mov	r5,r4
    d584:	42000204 	addi	r8,r8,8
    d588:	21000044 	addi	r4,r4,1
    d58c:	003f4e06 	br	d2c8 <__alt_mem_onchip_memory+0xf780d2c8>
    d590:	d8001d85 	stb	zero,118(sp)
    d594:	48005016 	blt	r9,zero,d6d8 <___vfiprintf_internal_r+0x100c>
    d598:	00ffdfc4 	movi	r3,-129
    d59c:	94c4b03a 	or	r2,r18,r19
    d5a0:	a0e8703a 	and	r20,r20,r3
    d5a4:	103d4426 	beq	r2,zero,cab8 <__alt_mem_onchip_memory+0xf780cab8>
    d5a8:	0039883a 	mov	fp,zero
    d5ac:	d9002617 	ldw	r4,152(sp)
    d5b0:	dd401a04 	addi	r21,sp,104
    d5b4:	908003cc 	andi	r2,r18,15
    d5b8:	9806973a 	slli	r3,r19,28
    d5bc:	2085883a 	add	r2,r4,r2
    d5c0:	9024d13a 	srli	r18,r18,4
    d5c4:	10800003 	ldbu	r2,0(r2)
    d5c8:	9826d13a 	srli	r19,r19,4
    d5cc:	ad7fffc4 	addi	r21,r21,-1
    d5d0:	1ca4b03a 	or	r18,r3,r18
    d5d4:	a8800005 	stb	r2,0(r21)
    d5d8:	94c4b03a 	or	r2,r18,r19
    d5dc:	103ff51e 	bne	r2,zero,d5b4 <__alt_mem_onchip_memory+0xf780d5b4>
    d5e0:	003e5906 	br	cf48 <__alt_mem_onchip_memory+0xf780cf48>
    d5e4:	d9402117 	ldw	r5,132(sp)
    d5e8:	d9002017 	ldw	r4,128(sp)
    d5ec:	d9801a04 	addi	r6,sp,104
    d5f0:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d5f4:	103f891e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d5f8:	d8801c17 	ldw	r2,112(sp)
    d5fc:	d811883a 	mov	r8,sp
    d600:	003f9506 	br	d458 <__alt_mem_onchip_memory+0xf780d458>
    d604:	d9402117 	ldw	r5,132(sp)
    d608:	d9002017 	ldw	r4,128(sp)
    d60c:	d9801a04 	addi	r6,sp,104
    d610:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d614:	103f811e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d618:	d811883a 	mov	r8,sp
    d61c:	003ced06 	br	c9d4 <__alt_mem_onchip_memory+0xf780c9d4>
    d620:	d9402117 	ldw	r5,132(sp)
    d624:	d9002017 	ldw	r4,128(sp)
    d628:	d9801a04 	addi	r6,sp,104
    d62c:	da402c15 	stw	r9,176(sp)
    d630:	db802a15 	stw	r14,168(sp)
    d634:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d638:	da402c17 	ldw	r9,176(sp)
    d63c:	db802a17 	ldw	r14,168(sp)
    d640:	103f761e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d644:	d9401b17 	ldw	r5,108(sp)
    d648:	d8801c17 	ldw	r2,112(sp)
    d64c:	d811883a 	mov	r8,sp
    d650:	29000044 	addi	r4,r5,1
    d654:	003d5b06 	br	cbc4 <__alt_mem_onchip_memory+0xf780cbc4>
    d658:	d9402117 	ldw	r5,132(sp)
    d65c:	d9002017 	ldw	r4,128(sp)
    d660:	d9801a04 	addi	r6,sp,104
    d664:	da402c15 	stw	r9,176(sp)
    d668:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d66c:	da402c17 	ldw	r9,176(sp)
    d670:	103f6a1e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d674:	d9401b17 	ldw	r5,108(sp)
    d678:	d8801c17 	ldw	r2,112(sp)
    d67c:	d811883a 	mov	r8,sp
    d680:	29000044 	addi	r4,r5,1
    d684:	003f1006 	br	d2c8 <__alt_mem_onchip_memory+0xf780d2c8>
    d688:	1000c31e 	bne	r2,zero,d998 <___vfiprintf_internal_r+0x12cc>
    d68c:	01000044 	movi	r4,1
    d690:	000b883a 	mov	r5,zero
    d694:	d811883a 	mov	r8,sp
    d698:	003f0d06 	br	d2d0 <__alt_mem_onchip_memory+0xf780d2d0>
    d69c:	d9402117 	ldw	r5,132(sp)
    d6a0:	d9002017 	ldw	r4,128(sp)
    d6a4:	d9801a04 	addi	r6,sp,104
    d6a8:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d6ac:	103f5b1e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d6b0:	d9001b17 	ldw	r4,108(sp)
    d6b4:	d8801c17 	ldw	r2,112(sp)
    d6b8:	d811883a 	mov	r8,sp
    d6bc:	21000044 	addi	r4,r4,1
    d6c0:	003d8006 	br	ccc4 <__alt_mem_onchip_memory+0xf780ccc4>
    d6c4:	01000074 	movhi	r4,1
    d6c8:	21086404 	addi	r4,r4,8592
    d6cc:	d9002615 	stw	r4,152(sp)
    d6d0:	d8c02215 	stw	r3,136(sp)
    d6d4:	1029883a 	mov	r20,r2
    d6d8:	94c4b03a 	or	r2,r18,r19
    d6dc:	103fb21e 	bne	r2,zero,d5a8 <__alt_mem_onchip_memory+0xf780d5a8>
    d6e0:	0039883a 	mov	fp,zero
    d6e4:	00800084 	movi	r2,2
    d6e8:	003e6b06 	br	d098 <__alt_mem_onchip_memory+0xf780d098>
    d6ec:	da802217 	ldw	r10,136(sp)
    d6f0:	d8001d85 	stb	zero,118(sp)
    d6f4:	0027883a 	mov	r19,zero
    d6f8:	50800104 	addi	r2,r10,4
    d6fc:	54800017 	ldw	r18,0(r10)
    d700:	483e6016 	blt	r9,zero,d084 <__alt_mem_onchip_memory+0xf780d084>
    d704:	00ffdfc4 	movi	r3,-129
    d708:	d8802215 	stw	r2,136(sp)
    d70c:	a0e8703a 	and	r20,r20,r3
    d710:	0039883a 	mov	fp,zero
    d714:	903ebb26 	beq	r18,zero,d204 <__alt_mem_onchip_memory+0xf780d204>
    d718:	00800244 	movi	r2,9
    d71c:	14bdee36 	bltu	r2,r18,ced8 <__alt_mem_onchip_memory+0xf780ced8>
    d720:	003eba06 	br	d20c <__alt_mem_onchip_memory+0xf780d20c>
    d724:	00800c04 	movi	r2,48
    d728:	d8c01d45 	stb	r3,117(sp)
    d72c:	d8801d05 	stb	r2,116(sp)
    d730:	d8001d85 	stb	zero,118(sp)
    d734:	a0c00094 	ori	r3,r20,2
    d738:	4800a916 	blt	r9,zero,d9e0 <___vfiprintf_internal_r+0x1314>
    d73c:	00bfdfc4 	movi	r2,-129
    d740:	a096703a 	and	r11,r20,r2
    d744:	5d000094 	ori	r20,r11,2
    d748:	0039883a 	mov	fp,zero
    d74c:	003f9706 	br	d5ac <__alt_mem_onchip_memory+0xf780d5ac>
    d750:	8025883a 	mov	r18,r16
    d754:	003c2e06 	br	c810 <__alt_mem_onchip_memory+0xf780c810>
    d758:	00800074 	movhi	r2,1
    d75c:	10886404 	addi	r2,r2,8592
    d760:	0039883a 	mov	fp,zero
    d764:	d8802615 	stw	r2,152(sp)
    d768:	003f9006 	br	d5ac <__alt_mem_onchip_memory+0xf780d5ac>
    d76c:	04a5c83a 	sub	r18,zero,r18
    d770:	07000b44 	movi	fp,45
    d774:	9004c03a 	cmpne	r2,r18,zero
    d778:	04e7c83a 	sub	r19,zero,r19
    d77c:	df001d85 	stb	fp,118(sp)
    d780:	98a7c83a 	sub	r19,r19,r2
    d784:	48009f16 	blt	r9,zero,da04 <___vfiprintf_internal_r+0x1338>
    d788:	00bfdfc4 	movi	r2,-129
    d78c:	a0a8703a 	and	r20,r20,r2
    d790:	003dd006 	br	ced4 <__alt_mem_onchip_memory+0xf780ced4>
    d794:	70004c26 	beq	r14,zero,d8c8 <___vfiprintf_internal_r+0x11fc>
    d798:	00800084 	movi	r2,2
    d79c:	d8c01d04 	addi	r3,sp,116
    d7a0:	d8c00015 	stw	r3,0(sp)
    d7a4:	d8800115 	stw	r2,4(sp)
    d7a8:	01000044 	movi	r4,1
    d7ac:	d811883a 	mov	r8,sp
    d7b0:	003f7306 	br	d580 <__alt_mem_onchip_memory+0xf780d580>
    d7b4:	a080100c 	andi	r2,r20,64
    d7b8:	da802217 	ldw	r10,136(sp)
    d7bc:	103e0626 	beq	r2,zero,cfd8 <__alt_mem_onchip_memory+0xf780cfd8>
    d7c0:	5480000f 	ldh	r18,0(r10)
    d7c4:	52800104 	addi	r10,r10,4
    d7c8:	da802215 	stw	r10,136(sp)
    d7cc:	9027d7fa 	srai	r19,r18,31
    d7d0:	9805883a 	mov	r2,r19
    d7d4:	003db806 	br	ceb8 <__alt_mem_onchip_memory+0xf780ceb8>
    d7d8:	a080040c 	andi	r2,r20,16
    d7dc:	1000091e 	bne	r2,zero,d804 <___vfiprintf_internal_r+0x1138>
    d7e0:	a2c0100c 	andi	r11,r20,64
    d7e4:	58000726 	beq	r11,zero,d804 <___vfiprintf_internal_r+0x1138>
    d7e8:	da802217 	ldw	r10,136(sp)
    d7ec:	50800017 	ldw	r2,0(r10)
    d7f0:	52800104 	addi	r10,r10,4
    d7f4:	da802215 	stw	r10,136(sp)
    d7f8:	da802317 	ldw	r10,140(sp)
    d7fc:	1280000d 	sth	r10,0(r2)
    d800:	003be706 	br	c7a0 <__alt_mem_onchip_memory+0xf780c7a0>
    d804:	da802217 	ldw	r10,136(sp)
    d808:	50800017 	ldw	r2,0(r10)
    d80c:	52800104 	addi	r10,r10,4
    d810:	da802215 	stw	r10,136(sp)
    d814:	da802317 	ldw	r10,140(sp)
    d818:	12800015 	stw	r10,0(r2)
    d81c:	003be006 	br	c7a0 <__alt_mem_onchip_memory+0xf780c7a0>
    d820:	a080100c 	andi	r2,r20,64
    d824:	da802217 	ldw	r10,136(sp)
    d828:	10003026 	beq	r2,zero,d8ec <___vfiprintf_internal_r+0x1220>
    d82c:	5480000b 	ldhu	r18,0(r10)
    d830:	52800104 	addi	r10,r10,4
    d834:	0027883a 	mov	r19,zero
    d838:	da802215 	stw	r10,136(sp)
    d83c:	003d8006 	br	ce40 <__alt_mem_onchip_memory+0xf780ce40>
    d840:	80c00007 	ldb	r3,0(r16)
    d844:	003c0006 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    d848:	a080100c 	andi	r2,r20,64
    d84c:	d8001d85 	stb	zero,118(sp)
    d850:	da802217 	ldw	r10,136(sp)
    d854:	1000201e 	bne	r2,zero,d8d8 <___vfiprintf_internal_r+0x120c>
    d858:	50800104 	addi	r2,r10,4
    d85c:	54800017 	ldw	r18,0(r10)
    d860:	0027883a 	mov	r19,zero
    d864:	483def0e 	bge	r9,zero,d024 <__alt_mem_onchip_memory+0xf780d024>
    d868:	94c6b03a 	or	r3,r18,r19
    d86c:	d8802215 	stw	r2,136(sp)
    d870:	183d4e1e 	bne	r3,zero,cdac <__alt_mem_onchip_memory+0xf780cdac>
    d874:	0039883a 	mov	fp,zero
    d878:	0005883a 	mov	r2,zero
    d87c:	003e0606 	br	d098 <__alt_mem_onchip_memory+0xf780d098>
    d880:	d9402117 	ldw	r5,132(sp)
    d884:	d9002017 	ldw	r4,128(sp)
    d888:	d9801a04 	addi	r6,sp,104
    d88c:	da402c15 	stw	r9,176(sp)
    d890:	db802a15 	stw	r14,168(sp)
    d894:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d898:	da402c17 	ldw	r9,176(sp)
    d89c:	db802a17 	ldw	r14,168(sp)
    d8a0:	103ede1e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d8a4:	d9401b17 	ldw	r5,108(sp)
    d8a8:	d8801c17 	ldw	r2,112(sp)
    d8ac:	d811883a 	mov	r8,sp
    d8b0:	29000044 	addi	r4,r5,1
    d8b4:	003e7406 	br	d288 <__alt_mem_onchip_memory+0xf780d288>
    d8b8:	00bfffc4 	movi	r2,-1
    d8bc:	003c5806 	br	ca20 <__alt_mem_onchip_memory+0xf780ca20>
    d8c0:	d811883a 	mov	r8,sp
    d8c4:	003ee806 	br	d468 <__alt_mem_onchip_memory+0xf780d468>
    d8c8:	000b883a 	mov	r5,zero
    d8cc:	01000044 	movi	r4,1
    d8d0:	d811883a 	mov	r8,sp
    d8d4:	003e7c06 	br	d2c8 <__alt_mem_onchip_memory+0xf780d2c8>
    d8d8:	50800104 	addi	r2,r10,4
    d8dc:	5480000b 	ldhu	r18,0(r10)
    d8e0:	0027883a 	mov	r19,zero
    d8e4:	483dcf0e 	bge	r9,zero,d024 <__alt_mem_onchip_memory+0xf780d024>
    d8e8:	003fdf06 	br	d868 <__alt_mem_onchip_memory+0xf780d868>
    d8ec:	54800017 	ldw	r18,0(r10)
    d8f0:	52800104 	addi	r10,r10,4
    d8f4:	0027883a 	mov	r19,zero
    d8f8:	da802215 	stw	r10,136(sp)
    d8fc:	003d5006 	br	ce40 <__alt_mem_onchip_memory+0xf780ce40>
    d900:	50800104 	addi	r2,r10,4
    d904:	5480000b 	ldhu	r18,0(r10)
    d908:	0027883a 	mov	r19,zero
    d90c:	483f7d0e 	bge	r9,zero,d704 <__alt_mem_onchip_memory+0xf780d704>
    d910:	003ddc06 	br	d084 <__alt_mem_onchip_memory+0xf780d084>
    d914:	d8c02215 	stw	r3,136(sp)
    d918:	0039883a 	mov	fp,zero
    d91c:	003ddb06 	br	d08c <__alt_mem_onchip_memory+0xf780d08c>
    d920:	02800074 	movhi	r10,1
    d924:	5288c404 	addi	r10,r10,8976
    d928:	da802415 	stw	r10,144(sp)
    d92c:	003e8306 	br	d33c <__alt_mem_onchip_memory+0xf780d33c>
    d930:	d8801c17 	ldw	r2,112(sp)
    d934:	dd002117 	ldw	r20,132(sp)
    d938:	103eb926 	beq	r2,zero,d420 <__alt_mem_onchip_memory+0xf780d420>
    d93c:	d9002017 	ldw	r4,128(sp)
    d940:	d9801a04 	addi	r6,sp,104
    d944:	a00b883a 	mov	r5,r20
    d948:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d94c:	003eb406 	br	d420 <__alt_mem_onchip_memory+0xf780d420>
    d950:	80c00043 	ldbu	r3,1(r16)
    d954:	a5000814 	ori	r20,r20,32
    d958:	84000044 	addi	r16,r16,1
    d95c:	18c03fcc 	andi	r3,r3,255
    d960:	18c0201c 	xori	r3,r3,128
    d964:	18ffe004 	addi	r3,r3,-128
    d968:	003bb706 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    d96c:	a809883a 	mov	r4,r21
    d970:	d8c02a15 	stw	r3,168(sp)
    d974:	da002b15 	stw	r8,172(sp)
    d978:	0004e200 	call	4e20 <strlen>
    d97c:	d8c02a17 	ldw	r3,168(sp)
    d980:	1027883a 	mov	r19,r2
    d984:	df001d83 	ldbu	fp,118(sp)
    d988:	d8c02215 	stw	r3,136(sp)
    d98c:	0013883a 	mov	r9,zero
    d990:	da002b17 	ldw	r8,172(sp)
    d994:	003c4d06 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    d998:	d9402117 	ldw	r5,132(sp)
    d99c:	d9002017 	ldw	r4,128(sp)
    d9a0:	d9801a04 	addi	r6,sp,104
    d9a4:	da402c15 	stw	r9,176(sp)
    d9a8:	000c5b80 	call	c5b8 <__sprint_r.part.0>
    d9ac:	da402c17 	ldw	r9,176(sp)
    d9b0:	103e9a1e 	bne	r2,zero,d41c <__alt_mem_onchip_memory+0xf780d41c>
    d9b4:	d9401b17 	ldw	r5,108(sp)
    d9b8:	d8801c17 	ldw	r2,112(sp)
    d9bc:	d811883a 	mov	r8,sp
    d9c0:	29000044 	addi	r4,r5,1
    d9c4:	003e4206 	br	d2d0 <__alt_mem_onchip_memory+0xf780d2d0>
    d9c8:	d9401b17 	ldw	r5,108(sp)
    d9cc:	01000074 	movhi	r4,1
    d9d0:	2108c804 	addi	r4,r4,8992
    d9d4:	d9002415 	stw	r4,144(sp)
    d9d8:	29400044 	addi	r5,r5,1
    d9dc:	003c6d06 	br	cb94 <__alt_mem_onchip_memory+0xf780cb94>
    d9e0:	0039883a 	mov	fp,zero
    d9e4:	00800084 	movi	r2,2
    d9e8:	10803fcc 	andi	r2,r2,255
    d9ec:	01000044 	movi	r4,1
    d9f0:	11001e26 	beq	r2,r4,da6c <___vfiprintf_internal_r+0x13a0>
    d9f4:	01000084 	movi	r4,2
    d9f8:	11001e1e 	bne	r2,r4,da74 <___vfiprintf_internal_r+0x13a8>
    d9fc:	1829883a 	mov	r20,r3
    da00:	003eea06 	br	d5ac <__alt_mem_onchip_memory+0xf780d5ac>
    da04:	a007883a 	mov	r3,r20
    da08:	00800044 	movi	r2,1
    da0c:	003ff606 	br	d9e8 <__alt_mem_onchip_memory+0xf780d9e8>
    da10:	00800184 	movi	r2,6
    da14:	1240012e 	bgeu	r2,r9,da1c <___vfiprintf_internal_r+0x1350>
    da18:	1013883a 	mov	r9,r2
    da1c:	4827883a 	mov	r19,r9
    da20:	4825883a 	mov	r18,r9
    da24:	48001516 	blt	r9,zero,da7c <___vfiprintf_internal_r+0x13b0>
    da28:	05400074 	movhi	r21,1
    da2c:	d8c02215 	stw	r3,136(sp)
    da30:	ad486904 	addi	r21,r21,8612
    da34:	003d1406 	br	ce88 <__alt_mem_onchip_memory+0xf780ce88>
    da38:	02800074 	movhi	r10,1
    da3c:	5288c404 	addi	r10,r10,8976
    da40:	da802415 	stw	r10,144(sp)
    da44:	200d883a 	mov	r6,r4
    da48:	003c9106 	br	cc90 <__alt_mem_onchip_memory+0xf780cc90>
    da4c:	5021883a 	mov	r16,r10
    da50:	0013883a 	mov	r9,zero
    da54:	003b7d06 	br	c84c <__alt_mem_onchip_memory+0xf780c84c>
    da58:	4827883a 	mov	r19,r9
    da5c:	df001d83 	ldbu	fp,118(sp)
    da60:	d8c02215 	stw	r3,136(sp)
    da64:	0013883a 	mov	r9,zero
    da68:	003c1806 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    da6c:	1829883a 	mov	r20,r3
    da70:	003d1806 	br	ced4 <__alt_mem_onchip_memory+0xf780ced4>
    da74:	1829883a 	mov	r20,r3
    da78:	003ccd06 	br	cdb0 <__alt_mem_onchip_memory+0xf780cdb0>
    da7c:	0025883a 	mov	r18,zero
    da80:	003fe906 	br	da28 <__alt_mem_onchip_memory+0xf780da28>
    da84:	d8802217 	ldw	r2,136(sp)
    da88:	80c00043 	ldbu	r3,1(r16)
    da8c:	5021883a 	mov	r16,r10
    da90:	12400017 	ldw	r9,0(r2)
    da94:	10800104 	addi	r2,r2,4
    da98:	d8802215 	stw	r2,136(sp)
    da9c:	483faf0e 	bge	r9,zero,d95c <__alt_mem_onchip_memory+0xf780d95c>
    daa0:	18c03fcc 	andi	r3,r3,255
    daa4:	18c0201c 	xori	r3,r3,128
    daa8:	027fffc4 	movi	r9,-1
    daac:	18ffe004 	addi	r3,r3,-128
    dab0:	003b6506 	br	c848 <__alt_mem_onchip_memory+0xf780c848>
    dab4:	d9c01d85 	stb	r7,118(sp)
    dab8:	003ca006 	br	cd3c <__alt_mem_onchip_memory+0xf780cd3c>
    dabc:	d9c01d85 	stb	r7,118(sp)
    dac0:	003cad06 	br	cd78 <__alt_mem_onchip_memory+0xf780cd78>
    dac4:	d9c01d85 	stb	r7,118(sp)
    dac8:	003d7d06 	br	d0c0 <__alt_mem_onchip_memory+0xf780d0c0>
    dacc:	d9c01d85 	stb	r7,118(sp)
    dad0:	003d5f06 	br	d050 <__alt_mem_onchip_memory+0xf780d050>
    dad4:	a080004c 	andi	r2,r20,1
    dad8:	0039883a 	mov	fp,zero
    dadc:	10000526 	beq	r2,zero,daf4 <___vfiprintf_internal_r+0x1428>
    dae0:	00800c04 	movi	r2,48
    dae4:	d88019c5 	stb	r2,103(sp)
    dae8:	dcc02717 	ldw	r19,156(sp)
    daec:	dd4019c4 	addi	r21,sp,103
    daf0:	003bf606 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    daf4:	0027883a 	mov	r19,zero
    daf8:	dd401a04 	addi	r21,sp,104
    dafc:	003bf306 	br	cacc <__alt_mem_onchip_memory+0xf780cacc>
    db00:	d9c01d85 	stb	r7,118(sp)
    db04:	003dc806 	br	d228 <__alt_mem_onchip_memory+0xf780d228>
    db08:	d9c01d85 	stb	r7,118(sp)
    db0c:	003d3a06 	br	cff8 <__alt_mem_onchip_memory+0xf780cff8>
    db10:	d9c01d85 	stb	r7,118(sp)
    db14:	003d2a06 	br	cfc0 <__alt_mem_onchip_memory+0xf780cfc0>
    db18:	d9c01d85 	stb	r7,118(sp)
    db1c:	003cde06 	br	ce98 <__alt_mem_onchip_memory+0xf780ce98>
    db20:	d9c01d85 	stb	r7,118(sp)
    db24:	003cbc06 	br	ce18 <__alt_mem_onchip_memory+0xf780ce18>

0000db28 <__vfiprintf_internal>:
    db28:	00800074 	movhi	r2,1
    db2c:	108fc804 	addi	r2,r2,16160
    db30:	300f883a 	mov	r7,r6
    db34:	280d883a 	mov	r6,r5
    db38:	200b883a 	mov	r5,r4
    db3c:	11000017 	ldw	r4,0(r2)
    db40:	000c6cc1 	jmpi	c6cc <___vfiprintf_internal_r>

0000db44 <__sbprintf>:
    db44:	2880030b 	ldhu	r2,12(r5)
    db48:	2ac01917 	ldw	r11,100(r5)
    db4c:	2a80038b 	ldhu	r10,14(r5)
    db50:	2a400717 	ldw	r9,28(r5)
    db54:	2a000917 	ldw	r8,36(r5)
    db58:	defee204 	addi	sp,sp,-1144
    db5c:	00c10004 	movi	r3,1024
    db60:	dc011a15 	stw	r16,1128(sp)
    db64:	10bfff4c 	andi	r2,r2,65533
    db68:	2821883a 	mov	r16,r5
    db6c:	d8cb883a 	add	r5,sp,r3
    db70:	dc811c15 	stw	r18,1136(sp)
    db74:	dc411b15 	stw	r17,1132(sp)
    db78:	dfc11d15 	stw	ra,1140(sp)
    db7c:	2025883a 	mov	r18,r4
    db80:	d881030d 	sth	r2,1036(sp)
    db84:	dac11915 	stw	r11,1124(sp)
    db88:	da81038d 	sth	r10,1038(sp)
    db8c:	da410715 	stw	r9,1052(sp)
    db90:	da010915 	stw	r8,1060(sp)
    db94:	dec10015 	stw	sp,1024(sp)
    db98:	dec10415 	stw	sp,1040(sp)
    db9c:	d8c10215 	stw	r3,1032(sp)
    dba0:	d8c10515 	stw	r3,1044(sp)
    dba4:	d8010615 	stw	zero,1048(sp)
    dba8:	000c6cc0 	call	c6cc <___vfiprintf_internal_r>
    dbac:	1023883a 	mov	r17,r2
    dbb0:	10000416 	blt	r2,zero,dbc4 <__sbprintf+0x80>
    dbb4:	d9410004 	addi	r5,sp,1024
    dbb8:	9009883a 	mov	r4,r18
    dbbc:	0008e300 	call	8e30 <_fflush_r>
    dbc0:	10000d1e 	bne	r2,zero,dbf8 <__sbprintf+0xb4>
    dbc4:	d881030b 	ldhu	r2,1036(sp)
    dbc8:	1080100c 	andi	r2,r2,64
    dbcc:	10000326 	beq	r2,zero,dbdc <__sbprintf+0x98>
    dbd0:	8080030b 	ldhu	r2,12(r16)
    dbd4:	10801014 	ori	r2,r2,64
    dbd8:	8080030d 	sth	r2,12(r16)
    dbdc:	8805883a 	mov	r2,r17
    dbe0:	dfc11d17 	ldw	ra,1140(sp)
    dbe4:	dc811c17 	ldw	r18,1136(sp)
    dbe8:	dc411b17 	ldw	r17,1132(sp)
    dbec:	dc011a17 	ldw	r16,1128(sp)
    dbf0:	dec11e04 	addi	sp,sp,1144
    dbf4:	f800283a 	ret
    dbf8:	047fffc4 	movi	r17,-1
    dbfc:	003ff106 	br	dbc4 <__alt_mem_onchip_memory+0xf780dbc4>

0000dc00 <__swbuf_r>:
    dc00:	defffb04 	addi	sp,sp,-20
    dc04:	dcc00315 	stw	r19,12(sp)
    dc08:	dc800215 	stw	r18,8(sp)
    dc0c:	dc000015 	stw	r16,0(sp)
    dc10:	dfc00415 	stw	ra,16(sp)
    dc14:	dc400115 	stw	r17,4(sp)
    dc18:	2025883a 	mov	r18,r4
    dc1c:	2827883a 	mov	r19,r5
    dc20:	3021883a 	mov	r16,r6
    dc24:	20000226 	beq	r4,zero,dc30 <__swbuf_r+0x30>
    dc28:	20800e17 	ldw	r2,56(r4)
    dc2c:	10004226 	beq	r2,zero,dd38 <__swbuf_r+0x138>
    dc30:	80800617 	ldw	r2,24(r16)
    dc34:	8100030b 	ldhu	r4,12(r16)
    dc38:	80800215 	stw	r2,8(r16)
    dc3c:	2080020c 	andi	r2,r4,8
    dc40:	10003626 	beq	r2,zero,dd1c <__swbuf_r+0x11c>
    dc44:	80c00417 	ldw	r3,16(r16)
    dc48:	18003426 	beq	r3,zero,dd1c <__swbuf_r+0x11c>
    dc4c:	2088000c 	andi	r2,r4,8192
    dc50:	9c403fcc 	andi	r17,r19,255
    dc54:	10001a26 	beq	r2,zero,dcc0 <__swbuf_r+0xc0>
    dc58:	80800017 	ldw	r2,0(r16)
    dc5c:	81000517 	ldw	r4,20(r16)
    dc60:	10c7c83a 	sub	r3,r2,r3
    dc64:	1900200e 	bge	r3,r4,dce8 <__swbuf_r+0xe8>
    dc68:	18c00044 	addi	r3,r3,1
    dc6c:	81000217 	ldw	r4,8(r16)
    dc70:	11400044 	addi	r5,r2,1
    dc74:	81400015 	stw	r5,0(r16)
    dc78:	213fffc4 	addi	r4,r4,-1
    dc7c:	81000215 	stw	r4,8(r16)
    dc80:	14c00005 	stb	r19,0(r2)
    dc84:	80800517 	ldw	r2,20(r16)
    dc88:	10c01e26 	beq	r2,r3,dd04 <__swbuf_r+0x104>
    dc8c:	8080030b 	ldhu	r2,12(r16)
    dc90:	1080004c 	andi	r2,r2,1
    dc94:	10000226 	beq	r2,zero,dca0 <__swbuf_r+0xa0>
    dc98:	00800284 	movi	r2,10
    dc9c:	88801926 	beq	r17,r2,dd04 <__swbuf_r+0x104>
    dca0:	8805883a 	mov	r2,r17
    dca4:	dfc00417 	ldw	ra,16(sp)
    dca8:	dcc00317 	ldw	r19,12(sp)
    dcac:	dc800217 	ldw	r18,8(sp)
    dcb0:	dc400117 	ldw	r17,4(sp)
    dcb4:	dc000017 	ldw	r16,0(sp)
    dcb8:	dec00504 	addi	sp,sp,20
    dcbc:	f800283a 	ret
    dcc0:	81401917 	ldw	r5,100(r16)
    dcc4:	00b7ffc4 	movi	r2,-8193
    dcc8:	21080014 	ori	r4,r4,8192
    dccc:	2884703a 	and	r2,r5,r2
    dcd0:	80801915 	stw	r2,100(r16)
    dcd4:	80800017 	ldw	r2,0(r16)
    dcd8:	8100030d 	sth	r4,12(r16)
    dcdc:	81000517 	ldw	r4,20(r16)
    dce0:	10c7c83a 	sub	r3,r2,r3
    dce4:	193fe016 	blt	r3,r4,dc68 <__alt_mem_onchip_memory+0xf780dc68>
    dce8:	800b883a 	mov	r5,r16
    dcec:	9009883a 	mov	r4,r18
    dcf0:	0008e300 	call	8e30 <_fflush_r>
    dcf4:	1000071e 	bne	r2,zero,dd14 <__swbuf_r+0x114>
    dcf8:	80800017 	ldw	r2,0(r16)
    dcfc:	00c00044 	movi	r3,1
    dd00:	003fda06 	br	dc6c <__alt_mem_onchip_memory+0xf780dc6c>
    dd04:	800b883a 	mov	r5,r16
    dd08:	9009883a 	mov	r4,r18
    dd0c:	0008e300 	call	8e30 <_fflush_r>
    dd10:	103fe326 	beq	r2,zero,dca0 <__alt_mem_onchip_memory+0xf780dca0>
    dd14:	00bfffc4 	movi	r2,-1
    dd18:	003fe206 	br	dca4 <__alt_mem_onchip_memory+0xf780dca4>
    dd1c:	800b883a 	mov	r5,r16
    dd20:	9009883a 	mov	r4,r18
    dd24:	00072380 	call	7238 <__swsetup_r>
    dd28:	103ffa1e 	bne	r2,zero,dd14 <__alt_mem_onchip_memory+0xf780dd14>
    dd2c:	8100030b 	ldhu	r4,12(r16)
    dd30:	80c00417 	ldw	r3,16(r16)
    dd34:	003fc506 	br	dc4c <__alt_mem_onchip_memory+0xf780dc4c>
    dd38:	000920c0 	call	920c <__sinit>
    dd3c:	003fbc06 	br	dc30 <__alt_mem_onchip_memory+0xf780dc30>

0000dd40 <__swbuf>:
    dd40:	00800074 	movhi	r2,1
    dd44:	108fc804 	addi	r2,r2,16160
    dd48:	280d883a 	mov	r6,r5
    dd4c:	200b883a 	mov	r5,r4
    dd50:	11000017 	ldw	r4,0(r2)
    dd54:	000dc001 	jmpi	dc00 <__swbuf_r>

0000dd58 <_write_r>:
    dd58:	defffd04 	addi	sp,sp,-12
    dd5c:	2805883a 	mov	r2,r5
    dd60:	dc000015 	stw	r16,0(sp)
    dd64:	04000074 	movhi	r16,1
    dd68:	dc400115 	stw	r17,4(sp)
    dd6c:	300b883a 	mov	r5,r6
    dd70:	84169e04 	addi	r16,r16,23160
    dd74:	2023883a 	mov	r17,r4
    dd78:	380d883a 	mov	r6,r7
    dd7c:	1009883a 	mov	r4,r2
    dd80:	dfc00215 	stw	ra,8(sp)
    dd84:	80000015 	stw	zero,0(r16)
    dd88:	000fd580 	call	fd58 <write>
    dd8c:	00ffffc4 	movi	r3,-1
    dd90:	10c00526 	beq	r2,r3,dda8 <_write_r+0x50>
    dd94:	dfc00217 	ldw	ra,8(sp)
    dd98:	dc400117 	ldw	r17,4(sp)
    dd9c:	dc000017 	ldw	r16,0(sp)
    dda0:	dec00304 	addi	sp,sp,12
    dda4:	f800283a 	ret
    dda8:	80c00017 	ldw	r3,0(r16)
    ddac:	183ff926 	beq	r3,zero,dd94 <__alt_mem_onchip_memory+0xf780dd94>
    ddb0:	88c00015 	stw	r3,0(r17)
    ddb4:	003ff706 	br	dd94 <__alt_mem_onchip_memory+0xf780dd94>

0000ddb8 <_close_r>:
    ddb8:	defffd04 	addi	sp,sp,-12
    ddbc:	dc000015 	stw	r16,0(sp)
    ddc0:	04000074 	movhi	r16,1
    ddc4:	dc400115 	stw	r17,4(sp)
    ddc8:	84169e04 	addi	r16,r16,23160
    ddcc:	2023883a 	mov	r17,r4
    ddd0:	2809883a 	mov	r4,r5
    ddd4:	dfc00215 	stw	ra,8(sp)
    ddd8:	80000015 	stw	zero,0(r16)
    dddc:	000f1b00 	call	f1b0 <close>
    dde0:	00ffffc4 	movi	r3,-1
    dde4:	10c00526 	beq	r2,r3,ddfc <_close_r+0x44>
    dde8:	dfc00217 	ldw	ra,8(sp)
    ddec:	dc400117 	ldw	r17,4(sp)
    ddf0:	dc000017 	ldw	r16,0(sp)
    ddf4:	dec00304 	addi	sp,sp,12
    ddf8:	f800283a 	ret
    ddfc:	80c00017 	ldw	r3,0(r16)
    de00:	183ff926 	beq	r3,zero,dde8 <__alt_mem_onchip_memory+0xf780dde8>
    de04:	88c00015 	stw	r3,0(r17)
    de08:	003ff706 	br	dde8 <__alt_mem_onchip_memory+0xf780dde8>

0000de0c <_calloc_r>:
    de0c:	298b383a 	mul	r5,r5,r6
    de10:	defffe04 	addi	sp,sp,-8
    de14:	dfc00115 	stw	ra,4(sp)
    de18:	dc000015 	stw	r16,0(sp)
    de1c:	0009fc80 	call	9fc8 <_malloc_r>
    de20:	10002926 	beq	r2,zero,dec8 <_calloc_r+0xbc>
    de24:	11bfff17 	ldw	r6,-4(r2)
    de28:	1021883a 	mov	r16,r2
    de2c:	00bfff04 	movi	r2,-4
    de30:	308c703a 	and	r6,r6,r2
    de34:	00c00904 	movi	r3,36
    de38:	308d883a 	add	r6,r6,r2
    de3c:	19801636 	bltu	r3,r6,de98 <_calloc_r+0x8c>
    de40:	008004c4 	movi	r2,19
    de44:	11800b2e 	bgeu	r2,r6,de74 <_calloc_r+0x68>
    de48:	80000015 	stw	zero,0(r16)
    de4c:	80000115 	stw	zero,4(r16)
    de50:	008006c4 	movi	r2,27
    de54:	11801a2e 	bgeu	r2,r6,dec0 <_calloc_r+0xb4>
    de58:	80000215 	stw	zero,8(r16)
    de5c:	80000315 	stw	zero,12(r16)
    de60:	30c0151e 	bne	r6,r3,deb8 <_calloc_r+0xac>
    de64:	80000415 	stw	zero,16(r16)
    de68:	80800604 	addi	r2,r16,24
    de6c:	80000515 	stw	zero,20(r16)
    de70:	00000106 	br	de78 <_calloc_r+0x6c>
    de74:	8005883a 	mov	r2,r16
    de78:	10000015 	stw	zero,0(r2)
    de7c:	10000115 	stw	zero,4(r2)
    de80:	10000215 	stw	zero,8(r2)
    de84:	8005883a 	mov	r2,r16
    de88:	dfc00117 	ldw	ra,4(sp)
    de8c:	dc000017 	ldw	r16,0(sp)
    de90:	dec00204 	addi	sp,sp,8
    de94:	f800283a 	ret
    de98:	000b883a 	mov	r5,zero
    de9c:	8009883a 	mov	r4,r16
    dea0:	000ab5c0 	call	ab5c <memset>
    dea4:	8005883a 	mov	r2,r16
    dea8:	dfc00117 	ldw	ra,4(sp)
    deac:	dc000017 	ldw	r16,0(sp)
    deb0:	dec00204 	addi	sp,sp,8
    deb4:	f800283a 	ret
    deb8:	80800404 	addi	r2,r16,16
    debc:	003fee06 	br	de78 <__alt_mem_onchip_memory+0xf780de78>
    dec0:	80800204 	addi	r2,r16,8
    dec4:	003fec06 	br	de78 <__alt_mem_onchip_memory+0xf780de78>
    dec8:	0005883a 	mov	r2,zero
    decc:	003fee06 	br	de88 <__alt_mem_onchip_memory+0xf780de88>

0000ded0 <_fclose_r>:
    ded0:	28003926 	beq	r5,zero,dfb8 <_fclose_r+0xe8>
    ded4:	defffc04 	addi	sp,sp,-16
    ded8:	dc400115 	stw	r17,4(sp)
    dedc:	dc000015 	stw	r16,0(sp)
    dee0:	dfc00315 	stw	ra,12(sp)
    dee4:	dc800215 	stw	r18,8(sp)
    dee8:	2023883a 	mov	r17,r4
    deec:	2821883a 	mov	r16,r5
    def0:	20000226 	beq	r4,zero,defc <_fclose_r+0x2c>
    def4:	20800e17 	ldw	r2,56(r4)
    def8:	10002726 	beq	r2,zero,df98 <_fclose_r+0xc8>
    defc:	8080030f 	ldh	r2,12(r16)
    df00:	1000071e 	bne	r2,zero,df20 <_fclose_r+0x50>
    df04:	0005883a 	mov	r2,zero
    df08:	dfc00317 	ldw	ra,12(sp)
    df0c:	dc800217 	ldw	r18,8(sp)
    df10:	dc400117 	ldw	r17,4(sp)
    df14:	dc000017 	ldw	r16,0(sp)
    df18:	dec00404 	addi	sp,sp,16
    df1c:	f800283a 	ret
    df20:	800b883a 	mov	r5,r16
    df24:	8809883a 	mov	r4,r17
    df28:	0008c140 	call	8c14 <__sflush_r>
    df2c:	1025883a 	mov	r18,r2
    df30:	80800b17 	ldw	r2,44(r16)
    df34:	10000426 	beq	r2,zero,df48 <_fclose_r+0x78>
    df38:	81400717 	ldw	r5,28(r16)
    df3c:	8809883a 	mov	r4,r17
    df40:	103ee83a 	callr	r2
    df44:	10001616 	blt	r2,zero,dfa0 <_fclose_r+0xd0>
    df48:	8080030b 	ldhu	r2,12(r16)
    df4c:	1080200c 	andi	r2,r2,128
    df50:	1000151e 	bne	r2,zero,dfa8 <_fclose_r+0xd8>
    df54:	81400c17 	ldw	r5,48(r16)
    df58:	28000526 	beq	r5,zero,df70 <_fclose_r+0xa0>
    df5c:	80801004 	addi	r2,r16,64
    df60:	28800226 	beq	r5,r2,df6c <_fclose_r+0x9c>
    df64:	8809883a 	mov	r4,r17
    df68:	00093800 	call	9380 <_free_r>
    df6c:	80000c15 	stw	zero,48(r16)
    df70:	81401117 	ldw	r5,68(r16)
    df74:	28000326 	beq	r5,zero,df84 <_fclose_r+0xb4>
    df78:	8809883a 	mov	r4,r17
    df7c:	00093800 	call	9380 <_free_r>
    df80:	80001115 	stw	zero,68(r16)
    df84:	000921c0 	call	921c <__sfp_lock_acquire>
    df88:	8000030d 	sth	zero,12(r16)
    df8c:	00092200 	call	9220 <__sfp_lock_release>
    df90:	9005883a 	mov	r2,r18
    df94:	003fdc06 	br	df08 <__alt_mem_onchip_memory+0xf780df08>
    df98:	000920c0 	call	920c <__sinit>
    df9c:	003fd706 	br	defc <__alt_mem_onchip_memory+0xf780defc>
    dfa0:	04bfffc4 	movi	r18,-1
    dfa4:	003fe806 	br	df48 <__alt_mem_onchip_memory+0xf780df48>
    dfa8:	81400417 	ldw	r5,16(r16)
    dfac:	8809883a 	mov	r4,r17
    dfb0:	00093800 	call	9380 <_free_r>
    dfb4:	003fe706 	br	df54 <__alt_mem_onchip_memory+0xf780df54>
    dfb8:	0005883a 	mov	r2,zero
    dfbc:	f800283a 	ret

0000dfc0 <fclose>:
    dfc0:	00800074 	movhi	r2,1
    dfc4:	108fc804 	addi	r2,r2,16160
    dfc8:	200b883a 	mov	r5,r4
    dfcc:	11000017 	ldw	r4,0(r2)
    dfd0:	000ded01 	jmpi	ded0 <_fclose_r>

0000dfd4 <__fputwc>:
    dfd4:	defff804 	addi	sp,sp,-32
    dfd8:	dcc00415 	stw	r19,16(sp)
    dfdc:	dc800315 	stw	r18,12(sp)
    dfe0:	dc000115 	stw	r16,4(sp)
    dfe4:	dfc00715 	stw	ra,28(sp)
    dfe8:	dd400615 	stw	r21,24(sp)
    dfec:	dd000515 	stw	r20,20(sp)
    dff0:	dc400215 	stw	r17,8(sp)
    dff4:	2027883a 	mov	r19,r4
    dff8:	2825883a 	mov	r18,r5
    dffc:	3021883a 	mov	r16,r6
    e000:	0009db80 	call	9db8 <__locale_mb_cur_max>
    e004:	00c00044 	movi	r3,1
    e008:	10c03e26 	beq	r2,r3,e104 <__fputwc+0x130>
    e00c:	81c01704 	addi	r7,r16,92
    e010:	900d883a 	mov	r6,r18
    e014:	d80b883a 	mov	r5,sp
    e018:	9809883a 	mov	r4,r19
    e01c:	000e34c0 	call	e34c <_wcrtomb_r>
    e020:	1029883a 	mov	r20,r2
    e024:	00bfffc4 	movi	r2,-1
    e028:	a0802026 	beq	r20,r2,e0ac <__fputwc+0xd8>
    e02c:	d9400003 	ldbu	r5,0(sp)
    e030:	a0001c26 	beq	r20,zero,e0a4 <__fputwc+0xd0>
    e034:	0023883a 	mov	r17,zero
    e038:	05400284 	movi	r21,10
    e03c:	00000906 	br	e064 <__fputwc+0x90>
    e040:	80800017 	ldw	r2,0(r16)
    e044:	11400005 	stb	r5,0(r2)
    e048:	80c00017 	ldw	r3,0(r16)
    e04c:	18c00044 	addi	r3,r3,1
    e050:	80c00015 	stw	r3,0(r16)
    e054:	8c400044 	addi	r17,r17,1
    e058:	dc45883a 	add	r2,sp,r17
    e05c:	8d00112e 	bgeu	r17,r20,e0a4 <__fputwc+0xd0>
    e060:	11400003 	ldbu	r5,0(r2)
    e064:	80c00217 	ldw	r3,8(r16)
    e068:	18ffffc4 	addi	r3,r3,-1
    e06c:	80c00215 	stw	r3,8(r16)
    e070:	183ff30e 	bge	r3,zero,e040 <__alt_mem_onchip_memory+0xf780e040>
    e074:	80800617 	ldw	r2,24(r16)
    e078:	18801916 	blt	r3,r2,e0e0 <__fputwc+0x10c>
    e07c:	80800017 	ldw	r2,0(r16)
    e080:	11400005 	stb	r5,0(r2)
    e084:	80800017 	ldw	r2,0(r16)
    e088:	10c00003 	ldbu	r3,0(r2)
    e08c:	10800044 	addi	r2,r2,1
    e090:	1d402326 	beq	r3,r21,e120 <__fputwc+0x14c>
    e094:	80800015 	stw	r2,0(r16)
    e098:	8c400044 	addi	r17,r17,1
    e09c:	dc45883a 	add	r2,sp,r17
    e0a0:	8d3fef36 	bltu	r17,r20,e060 <__alt_mem_onchip_memory+0xf780e060>
    e0a4:	9005883a 	mov	r2,r18
    e0a8:	00000406 	br	e0bc <__fputwc+0xe8>
    e0ac:	80c0030b 	ldhu	r3,12(r16)
    e0b0:	a005883a 	mov	r2,r20
    e0b4:	18c01014 	ori	r3,r3,64
    e0b8:	80c0030d 	sth	r3,12(r16)
    e0bc:	dfc00717 	ldw	ra,28(sp)
    e0c0:	dd400617 	ldw	r21,24(sp)
    e0c4:	dd000517 	ldw	r20,20(sp)
    e0c8:	dcc00417 	ldw	r19,16(sp)
    e0cc:	dc800317 	ldw	r18,12(sp)
    e0d0:	dc400217 	ldw	r17,8(sp)
    e0d4:	dc000117 	ldw	r16,4(sp)
    e0d8:	dec00804 	addi	sp,sp,32
    e0dc:	f800283a 	ret
    e0e0:	800d883a 	mov	r6,r16
    e0e4:	29403fcc 	andi	r5,r5,255
    e0e8:	9809883a 	mov	r4,r19
    e0ec:	000dc000 	call	dc00 <__swbuf_r>
    e0f0:	10bfffe0 	cmpeqi	r2,r2,-1
    e0f4:	10803fcc 	andi	r2,r2,255
    e0f8:	103fd626 	beq	r2,zero,e054 <__alt_mem_onchip_memory+0xf780e054>
    e0fc:	00bfffc4 	movi	r2,-1
    e100:	003fee06 	br	e0bc <__alt_mem_onchip_memory+0xf780e0bc>
    e104:	90ffffc4 	addi	r3,r18,-1
    e108:	01003f84 	movi	r4,254
    e10c:	20ffbf36 	bltu	r4,r3,e00c <__alt_mem_onchip_memory+0xf780e00c>
    e110:	900b883a 	mov	r5,r18
    e114:	dc800005 	stb	r18,0(sp)
    e118:	1029883a 	mov	r20,r2
    e11c:	003fc506 	br	e034 <__alt_mem_onchip_memory+0xf780e034>
    e120:	800d883a 	mov	r6,r16
    e124:	a80b883a 	mov	r5,r21
    e128:	9809883a 	mov	r4,r19
    e12c:	000dc000 	call	dc00 <__swbuf_r>
    e130:	10bfffe0 	cmpeqi	r2,r2,-1
    e134:	003fef06 	br	e0f4 <__alt_mem_onchip_memory+0xf780e0f4>

0000e138 <_fputwc_r>:
    e138:	3080030b 	ldhu	r2,12(r6)
    e13c:	10c8000c 	andi	r3,r2,8192
    e140:	1800051e 	bne	r3,zero,e158 <_fputwc_r+0x20>
    e144:	30c01917 	ldw	r3,100(r6)
    e148:	10880014 	ori	r2,r2,8192
    e14c:	3080030d 	sth	r2,12(r6)
    e150:	18880014 	ori	r2,r3,8192
    e154:	30801915 	stw	r2,100(r6)
    e158:	000dfd41 	jmpi	dfd4 <__fputwc>

0000e15c <fputwc>:
    e15c:	00800074 	movhi	r2,1
    e160:	defffc04 	addi	sp,sp,-16
    e164:	108fc804 	addi	r2,r2,16160
    e168:	dc000115 	stw	r16,4(sp)
    e16c:	14000017 	ldw	r16,0(r2)
    e170:	dc400215 	stw	r17,8(sp)
    e174:	dfc00315 	stw	ra,12(sp)
    e178:	2023883a 	mov	r17,r4
    e17c:	80000226 	beq	r16,zero,e188 <fputwc+0x2c>
    e180:	80800e17 	ldw	r2,56(r16)
    e184:	10001026 	beq	r2,zero,e1c8 <fputwc+0x6c>
    e188:	2880030b 	ldhu	r2,12(r5)
    e18c:	10c8000c 	andi	r3,r2,8192
    e190:	1800051e 	bne	r3,zero,e1a8 <fputwc+0x4c>
    e194:	28c01917 	ldw	r3,100(r5)
    e198:	10880014 	ori	r2,r2,8192
    e19c:	2880030d 	sth	r2,12(r5)
    e1a0:	18880014 	ori	r2,r3,8192
    e1a4:	28801915 	stw	r2,100(r5)
    e1a8:	280d883a 	mov	r6,r5
    e1ac:	8009883a 	mov	r4,r16
    e1b0:	880b883a 	mov	r5,r17
    e1b4:	dfc00317 	ldw	ra,12(sp)
    e1b8:	dc400217 	ldw	r17,8(sp)
    e1bc:	dc000117 	ldw	r16,4(sp)
    e1c0:	dec00404 	addi	sp,sp,16
    e1c4:	000dfd41 	jmpi	dfd4 <__fputwc>
    e1c8:	8009883a 	mov	r4,r16
    e1cc:	d9400015 	stw	r5,0(sp)
    e1d0:	000920c0 	call	920c <__sinit>
    e1d4:	d9400017 	ldw	r5,0(sp)
    e1d8:	003feb06 	br	e188 <__alt_mem_onchip_memory+0xf780e188>

0000e1dc <_fstat_r>:
    e1dc:	defffd04 	addi	sp,sp,-12
    e1e0:	2805883a 	mov	r2,r5
    e1e4:	dc000015 	stw	r16,0(sp)
    e1e8:	04000074 	movhi	r16,1
    e1ec:	dc400115 	stw	r17,4(sp)
    e1f0:	84169e04 	addi	r16,r16,23160
    e1f4:	2023883a 	mov	r17,r4
    e1f8:	300b883a 	mov	r5,r6
    e1fc:	1009883a 	mov	r4,r2
    e200:	dfc00215 	stw	ra,8(sp)
    e204:	80000015 	stw	zero,0(r16)
    e208:	000f2e80 	call	f2e8 <fstat>
    e20c:	00ffffc4 	movi	r3,-1
    e210:	10c00526 	beq	r2,r3,e228 <_fstat_r+0x4c>
    e214:	dfc00217 	ldw	ra,8(sp)
    e218:	dc400117 	ldw	r17,4(sp)
    e21c:	dc000017 	ldw	r16,0(sp)
    e220:	dec00304 	addi	sp,sp,12
    e224:	f800283a 	ret
    e228:	80c00017 	ldw	r3,0(r16)
    e22c:	183ff926 	beq	r3,zero,e214 <__alt_mem_onchip_memory+0xf780e214>
    e230:	88c00015 	stw	r3,0(r17)
    e234:	003ff706 	br	e214 <__alt_mem_onchip_memory+0xf780e214>

0000e238 <_isatty_r>:
    e238:	defffd04 	addi	sp,sp,-12
    e23c:	dc000015 	stw	r16,0(sp)
    e240:	04000074 	movhi	r16,1
    e244:	dc400115 	stw	r17,4(sp)
    e248:	84169e04 	addi	r16,r16,23160
    e24c:	2023883a 	mov	r17,r4
    e250:	2809883a 	mov	r4,r5
    e254:	dfc00215 	stw	ra,8(sp)
    e258:	80000015 	stw	zero,0(r16)
    e25c:	000f5c80 	call	f5c8 <isatty>
    e260:	00ffffc4 	movi	r3,-1
    e264:	10c00526 	beq	r2,r3,e27c <_isatty_r+0x44>
    e268:	dfc00217 	ldw	ra,8(sp)
    e26c:	dc400117 	ldw	r17,4(sp)
    e270:	dc000017 	ldw	r16,0(sp)
    e274:	dec00304 	addi	sp,sp,12
    e278:	f800283a 	ret
    e27c:	80c00017 	ldw	r3,0(r16)
    e280:	183ff926 	beq	r3,zero,e268 <__alt_mem_onchip_memory+0xf780e268>
    e284:	88c00015 	stw	r3,0(r17)
    e288:	003ff706 	br	e268 <__alt_mem_onchip_memory+0xf780e268>

0000e28c <_lseek_r>:
    e28c:	defffd04 	addi	sp,sp,-12
    e290:	2805883a 	mov	r2,r5
    e294:	dc000015 	stw	r16,0(sp)
    e298:	04000074 	movhi	r16,1
    e29c:	dc400115 	stw	r17,4(sp)
    e2a0:	300b883a 	mov	r5,r6
    e2a4:	84169e04 	addi	r16,r16,23160
    e2a8:	2023883a 	mov	r17,r4
    e2ac:	380d883a 	mov	r6,r7
    e2b0:	1009883a 	mov	r4,r2
    e2b4:	dfc00215 	stw	ra,8(sp)
    e2b8:	80000015 	stw	zero,0(r16)
    e2bc:	000f7940 	call	f794 <lseek>
    e2c0:	00ffffc4 	movi	r3,-1
    e2c4:	10c00526 	beq	r2,r3,e2dc <_lseek_r+0x50>
    e2c8:	dfc00217 	ldw	ra,8(sp)
    e2cc:	dc400117 	ldw	r17,4(sp)
    e2d0:	dc000017 	ldw	r16,0(sp)
    e2d4:	dec00304 	addi	sp,sp,12
    e2d8:	f800283a 	ret
    e2dc:	80c00017 	ldw	r3,0(r16)
    e2e0:	183ff926 	beq	r3,zero,e2c8 <__alt_mem_onchip_memory+0xf780e2c8>
    e2e4:	88c00015 	stw	r3,0(r17)
    e2e8:	003ff706 	br	e2c8 <__alt_mem_onchip_memory+0xf780e2c8>

0000e2ec <_read_r>:
    e2ec:	defffd04 	addi	sp,sp,-12
    e2f0:	2805883a 	mov	r2,r5
    e2f4:	dc000015 	stw	r16,0(sp)
    e2f8:	04000074 	movhi	r16,1
    e2fc:	dc400115 	stw	r17,4(sp)
    e300:	300b883a 	mov	r5,r6
    e304:	84169e04 	addi	r16,r16,23160
    e308:	2023883a 	mov	r17,r4
    e30c:	380d883a 	mov	r6,r7
    e310:	1009883a 	mov	r4,r2
    e314:	dfc00215 	stw	ra,8(sp)
    e318:	80000015 	stw	zero,0(r16)
    e31c:	000f9680 	call	f968 <read>
    e320:	00ffffc4 	movi	r3,-1
    e324:	10c00526 	beq	r2,r3,e33c <_read_r+0x50>
    e328:	dfc00217 	ldw	ra,8(sp)
    e32c:	dc400117 	ldw	r17,4(sp)
    e330:	dc000017 	ldw	r16,0(sp)
    e334:	dec00304 	addi	sp,sp,12
    e338:	f800283a 	ret
    e33c:	80c00017 	ldw	r3,0(r16)
    e340:	183ff926 	beq	r3,zero,e328 <__alt_mem_onchip_memory+0xf780e328>
    e344:	88c00015 	stw	r3,0(r17)
    e348:	003ff706 	br	e328 <__alt_mem_onchip_memory+0xf780e328>

0000e34c <_wcrtomb_r>:
    e34c:	defff604 	addi	sp,sp,-40
    e350:	00800074 	movhi	r2,1
    e354:	dc800815 	stw	r18,32(sp)
    e358:	dc400715 	stw	r17,28(sp)
    e35c:	dc000615 	stw	r16,24(sp)
    e360:	108fcc04 	addi	r2,r2,16176
    e364:	dfc00915 	stw	ra,36(sp)
    e368:	2021883a 	mov	r16,r4
    e36c:	3823883a 	mov	r17,r7
    e370:	14800017 	ldw	r18,0(r2)
    e374:	28001426 	beq	r5,zero,e3c8 <_wcrtomb_r+0x7c>
    e378:	d9400415 	stw	r5,16(sp)
    e37c:	d9800515 	stw	r6,20(sp)
    e380:	0009dac0 	call	9dac <__locale_charset>
    e384:	d9800517 	ldw	r6,20(sp)
    e388:	d9400417 	ldw	r5,16(sp)
    e38c:	100f883a 	mov	r7,r2
    e390:	dc400015 	stw	r17,0(sp)
    e394:	8009883a 	mov	r4,r16
    e398:	903ee83a 	callr	r18
    e39c:	00ffffc4 	movi	r3,-1
    e3a0:	10c0031e 	bne	r2,r3,e3b0 <_wcrtomb_r+0x64>
    e3a4:	88000015 	stw	zero,0(r17)
    e3a8:	00c02284 	movi	r3,138
    e3ac:	80c00015 	stw	r3,0(r16)
    e3b0:	dfc00917 	ldw	ra,36(sp)
    e3b4:	dc800817 	ldw	r18,32(sp)
    e3b8:	dc400717 	ldw	r17,28(sp)
    e3bc:	dc000617 	ldw	r16,24(sp)
    e3c0:	dec00a04 	addi	sp,sp,40
    e3c4:	f800283a 	ret
    e3c8:	0009dac0 	call	9dac <__locale_charset>
    e3cc:	100f883a 	mov	r7,r2
    e3d0:	dc400015 	stw	r17,0(sp)
    e3d4:	000d883a 	mov	r6,zero
    e3d8:	d9400104 	addi	r5,sp,4
    e3dc:	8009883a 	mov	r4,r16
    e3e0:	903ee83a 	callr	r18
    e3e4:	003fed06 	br	e39c <__alt_mem_onchip_memory+0xf780e39c>

0000e3e8 <wcrtomb>:
    e3e8:	defff604 	addi	sp,sp,-40
    e3ec:	00800074 	movhi	r2,1
    e3f0:	dc800615 	stw	r18,24(sp)
    e3f4:	dc400515 	stw	r17,20(sp)
    e3f8:	108fc804 	addi	r2,r2,16160
    e3fc:	dfc00915 	stw	ra,36(sp)
    e400:	dd000815 	stw	r20,32(sp)
    e404:	dcc00715 	stw	r19,28(sp)
    e408:	dc000415 	stw	r16,16(sp)
    e40c:	3025883a 	mov	r18,r6
    e410:	14400017 	ldw	r17,0(r2)
    e414:	20001926 	beq	r4,zero,e47c <wcrtomb+0x94>
    e418:	00800074 	movhi	r2,1
    e41c:	108fcc04 	addi	r2,r2,16176
    e420:	15000017 	ldw	r20,0(r2)
    e424:	2021883a 	mov	r16,r4
    e428:	2827883a 	mov	r19,r5
    e42c:	0009dac0 	call	9dac <__locale_charset>
    e430:	100f883a 	mov	r7,r2
    e434:	dc800015 	stw	r18,0(sp)
    e438:	980d883a 	mov	r6,r19
    e43c:	800b883a 	mov	r5,r16
    e440:	8809883a 	mov	r4,r17
    e444:	a03ee83a 	callr	r20
    e448:	00ffffc4 	movi	r3,-1
    e44c:	10c0031e 	bne	r2,r3,e45c <wcrtomb+0x74>
    e450:	90000015 	stw	zero,0(r18)
    e454:	00c02284 	movi	r3,138
    e458:	88c00015 	stw	r3,0(r17)
    e45c:	dfc00917 	ldw	ra,36(sp)
    e460:	dd000817 	ldw	r20,32(sp)
    e464:	dcc00717 	ldw	r19,28(sp)
    e468:	dc800617 	ldw	r18,24(sp)
    e46c:	dc400517 	ldw	r17,20(sp)
    e470:	dc000417 	ldw	r16,16(sp)
    e474:	dec00a04 	addi	sp,sp,40
    e478:	f800283a 	ret
    e47c:	00800074 	movhi	r2,1
    e480:	108fcc04 	addi	r2,r2,16176
    e484:	14000017 	ldw	r16,0(r2)
    e488:	0009dac0 	call	9dac <__locale_charset>
    e48c:	100f883a 	mov	r7,r2
    e490:	dc800015 	stw	r18,0(sp)
    e494:	000d883a 	mov	r6,zero
    e498:	d9400104 	addi	r5,sp,4
    e49c:	8809883a 	mov	r4,r17
    e4a0:	803ee83a 	callr	r16
    e4a4:	003fe806 	br	e448 <__alt_mem_onchip_memory+0xf780e448>

0000e4a8 <__ascii_wctomb>:
    e4a8:	28000526 	beq	r5,zero,e4c0 <__ascii_wctomb+0x18>
    e4ac:	00803fc4 	movi	r2,255
    e4b0:	11800536 	bltu	r2,r6,e4c8 <__ascii_wctomb+0x20>
    e4b4:	29800005 	stb	r6,0(r5)
    e4b8:	00800044 	movi	r2,1
    e4bc:	f800283a 	ret
    e4c0:	0005883a 	mov	r2,zero
    e4c4:	f800283a 	ret
    e4c8:	00802284 	movi	r2,138
    e4cc:	20800015 	stw	r2,0(r4)
    e4d0:	00bfffc4 	movi	r2,-1
    e4d4:	f800283a 	ret

0000e4d8 <_wctomb_r>:
    e4d8:	00800074 	movhi	r2,1
    e4dc:	defff904 	addi	sp,sp,-28
    e4e0:	108fcc04 	addi	r2,r2,16176
    e4e4:	dfc00615 	stw	ra,24(sp)
    e4e8:	dc400515 	stw	r17,20(sp)
    e4ec:	dc000415 	stw	r16,16(sp)
    e4f0:	3823883a 	mov	r17,r7
    e4f4:	14000017 	ldw	r16,0(r2)
    e4f8:	d9000115 	stw	r4,4(sp)
    e4fc:	d9400215 	stw	r5,8(sp)
    e500:	d9800315 	stw	r6,12(sp)
    e504:	0009dac0 	call	9dac <__locale_charset>
    e508:	d9800317 	ldw	r6,12(sp)
    e50c:	d9400217 	ldw	r5,8(sp)
    e510:	d9000117 	ldw	r4,4(sp)
    e514:	100f883a 	mov	r7,r2
    e518:	dc400015 	stw	r17,0(sp)
    e51c:	803ee83a 	callr	r16
    e520:	dfc00617 	ldw	ra,24(sp)
    e524:	dc400517 	ldw	r17,20(sp)
    e528:	dc000417 	ldw	r16,16(sp)
    e52c:	dec00704 	addi	sp,sp,28
    e530:	f800283a 	ret

0000e534 <__muldi3>:
    e534:	223fffcc 	andi	r8,r4,65535
    e538:	2006d43a 	srli	r3,r4,16
    e53c:	32bfffcc 	andi	r10,r6,65535
    e540:	3012d43a 	srli	r9,r6,16
    e544:	4297383a 	mul	r11,r8,r10
    e548:	1a95383a 	mul	r10,r3,r10
    e54c:	4251383a 	mul	r8,r8,r9
    e550:	5804d43a 	srli	r2,r11,16
    e554:	4291883a 	add	r8,r8,r10
    e558:	1205883a 	add	r2,r2,r8
    e55c:	1a51383a 	mul	r8,r3,r9
    e560:	1280022e 	bgeu	r2,r10,e56c <__muldi3+0x38>
    e564:	00c00074 	movhi	r3,1
    e568:	40d1883a 	add	r8,r8,r3
    e56c:	1006d43a 	srli	r3,r2,16
    e570:	21cf383a 	mul	r7,r4,r7
    e574:	314b383a 	mul	r5,r6,r5
    e578:	1004943a 	slli	r2,r2,16
    e57c:	1a11883a 	add	r8,r3,r8
    e580:	5affffcc 	andi	r11,r11,65535
    e584:	3947883a 	add	r3,r7,r5
    e588:	12c5883a 	add	r2,r2,r11
    e58c:	1a07883a 	add	r3,r3,r8
    e590:	f800283a 	ret

0000e594 <__udivdi3>:
    e594:	defff504 	addi	sp,sp,-44
    e598:	dcc00415 	stw	r19,16(sp)
    e59c:	dc000115 	stw	r16,4(sp)
    e5a0:	dfc00a15 	stw	ra,40(sp)
    e5a4:	df000915 	stw	fp,36(sp)
    e5a8:	ddc00815 	stw	r23,32(sp)
    e5ac:	dd800715 	stw	r22,28(sp)
    e5b0:	dd400615 	stw	r21,24(sp)
    e5b4:	dd000515 	stw	r20,20(sp)
    e5b8:	dc800315 	stw	r18,12(sp)
    e5bc:	dc400215 	stw	r17,8(sp)
    e5c0:	2027883a 	mov	r19,r4
    e5c4:	2821883a 	mov	r16,r5
    e5c8:	3800411e 	bne	r7,zero,e6d0 <__udivdi3+0x13c>
    e5cc:	3023883a 	mov	r17,r6
    e5d0:	2025883a 	mov	r18,r4
    e5d4:	2980522e 	bgeu	r5,r6,e720 <__udivdi3+0x18c>
    e5d8:	00bfffd4 	movui	r2,65535
    e5dc:	282d883a 	mov	r22,r5
    e5e0:	1180a836 	bltu	r2,r6,e884 <__udivdi3+0x2f0>
    e5e4:	00803fc4 	movi	r2,255
    e5e8:	1185803a 	cmpltu	r2,r2,r6
    e5ec:	100490fa 	slli	r2,r2,3
    e5f0:	3086d83a 	srl	r3,r6,r2
    e5f4:	01000074 	movhi	r4,1
    e5f8:	21081844 	addi	r4,r4,8289
    e5fc:	20c7883a 	add	r3,r4,r3
    e600:	18c00003 	ldbu	r3,0(r3)
    e604:	1885883a 	add	r2,r3,r2
    e608:	00c00804 	movi	r3,32
    e60c:	1887c83a 	sub	r3,r3,r2
    e610:	18000526 	beq	r3,zero,e628 <__udivdi3+0x94>
    e614:	80e0983a 	sll	r16,r16,r3
    e618:	9884d83a 	srl	r2,r19,r2
    e61c:	30e2983a 	sll	r17,r6,r3
    e620:	98e4983a 	sll	r18,r19,r3
    e624:	142cb03a 	or	r22,r2,r16
    e628:	882ad43a 	srli	r21,r17,16
    e62c:	b009883a 	mov	r4,r22
    e630:	8d3fffcc 	andi	r20,r17,65535
    e634:	a80b883a 	mov	r5,r21
    e638:	0004bdc0 	call	4bdc <__umodsi3>
    e63c:	b009883a 	mov	r4,r22
    e640:	a80b883a 	mov	r5,r21
    e644:	1027883a 	mov	r19,r2
    e648:	0004b780 	call	4b78 <__udivsi3>
    e64c:	102d883a 	mov	r22,r2
    e650:	9826943a 	slli	r19,r19,16
    e654:	9004d43a 	srli	r2,r18,16
    e658:	a5a1383a 	mul	r16,r20,r22
    e65c:	14c4b03a 	or	r2,r2,r19
    e660:	1400052e 	bgeu	r2,r16,e678 <__udivdi3+0xe4>
    e664:	1445883a 	add	r2,r2,r17
    e668:	b0ffffc4 	addi	r3,r22,-1
    e66c:	14400136 	bltu	r2,r17,e674 <__udivdi3+0xe0>
    e670:	14012336 	bltu	r2,r16,eb00 <__udivdi3+0x56c>
    e674:	182d883a 	mov	r22,r3
    e678:	1421c83a 	sub	r16,r2,r16
    e67c:	a80b883a 	mov	r5,r21
    e680:	8009883a 	mov	r4,r16
    e684:	0004bdc0 	call	4bdc <__umodsi3>
    e688:	1027883a 	mov	r19,r2
    e68c:	a80b883a 	mov	r5,r21
    e690:	8009883a 	mov	r4,r16
    e694:	0004b780 	call	4b78 <__udivsi3>
    e698:	9826943a 	slli	r19,r19,16
    e69c:	a0a9383a 	mul	r20,r20,r2
    e6a0:	94bfffcc 	andi	r18,r18,65535
    e6a4:	94e4b03a 	or	r18,r18,r19
    e6a8:	9500052e 	bgeu	r18,r20,e6c0 <__udivdi3+0x12c>
    e6ac:	8ca5883a 	add	r18,r17,r18
    e6b0:	10ffffc4 	addi	r3,r2,-1
    e6b4:	9440f136 	bltu	r18,r17,ea7c <__udivdi3+0x4e8>
    e6b8:	9500f02e 	bgeu	r18,r20,ea7c <__udivdi3+0x4e8>
    e6bc:	10bfff84 	addi	r2,r2,-2
    e6c0:	b00c943a 	slli	r6,r22,16
    e6c4:	0007883a 	mov	r3,zero
    e6c8:	3084b03a 	or	r2,r6,r2
    e6cc:	00005906 	br	e834 <__udivdi3+0x2a0>
    e6d0:	29c05636 	bltu	r5,r7,e82c <__udivdi3+0x298>
    e6d4:	00bfffd4 	movui	r2,65535
    e6d8:	11c0622e 	bgeu	r2,r7,e864 <__udivdi3+0x2d0>
    e6dc:	00804034 	movhi	r2,256
    e6e0:	10bfffc4 	addi	r2,r2,-1
    e6e4:	11c0ee36 	bltu	r2,r7,eaa0 <__udivdi3+0x50c>
    e6e8:	00800404 	movi	r2,16
    e6ec:	3886d83a 	srl	r3,r7,r2
    e6f0:	01000074 	movhi	r4,1
    e6f4:	21081844 	addi	r4,r4,8289
    e6f8:	20c7883a 	add	r3,r4,r3
    e6fc:	18c00003 	ldbu	r3,0(r3)
    e700:	05400804 	movi	r21,32
    e704:	1885883a 	add	r2,r3,r2
    e708:	a8abc83a 	sub	r21,r21,r2
    e70c:	a800621e 	bne	r21,zero,e898 <__udivdi3+0x304>
    e710:	3c00e936 	bltu	r7,r16,eab8 <__udivdi3+0x524>
    e714:	9985403a 	cmpgeu	r2,r19,r6
    e718:	0007883a 	mov	r3,zero
    e71c:	00004506 	br	e834 <__udivdi3+0x2a0>
    e720:	3000041e 	bne	r6,zero,e734 <__udivdi3+0x1a0>
    e724:	000b883a 	mov	r5,zero
    e728:	01000044 	movi	r4,1
    e72c:	0004b780 	call	4b78 <__udivsi3>
    e730:	1023883a 	mov	r17,r2
    e734:	00bfffd4 	movui	r2,65535
    e738:	14404e2e 	bgeu	r2,r17,e874 <__udivdi3+0x2e0>
    e73c:	00804034 	movhi	r2,256
    e740:	10bfffc4 	addi	r2,r2,-1
    e744:	1440d836 	bltu	r2,r17,eaa8 <__udivdi3+0x514>
    e748:	00800404 	movi	r2,16
    e74c:	8886d83a 	srl	r3,r17,r2
    e750:	01000074 	movhi	r4,1
    e754:	21081844 	addi	r4,r4,8289
    e758:	20c7883a 	add	r3,r4,r3
    e75c:	18c00003 	ldbu	r3,0(r3)
    e760:	1885883a 	add	r2,r3,r2
    e764:	00c00804 	movi	r3,32
    e768:	1887c83a 	sub	r3,r3,r2
    e76c:	18008f1e 	bne	r3,zero,e9ac <__udivdi3+0x418>
    e770:	882ad43a 	srli	r21,r17,16
    e774:	8461c83a 	sub	r16,r16,r17
    e778:	8d3fffcc 	andi	r20,r17,65535
    e77c:	00c00044 	movi	r3,1
    e780:	8009883a 	mov	r4,r16
    e784:	a80b883a 	mov	r5,r21
    e788:	d8c00015 	stw	r3,0(sp)
    e78c:	0004bdc0 	call	4bdc <__umodsi3>
    e790:	8009883a 	mov	r4,r16
    e794:	a80b883a 	mov	r5,r21
    e798:	1027883a 	mov	r19,r2
    e79c:	0004b780 	call	4b78 <__udivsi3>
    e7a0:	9826943a 	slli	r19,r19,16
    e7a4:	9008d43a 	srli	r4,r18,16
    e7a8:	1521383a 	mul	r16,r2,r20
    e7ac:	102d883a 	mov	r22,r2
    e7b0:	24c8b03a 	or	r4,r4,r19
    e7b4:	d8c00017 	ldw	r3,0(sp)
    e7b8:	2400052e 	bgeu	r4,r16,e7d0 <__udivdi3+0x23c>
    e7bc:	2449883a 	add	r4,r4,r17
    e7c0:	b0bfffc4 	addi	r2,r22,-1
    e7c4:	24400136 	bltu	r4,r17,e7cc <__udivdi3+0x238>
    e7c8:	2400ca36 	bltu	r4,r16,eaf4 <__udivdi3+0x560>
    e7cc:	102d883a 	mov	r22,r2
    e7d0:	2421c83a 	sub	r16,r4,r16
    e7d4:	a80b883a 	mov	r5,r21
    e7d8:	8009883a 	mov	r4,r16
    e7dc:	d8c00015 	stw	r3,0(sp)
    e7e0:	0004bdc0 	call	4bdc <__umodsi3>
    e7e4:	1027883a 	mov	r19,r2
    e7e8:	a80b883a 	mov	r5,r21
    e7ec:	8009883a 	mov	r4,r16
    e7f0:	0004b780 	call	4b78 <__udivsi3>
    e7f4:	9826943a 	slli	r19,r19,16
    e7f8:	1529383a 	mul	r20,r2,r20
    e7fc:	94bfffcc 	andi	r18,r18,65535
    e800:	94e4b03a 	or	r18,r18,r19
    e804:	d8c00017 	ldw	r3,0(sp)
    e808:	9500052e 	bgeu	r18,r20,e820 <__udivdi3+0x28c>
    e80c:	8ca5883a 	add	r18,r17,r18
    e810:	113fffc4 	addi	r4,r2,-1
    e814:	94409736 	bltu	r18,r17,ea74 <__udivdi3+0x4e0>
    e818:	9500962e 	bgeu	r18,r20,ea74 <__udivdi3+0x4e0>
    e81c:	10bfff84 	addi	r2,r2,-2
    e820:	b00c943a 	slli	r6,r22,16
    e824:	3084b03a 	or	r2,r6,r2
    e828:	00000206 	br	e834 <__udivdi3+0x2a0>
    e82c:	0007883a 	mov	r3,zero
    e830:	0005883a 	mov	r2,zero
    e834:	dfc00a17 	ldw	ra,40(sp)
    e838:	df000917 	ldw	fp,36(sp)
    e83c:	ddc00817 	ldw	r23,32(sp)
    e840:	dd800717 	ldw	r22,28(sp)
    e844:	dd400617 	ldw	r21,24(sp)
    e848:	dd000517 	ldw	r20,20(sp)
    e84c:	dcc00417 	ldw	r19,16(sp)
    e850:	dc800317 	ldw	r18,12(sp)
    e854:	dc400217 	ldw	r17,8(sp)
    e858:	dc000117 	ldw	r16,4(sp)
    e85c:	dec00b04 	addi	sp,sp,44
    e860:	f800283a 	ret
    e864:	00803fc4 	movi	r2,255
    e868:	11c5803a 	cmpltu	r2,r2,r7
    e86c:	100490fa 	slli	r2,r2,3
    e870:	003f9e06 	br	e6ec <__alt_mem_onchip_memory+0xf780e6ec>
    e874:	00803fc4 	movi	r2,255
    e878:	1445803a 	cmpltu	r2,r2,r17
    e87c:	100490fa 	slli	r2,r2,3
    e880:	003fb206 	br	e74c <__alt_mem_onchip_memory+0xf780e74c>
    e884:	00804034 	movhi	r2,256
    e888:	10bfffc4 	addi	r2,r2,-1
    e88c:	11808836 	bltu	r2,r6,eab0 <__udivdi3+0x51c>
    e890:	00800404 	movi	r2,16
    e894:	003f5606 	br	e5f0 <__alt_mem_onchip_memory+0xf780e5f0>
    e898:	30aed83a 	srl	r23,r6,r2
    e89c:	3d4e983a 	sll	r7,r7,r21
    e8a0:	80acd83a 	srl	r22,r16,r2
    e8a4:	9884d83a 	srl	r2,r19,r2
    e8a8:	3deeb03a 	or	r23,r7,r23
    e8ac:	b824d43a 	srli	r18,r23,16
    e8b0:	8560983a 	sll	r16,r16,r21
    e8b4:	b009883a 	mov	r4,r22
    e8b8:	900b883a 	mov	r5,r18
    e8bc:	3568983a 	sll	r20,r6,r21
    e8c0:	1420b03a 	or	r16,r2,r16
    e8c4:	0004bdc0 	call	4bdc <__umodsi3>
    e8c8:	b009883a 	mov	r4,r22
    e8cc:	900b883a 	mov	r5,r18
    e8d0:	1023883a 	mov	r17,r2
    e8d4:	0004b780 	call	4b78 <__udivsi3>
    e8d8:	8808943a 	slli	r4,r17,16
    e8dc:	bf3fffcc 	andi	fp,r23,65535
    e8e0:	8006d43a 	srli	r3,r16,16
    e8e4:	e0a3383a 	mul	r17,fp,r2
    e8e8:	100d883a 	mov	r6,r2
    e8ec:	1906b03a 	or	r3,r3,r4
    e8f0:	1c40042e 	bgeu	r3,r17,e904 <__udivdi3+0x370>
    e8f4:	1dc7883a 	add	r3,r3,r23
    e8f8:	10bfffc4 	addi	r2,r2,-1
    e8fc:	1dc0752e 	bgeu	r3,r23,ead4 <__udivdi3+0x540>
    e900:	100d883a 	mov	r6,r2
    e904:	1c63c83a 	sub	r17,r3,r17
    e908:	900b883a 	mov	r5,r18
    e90c:	8809883a 	mov	r4,r17
    e910:	d9800015 	stw	r6,0(sp)
    e914:	0004bdc0 	call	4bdc <__umodsi3>
    e918:	102d883a 	mov	r22,r2
    e91c:	8809883a 	mov	r4,r17
    e920:	900b883a 	mov	r5,r18
    e924:	0004b780 	call	4b78 <__udivsi3>
    e928:	b02c943a 	slli	r22,r22,16
    e92c:	e089383a 	mul	r4,fp,r2
    e930:	843fffcc 	andi	r16,r16,65535
    e934:	85a0b03a 	or	r16,r16,r22
    e938:	d9800017 	ldw	r6,0(sp)
    e93c:	8100042e 	bgeu	r16,r4,e950 <__udivdi3+0x3bc>
    e940:	85e1883a 	add	r16,r16,r23
    e944:	10ffffc4 	addi	r3,r2,-1
    e948:	85c05e2e 	bgeu	r16,r23,eac4 <__udivdi3+0x530>
    e94c:	1805883a 	mov	r2,r3
    e950:	300c943a 	slli	r6,r6,16
    e954:	a17fffcc 	andi	r5,r20,65535
    e958:	a028d43a 	srli	r20,r20,16
    e95c:	3084b03a 	or	r2,r6,r2
    e960:	10ffffcc 	andi	r3,r2,65535
    e964:	100cd43a 	srli	r6,r2,16
    e968:	194f383a 	mul	r7,r3,r5
    e96c:	1d07383a 	mul	r3,r3,r20
    e970:	314b383a 	mul	r5,r6,r5
    e974:	3810d43a 	srli	r8,r7,16
    e978:	8121c83a 	sub	r16,r16,r4
    e97c:	1947883a 	add	r3,r3,r5
    e980:	40c7883a 	add	r3,r8,r3
    e984:	350d383a 	mul	r6,r6,r20
    e988:	1940022e 	bgeu	r3,r5,e994 <__udivdi3+0x400>
    e98c:	01000074 	movhi	r4,1
    e990:	310d883a 	add	r6,r6,r4
    e994:	1828d43a 	srli	r20,r3,16
    e998:	a18d883a 	add	r6,r20,r6
    e99c:	81803e36 	bltu	r16,r6,ea98 <__udivdi3+0x504>
    e9a0:	81803826 	beq	r16,r6,ea84 <__udivdi3+0x4f0>
    e9a4:	0007883a 	mov	r3,zero
    e9a8:	003fa206 	br	e834 <__alt_mem_onchip_memory+0xf780e834>
    e9ac:	88e2983a 	sll	r17,r17,r3
    e9b0:	80a8d83a 	srl	r20,r16,r2
    e9b4:	80e0983a 	sll	r16,r16,r3
    e9b8:	882ad43a 	srli	r21,r17,16
    e9bc:	9884d83a 	srl	r2,r19,r2
    e9c0:	a009883a 	mov	r4,r20
    e9c4:	a80b883a 	mov	r5,r21
    e9c8:	142eb03a 	or	r23,r2,r16
    e9cc:	98e4983a 	sll	r18,r19,r3
    e9d0:	0004bdc0 	call	4bdc <__umodsi3>
    e9d4:	a009883a 	mov	r4,r20
    e9d8:	a80b883a 	mov	r5,r21
    e9dc:	1021883a 	mov	r16,r2
    e9e0:	0004b780 	call	4b78 <__udivsi3>
    e9e4:	1039883a 	mov	fp,r2
    e9e8:	8d3fffcc 	andi	r20,r17,65535
    e9ec:	8020943a 	slli	r16,r16,16
    e9f0:	b804d43a 	srli	r2,r23,16
    e9f4:	a72d383a 	mul	r22,r20,fp
    e9f8:	1404b03a 	or	r2,r2,r16
    e9fc:	1580062e 	bgeu	r2,r22,ea18 <__udivdi3+0x484>
    ea00:	1445883a 	add	r2,r2,r17
    ea04:	e0ffffc4 	addi	r3,fp,-1
    ea08:	14403836 	bltu	r2,r17,eaec <__udivdi3+0x558>
    ea0c:	1580372e 	bgeu	r2,r22,eaec <__udivdi3+0x558>
    ea10:	e73fff84 	addi	fp,fp,-2
    ea14:	1445883a 	add	r2,r2,r17
    ea18:	15adc83a 	sub	r22,r2,r22
    ea1c:	a80b883a 	mov	r5,r21
    ea20:	b009883a 	mov	r4,r22
    ea24:	0004bdc0 	call	4bdc <__umodsi3>
    ea28:	1027883a 	mov	r19,r2
    ea2c:	b009883a 	mov	r4,r22
    ea30:	a80b883a 	mov	r5,r21
    ea34:	0004b780 	call	4b78 <__udivsi3>
    ea38:	9826943a 	slli	r19,r19,16
    ea3c:	a0a1383a 	mul	r16,r20,r2
    ea40:	b93fffcc 	andi	r4,r23,65535
    ea44:	24c8b03a 	or	r4,r4,r19
    ea48:	2400062e 	bgeu	r4,r16,ea64 <__udivdi3+0x4d0>
    ea4c:	2449883a 	add	r4,r4,r17
    ea50:	10ffffc4 	addi	r3,r2,-1
    ea54:	24402336 	bltu	r4,r17,eae4 <__udivdi3+0x550>
    ea58:	2400222e 	bgeu	r4,r16,eae4 <__udivdi3+0x550>
    ea5c:	10bfff84 	addi	r2,r2,-2
    ea60:	2449883a 	add	r4,r4,r17
    ea64:	e038943a 	slli	fp,fp,16
    ea68:	2421c83a 	sub	r16,r4,r16
    ea6c:	e086b03a 	or	r3,fp,r2
    ea70:	003f4306 	br	e780 <__alt_mem_onchip_memory+0xf780e780>
    ea74:	2005883a 	mov	r2,r4
    ea78:	003f6906 	br	e820 <__alt_mem_onchip_memory+0xf780e820>
    ea7c:	1805883a 	mov	r2,r3
    ea80:	003f0f06 	br	e6c0 <__alt_mem_onchip_memory+0xf780e6c0>
    ea84:	1806943a 	slli	r3,r3,16
    ea88:	9d66983a 	sll	r19,r19,r21
    ea8c:	39ffffcc 	andi	r7,r7,65535
    ea90:	19c7883a 	add	r3,r3,r7
    ea94:	98ffc32e 	bgeu	r19,r3,e9a4 <__alt_mem_onchip_memory+0xf780e9a4>
    ea98:	10bfffc4 	addi	r2,r2,-1
    ea9c:	003fc106 	br	e9a4 <__alt_mem_onchip_memory+0xf780e9a4>
    eaa0:	00800604 	movi	r2,24
    eaa4:	003f1106 	br	e6ec <__alt_mem_onchip_memory+0xf780e6ec>
    eaa8:	00800604 	movi	r2,24
    eaac:	003f2706 	br	e74c <__alt_mem_onchip_memory+0xf780e74c>
    eab0:	00800604 	movi	r2,24
    eab4:	003ece06 	br	e5f0 <__alt_mem_onchip_memory+0xf780e5f0>
    eab8:	0007883a 	mov	r3,zero
    eabc:	00800044 	movi	r2,1
    eac0:	003f5c06 	br	e834 <__alt_mem_onchip_memory+0xf780e834>
    eac4:	813fa12e 	bgeu	r16,r4,e94c <__alt_mem_onchip_memory+0xf780e94c>
    eac8:	10bfff84 	addi	r2,r2,-2
    eacc:	85e1883a 	add	r16,r16,r23
    ead0:	003f9f06 	br	e950 <__alt_mem_onchip_memory+0xf780e950>
    ead4:	1c7f8a2e 	bgeu	r3,r17,e900 <__alt_mem_onchip_memory+0xf780e900>
    ead8:	31bfff84 	addi	r6,r6,-2
    eadc:	1dc7883a 	add	r3,r3,r23
    eae0:	003f8806 	br	e904 <__alt_mem_onchip_memory+0xf780e904>
    eae4:	1805883a 	mov	r2,r3
    eae8:	003fde06 	br	ea64 <__alt_mem_onchip_memory+0xf780ea64>
    eaec:	1839883a 	mov	fp,r3
    eaf0:	003fc906 	br	ea18 <__alt_mem_onchip_memory+0xf780ea18>
    eaf4:	b5bfff84 	addi	r22,r22,-2
    eaf8:	2449883a 	add	r4,r4,r17
    eafc:	003f3406 	br	e7d0 <__alt_mem_onchip_memory+0xf780e7d0>
    eb00:	b5bfff84 	addi	r22,r22,-2
    eb04:	1445883a 	add	r2,r2,r17
    eb08:	003edb06 	br	e678 <__alt_mem_onchip_memory+0xf780e678>

0000eb0c <__umoddi3>:
    eb0c:	defff404 	addi	sp,sp,-48
    eb10:	df000a15 	stw	fp,40(sp)
    eb14:	dc400315 	stw	r17,12(sp)
    eb18:	dc000215 	stw	r16,8(sp)
    eb1c:	dfc00b15 	stw	ra,44(sp)
    eb20:	ddc00915 	stw	r23,36(sp)
    eb24:	dd800815 	stw	r22,32(sp)
    eb28:	dd400715 	stw	r21,28(sp)
    eb2c:	dd000615 	stw	r20,24(sp)
    eb30:	dcc00515 	stw	r19,20(sp)
    eb34:	dc800415 	stw	r18,16(sp)
    eb38:	2021883a 	mov	r16,r4
    eb3c:	2823883a 	mov	r17,r5
    eb40:	2839883a 	mov	fp,r5
    eb44:	38003c1e 	bne	r7,zero,ec38 <__umoddi3+0x12c>
    eb48:	3027883a 	mov	r19,r6
    eb4c:	2029883a 	mov	r20,r4
    eb50:	2980512e 	bgeu	r5,r6,ec98 <__umoddi3+0x18c>
    eb54:	00bfffd4 	movui	r2,65535
    eb58:	11809a36 	bltu	r2,r6,edc4 <__umoddi3+0x2b8>
    eb5c:	01003fc4 	movi	r4,255
    eb60:	2189803a 	cmpltu	r4,r4,r6
    eb64:	200890fa 	slli	r4,r4,3
    eb68:	3104d83a 	srl	r2,r6,r4
    eb6c:	00c00074 	movhi	r3,1
    eb70:	18c81844 	addi	r3,r3,8289
    eb74:	1885883a 	add	r2,r3,r2
    eb78:	10c00003 	ldbu	r3,0(r2)
    eb7c:	00800804 	movi	r2,32
    eb80:	1909883a 	add	r4,r3,r4
    eb84:	1125c83a 	sub	r18,r2,r4
    eb88:	90000526 	beq	r18,zero,eba0 <__umoddi3+0x94>
    eb8c:	8ca2983a 	sll	r17,r17,r18
    eb90:	8108d83a 	srl	r4,r16,r4
    eb94:	34a6983a 	sll	r19,r6,r18
    eb98:	84a8983a 	sll	r20,r16,r18
    eb9c:	2478b03a 	or	fp,r4,r17
    eba0:	982ed43a 	srli	r23,r19,16
    eba4:	e009883a 	mov	r4,fp
    eba8:	9dbfffcc 	andi	r22,r19,65535
    ebac:	b80b883a 	mov	r5,r23
    ebb0:	0004bdc0 	call	4bdc <__umodsi3>
    ebb4:	e009883a 	mov	r4,fp
    ebb8:	b80b883a 	mov	r5,r23
    ebbc:	102b883a 	mov	r21,r2
    ebc0:	0004b780 	call	4b78 <__udivsi3>
    ebc4:	a806943a 	slli	r3,r21,16
    ebc8:	a008d43a 	srli	r4,r20,16
    ebcc:	b085383a 	mul	r2,r22,r2
    ebd0:	20c8b03a 	or	r4,r4,r3
    ebd4:	2080032e 	bgeu	r4,r2,ebe4 <__umoddi3+0xd8>
    ebd8:	24c9883a 	add	r4,r4,r19
    ebdc:	24c00136 	bltu	r4,r19,ebe4 <__umoddi3+0xd8>
    ebe0:	20811036 	bltu	r4,r2,f024 <__umoddi3+0x518>
    ebe4:	20abc83a 	sub	r21,r4,r2
    ebe8:	b80b883a 	mov	r5,r23
    ebec:	a809883a 	mov	r4,r21
    ebf0:	0004bdc0 	call	4bdc <__umodsi3>
    ebf4:	1023883a 	mov	r17,r2
    ebf8:	b80b883a 	mov	r5,r23
    ebfc:	a809883a 	mov	r4,r21
    ec00:	0004b780 	call	4b78 <__udivsi3>
    ec04:	8822943a 	slli	r17,r17,16
    ec08:	b085383a 	mul	r2,r22,r2
    ec0c:	a0ffffcc 	andi	r3,r20,65535
    ec10:	1c46b03a 	or	r3,r3,r17
    ec14:	1880042e 	bgeu	r3,r2,ec28 <__umoddi3+0x11c>
    ec18:	1cc7883a 	add	r3,r3,r19
    ec1c:	1cc00236 	bltu	r3,r19,ec28 <__umoddi3+0x11c>
    ec20:	1880012e 	bgeu	r3,r2,ec28 <__umoddi3+0x11c>
    ec24:	1cc7883a 	add	r3,r3,r19
    ec28:	1885c83a 	sub	r2,r3,r2
    ec2c:	1484d83a 	srl	r2,r2,r18
    ec30:	0007883a 	mov	r3,zero
    ec34:	00004f06 	br	ed74 <__umoddi3+0x268>
    ec38:	29c04c36 	bltu	r5,r7,ed6c <__umoddi3+0x260>
    ec3c:	00bfffd4 	movui	r2,65535
    ec40:	11c0582e 	bgeu	r2,r7,eda4 <__umoddi3+0x298>
    ec44:	00804034 	movhi	r2,256
    ec48:	10bfffc4 	addi	r2,r2,-1
    ec4c:	11c0e736 	bltu	r2,r7,efec <__umoddi3+0x4e0>
    ec50:	01000404 	movi	r4,16
    ec54:	3904d83a 	srl	r2,r7,r4
    ec58:	00c00074 	movhi	r3,1
    ec5c:	18c81844 	addi	r3,r3,8289
    ec60:	1885883a 	add	r2,r3,r2
    ec64:	14c00003 	ldbu	r19,0(r2)
    ec68:	00c00804 	movi	r3,32
    ec6c:	9927883a 	add	r19,r19,r4
    ec70:	1ce9c83a 	sub	r20,r3,r19
    ec74:	a000581e 	bne	r20,zero,edd8 <__umoddi3+0x2cc>
    ec78:	3c400136 	bltu	r7,r17,ec80 <__umoddi3+0x174>
    ec7c:	8180eb36 	bltu	r16,r6,f02c <__umoddi3+0x520>
    ec80:	8185c83a 	sub	r2,r16,r6
    ec84:	89e3c83a 	sub	r17,r17,r7
    ec88:	8089803a 	cmpltu	r4,r16,r2
    ec8c:	8939c83a 	sub	fp,r17,r4
    ec90:	e007883a 	mov	r3,fp
    ec94:	00003706 	br	ed74 <__umoddi3+0x268>
    ec98:	3000041e 	bne	r6,zero,ecac <__umoddi3+0x1a0>
    ec9c:	000b883a 	mov	r5,zero
    eca0:	01000044 	movi	r4,1
    eca4:	0004b780 	call	4b78 <__udivsi3>
    eca8:	1027883a 	mov	r19,r2
    ecac:	00bfffd4 	movui	r2,65535
    ecb0:	14c0402e 	bgeu	r2,r19,edb4 <__umoddi3+0x2a8>
    ecb4:	00804034 	movhi	r2,256
    ecb8:	10bfffc4 	addi	r2,r2,-1
    ecbc:	14c0cd36 	bltu	r2,r19,eff4 <__umoddi3+0x4e8>
    ecc0:	00800404 	movi	r2,16
    ecc4:	9886d83a 	srl	r3,r19,r2
    ecc8:	01000074 	movhi	r4,1
    eccc:	21081844 	addi	r4,r4,8289
    ecd0:	20c7883a 	add	r3,r4,r3
    ecd4:	18c00003 	ldbu	r3,0(r3)
    ecd8:	1887883a 	add	r3,r3,r2
    ecdc:	00800804 	movi	r2,32
    ece0:	10e5c83a 	sub	r18,r2,r3
    ece4:	9000901e 	bne	r18,zero,ef28 <__umoddi3+0x41c>
    ece8:	982cd43a 	srli	r22,r19,16
    ecec:	8ce3c83a 	sub	r17,r17,r19
    ecf0:	9d7fffcc 	andi	r21,r19,65535
    ecf4:	b00b883a 	mov	r5,r22
    ecf8:	8809883a 	mov	r4,r17
    ecfc:	0004bdc0 	call	4bdc <__umodsi3>
    ed00:	8809883a 	mov	r4,r17
    ed04:	b00b883a 	mov	r5,r22
    ed08:	1021883a 	mov	r16,r2
    ed0c:	0004b780 	call	4b78 <__udivsi3>
    ed10:	8006943a 	slli	r3,r16,16
    ed14:	a008d43a 	srli	r4,r20,16
    ed18:	1545383a 	mul	r2,r2,r21
    ed1c:	20c8b03a 	or	r4,r4,r3
    ed20:	2080042e 	bgeu	r4,r2,ed34 <__umoddi3+0x228>
    ed24:	24c9883a 	add	r4,r4,r19
    ed28:	24c00236 	bltu	r4,r19,ed34 <__umoddi3+0x228>
    ed2c:	2080012e 	bgeu	r4,r2,ed34 <__umoddi3+0x228>
    ed30:	24c9883a 	add	r4,r4,r19
    ed34:	20a1c83a 	sub	r16,r4,r2
    ed38:	b00b883a 	mov	r5,r22
    ed3c:	8009883a 	mov	r4,r16
    ed40:	0004bdc0 	call	4bdc <__umodsi3>
    ed44:	1023883a 	mov	r17,r2
    ed48:	b00b883a 	mov	r5,r22
    ed4c:	8009883a 	mov	r4,r16
    ed50:	0004b780 	call	4b78 <__udivsi3>
    ed54:	8822943a 	slli	r17,r17,16
    ed58:	1545383a 	mul	r2,r2,r21
    ed5c:	a53fffcc 	andi	r20,r20,65535
    ed60:	a446b03a 	or	r3,r20,r17
    ed64:	18bfb02e 	bgeu	r3,r2,ec28 <__alt_mem_onchip_memory+0xf780ec28>
    ed68:	003fab06 	br	ec18 <__alt_mem_onchip_memory+0xf780ec18>
    ed6c:	2005883a 	mov	r2,r4
    ed70:	2807883a 	mov	r3,r5
    ed74:	dfc00b17 	ldw	ra,44(sp)
    ed78:	df000a17 	ldw	fp,40(sp)
    ed7c:	ddc00917 	ldw	r23,36(sp)
    ed80:	dd800817 	ldw	r22,32(sp)
    ed84:	dd400717 	ldw	r21,28(sp)
    ed88:	dd000617 	ldw	r20,24(sp)
    ed8c:	dcc00517 	ldw	r19,20(sp)
    ed90:	dc800417 	ldw	r18,16(sp)
    ed94:	dc400317 	ldw	r17,12(sp)
    ed98:	dc000217 	ldw	r16,8(sp)
    ed9c:	dec00c04 	addi	sp,sp,48
    eda0:	f800283a 	ret
    eda4:	04c03fc4 	movi	r19,255
    eda8:	99c9803a 	cmpltu	r4,r19,r7
    edac:	200890fa 	slli	r4,r4,3
    edb0:	003fa806 	br	ec54 <__alt_mem_onchip_memory+0xf780ec54>
    edb4:	00803fc4 	movi	r2,255
    edb8:	14c5803a 	cmpltu	r2,r2,r19
    edbc:	100490fa 	slli	r2,r2,3
    edc0:	003fc006 	br	ecc4 <__alt_mem_onchip_memory+0xf780ecc4>
    edc4:	00804034 	movhi	r2,256
    edc8:	10bfffc4 	addi	r2,r2,-1
    edcc:	11808b36 	bltu	r2,r6,effc <__umoddi3+0x4f0>
    edd0:	01000404 	movi	r4,16
    edd4:	003f6406 	br	eb68 <__alt_mem_onchip_memory+0xf780eb68>
    edd8:	34c4d83a 	srl	r2,r6,r19
    eddc:	3d0e983a 	sll	r7,r7,r20
    ede0:	8cf8d83a 	srl	fp,r17,r19
    ede4:	8d10983a 	sll	r8,r17,r20
    ede8:	38aab03a 	or	r21,r7,r2
    edec:	a82cd43a 	srli	r22,r21,16
    edf0:	84e2d83a 	srl	r17,r16,r19
    edf4:	e009883a 	mov	r4,fp
    edf8:	b00b883a 	mov	r5,r22
    edfc:	8a22b03a 	or	r17,r17,r8
    ee00:	3524983a 	sll	r18,r6,r20
    ee04:	0004bdc0 	call	4bdc <__umodsi3>
    ee08:	e009883a 	mov	r4,fp
    ee0c:	b00b883a 	mov	r5,r22
    ee10:	102f883a 	mov	r23,r2
    ee14:	0004b780 	call	4b78 <__udivsi3>
    ee18:	100d883a 	mov	r6,r2
    ee1c:	b808943a 	slli	r4,r23,16
    ee20:	aa3fffcc 	andi	r8,r21,65535
    ee24:	8804d43a 	srli	r2,r17,16
    ee28:	41af383a 	mul	r23,r8,r6
    ee2c:	8520983a 	sll	r16,r16,r20
    ee30:	1104b03a 	or	r2,r2,r4
    ee34:	15c0042e 	bgeu	r2,r23,ee48 <__umoddi3+0x33c>
    ee38:	1545883a 	add	r2,r2,r21
    ee3c:	30ffffc4 	addi	r3,r6,-1
    ee40:	1540742e 	bgeu	r2,r21,f014 <__umoddi3+0x508>
    ee44:	180d883a 	mov	r6,r3
    ee48:	15efc83a 	sub	r23,r2,r23
    ee4c:	b00b883a 	mov	r5,r22
    ee50:	b809883a 	mov	r4,r23
    ee54:	d9800115 	stw	r6,4(sp)
    ee58:	da000015 	stw	r8,0(sp)
    ee5c:	0004bdc0 	call	4bdc <__umodsi3>
    ee60:	b00b883a 	mov	r5,r22
    ee64:	b809883a 	mov	r4,r23
    ee68:	1039883a 	mov	fp,r2
    ee6c:	0004b780 	call	4b78 <__udivsi3>
    ee70:	da000017 	ldw	r8,0(sp)
    ee74:	e038943a 	slli	fp,fp,16
    ee78:	100b883a 	mov	r5,r2
    ee7c:	4089383a 	mul	r4,r8,r2
    ee80:	8a3fffcc 	andi	r8,r17,65535
    ee84:	4710b03a 	or	r8,r8,fp
    ee88:	d9800117 	ldw	r6,4(sp)
    ee8c:	4100042e 	bgeu	r8,r4,eea0 <__umoddi3+0x394>
    ee90:	4551883a 	add	r8,r8,r21
    ee94:	10bfffc4 	addi	r2,r2,-1
    ee98:	45405a2e 	bgeu	r8,r21,f004 <__umoddi3+0x4f8>
    ee9c:	100b883a 	mov	r5,r2
    eea0:	300c943a 	slli	r6,r6,16
    eea4:	91ffffcc 	andi	r7,r18,65535
    eea8:	9004d43a 	srli	r2,r18,16
    eeac:	314cb03a 	or	r6,r6,r5
    eeb0:	317fffcc 	andi	r5,r6,65535
    eeb4:	300cd43a 	srli	r6,r6,16
    eeb8:	29d3383a 	mul	r9,r5,r7
    eebc:	288b383a 	mul	r5,r5,r2
    eec0:	31cf383a 	mul	r7,r6,r7
    eec4:	4806d43a 	srli	r3,r9,16
    eec8:	4111c83a 	sub	r8,r8,r4
    eecc:	29cb883a 	add	r5,r5,r7
    eed0:	194b883a 	add	r5,r3,r5
    eed4:	3085383a 	mul	r2,r6,r2
    eed8:	29c0022e 	bgeu	r5,r7,eee4 <__umoddi3+0x3d8>
    eedc:	00c00074 	movhi	r3,1
    eee0:	10c5883a 	add	r2,r2,r3
    eee4:	2808d43a 	srli	r4,r5,16
    eee8:	280a943a 	slli	r5,r5,16
    eeec:	4a7fffcc 	andi	r9,r9,65535
    eef0:	2085883a 	add	r2,r4,r2
    eef4:	2a4b883a 	add	r5,r5,r9
    eef8:	40803636 	bltu	r8,r2,efd4 <__umoddi3+0x4c8>
    eefc:	40804d26 	beq	r8,r2,f034 <__umoddi3+0x528>
    ef00:	4089c83a 	sub	r4,r8,r2
    ef04:	280f883a 	mov	r7,r5
    ef08:	81cfc83a 	sub	r7,r16,r7
    ef0c:	81c7803a 	cmpltu	r3,r16,r7
    ef10:	20c7c83a 	sub	r3,r4,r3
    ef14:	1cc4983a 	sll	r2,r3,r19
    ef18:	3d0ed83a 	srl	r7,r7,r20
    ef1c:	1d06d83a 	srl	r3,r3,r20
    ef20:	11c4b03a 	or	r2,r2,r7
    ef24:	003f9306 	br	ed74 <__alt_mem_onchip_memory+0xf780ed74>
    ef28:	9ca6983a 	sll	r19,r19,r18
    ef2c:	88e8d83a 	srl	r20,r17,r3
    ef30:	80c4d83a 	srl	r2,r16,r3
    ef34:	982cd43a 	srli	r22,r19,16
    ef38:	8ca2983a 	sll	r17,r17,r18
    ef3c:	a009883a 	mov	r4,r20
    ef40:	b00b883a 	mov	r5,r22
    ef44:	1478b03a 	or	fp,r2,r17
    ef48:	0004bdc0 	call	4bdc <__umodsi3>
    ef4c:	a009883a 	mov	r4,r20
    ef50:	b00b883a 	mov	r5,r22
    ef54:	1023883a 	mov	r17,r2
    ef58:	0004b780 	call	4b78 <__udivsi3>
    ef5c:	9d7fffcc 	andi	r21,r19,65535
    ef60:	880a943a 	slli	r5,r17,16
    ef64:	e008d43a 	srli	r4,fp,16
    ef68:	a885383a 	mul	r2,r21,r2
    ef6c:	84a8983a 	sll	r20,r16,r18
    ef70:	2148b03a 	or	r4,r4,r5
    ef74:	2080042e 	bgeu	r4,r2,ef88 <__umoddi3+0x47c>
    ef78:	24c9883a 	add	r4,r4,r19
    ef7c:	24c00236 	bltu	r4,r19,ef88 <__umoddi3+0x47c>
    ef80:	2080012e 	bgeu	r4,r2,ef88 <__umoddi3+0x47c>
    ef84:	24c9883a 	add	r4,r4,r19
    ef88:	20a3c83a 	sub	r17,r4,r2
    ef8c:	b00b883a 	mov	r5,r22
    ef90:	8809883a 	mov	r4,r17
    ef94:	0004bdc0 	call	4bdc <__umodsi3>
    ef98:	102f883a 	mov	r23,r2
    ef9c:	8809883a 	mov	r4,r17
    efa0:	b00b883a 	mov	r5,r22
    efa4:	0004b780 	call	4b78 <__udivsi3>
    efa8:	b82e943a 	slli	r23,r23,16
    efac:	a885383a 	mul	r2,r21,r2
    efb0:	e13fffcc 	andi	r4,fp,65535
    efb4:	25c8b03a 	or	r4,r4,r23
    efb8:	2080042e 	bgeu	r4,r2,efcc <__umoddi3+0x4c0>
    efbc:	24c9883a 	add	r4,r4,r19
    efc0:	24c00236 	bltu	r4,r19,efcc <__umoddi3+0x4c0>
    efc4:	2080012e 	bgeu	r4,r2,efcc <__umoddi3+0x4c0>
    efc8:	24c9883a 	add	r4,r4,r19
    efcc:	20a3c83a 	sub	r17,r4,r2
    efd0:	003f4806 	br	ecf4 <__alt_mem_onchip_memory+0xf780ecf4>
    efd4:	2c8fc83a 	sub	r7,r5,r18
    efd8:	1545c83a 	sub	r2,r2,r21
    efdc:	29cb803a 	cmpltu	r5,r5,r7
    efe0:	1145c83a 	sub	r2,r2,r5
    efe4:	4089c83a 	sub	r4,r8,r2
    efe8:	003fc706 	br	ef08 <__alt_mem_onchip_memory+0xf780ef08>
    efec:	01000604 	movi	r4,24
    eff0:	003f1806 	br	ec54 <__alt_mem_onchip_memory+0xf780ec54>
    eff4:	00800604 	movi	r2,24
    eff8:	003f3206 	br	ecc4 <__alt_mem_onchip_memory+0xf780ecc4>
    effc:	01000604 	movi	r4,24
    f000:	003ed906 	br	eb68 <__alt_mem_onchip_memory+0xf780eb68>
    f004:	413fa52e 	bgeu	r8,r4,ee9c <__alt_mem_onchip_memory+0xf780ee9c>
    f008:	297fff84 	addi	r5,r5,-2
    f00c:	4551883a 	add	r8,r8,r21
    f010:	003fa306 	br	eea0 <__alt_mem_onchip_memory+0xf780eea0>
    f014:	15ff8b2e 	bgeu	r2,r23,ee44 <__alt_mem_onchip_memory+0xf780ee44>
    f018:	31bfff84 	addi	r6,r6,-2
    f01c:	1545883a 	add	r2,r2,r21
    f020:	003f8906 	br	ee48 <__alt_mem_onchip_memory+0xf780ee48>
    f024:	24c9883a 	add	r4,r4,r19
    f028:	003eee06 	br	ebe4 <__alt_mem_onchip_memory+0xf780ebe4>
    f02c:	8005883a 	mov	r2,r16
    f030:	003f1706 	br	ec90 <__alt_mem_onchip_memory+0xf780ec90>
    f034:	817fe736 	bltu	r16,r5,efd4 <__alt_mem_onchip_memory+0xf780efd4>
    f038:	280f883a 	mov	r7,r5
    f03c:	0009883a 	mov	r4,zero
    f040:	003fb106 	br	ef08 <__alt_mem_onchip_memory+0xf780ef08>

0000f044 <__eqdf2>:
    f044:	2804d53a 	srli	r2,r5,20
    f048:	3806d53a 	srli	r3,r7,20
    f04c:	02000434 	movhi	r8,16
    f050:	423fffc4 	addi	r8,r8,-1
    f054:	1081ffcc 	andi	r2,r2,2047
    f058:	0281ffc4 	movi	r10,2047
    f05c:	2a12703a 	and	r9,r5,r8
    f060:	18c1ffcc 	andi	r3,r3,2047
    f064:	3a10703a 	and	r8,r7,r8
    f068:	280ad7fa 	srli	r5,r5,31
    f06c:	380ed7fa 	srli	r7,r7,31
    f070:	12801026 	beq	r2,r10,f0b4 <__eqdf2+0x70>
    f074:	0281ffc4 	movi	r10,2047
    f078:	1a800a26 	beq	r3,r10,f0a4 <__eqdf2+0x60>
    f07c:	10c00226 	beq	r2,r3,f088 <__eqdf2+0x44>
    f080:	00800044 	movi	r2,1
    f084:	f800283a 	ret
    f088:	4a3ffd1e 	bne	r9,r8,f080 <__alt_mem_onchip_memory+0xf780f080>
    f08c:	21bffc1e 	bne	r4,r6,f080 <__alt_mem_onchip_memory+0xf780f080>
    f090:	29c00c26 	beq	r5,r7,f0c4 <__eqdf2+0x80>
    f094:	103ffa1e 	bne	r2,zero,f080 <__alt_mem_onchip_memory+0xf780f080>
    f098:	2244b03a 	or	r2,r4,r9
    f09c:	1004c03a 	cmpne	r2,r2,zero
    f0a0:	f800283a 	ret
    f0a4:	3214b03a 	or	r10,r6,r8
    f0a8:	503ff426 	beq	r10,zero,f07c <__alt_mem_onchip_memory+0xf780f07c>
    f0ac:	00800044 	movi	r2,1
    f0b0:	f800283a 	ret
    f0b4:	2254b03a 	or	r10,r4,r9
    f0b8:	503fee26 	beq	r10,zero,f074 <__alt_mem_onchip_memory+0xf780f074>
    f0bc:	00800044 	movi	r2,1
    f0c0:	f800283a 	ret
    f0c4:	0005883a 	mov	r2,zero
    f0c8:	f800283a 	ret

0000f0cc <__floatunsidf>:
    f0cc:	defffe04 	addi	sp,sp,-8
    f0d0:	dc000015 	stw	r16,0(sp)
    f0d4:	dfc00115 	stw	ra,4(sp)
    f0d8:	2021883a 	mov	r16,r4
    f0dc:	20002226 	beq	r4,zero,f168 <__floatunsidf+0x9c>
    f0e0:	0004a1c0 	call	4a1c <__clzsi2>
    f0e4:	01010784 	movi	r4,1054
    f0e8:	2089c83a 	sub	r4,r4,r2
    f0ec:	01810cc4 	movi	r6,1075
    f0f0:	310dc83a 	sub	r6,r6,r4
    f0f4:	00c007c4 	movi	r3,31
    f0f8:	1980120e 	bge	r3,r6,f144 <__floatunsidf+0x78>
    f0fc:	00c104c4 	movi	r3,1043
    f100:	1907c83a 	sub	r3,r3,r4
    f104:	80ca983a 	sll	r5,r16,r3
    f108:	00800434 	movhi	r2,16
    f10c:	10bfffc4 	addi	r2,r2,-1
    f110:	2101ffcc 	andi	r4,r4,2047
    f114:	0021883a 	mov	r16,zero
    f118:	288a703a 	and	r5,r5,r2
    f11c:	2008953a 	slli	r4,r4,20
    f120:	00c00434 	movhi	r3,16
    f124:	18ffffc4 	addi	r3,r3,-1
    f128:	28c6703a 	and	r3,r5,r3
    f12c:	8005883a 	mov	r2,r16
    f130:	1906b03a 	or	r3,r3,r4
    f134:	dfc00117 	ldw	ra,4(sp)
    f138:	dc000017 	ldw	r16,0(sp)
    f13c:	dec00204 	addi	sp,sp,8
    f140:	f800283a 	ret
    f144:	00c002c4 	movi	r3,11
    f148:	188bc83a 	sub	r5,r3,r2
    f14c:	814ad83a 	srl	r5,r16,r5
    f150:	00c00434 	movhi	r3,16
    f154:	18ffffc4 	addi	r3,r3,-1
    f158:	81a0983a 	sll	r16,r16,r6
    f15c:	2101ffcc 	andi	r4,r4,2047
    f160:	28ca703a 	and	r5,r5,r3
    f164:	003fed06 	br	f11c <__alt_mem_onchip_memory+0xf780f11c>
    f168:	0009883a 	mov	r4,zero
    f16c:	000b883a 	mov	r5,zero
    f170:	003fea06 	br	f11c <__alt_mem_onchip_memory+0xf780f11c>

0000f174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f174:	defffe04 	addi	sp,sp,-8
    f178:	dfc00115 	stw	ra,4(sp)
    f17c:	df000015 	stw	fp,0(sp)
    f180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f184:	d0a01017 	ldw	r2,-32704(gp)
    f188:	10000326 	beq	r2,zero,f198 <alt_get_errno+0x24>
    f18c:	d0a01017 	ldw	r2,-32704(gp)
    f190:	103ee83a 	callr	r2
    f194:	00000106 	br	f19c <alt_get_errno+0x28>
    f198:	d0a6dc04 	addi	r2,gp,-25744
}
    f19c:	e037883a 	mov	sp,fp
    f1a0:	dfc00117 	ldw	ra,4(sp)
    f1a4:	df000017 	ldw	fp,0(sp)
    f1a8:	dec00204 	addi	sp,sp,8
    f1ac:	f800283a 	ret

0000f1b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f1b0:	defffb04 	addi	sp,sp,-20
    f1b4:	dfc00415 	stw	ra,16(sp)
    f1b8:	df000315 	stw	fp,12(sp)
    f1bc:	df000304 	addi	fp,sp,12
    f1c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f1c4:	e0bfff17 	ldw	r2,-4(fp)
    f1c8:	10000616 	blt	r2,zero,f1e4 <close+0x34>
    f1cc:	e0bfff17 	ldw	r2,-4(fp)
    f1d0:	10c00324 	muli	r3,r2,12
    f1d4:	00800074 	movhi	r2,1
    f1d8:	108b4a04 	addi	r2,r2,11560
    f1dc:	1885883a 	add	r2,r3,r2
    f1e0:	00000106 	br	f1e8 <close+0x38>
    f1e4:	0005883a 	mov	r2,zero
    f1e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f1ec:	e0bffd17 	ldw	r2,-12(fp)
    f1f0:	10001926 	beq	r2,zero,f258 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f1f4:	e0bffd17 	ldw	r2,-12(fp)
    f1f8:	10800017 	ldw	r2,0(r2)
    f1fc:	10800417 	ldw	r2,16(r2)
    f200:	10000626 	beq	r2,zero,f21c <close+0x6c>
    f204:	e0bffd17 	ldw	r2,-12(fp)
    f208:	10800017 	ldw	r2,0(r2)
    f20c:	10800417 	ldw	r2,16(r2)
    f210:	e13ffd17 	ldw	r4,-12(fp)
    f214:	103ee83a 	callr	r2
    f218:	00000106 	br	f220 <close+0x70>
    f21c:	0005883a 	mov	r2,zero
    f220:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f224:	e13fff17 	ldw	r4,-4(fp)
    f228:	000fa640 	call	fa64 <alt_release_fd>
    if (rval < 0)
    f22c:	e0bffe17 	ldw	r2,-8(fp)
    f230:	1000070e 	bge	r2,zero,f250 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f234:	000f1740 	call	f174 <alt_get_errno>
    f238:	1007883a 	mov	r3,r2
    f23c:	e0bffe17 	ldw	r2,-8(fp)
    f240:	0085c83a 	sub	r2,zero,r2
    f244:	18800015 	stw	r2,0(r3)
      return -1;
    f248:	00bfffc4 	movi	r2,-1
    f24c:	00000706 	br	f26c <close+0xbc>
    }
    return 0;
    f250:	0005883a 	mov	r2,zero
    f254:	00000506 	br	f26c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f258:	000f1740 	call	f174 <alt_get_errno>
    f25c:	1007883a 	mov	r3,r2
    f260:	00801444 	movi	r2,81
    f264:	18800015 	stw	r2,0(r3)
    return -1;
    f268:	00bfffc4 	movi	r2,-1
  }
}
    f26c:	e037883a 	mov	sp,fp
    f270:	dfc00117 	ldw	ra,4(sp)
    f274:	df000017 	ldw	fp,0(sp)
    f278:	dec00204 	addi	sp,sp,8
    f27c:	f800283a 	ret

0000f280 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f280:	defffc04 	addi	sp,sp,-16
    f284:	df000315 	stw	fp,12(sp)
    f288:	df000304 	addi	fp,sp,12
    f28c:	e13ffd15 	stw	r4,-12(fp)
    f290:	e17ffe15 	stw	r5,-8(fp)
    f294:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f298:	e0bfff17 	ldw	r2,-4(fp)
}
    f29c:	e037883a 	mov	sp,fp
    f2a0:	df000017 	ldw	fp,0(sp)
    f2a4:	dec00104 	addi	sp,sp,4
    f2a8:	f800283a 	ret

0000f2ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2ac:	defffe04 	addi	sp,sp,-8
    f2b0:	dfc00115 	stw	ra,4(sp)
    f2b4:	df000015 	stw	fp,0(sp)
    f2b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2bc:	d0a01017 	ldw	r2,-32704(gp)
    f2c0:	10000326 	beq	r2,zero,f2d0 <alt_get_errno+0x24>
    f2c4:	d0a01017 	ldw	r2,-32704(gp)
    f2c8:	103ee83a 	callr	r2
    f2cc:	00000106 	br	f2d4 <alt_get_errno+0x28>
    f2d0:	d0a6dc04 	addi	r2,gp,-25744
}
    f2d4:	e037883a 	mov	sp,fp
    f2d8:	dfc00117 	ldw	ra,4(sp)
    f2dc:	df000017 	ldw	fp,0(sp)
    f2e0:	dec00204 	addi	sp,sp,8
    f2e4:	f800283a 	ret

0000f2e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f2e8:	defffb04 	addi	sp,sp,-20
    f2ec:	dfc00415 	stw	ra,16(sp)
    f2f0:	df000315 	stw	fp,12(sp)
    f2f4:	df000304 	addi	fp,sp,12
    f2f8:	e13ffe15 	stw	r4,-8(fp)
    f2fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f300:	e0bffe17 	ldw	r2,-8(fp)
    f304:	10000616 	blt	r2,zero,f320 <fstat+0x38>
    f308:	e0bffe17 	ldw	r2,-8(fp)
    f30c:	10c00324 	muli	r3,r2,12
    f310:	00800074 	movhi	r2,1
    f314:	108b4a04 	addi	r2,r2,11560
    f318:	1885883a 	add	r2,r3,r2
    f31c:	00000106 	br	f324 <fstat+0x3c>
    f320:	0005883a 	mov	r2,zero
    f324:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f328:	e0bffd17 	ldw	r2,-12(fp)
    f32c:	10001026 	beq	r2,zero,f370 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f330:	e0bffd17 	ldw	r2,-12(fp)
    f334:	10800017 	ldw	r2,0(r2)
    f338:	10800817 	ldw	r2,32(r2)
    f33c:	10000726 	beq	r2,zero,f35c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f340:	e0bffd17 	ldw	r2,-12(fp)
    f344:	10800017 	ldw	r2,0(r2)
    f348:	10800817 	ldw	r2,32(r2)
    f34c:	e17fff17 	ldw	r5,-4(fp)
    f350:	e13ffd17 	ldw	r4,-12(fp)
    f354:	103ee83a 	callr	r2
    f358:	00000a06 	br	f384 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f35c:	e0bfff17 	ldw	r2,-4(fp)
    f360:	00c80004 	movi	r3,8192
    f364:	10c00115 	stw	r3,4(r2)
      return 0;
    f368:	0005883a 	mov	r2,zero
    f36c:	00000506 	br	f384 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f370:	000f2ac0 	call	f2ac <alt_get_errno>
    f374:	1007883a 	mov	r3,r2
    f378:	00801444 	movi	r2,81
    f37c:	18800015 	stw	r2,0(r3)
    return -1;
    f380:	00bfffc4 	movi	r2,-1
  }
}
    f384:	e037883a 	mov	sp,fp
    f388:	dfc00117 	ldw	ra,4(sp)
    f38c:	df000017 	ldw	fp,0(sp)
    f390:	dec00204 	addi	sp,sp,8
    f394:	f800283a 	ret

0000f398 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    f398:	defff404 	addi	sp,sp,-48
    f39c:	dfc00b15 	stw	ra,44(sp)
    f3a0:	df000a15 	stw	fp,40(sp)
    f3a4:	dd000915 	stw	r20,36(sp)
    f3a8:	dcc00815 	stw	r19,32(sp)
    f3ac:	dc800715 	stw	r18,28(sp)
    f3b0:	dc400615 	stw	r17,24(sp)
    f3b4:	dc000515 	stw	r16,20(sp)
    f3b8:	df000a04 	addi	fp,sp,40
    f3bc:	e13ff915 	stw	r4,-28(fp)
    f3c0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    f3c4:	e0bffa17 	ldw	r2,-24(fp)
    f3c8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f3cc:	d0a6eb17 	ldw	r2,-25684(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    f3d0:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f3d4:	d0a6ea17 	ldw	r2,-25688(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    f3d8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    f3dc:	e0bff817 	ldw	r2,-32(fp)
    f3e0:	10005f26 	beq	r2,zero,f560 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    f3e4:	d0a6e517 	ldw	r2,-25708(gp)
    f3e8:	1029883a 	mov	r20,r2
    f3ec:	e17ff817 	ldw	r5,-32(fp)
    f3f0:	e13ff717 	ldw	r4,-36(fp)
    f3f4:	0004b780 	call	4b78 <__udivsi3>
    f3f8:	a085883a 	add	r2,r20,r2
    f3fc:	1007883a 	mov	r3,r2
    f400:	e0bff917 	ldw	r2,-28(fp)
    f404:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    f408:	d0a6e617 	ldw	r2,-25704(gp)
    f40c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    f410:	e0bff717 	ldw	r2,-36(fp)
    f414:	1021883a 	mov	r16,r2
    f418:	0023883a 	mov	r17,zero
    f41c:	e17ff817 	ldw	r5,-32(fp)
    f420:	010003f4 	movhi	r4,15
    f424:	21109004 	addi	r4,r4,16960
    f428:	0004b780 	call	4b78 <__udivsi3>
    f42c:	1025883a 	mov	r18,r2
    f430:	0027883a 	mov	r19,zero
    f434:	900d883a 	mov	r6,r18
    f438:	980f883a 	mov	r7,r19
    f43c:	8009883a 	mov	r4,r16
    f440:	880b883a 	mov	r5,r17
    f444:	000e5340 	call	e534 <__muldi3>
    f448:	1009883a 	mov	r4,r2
    f44c:	180b883a 	mov	r5,r3
    f450:	2005883a 	mov	r2,r4
    f454:	2807883a 	mov	r3,r5
    f458:	018003f4 	movhi	r6,15
    f45c:	31909004 	addi	r6,r6,16960
    f460:	000f883a 	mov	r7,zero
    f464:	1009883a 	mov	r4,r2
    f468:	180b883a 	mov	r5,r3
    f46c:	000eb0c0 	call	eb0c <__umoddi3>
    f470:	1009883a 	mov	r4,r2
    f474:	180b883a 	mov	r5,r3
    f478:	2005883a 	mov	r2,r4
    f47c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    f480:	a085883a 	add	r2,r20,r2
    f484:	1007883a 	mov	r3,r2
    f488:	e0bff917 	ldw	r2,-28(fp)
    f48c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    f490:	00001406 	br	f4e4 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
    f494:	e0bff917 	ldw	r2,-28(fp)
    f498:	10800017 	ldw	r2,0(r2)
    f49c:	00800516 	blt	zero,r2,f4b4 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
    f4a0:	e0bff917 	ldw	r2,-28(fp)
    f4a4:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    f4a8:	e0bff917 	ldw	r2,-28(fp)
    f4ac:	10000115 	stw	zero,4(r2)
          break;
    f4b0:	00000f06 	br	f4f0 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
    f4b4:	e0bff917 	ldw	r2,-28(fp)
    f4b8:	10800017 	ldw	r2,0(r2)
    f4bc:	10ffffc4 	addi	r3,r2,-1
    f4c0:	e0bff917 	ldw	r2,-28(fp)
    f4c4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    f4c8:	e0bff917 	ldw	r2,-28(fp)
    f4cc:	10c00117 	ldw	r3,4(r2)
    f4d0:	008003f4 	movhi	r2,15
    f4d4:	10909004 	addi	r2,r2,16960
    f4d8:	1887883a 	add	r3,r3,r2
    f4dc:	e0bff917 	ldw	r2,-28(fp)
    f4e0:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    f4e4:	e0bff917 	ldw	r2,-28(fp)
    f4e8:	10800117 	ldw	r2,4(r2)
    f4ec:	103fe916 	blt	r2,zero,f494 <__alt_mem_onchip_memory+0xf780f494>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    f4f0:	00000c06 	br	f524 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
    f4f4:	e0bff917 	ldw	r2,-28(fp)
    f4f8:	10800017 	ldw	r2,0(r2)
    f4fc:	10c00044 	addi	r3,r2,1
    f500:	e0bff917 	ldw	r2,-28(fp)
    f504:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    f508:	e0bff917 	ldw	r2,-28(fp)
    f50c:	10c00117 	ldw	r3,4(r2)
    f510:	00bffc74 	movhi	r2,65521
    f514:	10af7004 	addi	r2,r2,-16960
    f518:	1887883a 	add	r3,r3,r2
    f51c:	e0bff917 	ldw	r2,-28(fp)
    f520:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    f524:	e0bff917 	ldw	r2,-28(fp)
    f528:	10c00117 	ldw	r3,4(r2)
    f52c:	008003f4 	movhi	r2,15
    f530:	10908fc4 	addi	r2,r2,16959
    f534:	10ffef16 	blt	r2,r3,f4f4 <__alt_mem_onchip_memory+0xf780f4f4>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    f538:	e0bff617 	ldw	r2,-40(fp)
    f53c:	10000626 	beq	r2,zero,f558 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    f540:	d0e6e317 	ldw	r3,-25716(gp)
    f544:	e0bff617 	ldw	r2,-40(fp)
    f548:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    f54c:	d0e6e417 	ldw	r3,-25712(gp)
    f550:	e0bff617 	ldw	r2,-40(fp)
    f554:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    f558:	0005883a 	mov	r2,zero
    f55c:	00000106 	br	f564 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
    f560:	00bfde84 	movi	r2,-134
}
    f564:	e6fffb04 	addi	sp,fp,-20
    f568:	dfc00617 	ldw	ra,24(sp)
    f56c:	df000517 	ldw	fp,20(sp)
    f570:	dd000417 	ldw	r20,16(sp)
    f574:	dcc00317 	ldw	r19,12(sp)
    f578:	dc800217 	ldw	r18,8(sp)
    f57c:	dc400117 	ldw	r17,4(sp)
    f580:	dc000017 	ldw	r16,0(sp)
    f584:	dec00704 	addi	sp,sp,28
    f588:	f800283a 	ret

0000f58c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f58c:	defffe04 	addi	sp,sp,-8
    f590:	dfc00115 	stw	ra,4(sp)
    f594:	df000015 	stw	fp,0(sp)
    f598:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f59c:	d0a01017 	ldw	r2,-32704(gp)
    f5a0:	10000326 	beq	r2,zero,f5b0 <alt_get_errno+0x24>
    f5a4:	d0a01017 	ldw	r2,-32704(gp)
    f5a8:	103ee83a 	callr	r2
    f5ac:	00000106 	br	f5b4 <alt_get_errno+0x28>
    f5b0:	d0a6dc04 	addi	r2,gp,-25744
}
    f5b4:	e037883a 	mov	sp,fp
    f5b8:	dfc00117 	ldw	ra,4(sp)
    f5bc:	df000017 	ldw	fp,0(sp)
    f5c0:	dec00204 	addi	sp,sp,8
    f5c4:	f800283a 	ret

0000f5c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f5c8:	deffed04 	addi	sp,sp,-76
    f5cc:	dfc01215 	stw	ra,72(sp)
    f5d0:	df001115 	stw	fp,68(sp)
    f5d4:	df001104 	addi	fp,sp,68
    f5d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f5dc:	e0bfff17 	ldw	r2,-4(fp)
    f5e0:	10000616 	blt	r2,zero,f5fc <isatty+0x34>
    f5e4:	e0bfff17 	ldw	r2,-4(fp)
    f5e8:	10c00324 	muli	r3,r2,12
    f5ec:	00800074 	movhi	r2,1
    f5f0:	108b4a04 	addi	r2,r2,11560
    f5f4:	1885883a 	add	r2,r3,r2
    f5f8:	00000106 	br	f600 <isatty+0x38>
    f5fc:	0005883a 	mov	r2,zero
    f600:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f604:	e0bfef17 	ldw	r2,-68(fp)
    f608:	10000e26 	beq	r2,zero,f644 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f60c:	e0bfef17 	ldw	r2,-68(fp)
    f610:	10800017 	ldw	r2,0(r2)
    f614:	10800817 	ldw	r2,32(r2)
    f618:	1000021e 	bne	r2,zero,f624 <isatty+0x5c>
    {
      return 1;
    f61c:	00800044 	movi	r2,1
    f620:	00000d06 	br	f658 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f624:	e0bff004 	addi	r2,fp,-64
    f628:	100b883a 	mov	r5,r2
    f62c:	e13fff17 	ldw	r4,-4(fp)
    f630:	000f2e80 	call	f2e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f634:	e0bff117 	ldw	r2,-60(fp)
    f638:	10880020 	cmpeqi	r2,r2,8192
    f63c:	10803fcc 	andi	r2,r2,255
    f640:	00000506 	br	f658 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f644:	000f58c0 	call	f58c <alt_get_errno>
    f648:	1007883a 	mov	r3,r2
    f64c:	00801444 	movi	r2,81
    f650:	18800015 	stw	r2,0(r3)
    return 0;
    f654:	0005883a 	mov	r2,zero
  }
}
    f658:	e037883a 	mov	sp,fp
    f65c:	dfc00117 	ldw	ra,4(sp)
    f660:	df000017 	ldw	fp,0(sp)
    f664:	dec00204 	addi	sp,sp,8
    f668:	f800283a 	ret

0000f66c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f66c:	defffc04 	addi	sp,sp,-16
    f670:	df000315 	stw	fp,12(sp)
    f674:	df000304 	addi	fp,sp,12
    f678:	e13ffd15 	stw	r4,-12(fp)
    f67c:	e17ffe15 	stw	r5,-8(fp)
    f680:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f684:	e0fffe17 	ldw	r3,-8(fp)
    f688:	e0bffd17 	ldw	r2,-12(fp)
    f68c:	18800c26 	beq	r3,r2,f6c0 <alt_load_section+0x54>
  {
    while( to != end )
    f690:	00000806 	br	f6b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f694:	e0bffe17 	ldw	r2,-8(fp)
    f698:	10c00104 	addi	r3,r2,4
    f69c:	e0fffe15 	stw	r3,-8(fp)
    f6a0:	e0fffd17 	ldw	r3,-12(fp)
    f6a4:	19000104 	addi	r4,r3,4
    f6a8:	e13ffd15 	stw	r4,-12(fp)
    f6ac:	18c00017 	ldw	r3,0(r3)
    f6b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f6b4:	e0fffe17 	ldw	r3,-8(fp)
    f6b8:	e0bfff17 	ldw	r2,-4(fp)
    f6bc:	18bff51e 	bne	r3,r2,f694 <__alt_mem_onchip_memory+0xf780f694>
    {
      *to++ = *from++;
    }
  }
}
    f6c0:	0001883a 	nop
    f6c4:	e037883a 	mov	sp,fp
    f6c8:	df000017 	ldw	fp,0(sp)
    f6cc:	dec00104 	addi	sp,sp,4
    f6d0:	f800283a 	ret

0000f6d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f6d4:	defffe04 	addi	sp,sp,-8
    f6d8:	dfc00115 	stw	ra,4(sp)
    f6dc:	df000015 	stw	fp,0(sp)
    f6e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f6e4:	01800074 	movhi	r6,1
    f6e8:	318fd704 	addi	r6,r6,16220
    f6ec:	01400074 	movhi	r5,1
    f6f0:	29491704 	addi	r5,r5,9308
    f6f4:	01000074 	movhi	r4,1
    f6f8:	210fd704 	addi	r4,r4,16220
    f6fc:	000f66c0 	call	f66c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f700:	01800034 	movhi	r6,0
    f704:	31809104 	addi	r6,r6,580
    f708:	01400034 	movhi	r5,0
    f70c:	29400804 	addi	r5,r5,32
    f710:	01000034 	movhi	r4,0
    f714:	21000804 	addi	r4,r4,32
    f718:	000f66c0 	call	f66c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f71c:	01800074 	movhi	r6,1
    f720:	31891704 	addi	r6,r6,9308
    f724:	01400074 	movhi	r5,1
    f728:	2947e904 	addi	r5,r5,8100
    f72c:	01000074 	movhi	r4,1
    f730:	2107e904 	addi	r4,r4,8100
    f734:	000f66c0 	call	f66c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f738:	0010e380 	call	10e38 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f73c:	00110200 	call	11020 <alt_icache_flush_all>
}
    f740:	0001883a 	nop
    f744:	e037883a 	mov	sp,fp
    f748:	dfc00117 	ldw	ra,4(sp)
    f74c:	df000017 	ldw	fp,0(sp)
    f750:	dec00204 	addi	sp,sp,8
    f754:	f800283a 	ret

0000f758 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f758:	defffe04 	addi	sp,sp,-8
    f75c:	dfc00115 	stw	ra,4(sp)
    f760:	df000015 	stw	fp,0(sp)
    f764:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f768:	d0a01017 	ldw	r2,-32704(gp)
    f76c:	10000326 	beq	r2,zero,f77c <alt_get_errno+0x24>
    f770:	d0a01017 	ldw	r2,-32704(gp)
    f774:	103ee83a 	callr	r2
    f778:	00000106 	br	f780 <alt_get_errno+0x28>
    f77c:	d0a6dc04 	addi	r2,gp,-25744
}
    f780:	e037883a 	mov	sp,fp
    f784:	dfc00117 	ldw	ra,4(sp)
    f788:	df000017 	ldw	fp,0(sp)
    f78c:	dec00204 	addi	sp,sp,8
    f790:	f800283a 	ret

0000f794 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f794:	defff904 	addi	sp,sp,-28
    f798:	dfc00615 	stw	ra,24(sp)
    f79c:	df000515 	stw	fp,20(sp)
    f7a0:	df000504 	addi	fp,sp,20
    f7a4:	e13ffd15 	stw	r4,-12(fp)
    f7a8:	e17ffe15 	stw	r5,-8(fp)
    f7ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f7b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f7b4:	e0bffd17 	ldw	r2,-12(fp)
    f7b8:	10000616 	blt	r2,zero,f7d4 <lseek+0x40>
    f7bc:	e0bffd17 	ldw	r2,-12(fp)
    f7c0:	10c00324 	muli	r3,r2,12
    f7c4:	00800074 	movhi	r2,1
    f7c8:	108b4a04 	addi	r2,r2,11560
    f7cc:	1885883a 	add	r2,r3,r2
    f7d0:	00000106 	br	f7d8 <lseek+0x44>
    f7d4:	0005883a 	mov	r2,zero
    f7d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f7dc:	e0bffc17 	ldw	r2,-16(fp)
    f7e0:	10001026 	beq	r2,zero,f824 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f7e4:	e0bffc17 	ldw	r2,-16(fp)
    f7e8:	10800017 	ldw	r2,0(r2)
    f7ec:	10800717 	ldw	r2,28(r2)
    f7f0:	10000926 	beq	r2,zero,f818 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f7f4:	e0bffc17 	ldw	r2,-16(fp)
    f7f8:	10800017 	ldw	r2,0(r2)
    f7fc:	10800717 	ldw	r2,28(r2)
    f800:	e1bfff17 	ldw	r6,-4(fp)
    f804:	e17ffe17 	ldw	r5,-8(fp)
    f808:	e13ffc17 	ldw	r4,-16(fp)
    f80c:	103ee83a 	callr	r2
    f810:	e0bffb15 	stw	r2,-20(fp)
    f814:	00000506 	br	f82c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f818:	00bfde84 	movi	r2,-134
    f81c:	e0bffb15 	stw	r2,-20(fp)
    f820:	00000206 	br	f82c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f824:	00bfebc4 	movi	r2,-81
    f828:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f82c:	e0bffb17 	ldw	r2,-20(fp)
    f830:	1000070e 	bge	r2,zero,f850 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f834:	000f7580 	call	f758 <alt_get_errno>
    f838:	1007883a 	mov	r3,r2
    f83c:	e0bffb17 	ldw	r2,-20(fp)
    f840:	0085c83a 	sub	r2,zero,r2
    f844:	18800015 	stw	r2,0(r3)
    rc = -1;
    f848:	00bfffc4 	movi	r2,-1
    f84c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f850:	e0bffb17 	ldw	r2,-20(fp)
}
    f854:	e037883a 	mov	sp,fp
    f858:	dfc00117 	ldw	ra,4(sp)
    f85c:	df000017 	ldw	fp,0(sp)
    f860:	dec00204 	addi	sp,sp,8
    f864:	f800283a 	ret

0000f868 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f868:	defffd04 	addi	sp,sp,-12
    f86c:	dfc00215 	stw	ra,8(sp)
    f870:	df000115 	stw	fp,4(sp)
    f874:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f878:	0009883a 	mov	r4,zero
    f87c:	000fe840 	call	fe84 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f880:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f884:	000febc0 	call	febc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f888:	01800074 	movhi	r6,1
    f88c:	3188cf04 	addi	r6,r6,9020
    f890:	01400074 	movhi	r5,1
    f894:	2948cf04 	addi	r5,r5,9020
    f898:	01000074 	movhi	r4,1
    f89c:	2108cf04 	addi	r4,r4,9020
    f8a0:	00113b80 	call	113b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f8a4:	0010f600 	call	10f60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f8a8:	01000074 	movhi	r4,1
    f8ac:	2103f004 	addi	r4,r4,4032
    f8b0:	0011ba00 	call	11ba0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f8b4:	d0a6e717 	ldw	r2,-25700(gp)
    f8b8:	d0e6e817 	ldw	r3,-25696(gp)
    f8bc:	d126e917 	ldw	r4,-25692(gp)
    f8c0:	200d883a 	mov	r6,r4
    f8c4:	180b883a 	mov	r5,r3
    f8c8:	1009883a 	mov	r4,r2
    f8cc:	00012cc0 	call	12cc <main>
    f8d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f8d4:	01000044 	movi	r4,1
    f8d8:	000f1b00 	call	f1b0 <close>
  exit (result);
    f8dc:	e13fff17 	ldw	r4,-4(fp)
    f8e0:	0011bb40 	call	11bb4 <exit>

0000f8e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f8e4:	defffe04 	addi	sp,sp,-8
    f8e8:	df000115 	stw	fp,4(sp)
    f8ec:	df000104 	addi	fp,sp,4
    f8f0:	e13fff15 	stw	r4,-4(fp)
}
    f8f4:	0001883a 	nop
    f8f8:	e037883a 	mov	sp,fp
    f8fc:	df000017 	ldw	fp,0(sp)
    f900:	dec00104 	addi	sp,sp,4
    f904:	f800283a 	ret

0000f908 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f908:	defffe04 	addi	sp,sp,-8
    f90c:	df000115 	stw	fp,4(sp)
    f910:	df000104 	addi	fp,sp,4
    f914:	e13fff15 	stw	r4,-4(fp)
}
    f918:	0001883a 	nop
    f91c:	e037883a 	mov	sp,fp
    f920:	df000017 	ldw	fp,0(sp)
    f924:	dec00104 	addi	sp,sp,4
    f928:	f800283a 	ret

0000f92c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f92c:	defffe04 	addi	sp,sp,-8
    f930:	dfc00115 	stw	ra,4(sp)
    f934:	df000015 	stw	fp,0(sp)
    f938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f93c:	d0a01017 	ldw	r2,-32704(gp)
    f940:	10000326 	beq	r2,zero,f950 <alt_get_errno+0x24>
    f944:	d0a01017 	ldw	r2,-32704(gp)
    f948:	103ee83a 	callr	r2
    f94c:	00000106 	br	f954 <alt_get_errno+0x28>
    f950:	d0a6dc04 	addi	r2,gp,-25744
}
    f954:	e037883a 	mov	sp,fp
    f958:	dfc00117 	ldw	ra,4(sp)
    f95c:	df000017 	ldw	fp,0(sp)
    f960:	dec00204 	addi	sp,sp,8
    f964:	f800283a 	ret

0000f968 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f968:	defff904 	addi	sp,sp,-28
    f96c:	dfc00615 	stw	ra,24(sp)
    f970:	df000515 	stw	fp,20(sp)
    f974:	df000504 	addi	fp,sp,20
    f978:	e13ffd15 	stw	r4,-12(fp)
    f97c:	e17ffe15 	stw	r5,-8(fp)
    f980:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f984:	e0bffd17 	ldw	r2,-12(fp)
    f988:	10000616 	blt	r2,zero,f9a4 <read+0x3c>
    f98c:	e0bffd17 	ldw	r2,-12(fp)
    f990:	10c00324 	muli	r3,r2,12
    f994:	00800074 	movhi	r2,1
    f998:	108b4a04 	addi	r2,r2,11560
    f99c:	1885883a 	add	r2,r3,r2
    f9a0:	00000106 	br	f9a8 <read+0x40>
    f9a4:	0005883a 	mov	r2,zero
    f9a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f9ac:	e0bffb17 	ldw	r2,-20(fp)
    f9b0:	10002226 	beq	r2,zero,fa3c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f9b4:	e0bffb17 	ldw	r2,-20(fp)
    f9b8:	10800217 	ldw	r2,8(r2)
    f9bc:	108000cc 	andi	r2,r2,3
    f9c0:	10800060 	cmpeqi	r2,r2,1
    f9c4:	1000181e 	bne	r2,zero,fa28 <read+0xc0>
        (fd->dev->read))
    f9c8:	e0bffb17 	ldw	r2,-20(fp)
    f9cc:	10800017 	ldw	r2,0(r2)
    f9d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f9d4:	10001426 	beq	r2,zero,fa28 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f9d8:	e0bffb17 	ldw	r2,-20(fp)
    f9dc:	10800017 	ldw	r2,0(r2)
    f9e0:	10800517 	ldw	r2,20(r2)
    f9e4:	e0ffff17 	ldw	r3,-4(fp)
    f9e8:	180d883a 	mov	r6,r3
    f9ec:	e17ffe17 	ldw	r5,-8(fp)
    f9f0:	e13ffb17 	ldw	r4,-20(fp)
    f9f4:	103ee83a 	callr	r2
    f9f8:	e0bffc15 	stw	r2,-16(fp)
    f9fc:	e0bffc17 	ldw	r2,-16(fp)
    fa00:	1000070e 	bge	r2,zero,fa20 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fa04:	000f92c0 	call	f92c <alt_get_errno>
    fa08:	1007883a 	mov	r3,r2
    fa0c:	e0bffc17 	ldw	r2,-16(fp)
    fa10:	0085c83a 	sub	r2,zero,r2
    fa14:	18800015 	stw	r2,0(r3)
          return -1;
    fa18:	00bfffc4 	movi	r2,-1
    fa1c:	00000c06 	br	fa50 <read+0xe8>
        }
        return rval;
    fa20:	e0bffc17 	ldw	r2,-16(fp)
    fa24:	00000a06 	br	fa50 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fa28:	000f92c0 	call	f92c <alt_get_errno>
    fa2c:	1007883a 	mov	r3,r2
    fa30:	00800344 	movi	r2,13
    fa34:	18800015 	stw	r2,0(r3)
    fa38:	00000406 	br	fa4c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fa3c:	000f92c0 	call	f92c <alt_get_errno>
    fa40:	1007883a 	mov	r3,r2
    fa44:	00801444 	movi	r2,81
    fa48:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fa4c:	00bfffc4 	movi	r2,-1
}
    fa50:	e037883a 	mov	sp,fp
    fa54:	dfc00117 	ldw	ra,4(sp)
    fa58:	df000017 	ldw	fp,0(sp)
    fa5c:	dec00204 	addi	sp,sp,8
    fa60:	f800283a 	ret

0000fa64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fa64:	defffe04 	addi	sp,sp,-8
    fa68:	df000115 	stw	fp,4(sp)
    fa6c:	df000104 	addi	fp,sp,4
    fa70:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fa74:	e0bfff17 	ldw	r2,-4(fp)
    fa78:	108000d0 	cmplti	r2,r2,3
    fa7c:	10000d1e 	bne	r2,zero,fab4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fa80:	00800074 	movhi	r2,1
    fa84:	108b4a04 	addi	r2,r2,11560
    fa88:	e0ffff17 	ldw	r3,-4(fp)
    fa8c:	18c00324 	muli	r3,r3,12
    fa90:	10c5883a 	add	r2,r2,r3
    fa94:	10800204 	addi	r2,r2,8
    fa98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fa9c:	00800074 	movhi	r2,1
    faa0:	108b4a04 	addi	r2,r2,11560
    faa4:	e0ffff17 	ldw	r3,-4(fp)
    faa8:	18c00324 	muli	r3,r3,12
    faac:	10c5883a 	add	r2,r2,r3
    fab0:	10000015 	stw	zero,0(r2)
  }
}
    fab4:	0001883a 	nop
    fab8:	e037883a 	mov	sp,fp
    fabc:	df000017 	ldw	fp,0(sp)
    fac0:	dec00104 	addi	sp,sp,4
    fac4:	f800283a 	ret

0000fac8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fac8:	defff904 	addi	sp,sp,-28
    facc:	df000615 	stw	fp,24(sp)
    fad0:	df000604 	addi	fp,sp,24
    fad4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fad8:	0005303a 	rdctl	r2,status
    fadc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fae0:	e0fffe17 	ldw	r3,-8(fp)
    fae4:	00bfff84 	movi	r2,-2
    fae8:	1884703a 	and	r2,r3,r2
    faec:	1001703a 	wrctl	status,r2
  
  return context;
    faf0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    faf4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    faf8:	d0a01117 	ldw	r2,-32700(gp)
    fafc:	10c000c4 	addi	r3,r2,3
    fb00:	00bfff04 	movi	r2,-4
    fb04:	1884703a 	and	r2,r3,r2
    fb08:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fb0c:	d0e01117 	ldw	r3,-32700(gp)
    fb10:	e0bfff17 	ldw	r2,-4(fp)
    fb14:	1887883a 	add	r3,r3,r2
    fb18:	00820034 	movhi	r2,2048
    fb1c:	10800004 	addi	r2,r2,0
    fb20:	10c0062e 	bgeu	r2,r3,fb3c <sbrk+0x74>
    fb24:	e0bffb17 	ldw	r2,-20(fp)
    fb28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb2c:	e0bffa17 	ldw	r2,-24(fp)
    fb30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fb34:	00bfffc4 	movi	r2,-1
    fb38:	00000b06 	br	fb68 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fb3c:	d0a01117 	ldw	r2,-32700(gp)
    fb40:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fb44:	d0e01117 	ldw	r3,-32700(gp)
    fb48:	e0bfff17 	ldw	r2,-4(fp)
    fb4c:	1885883a 	add	r2,r3,r2
    fb50:	d0a01115 	stw	r2,-32700(gp)
    fb54:	e0bffb17 	ldw	r2,-20(fp)
    fb58:	e0bffc15 	stw	r2,-16(fp)
    fb5c:	e0bffc17 	ldw	r2,-16(fp)
    fb60:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fb64:	e0bffd17 	ldw	r2,-12(fp)
} 
    fb68:	e037883a 	mov	sp,fp
    fb6c:	df000017 	ldw	fp,0(sp)
    fb70:	dec00104 	addi	sp,sp,4
    fb74:	f800283a 	ret

0000fb78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    fb78:	defffa04 	addi	sp,sp,-24
    fb7c:	df000515 	stw	fp,20(sp)
    fb80:	df000504 	addi	fp,sp,20
    fb84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb88:	0005303a 	rdctl	r2,status
    fb8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb90:	e0fffc17 	ldw	r3,-16(fp)
    fb94:	00bfff84 	movi	r2,-2
    fb98:	1884703a 	and	r2,r3,r2
    fb9c:	1001703a 	wrctl	status,r2
  
  return context;
    fba0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    fba4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    fba8:	e0bfff17 	ldw	r2,-4(fp)
    fbac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fbb0:	e0bffd17 	ldw	r2,-12(fp)
    fbb4:	10800017 	ldw	r2,0(r2)
    fbb8:	e0fffd17 	ldw	r3,-12(fp)
    fbbc:	18c00117 	ldw	r3,4(r3)
    fbc0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    fbc4:	e0bffd17 	ldw	r2,-12(fp)
    fbc8:	10800117 	ldw	r2,4(r2)
    fbcc:	e0fffd17 	ldw	r3,-12(fp)
    fbd0:	18c00017 	ldw	r3,0(r3)
    fbd4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fbd8:	e0bffd17 	ldw	r2,-12(fp)
    fbdc:	e0fffd17 	ldw	r3,-12(fp)
    fbe0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    fbe4:	e0bffd17 	ldw	r2,-12(fp)
    fbe8:	e0fffd17 	ldw	r3,-12(fp)
    fbec:	10c00015 	stw	r3,0(r2)
    fbf0:	e0bffb17 	ldw	r2,-20(fp)
    fbf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbf8:	e0bffe17 	ldw	r2,-8(fp)
    fbfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    fc00:	0001883a 	nop
    fc04:	e037883a 	mov	sp,fp
    fc08:	df000017 	ldw	fp,0(sp)
    fc0c:	dec00104 	addi	sp,sp,4
    fc10:	f800283a 	ret

0000fc14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fc14:	defffb04 	addi	sp,sp,-20
    fc18:	dfc00415 	stw	ra,16(sp)
    fc1c:	df000315 	stw	fp,12(sp)
    fc20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fc24:	d0a01217 	ldw	r2,-32696(gp)
    fc28:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fc2c:	d0a6eb17 	ldw	r2,-25684(gp)
    fc30:	10800044 	addi	r2,r2,1
    fc34:	d0a6eb15 	stw	r2,-25684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fc38:	00002e06 	br	fcf4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    fc3c:	e0bffd17 	ldw	r2,-12(fp)
    fc40:	10800017 	ldw	r2,0(r2)
    fc44:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fc48:	e0bffd17 	ldw	r2,-12(fp)
    fc4c:	10800403 	ldbu	r2,16(r2)
    fc50:	10803fcc 	andi	r2,r2,255
    fc54:	10000426 	beq	r2,zero,fc68 <alt_tick+0x54>
    fc58:	d0a6eb17 	ldw	r2,-25684(gp)
    fc5c:	1000021e 	bne	r2,zero,fc68 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    fc60:	e0bffd17 	ldw	r2,-12(fp)
    fc64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fc68:	e0bffd17 	ldw	r2,-12(fp)
    fc6c:	10800217 	ldw	r2,8(r2)
    fc70:	d0e6eb17 	ldw	r3,-25684(gp)
    fc74:	18801d36 	bltu	r3,r2,fcec <alt_tick+0xd8>
    fc78:	e0bffd17 	ldw	r2,-12(fp)
    fc7c:	10800403 	ldbu	r2,16(r2)
    fc80:	10803fcc 	andi	r2,r2,255
    fc84:	1000191e 	bne	r2,zero,fcec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    fc88:	e0bffd17 	ldw	r2,-12(fp)
    fc8c:	10800317 	ldw	r2,12(r2)
    fc90:	e0fffd17 	ldw	r3,-12(fp)
    fc94:	18c00517 	ldw	r3,20(r3)
    fc98:	1809883a 	mov	r4,r3
    fc9c:	103ee83a 	callr	r2
    fca0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fca4:	e0bfff17 	ldw	r2,-4(fp)
    fca8:	1000031e 	bne	r2,zero,fcb8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    fcac:	e13ffd17 	ldw	r4,-12(fp)
    fcb0:	000fb780 	call	fb78 <alt_alarm_stop>
    fcb4:	00000d06 	br	fcec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    fcb8:	e0bffd17 	ldw	r2,-12(fp)
    fcbc:	10c00217 	ldw	r3,8(r2)
    fcc0:	e0bfff17 	ldw	r2,-4(fp)
    fcc4:	1887883a 	add	r3,r3,r2
    fcc8:	e0bffd17 	ldw	r2,-12(fp)
    fccc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fcd0:	e0bffd17 	ldw	r2,-12(fp)
    fcd4:	10c00217 	ldw	r3,8(r2)
    fcd8:	d0a6eb17 	ldw	r2,-25684(gp)
    fcdc:	1880032e 	bgeu	r3,r2,fcec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    fce0:	e0bffd17 	ldw	r2,-12(fp)
    fce4:	00c00044 	movi	r3,1
    fce8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    fcec:	e0bffe17 	ldw	r2,-8(fp)
    fcf0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fcf4:	e0fffd17 	ldw	r3,-12(fp)
    fcf8:	d0a01204 	addi	r2,gp,-32696
    fcfc:	18bfcf1e 	bne	r3,r2,fc3c <__alt_mem_onchip_memory+0xf780fc3c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    fd00:	0001883a 	nop
}
    fd04:	0001883a 	nop
    fd08:	e037883a 	mov	sp,fp
    fd0c:	dfc00117 	ldw	ra,4(sp)
    fd10:	df000017 	ldw	fp,0(sp)
    fd14:	dec00204 	addi	sp,sp,8
    fd18:	f800283a 	ret

0000fd1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fd1c:	defffe04 	addi	sp,sp,-8
    fd20:	dfc00115 	stw	ra,4(sp)
    fd24:	df000015 	stw	fp,0(sp)
    fd28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fd2c:	d0a01017 	ldw	r2,-32704(gp)
    fd30:	10000326 	beq	r2,zero,fd40 <alt_get_errno+0x24>
    fd34:	d0a01017 	ldw	r2,-32704(gp)
    fd38:	103ee83a 	callr	r2
    fd3c:	00000106 	br	fd44 <alt_get_errno+0x28>
    fd40:	d0a6dc04 	addi	r2,gp,-25744
}
    fd44:	e037883a 	mov	sp,fp
    fd48:	dfc00117 	ldw	ra,4(sp)
    fd4c:	df000017 	ldw	fp,0(sp)
    fd50:	dec00204 	addi	sp,sp,8
    fd54:	f800283a 	ret

0000fd58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fd58:	defff904 	addi	sp,sp,-28
    fd5c:	dfc00615 	stw	ra,24(sp)
    fd60:	df000515 	stw	fp,20(sp)
    fd64:	df000504 	addi	fp,sp,20
    fd68:	e13ffd15 	stw	r4,-12(fp)
    fd6c:	e17ffe15 	stw	r5,-8(fp)
    fd70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fd74:	e0bffd17 	ldw	r2,-12(fp)
    fd78:	10000616 	blt	r2,zero,fd94 <write+0x3c>
    fd7c:	e0bffd17 	ldw	r2,-12(fp)
    fd80:	10c00324 	muli	r3,r2,12
    fd84:	00800074 	movhi	r2,1
    fd88:	108b4a04 	addi	r2,r2,11560
    fd8c:	1885883a 	add	r2,r3,r2
    fd90:	00000106 	br	fd98 <write+0x40>
    fd94:	0005883a 	mov	r2,zero
    fd98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fd9c:	e0bffb17 	ldw	r2,-20(fp)
    fda0:	10002126 	beq	r2,zero,fe28 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fda4:	e0bffb17 	ldw	r2,-20(fp)
    fda8:	10800217 	ldw	r2,8(r2)
    fdac:	108000cc 	andi	r2,r2,3
    fdb0:	10001826 	beq	r2,zero,fe14 <write+0xbc>
    fdb4:	e0bffb17 	ldw	r2,-20(fp)
    fdb8:	10800017 	ldw	r2,0(r2)
    fdbc:	10800617 	ldw	r2,24(r2)
    fdc0:	10001426 	beq	r2,zero,fe14 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fdc4:	e0bffb17 	ldw	r2,-20(fp)
    fdc8:	10800017 	ldw	r2,0(r2)
    fdcc:	10800617 	ldw	r2,24(r2)
    fdd0:	e0ffff17 	ldw	r3,-4(fp)
    fdd4:	180d883a 	mov	r6,r3
    fdd8:	e17ffe17 	ldw	r5,-8(fp)
    fddc:	e13ffb17 	ldw	r4,-20(fp)
    fde0:	103ee83a 	callr	r2
    fde4:	e0bffc15 	stw	r2,-16(fp)
    fde8:	e0bffc17 	ldw	r2,-16(fp)
    fdec:	1000070e 	bge	r2,zero,fe0c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fdf0:	000fd1c0 	call	fd1c <alt_get_errno>
    fdf4:	1007883a 	mov	r3,r2
    fdf8:	e0bffc17 	ldw	r2,-16(fp)
    fdfc:	0085c83a 	sub	r2,zero,r2
    fe00:	18800015 	stw	r2,0(r3)
        return -1;
    fe04:	00bfffc4 	movi	r2,-1
    fe08:	00000c06 	br	fe3c <write+0xe4>
      }
      return rval;
    fe0c:	e0bffc17 	ldw	r2,-16(fp)
    fe10:	00000a06 	br	fe3c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fe14:	000fd1c0 	call	fd1c <alt_get_errno>
    fe18:	1007883a 	mov	r3,r2
    fe1c:	00800344 	movi	r2,13
    fe20:	18800015 	stw	r2,0(r3)
    fe24:	00000406 	br	fe38 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fe28:	000fd1c0 	call	fd1c <alt_get_errno>
    fe2c:	1007883a 	mov	r3,r2
    fe30:	00801444 	movi	r2,81
    fe34:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fe38:	00bfffc4 	movi	r2,-1
}
    fe3c:	e037883a 	mov	sp,fp
    fe40:	dfc00117 	ldw	ra,4(sp)
    fe44:	df000017 	ldw	fp,0(sp)
    fe48:	dec00204 	addi	sp,sp,8
    fe4c:	f800283a 	ret

0000fe50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fe50:	defffd04 	addi	sp,sp,-12
    fe54:	dfc00215 	stw	ra,8(sp)
    fe58:	df000115 	stw	fp,4(sp)
    fe5c:	df000104 	addi	fp,sp,4
    fe60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fe64:	d1600d04 	addi	r5,gp,-32716
    fe68:	e13fff17 	ldw	r4,-4(fp)
    fe6c:	0010ebc0 	call	10ebc <alt_dev_llist_insert>
}
    fe70:	e037883a 	mov	sp,fp
    fe74:	dfc00117 	ldw	ra,4(sp)
    fe78:	df000017 	ldw	fp,0(sp)
    fe7c:	dec00204 	addi	sp,sp,8
    fe80:	f800283a 	ret

0000fe84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fe84:	defffd04 	addi	sp,sp,-12
    fe88:	dfc00215 	stw	ra,8(sp)
    fe8c:	df000115 	stw	fp,4(sp)
    fe90:	df000104 	addi	fp,sp,4
    fe94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    fe98:	00116880 	call	11688 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fe9c:	00800044 	movi	r2,1
    fea0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fea4:	0001883a 	nop
    fea8:	e037883a 	mov	sp,fp
    feac:	dfc00117 	ldw	ra,4(sp)
    feb0:	df000017 	ldw	fp,0(sp)
    feb4:	dec00204 	addi	sp,sp,8
    feb8:	f800283a 	ret

0000febc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    febc:	defffe04 	addi	sp,sp,-8
    fec0:	dfc00115 	stw	ra,4(sp)
    fec4:	df000015 	stw	fp,0(sp)
    fec8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    fecc:	01c0fa04 	movi	r7,1000
    fed0:	000d883a 	mov	r6,zero
    fed4:	000b883a 	mov	r5,zero
    fed8:	01040034 	movhi	r4,4096
    fedc:	21040804 	addi	r4,r4,4128
    fee0:	0010a100 	call	10a10 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    fee4:	01800204 	movi	r6,8
    fee8:	000b883a 	mov	r5,zero
    feec:	01000074 	movhi	r4,1
    fef0:	210bb404 	addi	r4,r4,11984
    fef4:	00100940 	call	10094 <altera_avalon_jtag_uart_init>
    fef8:	01000074 	movhi	r4,1
    fefc:	210baa04 	addi	r4,r4,11944
    ff00:	000fe500 	call	fe50 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    ff04:	00c00044 	movi	r3,1
    ff08:	00840034 	movhi	r2,4096
    ff0c:	10842004 	addi	r2,r2,4224
    ff10:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ff14:	0001883a 	nop
}
    ff18:	0001883a 	nop
    ff1c:	e037883a 	mov	sp,fp
    ff20:	dfc00117 	ldw	ra,4(sp)
    ff24:	df000017 	ldw	fp,0(sp)
    ff28:	dec00204 	addi	sp,sp,8
    ff2c:	f800283a 	ret

0000ff30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ff30:	defffa04 	addi	sp,sp,-24
    ff34:	dfc00515 	stw	ra,20(sp)
    ff38:	df000415 	stw	fp,16(sp)
    ff3c:	df000404 	addi	fp,sp,16
    ff40:	e13ffd15 	stw	r4,-12(fp)
    ff44:	e17ffe15 	stw	r5,-8(fp)
    ff48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ff4c:	e0bffd17 	ldw	r2,-12(fp)
    ff50:	10800017 	ldw	r2,0(r2)
    ff54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ff58:	e0bffc17 	ldw	r2,-16(fp)
    ff5c:	10c00a04 	addi	r3,r2,40
    ff60:	e0bffd17 	ldw	r2,-12(fp)
    ff64:	10800217 	ldw	r2,8(r2)
    ff68:	100f883a 	mov	r7,r2
    ff6c:	e1bfff17 	ldw	r6,-4(fp)
    ff70:	e17ffe17 	ldw	r5,-8(fp)
    ff74:	1809883a 	mov	r4,r3
    ff78:	00105580 	call	10558 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ff7c:	e037883a 	mov	sp,fp
    ff80:	dfc00117 	ldw	ra,4(sp)
    ff84:	df000017 	ldw	fp,0(sp)
    ff88:	dec00204 	addi	sp,sp,8
    ff8c:	f800283a 	ret

0000ff90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ff90:	defffa04 	addi	sp,sp,-24
    ff94:	dfc00515 	stw	ra,20(sp)
    ff98:	df000415 	stw	fp,16(sp)
    ff9c:	df000404 	addi	fp,sp,16
    ffa0:	e13ffd15 	stw	r4,-12(fp)
    ffa4:	e17ffe15 	stw	r5,-8(fp)
    ffa8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ffac:	e0bffd17 	ldw	r2,-12(fp)
    ffb0:	10800017 	ldw	r2,0(r2)
    ffb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ffb8:	e0bffc17 	ldw	r2,-16(fp)
    ffbc:	10c00a04 	addi	r3,r2,40
    ffc0:	e0bffd17 	ldw	r2,-12(fp)
    ffc4:	10800217 	ldw	r2,8(r2)
    ffc8:	100f883a 	mov	r7,r2
    ffcc:	e1bfff17 	ldw	r6,-4(fp)
    ffd0:	e17ffe17 	ldw	r5,-8(fp)
    ffd4:	1809883a 	mov	r4,r3
    ffd8:	00107740 	call	10774 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ffdc:	e037883a 	mov	sp,fp
    ffe0:	dfc00117 	ldw	ra,4(sp)
    ffe4:	df000017 	ldw	fp,0(sp)
    ffe8:	dec00204 	addi	sp,sp,8
    ffec:	f800283a 	ret

0000fff0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fff0:	defffc04 	addi	sp,sp,-16
    fff4:	dfc00315 	stw	ra,12(sp)
    fff8:	df000215 	stw	fp,8(sp)
    fffc:	df000204 	addi	fp,sp,8
   10000:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10004:	e0bfff17 	ldw	r2,-4(fp)
   10008:	10800017 	ldw	r2,0(r2)
   1000c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10010:	e0bffe17 	ldw	r2,-8(fp)
   10014:	10c00a04 	addi	r3,r2,40
   10018:	e0bfff17 	ldw	r2,-4(fp)
   1001c:	10800217 	ldw	r2,8(r2)
   10020:	100b883a 	mov	r5,r2
   10024:	1809883a 	mov	r4,r3
   10028:	00104000 	call	10400 <altera_avalon_jtag_uart_close>
}
   1002c:	e037883a 	mov	sp,fp
   10030:	dfc00117 	ldw	ra,4(sp)
   10034:	df000017 	ldw	fp,0(sp)
   10038:	dec00204 	addi	sp,sp,8
   1003c:	f800283a 	ret

00010040 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10040:	defffa04 	addi	sp,sp,-24
   10044:	dfc00515 	stw	ra,20(sp)
   10048:	df000415 	stw	fp,16(sp)
   1004c:	df000404 	addi	fp,sp,16
   10050:	e13ffd15 	stw	r4,-12(fp)
   10054:	e17ffe15 	stw	r5,-8(fp)
   10058:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1005c:	e0bffd17 	ldw	r2,-12(fp)
   10060:	10800017 	ldw	r2,0(r2)
   10064:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10068:	e0bffc17 	ldw	r2,-16(fp)
   1006c:	10800a04 	addi	r2,r2,40
   10070:	e1bfff17 	ldw	r6,-4(fp)
   10074:	e17ffe17 	ldw	r5,-8(fp)
   10078:	1009883a 	mov	r4,r2
   1007c:	00104680 	call	10468 <altera_avalon_jtag_uart_ioctl>
}
   10080:	e037883a 	mov	sp,fp
   10084:	dfc00117 	ldw	ra,4(sp)
   10088:	df000017 	ldw	fp,0(sp)
   1008c:	dec00204 	addi	sp,sp,8
   10090:	f800283a 	ret

00010094 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10094:	defffa04 	addi	sp,sp,-24
   10098:	dfc00515 	stw	ra,20(sp)
   1009c:	df000415 	stw	fp,16(sp)
   100a0:	df000404 	addi	fp,sp,16
   100a4:	e13ffd15 	stw	r4,-12(fp)
   100a8:	e17ffe15 	stw	r5,-8(fp)
   100ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   100b0:	e0bffd17 	ldw	r2,-12(fp)
   100b4:	00c00044 	movi	r3,1
   100b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   100bc:	e0bffd17 	ldw	r2,-12(fp)
   100c0:	10800017 	ldw	r2,0(r2)
   100c4:	10800104 	addi	r2,r2,4
   100c8:	1007883a 	mov	r3,r2
   100cc:	e0bffd17 	ldw	r2,-12(fp)
   100d0:	10800817 	ldw	r2,32(r2)
   100d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   100d8:	e0bffe17 	ldw	r2,-8(fp)
   100dc:	e0ffff17 	ldw	r3,-4(fp)
   100e0:	d8000015 	stw	zero,0(sp)
   100e4:	e1fffd17 	ldw	r7,-12(fp)
   100e8:	01800074 	movhi	r6,1
   100ec:	31805504 	addi	r6,r6,340
   100f0:	180b883a 	mov	r5,r3
   100f4:	1009883a 	mov	r4,r2
   100f8:	00110540 	call	11054 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   100fc:	e0bffd17 	ldw	r2,-12(fp)
   10100:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10104:	e0bffd17 	ldw	r2,-12(fp)
   10108:	10800204 	addi	r2,r2,8
   1010c:	d0e6ea17 	ldw	r3,-25688(gp)
   10110:	e1fffd17 	ldw	r7,-12(fp)
   10114:	01800074 	movhi	r6,1
   10118:	3180d804 	addi	r6,r6,864
   1011c:	180b883a 	mov	r5,r3
   10120:	1009883a 	mov	r4,r2
   10124:	0010d0c0 	call	10d0c <alt_alarm_start>
   10128:	1000040e 	bge	r2,zero,1013c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1012c:	e0fffd17 	ldw	r3,-12(fp)
   10130:	00a00034 	movhi	r2,32768
   10134:	10bfffc4 	addi	r2,r2,-1
   10138:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1013c:	0001883a 	nop
   10140:	e037883a 	mov	sp,fp
   10144:	dfc00117 	ldw	ra,4(sp)
   10148:	df000017 	ldw	fp,0(sp)
   1014c:	dec00204 	addi	sp,sp,8
   10150:	f800283a 	ret

00010154 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10154:	defff804 	addi	sp,sp,-32
   10158:	df000715 	stw	fp,28(sp)
   1015c:	df000704 	addi	fp,sp,28
   10160:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10164:	e0bfff17 	ldw	r2,-4(fp)
   10168:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1016c:	e0bffb17 	ldw	r2,-20(fp)
   10170:	10800017 	ldw	r2,0(r2)
   10174:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10178:	e0bffc17 	ldw	r2,-16(fp)
   1017c:	10800104 	addi	r2,r2,4
   10180:	10800037 	ldwio	r2,0(r2)
   10184:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	1080c00c 	andi	r2,r2,768
   10190:	10006d26 	beq	r2,zero,10348 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	1080400c 	andi	r2,r2,256
   1019c:	10003526 	beq	r2,zero,10274 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   101a0:	00800074 	movhi	r2,1
   101a4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   101a8:	e0bffb17 	ldw	r2,-20(fp)
   101ac:	10800a17 	ldw	r2,40(r2)
   101b0:	10800044 	addi	r2,r2,1
   101b4:	1081ffcc 	andi	r2,r2,2047
   101b8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   101bc:	e0bffb17 	ldw	r2,-20(fp)
   101c0:	10c00b17 	ldw	r3,44(r2)
   101c4:	e0bffe17 	ldw	r2,-8(fp)
   101c8:	18801526 	beq	r3,r2,10220 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   101cc:	e0bffc17 	ldw	r2,-16(fp)
   101d0:	10800037 	ldwio	r2,0(r2)
   101d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   101d8:	e0bff917 	ldw	r2,-28(fp)
   101dc:	10a0000c 	andi	r2,r2,32768
   101e0:	10001126 	beq	r2,zero,10228 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   101e4:	e0bffb17 	ldw	r2,-20(fp)
   101e8:	10800a17 	ldw	r2,40(r2)
   101ec:	e0fff917 	ldw	r3,-28(fp)
   101f0:	1809883a 	mov	r4,r3
   101f4:	e0fffb17 	ldw	r3,-20(fp)
   101f8:	1885883a 	add	r2,r3,r2
   101fc:	10800e04 	addi	r2,r2,56
   10200:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10204:	e0bffb17 	ldw	r2,-20(fp)
   10208:	10800a17 	ldw	r2,40(r2)
   1020c:	10800044 	addi	r2,r2,1
   10210:	10c1ffcc 	andi	r3,r2,2047
   10214:	e0bffb17 	ldw	r2,-20(fp)
   10218:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1021c:	003fe206 	br	101a8 <__alt_mem_onchip_memory+0xf78101a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10220:	0001883a 	nop
   10224:	00000106 	br	1022c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10228:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1022c:	e0bff917 	ldw	r2,-28(fp)
   10230:	10bfffec 	andhi	r2,r2,65535
   10234:	10000f26 	beq	r2,zero,10274 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10238:	e0bffb17 	ldw	r2,-20(fp)
   1023c:	10c00817 	ldw	r3,32(r2)
   10240:	00bfff84 	movi	r2,-2
   10244:	1886703a 	and	r3,r3,r2
   10248:	e0bffb17 	ldw	r2,-20(fp)
   1024c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10250:	e0bffc17 	ldw	r2,-16(fp)
   10254:	10800104 	addi	r2,r2,4
   10258:	1007883a 	mov	r3,r2
   1025c:	e0bffb17 	ldw	r2,-20(fp)
   10260:	10800817 	ldw	r2,32(r2)
   10264:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10268:	e0bffc17 	ldw	r2,-16(fp)
   1026c:	10800104 	addi	r2,r2,4
   10270:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10274:	e0bffd17 	ldw	r2,-12(fp)
   10278:	1080800c 	andi	r2,r2,512
   1027c:	103fbe26 	beq	r2,zero,10178 <__alt_mem_onchip_memory+0xf7810178>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10280:	e0bffd17 	ldw	r2,-12(fp)
   10284:	1004d43a 	srli	r2,r2,16
   10288:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1028c:	00001406 	br	102e0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10290:	e0bffc17 	ldw	r2,-16(fp)
   10294:	e0fffb17 	ldw	r3,-20(fp)
   10298:	18c00d17 	ldw	r3,52(r3)
   1029c:	e13ffb17 	ldw	r4,-20(fp)
   102a0:	20c7883a 	add	r3,r4,r3
   102a4:	18c20e04 	addi	r3,r3,2104
   102a8:	18c00003 	ldbu	r3,0(r3)
   102ac:	18c03fcc 	andi	r3,r3,255
   102b0:	18c0201c 	xori	r3,r3,128
   102b4:	18ffe004 	addi	r3,r3,-128
   102b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   102bc:	e0bffb17 	ldw	r2,-20(fp)
   102c0:	10800d17 	ldw	r2,52(r2)
   102c4:	10800044 	addi	r2,r2,1
   102c8:	10c1ffcc 	andi	r3,r2,2047
   102cc:	e0bffb17 	ldw	r2,-20(fp)
   102d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   102d4:	e0bffa17 	ldw	r2,-24(fp)
   102d8:	10bfffc4 	addi	r2,r2,-1
   102dc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   102e0:	e0bffa17 	ldw	r2,-24(fp)
   102e4:	10000526 	beq	r2,zero,102fc <altera_avalon_jtag_uart_irq+0x1a8>
   102e8:	e0bffb17 	ldw	r2,-20(fp)
   102ec:	10c00d17 	ldw	r3,52(r2)
   102f0:	e0bffb17 	ldw	r2,-20(fp)
   102f4:	10800c17 	ldw	r2,48(r2)
   102f8:	18bfe51e 	bne	r3,r2,10290 <__alt_mem_onchip_memory+0xf7810290>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   102fc:	e0bffa17 	ldw	r2,-24(fp)
   10300:	103f9d26 	beq	r2,zero,10178 <__alt_mem_onchip_memory+0xf7810178>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10304:	e0bffb17 	ldw	r2,-20(fp)
   10308:	10c00817 	ldw	r3,32(r2)
   1030c:	00bfff44 	movi	r2,-3
   10310:	1886703a 	and	r3,r3,r2
   10314:	e0bffb17 	ldw	r2,-20(fp)
   10318:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1031c:	e0bffb17 	ldw	r2,-20(fp)
   10320:	10800017 	ldw	r2,0(r2)
   10324:	10800104 	addi	r2,r2,4
   10328:	1007883a 	mov	r3,r2
   1032c:	e0bffb17 	ldw	r2,-20(fp)
   10330:	10800817 	ldw	r2,32(r2)
   10334:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10338:	e0bffc17 	ldw	r2,-16(fp)
   1033c:	10800104 	addi	r2,r2,4
   10340:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10344:	003f8c06 	br	10178 <__alt_mem_onchip_memory+0xf7810178>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10348:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1034c:	0001883a 	nop
   10350:	e037883a 	mov	sp,fp
   10354:	df000017 	ldw	fp,0(sp)
   10358:	dec00104 	addi	sp,sp,4
   1035c:	f800283a 	ret

00010360 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10360:	defff804 	addi	sp,sp,-32
   10364:	df000715 	stw	fp,28(sp)
   10368:	df000704 	addi	fp,sp,28
   1036c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10370:	e0bffb17 	ldw	r2,-20(fp)
   10374:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10378:	e0bff917 	ldw	r2,-28(fp)
   1037c:	10800017 	ldw	r2,0(r2)
   10380:	10800104 	addi	r2,r2,4
   10384:	10800037 	ldwio	r2,0(r2)
   10388:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1038c:	e0bffa17 	ldw	r2,-24(fp)
   10390:	1081000c 	andi	r2,r2,1024
   10394:	10000b26 	beq	r2,zero,103c4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10398:	e0bff917 	ldw	r2,-28(fp)
   1039c:	10800017 	ldw	r2,0(r2)
   103a0:	10800104 	addi	r2,r2,4
   103a4:	1007883a 	mov	r3,r2
   103a8:	e0bff917 	ldw	r2,-28(fp)
   103ac:	10800817 	ldw	r2,32(r2)
   103b0:	10810014 	ori	r2,r2,1024
   103b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   103b8:	e0bff917 	ldw	r2,-28(fp)
   103bc:	10000915 	stw	zero,36(r2)
   103c0:	00000a06 	br	103ec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   103c4:	e0bff917 	ldw	r2,-28(fp)
   103c8:	10c00917 	ldw	r3,36(r2)
   103cc:	00a00034 	movhi	r2,32768
   103d0:	10bfff04 	addi	r2,r2,-4
   103d4:	10c00536 	bltu	r2,r3,103ec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   103d8:	e0bff917 	ldw	r2,-28(fp)
   103dc:	10800917 	ldw	r2,36(r2)
   103e0:	10c00044 	addi	r3,r2,1
   103e4:	e0bff917 	ldw	r2,-28(fp)
   103e8:	10c00915 	stw	r3,36(r2)
   103ec:	d0a6ea17 	ldw	r2,-25688(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   103f0:	e037883a 	mov	sp,fp
   103f4:	df000017 	ldw	fp,0(sp)
   103f8:	dec00104 	addi	sp,sp,4
   103fc:	f800283a 	ret

00010400 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10400:	defffd04 	addi	sp,sp,-12
   10404:	df000215 	stw	fp,8(sp)
   10408:	df000204 	addi	fp,sp,8
   1040c:	e13ffe15 	stw	r4,-8(fp)
   10410:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10414:	00000506 	br	1042c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10418:	e0bfff17 	ldw	r2,-4(fp)
   1041c:	1090000c 	andi	r2,r2,16384
   10420:	10000226 	beq	r2,zero,1042c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10424:	00bffd44 	movi	r2,-11
   10428:	00000b06 	br	10458 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1042c:	e0bffe17 	ldw	r2,-8(fp)
   10430:	10c00d17 	ldw	r3,52(r2)
   10434:	e0bffe17 	ldw	r2,-8(fp)
   10438:	10800c17 	ldw	r2,48(r2)
   1043c:	18800526 	beq	r3,r2,10454 <altera_avalon_jtag_uart_close+0x54>
   10440:	e0bffe17 	ldw	r2,-8(fp)
   10444:	10c00917 	ldw	r3,36(r2)
   10448:	e0bffe17 	ldw	r2,-8(fp)
   1044c:	10800117 	ldw	r2,4(r2)
   10450:	18bff136 	bltu	r3,r2,10418 <__alt_mem_onchip_memory+0xf7810418>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10454:	0005883a 	mov	r2,zero
}
   10458:	e037883a 	mov	sp,fp
   1045c:	df000017 	ldw	fp,0(sp)
   10460:	dec00104 	addi	sp,sp,4
   10464:	f800283a 	ret

00010468 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10468:	defffa04 	addi	sp,sp,-24
   1046c:	df000515 	stw	fp,20(sp)
   10470:	df000504 	addi	fp,sp,20
   10474:	e13ffd15 	stw	r4,-12(fp)
   10478:	e17ffe15 	stw	r5,-8(fp)
   1047c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10480:	00bff9c4 	movi	r2,-25
   10484:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10488:	e0bffe17 	ldw	r2,-8(fp)
   1048c:	10da8060 	cmpeqi	r3,r2,27137
   10490:	1800031e 	bne	r3,zero,104a0 <altera_avalon_jtag_uart_ioctl+0x38>
   10494:	109a80a0 	cmpeqi	r2,r2,27138
   10498:	1000181e 	bne	r2,zero,104fc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1049c:	00002906 	br	10544 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   104a0:	e0bffd17 	ldw	r2,-12(fp)
   104a4:	10c00117 	ldw	r3,4(r2)
   104a8:	00a00034 	movhi	r2,32768
   104ac:	10bfffc4 	addi	r2,r2,-1
   104b0:	18802126 	beq	r3,r2,10538 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   104b4:	e0bfff17 	ldw	r2,-4(fp)
   104b8:	10800017 	ldw	r2,0(r2)
   104bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   104c0:	e0bffc17 	ldw	r2,-16(fp)
   104c4:	10800090 	cmplti	r2,r2,2
   104c8:	1000061e 	bne	r2,zero,104e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   104cc:	e0fffc17 	ldw	r3,-16(fp)
   104d0:	00a00034 	movhi	r2,32768
   104d4:	10bfffc4 	addi	r2,r2,-1
   104d8:	18800226 	beq	r3,r2,104e4 <altera_avalon_jtag_uart_ioctl+0x7c>
   104dc:	e0bffc17 	ldw	r2,-16(fp)
   104e0:	00000206 	br	104ec <altera_avalon_jtag_uart_ioctl+0x84>
   104e4:	00a00034 	movhi	r2,32768
   104e8:	10bfff84 	addi	r2,r2,-2
   104ec:	e0fffd17 	ldw	r3,-12(fp)
   104f0:	18800115 	stw	r2,4(r3)
      rc = 0;
   104f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   104f8:	00000f06 	br	10538 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   104fc:	e0bffd17 	ldw	r2,-12(fp)
   10500:	10c00117 	ldw	r3,4(r2)
   10504:	00a00034 	movhi	r2,32768
   10508:	10bfffc4 	addi	r2,r2,-1
   1050c:	18800c26 	beq	r3,r2,10540 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10510:	e0bffd17 	ldw	r2,-12(fp)
   10514:	10c00917 	ldw	r3,36(r2)
   10518:	e0bffd17 	ldw	r2,-12(fp)
   1051c:	10800117 	ldw	r2,4(r2)
   10520:	1885803a 	cmpltu	r2,r3,r2
   10524:	10c03fcc 	andi	r3,r2,255
   10528:	e0bfff17 	ldw	r2,-4(fp)
   1052c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10530:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10534:	00000206 	br	10540 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10538:	0001883a 	nop
   1053c:	00000106 	br	10544 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10540:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10544:	e0bffb17 	ldw	r2,-20(fp)
}
   10548:	e037883a 	mov	sp,fp
   1054c:	df000017 	ldw	fp,0(sp)
   10550:	dec00104 	addi	sp,sp,4
   10554:	f800283a 	ret

00010558 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10558:	defff304 	addi	sp,sp,-52
   1055c:	dfc00c15 	stw	ra,48(sp)
   10560:	df000b15 	stw	fp,44(sp)
   10564:	df000b04 	addi	fp,sp,44
   10568:	e13ffc15 	stw	r4,-16(fp)
   1056c:	e17ffd15 	stw	r5,-12(fp)
   10570:	e1bffe15 	stw	r6,-8(fp)
   10574:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10578:	e0bffd17 	ldw	r2,-12(fp)
   1057c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10580:	00004706 	br	106a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10584:	e0bffc17 	ldw	r2,-16(fp)
   10588:	10800a17 	ldw	r2,40(r2)
   1058c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10590:	e0bffc17 	ldw	r2,-16(fp)
   10594:	10800b17 	ldw	r2,44(r2)
   10598:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1059c:	e0fff717 	ldw	r3,-36(fp)
   105a0:	e0bff817 	ldw	r2,-32(fp)
   105a4:	18800536 	bltu	r3,r2,105bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   105a8:	e0fff717 	ldw	r3,-36(fp)
   105ac:	e0bff817 	ldw	r2,-32(fp)
   105b0:	1885c83a 	sub	r2,r3,r2
   105b4:	e0bff615 	stw	r2,-40(fp)
   105b8:	00000406 	br	105cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   105bc:	00c20004 	movi	r3,2048
   105c0:	e0bff817 	ldw	r2,-32(fp)
   105c4:	1885c83a 	sub	r2,r3,r2
   105c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   105cc:	e0bff617 	ldw	r2,-40(fp)
   105d0:	10001e26 	beq	r2,zero,1064c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   105d4:	e0fffe17 	ldw	r3,-8(fp)
   105d8:	e0bff617 	ldw	r2,-40(fp)
   105dc:	1880022e 	bgeu	r3,r2,105e8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   105e0:	e0bffe17 	ldw	r2,-8(fp)
   105e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	10c00e04 	addi	r3,r2,56
   105f0:	e0bff817 	ldw	r2,-32(fp)
   105f4:	1885883a 	add	r2,r3,r2
   105f8:	e1bff617 	ldw	r6,-40(fp)
   105fc:	100b883a 	mov	r5,r2
   10600:	e13ff517 	ldw	r4,-44(fp)
   10604:	000a8b80 	call	a8b8 <memcpy>
      ptr   += n;
   10608:	e0fff517 	ldw	r3,-44(fp)
   1060c:	e0bff617 	ldw	r2,-40(fp)
   10610:	1885883a 	add	r2,r3,r2
   10614:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10618:	e0fffe17 	ldw	r3,-8(fp)
   1061c:	e0bff617 	ldw	r2,-40(fp)
   10620:	1885c83a 	sub	r2,r3,r2
   10624:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10628:	e0fff817 	ldw	r3,-32(fp)
   1062c:	e0bff617 	ldw	r2,-40(fp)
   10630:	1885883a 	add	r2,r3,r2
   10634:	10c1ffcc 	andi	r3,r2,2047
   10638:	e0bffc17 	ldw	r2,-16(fp)
   1063c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10640:	e0bffe17 	ldw	r2,-8(fp)
   10644:	00bfcf16 	blt	zero,r2,10584 <__alt_mem_onchip_memory+0xf7810584>
   10648:	00000106 	br	10650 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1064c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10650:	e0fff517 	ldw	r3,-44(fp)
   10654:	e0bffd17 	ldw	r2,-12(fp)
   10658:	1880141e 	bne	r3,r2,106ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1065c:	e0bfff17 	ldw	r2,-4(fp)
   10660:	1090000c 	andi	r2,r2,16384
   10664:	1000131e 	bne	r2,zero,106b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10668:	0001883a 	nop
   1066c:	e0bffc17 	ldw	r2,-16(fp)
   10670:	10c00a17 	ldw	r3,40(r2)
   10674:	e0bff717 	ldw	r2,-36(fp)
   10678:	1880051e 	bne	r3,r2,10690 <altera_avalon_jtag_uart_read+0x138>
   1067c:	e0bffc17 	ldw	r2,-16(fp)
   10680:	10c00917 	ldw	r3,36(r2)
   10684:	e0bffc17 	ldw	r2,-16(fp)
   10688:	10800117 	ldw	r2,4(r2)
   1068c:	18bff736 	bltu	r3,r2,1066c <__alt_mem_onchip_memory+0xf781066c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10690:	e0bffc17 	ldw	r2,-16(fp)
   10694:	10c00a17 	ldw	r3,40(r2)
   10698:	e0bff717 	ldw	r2,-36(fp)
   1069c:	18800726 	beq	r3,r2,106bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   106a0:	e0bffe17 	ldw	r2,-8(fp)
   106a4:	00bfb716 	blt	zero,r2,10584 <__alt_mem_onchip_memory+0xf7810584>
   106a8:	00000506 	br	106c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   106ac:	0001883a 	nop
   106b0:	00000306 	br	106c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   106b4:	0001883a 	nop
   106b8:	00000106 	br	106c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   106bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   106c0:	e0fff517 	ldw	r3,-44(fp)
   106c4:	e0bffd17 	ldw	r2,-12(fp)
   106c8:	18801826 	beq	r3,r2,1072c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106cc:	0005303a 	rdctl	r2,status
   106d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106d4:	e0fffb17 	ldw	r3,-20(fp)
   106d8:	00bfff84 	movi	r2,-2
   106dc:	1884703a 	and	r2,r3,r2
   106e0:	1001703a 	wrctl	status,r2
  
  return context;
   106e4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   106e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   106ec:	e0bffc17 	ldw	r2,-16(fp)
   106f0:	10800817 	ldw	r2,32(r2)
   106f4:	10c00054 	ori	r3,r2,1
   106f8:	e0bffc17 	ldw	r2,-16(fp)
   106fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10700:	e0bffc17 	ldw	r2,-16(fp)
   10704:	10800017 	ldw	r2,0(r2)
   10708:	10800104 	addi	r2,r2,4
   1070c:	1007883a 	mov	r3,r2
   10710:	e0bffc17 	ldw	r2,-16(fp)
   10714:	10800817 	ldw	r2,32(r2)
   10718:	18800035 	stwio	r2,0(r3)
   1071c:	e0bffa17 	ldw	r2,-24(fp)
   10720:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10724:	e0bff917 	ldw	r2,-28(fp)
   10728:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1072c:	e0fff517 	ldw	r3,-44(fp)
   10730:	e0bffd17 	ldw	r2,-12(fp)
   10734:	18800426 	beq	r3,r2,10748 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10738:	e0fff517 	ldw	r3,-44(fp)
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	1885c83a 	sub	r2,r3,r2
   10744:	00000606 	br	10760 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10748:	e0bfff17 	ldw	r2,-4(fp)
   1074c:	1090000c 	andi	r2,r2,16384
   10750:	10000226 	beq	r2,zero,1075c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10754:	00bffd44 	movi	r2,-11
   10758:	00000106 	br	10760 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1075c:	00bffec4 	movi	r2,-5
}
   10760:	e037883a 	mov	sp,fp
   10764:	dfc00117 	ldw	ra,4(sp)
   10768:	df000017 	ldw	fp,0(sp)
   1076c:	dec00204 	addi	sp,sp,8
   10770:	f800283a 	ret

00010774 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10774:	defff304 	addi	sp,sp,-52
   10778:	dfc00c15 	stw	ra,48(sp)
   1077c:	df000b15 	stw	fp,44(sp)
   10780:	df000b04 	addi	fp,sp,44
   10784:	e13ffc15 	stw	r4,-16(fp)
   10788:	e17ffd15 	stw	r5,-12(fp)
   1078c:	e1bffe15 	stw	r6,-8(fp)
   10790:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10794:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10798:	e0bffd17 	ldw	r2,-12(fp)
   1079c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   107a0:	00003706 	br	10880 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   107a4:	e0bffc17 	ldw	r2,-16(fp)
   107a8:	10800c17 	ldw	r2,48(r2)
   107ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   107b0:	e0bffc17 	ldw	r2,-16(fp)
   107b4:	10800d17 	ldw	r2,52(r2)
   107b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   107bc:	e0fff917 	ldw	r3,-28(fp)
   107c0:	e0bff517 	ldw	r2,-44(fp)
   107c4:	1880062e 	bgeu	r3,r2,107e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   107c8:	e0fff517 	ldw	r3,-44(fp)
   107cc:	e0bff917 	ldw	r2,-28(fp)
   107d0:	1885c83a 	sub	r2,r3,r2
   107d4:	10bfffc4 	addi	r2,r2,-1
   107d8:	e0bff615 	stw	r2,-40(fp)
   107dc:	00000b06 	br	1080c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   107e0:	e0bff517 	ldw	r2,-44(fp)
   107e4:	10000526 	beq	r2,zero,107fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   107e8:	00c20004 	movi	r3,2048
   107ec:	e0bff917 	ldw	r2,-28(fp)
   107f0:	1885c83a 	sub	r2,r3,r2
   107f4:	e0bff615 	stw	r2,-40(fp)
   107f8:	00000406 	br	1080c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   107fc:	00c1ffc4 	movi	r3,2047
   10800:	e0bff917 	ldw	r2,-28(fp)
   10804:	1885c83a 	sub	r2,r3,r2
   10808:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1080c:	e0bff617 	ldw	r2,-40(fp)
   10810:	10001e26 	beq	r2,zero,1088c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10814:	e0fffe17 	ldw	r3,-8(fp)
   10818:	e0bff617 	ldw	r2,-40(fp)
   1081c:	1880022e 	bgeu	r3,r2,10828 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10820:	e0bffe17 	ldw	r2,-8(fp)
   10824:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10828:	e0bffc17 	ldw	r2,-16(fp)
   1082c:	10c20e04 	addi	r3,r2,2104
   10830:	e0bff917 	ldw	r2,-28(fp)
   10834:	1885883a 	add	r2,r3,r2
   10838:	e1bff617 	ldw	r6,-40(fp)
   1083c:	e17ffd17 	ldw	r5,-12(fp)
   10840:	1009883a 	mov	r4,r2
   10844:	000a8b80 	call	a8b8 <memcpy>
      ptr   += n;
   10848:	e0fffd17 	ldw	r3,-12(fp)
   1084c:	e0bff617 	ldw	r2,-40(fp)
   10850:	1885883a 	add	r2,r3,r2
   10854:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10858:	e0fffe17 	ldw	r3,-8(fp)
   1085c:	e0bff617 	ldw	r2,-40(fp)
   10860:	1885c83a 	sub	r2,r3,r2
   10864:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10868:	e0fff917 	ldw	r3,-28(fp)
   1086c:	e0bff617 	ldw	r2,-40(fp)
   10870:	1885883a 	add	r2,r3,r2
   10874:	10c1ffcc 	andi	r3,r2,2047
   10878:	e0bffc17 	ldw	r2,-16(fp)
   1087c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10880:	e0bffe17 	ldw	r2,-8(fp)
   10884:	00bfc716 	blt	zero,r2,107a4 <__alt_mem_onchip_memory+0xf78107a4>
   10888:	00000106 	br	10890 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1088c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10890:	0005303a 	rdctl	r2,status
   10894:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10898:	e0fffb17 	ldw	r3,-20(fp)
   1089c:	00bfff84 	movi	r2,-2
   108a0:	1884703a 	and	r2,r3,r2
   108a4:	1001703a 	wrctl	status,r2
  
  return context;
   108a8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   108ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   108b0:	e0bffc17 	ldw	r2,-16(fp)
   108b4:	10800817 	ldw	r2,32(r2)
   108b8:	10c00094 	ori	r3,r2,2
   108bc:	e0bffc17 	ldw	r2,-16(fp)
   108c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   108c4:	e0bffc17 	ldw	r2,-16(fp)
   108c8:	10800017 	ldw	r2,0(r2)
   108cc:	10800104 	addi	r2,r2,4
   108d0:	1007883a 	mov	r3,r2
   108d4:	e0bffc17 	ldw	r2,-16(fp)
   108d8:	10800817 	ldw	r2,32(r2)
   108dc:	18800035 	stwio	r2,0(r3)
   108e0:	e0bffa17 	ldw	r2,-24(fp)
   108e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108e8:	e0bff817 	ldw	r2,-32(fp)
   108ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   108f0:	e0bffe17 	ldw	r2,-8(fp)
   108f4:	0080100e 	bge	zero,r2,10938 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   108f8:	e0bfff17 	ldw	r2,-4(fp)
   108fc:	1090000c 	andi	r2,r2,16384
   10900:	1000101e 	bne	r2,zero,10944 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10904:	0001883a 	nop
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	10c00d17 	ldw	r3,52(r2)
   10910:	e0bff517 	ldw	r2,-44(fp)
   10914:	1880051e 	bne	r3,r2,1092c <altera_avalon_jtag_uart_write+0x1b8>
   10918:	e0bffc17 	ldw	r2,-16(fp)
   1091c:	10c00917 	ldw	r3,36(r2)
   10920:	e0bffc17 	ldw	r2,-16(fp)
   10924:	10800117 	ldw	r2,4(r2)
   10928:	18bff736 	bltu	r3,r2,10908 <__alt_mem_onchip_memory+0xf7810908>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1092c:	e0bffc17 	ldw	r2,-16(fp)
   10930:	10800917 	ldw	r2,36(r2)
   10934:	1000051e 	bne	r2,zero,1094c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10938:	e0bffe17 	ldw	r2,-8(fp)
   1093c:	00bfd016 	blt	zero,r2,10880 <__alt_mem_onchip_memory+0xf7810880>
   10940:	00000306 	br	10950 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10944:	0001883a 	nop
   10948:	00000106 	br	10950 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1094c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10950:	e0fffd17 	ldw	r3,-12(fp)
   10954:	e0bff717 	ldw	r2,-36(fp)
   10958:	18800426 	beq	r3,r2,1096c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1095c:	e0fffd17 	ldw	r3,-12(fp)
   10960:	e0bff717 	ldw	r2,-36(fp)
   10964:	1885c83a 	sub	r2,r3,r2
   10968:	00000606 	br	10984 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1096c:	e0bfff17 	ldw	r2,-4(fp)
   10970:	1090000c 	andi	r2,r2,16384
   10974:	10000226 	beq	r2,zero,10980 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10978:	00bffd44 	movi	r2,-11
   1097c:	00000106 	br	10984 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10980:	00bffec4 	movi	r2,-5
}
   10984:	e037883a 	mov	sp,fp
   10988:	dfc00117 	ldw	ra,4(sp)
   1098c:	df000017 	ldw	fp,0(sp)
   10990:	dec00204 	addi	sp,sp,8
   10994:	f800283a 	ret

00010998 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10998:	defffa04 	addi	sp,sp,-24
   1099c:	dfc00515 	stw	ra,20(sp)
   109a0:	df000415 	stw	fp,16(sp)
   109a4:	df000404 	addi	fp,sp,16
   109a8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   109ac:	0007883a 	mov	r3,zero
   109b0:	e0bfff17 	ldw	r2,-4(fp)
   109b4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   109b8:	e0bfff17 	ldw	r2,-4(fp)
   109bc:	10800104 	addi	r2,r2,4
   109c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109c4:	0005303a 	rdctl	r2,status
   109c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109cc:	e0fffd17 	ldw	r3,-12(fp)
   109d0:	00bfff84 	movi	r2,-2
   109d4:	1884703a 	and	r2,r3,r2
   109d8:	1001703a 	wrctl	status,r2
  
  return context;
   109dc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   109e0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   109e4:	000fc140 	call	fc14 <alt_tick>
   109e8:	e0bffc17 	ldw	r2,-16(fp)
   109ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109f0:	e0bffe17 	ldw	r2,-8(fp)
   109f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   109f8:	0001883a 	nop
   109fc:	e037883a 	mov	sp,fp
   10a00:	dfc00117 	ldw	ra,4(sp)
   10a04:	df000017 	ldw	fp,0(sp)
   10a08:	dec00204 	addi	sp,sp,8
   10a0c:	f800283a 	ret

00010a10 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10a10:	defff804 	addi	sp,sp,-32
   10a14:	dfc00715 	stw	ra,28(sp)
   10a18:	df000615 	stw	fp,24(sp)
   10a1c:	df000604 	addi	fp,sp,24
   10a20:	e13ffc15 	stw	r4,-16(fp)
   10a24:	e17ffd15 	stw	r5,-12(fp)
   10a28:	e1bffe15 	stw	r6,-8(fp)
   10a2c:	e1ffff15 	stw	r7,-4(fp)
   10a30:	e0bfff17 	ldw	r2,-4(fp)
   10a34:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10a38:	d0a6ea17 	ldw	r2,-25688(gp)
   10a3c:	1000021e 	bne	r2,zero,10a48 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10a40:	e0bffb17 	ldw	r2,-20(fp)
   10a44:	d0a6ea15 	stw	r2,-25688(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10a48:	e0bffc17 	ldw	r2,-16(fp)
   10a4c:	10800104 	addi	r2,r2,4
   10a50:	00c001c4 	movi	r3,7
   10a54:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10a58:	d8000015 	stw	zero,0(sp)
   10a5c:	e1fffc17 	ldw	r7,-16(fp)
   10a60:	01800074 	movhi	r6,1
   10a64:	31826604 	addi	r6,r6,2456
   10a68:	e17ffe17 	ldw	r5,-8(fp)
   10a6c:	e13ffd17 	ldw	r4,-12(fp)
   10a70:	00110540 	call	11054 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10a74:	0001883a 	nop
   10a78:	e037883a 	mov	sp,fp
   10a7c:	dfc00117 	ldw	ra,4(sp)
   10a80:	df000017 	ldw	fp,0(sp)
   10a84:	dec00204 	addi	sp,sp,8
   10a88:	f800283a 	ret

00010a8c <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   10a8c:	deffe504 	addi	sp,sp,-108
   10a90:	dfc01915 	stw	ra,100(sp)
   10a94:	df001815 	stw	fp,96(sp)
   10a98:	dcc01715 	stw	r19,92(sp)
   10a9c:	dc801615 	stw	r18,88(sp)
   10aa0:	dc401515 	stw	r17,84(sp)
   10aa4:	dc001415 	stw	r16,80(sp)
   10aa8:	df001804 	addi	fp,sp,96
   10aac:	e13ff915 	stw	r4,-28(fp)
   10ab0:	e17ffa15 	stw	r5,-24(fp)
   10ab4:	e1bffb15 	stw	r6,-20(fp)
   10ab8:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
   10abc:	00800044 	movi	r2,1
   10ac0:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
   10ac4:	00800074 	movhi	r2,1
   10ac8:	1088d704 	addi	r2,r2,9052
   10acc:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
   10ad0:	00800074 	movhi	r2,1
   10ad4:	1088e804 	addi	r2,r2,9120
   10ad8:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
   10adc:	0007883a 	mov	r3,zero
   10ae0:	e0bff917 	ldw	r2,-28(fp)
   10ae4:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
   10ae8:	e0800204 	addi	r2,fp,8
   10aec:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
   10af0:	e13ff917 	ldw	r4,-28(fp)
   10af4:	00117680 	call	11768 <perf_get_total_time>
   10af8:	e0bff215 	stw	r2,-56(fp)
   10afc:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
   10b00:	e13ff217 	ldw	r4,-56(fp)
   10b04:	e17ff317 	ldw	r5,-52(fp)
   10b08:	0011f000 	call	11f00 <__floatundidf>
   10b0c:	1021883a 	mov	r16,r2
   10b10:	1823883a 	mov	r17,r3
   10b14:	e13ffa17 	ldw	r4,-24(fp)
   10b18:	000f0cc0 	call	f0cc <__floatunsidf>
   10b1c:	1009883a 	mov	r4,r2
   10b20:	180b883a 	mov	r5,r3
   10b24:	200d883a 	mov	r6,r4
   10b28:	280f883a 	mov	r7,r5
   10b2c:	8009883a 	mov	r4,r16
   10b30:	880b883a 	mov	r5,r17
   10b34:	0002b3c0 	call	2b3c <__divdf3>
   10b38:	1009883a 	mov	r4,r2
   10b3c:	180b883a 	mov	r5,r3
   10b40:	e13ff415 	stw	r4,-48(fp)
   10b44:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
   10b48:	e0bff017 	ldw	r2,-64(fp)
   10b4c:	d8800315 	stw	r2,12(sp)
   10b50:	e0bff117 	ldw	r2,-60(fp)
   10b54:	d8800215 	stw	r2,8(sp)
   10b58:	e0bff017 	ldw	r2,-64(fp)
   10b5c:	d8800115 	stw	r2,4(sp)
   10b60:	e0bff317 	ldw	r2,-52(fp)
   10b64:	d8800015 	stw	r2,0(sp)
   10b68:	e1fff217 	ldw	r7,-56(fp)
   10b6c:	e17ff417 	ldw	r5,-48(fp)
   10b70:	e1bff517 	ldw	r6,-44(fp)
   10b74:	01000074 	movhi	r4,1
   10b78:	2108f904 	addi	r4,r4,9188
   10b7c:	0004c740 	call	4c74 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
   10b80:	e0bff817 	ldw	r2,-32(fp)
   10b84:	10c00104 	addi	r3,r2,4
   10b88:	e0fff815 	stw	r3,-32(fp)
   10b8c:	10800017 	ldw	r2,0(r2)
   10b90:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
   10b94:	00800044 	movi	r2,1
   10b98:	e0bfef15 	stw	r2,-68(fp)
   10b9c:	00004e06 	br	10cd8 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
   10ba0:	e17fef17 	ldw	r5,-68(fp)
   10ba4:	e13ff917 	ldw	r4,-28(fp)
   10ba8:	00116ac0 	call	116ac <perf_get_section_time>
   10bac:	e0bff615 	stw	r2,-40(fp)
   10bb0:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
   10bb4:	e13ff617 	ldw	r4,-40(fp)
   10bb8:	e17ff717 	ldw	r5,-36(fp)
   10bbc:	0011f000 	call	11f00 <__floatundidf>
   10bc0:	1011883a 	mov	r8,r2
   10bc4:	1813883a 	mov	r9,r3
   10bc8:	000d883a 	mov	r6,zero
   10bcc:	01d01674 	movhi	r7,16473
   10bd0:	4009883a 	mov	r4,r8
   10bd4:	480b883a 	mov	r5,r9
   10bd8:	00035f40 	call	35f4 <__muldf3>
   10bdc:	1009883a 	mov	r4,r2
   10be0:	180b883a 	mov	r5,r3
   10be4:	2021883a 	mov	r16,r4
   10be8:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   10bec:	e13ff217 	ldw	r4,-56(fp)
   10bf0:	e17ff317 	ldw	r5,-52(fp)
   10bf4:	0011f000 	call	11f00 <__floatundidf>
   10bf8:	1009883a 	mov	r4,r2
   10bfc:	180b883a 	mov	r5,r3
   10c00:	200d883a 	mov	r6,r4
   10c04:	280f883a 	mov	r7,r5
   10c08:	8009883a 	mov	r4,r16
   10c0c:	880b883a 	mov	r5,r17
   10c10:	0002b3c0 	call	2b3c <__divdf3>
   10c14:	1009883a 	mov	r4,r2
   10c18:	180b883a 	mov	r5,r3
   10c1c:	2025883a 	mov	r18,r4
   10c20:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
   10c24:	e13ff617 	ldw	r4,-40(fp)
   10c28:	e17ff717 	ldw	r5,-36(fp)
   10c2c:	0011f000 	call	11f00 <__floatundidf>
   10c30:	1021883a 	mov	r16,r2
   10c34:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   10c38:	e13ffa17 	ldw	r4,-24(fp)
   10c3c:	000f0cc0 	call	f0cc <__floatunsidf>
   10c40:	1009883a 	mov	r4,r2
   10c44:	180b883a 	mov	r5,r3
   10c48:	200d883a 	mov	r6,r4
   10c4c:	280f883a 	mov	r7,r5
   10c50:	8009883a 	mov	r4,r16
   10c54:	880b883a 	mov	r5,r17
   10c58:	0002b3c0 	call	2b3c <__divdf3>
   10c5c:	1009883a 	mov	r4,r2
   10c60:	180b883a 	mov	r5,r3
   10c64:	2021883a 	mov	r16,r4
   10c68:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
   10c6c:	e17fef17 	ldw	r5,-68(fp)
   10c70:	e13ff917 	ldw	r4,-28(fp)
   10c74:	00117b40 	call	117b4 <perf_get_num_starts>
   10c78:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   10c7c:	e0bff017 	ldw	r2,-64(fp)
   10c80:	d8800515 	stw	r2,20(sp)
   10c84:	d8c00415 	stw	r3,16(sp)
   10c88:	e0bff617 	ldw	r2,-40(fp)
   10c8c:	d8800215 	stw	r2,8(sp)
   10c90:	e0bff717 	ldw	r2,-36(fp)
   10c94:	d8800315 	stw	r2,12(sp)
   10c98:	dc000015 	stw	r16,0(sp)
   10c9c:	dc400115 	stw	r17,4(sp)
   10ca0:	900d883a 	mov	r6,r18
   10ca4:	980f883a 	mov	r7,r19
   10ca8:	e17fee17 	ldw	r5,-72(fp)
   10cac:	01000074 	movhi	r4,1
   10cb0:	21090e04 	addi	r4,r4,9272
   10cb4:	0004c740 	call	4c74 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
   10cb8:	e0bff817 	ldw	r2,-32(fp)
   10cbc:	10c00104 	addi	r3,r2,4
   10cc0:	e0fff815 	stw	r3,-32(fp)
   10cc4:	10800017 	ldw	r2,0(r2)
   10cc8:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
   10ccc:	e0bfef17 	ldw	r2,-68(fp)
   10cd0:	10800044 	addi	r2,r2,1
   10cd4:	e0bfef15 	stw	r2,-68(fp)
   10cd8:	e0bfef17 	ldw	r2,-68(fp)
   10cdc:	e0fffb17 	ldw	r3,-20(fp)
   10ce0:	18bfaf0e 	bge	r3,r2,10ba0 <__alt_mem_onchip_memory+0xf7810ba0>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
   10ce4:	0005883a 	mov	r2,zero
}
   10ce8:	e6fffc04 	addi	sp,fp,-16
   10cec:	dfc00517 	ldw	ra,20(sp)
   10cf0:	df000417 	ldw	fp,16(sp)
   10cf4:	dcc00317 	ldw	r19,12(sp)
   10cf8:	dc800217 	ldw	r18,8(sp)
   10cfc:	dc400117 	ldw	r17,4(sp)
   10d00:	dc000017 	ldw	r16,0(sp)
   10d04:	dec00704 	addi	sp,sp,28
   10d08:	f800283a 	ret

00010d0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10d0c:	defff504 	addi	sp,sp,-44
   10d10:	df000a15 	stw	fp,40(sp)
   10d14:	df000a04 	addi	fp,sp,40
   10d18:	e13ffc15 	stw	r4,-16(fp)
   10d1c:	e17ffd15 	stw	r5,-12(fp)
   10d20:	e1bffe15 	stw	r6,-8(fp)
   10d24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10d28:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10d2c:	d0a6ea17 	ldw	r2,-25688(gp)
  
  if (alt_ticks_per_second ())
   10d30:	10003c26 	beq	r2,zero,10e24 <alt_alarm_start+0x118>
  {
    if (alarm)
   10d34:	e0bffc17 	ldw	r2,-16(fp)
   10d38:	10003826 	beq	r2,zero,10e1c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10d3c:	e0bffc17 	ldw	r2,-16(fp)
   10d40:	e0fffe17 	ldw	r3,-8(fp)
   10d44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10d48:	e0bffc17 	ldw	r2,-16(fp)
   10d4c:	e0ffff17 	ldw	r3,-4(fp)
   10d50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d54:	0005303a 	rdctl	r2,status
   10d58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d5c:	e0fff917 	ldw	r3,-28(fp)
   10d60:	00bfff84 	movi	r2,-2
   10d64:	1884703a 	and	r2,r3,r2
   10d68:	1001703a 	wrctl	status,r2
  
  return context;
   10d6c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10d70:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10d74:	d0a6eb17 	ldw	r2,-25684(gp)
      
      current_nticks = alt_nticks();
   10d78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10d7c:	e0fffd17 	ldw	r3,-12(fp)
   10d80:	e0bff617 	ldw	r2,-40(fp)
   10d84:	1885883a 	add	r2,r3,r2
   10d88:	10c00044 	addi	r3,r2,1
   10d8c:	e0bffc17 	ldw	r2,-16(fp)
   10d90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10d94:	e0bffc17 	ldw	r2,-16(fp)
   10d98:	10c00217 	ldw	r3,8(r2)
   10d9c:	e0bff617 	ldw	r2,-40(fp)
   10da0:	1880042e 	bgeu	r3,r2,10db4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10da4:	e0bffc17 	ldw	r2,-16(fp)
   10da8:	00c00044 	movi	r3,1
   10dac:	10c00405 	stb	r3,16(r2)
   10db0:	00000206 	br	10dbc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10db4:	e0bffc17 	ldw	r2,-16(fp)
   10db8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10dbc:	e0bffc17 	ldw	r2,-16(fp)
   10dc0:	d0e01204 	addi	r3,gp,-32696
   10dc4:	e0fffa15 	stw	r3,-24(fp)
   10dc8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10dcc:	e0bffb17 	ldw	r2,-20(fp)
   10dd0:	e0fffa17 	ldw	r3,-24(fp)
   10dd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10dd8:	e0bffa17 	ldw	r2,-24(fp)
   10ddc:	10c00017 	ldw	r3,0(r2)
   10de0:	e0bffb17 	ldw	r2,-20(fp)
   10de4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10de8:	e0bffa17 	ldw	r2,-24(fp)
   10dec:	10800017 	ldw	r2,0(r2)
   10df0:	e0fffb17 	ldw	r3,-20(fp)
   10df4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10df8:	e0bffa17 	ldw	r2,-24(fp)
   10dfc:	e0fffb17 	ldw	r3,-20(fp)
   10e00:	10c00015 	stw	r3,0(r2)
   10e04:	e0bff817 	ldw	r2,-32(fp)
   10e08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e0c:	e0bff717 	ldw	r2,-36(fp)
   10e10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10e14:	0005883a 	mov	r2,zero
   10e18:	00000306 	br	10e28 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10e1c:	00bffa84 	movi	r2,-22
   10e20:	00000106 	br	10e28 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10e24:	00bfde84 	movi	r2,-134
  }
}
   10e28:	e037883a 	mov	sp,fp
   10e2c:	df000017 	ldw	fp,0(sp)
   10e30:	dec00104 	addi	sp,sp,4
   10e34:	f800283a 	ret

00010e38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10e38:	defffe04 	addi	sp,sp,-8
   10e3c:	df000115 	stw	fp,4(sp)
   10e40:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10e44:	e03fff15 	stw	zero,-4(fp)
   10e48:	00000506 	br	10e60 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10e4c:	e0bfff17 	ldw	r2,-4(fp)
   10e50:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10e54:	e0bfff17 	ldw	r2,-4(fp)
   10e58:	10800804 	addi	r2,r2,32
   10e5c:	e0bfff15 	stw	r2,-4(fp)
   10e60:	e0bfff17 	ldw	r2,-4(fp)
   10e64:	10820030 	cmpltui	r2,r2,2048
   10e68:	103ff81e 	bne	r2,zero,10e4c <__alt_mem_onchip_memory+0xf7810e4c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10e6c:	0001883a 	nop
   10e70:	e037883a 	mov	sp,fp
   10e74:	df000017 	ldw	fp,0(sp)
   10e78:	dec00104 	addi	sp,sp,4
   10e7c:	f800283a 	ret

00010e80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10e80:	defffe04 	addi	sp,sp,-8
   10e84:	dfc00115 	stw	ra,4(sp)
   10e88:	df000015 	stw	fp,0(sp)
   10e8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10e90:	d0a01017 	ldw	r2,-32704(gp)
   10e94:	10000326 	beq	r2,zero,10ea4 <alt_get_errno+0x24>
   10e98:	d0a01017 	ldw	r2,-32704(gp)
   10e9c:	103ee83a 	callr	r2
   10ea0:	00000106 	br	10ea8 <alt_get_errno+0x28>
   10ea4:	d0a6dc04 	addi	r2,gp,-25744
}
   10ea8:	e037883a 	mov	sp,fp
   10eac:	dfc00117 	ldw	ra,4(sp)
   10eb0:	df000017 	ldw	fp,0(sp)
   10eb4:	dec00204 	addi	sp,sp,8
   10eb8:	f800283a 	ret

00010ebc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10ebc:	defffa04 	addi	sp,sp,-24
   10ec0:	dfc00515 	stw	ra,20(sp)
   10ec4:	df000415 	stw	fp,16(sp)
   10ec8:	df000404 	addi	fp,sp,16
   10ecc:	e13ffe15 	stw	r4,-8(fp)
   10ed0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10ed4:	e0bffe17 	ldw	r2,-8(fp)
   10ed8:	10000326 	beq	r2,zero,10ee8 <alt_dev_llist_insert+0x2c>
   10edc:	e0bffe17 	ldw	r2,-8(fp)
   10ee0:	10800217 	ldw	r2,8(r2)
   10ee4:	1000061e 	bne	r2,zero,10f00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10ee8:	0010e800 	call	10e80 <alt_get_errno>
   10eec:	1007883a 	mov	r3,r2
   10ef0:	00800584 	movi	r2,22
   10ef4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10ef8:	00bffa84 	movi	r2,-22
   10efc:	00001306 	br	10f4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10f00:	e0bffe17 	ldw	r2,-8(fp)
   10f04:	e0ffff17 	ldw	r3,-4(fp)
   10f08:	e0fffc15 	stw	r3,-16(fp)
   10f0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10f10:	e0bffd17 	ldw	r2,-12(fp)
   10f14:	e0fffc17 	ldw	r3,-16(fp)
   10f18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10f1c:	e0bffc17 	ldw	r2,-16(fp)
   10f20:	10c00017 	ldw	r3,0(r2)
   10f24:	e0bffd17 	ldw	r2,-12(fp)
   10f28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10f2c:	e0bffc17 	ldw	r2,-16(fp)
   10f30:	10800017 	ldw	r2,0(r2)
   10f34:	e0fffd17 	ldw	r3,-12(fp)
   10f38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10f3c:	e0bffc17 	ldw	r2,-16(fp)
   10f40:	e0fffd17 	ldw	r3,-12(fp)
   10f44:	10c00015 	stw	r3,0(r2)

  return 0;  
   10f48:	0005883a 	mov	r2,zero
}
   10f4c:	e037883a 	mov	sp,fp
   10f50:	dfc00117 	ldw	ra,4(sp)
   10f54:	df000017 	ldw	fp,0(sp)
   10f58:	dec00204 	addi	sp,sp,8
   10f5c:	f800283a 	ret

00010f60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10f60:	defffd04 	addi	sp,sp,-12
   10f64:	dfc00215 	stw	ra,8(sp)
   10f68:	df000115 	stw	fp,4(sp)
   10f6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10f70:	00800074 	movhi	r2,1
   10f74:	1087e804 	addi	r2,r2,8096
   10f78:	e0bfff15 	stw	r2,-4(fp)
   10f7c:	00000606 	br	10f98 <_do_ctors+0x38>
        (*ctor) (); 
   10f80:	e0bfff17 	ldw	r2,-4(fp)
   10f84:	10800017 	ldw	r2,0(r2)
   10f88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10f8c:	e0bfff17 	ldw	r2,-4(fp)
   10f90:	10bfff04 	addi	r2,r2,-4
   10f94:	e0bfff15 	stw	r2,-4(fp)
   10f98:	e0ffff17 	ldw	r3,-4(fp)
   10f9c:	00800074 	movhi	r2,1
   10fa0:	1087e904 	addi	r2,r2,8100
   10fa4:	18bff62e 	bgeu	r3,r2,10f80 <__alt_mem_onchip_memory+0xf7810f80>
        (*ctor) (); 
}
   10fa8:	0001883a 	nop
   10fac:	e037883a 	mov	sp,fp
   10fb0:	dfc00117 	ldw	ra,4(sp)
   10fb4:	df000017 	ldw	fp,0(sp)
   10fb8:	dec00204 	addi	sp,sp,8
   10fbc:	f800283a 	ret

00010fc0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10fc0:	defffd04 	addi	sp,sp,-12
   10fc4:	dfc00215 	stw	ra,8(sp)
   10fc8:	df000115 	stw	fp,4(sp)
   10fcc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10fd0:	00800074 	movhi	r2,1
   10fd4:	1087e804 	addi	r2,r2,8096
   10fd8:	e0bfff15 	stw	r2,-4(fp)
   10fdc:	00000606 	br	10ff8 <_do_dtors+0x38>
        (*dtor) (); 
   10fe0:	e0bfff17 	ldw	r2,-4(fp)
   10fe4:	10800017 	ldw	r2,0(r2)
   10fe8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10fec:	e0bfff17 	ldw	r2,-4(fp)
   10ff0:	10bfff04 	addi	r2,r2,-4
   10ff4:	e0bfff15 	stw	r2,-4(fp)
   10ff8:	e0ffff17 	ldw	r3,-4(fp)
   10ffc:	00800074 	movhi	r2,1
   11000:	1087e904 	addi	r2,r2,8100
   11004:	18bff62e 	bgeu	r3,r2,10fe0 <__alt_mem_onchip_memory+0xf7810fe0>
        (*dtor) (); 
}
   11008:	0001883a 	nop
   1100c:	e037883a 	mov	sp,fp
   11010:	dfc00117 	ldw	ra,4(sp)
   11014:	df000017 	ldw	fp,0(sp)
   11018:	dec00204 	addi	sp,sp,8
   1101c:	f800283a 	ret

00011020 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11020:	defffe04 	addi	sp,sp,-8
   11024:	dfc00115 	stw	ra,4(sp)
   11028:	df000015 	stw	fp,0(sp)
   1102c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   11030:	01440004 	movi	r5,4096
   11034:	0009883a 	mov	r4,zero
   11038:	0011a740 	call	11a74 <alt_icache_flush>
#endif
}
   1103c:	0001883a 	nop
   11040:	e037883a 	mov	sp,fp
   11044:	dfc00117 	ldw	ra,4(sp)
   11048:	df000017 	ldw	fp,0(sp)
   1104c:	dec00204 	addi	sp,sp,8
   11050:	f800283a 	ret

00011054 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11054:	defff904 	addi	sp,sp,-28
   11058:	dfc00615 	stw	ra,24(sp)
   1105c:	df000515 	stw	fp,20(sp)
   11060:	df000504 	addi	fp,sp,20
   11064:	e13ffc15 	stw	r4,-16(fp)
   11068:	e17ffd15 	stw	r5,-12(fp)
   1106c:	e1bffe15 	stw	r6,-8(fp)
   11070:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11074:	e0800217 	ldw	r2,8(fp)
   11078:	d8800015 	stw	r2,0(sp)
   1107c:	e1ffff17 	ldw	r7,-4(fp)
   11080:	e1bffe17 	ldw	r6,-8(fp)
   11084:	e17ffd17 	ldw	r5,-12(fp)
   11088:	e13ffc17 	ldw	r4,-16(fp)
   1108c:	00112040 	call	11204 <alt_iic_isr_register>
}  
   11090:	e037883a 	mov	sp,fp
   11094:	dfc00117 	ldw	ra,4(sp)
   11098:	df000017 	ldw	fp,0(sp)
   1109c:	dec00204 	addi	sp,sp,8
   110a0:	f800283a 	ret

000110a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   110a4:	defff904 	addi	sp,sp,-28
   110a8:	df000615 	stw	fp,24(sp)
   110ac:	df000604 	addi	fp,sp,24
   110b0:	e13ffe15 	stw	r4,-8(fp)
   110b4:	e17fff15 	stw	r5,-4(fp)
   110b8:	e0bfff17 	ldw	r2,-4(fp)
   110bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110c0:	0005303a 	rdctl	r2,status
   110c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   110c8:	e0fffb17 	ldw	r3,-20(fp)
   110cc:	00bfff84 	movi	r2,-2
   110d0:	1884703a 	and	r2,r3,r2
   110d4:	1001703a 	wrctl	status,r2
  
  return context;
   110d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   110dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   110e0:	00c00044 	movi	r3,1
   110e4:	e0bffa17 	ldw	r2,-24(fp)
   110e8:	1884983a 	sll	r2,r3,r2
   110ec:	1007883a 	mov	r3,r2
   110f0:	d0a6ec17 	ldw	r2,-25680(gp)
   110f4:	1884b03a 	or	r2,r3,r2
   110f8:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   110fc:	d0a6ec17 	ldw	r2,-25680(gp)
   11100:	100170fa 	wrctl	ienable,r2
   11104:	e0bffc17 	ldw	r2,-16(fp)
   11108:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1110c:	e0bffd17 	ldw	r2,-12(fp)
   11110:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11114:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11118:	0001883a 	nop
}
   1111c:	e037883a 	mov	sp,fp
   11120:	df000017 	ldw	fp,0(sp)
   11124:	dec00104 	addi	sp,sp,4
   11128:	f800283a 	ret

0001112c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1112c:	defff904 	addi	sp,sp,-28
   11130:	df000615 	stw	fp,24(sp)
   11134:	df000604 	addi	fp,sp,24
   11138:	e13ffe15 	stw	r4,-8(fp)
   1113c:	e17fff15 	stw	r5,-4(fp)
   11140:	e0bfff17 	ldw	r2,-4(fp)
   11144:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11148:	0005303a 	rdctl	r2,status
   1114c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11150:	e0fffb17 	ldw	r3,-20(fp)
   11154:	00bfff84 	movi	r2,-2
   11158:	1884703a 	and	r2,r3,r2
   1115c:	1001703a 	wrctl	status,r2
  
  return context;
   11160:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11164:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11168:	00c00044 	movi	r3,1
   1116c:	e0bffa17 	ldw	r2,-24(fp)
   11170:	1884983a 	sll	r2,r3,r2
   11174:	0084303a 	nor	r2,zero,r2
   11178:	1007883a 	mov	r3,r2
   1117c:	d0a6ec17 	ldw	r2,-25680(gp)
   11180:	1884703a 	and	r2,r3,r2
   11184:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11188:	d0a6ec17 	ldw	r2,-25680(gp)
   1118c:	100170fa 	wrctl	ienable,r2
   11190:	e0bffc17 	ldw	r2,-16(fp)
   11194:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11198:	e0bffd17 	ldw	r2,-12(fp)
   1119c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   111a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   111a4:	0001883a 	nop
}
   111a8:	e037883a 	mov	sp,fp
   111ac:	df000017 	ldw	fp,0(sp)
   111b0:	dec00104 	addi	sp,sp,4
   111b4:	f800283a 	ret

000111b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   111b8:	defffc04 	addi	sp,sp,-16
   111bc:	df000315 	stw	fp,12(sp)
   111c0:	df000304 	addi	fp,sp,12
   111c4:	e13ffe15 	stw	r4,-8(fp)
   111c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   111cc:	000530fa 	rdctl	r2,ienable
   111d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   111d4:	00c00044 	movi	r3,1
   111d8:	e0bfff17 	ldw	r2,-4(fp)
   111dc:	1884983a 	sll	r2,r3,r2
   111e0:	1007883a 	mov	r3,r2
   111e4:	e0bffd17 	ldw	r2,-12(fp)
   111e8:	1884703a 	and	r2,r3,r2
   111ec:	1004c03a 	cmpne	r2,r2,zero
   111f0:	10803fcc 	andi	r2,r2,255
}
   111f4:	e037883a 	mov	sp,fp
   111f8:	df000017 	ldw	fp,0(sp)
   111fc:	dec00104 	addi	sp,sp,4
   11200:	f800283a 	ret

00011204 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11204:	defff504 	addi	sp,sp,-44
   11208:	dfc00a15 	stw	ra,40(sp)
   1120c:	df000915 	stw	fp,36(sp)
   11210:	df000904 	addi	fp,sp,36
   11214:	e13ffc15 	stw	r4,-16(fp)
   11218:	e17ffd15 	stw	r5,-12(fp)
   1121c:	e1bffe15 	stw	r6,-8(fp)
   11220:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11224:	00bffa84 	movi	r2,-22
   11228:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1122c:	e0bffd17 	ldw	r2,-12(fp)
   11230:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11234:	e0bff817 	ldw	r2,-32(fp)
   11238:	10800808 	cmpgei	r2,r2,32
   1123c:	1000271e 	bne	r2,zero,112dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11240:	0005303a 	rdctl	r2,status
   11244:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11248:	e0fffb17 	ldw	r3,-20(fp)
   1124c:	00bfff84 	movi	r2,-2
   11250:	1884703a 	and	r2,r3,r2
   11254:	1001703a 	wrctl	status,r2
  
  return context;
   11258:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1125c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11260:	008000b4 	movhi	r2,2
   11264:	10a09a04 	addi	r2,r2,-32152
   11268:	e0fff817 	ldw	r3,-32(fp)
   1126c:	180690fa 	slli	r3,r3,3
   11270:	10c5883a 	add	r2,r2,r3
   11274:	e0fffe17 	ldw	r3,-8(fp)
   11278:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1127c:	008000b4 	movhi	r2,2
   11280:	10a09a04 	addi	r2,r2,-32152
   11284:	e0fff817 	ldw	r3,-32(fp)
   11288:	180690fa 	slli	r3,r3,3
   1128c:	10c5883a 	add	r2,r2,r3
   11290:	10800104 	addi	r2,r2,4
   11294:	e0ffff17 	ldw	r3,-4(fp)
   11298:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1129c:	e0bffe17 	ldw	r2,-8(fp)
   112a0:	10000526 	beq	r2,zero,112b8 <alt_iic_isr_register+0xb4>
   112a4:	e0bff817 	ldw	r2,-32(fp)
   112a8:	100b883a 	mov	r5,r2
   112ac:	e13ffc17 	ldw	r4,-16(fp)
   112b0:	00110a40 	call	110a4 <alt_ic_irq_enable>
   112b4:	00000406 	br	112c8 <alt_iic_isr_register+0xc4>
   112b8:	e0bff817 	ldw	r2,-32(fp)
   112bc:	100b883a 	mov	r5,r2
   112c0:	e13ffc17 	ldw	r4,-16(fp)
   112c4:	001112c0 	call	1112c <alt_ic_irq_disable>
   112c8:	e0bff715 	stw	r2,-36(fp)
   112cc:	e0bffa17 	ldw	r2,-24(fp)
   112d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112d4:	e0bff917 	ldw	r2,-28(fp)
   112d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   112dc:	e0bff717 	ldw	r2,-36(fp)
}
   112e0:	e037883a 	mov	sp,fp
   112e4:	dfc00117 	ldw	ra,4(sp)
   112e8:	df000017 	ldw	fp,0(sp)
   112ec:	dec00204 	addi	sp,sp,8
   112f0:	f800283a 	ret

000112f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   112f4:	defff904 	addi	sp,sp,-28
   112f8:	dfc00615 	stw	ra,24(sp)
   112fc:	df000515 	stw	fp,20(sp)
   11300:	df000504 	addi	fp,sp,20
   11304:	e13ffc15 	stw	r4,-16(fp)
   11308:	e17ffd15 	stw	r5,-12(fp)
   1130c:	e1bffe15 	stw	r6,-8(fp)
   11310:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11314:	e1bfff17 	ldw	r6,-4(fp)
   11318:	e17ffe17 	ldw	r5,-8(fp)
   1131c:	e13ffd17 	ldw	r4,-12(fp)
   11320:	00115340 	call	11534 <open>
   11324:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11328:	e0bffb17 	ldw	r2,-20(fp)
   1132c:	10001c16 	blt	r2,zero,113a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11330:	00800074 	movhi	r2,1
   11334:	108b4a04 	addi	r2,r2,11560
   11338:	e0fffb17 	ldw	r3,-20(fp)
   1133c:	18c00324 	muli	r3,r3,12
   11340:	10c5883a 	add	r2,r2,r3
   11344:	10c00017 	ldw	r3,0(r2)
   11348:	e0bffc17 	ldw	r2,-16(fp)
   1134c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11350:	00800074 	movhi	r2,1
   11354:	108b4a04 	addi	r2,r2,11560
   11358:	e0fffb17 	ldw	r3,-20(fp)
   1135c:	18c00324 	muli	r3,r3,12
   11360:	10c5883a 	add	r2,r2,r3
   11364:	10800104 	addi	r2,r2,4
   11368:	10c00017 	ldw	r3,0(r2)
   1136c:	e0bffc17 	ldw	r2,-16(fp)
   11370:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11374:	00800074 	movhi	r2,1
   11378:	108b4a04 	addi	r2,r2,11560
   1137c:	e0fffb17 	ldw	r3,-20(fp)
   11380:	18c00324 	muli	r3,r3,12
   11384:	10c5883a 	add	r2,r2,r3
   11388:	10800204 	addi	r2,r2,8
   1138c:	10c00017 	ldw	r3,0(r2)
   11390:	e0bffc17 	ldw	r2,-16(fp)
   11394:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11398:	e13ffb17 	ldw	r4,-20(fp)
   1139c:	000fa640 	call	fa64 <alt_release_fd>
  }
} 
   113a0:	0001883a 	nop
   113a4:	e037883a 	mov	sp,fp
   113a8:	dfc00117 	ldw	ra,4(sp)
   113ac:	df000017 	ldw	fp,0(sp)
   113b0:	dec00204 	addi	sp,sp,8
   113b4:	f800283a 	ret

000113b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   113b8:	defffb04 	addi	sp,sp,-20
   113bc:	dfc00415 	stw	ra,16(sp)
   113c0:	df000315 	stw	fp,12(sp)
   113c4:	df000304 	addi	fp,sp,12
   113c8:	e13ffd15 	stw	r4,-12(fp)
   113cc:	e17ffe15 	stw	r5,-8(fp)
   113d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   113d4:	01c07fc4 	movi	r7,511
   113d8:	01800044 	movi	r6,1
   113dc:	e17ffd17 	ldw	r5,-12(fp)
   113e0:	01000074 	movhi	r4,1
   113e4:	210b4d04 	addi	r4,r4,11572
   113e8:	00112f40 	call	112f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   113ec:	01c07fc4 	movi	r7,511
   113f0:	000d883a 	mov	r6,zero
   113f4:	e17ffe17 	ldw	r5,-8(fp)
   113f8:	01000074 	movhi	r4,1
   113fc:	210b4a04 	addi	r4,r4,11560
   11400:	00112f40 	call	112f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11404:	01c07fc4 	movi	r7,511
   11408:	01800044 	movi	r6,1
   1140c:	e17fff17 	ldw	r5,-4(fp)
   11410:	01000074 	movhi	r4,1
   11414:	210b5004 	addi	r4,r4,11584
   11418:	00112f40 	call	112f4 <alt_open_fd>
}  
   1141c:	0001883a 	nop
   11420:	e037883a 	mov	sp,fp
   11424:	dfc00117 	ldw	ra,4(sp)
   11428:	df000017 	ldw	fp,0(sp)
   1142c:	dec00204 	addi	sp,sp,8
   11430:	f800283a 	ret

00011434 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11434:	defffe04 	addi	sp,sp,-8
   11438:	dfc00115 	stw	ra,4(sp)
   1143c:	df000015 	stw	fp,0(sp)
   11440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11444:	d0a01017 	ldw	r2,-32704(gp)
   11448:	10000326 	beq	r2,zero,11458 <alt_get_errno+0x24>
   1144c:	d0a01017 	ldw	r2,-32704(gp)
   11450:	103ee83a 	callr	r2
   11454:	00000106 	br	1145c <alt_get_errno+0x28>
   11458:	d0a6dc04 	addi	r2,gp,-25744
}
   1145c:	e037883a 	mov	sp,fp
   11460:	dfc00117 	ldw	ra,4(sp)
   11464:	df000017 	ldw	fp,0(sp)
   11468:	dec00204 	addi	sp,sp,8
   1146c:	f800283a 	ret

00011470 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11470:	defffd04 	addi	sp,sp,-12
   11474:	df000215 	stw	fp,8(sp)
   11478:	df000204 	addi	fp,sp,8
   1147c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11480:	e0bfff17 	ldw	r2,-4(fp)
   11484:	10800217 	ldw	r2,8(r2)
   11488:	10d00034 	orhi	r3,r2,16384
   1148c:	e0bfff17 	ldw	r2,-4(fp)
   11490:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11494:	e03ffe15 	stw	zero,-8(fp)
   11498:	00001d06 	br	11510 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1149c:	00800074 	movhi	r2,1
   114a0:	108b4a04 	addi	r2,r2,11560
   114a4:	e0fffe17 	ldw	r3,-8(fp)
   114a8:	18c00324 	muli	r3,r3,12
   114ac:	10c5883a 	add	r2,r2,r3
   114b0:	10c00017 	ldw	r3,0(r2)
   114b4:	e0bfff17 	ldw	r2,-4(fp)
   114b8:	10800017 	ldw	r2,0(r2)
   114bc:	1880111e 	bne	r3,r2,11504 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   114c0:	00800074 	movhi	r2,1
   114c4:	108b4a04 	addi	r2,r2,11560
   114c8:	e0fffe17 	ldw	r3,-8(fp)
   114cc:	18c00324 	muli	r3,r3,12
   114d0:	10c5883a 	add	r2,r2,r3
   114d4:	10800204 	addi	r2,r2,8
   114d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   114dc:	1000090e 	bge	r2,zero,11504 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   114e0:	e0bffe17 	ldw	r2,-8(fp)
   114e4:	10c00324 	muli	r3,r2,12
   114e8:	00800074 	movhi	r2,1
   114ec:	108b4a04 	addi	r2,r2,11560
   114f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   114f4:	e0bfff17 	ldw	r2,-4(fp)
   114f8:	18800226 	beq	r3,r2,11504 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   114fc:	00bffcc4 	movi	r2,-13
   11500:	00000806 	br	11524 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11504:	e0bffe17 	ldw	r2,-8(fp)
   11508:	10800044 	addi	r2,r2,1
   1150c:	e0bffe15 	stw	r2,-8(fp)
   11510:	d0a00f17 	ldw	r2,-32708(gp)
   11514:	1007883a 	mov	r3,r2
   11518:	e0bffe17 	ldw	r2,-8(fp)
   1151c:	18bfdf2e 	bgeu	r3,r2,1149c <__alt_mem_onchip_memory+0xf781149c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11520:	0005883a 	mov	r2,zero
}
   11524:	e037883a 	mov	sp,fp
   11528:	df000017 	ldw	fp,0(sp)
   1152c:	dec00104 	addi	sp,sp,4
   11530:	f800283a 	ret

00011534 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11534:	defff604 	addi	sp,sp,-40
   11538:	dfc00915 	stw	ra,36(sp)
   1153c:	df000815 	stw	fp,32(sp)
   11540:	df000804 	addi	fp,sp,32
   11544:	e13ffd15 	stw	r4,-12(fp)
   11548:	e17ffe15 	stw	r5,-8(fp)
   1154c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11550:	00bfffc4 	movi	r2,-1
   11554:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11558:	00bffb44 	movi	r2,-19
   1155c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11560:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11564:	d1600d04 	addi	r5,gp,-32716
   11568:	e13ffd17 	ldw	r4,-12(fp)
   1156c:	00118380 	call	11838 <alt_find_dev>
   11570:	e0bff815 	stw	r2,-32(fp)
   11574:	e0bff817 	ldw	r2,-32(fp)
   11578:	1000051e 	bne	r2,zero,11590 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1157c:	e13ffd17 	ldw	r4,-12(fp)
   11580:	00118c80 	call	118c8 <alt_find_file>
   11584:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11588:	00800044 	movi	r2,1
   1158c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11590:	e0bff817 	ldw	r2,-32(fp)
   11594:	10002926 	beq	r2,zero,1163c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11598:	e13ff817 	ldw	r4,-32(fp)
   1159c:	00119d00 	call	119d0 <alt_get_fd>
   115a0:	e0bff915 	stw	r2,-28(fp)
   115a4:	e0bff917 	ldw	r2,-28(fp)
   115a8:	1000030e 	bge	r2,zero,115b8 <open+0x84>
    {
      status = index;
   115ac:	e0bff917 	ldw	r2,-28(fp)
   115b0:	e0bffa15 	stw	r2,-24(fp)
   115b4:	00002306 	br	11644 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   115b8:	e0bff917 	ldw	r2,-28(fp)
   115bc:	10c00324 	muli	r3,r2,12
   115c0:	00800074 	movhi	r2,1
   115c4:	108b4a04 	addi	r2,r2,11560
   115c8:	1885883a 	add	r2,r3,r2
   115cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   115d0:	e0fffe17 	ldw	r3,-8(fp)
   115d4:	00900034 	movhi	r2,16384
   115d8:	10bfffc4 	addi	r2,r2,-1
   115dc:	1886703a 	and	r3,r3,r2
   115e0:	e0bffc17 	ldw	r2,-16(fp)
   115e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   115e8:	e0bffb17 	ldw	r2,-20(fp)
   115ec:	1000051e 	bne	r2,zero,11604 <open+0xd0>
   115f0:	e13ffc17 	ldw	r4,-16(fp)
   115f4:	00114700 	call	11470 <alt_file_locked>
   115f8:	e0bffa15 	stw	r2,-24(fp)
   115fc:	e0bffa17 	ldw	r2,-24(fp)
   11600:	10001016 	blt	r2,zero,11644 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11604:	e0bff817 	ldw	r2,-32(fp)
   11608:	10800317 	ldw	r2,12(r2)
   1160c:	10000826 	beq	r2,zero,11630 <open+0xfc>
   11610:	e0bff817 	ldw	r2,-32(fp)
   11614:	10800317 	ldw	r2,12(r2)
   11618:	e1ffff17 	ldw	r7,-4(fp)
   1161c:	e1bffe17 	ldw	r6,-8(fp)
   11620:	e17ffd17 	ldw	r5,-12(fp)
   11624:	e13ffc17 	ldw	r4,-16(fp)
   11628:	103ee83a 	callr	r2
   1162c:	00000106 	br	11634 <open+0x100>
   11630:	0005883a 	mov	r2,zero
   11634:	e0bffa15 	stw	r2,-24(fp)
   11638:	00000206 	br	11644 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1163c:	00bffb44 	movi	r2,-19
   11640:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11644:	e0bffa17 	ldw	r2,-24(fp)
   11648:	1000090e 	bge	r2,zero,11670 <open+0x13c>
  {
    alt_release_fd (index);  
   1164c:	e13ff917 	ldw	r4,-28(fp)
   11650:	000fa640 	call	fa64 <alt_release_fd>
    ALT_ERRNO = -status;
   11654:	00114340 	call	11434 <alt_get_errno>
   11658:	1007883a 	mov	r3,r2
   1165c:	e0bffa17 	ldw	r2,-24(fp)
   11660:	0085c83a 	sub	r2,zero,r2
   11664:	18800015 	stw	r2,0(r3)
    return -1;
   11668:	00bfffc4 	movi	r2,-1
   1166c:	00000106 	br	11674 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11670:	e0bff917 	ldw	r2,-28(fp)
}
   11674:	e037883a 	mov	sp,fp
   11678:	dfc00117 	ldw	ra,4(sp)
   1167c:	df000017 	ldw	fp,0(sp)
   11680:	dec00204 	addi	sp,sp,8
   11684:	f800283a 	ret

00011688 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11688:	deffff04 	addi	sp,sp,-4
   1168c:	df000015 	stw	fp,0(sp)
   11690:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11694:	000170fa 	wrctl	ienable,zero
}
   11698:	0001883a 	nop
   1169c:	e037883a 	mov	sp,fp
   116a0:	df000017 	ldw	fp,0(sp)
   116a4:	dec00104 	addi	sp,sp,4
   116a8:	f800283a 	ret

000116ac <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   116ac:	defff904 	addi	sp,sp,-28
   116b0:	df000615 	stw	fp,24(sp)
   116b4:	df000604 	addi	fp,sp,24
   116b8:	e13ffe15 	stw	r4,-8(fp)
   116bc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   116c0:	e03ffa15 	stw	zero,-24(fp)
   116c4:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   116c8:	000b883a 	mov	r5,zero
   116cc:	e13ffe17 	ldw	r4,-8(fp)
   116d0:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
   116d4:	e13fff17 	ldw	r4,-4(fp)
   116d8:	2008913a 	slli	r4,r4,4
   116dc:	200b883a 	mov	r5,r4
   116e0:	e13ffe17 	ldw	r4,-8(fp)
   116e4:	2149883a 	add	r4,r4,r5
   116e8:	21000037 	ldwio	r4,0(r4)
   116ec:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   116f0:	e13fff17 	ldw	r4,-4(fp)
   116f4:	2008913a 	slli	r4,r4,4
   116f8:	21000104 	addi	r4,r4,4
   116fc:	200b883a 	mov	r5,r4
   11700:	e13ffe17 	ldw	r4,-8(fp)
   11704:	2149883a 	add	r4,r4,r5
   11708:	21000037 	ldwio	r4,0(r4)
   1170c:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   11710:	e13ffd17 	ldw	r4,-12(fp)
   11714:	2011883a 	mov	r8,r4
   11718:	0013883a 	mov	r9,zero
   1171c:	4006983a 	sll	r3,r8,zero
   11720:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
   11724:	e13ffc17 	ldw	r4,-16(fp)
   11728:	200d883a 	mov	r6,r4
   1172c:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   11730:	1188b03a 	or	r4,r2,r6
   11734:	e13ffa15 	stw	r4,-24(fp)
   11738:	19c4b03a 	or	r2,r3,r7
   1173c:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   11740:	e0bffa17 	ldw	r2,-24(fp)
   11744:	e0fffb17 	ldw	r3,-20(fp)
   11748:	1009883a 	mov	r4,r2
   1174c:	180b883a 	mov	r5,r3
}
   11750:	2005883a 	mov	r2,r4
   11754:	2807883a 	mov	r3,r5
   11758:	e037883a 	mov	sp,fp
   1175c:	df000017 	ldw	fp,0(sp)
   11760:	dec00104 	addi	sp,sp,4
   11764:	f800283a 	ret

00011768 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   11768:	defffd04 	addi	sp,sp,-12
   1176c:	dfc00215 	stw	ra,8(sp)
   11770:	df000115 	stw	fp,4(sp)
   11774:	df000104 	addi	fp,sp,4
   11778:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   1177c:	000b883a 	mov	r5,zero
   11780:	e13fff17 	ldw	r4,-4(fp)
   11784:	00116ac0 	call	116ac <perf_get_section_time>
   11788:	100b883a 	mov	r5,r2
   1178c:	180d883a 	mov	r6,r3
   11790:	2807883a 	mov	r3,r5
   11794:	3009883a 	mov	r4,r6
}
   11798:	1805883a 	mov	r2,r3
   1179c:	2007883a 	mov	r3,r4
   117a0:	e037883a 	mov	sp,fp
   117a4:	dfc00117 	ldw	ra,4(sp)
   117a8:	df000017 	ldw	fp,0(sp)
   117ac:	dec00204 	addi	sp,sp,8
   117b0:	f800283a 	ret

000117b4 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   117b4:	defffd04 	addi	sp,sp,-12
   117b8:	df000215 	stw	fp,8(sp)
   117bc:	df000204 	addi	fp,sp,8
   117c0:	e13ffe15 	stw	r4,-8(fp)
   117c4:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   117c8:	e0bfff17 	ldw	r2,-4(fp)
   117cc:	1004913a 	slli	r2,r2,4
   117d0:	10800204 	addi	r2,r2,8
   117d4:	1007883a 	mov	r3,r2
   117d8:	e0bffe17 	ldw	r2,-8(fp)
   117dc:	10c5883a 	add	r2,r2,r3
   117e0:	10800037 	ldwio	r2,0(r2)
}
   117e4:	e037883a 	mov	sp,fp
   117e8:	df000017 	ldw	fp,0(sp)
   117ec:	dec00104 	addi	sp,sp,4
   117f0:	f800283a 	ret

000117f4 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   117f4:	deffff04 	addi	sp,sp,-4
   117f8:	df000015 	stw	fp,0(sp)
   117fc:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
   11800:	0005883a 	mov	r2,zero
#endif
}
   11804:	e037883a 	mov	sp,fp
   11808:	df000017 	ldw	fp,0(sp)
   1180c:	dec00104 	addi	sp,sp,4
   11810:	f800283a 	ret

00011814 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   11814:	deffff04 	addi	sp,sp,-4
   11818:	df000015 	stw	fp,0(sp)
   1181c:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   11820:	0080bef4 	movhi	r2,763
   11824:	10bc2004 	addi	r2,r2,-3968
}
   11828:	e037883a 	mov	sp,fp
   1182c:	df000017 	ldw	fp,0(sp)
   11830:	dec00104 	addi	sp,sp,4
   11834:	f800283a 	ret

00011838 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11838:	defffa04 	addi	sp,sp,-24
   1183c:	dfc00515 	stw	ra,20(sp)
   11840:	df000415 	stw	fp,16(sp)
   11844:	df000404 	addi	fp,sp,16
   11848:	e13ffe15 	stw	r4,-8(fp)
   1184c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11850:	e0bfff17 	ldw	r2,-4(fp)
   11854:	10800017 	ldw	r2,0(r2)
   11858:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1185c:	e13ffe17 	ldw	r4,-8(fp)
   11860:	0004e200 	call	4e20 <strlen>
   11864:	10800044 	addi	r2,r2,1
   11868:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1186c:	00000d06 	br	118a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11870:	e0bffc17 	ldw	r2,-16(fp)
   11874:	10800217 	ldw	r2,8(r2)
   11878:	e0fffd17 	ldw	r3,-12(fp)
   1187c:	180d883a 	mov	r6,r3
   11880:	e17ffe17 	ldw	r5,-8(fp)
   11884:	1009883a 	mov	r4,r2
   11888:	0011bec0 	call	11bec <memcmp>
   1188c:	1000021e 	bne	r2,zero,11898 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11890:	e0bffc17 	ldw	r2,-16(fp)
   11894:	00000706 	br	118b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11898:	e0bffc17 	ldw	r2,-16(fp)
   1189c:	10800017 	ldw	r2,0(r2)
   118a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   118a4:	e0fffc17 	ldw	r3,-16(fp)
   118a8:	e0bfff17 	ldw	r2,-4(fp)
   118ac:	18bff01e 	bne	r3,r2,11870 <__alt_mem_onchip_memory+0xf7811870>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   118b0:	0005883a 	mov	r2,zero
}
   118b4:	e037883a 	mov	sp,fp
   118b8:	dfc00117 	ldw	ra,4(sp)
   118bc:	df000017 	ldw	fp,0(sp)
   118c0:	dec00204 	addi	sp,sp,8
   118c4:	f800283a 	ret

000118c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   118c8:	defffb04 	addi	sp,sp,-20
   118cc:	dfc00415 	stw	ra,16(sp)
   118d0:	df000315 	stw	fp,12(sp)
   118d4:	df000304 	addi	fp,sp,12
   118d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   118dc:	d0a00b17 	ldw	r2,-32724(gp)
   118e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   118e4:	00003106 	br	119ac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   118e8:	e0bffd17 	ldw	r2,-12(fp)
   118ec:	10800217 	ldw	r2,8(r2)
   118f0:	1009883a 	mov	r4,r2
   118f4:	0004e200 	call	4e20 <strlen>
   118f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   118fc:	e0bffd17 	ldw	r2,-12(fp)
   11900:	10c00217 	ldw	r3,8(r2)
   11904:	e0bffe17 	ldw	r2,-8(fp)
   11908:	10bfffc4 	addi	r2,r2,-1
   1190c:	1885883a 	add	r2,r3,r2
   11910:	10800003 	ldbu	r2,0(r2)
   11914:	10803fcc 	andi	r2,r2,255
   11918:	1080201c 	xori	r2,r2,128
   1191c:	10bfe004 	addi	r2,r2,-128
   11920:	10800bd8 	cmpnei	r2,r2,47
   11924:	1000031e 	bne	r2,zero,11934 <alt_find_file+0x6c>
    {
      len -= 1;
   11928:	e0bffe17 	ldw	r2,-8(fp)
   1192c:	10bfffc4 	addi	r2,r2,-1
   11930:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11934:	e0bffe17 	ldw	r2,-8(fp)
   11938:	e0ffff17 	ldw	r3,-4(fp)
   1193c:	1885883a 	add	r2,r3,r2
   11940:	10800003 	ldbu	r2,0(r2)
   11944:	10803fcc 	andi	r2,r2,255
   11948:	1080201c 	xori	r2,r2,128
   1194c:	10bfe004 	addi	r2,r2,-128
   11950:	10800be0 	cmpeqi	r2,r2,47
   11954:	1000081e 	bne	r2,zero,11978 <alt_find_file+0xb0>
   11958:	e0bffe17 	ldw	r2,-8(fp)
   1195c:	e0ffff17 	ldw	r3,-4(fp)
   11960:	1885883a 	add	r2,r3,r2
   11964:	10800003 	ldbu	r2,0(r2)
   11968:	10803fcc 	andi	r2,r2,255
   1196c:	1080201c 	xori	r2,r2,128
   11970:	10bfe004 	addi	r2,r2,-128
   11974:	10000a1e 	bne	r2,zero,119a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11978:	e0bffd17 	ldw	r2,-12(fp)
   1197c:	10800217 	ldw	r2,8(r2)
   11980:	e0fffe17 	ldw	r3,-8(fp)
   11984:	180d883a 	mov	r6,r3
   11988:	e17fff17 	ldw	r5,-4(fp)
   1198c:	1009883a 	mov	r4,r2
   11990:	0011bec0 	call	11bec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11994:	1000021e 	bne	r2,zero,119a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11998:	e0bffd17 	ldw	r2,-12(fp)
   1199c:	00000706 	br	119bc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   119a0:	e0bffd17 	ldw	r2,-12(fp)
   119a4:	10800017 	ldw	r2,0(r2)
   119a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   119ac:	e0fffd17 	ldw	r3,-12(fp)
   119b0:	d0a00b04 	addi	r2,gp,-32724
   119b4:	18bfcc1e 	bne	r3,r2,118e8 <__alt_mem_onchip_memory+0xf78118e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   119b8:	0005883a 	mov	r2,zero
}
   119bc:	e037883a 	mov	sp,fp
   119c0:	dfc00117 	ldw	ra,4(sp)
   119c4:	df000017 	ldw	fp,0(sp)
   119c8:	dec00204 	addi	sp,sp,8
   119cc:	f800283a 	ret

000119d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   119d0:	defffc04 	addi	sp,sp,-16
   119d4:	df000315 	stw	fp,12(sp)
   119d8:	df000304 	addi	fp,sp,12
   119dc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   119e0:	00bffa04 	movi	r2,-24
   119e4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   119e8:	e03ffd15 	stw	zero,-12(fp)
   119ec:	00001906 	br	11a54 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   119f0:	00800074 	movhi	r2,1
   119f4:	108b4a04 	addi	r2,r2,11560
   119f8:	e0fffd17 	ldw	r3,-12(fp)
   119fc:	18c00324 	muli	r3,r3,12
   11a00:	10c5883a 	add	r2,r2,r3
   11a04:	10800017 	ldw	r2,0(r2)
   11a08:	10000f1e 	bne	r2,zero,11a48 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11a0c:	00800074 	movhi	r2,1
   11a10:	108b4a04 	addi	r2,r2,11560
   11a14:	e0fffd17 	ldw	r3,-12(fp)
   11a18:	18c00324 	muli	r3,r3,12
   11a1c:	10c5883a 	add	r2,r2,r3
   11a20:	e0ffff17 	ldw	r3,-4(fp)
   11a24:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11a28:	d0e00f17 	ldw	r3,-32708(gp)
   11a2c:	e0bffd17 	ldw	r2,-12(fp)
   11a30:	1880020e 	bge	r3,r2,11a3c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11a34:	e0bffd17 	ldw	r2,-12(fp)
   11a38:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   11a3c:	e0bffd17 	ldw	r2,-12(fp)
   11a40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11a44:	00000606 	br	11a60 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11a48:	e0bffd17 	ldw	r2,-12(fp)
   11a4c:	10800044 	addi	r2,r2,1
   11a50:	e0bffd15 	stw	r2,-12(fp)
   11a54:	e0bffd17 	ldw	r2,-12(fp)
   11a58:	10800810 	cmplti	r2,r2,32
   11a5c:	103fe41e 	bne	r2,zero,119f0 <__alt_mem_onchip_memory+0xf78119f0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11a60:	e0bffe17 	ldw	r2,-8(fp)
}
   11a64:	e037883a 	mov	sp,fp
   11a68:	df000017 	ldw	fp,0(sp)
   11a6c:	dec00104 	addi	sp,sp,4
   11a70:	f800283a 	ret

00011a74 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11a74:	defffb04 	addi	sp,sp,-20
   11a78:	df000415 	stw	fp,16(sp)
   11a7c:	df000404 	addi	fp,sp,16
   11a80:	e13ffe15 	stw	r4,-8(fp)
   11a84:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11a88:	e0bfff17 	ldw	r2,-4(fp)
   11a8c:	10840070 	cmpltui	r2,r2,4097
   11a90:	1000021e 	bne	r2,zero,11a9c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11a94:	00840004 	movi	r2,4096
   11a98:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11a9c:	e0fffe17 	ldw	r3,-8(fp)
   11aa0:	e0bfff17 	ldw	r2,-4(fp)
   11aa4:	1885883a 	add	r2,r3,r2
   11aa8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11aac:	e0bffe17 	ldw	r2,-8(fp)
   11ab0:	e0bffc15 	stw	r2,-16(fp)
   11ab4:	00000506 	br	11acc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11ab8:	e0bffc17 	ldw	r2,-16(fp)
   11abc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11ac0:	e0bffc17 	ldw	r2,-16(fp)
   11ac4:	10800804 	addi	r2,r2,32
   11ac8:	e0bffc15 	stw	r2,-16(fp)
   11acc:	e0fffc17 	ldw	r3,-16(fp)
   11ad0:	e0bffd17 	ldw	r2,-12(fp)
   11ad4:	18bff836 	bltu	r3,r2,11ab8 <__alt_mem_onchip_memory+0xf7811ab8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11ad8:	e0bffe17 	ldw	r2,-8(fp)
   11adc:	108007cc 	andi	r2,r2,31
   11ae0:	10000226 	beq	r2,zero,11aec <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11ae4:	e0bffc17 	ldw	r2,-16(fp)
   11ae8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11aec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11af0:	0001883a 	nop
   11af4:	e037883a 	mov	sp,fp
   11af8:	df000017 	ldw	fp,0(sp)
   11afc:	dec00104 	addi	sp,sp,4
   11b00:	f800283a 	ret

00011b04 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11b04:	defffe04 	addi	sp,sp,-8
   11b08:	df000115 	stw	fp,4(sp)
   11b0c:	df000104 	addi	fp,sp,4
   11b10:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11b14:	e0bfff17 	ldw	r2,-4(fp)
   11b18:	10bffe84 	addi	r2,r2,-6
   11b1c:	10c00428 	cmpgeui	r3,r2,16
   11b20:	18001a1e 	bne	r3,zero,11b8c <alt_exception_cause_generated_bad_addr+0x88>
   11b24:	100690ba 	slli	r3,r2,2
   11b28:	00800074 	movhi	r2,1
   11b2c:	1086cf04 	addi	r2,r2,6972
   11b30:	1885883a 	add	r2,r3,r2
   11b34:	10800017 	ldw	r2,0(r2)
   11b38:	1000683a 	jmp	r2
   11b3c:	00011b7c 	xorhi	zero,zero,1133
   11b40:	00011b7c 	xorhi	zero,zero,1133
   11b44:	00011b8c 	andi	zero,zero,1134
   11b48:	00011b8c 	andi	zero,zero,1134
   11b4c:	00011b8c 	andi	zero,zero,1134
   11b50:	00011b7c 	xorhi	zero,zero,1133
   11b54:	00011b84 	movi	zero,1134
   11b58:	00011b8c 	andi	zero,zero,1134
   11b5c:	00011b7c 	xorhi	zero,zero,1133
   11b60:	00011b7c 	xorhi	zero,zero,1133
   11b64:	00011b8c 	andi	zero,zero,1134
   11b68:	00011b7c 	xorhi	zero,zero,1133
   11b6c:	00011b84 	movi	zero,1134
   11b70:	00011b8c 	andi	zero,zero,1134
   11b74:	00011b8c 	andi	zero,zero,1134
   11b78:	00011b7c 	xorhi	zero,zero,1133
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11b7c:	00800044 	movi	r2,1
   11b80:	00000306 	br	11b90 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11b84:	0005883a 	mov	r2,zero
   11b88:	00000106 	br	11b90 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11b8c:	0005883a 	mov	r2,zero
  }
}
   11b90:	e037883a 	mov	sp,fp
   11b94:	df000017 	ldw	fp,0(sp)
   11b98:	dec00104 	addi	sp,sp,4
   11b9c:	f800283a 	ret

00011ba0 <atexit>:
   11ba0:	200b883a 	mov	r5,r4
   11ba4:	000f883a 	mov	r7,zero
   11ba8:	000d883a 	mov	r6,zero
   11bac:	0009883a 	mov	r4,zero
   11bb0:	0011c681 	jmpi	11c68 <__register_exitproc>

00011bb4 <exit>:
   11bb4:	defffe04 	addi	sp,sp,-8
   11bb8:	000b883a 	mov	r5,zero
   11bbc:	dc000015 	stw	r16,0(sp)
   11bc0:	dfc00115 	stw	ra,4(sp)
   11bc4:	2021883a 	mov	r16,r4
   11bc8:	0011d800 	call	11d80 <__call_exitprocs>
   11bcc:	00800074 	movhi	r2,1
   11bd0:	108fc704 	addi	r2,r2,16156
   11bd4:	11000017 	ldw	r4,0(r2)
   11bd8:	20800f17 	ldw	r2,60(r4)
   11bdc:	10000126 	beq	r2,zero,11be4 <exit+0x30>
   11be0:	103ee83a 	callr	r2
   11be4:	8009883a 	mov	r4,r16
   11be8:	0011f700 	call	11f70 <_exit>

00011bec <memcmp>:
   11bec:	01c000c4 	movi	r7,3
   11bf0:	3980192e 	bgeu	r7,r6,11c58 <memcmp+0x6c>
   11bf4:	2144b03a 	or	r2,r4,r5
   11bf8:	11c4703a 	and	r2,r2,r7
   11bfc:	10000f26 	beq	r2,zero,11c3c <memcmp+0x50>
   11c00:	20800003 	ldbu	r2,0(r4)
   11c04:	28c00003 	ldbu	r3,0(r5)
   11c08:	10c0151e 	bne	r2,r3,11c60 <memcmp+0x74>
   11c0c:	31bfff84 	addi	r6,r6,-2
   11c10:	01ffffc4 	movi	r7,-1
   11c14:	00000406 	br	11c28 <memcmp+0x3c>
   11c18:	20800003 	ldbu	r2,0(r4)
   11c1c:	28c00003 	ldbu	r3,0(r5)
   11c20:	31bfffc4 	addi	r6,r6,-1
   11c24:	10c00e1e 	bne	r2,r3,11c60 <memcmp+0x74>
   11c28:	21000044 	addi	r4,r4,1
   11c2c:	29400044 	addi	r5,r5,1
   11c30:	31fff91e 	bne	r6,r7,11c18 <__alt_mem_onchip_memory+0xf7811c18>
   11c34:	0005883a 	mov	r2,zero
   11c38:	f800283a 	ret
   11c3c:	20c00017 	ldw	r3,0(r4)
   11c40:	28800017 	ldw	r2,0(r5)
   11c44:	18bfee1e 	bne	r3,r2,11c00 <__alt_mem_onchip_memory+0xf7811c00>
   11c48:	31bfff04 	addi	r6,r6,-4
   11c4c:	21000104 	addi	r4,r4,4
   11c50:	29400104 	addi	r5,r5,4
   11c54:	39bff936 	bltu	r7,r6,11c3c <__alt_mem_onchip_memory+0xf7811c3c>
   11c58:	303fe91e 	bne	r6,zero,11c00 <__alt_mem_onchip_memory+0xf7811c00>
   11c5c:	003ff506 	br	11c34 <__alt_mem_onchip_memory+0xf7811c34>
   11c60:	10c5c83a 	sub	r2,r2,r3
   11c64:	f800283a 	ret

00011c68 <__register_exitproc>:
   11c68:	defffa04 	addi	sp,sp,-24
   11c6c:	dc000315 	stw	r16,12(sp)
   11c70:	04000074 	movhi	r16,1
   11c74:	840fc704 	addi	r16,r16,16156
   11c78:	80c00017 	ldw	r3,0(r16)
   11c7c:	dc400415 	stw	r17,16(sp)
   11c80:	dfc00515 	stw	ra,20(sp)
   11c84:	18805217 	ldw	r2,328(r3)
   11c88:	2023883a 	mov	r17,r4
   11c8c:	10003726 	beq	r2,zero,11d6c <__register_exitproc+0x104>
   11c90:	10c00117 	ldw	r3,4(r2)
   11c94:	010007c4 	movi	r4,31
   11c98:	20c00e16 	blt	r4,r3,11cd4 <__register_exitproc+0x6c>
   11c9c:	1a000044 	addi	r8,r3,1
   11ca0:	8800221e 	bne	r17,zero,11d2c <__register_exitproc+0xc4>
   11ca4:	18c00084 	addi	r3,r3,2
   11ca8:	18c7883a 	add	r3,r3,r3
   11cac:	18c7883a 	add	r3,r3,r3
   11cb0:	12000115 	stw	r8,4(r2)
   11cb4:	10c7883a 	add	r3,r2,r3
   11cb8:	19400015 	stw	r5,0(r3)
   11cbc:	0005883a 	mov	r2,zero
   11cc0:	dfc00517 	ldw	ra,20(sp)
   11cc4:	dc400417 	ldw	r17,16(sp)
   11cc8:	dc000317 	ldw	r16,12(sp)
   11ccc:	dec00604 	addi	sp,sp,24
   11cd0:	f800283a 	ret
   11cd4:	00800034 	movhi	r2,0
   11cd8:	10800004 	addi	r2,r2,0
   11cdc:	10002626 	beq	r2,zero,11d78 <__register_exitproc+0x110>
   11ce0:	01006404 	movi	r4,400
   11ce4:	d9400015 	stw	r5,0(sp)
   11ce8:	d9800115 	stw	r6,4(sp)
   11cec:	d9c00215 	stw	r7,8(sp)
   11cf0:	00000000 	call	0 <__alt_mem_sdram>
   11cf4:	d9400017 	ldw	r5,0(sp)
   11cf8:	d9800117 	ldw	r6,4(sp)
   11cfc:	d9c00217 	ldw	r7,8(sp)
   11d00:	10001d26 	beq	r2,zero,11d78 <__register_exitproc+0x110>
   11d04:	81000017 	ldw	r4,0(r16)
   11d08:	10000115 	stw	zero,4(r2)
   11d0c:	02000044 	movi	r8,1
   11d10:	22405217 	ldw	r9,328(r4)
   11d14:	0007883a 	mov	r3,zero
   11d18:	12400015 	stw	r9,0(r2)
   11d1c:	20805215 	stw	r2,328(r4)
   11d20:	10006215 	stw	zero,392(r2)
   11d24:	10006315 	stw	zero,396(r2)
   11d28:	883fde26 	beq	r17,zero,11ca4 <__alt_mem_onchip_memory+0xf7811ca4>
   11d2c:	18c9883a 	add	r4,r3,r3
   11d30:	2109883a 	add	r4,r4,r4
   11d34:	1109883a 	add	r4,r2,r4
   11d38:	21802215 	stw	r6,136(r4)
   11d3c:	01800044 	movi	r6,1
   11d40:	12406217 	ldw	r9,392(r2)
   11d44:	30cc983a 	sll	r6,r6,r3
   11d48:	4992b03a 	or	r9,r9,r6
   11d4c:	12406215 	stw	r9,392(r2)
   11d50:	21c04215 	stw	r7,264(r4)
   11d54:	01000084 	movi	r4,2
   11d58:	893fd21e 	bne	r17,r4,11ca4 <__alt_mem_onchip_memory+0xf7811ca4>
   11d5c:	11006317 	ldw	r4,396(r2)
   11d60:	218cb03a 	or	r6,r4,r6
   11d64:	11806315 	stw	r6,396(r2)
   11d68:	003fce06 	br	11ca4 <__alt_mem_onchip_memory+0xf7811ca4>
   11d6c:	18805304 	addi	r2,r3,332
   11d70:	18805215 	stw	r2,328(r3)
   11d74:	003fc606 	br	11c90 <__alt_mem_onchip_memory+0xf7811c90>
   11d78:	00bfffc4 	movi	r2,-1
   11d7c:	003fd006 	br	11cc0 <__alt_mem_onchip_memory+0xf7811cc0>

00011d80 <__call_exitprocs>:
   11d80:	defff504 	addi	sp,sp,-44
   11d84:	df000915 	stw	fp,36(sp)
   11d88:	dd400615 	stw	r21,24(sp)
   11d8c:	dc800315 	stw	r18,12(sp)
   11d90:	dfc00a15 	stw	ra,40(sp)
   11d94:	ddc00815 	stw	r23,32(sp)
   11d98:	dd800715 	stw	r22,28(sp)
   11d9c:	dd000515 	stw	r20,20(sp)
   11da0:	dcc00415 	stw	r19,16(sp)
   11da4:	dc400215 	stw	r17,8(sp)
   11da8:	dc000115 	stw	r16,4(sp)
   11dac:	d9000015 	stw	r4,0(sp)
   11db0:	2839883a 	mov	fp,r5
   11db4:	04800044 	movi	r18,1
   11db8:	057fffc4 	movi	r21,-1
   11dbc:	00800074 	movhi	r2,1
   11dc0:	108fc704 	addi	r2,r2,16156
   11dc4:	12000017 	ldw	r8,0(r2)
   11dc8:	45005217 	ldw	r20,328(r8)
   11dcc:	44c05204 	addi	r19,r8,328
   11dd0:	a0001c26 	beq	r20,zero,11e44 <__call_exitprocs+0xc4>
   11dd4:	a0800117 	ldw	r2,4(r20)
   11dd8:	15ffffc4 	addi	r23,r2,-1
   11ddc:	b8000d16 	blt	r23,zero,11e14 <__call_exitprocs+0x94>
   11de0:	14000044 	addi	r16,r2,1
   11de4:	8421883a 	add	r16,r16,r16
   11de8:	8421883a 	add	r16,r16,r16
   11dec:	84402004 	addi	r17,r16,128
   11df0:	a463883a 	add	r17,r20,r17
   11df4:	a421883a 	add	r16,r20,r16
   11df8:	e0001e26 	beq	fp,zero,11e74 <__call_exitprocs+0xf4>
   11dfc:	80804017 	ldw	r2,256(r16)
   11e00:	e0801c26 	beq	fp,r2,11e74 <__call_exitprocs+0xf4>
   11e04:	bdffffc4 	addi	r23,r23,-1
   11e08:	843fff04 	addi	r16,r16,-4
   11e0c:	8c7fff04 	addi	r17,r17,-4
   11e10:	bd7ff91e 	bne	r23,r21,11df8 <__alt_mem_onchip_memory+0xf7811df8>
   11e14:	00800034 	movhi	r2,0
   11e18:	10800004 	addi	r2,r2,0
   11e1c:	10000926 	beq	r2,zero,11e44 <__call_exitprocs+0xc4>
   11e20:	a0800117 	ldw	r2,4(r20)
   11e24:	1000301e 	bne	r2,zero,11ee8 <__call_exitprocs+0x168>
   11e28:	a0800017 	ldw	r2,0(r20)
   11e2c:	10003226 	beq	r2,zero,11ef8 <__call_exitprocs+0x178>
   11e30:	a009883a 	mov	r4,r20
   11e34:	98800015 	stw	r2,0(r19)
   11e38:	00000000 	call	0 <__alt_mem_sdram>
   11e3c:	9d000017 	ldw	r20,0(r19)
   11e40:	a03fe41e 	bne	r20,zero,11dd4 <__alt_mem_onchip_memory+0xf7811dd4>
   11e44:	dfc00a17 	ldw	ra,40(sp)
   11e48:	df000917 	ldw	fp,36(sp)
   11e4c:	ddc00817 	ldw	r23,32(sp)
   11e50:	dd800717 	ldw	r22,28(sp)
   11e54:	dd400617 	ldw	r21,24(sp)
   11e58:	dd000517 	ldw	r20,20(sp)
   11e5c:	dcc00417 	ldw	r19,16(sp)
   11e60:	dc800317 	ldw	r18,12(sp)
   11e64:	dc400217 	ldw	r17,8(sp)
   11e68:	dc000117 	ldw	r16,4(sp)
   11e6c:	dec00b04 	addi	sp,sp,44
   11e70:	f800283a 	ret
   11e74:	a0800117 	ldw	r2,4(r20)
   11e78:	80c00017 	ldw	r3,0(r16)
   11e7c:	10bfffc4 	addi	r2,r2,-1
   11e80:	15c01426 	beq	r2,r23,11ed4 <__call_exitprocs+0x154>
   11e84:	80000015 	stw	zero,0(r16)
   11e88:	183fde26 	beq	r3,zero,11e04 <__alt_mem_onchip_memory+0xf7811e04>
   11e8c:	95c8983a 	sll	r4,r18,r23
   11e90:	a0806217 	ldw	r2,392(r20)
   11e94:	a5800117 	ldw	r22,4(r20)
   11e98:	2084703a 	and	r2,r4,r2
   11e9c:	10000b26 	beq	r2,zero,11ecc <__call_exitprocs+0x14c>
   11ea0:	a0806317 	ldw	r2,396(r20)
   11ea4:	2088703a 	and	r4,r4,r2
   11ea8:	20000c1e 	bne	r4,zero,11edc <__call_exitprocs+0x15c>
   11eac:	89400017 	ldw	r5,0(r17)
   11eb0:	d9000017 	ldw	r4,0(sp)
   11eb4:	183ee83a 	callr	r3
   11eb8:	a0800117 	ldw	r2,4(r20)
   11ebc:	15bfbf1e 	bne	r2,r22,11dbc <__alt_mem_onchip_memory+0xf7811dbc>
   11ec0:	98800017 	ldw	r2,0(r19)
   11ec4:	153fcf26 	beq	r2,r20,11e04 <__alt_mem_onchip_memory+0xf7811e04>
   11ec8:	003fbc06 	br	11dbc <__alt_mem_onchip_memory+0xf7811dbc>
   11ecc:	183ee83a 	callr	r3
   11ed0:	003ff906 	br	11eb8 <__alt_mem_onchip_memory+0xf7811eb8>
   11ed4:	a5c00115 	stw	r23,4(r20)
   11ed8:	003feb06 	br	11e88 <__alt_mem_onchip_memory+0xf7811e88>
   11edc:	89000017 	ldw	r4,0(r17)
   11ee0:	183ee83a 	callr	r3
   11ee4:	003ff406 	br	11eb8 <__alt_mem_onchip_memory+0xf7811eb8>
   11ee8:	a0800017 	ldw	r2,0(r20)
   11eec:	a027883a 	mov	r19,r20
   11ef0:	1029883a 	mov	r20,r2
   11ef4:	003fb606 	br	11dd0 <__alt_mem_onchip_memory+0xf7811dd0>
   11ef8:	0005883a 	mov	r2,zero
   11efc:	003ffb06 	br	11eec <__alt_mem_onchip_memory+0xf7811eec>

00011f00 <__floatundidf>:
   11f00:	defffc04 	addi	sp,sp,-16
   11f04:	dc800215 	stw	r18,8(sp)
   11f08:	2025883a 	mov	r18,r4
   11f0c:	2809883a 	mov	r4,r5
   11f10:	dfc00315 	stw	ra,12(sp)
   11f14:	dc400115 	stw	r17,4(sp)
   11f18:	dc000015 	stw	r16,0(sp)
   11f1c:	000f0cc0 	call	f0cc <__floatunsidf>
   11f20:	000d883a 	mov	r6,zero
   11f24:	01d07c34 	movhi	r7,16880
   11f28:	180b883a 	mov	r5,r3
   11f2c:	1009883a 	mov	r4,r2
   11f30:	00035f40 	call	35f4 <__muldf3>
   11f34:	9009883a 	mov	r4,r18
   11f38:	1023883a 	mov	r17,r2
   11f3c:	1821883a 	mov	r16,r3
   11f40:	000f0cc0 	call	f0cc <__floatunsidf>
   11f44:	880d883a 	mov	r6,r17
   11f48:	800f883a 	mov	r7,r16
   11f4c:	1009883a 	mov	r4,r2
   11f50:	180b883a 	mov	r5,r3
   11f54:	00022900 	call	2290 <__adddf3>
   11f58:	dfc00317 	ldw	ra,12(sp)
   11f5c:	dc800217 	ldw	r18,8(sp)
   11f60:	dc400117 	ldw	r17,4(sp)
   11f64:	dc000017 	ldw	r16,0(sp)
   11f68:	dec00404 	addi	sp,sp,16
   11f6c:	f800283a 	ret

00011f70 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11f70:	defffd04 	addi	sp,sp,-12
   11f74:	df000215 	stw	fp,8(sp)
   11f78:	df000204 	addi	fp,sp,8
   11f7c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11f80:	0001883a 	nop
   11f84:	e0bfff17 	ldw	r2,-4(fp)
   11f88:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11f8c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11f90:	10000226 	beq	r2,zero,11f9c <_exit+0x2c>
    ALT_SIM_FAIL();
   11f94:	002af070 	cmpltui	zero,zero,43969
   11f98:	00000106 	br	11fa0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11f9c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11fa0:	003fff06 	br	11fa0 <__alt_mem_onchip_memory+0xf7811fa0>
