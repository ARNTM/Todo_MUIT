
backpropagation_Tecnica0.elf:     file format elf32-littlenios2
backpropagation_Tecnica0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00013934 memsz 0x00013934 flags r-x
    LOAD off    0x00014954 vaddr 0x00013954 paddr 0x00015454 align 2**12
         filesz 0x00001b00 memsz 0x00001b00 flags rw-
    LOAD off    0x00016f54 vaddr 0x00016f54 paddr 0x00016f54 align 2**12
         filesz 0x00000000 memsz 0x0000290c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013258  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b8  0001349c  0001349c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b00  00013954  00015454  00014954  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000290c  00016f54  00016f54  00016f54  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00019860  00019860  00016454  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08800000  08800000  00016454  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00016454  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001210  00000000  00000000  00016478  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00029e30  00000000  00000000  00017688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b002  00000000  00000000  000414b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dca5  00000000  00000000  0004c4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002910  00000000  00000000  0005a160  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004406  00000000  00000000  0005ca70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b9e8  00000000  00000000  00060e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0007c860  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ef8  00000000  00000000  0007c890  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008237a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0008237d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00082380  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00082381  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00082382  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00082386  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008238a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008238e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00082397  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000823a0  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000e  00000000  00000000  000823a9  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000029  00000000  00000000  000823b7  2**0
                  CONTENTS, READONLY
 30 .jdi          00003a07  00000000  00000000  000823e0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0004bfc0  00000000  00000000  00085de7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001349c l    d  .rodata	00000000 .rodata
00013954 l    d  .rwdata	00000000 .rwdata
00016f54 l    d  .bss	00000000 .bss
00019860 l    d  .sdram	00000000 .sdram
08800000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../backpropagation_Tecnica0_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 s_tanh.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_expm1.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00013954 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
000136a6 l     O .rodata	00000010 zeroes.4404
00008674 l     F .text	000000bc __sbprintf
000136b6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00008884 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000a3b4 l     F .text	00000008 __fp_unlock
0000a3c8 l     F .text	0000019c __sinit.part.1
0000a564 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00013d98 l     O .rwdata	00000020 lc_ctype_charset
00013d78 l     O .rwdata	00000020 lc_message_charset
00013db8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000136e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000dab0 l     F .text	000000fc __sprint_r.part.0
00013818 l     O .rodata	00000010 blanks.4348
00013808 l     O .rodata	00000010 zeroes.4349
0000f03c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001066c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010778 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000107a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00010a84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010b64 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010c50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010e24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015444 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00011214 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011348 l     F .text	00000034 alt_dev_reg
000143a0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001164c l     F .text	0000020c altera_avalon_jtag_uart_irq
00011858 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011e90 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012378 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000127ec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001292c l     F .text	0000003c alt_get_errno
00012968 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016fb4 g     O .bss	00000004 alt_instruction_exception_handler
000061b0 g     F .text	00000018 putchar
0000d000 g     F .text	00000074 _mprec_log10
0000d0ec g     F .text	0000008c __any_on
0000f730 g     F .text	00000054 _isatty_r
000136f0 g     O .rodata	00000028 __mprec_tinytens
00010d60 g     F .text	0000007c alt_main
000061c8 g     F .text	000000c0 _puts_r
00001c78 g     F .text	00000774 expm1
00019760 g     O .bss	00000100 alt_irq
000023ec g     F .text	00000014 fabs
0000f784 g     F .text	00000060 _lseek_r
000018c0 g     F .text	00000130 sqrt
00015454 g       *ABS*	00000000 __flash_rwdata_start
0001053c g     F .text	00000088 .hidden __eqdf2
0000b1cc g     F .text	0000005c _gettimeofday_r
00019860 g       *ABS*	00000000 __alt_heap_start
0000616c g     F .text	0000003c printf
0000f844 g     F .text	0000009c _wcrtomb_r
0000d970 g     F .text	0000005c __sseek
0000a704 g     F .text	00000010 __sinit
00012d0c g     F .text	00000024 alt_get_cpu_freq
0000f0f8 g     F .text	00000140 __swbuf_r
0000b228 g     F .text	0000007c _setlocale_r
0000a56c g     F .text	00000068 __sfmoreglue
00010e00 g     F .text	00000024 __malloc_unlock
00002944 g     F .text	00000440 .hidden __divsf3
0000bef8 g     F .text	0000015c memmove
00011f84 g     F .text	00000280 perf_print_formatted_report
0000a6ec g     F .text	00000018 _cleanup
00016f54 g     O .bss	00000004 patNum
0000c17c g     F .text	000000a8 _Balloc
0000491c g     F .text	000000dc .hidden __gtdf2
00012b80 g     F .text	00000024 altera_nios2_gen2_irq_init
0000612c g     F .text	00000010 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000f6d4 g     F .text	0000005c _fstat_r
00016f70 g     O .bss	00000004 errno
0000d8ec g     F .text	00000008 __seofread
00016fa0 g     O .bss	00000004 alt_argv
0001d400 g       *ABS*	00000000 _gp
00003180 g     F .text	000004e4 .hidden __subsf3
00016f58 g     O .bss	00000004 errThisPat
00016f60 g     O .bss	00000004 RMSerror
00014220 g     O .rwdata	00000180 alt_fd_list
000007b8 g     F .text	00000074 WeightChangesH2O
00000948 g     F .text	00000108 WeightChangesH1H2
000061a8 g     F .text	00000008 _putchar_r
00012d30 g     F .text	00000090 alt_find_dev
0000bdb0 g     F .text	00000148 memcpy
0000a3bc g     F .text	0000000c _cleanup_r
00005b80 g     F .text	000000dc .hidden __floatsidf
000128b0 g     F .text	0000007c alt_io_redirect
000049f8 g     F .text	000000f4 .hidden __ltdf2
0001349c g       *ABS*	00000000 __DTOR_END__
00006288 g     F .text	00000014 puts
00012ffc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00002400 g     F .text	00000074 __fpclassifyd
0000cf5c g     F .text	000000a4 __ratio
000063e0 g     F .text	00000030 system
0000f020 g     F .text	0000001c __vfiprintf_internal
00011a50 g     F .text	0000021c altera_avalon_jtag_uart_read
0000613c g     F .text	00000030 _printf_r
00006070 g     F .text	00000064 .hidden __udivsi3
00010ac0 g     F .text	000000a4 isatty
00013740 g     O .rodata	000000c8 __mprec_tens
0000b2a4 g     F .text	0000000c __locale_charset
00016f8c g     O .bss	00000008 alt_timezone
00012f6c g     F .text	00000090 alt_icache_flush
00016f88 g     O .bss	00000004 __malloc_top_pad
00012cac g     F .text	00000040 perf_get_num_starts
0001541c g     O .rwdata	00000004 __mb_cur_max
0000b2d4 g     F .text	0000000c _localeconv_r
00015408 g     O .rwdata	00000004 LR_H2O
0000c588 g     F .text	0000003c __i2b
0000ab88 g     F .text	000004bc __sfvwrite_r
0000d844 g     F .text	00000054 _sbrk_r
00000bd8 g     F .text	0000016c WeightChangesIH1
00000d44 g     F .text	00000150 WeightUpdatesIH1
0000f7e4 g     F .text	00000060 _read_r
0001543c g     O .rwdata	00000004 alt_max_fd
0000f3c8 g     F .text	000000f0 _fclose_r
0000a384 g     F .text	00000030 fflush
00016f84 g     O .bss	00000004 __malloc_max_sbrked_mem
00005c5c g     F .text	00000110 .hidden __extendsfdf2
000063b0 g     F .text	00000030 _system_r
00003788 g     F .text	000008ac .hidden __adddf3
000012f4 g     F .text	000000d8 displayResults
00015404 g     O .rwdata	00000004 LR_IH1
0000cd04 g     F .text	0000010c __b2d
00010004 g     F .text	00000538 .hidden __umoddi3
00010c8c g     F .text	000000d4 lseek
00015410 g     O .rwdata	00000004 __fdlib_version
00016fe0 g     O .bss	00000050 hiddenVal2
00015414 g     O .rwdata	00000004 _global_impure_ptr
0000034c g     F .text	0000046c calcNet
0000d2e0 g     F .text	00000564 _realloc_r
00019860 g       *ABS*	00000000 __bss_end
000126fc g     F .text	000000f0 alt_iic_isr_register
0001110c g     F .text	00000108 alt_tick
0000fa8c g     F .text	00000578 .hidden __udivdi3
0000f630 g     F .text	00000024 _fputwc_r
00013718 g     O .rodata	00000028 __mprec_bigtens
0000c36c g     F .text	00000104 __s2b
000105c4 g     F .text	000000a8 .hidden __floatunsidf
0000ca44 g     F .text	00000060 __mcmp
0000a724 g     F .text	00000018 __fp_lock_all
000126b0 g     F .text	0000004c alt_ic_irq_enabled
00011070 g     F .text	0000009c alt_alarm_stop
000013cc g     F .text	000000ec calcOverallError
00016fb0 g     O .bss	00000004 alt_irq_active
0001540c g     O .rwdata	00000004 LR_H1H2
000000fc g     F .exceptions	000000d4 alt_irq_handler
000141f8 g     O .rwdata	00000028 alt_dev_null
00012330 g     F .text	00000048 alt_dcache_flush_all
0000c470 g     F .text	00000068 __hi0bits
00005b00 g     F .text	00000080 .hidden __fixdfsi
00015454 g       *ABS*	00000000 __ram_rwdata_end
00017030 g     O .bss	00000050 delta_h2
08800000 g       *ABS*	00000000 __alt_mem_onchip_memory
00015434 g     O .rwdata	00000008 alt_dev_list
00011250 g     F .text	000000f8 write
0000d178 g     F .text	000000a0 _putc_r
00017080 g     O .bss	00000054 weightsH2O
00013954 g       *ABS*	00000000 __ram_rodata_end
000107e0 g     F .text	000000b0 fstat
000049f8 g     F .text	000000f4 .hidden __ledf2
00000a50 g     F .text	00000188 WeightUpdatesH1H2
0000c7bc g     F .text	00000140 __pow5mult
0000dbc4 g     F .text	0000145c ___vfiprintf_internal_r
00016f7c g     O .bss	00000004 __nlocale_changed
000060d4 g     F .text	00000058 .hidden __umodsi3
00019860 g       *ABS*	00000000 end
0001158c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001349c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00011f08 g     F .text	0000007c alt_avalon_timer_sc_init
00005f14 g     F .text	00000064 .hidden __clzsi2
00011c6c g     F .text	00000224 altera_avalon_jtag_uart_write
0000170c g     F .text	000001b4 tanh
0000a714 g     F .text	00000004 __sfp_lock_acquire
00001170 g     F .text	00000184 initData
0000bccc g     F .text	000000e4 memchr
00006460 g     F .text	000021f8 ___vfprintf_internal_r
0000082c g     F .text	0000011c WeightUpdatesH2O
0000a878 g     F .text	00000310 _free_r
00000290 g     F .text	000000bc print_array
0000b2b0 g     F .text	00000010 __locale_mb_cur_max
00013278 g     F .text	00000180 __call_exitprocs
00016f78 g     O .bss	00000004 __mlocale_changed
00015420 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00016fa8 g     O .bss	00000004 _alt_tick_rate
00015400 g     O .rwdata	00000004 numEpochs
000170d4 g     O .bss	000000c8 ponderacion1
000133f8 g     F .text	00000070 .hidden __floatundidf
000062b4 g     F .text	00000064 rand
0000c8fc g     F .text	00000148 __lshift
00016fac g     O .bss	00000004 _alt_nticks
00010e60 g     F .text	000000fc read
000113b4 g     F .text	00000074 alt_sys_init
00003664 g     F .text	00000124 .hidden __floatsisf
00013160 g     F .text	00000118 __register_exitproc
0000c5c4 g     F .text	000001f8 __multiply
000118f8 g     F .text	00000068 altera_avalon_jtag_uart_close
00013954 g       *ABS*	00000000 __ram_rwdata_start
0001349c g       *ABS*	00000000 __ram_rodata_start
00016fb8 g     O .bss	00000028 __malloc_current_mallinfo
0001719c g     O .bss	000000c8 der_hiddenVal1
0000ce10 g     F .text	0000014c __d2b
00016f64 g     O .bss	00000004 outPred
00011428 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012ec8 g     F .text	000000a4 alt_get_fd
00000e94 g     F .text	0000004c getRand
0000f2b0 g     F .text	00000054 _close_r
00012ba4 g     F .text	000000bc perf_get_section_time
00016f68 g     O .bss	00000004 ponderacion3
000130e4 g     F .text	0000007c memcmp
000114e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019860 g       *ABS*	00000000 __alt_stack_base
00011538 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00008730 g     F .text	00000154 __swsetup_r
00004034 g     F .text	000008e8 .hidden __divdf3
0000a5d4 g     F .text	00000118 __sfp
0000d074 g     F .text	00000078 __copybits
00012c60 g     F .text	0000004c perf_get_total_time
00017264 g     O .bss	00000ff0 weightsH1H2_old
00013df0 g     O .rwdata	00000408 __malloc_av_
0000a720 g     F .text	00000004 __sinit_lock_release
00004aec g     F .text	00000718 .hidden __muldf3
0000d898 g     F .text	00000054 __sread
00012dc0 g     F .text	00000108 alt_find_file
000123b4 g     F .text	000000a4 alt_dev_llist_insert
00010ddc g     F .text	00000024 __malloc_lock
00010fc0 g     F .text	000000b0 sbrk
0000a328 g     F .text	0000005c _fflush_r
0000f304 g     F .text	000000c4 _calloc_r
00010890 g     F .text	000001f4 gettimeofday
00016f54 g       *ABS*	00000000 __bss_start
0000c054 g     F .text	00000128 memset
00000ee0 g     F .text	00000290 initWeights
000014b8 g     F .text	00000254 main
00016fa4 g     O .bss	00000004 alt_envp
00016f80 g     O .bss	00000004 __malloc_max_total_mem
00011488 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f238 g     F .text	00000018 __swbuf
0000629c g     F .text	00000018 srand
0000d9cc g     F .text	00000008 __sclose
00002474 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0000f4b8 g     F .text	00000014 fclose
00005d6c g     F .text	000001a8 .hidden __truncdfsf2
00008a84 g     F .text	00001688 _dtoa_r
0000b4c0 g     F .text	0000080c _malloc_r
0000f9a0 g     F .text	00000030 __ascii_wctomb
00006410 g     F .text	00000050 time
00015440 g     O .rwdata	00000004 alt_errno
0000b044 g     F .text	000000c4 _fwalk
0000d218 g     F .text	000000c8 putc
00005f78 g     F .text	00000084 .hidden __divsi3
0000a754 g     F .text	00000124 _malloc_trim_r
0001349c g       *ABS*	00000000 __CTOR_END__
00002d84 g     F .text	000003fc .hidden __mulsf3
0000d9d4 g     F .text	000000dc strcmp
0001349c g       *ABS*	00000000 __flash_rodata_start
00018254 g     O .bss	000000c8 hiddenVal1
0001349c g       *ABS*	00000000 __DTOR_LIST__
0001053c g     F .text	00000088 .hidden __nedf2
0001137c g     F .text	00000038 alt_irq_init
00010f5c g     F .text	00000064 alt_release_fd
00013559 g     O .rodata	00000100 .hidden __clz_tab
00016f74 g     O .bss	00000004 _PathLocale
00013098 g     F .text	00000014 atexit
0000f250 g     F .text	00000060 _write_r
0000b2e0 g     F .text	00000018 setlocale
00015418 g     O .rwdata	00000004 _impure_ptr
00016f9c g     O .bss	00000004 alt_argc
0000a10c g     F .text	0000021c __sflush_r
000124b8 g     F .text	00000060 _do_dtors
0000b2cc g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000cca0 g     F .text	00000064 __ulp
0000a73c g     F .text	00000018 __fp_unlock_all
0001542c g     O .rwdata	00000008 alt_fs_list
0001831c g     O .bss	00000258 weightsIH1
00018574 g     O .bss	00000054 weightsH2O_old
00016f6c g     O .bss	00000004 der_outPred
00016f94 g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000b2f8 g     F .text	0000000c localeconv
000019f0 g     F .text	00000288 __ieee754_sqrt
0001254c g     F .text	00000050 alt_ic_isr_register
00015454 g       *ABS*	00000000 _edata
00019860 g       *ABS*	00000000 _end
0000f4cc g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00011960 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00012624 g     F .text	0000008c alt_ic_irq_disable
000185c8 g     O .bss	00000030 trainInputs
0000d8f4 g     F .text	0000007c __swrite
00015424 g     O .rwdata	00000004 __malloc_trim_threshold
00012cec g     F .text	00000020 alt_get_performance_counter_base
0000b2c0 g     F .text	0000000c __locale_msgcharset
000130ac g     F .text	00000038 exit
0000b108 g     F .text	000000c4 _fwalk_reent
0000caa4 g     F .text	000001fc __mdiff
00005ffc g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000a718 g     F .text	00000004 __sfp_lock_release
000185f8 g     O .bss	00000010 trainOutput
00000000 g       *ABS*	00000000 __alt_mem_sdram
00018608 g     O .bss	00000050 ponderacion2
00018658 g     O .bss	00000ff0 weightsH1H2
00013468 g     F .text	00000034 _exit
00012204 g     F .text	0000012c alt_alarm_start
00016f5c g     O .bss	00000004 delta_o
0000fa2c g     F .text	00000060 .hidden __muldi3
0000b304 g     F .text	000001bc __smakebuf_r
00006318 g     F .text	00000098 strlen
00012a2c g     F .text	00000154 open
0000491c g     F .text	000000dc .hidden __gedf2
00019648 g     O .bss	00000050 der_hiddenVal2
00015428 g     O .rwdata	00000004 __wctomb
0000dbac g     F .text	00000018 __sprint_r
00012518 g     F .text	00000034 alt_icache_flush_all
00015450 g     O .rwdata	00000004 alt_priority_mask
00019698 g     O .bss	000000c8 delta_h1
0001259c g     F .text	00000088 alt_ic_irq_enable
00008658 g     F .text	0000001c __vfprintf_internal
0000f9d0 g     F .text	0000005c _wctomb_r
00005204 g     F .text	000008fc .hidden __subdf3
0000c4d8 g     F .text	000000b0 __lo0bits
00015448 g     O .rwdata	00000008 alt_alarm_list
00012458 g     F .text	00000060 _do_ctors
0000f8e0 g     F .text	000000c0 wcrtomb
000106a8 g     F .text	000000d0 close
0000247c g     F .text	000004c8 .hidden __addsf3
00010bcc g     F .text	00000084 alt_load
0000f654 g     F .text	00000080 fputwc
0000a71c g     F .text	00000004 __sinit_lock_acquire
0000c24c g     F .text	00000120 __multadd
0000c224 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory+0xf7800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10a5d804 	addi	r2,r2,-26784
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a5d804 	addi	r2,r2,-26784
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory+0xf780012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory+0xf7800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6ed17 	ldw	r2,-25676(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6ed17 	ldw	r2,-25676(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_mem_onchip_memory+0xf7800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6b50014 	ori	gp,gp,54272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	109bd514 	ori	r2,r2,28500

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18e61814 	ori	r3,r3,39008

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_mem_onchip_memory+0xf7800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	0010bcc0 	call	10bcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	0010d600 	call	10d60 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_mem_onchip_memory+0xf780028c>

00000290 <print_array>:

//==============================================================
//************** function definitions **************************
//==============================================================
void print_array(float data[], int n)
{
     290:	defffb04 	addi	sp,sp,-20
     294:	dfc00415 	stw	ra,16(sp)
     298:	df000315 	stw	fp,12(sp)
     29c:	df000304 	addi	fp,sp,12
     2a0:	e13ffe15 	stw	r4,-8(fp)
     2a4:	e17fff15 	stw	r5,-4(fp)
    int i;

    printf("[");
     2a8:	010016c4 	movi	r4,91
     2ac:	00061b00 	call	61b0 <putchar>
    for (i = 0; i < n; i++)
     2b0:	e03ffd15 	stw	zero,-12(fp)
     2b4:	00001906 	br	31c <print_array+0x8c>
    {

        printf("%f",data[i]);
     2b8:	e0bffd17 	ldw	r2,-12(fp)
     2bc:	1085883a 	add	r2,r2,r2
     2c0:	1085883a 	add	r2,r2,r2
     2c4:	1007883a 	mov	r3,r2
     2c8:	e0bffe17 	ldw	r2,-8(fp)
     2cc:	10c5883a 	add	r2,r2,r3
     2d0:	10c00017 	ldw	r3,0(r2)
     2d4:	1809883a 	mov	r4,r3
     2d8:	0005c5c0 	call	5c5c <__extendsfdf2>
     2dc:	100d883a 	mov	r6,r2
     2e0:	180f883a 	mov	r7,r3
     2e4:	300b883a 	mov	r5,r6
     2e8:	380d883a 	mov	r6,r7
     2ec:	01000074 	movhi	r4,1
     2f0:	210d2704 	addi	r4,r4,13468
     2f4:	000616c0 	call	616c <printf>
        if (i != n-1)
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	10ffffc4 	addi	r3,r2,-1
     300:	e0bffd17 	ldw	r2,-12(fp)
     304:	18800226 	beq	r3,r2,310 <print_array+0x80>
        {
            printf(",");
     308:	01000b04 	movi	r4,44
     30c:	00061b00 	call	61b0 <putchar>
void print_array(float data[], int n)
{
    int i;

    printf("[");
    for (i = 0; i < n; i++)
     310:	e0bffd17 	ldw	r2,-12(fp)
     314:	10800044 	addi	r2,r2,1
     318:	e0bffd15 	stw	r2,-12(fp)
     31c:	e0fffd17 	ldw	r3,-12(fp)
     320:	e0bfff17 	ldw	r2,-4(fp)
     324:	18bfe416 	blt	r3,r2,2b8 <__alt_mem_onchip_memory+0xf78002b8>
        if (i != n-1)
        {
            printf(",");
        }
    }
    printf("]\n");
     328:	01000074 	movhi	r4,1
     32c:	210d2804 	addi	r4,r4,13472
     330:	00062880 	call	6288 <puts>
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <calcNet>:

//***********************************
// calculates the network output
void calcNet(void)
{
     34c:	defffb04 	addi	sp,sp,-20
     350:	dfc00415 	stw	ra,16(sp)
     354:	df000315 	stw	fp,12(sp)
     358:	dc000215 	stw	r16,8(sp)
     35c:	df000304 	addi	fp,sp,12
    //calculate the outputs of the hidden neurons of hidden layer 1
    //the hidden neurons are tanh
    int i = 0;
     360:	e03ffd15 	stw	zero,-12(fp)
    int j =0;
     364:	e03ffe15 	stw	zero,-8(fp)


    for(i = 0;i<numHidden1;i++)
     368:	e03ffd15 	stw	zero,-12(fp)
     36c:	00006306 	br	4fc <calcNet+0x1b0>
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];
     370:	008000b4 	movhi	r2,2
     374:	10a0c704 	addi	r2,r2,-31972
     378:	e0fffd17 	ldw	r3,-12(fp)
     37c:	18c01904 	addi	r3,r3,100
     380:	18c7883a 	add	r3,r3,r3
     384:	18c7883a 	add	r3,r3,r3
     388:	10c5883a 	add	r2,r2,r3
     38c:	11000017 	ldw	r4,0(r2)
     390:	00800074 	movhi	r2,1
     394:	109c3504 	addi	r2,r2,28884
     398:	e0fffd17 	ldw	r3,-12(fp)
     39c:	18c7883a 	add	r3,r3,r3
     3a0:	18c7883a 	add	r3,r3,r3
     3a4:	10c5883a 	add	r2,r2,r3
     3a8:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numInputs;j++)
     3ac:	e03ffe15 	stw	zero,-8(fp)
     3b0:	00003106 	br	478 <calcNet+0x12c>
        {

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);
     3b4:	00800074 	movhi	r2,1
     3b8:	109c3504 	addi	r2,r2,28884
     3bc:	e0fffd17 	ldw	r3,-12(fp)
     3c0:	18c7883a 	add	r3,r3,r3
     3c4:	18c7883a 	add	r3,r3,r3
     3c8:	10c5883a 	add	r2,r2,r3
     3cc:	14000017 	ldw	r16,0(r2)
     3d0:	d126d517 	ldw	r4,-25772(gp)
     3d4:	00c000b4 	movhi	r3,2
     3d8:	18e17204 	addi	r3,r3,-31288
     3dc:	2005883a 	mov	r2,r4
     3e0:	1085883a 	add	r2,r2,r2
     3e4:	1105883a 	add	r2,r2,r4
     3e8:	e13ffe17 	ldw	r4,-8(fp)
     3ec:	1105883a 	add	r2,r2,r4
     3f0:	1085883a 	add	r2,r2,r2
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	1885883a 	add	r2,r3,r2
     3fc:	11800017 	ldw	r6,0(r2)
     400:	008000b4 	movhi	r2,2
     404:	10a0c704 	addi	r2,r2,-31972
     408:	e0fffe17 	ldw	r3,-8(fp)
     40c:	19000ca4 	muli	r4,r3,50
     410:	e0fffd17 	ldw	r3,-12(fp)
     414:	20c7883a 	add	r3,r4,r3
     418:	18c7883a 	add	r3,r3,r3
     41c:	18c7883a 	add	r3,r3,r3
     420:	10c5883a 	add	r2,r2,r3
     424:	10c00017 	ldw	r3,0(r2)
     428:	180b883a 	mov	r5,r3
     42c:	3009883a 	mov	r4,r6
     430:	0002d840 	call	2d84 <__mulsf3>
     434:	1007883a 	mov	r3,r2
     438:	1805883a 	mov	r2,r3
     43c:	100b883a 	mov	r5,r2
     440:	8009883a 	mov	r4,r16
     444:	000247c0 	call	247c <__addsf3>
     448:	1007883a 	mov	r3,r2
     44c:	1809883a 	mov	r4,r3
     450:	00800074 	movhi	r2,1
     454:	109c3504 	addi	r2,r2,28884
     458:	e0fffd17 	ldw	r3,-12(fp)
     45c:	18c7883a 	add	r3,r3,r3
     460:	18c7883a 	add	r3,r3,r3
     464:	10c5883a 	add	r2,r2,r3
     468:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden1;i++)
    {

      ponderacion1[i] =  weightsIH1[numInputs][i];

        for(j = 0;j<numInputs;j++)
     46c:	e0bffe17 	ldw	r2,-8(fp)
     470:	10800044 	addi	r2,r2,1
     474:	e0bffe15 	stw	r2,-8(fp)
     478:	e0bffe17 	ldw	r2,-8(fp)
     47c:	10800090 	cmplti	r2,r2,2
     480:	103fcc1e 	bne	r2,zero,3b4 <__alt_mem_onchip_memory+0xf78003b4>

       ponderacion1[i] = ponderacion1[i] + (trainInputs[patNum][j] * weightsIH1[j][i]);

        }

			hiddenVal1[i] = tanh(ponderacion1[i]);
     484:	00800074 	movhi	r2,1
     488:	109c3504 	addi	r2,r2,28884
     48c:	e0fffd17 	ldw	r3,-12(fp)
     490:	18c7883a 	add	r3,r3,r3
     494:	18c7883a 	add	r3,r3,r3
     498:	10c5883a 	add	r2,r2,r3
     49c:	10c00017 	ldw	r3,0(r2)
     4a0:	1809883a 	mov	r4,r3
     4a4:	0005c5c0 	call	5c5c <__extendsfdf2>
     4a8:	100b883a 	mov	r5,r2
     4ac:	180d883a 	mov	r6,r3
     4b0:	2809883a 	mov	r4,r5
     4b4:	300b883a 	mov	r5,r6
     4b8:	000170c0 	call	170c <tanh>
     4bc:	100b883a 	mov	r5,r2
     4c0:	180d883a 	mov	r6,r3
     4c4:	2809883a 	mov	r4,r5
     4c8:	300b883a 	mov	r5,r6
     4cc:	0005d6c0 	call	5d6c <__truncdfsf2>
     4d0:	1009883a 	mov	r4,r2
     4d4:	008000b4 	movhi	r2,2
     4d8:	10a09504 	addi	r2,r2,-32172
     4dc:	e0fffd17 	ldw	r3,-12(fp)
     4e0:	18c7883a 	add	r3,r3,r3
     4e4:	18c7883a 	add	r3,r3,r3
     4e8:	10c5883a 	add	r2,r2,r3
     4ec:	11000015 	stw	r4,0(r2)
    //the hidden neurons are tanh
    int i = 0;
    int j =0;


    for(i = 0;i<numHidden1;i++)
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	10800044 	addi	r2,r2,1
     4f8:	e0bffd15 	stw	r2,-12(fp)
     4fc:	e0bffd17 	ldw	r2,-12(fp)
     500:	10800c90 	cmplti	r2,r2,50
     504:	103f9a1e 	bne	r2,zero,370 <__alt_mem_onchip_memory+0xf7800370>
			hiddenVal1[i] = tanh(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     508:	e03ffd15 	stw	zero,-12(fp)
     50c:	00005e06 	br	688 <calcNet+0x33c>
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];
     510:	008000b4 	movhi	r2,2
     514:	10a19604 	addi	r2,r2,-31144
     518:	e0fffd17 	ldw	r3,-12(fp)
     51c:	18c0fa04 	addi	r3,r3,1000
     520:	18c7883a 	add	r3,r3,r3
     524:	18c7883a 	add	r3,r3,r3
     528:	10c5883a 	add	r2,r2,r3
     52c:	11000017 	ldw	r4,0(r2)
     530:	008000b4 	movhi	r2,2
     534:	10a18204 	addi	r2,r2,-31224
     538:	e0fffd17 	ldw	r3,-12(fp)
     53c:	18c7883a 	add	r3,r3,r3
     540:	18c7883a 	add	r3,r3,r3
     544:	10c5883a 	add	r2,r2,r3
     548:	11000015 	stw	r4,0(r2)

        for(j = 0;j<numHidden1;j++)
     54c:	e03ffe15 	stw	zero,-8(fp)
     550:	00002c06 	br	604 <calcNet+0x2b8>
        {

        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);
     554:	008000b4 	movhi	r2,2
     558:	10a18204 	addi	r2,r2,-31224
     55c:	e0fffd17 	ldw	r3,-12(fp)
     560:	18c7883a 	add	r3,r3,r3
     564:	18c7883a 	add	r3,r3,r3
     568:	10c5883a 	add	r2,r2,r3
     56c:	14000017 	ldw	r16,0(r2)
     570:	008000b4 	movhi	r2,2
     574:	10a09504 	addi	r2,r2,-32172
     578:	e0fffe17 	ldw	r3,-8(fp)
     57c:	18c7883a 	add	r3,r3,r3
     580:	18c7883a 	add	r3,r3,r3
     584:	10c5883a 	add	r2,r2,r3
     588:	11800017 	ldw	r6,0(r2)
     58c:	008000b4 	movhi	r2,2
     590:	10a19604 	addi	r2,r2,-31144
     594:	e0fffe17 	ldw	r3,-8(fp)
     598:	19000524 	muli	r4,r3,20
     59c:	e0fffd17 	ldw	r3,-12(fp)
     5a0:	20c7883a 	add	r3,r4,r3
     5a4:	18c7883a 	add	r3,r3,r3
     5a8:	18c7883a 	add	r3,r3,r3
     5ac:	10c5883a 	add	r2,r2,r3
     5b0:	10c00017 	ldw	r3,0(r2)
     5b4:	180b883a 	mov	r5,r3
     5b8:	3009883a 	mov	r4,r6
     5bc:	0002d840 	call	2d84 <__mulsf3>
     5c0:	1007883a 	mov	r3,r2
     5c4:	1805883a 	mov	r2,r3
     5c8:	100b883a 	mov	r5,r2
     5cc:	8009883a 	mov	r4,r16
     5d0:	000247c0 	call	247c <__addsf3>
     5d4:	1007883a 	mov	r3,r2
     5d8:	1809883a 	mov	r4,r3
     5dc:	008000b4 	movhi	r2,2
     5e0:	10a18204 	addi	r2,r2,-31224
     5e4:	e0fffd17 	ldw	r3,-12(fp)
     5e8:	18c7883a 	add	r3,r3,r3
     5ec:	18c7883a 	add	r3,r3,r3
     5f0:	10c5883a 	add	r2,r2,r3
     5f4:	11000015 	stw	r4,0(r2)
    for(i = 0;i<numHidden2;i++)
    {

      ponderacion2[i] =  weightsH1H2[numHidden1][i];

        for(j = 0;j<numHidden1;j++)
     5f8:	e0bffe17 	ldw	r2,-8(fp)
     5fc:	10800044 	addi	r2,r2,1
     600:	e0bffe15 	stw	r2,-8(fp)
     604:	e0bffe17 	ldw	r2,-8(fp)
     608:	10800c90 	cmplti	r2,r2,50
     60c:	103fd11e 	bne	r2,zero,554 <__alt_mem_onchip_memory+0xf7800554>
        ponderacion2[i] =ponderacion2[i]+  (hiddenVal1[j] * weightsH1H2[j][i]);

        }


			hiddenVal2[i] = tanh(ponderacion2[i]);
     610:	008000b4 	movhi	r2,2
     614:	10a18204 	addi	r2,r2,-31224
     618:	e0fffd17 	ldw	r3,-12(fp)
     61c:	18c7883a 	add	r3,r3,r3
     620:	18c7883a 	add	r3,r3,r3
     624:	10c5883a 	add	r2,r2,r3
     628:	10c00017 	ldw	r3,0(r2)
     62c:	1809883a 	mov	r4,r3
     630:	0005c5c0 	call	5c5c <__extendsfdf2>
     634:	100b883a 	mov	r5,r2
     638:	180d883a 	mov	r6,r3
     63c:	2809883a 	mov	r4,r5
     640:	300b883a 	mov	r5,r6
     644:	000170c0 	call	170c <tanh>
     648:	100b883a 	mov	r5,r2
     64c:	180d883a 	mov	r6,r3
     650:	2809883a 	mov	r4,r5
     654:	300b883a 	mov	r5,r6
     658:	0005d6c0 	call	5d6c <__truncdfsf2>
     65c:	1009883a 	mov	r4,r2
     660:	00800074 	movhi	r2,1
     664:	109bf804 	addi	r2,r2,28640
     668:	e0fffd17 	ldw	r3,-12(fp)
     66c:	18c7883a 	add	r3,r3,r3
     670:	18c7883a 	add	r3,r3,r3
     674:	10c5883a 	add	r2,r2,r3
     678:	11000015 	stw	r4,0(r2)
			hiddenVal1[i] = tanh(ponderacion1[i]);

    }


    for(i = 0;i<numHidden2;i++)
     67c:	e0bffd17 	ldw	r2,-12(fp)
     680:	10800044 	addi	r2,r2,1
     684:	e0bffd15 	stw	r2,-12(fp)
     688:	e0bffd17 	ldw	r2,-12(fp)
     68c:	10800510 	cmplti	r2,r2,20
     690:	103f9f1e 	bne	r2,zero,510 <__alt_mem_onchip_memory+0xf7800510>

    }
   //calculate the output of the network
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];
     694:	00800074 	movhi	r2,1
     698:	109c2004 	addi	r2,r2,28800
     69c:	10c01417 	ldw	r3,80(r2)
     6a0:	d0e6da15 	stw	r3,-25752(gp)


   for(i = 0;i<numHidden2;i++)
     6a4:	e03ffd15 	stw	zero,-12(fp)
     6a8:	00001c06 	br	71c <calcNet+0x3d0>
   {

    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];
     6ac:	00800074 	movhi	r2,1
     6b0:	109bf804 	addi	r2,r2,28640
     6b4:	e0fffd17 	ldw	r3,-12(fp)
     6b8:	18c7883a 	add	r3,r3,r3
     6bc:	18c7883a 	add	r3,r3,r3
     6c0:	10c5883a 	add	r2,r2,r3
     6c4:	11000017 	ldw	r4,0(r2)
     6c8:	00800074 	movhi	r2,1
     6cc:	109c2004 	addi	r2,r2,28800
     6d0:	e0fffd17 	ldw	r3,-12(fp)
     6d4:	18c7883a 	add	r3,r3,r3
     6d8:	18c7883a 	add	r3,r3,r3
     6dc:	10c5883a 	add	r2,r2,r3
     6e0:	10c00017 	ldw	r3,0(r2)
     6e4:	180b883a 	mov	r5,r3
     6e8:	0002d840 	call	2d84 <__mulsf3>
     6ec:	1009883a 	mov	r4,r2
     6f0:	2007883a 	mov	r3,r4
     6f4:	d0a6da17 	ldw	r2,-25752(gp)
     6f8:	100b883a 	mov	r5,r2
     6fc:	1809883a 	mov	r4,r3
     700:	000247c0 	call	247c <__addsf3>
     704:	1007883a 	mov	r3,r2
     708:	1805883a 	mov	r2,r3
     70c:	d0a6da15 	stw	r2,-25752(gp)
   //the output neuron is linear

   ponderacion3 =  weightsH2O[numHidden2];


   for(i = 0;i<numHidden2;i++)
     710:	e0bffd17 	ldw	r2,-12(fp)
     714:	10800044 	addi	r2,r2,1
     718:	e0bffd15 	stw	r2,-12(fp)
     71c:	e0bffd17 	ldw	r2,-12(fp)
     720:	10800510 	cmplti	r2,r2,20
     724:	103fe11e 	bne	r2,zero,6ac <__alt_mem_onchip_memory+0xf78006ac>
    ponderacion3= ponderacion3 + hiddenVal2[i] * weightsH2O[i];

   }


        outPred  = tanh(ponderacion3);
     728:	d0a6da17 	ldw	r2,-25752(gp)
     72c:	1009883a 	mov	r4,r2
     730:	0005c5c0 	call	5c5c <__extendsfdf2>
     734:	100b883a 	mov	r5,r2
     738:	180d883a 	mov	r6,r3
     73c:	2809883a 	mov	r4,r5
     740:	300b883a 	mov	r5,r6
     744:	000170c0 	call	170c <tanh>
     748:	100b883a 	mov	r5,r2
     74c:	180d883a 	mov	r6,r3
     750:	2809883a 	mov	r4,r5
     754:	300b883a 	mov	r5,r6
     758:	0005d6c0 	call	5d6c <__truncdfsf2>
     75c:	1007883a 	mov	r3,r2
     760:	d0e6d915 	stw	r3,-25756(gp)

    //calculate the error
    errThisPat = trainOutput[patNum]-outPred;
     764:	d0e6d517 	ldw	r3,-25772(gp)
     768:	008000b4 	movhi	r2,2
     76c:	10a17e04 	addi	r2,r2,-31240
     770:	18c7883a 	add	r3,r3,r3
     774:	18c7883a 	add	r3,r3,r3
     778:	10c5883a 	add	r2,r2,r3
     77c:	10c00017 	ldw	r3,0(r2)
     780:	d0a6d917 	ldw	r2,-25756(gp)
     784:	100b883a 	mov	r5,r2
     788:	1809883a 	mov	r4,r3
     78c:	00031800 	call	3180 <__subsf3>
     790:	1007883a 	mov	r3,r2
     794:	1805883a 	mov	r2,r3
     798:	d0a6d615 	stw	r2,-25768(gp)

}
     79c:	0001883a 	nop
     7a0:	e6ffff04 	addi	sp,fp,-4
     7a4:	dfc00217 	ldw	ra,8(sp)
     7a8:	df000117 	ldw	fp,4(sp)
     7ac:	dc000017 	ldw	r16,0(sp)
     7b0:	dec00304 	addi	sp,sp,12
     7b4:	f800283a 	ret

000007b8 <WeightChangesH2O>:


//************************************
//adjust the weights hidden-output
void WeightChangesH2O(void)
{
     7b8:	defffe04 	addi	sp,sp,-8
     7bc:	dfc00115 	stw	ra,4(sp)
     7c0:	df000015 	stw	fp,0(sp)
     7c4:	d839883a 	mov	fp,sp


		delta_o = (1 - (outPred * outPred))* errThisPat;
     7c8:	d0a6d917 	ldw	r2,-25756(gp)
     7cc:	d0e6d917 	ldw	r3,-25756(gp)
     7d0:	180b883a 	mov	r5,r3
     7d4:	1009883a 	mov	r4,r2
     7d8:	0002d840 	call	2d84 <__mulsf3>
     7dc:	1007883a 	mov	r3,r2
     7e0:	1805883a 	mov	r2,r3
     7e4:	100b883a 	mov	r5,r2
     7e8:	010fe034 	movhi	r4,16256
     7ec:	00031800 	call	3180 <__subsf3>
     7f0:	1009883a 	mov	r4,r2
     7f4:	2007883a 	mov	r3,r4
     7f8:	d0a6d617 	ldw	r2,-25768(gp)
     7fc:	100b883a 	mov	r5,r2
     800:	1809883a 	mov	r4,r3
     804:	0002d840 	call	2d84 <__mulsf3>
     808:	1007883a 	mov	r3,r2
     80c:	1805883a 	mov	r2,r3
     810:	d0a6d715 	stw	r2,-25764(gp)


 }
     814:	0001883a 	nop
     818:	e037883a 	mov	sp,fp
     81c:	dfc00117 	ldw	ra,4(sp)
     820:	df000017 	ldw	fp,0(sp)
     824:	dec00204 	addi	sp,sp,8
     828:	f800283a 	ret

0000082c <WeightUpdatesH2O>:

//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
     82c:	defffc04 	addi	sp,sp,-16
     830:	dfc00315 	stw	ra,12(sp)
     834:	df000215 	stw	fp,8(sp)
     838:	df000204 	addi	fp,sp,8
    int k=0;
     83c:	e03ffe15 	stw	zero,-8(fp)
   for(k = 0;k<numHidden2+1;k++)
     840:	e03ffe15 	stw	zero,-8(fp)
     844:	00003706 	br	924 <WeightUpdatesH2O+0xf8>
   {
    float weightChange =delta_o * LR_H2O * hiddenVal2[k];
     848:	d0e6d717 	ldw	r3,-25764(gp)
     84c:	008f7374 	movhi	r2,15821
     850:	10b33344 	addi	r2,r2,-13107
     854:	100b883a 	mov	r5,r2
     858:	1809883a 	mov	r4,r3
     85c:	0002d840 	call	2d84 <__mulsf3>
     860:	1007883a 	mov	r3,r2
     864:	1809883a 	mov	r4,r3
     868:	00800074 	movhi	r2,1
     86c:	109bf804 	addi	r2,r2,28640
     870:	e0fffe17 	ldw	r3,-8(fp)
     874:	18c7883a 	add	r3,r3,r3
     878:	18c7883a 	add	r3,r3,r3
     87c:	10c5883a 	add	r2,r2,r3
     880:	10c00017 	ldw	r3,0(r2)
     884:	180b883a 	mov	r5,r3
     888:	0002d840 	call	2d84 <__mulsf3>
     88c:	1007883a 	mov	r3,r2
     890:	e0ffff15 	stw	r3,-4(fp)

    weightsH2O_old[k] = weightsH2O[k] ;
     894:	00800074 	movhi	r2,1
     898:	109c2004 	addi	r2,r2,28800
     89c:	e0fffe17 	ldw	r3,-8(fp)
     8a0:	18c7883a 	add	r3,r3,r3
     8a4:	18c7883a 	add	r3,r3,r3
     8a8:	10c5883a 	add	r2,r2,r3
     8ac:	11000017 	ldw	r4,0(r2)
     8b0:	008000b4 	movhi	r2,2
     8b4:	10a15d04 	addi	r2,r2,-31372
     8b8:	e0fffe17 	ldw	r3,-8(fp)
     8bc:	18c7883a 	add	r3,r3,r3
     8c0:	18c7883a 	add	r3,r3,r3
     8c4:	10c5883a 	add	r2,r2,r3
     8c8:	11000015 	stw	r4,0(r2)
    weightsH2O[k] = weightsH2O[k] + weightChange;
     8cc:	00800074 	movhi	r2,1
     8d0:	109c2004 	addi	r2,r2,28800
     8d4:	e0fffe17 	ldw	r3,-8(fp)
     8d8:	18c7883a 	add	r3,r3,r3
     8dc:	18c7883a 	add	r3,r3,r3
     8e0:	10c5883a 	add	r2,r2,r3
     8e4:	10c00017 	ldw	r3,0(r2)
     8e8:	e17fff17 	ldw	r5,-4(fp)
     8ec:	1809883a 	mov	r4,r3
     8f0:	000247c0 	call	247c <__addsf3>
     8f4:	1007883a 	mov	r3,r2
     8f8:	1809883a 	mov	r4,r3
     8fc:	00800074 	movhi	r2,1
     900:	109c2004 	addi	r2,r2,28800
     904:	e0fffe17 	ldw	r3,-8(fp)
     908:	18c7883a 	add	r3,r3,r3
     90c:	18c7883a 	add	r3,r3,r3
     910:	10c5883a 	add	r2,r2,r3
     914:	11000015 	stw	r4,0(r2)
//************************************
//update the weights hidden-output
void WeightUpdatesH2O(void)
{
    int k=0;
   for(k = 0;k<numHidden2+1;k++)
     918:	e0bffe17 	ldw	r2,-8(fp)
     91c:	10800044 	addi	r2,r2,1
     920:	e0bffe15 	stw	r2,-8(fp)
     924:	e0bffe17 	ldw	r2,-8(fp)
     928:	10800550 	cmplti	r2,r2,21
     92c:	103fc61e 	bne	r2,zero,848 <__alt_mem_onchip_memory+0xf7800848>
    weightsH2O_old[k] = weightsH2O[k] ;
    weightsH2O[k] = weightsH2O[k] + weightChange;

   }

 }
     930:	0001883a 	nop
     934:	e037883a 	mov	sp,fp
     938:	dfc00117 	ldw	ra,4(sp)
     93c:	df000017 	ldw	fp,0(sp)
     940:	dec00204 	addi	sp,sp,8
     944:	f800283a 	ret

00000948 <WeightChangesH1H2>:

//************************************
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{
     948:	defffd04 	addi	sp,sp,-12
     94c:	dfc00215 	stw	ra,8(sp)
     950:	df000115 	stw	fp,4(sp)
     954:	df000104 	addi	fp,sp,4

  int i=0;
     958:	e03fff15 	stw	zero,-4(fp)
  for(i = 0;i<numHidden2;i++)
     95c:	e03fff15 	stw	zero,-4(fp)
     960:	00003206 	br	a2c <WeightChangesH1H2+0xe4>
  {

		delta_h2[i] = (1 - (hiddenVal2[i] * hiddenVal2[i]))* delta_o* weightsH2O_old[i];
     964:	00800074 	movhi	r2,1
     968:	109bf804 	addi	r2,r2,28640
     96c:	e0ffff17 	ldw	r3,-4(fp)
     970:	18c7883a 	add	r3,r3,r3
     974:	18c7883a 	add	r3,r3,r3
     978:	10c5883a 	add	r2,r2,r3
     97c:	11000017 	ldw	r4,0(r2)
     980:	00800074 	movhi	r2,1
     984:	109bf804 	addi	r2,r2,28640
     988:	e0ffff17 	ldw	r3,-4(fp)
     98c:	18c7883a 	add	r3,r3,r3
     990:	18c7883a 	add	r3,r3,r3
     994:	10c5883a 	add	r2,r2,r3
     998:	10c00017 	ldw	r3,0(r2)
     99c:	180b883a 	mov	r5,r3
     9a0:	0002d840 	call	2d84 <__mulsf3>
     9a4:	1007883a 	mov	r3,r2
     9a8:	1805883a 	mov	r2,r3
     9ac:	100b883a 	mov	r5,r2
     9b0:	010fe034 	movhi	r4,16256
     9b4:	00031800 	call	3180 <__subsf3>
     9b8:	1009883a 	mov	r4,r2
     9bc:	2007883a 	mov	r3,r4
     9c0:	d0a6d717 	ldw	r2,-25764(gp)
     9c4:	100b883a 	mov	r5,r2
     9c8:	1809883a 	mov	r4,r3
     9cc:	0002d840 	call	2d84 <__mulsf3>
     9d0:	1007883a 	mov	r3,r2
     9d4:	1809883a 	mov	r4,r3
     9d8:	008000b4 	movhi	r2,2
     9dc:	10a15d04 	addi	r2,r2,-31372
     9e0:	e0ffff17 	ldw	r3,-4(fp)
     9e4:	18c7883a 	add	r3,r3,r3
     9e8:	18c7883a 	add	r3,r3,r3
     9ec:	10c5883a 	add	r2,r2,r3
     9f0:	10c00017 	ldw	r3,0(r2)
     9f4:	180b883a 	mov	r5,r3
     9f8:	0002d840 	call	2d84 <__mulsf3>
     9fc:	1007883a 	mov	r3,r2
     a00:	1809883a 	mov	r4,r3
     a04:	00800074 	movhi	r2,1
     a08:	109c0c04 	addi	r2,r2,28720
     a0c:	e0ffff17 	ldw	r3,-4(fp)
     a10:	18c7883a 	add	r3,r3,r3
     a14:	18c7883a 	add	r3,r3,r3
     a18:	10c5883a 	add	r2,r2,r3
     a1c:	11000015 	stw	r4,0(r2)
// adjust the weights hidden1-hidden2
void WeightChangesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     a20:	e0bfff17 	ldw	r2,-4(fp)
     a24:	10800044 	addi	r2,r2,1
     a28:	e0bfff15 	stw	r2,-4(fp)
     a2c:	e0bfff17 	ldw	r2,-4(fp)
     a30:	10800510 	cmplti	r2,r2,20
     a34:	103fcb1e 	bne	r2,zero,964 <__alt_mem_onchip_memory+0xf7800964>



  }

}
     a38:	0001883a 	nop
     a3c:	e037883a 	mov	sp,fp
     a40:	dfc00117 	ldw	ra,4(sp)
     a44:	df000017 	ldw	fp,0(sp)
     a48:	dec00204 	addi	sp,sp,8
     a4c:	f800283a 	ret

00000a50 <WeightUpdatesH1H2>:

//************************************
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{
     a50:	defffb04 	addi	sp,sp,-20
     a54:	dfc00415 	stw	ra,16(sp)
     a58:	df000315 	stw	fp,12(sp)
     a5c:	df000304 	addi	fp,sp,12

  int i=0;
     a60:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden2;i++)
     a64:	e03ffd15 	stw	zero,-12(fp)
     a68:	00005206 	br	bb4 <WeightUpdatesH1H2+0x164>
  {
   int k=0;
     a6c:	e03ffe15 	stw	zero,-8(fp)
   for( k = 0;k<numHidden1+1;k++)
     a70:	e03ffe15 	stw	zero,-8(fp)
     a74:	00004906 	br	b9c <WeightUpdatesH1H2+0x14c>
   {
    float weightChange = delta_h2[i] * LR_H1H2 * hiddenVal1[k];
     a78:	00800074 	movhi	r2,1
     a7c:	109c0c04 	addi	r2,r2,28720
     a80:	e0fffd17 	ldw	r3,-12(fp)
     a84:	18c7883a 	add	r3,r3,r3
     a88:	18c7883a 	add	r3,r3,r3
     a8c:	10c5883a 	add	r2,r2,r3
     a90:	10c00017 	ldw	r3,0(r2)
     a94:	008f7374 	movhi	r2,15821
     a98:	10b33344 	addi	r2,r2,-13107
     a9c:	100b883a 	mov	r5,r2
     aa0:	1809883a 	mov	r4,r3
     aa4:	0002d840 	call	2d84 <__mulsf3>
     aa8:	1007883a 	mov	r3,r2
     aac:	1809883a 	mov	r4,r3
     ab0:	008000b4 	movhi	r2,2
     ab4:	10a09504 	addi	r2,r2,-32172
     ab8:	e0fffe17 	ldw	r3,-8(fp)
     abc:	18c7883a 	add	r3,r3,r3
     ac0:	18c7883a 	add	r3,r3,r3
     ac4:	10c5883a 	add	r2,r2,r3
     ac8:	10c00017 	ldw	r3,0(r2)
     acc:	180b883a 	mov	r5,r3
     ad0:	0002d840 	call	2d84 <__mulsf3>
     ad4:	1007883a 	mov	r3,r2
     ad8:	e0ffff15 	stw	r3,-4(fp)

   weightsH1H2_old[k][i] = weightsH1H2[k][i];
     adc:	008000b4 	movhi	r2,2
     ae0:	10a19604 	addi	r2,r2,-31144
     ae4:	e0fffe17 	ldw	r3,-8(fp)
     ae8:	19000524 	muli	r4,r3,20
     aec:	e0fffd17 	ldw	r3,-12(fp)
     af0:	20c7883a 	add	r3,r4,r3
     af4:	18c7883a 	add	r3,r3,r3
     af8:	18c7883a 	add	r3,r3,r3
     afc:	10c5883a 	add	r2,r2,r3
     b00:	11000017 	ldw	r4,0(r2)
     b04:	00800074 	movhi	r2,1
     b08:	109c9904 	addi	r2,r2,29284
     b0c:	e0fffe17 	ldw	r3,-8(fp)
     b10:	19400524 	muli	r5,r3,20
     b14:	e0fffd17 	ldw	r3,-12(fp)
     b18:	28c7883a 	add	r3,r5,r3
     b1c:	18c7883a 	add	r3,r3,r3
     b20:	18c7883a 	add	r3,r3,r3
     b24:	10c5883a 	add	r2,r2,r3
     b28:	11000015 	stw	r4,0(r2)
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;
     b2c:	008000b4 	movhi	r2,2
     b30:	10a19604 	addi	r2,r2,-31144
     b34:	e0fffe17 	ldw	r3,-8(fp)
     b38:	19000524 	muli	r4,r3,20
     b3c:	e0fffd17 	ldw	r3,-12(fp)
     b40:	20c7883a 	add	r3,r4,r3
     b44:	18c7883a 	add	r3,r3,r3
     b48:	18c7883a 	add	r3,r3,r3
     b4c:	10c5883a 	add	r2,r2,r3
     b50:	10c00017 	ldw	r3,0(r2)
     b54:	e17fff17 	ldw	r5,-4(fp)
     b58:	1809883a 	mov	r4,r3
     b5c:	000247c0 	call	247c <__addsf3>
     b60:	1007883a 	mov	r3,r2
     b64:	180b883a 	mov	r5,r3
     b68:	008000b4 	movhi	r2,2
     b6c:	10a19604 	addi	r2,r2,-31144
     b70:	e0fffe17 	ldw	r3,-8(fp)
     b74:	19000524 	muli	r4,r3,20
     b78:	e0fffd17 	ldw	r3,-12(fp)
     b7c:	20c7883a 	add	r3,r4,r3
     b80:	18c7883a 	add	r3,r3,r3
     b84:	18c7883a 	add	r3,r3,r3
     b88:	10c5883a 	add	r2,r2,r3
     b8c:	11400015 	stw	r5,0(r2)

  int i=0;
  for(i = 0;i<numHidden2;i++)
  {
   int k=0;
   for( k = 0;k<numHidden1+1;k++)
     b90:	e0bffe17 	ldw	r2,-8(fp)
     b94:	10800044 	addi	r2,r2,1
     b98:	e0bffe15 	stw	r2,-8(fp)
     b9c:	e0bffe17 	ldw	r2,-8(fp)
     ba0:	10800cd0 	cmplti	r2,r2,51
     ba4:	103fb41e 	bne	r2,zero,a78 <__alt_mem_onchip_memory+0xf7800a78>
// update the weights hidden1-hidden2
void WeightUpdatesH1H2(void)
{

  int i=0;
  for(i = 0;i<numHidden2;i++)
     ba8:	e0bffd17 	ldw	r2,-12(fp)
     bac:	10800044 	addi	r2,r2,1
     bb0:	e0bffd15 	stw	r2,-12(fp)
     bb4:	e0bffd17 	ldw	r2,-12(fp)
     bb8:	10800510 	cmplti	r2,r2,20
     bbc:	103fab1e 	bne	r2,zero,a6c <__alt_mem_onchip_memory+0xf7800a6c>
   weightsH1H2[k][i] = weightsH1H2[k][i] + weightChange;

   }
  }

}
     bc0:	0001883a 	nop
     bc4:	e037883a 	mov	sp,fp
     bc8:	dfc00117 	ldw	ra,4(sp)
     bcc:	df000017 	ldw	fp,0(sp)
     bd0:	dec00204 	addi	sp,sp,8
     bd4:	f800283a 	ret

00000bd8 <WeightChangesIH1>:
//************************************
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{
     bd8:	defffb04 	addi	sp,sp,-20
     bdc:	dfc00415 	stw	ra,16(sp)
     be0:	df000315 	stw	fp,12(sp)
     be4:	df000304 	addi	fp,sp,12

  int i=0;
     be8:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     bec:	e03ffd15 	stw	zero,-12(fp)
     bf0:	00004b06 	br	d20 <WeightChangesIH1+0x148>
  {

    int j=0;
     bf4:	e03ffe15 	stw	zero,-8(fp)
    float sum_delta=0.0;
     bf8:	e03fff15 	stw	zero,-4(fp)
    for ( j = 0;j<numHidden2;j++)
     bfc:	e03ffe15 	stw	zero,-8(fp)
     c00:	00001e06 	br	c7c <WeightChangesIH1+0xa4>
    {

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];
     c04:	00800074 	movhi	r2,1
     c08:	109c0c04 	addi	r2,r2,28720
     c0c:	e0fffe17 	ldw	r3,-8(fp)
     c10:	18c7883a 	add	r3,r3,r3
     c14:	18c7883a 	add	r3,r3,r3
     c18:	10c5883a 	add	r2,r2,r3
     c1c:	11800017 	ldw	r6,0(r2)
     c20:	00800074 	movhi	r2,1
     c24:	109c9904 	addi	r2,r2,29284
     c28:	e0fffd17 	ldw	r3,-12(fp)
     c2c:	19000524 	muli	r4,r3,20
     c30:	e0fffe17 	ldw	r3,-8(fp)
     c34:	20c7883a 	add	r3,r4,r3
     c38:	18c7883a 	add	r3,r3,r3
     c3c:	18c7883a 	add	r3,r3,r3
     c40:	10c5883a 	add	r2,r2,r3
     c44:	10c00017 	ldw	r3,0(r2)
     c48:	180b883a 	mov	r5,r3
     c4c:	3009883a 	mov	r4,r6
     c50:	0002d840 	call	2d84 <__mulsf3>
     c54:	1007883a 	mov	r3,r2
     c58:	1805883a 	mov	r2,r3
     c5c:	100b883a 	mov	r5,r2
     c60:	e13fff17 	ldw	r4,-4(fp)
     c64:	000247c0 	call	247c <__addsf3>
     c68:	1007883a 	mov	r3,r2
     c6c:	e0ffff15 	stw	r3,-4(fp)
  for(i = 0;i<numHidden1;i++)
  {

    int j=0;
    float sum_delta=0.0;
    for ( j = 0;j<numHidden2;j++)
     c70:	e0bffe17 	ldw	r2,-8(fp)
     c74:	10800044 	addi	r2,r2,1
     c78:	e0bffe15 	stw	r2,-8(fp)
     c7c:	e0bffe17 	ldw	r2,-8(fp)
     c80:	10800510 	cmplti	r2,r2,20
     c84:	103fdf1e 	bne	r2,zero,c04 <__alt_mem_onchip_memory+0xf7800c04>

        sum_delta= sum_delta+ delta_h2[j]*weightsH1H2_old[i][j];

    }

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;
     c88:	008000b4 	movhi	r2,2
     c8c:	10a09504 	addi	r2,r2,-32172
     c90:	e0fffd17 	ldw	r3,-12(fp)
     c94:	18c7883a 	add	r3,r3,r3
     c98:	18c7883a 	add	r3,r3,r3
     c9c:	10c5883a 	add	r2,r2,r3
     ca0:	11000017 	ldw	r4,0(r2)
     ca4:	008000b4 	movhi	r2,2
     ca8:	10a09504 	addi	r2,r2,-32172
     cac:	e0fffd17 	ldw	r3,-12(fp)
     cb0:	18c7883a 	add	r3,r3,r3
     cb4:	18c7883a 	add	r3,r3,r3
     cb8:	10c5883a 	add	r2,r2,r3
     cbc:	10c00017 	ldw	r3,0(r2)
     cc0:	180b883a 	mov	r5,r3
     cc4:	0002d840 	call	2d84 <__mulsf3>
     cc8:	1007883a 	mov	r3,r2
     ccc:	1805883a 	mov	r2,r3
     cd0:	100b883a 	mov	r5,r2
     cd4:	010fe034 	movhi	r4,16256
     cd8:	00031800 	call	3180 <__subsf3>
     cdc:	1007883a 	mov	r3,r2
     ce0:	1805883a 	mov	r2,r3
     ce4:	e17fff17 	ldw	r5,-4(fp)
     ce8:	1009883a 	mov	r4,r2
     cec:	0002d840 	call	2d84 <__mulsf3>
     cf0:	1007883a 	mov	r3,r2
     cf4:	1809883a 	mov	r4,r3
     cf8:	008000b4 	movhi	r2,2
     cfc:	10a5a604 	addi	r2,r2,-26984
     d00:	e0fffd17 	ldw	r3,-12(fp)
     d04:	18c7883a 	add	r3,r3,r3
     d08:	18c7883a 	add	r3,r3,r3
     d0c:	10c5883a 	add	r2,r2,r3
     d10:	11000015 	stw	r4,0(r2)
// adjust the weights input-hidden1
void WeightChangesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     d14:	e0bffd17 	ldw	r2,-12(fp)
     d18:	10800044 	addi	r2,r2,1
     d1c:	e0bffd15 	stw	r2,-12(fp)
     d20:	e0bffd17 	ldw	r2,-12(fp)
     d24:	10800c90 	cmplti	r2,r2,50
     d28:	103fb21e 	bne	r2,zero,bf4 <__alt_mem_onchip_memory+0xf7800bf4>

		delta_h1[i]= (1 - (hiddenVal1[i] * hiddenVal1[i]))* sum_delta;

  }

}
     d2c:	0001883a 	nop
     d30:	e037883a 	mov	sp,fp
     d34:	dfc00117 	ldw	ra,4(sp)
     d38:	df000017 	ldw	fp,0(sp)
     d3c:	dec00204 	addi	sp,sp,8
     d40:	f800283a 	ret

00000d44 <WeightUpdatesIH1>:

//************************************
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{
     d44:	defffb04 	addi	sp,sp,-20
     d48:	dfc00415 	stw	ra,16(sp)
     d4c:	df000315 	stw	fp,12(sp)
     d50:	df000304 	addi	fp,sp,12

  int i=0;
     d54:	e03ffd15 	stw	zero,-12(fp)
  for(i = 0;i<numHidden1;i++)
     d58:	e03ffd15 	stw	zero,-12(fp)
     d5c:	00004406 	br	e70 <WeightUpdatesIH1+0x12c>
  {
    int k=0;
     d60:	e03ffe15 	stw	zero,-8(fp)
	for( k = 0;k<numInputs+1;k++)
     d64:	e03ffe15 	stw	zero,-8(fp)
     d68:	00003b06 	br	e58 <WeightUpdatesIH1+0x114>
	{
    float weightChange = delta_h1[i] * LR_IH1 * trainInputs[patNum][k];
     d6c:	008000b4 	movhi	r2,2
     d70:	10a5a604 	addi	r2,r2,-26984
     d74:	e0fffd17 	ldw	r3,-12(fp)
     d78:	18c7883a 	add	r3,r3,r3
     d7c:	18c7883a 	add	r3,r3,r3
     d80:	10c5883a 	add	r2,r2,r3
     d84:	10c00017 	ldw	r3,0(r2)
     d88:	008f7374 	movhi	r2,15821
     d8c:	10b33344 	addi	r2,r2,-13107
     d90:	100b883a 	mov	r5,r2
     d94:	1809883a 	mov	r4,r3
     d98:	0002d840 	call	2d84 <__mulsf3>
     d9c:	1007883a 	mov	r3,r2
     da0:	180d883a 	mov	r6,r3
     da4:	d126d517 	ldw	r4,-25772(gp)
     da8:	00c000b4 	movhi	r3,2
     dac:	18e17204 	addi	r3,r3,-31288
     db0:	2005883a 	mov	r2,r4
     db4:	1085883a 	add	r2,r2,r2
     db8:	1105883a 	add	r2,r2,r4
     dbc:	e13ffe17 	ldw	r4,-8(fp)
     dc0:	1105883a 	add	r2,r2,r4
     dc4:	1085883a 	add	r2,r2,r2
     dc8:	1085883a 	add	r2,r2,r2
     dcc:	1885883a 	add	r2,r3,r2
     dd0:	10c00017 	ldw	r3,0(r2)
     dd4:	180b883a 	mov	r5,r3
     dd8:	3009883a 	mov	r4,r6
     ddc:	0002d840 	call	2d84 <__mulsf3>
     de0:	1007883a 	mov	r3,r2
     de4:	e0ffff15 	stw	r3,-4(fp)

     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;
     de8:	008000b4 	movhi	r2,2
     dec:	10a0c704 	addi	r2,r2,-31972
     df0:	e0fffe17 	ldw	r3,-8(fp)
     df4:	19000ca4 	muli	r4,r3,50
     df8:	e0fffd17 	ldw	r3,-12(fp)
     dfc:	20c7883a 	add	r3,r4,r3
     e00:	18c7883a 	add	r3,r3,r3
     e04:	18c7883a 	add	r3,r3,r3
     e08:	10c5883a 	add	r2,r2,r3
     e0c:	10c00017 	ldw	r3,0(r2)
     e10:	e17fff17 	ldw	r5,-4(fp)
     e14:	1809883a 	mov	r4,r3
     e18:	000247c0 	call	247c <__addsf3>
     e1c:	1007883a 	mov	r3,r2
     e20:	180b883a 	mov	r5,r3
     e24:	008000b4 	movhi	r2,2
     e28:	10a0c704 	addi	r2,r2,-31972
     e2c:	e0fffe17 	ldw	r3,-8(fp)
     e30:	19000ca4 	muli	r4,r3,50
     e34:	e0fffd17 	ldw	r3,-12(fp)
     e38:	20c7883a 	add	r3,r4,r3
     e3c:	18c7883a 	add	r3,r3,r3
     e40:	18c7883a 	add	r3,r3,r3
     e44:	10c5883a 	add	r2,r2,r3
     e48:	11400015 	stw	r5,0(r2)

  int i=0;
  for(i = 0;i<numHidden1;i++)
  {
    int k=0;
	for( k = 0;k<numInputs+1;k++)
     e4c:	e0bffe17 	ldw	r2,-8(fp)
     e50:	10800044 	addi	r2,r2,1
     e54:	e0bffe15 	stw	r2,-8(fp)
     e58:	e0bffe17 	ldw	r2,-8(fp)
     e5c:	108000d0 	cmplti	r2,r2,3
     e60:	103fc21e 	bne	r2,zero,d6c <__alt_mem_onchip_memory+0xf7800d6c>
// update the weights input-hidden1
void WeightUpdatesIH1(void)
{

  int i=0;
  for(i = 0;i<numHidden1;i++)
     e64:	e0bffd17 	ldw	r2,-12(fp)
     e68:	10800044 	addi	r2,r2,1
     e6c:	e0bffd15 	stw	r2,-12(fp)
     e70:	e0bffd17 	ldw	r2,-12(fp)
     e74:	10800c90 	cmplti	r2,r2,50
     e78:	103fb91e 	bne	r2,zero,d60 <__alt_mem_onchip_memory+0xf7800d60>
     weightsIH1[k][i] = weightsIH1[k][i] + weightChange;

   }
  }

}
     e7c:	0001883a 	nop
     e80:	e037883a 	mov	sp,fp
     e84:	dfc00117 	ldw	ra,4(sp)
     e88:	df000017 	ldw	fp,0(sp)
     e8c:	dec00204 	addi	sp,sp,8
     e90:	f800283a 	ret

00000e94 <getRand>:

//************************************
// generates a random number
float getRand(void)
{
     e94:	defffe04 	addi	sp,sp,-8
     e98:	dfc00115 	stw	ra,4(sp)
     e9c:	df000015 	stw	fp,0(sp)
     ea0:	d839883a 	mov	fp,sp
 return ((float)rand())/(float)RAND_MAX;
     ea4:	00062b40 	call	62b4 <rand>
     ea8:	1009883a 	mov	r4,r2
     eac:	00036640 	call	3664 <__floatsisf>
     eb0:	1007883a 	mov	r3,r2
     eb4:	0153c034 	movhi	r5,20224
     eb8:	1809883a 	mov	r4,r3
     ebc:	00029440 	call	2944 <__divsf3>
     ec0:	1009883a 	mov	r4,r2
     ec4:	2007883a 	mov	r3,r4
     ec8:	1805883a 	mov	r2,r3
}
     ecc:	e037883a 	mov	sp,fp
     ed0:	dfc00117 	ldw	ra,4(sp)
     ed4:	df000017 	ldw	fp,0(sp)
     ed8:	dec00204 	addi	sp,sp,8
     edc:	f800283a 	ret

00000ee0 <initWeights>:


//************************************
// set weights to random numbers
void initWeights(void)
{
     ee0:	defffb04 	addi	sp,sp,-20
     ee4:	dfc00415 	stw	ra,16(sp)
     ee8:	df000315 	stw	fp,12(sp)
     eec:	df000304 	addi	fp,sp,12
 int j=0;
     ef0:	e03ffd15 	stw	zero,-12(fp)
 int i=0;
     ef4:	e03ffe15 	stw	zero,-8(fp)
 int k=0;
     ef8:	e03fff15 	stw	zero,-4(fp)

 for( j = 0;j<numHidden2+1;j++)
     efc:	e03ffd15 	stw	zero,-12(fp)
     f00:	00002606 	br	f9c <initWeights+0xbc>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
     f04:	0000e940 	call	e94 <getRand>
     f08:	1007883a 	mov	r3,r2
     f0c:	1809883a 	mov	r4,r3
     f10:	0005c5c0 	call	5c5c <__extendsfdf2>
     f14:	1011883a 	mov	r8,r2
     f18:	1813883a 	mov	r9,r3
     f1c:	000d883a 	mov	r6,zero
     f20:	01cff834 	movhi	r7,16352
     f24:	4009883a 	mov	r4,r8
     f28:	480b883a 	mov	r5,r9
     f2c:	00052040 	call	5204 <__subdf3>
     f30:	1009883a 	mov	r4,r2
     f34:	180b883a 	mov	r5,r3
     f38:	2005883a 	mov	r2,r4
     f3c:	2807883a 	mov	r3,r5
     f40:	000d883a 	mov	r6,zero
     f44:	01d00034 	movhi	r7,16384
     f48:	1009883a 	mov	r4,r2
     f4c:	180b883a 	mov	r5,r3
     f50:	00040340 	call	4034 <__divdf3>
     f54:	1009883a 	mov	r4,r2
     f58:	180b883a 	mov	r5,r3
     f5c:	2005883a 	mov	r2,r4
     f60:	2807883a 	mov	r3,r5
     f64:	1009883a 	mov	r4,r2
     f68:	180b883a 	mov	r5,r3
     f6c:	0005d6c0 	call	5d6c <__truncdfsf2>
     f70:	1009883a 	mov	r4,r2
     f74:	00800074 	movhi	r2,1
     f78:	109c2004 	addi	r2,r2,28800
     f7c:	e0fffd17 	ldw	r3,-12(fp)
     f80:	18c7883a 	add	r3,r3,r3
     f84:	18c7883a 	add	r3,r3,r3
     f88:	10c5883a 	add	r2,r2,r3
     f8c:	11000015 	stw	r4,0(r2)
{
 int j=0;
 int i=0;
 int k=0;

 for( j = 0;j<numHidden2+1;j++)
     f90:	e0bffd17 	ldw	r2,-12(fp)
     f94:	10800044 	addi	r2,r2,1
     f98:	e0bffd15 	stw	r2,-12(fp)
     f9c:	e0bffd17 	ldw	r2,-12(fp)
     fa0:	10800550 	cmplti	r2,r2,21
     fa4:	103fd71e 	bne	r2,zero,f04 <__alt_mem_onchip_memory+0xf7800f04>
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
     fa8:	e03fff15 	stw	zero,-4(fp)
     fac:	00003106 	br	1074 <initWeights+0x194>
   {
    for( i = 0;i<numHidden1+1;i++)
     fb0:	e03ffe15 	stw	zero,-8(fp)
     fb4:	00002906 	br	105c <initWeights+0x17c>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     fb8:	0000e940 	call	e94 <getRand>
     fbc:	1007883a 	mov	r3,r2
     fc0:	1809883a 	mov	r4,r3
     fc4:	0005c5c0 	call	5c5c <__extendsfdf2>
     fc8:	1011883a 	mov	r8,r2
     fcc:	1813883a 	mov	r9,r3
     fd0:	000d883a 	mov	r6,zero
     fd4:	01cff834 	movhi	r7,16352
     fd8:	4009883a 	mov	r4,r8
     fdc:	480b883a 	mov	r5,r9
     fe0:	00052040 	call	5204 <__subdf3>
     fe4:	1009883a 	mov	r4,r2
     fe8:	180b883a 	mov	r5,r3
     fec:	2005883a 	mov	r2,r4
     ff0:	2807883a 	mov	r3,r5
     ff4:	000d883a 	mov	r6,zero
     ff8:	01d00034 	movhi	r7,16384
     ffc:	1009883a 	mov	r4,r2
    1000:	180b883a 	mov	r5,r3
    1004:	00040340 	call	4034 <__divdf3>
    1008:	1009883a 	mov	r4,r2
    100c:	180b883a 	mov	r5,r3
    1010:	2005883a 	mov	r2,r4
    1014:	2807883a 	mov	r3,r5
    1018:	1009883a 	mov	r4,r2
    101c:	180b883a 	mov	r5,r3
    1020:	0005d6c0 	call	5d6c <__truncdfsf2>
    1024:	100b883a 	mov	r5,r2
    1028:	008000b4 	movhi	r2,2
    102c:	10a19604 	addi	r2,r2,-31144
    1030:	e0fffe17 	ldw	r3,-8(fp)
    1034:	19000524 	muli	r4,r3,20
    1038:	e0ffff17 	ldw	r3,-4(fp)
    103c:	20c7883a 	add	r3,r4,r3
    1040:	18c7883a 	add	r3,r3,r3
    1044:	18c7883a 	add	r3,r3,r3
    1048:	10c5883a 	add	r2,r2,r3
    104c:	11400015 	stw	r5,0(r2)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
   {
    for( i = 0;i<numHidden1+1;i++)
    1050:	e0bffe17 	ldw	r2,-8(fp)
    1054:	10800044 	addi	r2,r2,1
    1058:	e0bffe15 	stw	r2,-8(fp)
    105c:	e0bffe17 	ldw	r2,-8(fp)
    1060:	10800cd0 	cmplti	r2,r2,51
    1064:	103fd41e 	bne	r2,zero,fb8 <__alt_mem_onchip_memory+0xf7800fb8>

 for( j = 0;j<numHidden2+1;j++)
 {
    weightsH2O[j] = (getRand() - 0.5)/2;
 }
 for( k = 0;k<numHidden2;k++)
    1068:	e0bfff17 	ldw	r2,-4(fp)
    106c:	10800044 	addi	r2,r2,1
    1070:	e0bfff15 	stw	r2,-4(fp)
    1074:	e0bfff17 	ldw	r2,-4(fp)
    1078:	10800510 	cmplti	r2,r2,20
    107c:	103fcc1e 	bne	r2,zero,fb0 <__alt_mem_onchip_memory+0xf7800fb0>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
    1080:	e03fff15 	stw	zero,-4(fp)
    1084:	00003106 	br	114c <initWeights+0x26c>
   {
    for( i = 0;i<numInputs+1;i++)
    1088:	e03ffe15 	stw	zero,-8(fp)
    108c:	00002906 	br	1134 <initWeights+0x254>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
    1090:	0000e940 	call	e94 <getRand>
    1094:	1007883a 	mov	r3,r2
    1098:	1809883a 	mov	r4,r3
    109c:	0005c5c0 	call	5c5c <__extendsfdf2>
    10a0:	1011883a 	mov	r8,r2
    10a4:	1813883a 	mov	r9,r3
    10a8:	000d883a 	mov	r6,zero
    10ac:	01cff834 	movhi	r7,16352
    10b0:	4009883a 	mov	r4,r8
    10b4:	480b883a 	mov	r5,r9
    10b8:	00052040 	call	5204 <__subdf3>
    10bc:	1009883a 	mov	r4,r2
    10c0:	180b883a 	mov	r5,r3
    10c4:	2005883a 	mov	r2,r4
    10c8:	2807883a 	mov	r3,r5
    10cc:	000d883a 	mov	r6,zero
    10d0:	01d00034 	movhi	r7,16384
    10d4:	1009883a 	mov	r4,r2
    10d8:	180b883a 	mov	r5,r3
    10dc:	00040340 	call	4034 <__divdf3>
    10e0:	1009883a 	mov	r4,r2
    10e4:	180b883a 	mov	r5,r3
    10e8:	2005883a 	mov	r2,r4
    10ec:	2807883a 	mov	r3,r5
    10f0:	1009883a 	mov	r4,r2
    10f4:	180b883a 	mov	r5,r3
    10f8:	0005d6c0 	call	5d6c <__truncdfsf2>
    10fc:	100b883a 	mov	r5,r2
    1100:	008000b4 	movhi	r2,2
    1104:	10a0c704 	addi	r2,r2,-31972
    1108:	e0fffe17 	ldw	r3,-8(fp)
    110c:	19000ca4 	muli	r4,r3,50
    1110:	e0ffff17 	ldw	r3,-4(fp)
    1114:	20c7883a 	add	r3,r4,r3
    1118:	18c7883a 	add	r3,r3,r3
    111c:	18c7883a 	add	r3,r3,r3
    1120:	10c5883a 	add	r2,r2,r3
    1124:	11400015 	stw	r5,0(r2)
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
   {
    for( i = 0;i<numInputs+1;i++)
    1128:	e0bffe17 	ldw	r2,-8(fp)
    112c:	10800044 	addi	r2,r2,1
    1130:	e0bffe15 	stw	r2,-8(fp)
    1134:	e0bffe17 	ldw	r2,-8(fp)
    1138:	108000d0 	cmplti	r2,r2,3
    113c:	103fd41e 	bne	r2,zero,1090 <__alt_mem_onchip_memory+0xf7801090>
    {
     weightsH1H2[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsH1H2[i][k]);
    }
   }
 for( k = 0;k<numHidden1;k++)
    1140:	e0bfff17 	ldw	r2,-4(fp)
    1144:	10800044 	addi	r2,r2,1
    1148:	e0bfff15 	stw	r2,-4(fp)
    114c:	e0bfff17 	ldw	r2,-4(fp)
    1150:	10800c90 	cmplti	r2,r2,50
    1154:	103fcc1e 	bne	r2,zero,1088 <__alt_mem_onchip_memory+0xf7801088>
    {
     weightsIH1[i][k] = (getRand() - 0.5)/2;
     //printf("Weight = %f\n", weightsIH1[i][k]);
    }
   }
}
    1158:	0001883a 	nop
    115c:	e037883a 	mov	sp,fp
    1160:	dfc00117 	ldw	ra,4(sp)
    1164:	df000017 	ldw	fp,0(sp)
    1168:	dec00204 	addi	sp,sp,8
    116c:	f800283a 	ret

00001170 <initData>:


//************************************
// read in the data
void initData(void)
{
    1170:	defffe04 	addi	sp,sp,-8
    1174:	dfc00115 	stw	ra,4(sp)
    1178:	df000015 	stw	fp,0(sp)
    117c:	d839883a 	mov	fp,sp
    printf("initialising data\n");
    1180:	01000074 	movhi	r4,1
    1184:	210d2904 	addi	r4,r4,13476
    1188:	00062880 	call	6288 <puts>
    // [-1][1]
    // an extra input valued 1 is also added
    // to act as the bias
    // the output must lie in the range -1 to 1

    trainInputs[0][0]  = 0.95;
    118c:	008000b4 	movhi	r2,2
    1190:	10a17204 	addi	r2,r2,-31288
    1194:	00cfdcf4 	movhi	r3,16243
    1198:	18ccccc4 	addi	r3,r3,13107
    119c:	10c00015 	stw	r3,0(r2)
    trainInputs[0][1]  = -0.95;
    11a0:	008000b4 	movhi	r2,2
    11a4:	10a17204 	addi	r2,r2,-31288
    11a8:	00efdcf4 	movhi	r3,49011
    11ac:	18ccccc4 	addi	r3,r3,13107
    11b0:	10c00115 	stw	r3,4(r2)
    trainInputs[0][2]  = 1;    //bias
    11b4:	008000b4 	movhi	r2,2
    11b8:	10a17204 	addi	r2,r2,-31288
    11bc:	00cfe034 	movhi	r3,16256
    11c0:	10c00215 	stw	r3,8(r2)
    trainOutput[0] = 0.95;
    11c4:	008000b4 	movhi	r2,2
    11c8:	10a17e04 	addi	r2,r2,-31240
    11cc:	00cfdcf4 	movhi	r3,16243
    11d0:	18ccccc4 	addi	r3,r3,13107
    11d4:	10c00015 	stw	r3,0(r2)

    trainInputs[1][0]  = -0.95;
    11d8:	008000b4 	movhi	r2,2
    11dc:	10a17204 	addi	r2,r2,-31288
    11e0:	00efdcf4 	movhi	r3,49011
    11e4:	18ccccc4 	addi	r3,r3,13107
    11e8:	10c00315 	stw	r3,12(r2)
    trainInputs[1][1]  = 0.95;
    11ec:	008000b4 	movhi	r2,2
    11f0:	10a17204 	addi	r2,r2,-31288
    11f4:	00cfdcf4 	movhi	r3,16243
    11f8:	18ccccc4 	addi	r3,r3,13107
    11fc:	10c00415 	stw	r3,16(r2)
    trainInputs[1][2]  = 1;       //bias
    1200:	008000b4 	movhi	r2,2
    1204:	10a17204 	addi	r2,r2,-31288
    1208:	00cfe034 	movhi	r3,16256
    120c:	10c00515 	stw	r3,20(r2)
    trainOutput[1] = 0.95;
    1210:	008000b4 	movhi	r2,2
    1214:	10a17e04 	addi	r2,r2,-31240
    1218:	00cfdcf4 	movhi	r3,16243
    121c:	18ccccc4 	addi	r3,r3,13107
    1220:	10c00115 	stw	r3,4(r2)

    trainInputs[2][0]  = 0.95;
    1224:	008000b4 	movhi	r2,2
    1228:	10a17204 	addi	r2,r2,-31288
    122c:	00cfdcf4 	movhi	r3,16243
    1230:	18ccccc4 	addi	r3,r3,13107
    1234:	10c00615 	stw	r3,24(r2)
    trainInputs[2][1]  = 0.95;
    1238:	008000b4 	movhi	r2,2
    123c:	10a17204 	addi	r2,r2,-31288
    1240:	00cfdcf4 	movhi	r3,16243
    1244:	18ccccc4 	addi	r3,r3,13107
    1248:	10c00715 	stw	r3,28(r2)
   trainInputs[2][2]  = 1;        //bias
    124c:	008000b4 	movhi	r2,2
    1250:	10a17204 	addi	r2,r2,-31288
    1254:	00cfe034 	movhi	r3,16256
    1258:	10c00815 	stw	r3,32(r2)
    trainOutput[2] = -0.95;
    125c:	008000b4 	movhi	r2,2
    1260:	10a17e04 	addi	r2,r2,-31240
    1264:	00efdcf4 	movhi	r3,49011
    1268:	18ccccc4 	addi	r3,r3,13107
    126c:	10c00215 	stw	r3,8(r2)

    trainInputs[3][0]  = -0.95;
    1270:	008000b4 	movhi	r2,2
    1274:	10a17204 	addi	r2,r2,-31288
    1278:	00efdcf4 	movhi	r3,49011
    127c:	18ccccc4 	addi	r3,r3,13107
    1280:	10c00915 	stw	r3,36(r2)
    trainInputs[3][1]  = -0.95;
    1284:	008000b4 	movhi	r2,2
    1288:	10a17204 	addi	r2,r2,-31288
    128c:	00efdcf4 	movhi	r3,49011
    1290:	18ccccc4 	addi	r3,r3,13107
    1294:	10c00a15 	stw	r3,40(r2)
    trainInputs[3][2]  = 1;     //bias
    1298:	008000b4 	movhi	r2,2
    129c:	10a17204 	addi	r2,r2,-31288
    12a0:	00cfe034 	movhi	r3,16256
    12a4:	10c00b15 	stw	r3,44(r2)
    trainOutput[3] = -0.95;
    12a8:	008000b4 	movhi	r2,2
    12ac:	10a17e04 	addi	r2,r2,-31240
    12b0:	00efdcf4 	movhi	r3,49011
    12b4:	18ccccc4 	addi	r3,r3,13107
    12b8:	10c00315 	stw	r3,12(r2)
hiddenVal1[numHidden1]=1;//bias capa oculta1
    12bc:	008000b4 	movhi	r2,2
    12c0:	10a09504 	addi	r2,r2,-32172
    12c4:	00cfe034 	movhi	r3,16256
    12c8:	10c03215 	stw	r3,200(r2)
hiddenVal2[numHidden2]=1;//bias capa oculta2
    12cc:	00800074 	movhi	r2,1
    12d0:	109bf804 	addi	r2,r2,28640
    12d4:	00cfe034 	movhi	r3,16256
    12d8:	10c01415 	stw	r3,80(r2)
}
    12dc:	0001883a 	nop
    12e0:	e037883a 	mov	sp,fp
    12e4:	dfc00117 	ldw	ra,4(sp)
    12e8:	df000017 	ldw	fp,0(sp)
    12ec:	dec00204 	addi	sp,sp,8
    12f0:	f800283a 	ret

000012f4 <displayResults>:


//************************************
// display results
void displayResults(void)
{
    12f4:	defff804 	addi	sp,sp,-32
    12f8:	dfc00715 	stw	ra,28(sp)
    12fc:	df000615 	stw	fp,24(sp)
    1300:	dc800515 	stw	r18,20(sp)
    1304:	dc400415 	stw	r17,16(sp)
    1308:	dc000315 	stw	r16,12(sp)
    130c:	df000604 	addi	fp,sp,24
 int i=0;
    1310:	e03ffc15 	stw	zero,-16(fp)
 for( i = 0;i<numPatterns;i++)
    1314:	e03ffc15 	stw	zero,-16(fp)
    1318:	00002006 	br	139c <displayResults+0xa8>
 {
  patNum = i;
    131c:	e0bffc17 	ldw	r2,-16(fp)
    1320:	d0a6d515 	stw	r2,-25772(gp)
  calcNet();
    1324:	000034c0 	call	34c <calcNet>
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
    1328:	d0a6d517 	ldw	r2,-25772(gp)
    132c:	14800044 	addi	r18,r2,1
    1330:	d0e6d517 	ldw	r3,-25772(gp)
    1334:	008000b4 	movhi	r2,2
    1338:	10a17e04 	addi	r2,r2,-31240
    133c:	18c7883a 	add	r3,r3,r3
    1340:	18c7883a 	add	r3,r3,r3
    1344:	10c5883a 	add	r2,r2,r3
    1348:	10c00017 	ldw	r3,0(r2)
    134c:	1809883a 	mov	r4,r3
    1350:	0005c5c0 	call	5c5c <__extendsfdf2>
    1354:	1021883a 	mov	r16,r2
    1358:	1823883a 	mov	r17,r3
    135c:	d0a6d917 	ldw	r2,-25756(gp)
    1360:	1009883a 	mov	r4,r2
    1364:	0005c5c0 	call	5c5c <__extendsfdf2>
    1368:	1009883a 	mov	r4,r2
    136c:	180b883a 	mov	r5,r3
    1370:	d9000015 	stw	r4,0(sp)
    1374:	d9400115 	stw	r5,4(sp)
    1378:	800d883a 	mov	r6,r16
    137c:	880f883a 	mov	r7,r17
    1380:	900b883a 	mov	r5,r18
    1384:	01000074 	movhi	r4,1
    1388:	210d2e04 	addi	r4,r4,13496
    138c:	000616c0 	call	616c <printf>
//************************************
// display results
void displayResults(void)
{
 int i=0;
 for( i = 0;i<numPatterns;i++)
    1390:	e0bffc17 	ldw	r2,-16(fp)
    1394:	10800044 	addi	r2,r2,1
    1398:	e0bffc15 	stw	r2,-16(fp)
    139c:	e0bffc17 	ldw	r2,-16(fp)
    13a0:	10800110 	cmplti	r2,r2,4
    13a4:	103fdd1e 	bne	r2,zero,131c <__alt_mem_onchip_memory+0xf780131c>
 {
  patNum = i;
  calcNet();
  printf("pat = %d actual = %f neural model = %f\n",patNum+1,trainOutput[patNum],outPred);
 }
}
    13a8:	0001883a 	nop
    13ac:	e6fffd04 	addi	sp,fp,-12
    13b0:	dfc00417 	ldw	ra,16(sp)
    13b4:	df000317 	ldw	fp,12(sp)
    13b8:	dc800217 	ldw	r18,8(sp)
    13bc:	dc400117 	ldw	r17,4(sp)
    13c0:	dc000017 	ldw	r16,0(sp)
    13c4:	dec00504 	addi	sp,sp,20
    13c8:	f800283a 	ret

000013cc <calcOverallError>:


//************************************
// calculate the overall error
void calcOverallError(void)
{
    13cc:	defffd04 	addi	sp,sp,-12
    13d0:	dfc00215 	stw	ra,8(sp)
    13d4:	df000115 	stw	fp,4(sp)
    13d8:	df000104 	addi	fp,sp,4
     int i=0;
    13dc:	e03fff15 	stw	zero,-4(fp)
     RMSerror = 0.0;
    13e0:	d026d815 	stw	zero,-25760(gp)
     for(i = 0;i<numPatterns;i++)
    13e4:	e03fff15 	stw	zero,-4(fp)
    13e8:	00001406 	br	143c <calcOverallError+0x70>
        {
         patNum = i;
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	d0a6d515 	stw	r2,-25772(gp)
         calcNet();
    13f4:	000034c0 	call	34c <calcNet>
         RMSerror = RMSerror + (errThisPat * errThisPat);
    13f8:	d0a6d617 	ldw	r2,-25768(gp)
    13fc:	d0e6d617 	ldw	r3,-25768(gp)
    1400:	180b883a 	mov	r5,r3
    1404:	1009883a 	mov	r4,r2
    1408:	0002d840 	call	2d84 <__mulsf3>
    140c:	1009883a 	mov	r4,r2
    1410:	2007883a 	mov	r3,r4
    1414:	d0a6d817 	ldw	r2,-25760(gp)
    1418:	100b883a 	mov	r5,r2
    141c:	1809883a 	mov	r4,r3
    1420:	000247c0 	call	247c <__addsf3>
    1424:	1007883a 	mov	r3,r2
    1428:	1805883a 	mov	r2,r3
    142c:	d0a6d815 	stw	r2,-25760(gp)
// calculate the overall error
void calcOverallError(void)
{
     int i=0;
     RMSerror = 0.0;
     for(i = 0;i<numPatterns;i++)
    1430:	e0bfff17 	ldw	r2,-4(fp)
    1434:	10800044 	addi	r2,r2,1
    1438:	e0bfff15 	stw	r2,-4(fp)
    143c:	e0bfff17 	ldw	r2,-4(fp)
    1440:	10800110 	cmplti	r2,r2,4
    1444:	103fe91e 	bne	r2,zero,13ec <__alt_mem_onchip_memory+0xf78013ec>
        {
         patNum = i;
         calcNet();
         RMSerror = RMSerror + (errThisPat * errThisPat);
        }
     RMSerror = RMSerror/numPatterns;
    1448:	d0a6d817 	ldw	r2,-25760(gp)
    144c:	01502034 	movhi	r5,16512
    1450:	1009883a 	mov	r4,r2
    1454:	00029440 	call	2944 <__divsf3>
    1458:	1007883a 	mov	r3,r2
    145c:	1805883a 	mov	r2,r3
    1460:	d0a6d815 	stw	r2,-25760(gp)
     RMSerror = sqrt(RMSerror);
    1464:	d0a6d817 	ldw	r2,-25760(gp)
    1468:	1009883a 	mov	r4,r2
    146c:	0005c5c0 	call	5c5c <__extendsfdf2>
    1470:	100b883a 	mov	r5,r2
    1474:	180d883a 	mov	r6,r3
    1478:	2809883a 	mov	r4,r5
    147c:	300b883a 	mov	r5,r6
    1480:	00018c00 	call	18c0 <sqrt>
    1484:	100b883a 	mov	r5,r2
    1488:	180d883a 	mov	r6,r3
    148c:	2809883a 	mov	r4,r5
    1490:	300b883a 	mov	r5,r6
    1494:	0005d6c0 	call	5d6c <__truncdfsf2>
    1498:	1007883a 	mov	r3,r2
    149c:	d0e6d815 	stw	r3,-25760(gp)
}
    14a0:	0001883a 	nop
    14a4:	e037883a 	mov	sp,fp
    14a8:	dfc00117 	ldw	ra,4(sp)
    14ac:	df000017 	ldw	fp,0(sp)
    14b0:	dec00204 	addi	sp,sp,8
    14b4:	f800283a 	ret

000014b8 <main>:
//********** THIS IS THE MAIN PROGRAM **************************
//==============================================================


int main(void)
{
    14b8:	defff704 	addi	sp,sp,-36
    14bc:	dfc00815 	stw	ra,32(sp)
    14c0:	df000715 	stw	fp,28(sp)
    14c4:	df000704 	addi	fp,sp,28
 // seed random number function
 srand ( time(NULL) );
    14c8:	0009883a 	mov	r4,zero
    14cc:	00064100 	call	6410 <time>
    14d0:	1009883a 	mov	r4,r2
    14d4:	000629c0 	call	629c <srand>
  PERF_RESET(PERFORMANCE_COUNTER_BASE);
    14d8:	00c00044 	movi	r3,1
    14dc:	00840034 	movhi	r2,4096
    14e0:	10842004 	addi	r2,r2,4224
    14e4:	10c00035 	stwio	r3,0(r2)
  PERF_START_MEASURING(PERFORMANCE_COUNTER_BASE);
    14e8:	0007883a 	mov	r3,zero
    14ec:	00840034 	movhi	r2,4096
    14f0:	10842104 	addi	r2,r2,4228
    14f4:	10c00035 	stwio	r3,0(r2)
 // initiate the weights
  PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 1);
    14f8:	0007883a 	mov	r3,zero
    14fc:	00840034 	movhi	r2,4096
    1500:	10842504 	addi	r2,r2,4244
    1504:	10c00035 	stwio	r3,0(r2)
 initWeights();
    1508:	0000ee00 	call	ee0 <initWeights>
 // load in the data
 initData();
    150c:	00011700 	call	1170 <initData>
   PERF_END (PERFORMANCE_COUNTER_BASE, 1);
    1510:	0007883a 	mov	r3,zero
    1514:	00840034 	movhi	r2,4096
    1518:	10842404 	addi	r2,r2,4240
    151c:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    1520:	e03ffe15 	stw	zero,-8(fp)
    1524:	00004906 	br	164c <main+0x194>
    {
        for(i = 0;i<numPatterns;i++)
    1528:	e03fff15 	stw	zero,-4(fp)
    152c:	00002d06 	br	15e4 <main+0x12c>
        {
          //select a pattern at random
          patNum = rand()%numPatterns;
    1530:	00062b40 	call	62b4 <rand>
    1534:	1007883a 	mov	r3,r2
    1538:	00a00034 	movhi	r2,32768
    153c:	108000c4 	addi	r2,r2,3
    1540:	1884703a 	and	r2,r3,r2
    1544:	1000040e 	bge	r2,zero,1558 <main+0xa0>
    1548:	10bfffc4 	addi	r2,r2,-1
    154c:	00ffff04 	movi	r3,-4
    1550:	10c4b03a 	or	r2,r2,r3
    1554:	10800044 	addi	r2,r2,1
    1558:	d0a6d515 	stw	r2,-25772(gp)

          //calculate the current network output
          //and error for this pattern
          //phase forward

          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 2);
    155c:	0007883a 	mov	r3,zero
    1560:	00840034 	movhi	r2,4096
    1564:	10842904 	addi	r2,r2,4260
    1568:	10c00035 	stwio	r3,0(r2)
          calcNet();
    156c:	000034c0 	call	34c <calcNet>
          PERF_END (PERFORMANCE_COUNTER_BASE, 2);
    1570:	0007883a 	mov	r3,zero
    1574:	00840034 	movhi	r2,4096
    1578:	10842804 	addi	r2,r2,4256
    157c:	10c00035 	stwio	r3,0(r2)
          //change network weights
          //phase backward and update weights
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 3);
    1580:	0007883a 	mov	r3,zero
    1584:	00840034 	movhi	r2,4096
    1588:	10842d04 	addi	r2,r2,4276
    158c:	10c00035 	stwio	r3,0(r2)
          WeightChangesH2O();
    1590:	00007b80 	call	7b8 <WeightChangesH2O>
          WeightChangesH1H2();
    1594:	00009480 	call	948 <WeightChangesH1H2>
          WeightChangesIH1();
    1598:	0000bd80 	call	bd8 <WeightChangesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 3);
    159c:	0007883a 	mov	r3,zero
    15a0:	00840034 	movhi	r2,4096
    15a4:	10842c04 	addi	r2,r2,4272
    15a8:	10c00035 	stwio	r3,0(r2)
          PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 4);
    15ac:	0007883a 	mov	r3,zero
    15b0:	00840034 	movhi	r2,4096
    15b4:	10843104 	addi	r2,r2,4292
    15b8:	10c00035 	stwio	r3,0(r2)
          WeightUpdatesH2O();
    15bc:	000082c0 	call	82c <WeightUpdatesH2O>
          WeightUpdatesH1H2();
    15c0:	0000a500 	call	a50 <WeightUpdatesH1H2>
          WeightUpdatesIH1();
    15c4:	0000d440 	call	d44 <WeightUpdatesIH1>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
    15c8:	0007883a 	mov	r3,zero
    15cc:	00840034 	movhi	r2,4096
    15d0:	10843004 	addi	r2,r2,4288
    15d4:	10c00035 	stwio	r3,0(r2)


 // train the network
    for(j = 0;j <= numEpochs;j++)
    {
        for(i = 0;i<numPatterns;i++)
    15d8:	e0bfff17 	ldw	r2,-4(fp)
    15dc:	10800044 	addi	r2,r2,1
    15e0:	e0bfff15 	stw	r2,-4(fp)
    15e4:	e0bfff17 	ldw	r2,-4(fp)
    15e8:	10800110 	cmplti	r2,r2,4
    15ec:	103fd01e 	bne	r2,zero,1530 <__alt_mem_onchip_memory+0xf7801530>
          PERF_END (PERFORMANCE_COUNTER_BASE, 4);
        }

        //display the overall network error
        //after each epoch
        PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 5);
    15f0:	0007883a 	mov	r3,zero
    15f4:	00840034 	movhi	r2,4096
    15f8:	10843504 	addi	r2,r2,4308
    15fc:	10c00035 	stwio	r3,0(r2)
        calcOverallError();
    1600:	00013cc0 	call	13cc <calcOverallError>
        printf("epoch = %d RMS Error = %f\n",j,RMSerror);
    1604:	d0a6d817 	ldw	r2,-25760(gp)
    1608:	1009883a 	mov	r4,r2
    160c:	0005c5c0 	call	5c5c <__extendsfdf2>
    1610:	1009883a 	mov	r4,r2
    1614:	180b883a 	mov	r5,r3
    1618:	200d883a 	mov	r6,r4
    161c:	280f883a 	mov	r7,r5
    1620:	e17ffe17 	ldw	r5,-8(fp)
    1624:	01000074 	movhi	r4,1
    1628:	210d3804 	addi	r4,r4,13536
    162c:	000616c0 	call	616c <printf>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    1630:	0007883a 	mov	r3,zero
    1634:	00840034 	movhi	r2,4096
    1638:	10843404 	addi	r2,r2,4304
    163c:	10c00035 	stwio	r3,0(r2)
 int j;
 int i;


 // train the network
    for(j = 0;j <= numEpochs;j++)
    1640:	e0bffe17 	ldw	r2,-8(fp)
    1644:	10800044 	addi	r2,r2,1
    1648:	e0bffe15 	stw	r2,-8(fp)
    164c:	00c03204 	movi	r3,200
    1650:	e0bffe17 	ldw	r2,-8(fp)
    1654:	18bfb40e 	bge	r3,r2,1528 <__alt_mem_onchip_memory+0xf7801528>
        PERF_END (PERFORMANCE_COUNTER_BASE, 5);
    }

 //training has finished
 //display the results
 PERF_BEGIN (PERFORMANCE_COUNTER_BASE, 6);
    1658:	0007883a 	mov	r3,zero
    165c:	00840034 	movhi	r2,4096
    1660:	10843904 	addi	r2,r2,4324
    1664:	10c00035 	stwio	r3,0(r2)
 displayResults();
    1668:	00012f40 	call	12f4 <displayResults>
 PERF_END (PERFORMANCE_COUNTER_BASE, 6);
    166c:	0007883a 	mov	r3,zero
    1670:	00840034 	movhi	r2,4096
    1674:	10843804 	addi	r2,r2,4320
    1678:	10c00035 	stwio	r3,0(r2)

 PERF_STOP_MEASURING(PERFORMANCE_COUNTER_BASE);
    167c:	0007883a 	mov	r3,zero
    1680:	00840034 	movhi	r2,4096
    1684:	10842004 	addi	r2,r2,4224
    1688:	10c00035 	stwio	r3,0(r2)

  perf_print_formatted_report((void *)PERFORMANCE_COUNTER_BASE,
    168c:	00800074 	movhi	r2,1
    1690:	108d4104 	addi	r2,r2,13572
    1694:	d8800415 	stw	r2,16(sp)
    1698:	00800074 	movhi	r2,1
    169c:	108d4404 	addi	r2,r2,13584
    16a0:	d8800315 	stw	r2,12(sp)
    16a4:	00800074 	movhi	r2,1
    16a8:	108d4804 	addi	r2,r2,13600
    16ac:	d8800215 	stw	r2,8(sp)
    16b0:	00800074 	movhi	r2,1
    16b4:	108d4b04 	addi	r2,r2,13612
    16b8:	d8800115 	stw	r2,4(sp)
    16bc:	00800074 	movhi	r2,1
    16c0:	108d4f04 	addi	r2,r2,13628
    16c4:	d8800015 	stw	r2,0(sp)
    16c8:	01c00074 	movhi	r7,1
    16cc:	39cd3f04 	addi	r7,r7,13564
    16d0:	01800184 	movi	r6,6
    16d4:	0140bef4 	movhi	r5,763
    16d8:	297c2004 	addi	r5,r5,-3968
    16dc:	01040034 	movhi	r4,4096
    16e0:	21042004 	addi	r4,r4,4224
    16e4:	0011f840 	call	11f84 <perf_print_formatted_report>
							  "FASE UPDATE",
                              "CALCULO ERROR",
                              "TEST FINAL"
                              );

 system("PAUSE");
    16e8:	01000074 	movhi	r4,1
    16ec:	210d5304 	addi	r4,r4,13644
    16f0:	00063e00 	call	63e0 <system>
 return 0;
    16f4:	0005883a 	mov	r2,zero
}
    16f8:	e037883a 	mov	sp,fp
    16fc:	dfc00117 	ldw	ra,4(sp)
    1700:	df000017 	ldw	fp,0(sp)
    1704:	dec00204 	addi	sp,sp,8
    1708:	f800283a 	ret

0000170c <tanh>:
    170c:	00a00034 	movhi	r2,32768
    1710:	defffc04 	addi	sp,sp,-16
    1714:	10bfffc4 	addi	r2,r2,-1
    1718:	00dffc34 	movhi	r3,32752
    171c:	dc400115 	stw	r17,4(sp)
    1720:	dc000015 	stw	r16,0(sp)
    1724:	dfc00315 	stw	ra,12(sp)
    1728:	dc800215 	stw	r18,8(sp)
    172c:	2884703a 	and	r2,r5,r2
    1730:	18ffffc4 	addi	r3,r3,-1
    1734:	2821883a 	mov	r16,r5
    1738:	2023883a 	mov	r17,r4
    173c:	1880110e 	bge	r3,r2,1784 <tanh+0x78>
    1740:	200d883a 	mov	r6,r4
    1744:	280f883a 	mov	r7,r5
    1748:	0009883a 	mov	r4,zero
    174c:	014ffc34 	movhi	r5,16368
    1750:	80003416 	blt	r16,zero,1824 <tanh+0x118>
    1754:	00040340 	call	4034 <__divdf3>
    1758:	000d883a 	mov	r6,zero
    175c:	01cffc34 	movhi	r7,16368
    1760:	1009883a 	mov	r4,r2
    1764:	180b883a 	mov	r5,r3
    1768:	00037880 	call	3788 <__adddf3>
    176c:	dfc00317 	ldw	ra,12(sp)
    1770:	dc800217 	ldw	r18,8(sp)
    1774:	dc400117 	ldw	r17,4(sp)
    1778:	dc000017 	ldw	r16,0(sp)
    177c:	dec00404 	addi	sp,sp,16
    1780:	f800283a 	ret
    1784:	00d00db4 	movhi	r3,16438
    1788:	18ffffc4 	addi	r3,r3,-1
    178c:	18802116 	blt	r3,r2,1814 <tanh+0x108>
    1790:	00cf2034 	movhi	r3,15488
    1794:	18ffffc4 	addi	r3,r3,-1
    1798:	1880290e 	bge	r3,r2,1840 <tanh+0x134>
    179c:	00cffc34 	movhi	r3,16368
    17a0:	18ffffc4 	addi	r3,r3,-1
    17a4:	18802f0e 	bge	r3,r2,1864 <tanh+0x158>
    17a8:	00023ec0 	call	23ec <fabs>
    17ac:	100d883a 	mov	r6,r2
    17b0:	180f883a 	mov	r7,r3
    17b4:	1009883a 	mov	r4,r2
    17b8:	180b883a 	mov	r5,r3
    17bc:	00037880 	call	3788 <__adddf3>
    17c0:	1009883a 	mov	r4,r2
    17c4:	180b883a 	mov	r5,r3
    17c8:	0001c780 	call	1c78 <expm1>
    17cc:	1009883a 	mov	r4,r2
    17d0:	180b883a 	mov	r5,r3
    17d4:	000d883a 	mov	r6,zero
    17d8:	01d00034 	movhi	r7,16384
    17dc:	00037880 	call	3788 <__adddf3>
    17e0:	100d883a 	mov	r6,r2
    17e4:	180f883a 	mov	r7,r3
    17e8:	0009883a 	mov	r4,zero
    17ec:	01500034 	movhi	r5,16384
    17f0:	00040340 	call	4034 <__divdf3>
    17f4:	100d883a 	mov	r6,r2
    17f8:	180f883a 	mov	r7,r3
    17fc:	0009883a 	mov	r4,zero
    1800:	014ffc34 	movhi	r5,16368
    1804:	00052040 	call	5204 <__subdf3>
    1808:	803fd80e 	bge	r16,zero,176c <__alt_mem_onchip_memory+0xf780176c>
    180c:	18e0003c 	xorhi	r3,r3,32768
    1810:	003fd606 	br	176c <__alt_mem_onchip_memory+0xf780176c>
    1814:	0005883a 	mov	r2,zero
    1818:	00cffc34 	movhi	r3,16368
    181c:	803fd30e 	bge	r16,zero,176c <__alt_mem_onchip_memory+0xf780176c>
    1820:	003ffa06 	br	180c <__alt_mem_onchip_memory+0xf780180c>
    1824:	00040340 	call	4034 <__divdf3>
    1828:	000d883a 	mov	r6,zero
    182c:	01cffc34 	movhi	r7,16368
    1830:	1009883a 	mov	r4,r2
    1834:	180b883a 	mov	r5,r3
    1838:	00052040 	call	5204 <__subdf3>
    183c:	003fcb06 	br	176c <__alt_mem_onchip_memory+0xf780176c>
    1840:	000d883a 	mov	r6,zero
    1844:	01cffc34 	movhi	r7,16368
    1848:	00037880 	call	3788 <__adddf3>
    184c:	880d883a 	mov	r6,r17
    1850:	800f883a 	mov	r7,r16
    1854:	1009883a 	mov	r4,r2
    1858:	180b883a 	mov	r5,r3
    185c:	0004aec0 	call	4aec <__muldf3>
    1860:	003fc206 	br	176c <__alt_mem_onchip_memory+0xf780176c>
    1864:	00023ec0 	call	23ec <fabs>
    1868:	000d883a 	mov	r6,zero
    186c:	01f00034 	movhi	r7,49152
    1870:	1009883a 	mov	r4,r2
    1874:	180b883a 	mov	r5,r3
    1878:	0004aec0 	call	4aec <__muldf3>
    187c:	1009883a 	mov	r4,r2
    1880:	180b883a 	mov	r5,r3
    1884:	0001c780 	call	1c78 <expm1>
    1888:	000d883a 	mov	r6,zero
    188c:	01d00034 	movhi	r7,16384
    1890:	1009883a 	mov	r4,r2
    1894:	180b883a 	mov	r5,r3
    1898:	1023883a 	mov	r17,r2
    189c:	1ca0003c 	xorhi	r18,r3,32768
    18a0:	00037880 	call	3788 <__adddf3>
    18a4:	100d883a 	mov	r6,r2
    18a8:	180f883a 	mov	r7,r3
    18ac:	8809883a 	mov	r4,r17
    18b0:	900b883a 	mov	r5,r18
    18b4:	00040340 	call	4034 <__divdf3>
    18b8:	803fac0e 	bge	r16,zero,176c <__alt_mem_onchip_memory+0xf780176c>
    18bc:	003fd306 	br	180c <__alt_mem_onchip_memory+0xf780180c>

000018c0 <sqrt>:
    18c0:	defff104 	addi	sp,sp,-60
    18c4:	dd000d15 	stw	r20,52(sp)
    18c8:	05000074 	movhi	r20,1
    18cc:	dcc00c15 	stw	r19,48(sp)
    18d0:	dc800b15 	stw	r18,44(sp)
    18d4:	dc400a15 	stw	r17,40(sp)
    18d8:	dc000915 	stw	r16,36(sp)
    18dc:	dfc00e15 	stw	ra,56(sp)
    18e0:	a5150404 	addi	r20,r20,21520
    18e4:	2027883a 	mov	r19,r4
    18e8:	2825883a 	mov	r18,r5
    18ec:	00019f00 	call	19f0 <__ieee754_sqrt>
    18f0:	1821883a 	mov	r16,r3
    18f4:	a0c00017 	ldw	r3,0(r20)
    18f8:	1023883a 	mov	r17,r2
    18fc:	00bfffc4 	movi	r2,-1
    1900:	18800a26 	beq	r3,r2,192c <sqrt+0x6c>
    1904:	9809883a 	mov	r4,r19
    1908:	900b883a 	mov	r5,r18
    190c:	00024000 	call	2400 <__fpclassifyd>
    1910:	10000626 	beq	r2,zero,192c <sqrt+0x6c>
    1914:	000d883a 	mov	r6,zero
    1918:	000f883a 	mov	r7,zero
    191c:	9809883a 	mov	r4,r19
    1920:	900b883a 	mov	r5,r18
    1924:	00049f80 	call	49f8 <__ledf2>
    1928:	10000a16 	blt	r2,zero,1954 <sqrt+0x94>
    192c:	8805883a 	mov	r2,r17
    1930:	8007883a 	mov	r3,r16
    1934:	dfc00e17 	ldw	ra,56(sp)
    1938:	dd000d17 	ldw	r20,52(sp)
    193c:	dcc00c17 	ldw	r19,48(sp)
    1940:	dc800b17 	ldw	r18,44(sp)
    1944:	dc400a17 	ldw	r17,40(sp)
    1948:	dc000917 	ldw	r16,36(sp)
    194c:	dec00f04 	addi	sp,sp,60
    1950:	f800283a 	ret
    1954:	00800044 	movi	r2,1
    1958:	d8800015 	stw	r2,0(sp)
    195c:	a4000017 	ldw	r16,0(r20)
    1960:	00800074 	movhi	r2,1
    1964:	108d5504 	addi	r2,r2,13652
    1968:	d8800115 	stw	r2,4(sp)
    196c:	d8000815 	stw	zero,32(sp)
    1970:	dcc00415 	stw	r19,16(sp)
    1974:	dc800515 	stw	r18,20(sp)
    1978:	dcc00215 	stw	r19,8(sp)
    197c:	dc800315 	stw	r18,12(sp)
    1980:	80000a1e 	bne	r16,zero,19ac <sqrt+0xec>
    1984:	d8000615 	stw	zero,24(sp)
    1988:	d8000715 	stw	zero,28(sp)
    198c:	d809883a 	mov	r4,sp
    1990:	00024740 	call	2474 <matherr>
    1994:	10000e26 	beq	r2,zero,19d0 <sqrt+0x110>
    1998:	d8800817 	ldw	r2,32(sp)
    199c:	1000101e 	bne	r2,zero,19e0 <sqrt+0x120>
    19a0:	d8800617 	ldw	r2,24(sp)
    19a4:	d8c00717 	ldw	r3,28(sp)
    19a8:	003fe206 	br	1934 <__alt_mem_onchip_memory+0xf7801934>
    19ac:	000d883a 	mov	r6,zero
    19b0:	000f883a 	mov	r7,zero
    19b4:	0009883a 	mov	r4,zero
    19b8:	000b883a 	mov	r5,zero
    19bc:	00040340 	call	4034 <__divdf3>
    19c0:	d8800615 	stw	r2,24(sp)
    19c4:	d8c00715 	stw	r3,28(sp)
    19c8:	00800084 	movi	r2,2
    19cc:	80bfef1e 	bne	r16,r2,198c <__alt_mem_onchip_memory+0xf780198c>
    19d0:	000612c0 	call	612c <__errno>
    19d4:	00c00844 	movi	r3,33
    19d8:	10c00015 	stw	r3,0(r2)
    19dc:	003fee06 	br	1998 <__alt_mem_onchip_memory+0xf7801998>
    19e0:	000612c0 	call	612c <__errno>
    19e4:	d8c00817 	ldw	r3,32(sp)
    19e8:	10c00015 	stw	r3,0(r2)
    19ec:	003fec06 	br	19a0 <__alt_mem_onchip_memory+0xf78019a0>

000019f0 <__ieee754_sqrt>:
    19f0:	defffd04 	addi	sp,sp,-12
    19f4:	dc400115 	stw	r17,4(sp)
    19f8:	dc000015 	stw	r16,0(sp)
    19fc:	dfc00215 	stw	ra,8(sp)
    1a00:	28dffc2c 	andhi	r3,r5,32752
    1a04:	009ffc34 	movhi	r2,32752
    1a08:	2821883a 	mov	r16,r5
    1a0c:	2023883a 	mov	r17,r4
    1a10:	200d883a 	mov	r6,r4
    1a14:	18807b26 	beq	r3,r2,1c04 <__ieee754_sqrt+0x214>
    1a18:	01405f0e 	bge	zero,r5,1b98 <__ieee754_sqrt+0x1a8>
    1a1c:	2815d53a 	srai	r10,r5,20
    1a20:	50006a26 	beq	r10,zero,1bcc <__ieee754_sqrt+0x1dc>
    1a24:	00c00434 	movhi	r3,16
    1a28:	52bf0044 	addi	r10,r10,-1023
    1a2c:	18ffffc4 	addi	r3,r3,-1
    1a30:	80c6703a 	and	r3,r16,r3
    1a34:	5080004c 	andi	r2,r10,1
    1a38:	18c00434 	orhi	r3,r3,16
    1a3c:	1000511e 	bne	r2,zero,1b84 <__ieee754_sqrt+0x194>
    1a40:	3004d7fa 	srli	r2,r6,31
    1a44:	5015d07a 	srai	r10,r10,1
    1a48:	18c7883a 	add	r3,r3,r3
    1a4c:	10c5883a 	add	r2,r2,r3
    1a50:	01400584 	movi	r5,22
    1a54:	3187883a 	add	r3,r6,r6
    1a58:	0013883a 	mov	r9,zero
    1a5c:	000f883a 	mov	r7,zero
    1a60:	01000834 	movhi	r4,32
    1a64:	390d883a 	add	r6,r7,r4
    1a68:	1810d7fa 	srli	r8,r3,31
    1a6c:	297fffc4 	addi	r5,r5,-1
    1a70:	11800316 	blt	r2,r6,1a80 <__ieee754_sqrt+0x90>
    1a74:	1185c83a 	sub	r2,r2,r6
    1a78:	310f883a 	add	r7,r6,r4
    1a7c:	4913883a 	add	r9,r9,r4
    1a80:	1085883a 	add	r2,r2,r2
    1a84:	4085883a 	add	r2,r8,r2
    1a88:	18c7883a 	add	r3,r3,r3
    1a8c:	2008d07a 	srli	r4,r4,1
    1a90:	283ff41e 	bne	r5,zero,1a64 <__alt_mem_onchip_memory+0xf7801a64>
    1a94:	01200034 	movhi	r4,32768
    1a98:	01800804 	movi	r6,32
    1a9c:	0011883a 	mov	r8,zero
    1aa0:	0019883a 	mov	r12,zero
    1aa4:	201b883a 	mov	r13,r4
    1aa8:	00000806 	br	1acc <__ieee754_sqrt+0xdc>
    1aac:	38801726 	beq	r7,r2,1b0c <__ieee754_sqrt+0x11c>
    1ab0:	180ad7fa 	srli	r5,r3,31
    1ab4:	1085883a 	add	r2,r2,r2
    1ab8:	31bfffc4 	addi	r6,r6,-1
    1abc:	2885883a 	add	r2,r5,r2
    1ac0:	18c7883a 	add	r3,r3,r3
    1ac4:	2008d07a 	srli	r4,r4,1
    1ac8:	30001726 	beq	r6,zero,1b28 <__ieee754_sqrt+0x138>
    1acc:	230b883a 	add	r5,r4,r12
    1ad0:	38bff60e 	bge	r7,r2,1aac <__alt_mem_onchip_memory+0xf7801aac>
    1ad4:	2ae0002c 	andhi	r11,r5,32768
    1ad8:	2919883a 	add	r12,r5,r4
    1adc:	5b400826 	beq	r11,r13,1b00 <__ieee754_sqrt+0x110>
    1ae0:	3817883a 	mov	r11,r7
    1ae4:	11c5c83a 	sub	r2,r2,r7
    1ae8:	1940012e 	bgeu	r3,r5,1af0 <__ieee754_sqrt+0x100>
    1aec:	10bfffc4 	addi	r2,r2,-1
    1af0:	1947c83a 	sub	r3,r3,r5
    1af4:	4111883a 	add	r8,r8,r4
    1af8:	580f883a 	mov	r7,r11
    1afc:	003fec06 	br	1ab0 <__alt_mem_onchip_memory+0xf7801ab0>
    1b00:	603ff716 	blt	r12,zero,1ae0 <__alt_mem_onchip_memory+0xf7801ae0>
    1b04:	3ac00044 	addi	r11,r7,1
    1b08:	003ff606 	br	1ae4 <__alt_mem_onchip_memory+0xf7801ae4>
    1b0c:	19401936 	bltu	r3,r5,1b74 <__ieee754_sqrt+0x184>
    1b10:	2ae0002c 	andhi	r11,r5,32768
    1b14:	2919883a 	add	r12,r5,r4
    1b18:	5b404526 	beq	r11,r13,1c30 <__ieee754_sqrt+0x240>
    1b1c:	1017883a 	mov	r11,r2
    1b20:	0005883a 	mov	r2,zero
    1b24:	003ff206 	br	1af0 <__alt_mem_onchip_memory+0xf7801af0>
    1b28:	10c4b03a 	or	r2,r2,r3
    1b2c:	10000426 	beq	r2,zero,1b40 <__ieee754_sqrt+0x150>
    1b30:	00bfffc4 	movi	r2,-1
    1b34:	40804026 	beq	r8,r2,1c38 <__ieee754_sqrt+0x248>
    1b38:	4080004c 	andi	r2,r8,1
    1b3c:	4091883a 	add	r8,r8,r2
    1b40:	4004d07a 	srli	r2,r8,1
    1b44:	4807d07a 	srai	r3,r9,1
    1b48:	010ff834 	movhi	r4,16352
    1b4c:	4a40004c 	andi	r9,r9,1
    1b50:	1909883a 	add	r4,r3,r4
    1b54:	4800091e 	bne	r9,zero,1b7c <__ieee754_sqrt+0x18c>
    1b58:	5006953a 	slli	r3,r10,20
    1b5c:	1907883a 	add	r3,r3,r4
    1b60:	dfc00217 	ldw	ra,8(sp)
    1b64:	dc400117 	ldw	r17,4(sp)
    1b68:	dc000017 	ldw	r16,0(sp)
    1b6c:	dec00304 	addi	sp,sp,12
    1b70:	f800283a 	ret
    1b74:	3805883a 	mov	r2,r7
    1b78:	003fcd06 	br	1ab0 <__alt_mem_onchip_memory+0xf7801ab0>
    1b7c:	10a00034 	orhi	r2,r2,32768
    1b80:	003ff506 	br	1b58 <__alt_mem_onchip_memory+0xf7801b58>
    1b84:	3004d7fa 	srli	r2,r6,31
    1b88:	18c7883a 	add	r3,r3,r3
    1b8c:	318d883a 	add	r6,r6,r6
    1b90:	10c7883a 	add	r3,r2,r3
    1b94:	003faa06 	br	1a40 <__alt_mem_onchip_memory+0xf7801a40>
    1b98:	00a00034 	movhi	r2,32768
    1b9c:	10bfffc4 	addi	r2,r2,-1
    1ba0:	2884703a 	and	r2,r5,r2
    1ba4:	1104b03a 	or	r2,r2,r4
    1ba8:	10001e26 	beq	r2,zero,1c24 <__ieee754_sqrt+0x234>
    1bac:	2800291e 	bne	r5,zero,1c54 <__ieee754_sqrt+0x264>
    1bb0:	0015883a 	mov	r10,zero
    1bb4:	3020d2fa 	srli	r16,r6,11
    1bb8:	52bffac4 	addi	r10,r10,-21
    1bbc:	300c957a 	slli	r6,r6,21
    1bc0:	803ffc26 	beq	r16,zero,1bb4 <__alt_mem_onchip_memory+0xf7801bb4>
    1bc4:	8080042c 	andhi	r2,r16,16
    1bc8:	10001e1e 	bne	r2,zero,1c44 <__ieee754_sqrt+0x254>
    1bcc:	0005883a 	mov	r2,zero
    1bd0:	00000106 	br	1bd8 <__ieee754_sqrt+0x1e8>
    1bd4:	1805883a 	mov	r2,r3
    1bd8:	8421883a 	add	r16,r16,r16
    1bdc:	8100042c 	andhi	r4,r16,16
    1be0:	10c00044 	addi	r3,r2,1
    1be4:	203ffb26 	beq	r4,zero,1bd4 <__alt_mem_onchip_memory+0xf7801bd4>
    1be8:	01000804 	movi	r4,32
    1bec:	20c9c83a 	sub	r4,r4,r3
    1bf0:	3108d83a 	srl	r4,r6,r4
    1bf4:	5095c83a 	sub	r10,r10,r2
    1bf8:	30cc983a 	sll	r6,r6,r3
    1bfc:	2420b03a 	or	r16,r4,r16
    1c00:	003f8806 	br	1a24 <__alt_mem_onchip_memory+0xf7801a24>
    1c04:	280f883a 	mov	r7,r5
    1c08:	0004aec0 	call	4aec <__muldf3>
    1c0c:	880d883a 	mov	r6,r17
    1c10:	800f883a 	mov	r7,r16
    1c14:	1009883a 	mov	r4,r2
    1c18:	180b883a 	mov	r5,r3
    1c1c:	00037880 	call	3788 <__adddf3>
    1c20:	003fcf06 	br	1b60 <__alt_mem_onchip_memory+0xf7801b60>
    1c24:	2005883a 	mov	r2,r4
    1c28:	2807883a 	mov	r3,r5
    1c2c:	003fcc06 	br	1b60 <__alt_mem_onchip_memory+0xf7801b60>
    1c30:	603fba16 	blt	r12,zero,1b1c <__alt_mem_onchip_memory+0xf7801b1c>
    1c34:	003fb306 	br	1b04 <__alt_mem_onchip_memory+0xf7801b04>
    1c38:	4a400044 	addi	r9,r9,1
    1c3c:	0005883a 	mov	r2,zero
    1c40:	003fc006 	br	1b44 <__alt_mem_onchip_memory+0xf7801b44>
    1c44:	01000804 	movi	r4,32
    1c48:	00bfffc4 	movi	r2,-1
    1c4c:	0007883a 	mov	r3,zero
    1c50:	003fe706 	br	1bf0 <__alt_mem_onchip_memory+0xf7801bf0>
    1c54:	200d883a 	mov	r6,r4
    1c58:	280f883a 	mov	r7,r5
    1c5c:	00052040 	call	5204 <__subdf3>
    1c60:	100d883a 	mov	r6,r2
    1c64:	180f883a 	mov	r7,r3
    1c68:	1009883a 	mov	r4,r2
    1c6c:	180b883a 	mov	r5,r3
    1c70:	00040340 	call	4034 <__divdf3>
    1c74:	003fba06 	br	1b60 <__alt_mem_onchip_memory+0xf7801b60>

00001c78 <expm1>:
    1c78:	00a00034 	movhi	r2,32768
    1c7c:	defff404 	addi	sp,sp,-48
    1c80:	10bfffc4 	addi	r2,r2,-1
    1c84:	00d010f4 	movhi	r3,16451
    1c88:	dc800415 	stw	r18,16(sp)
    1c8c:	dc400315 	stw	r17,12(sp)
    1c90:	dc000215 	stw	r16,8(sp)
    1c94:	dfc00b15 	stw	ra,44(sp)
    1c98:	df000a15 	stw	fp,40(sp)
    1c9c:	ddc00915 	stw	r23,36(sp)
    1ca0:	dd800815 	stw	r22,32(sp)
    1ca4:	dd400715 	stw	r21,28(sp)
    1ca8:	dd000615 	stw	r20,24(sp)
    1cac:	dcc00515 	stw	r19,20(sp)
    1cb0:	2884703a 	and	r2,r5,r2
    1cb4:	18da1e44 	addi	r3,r3,26745
    1cb8:	2821883a 	mov	r16,r5
    1cbc:	2023883a 	mov	r17,r4
    1cc0:	2ca0002c 	andhi	r18,r5,32768
    1cc4:	18804f2e 	bgeu	r3,r2,1e04 <expm1+0x18c>
    1cc8:	00d021b4 	movhi	r3,16518
    1ccc:	18cb9044 	addi	r3,r3,11841
    1cd0:	1880fa36 	bltu	r3,r2,20bc <expm1+0x444>
    1cd4:	90017b26 	beq	r18,zero,22c4 <expm1+0x64c>
    1cd8:	01b0be74 	movhi	r6,49913
    1cdc:	01c06974 	movhi	r7,421
    1ce0:	31bcd644 	addi	r6,r6,-3239
    1ce4:	39db87c4 	addi	r7,r7,28191
    1ce8:	8809883a 	mov	r4,r17
    1cec:	800b883a 	mov	r5,r16
    1cf0:	00037880 	call	3788 <__adddf3>
    1cf4:	000d883a 	mov	r6,zero
    1cf8:	000f883a 	mov	r7,zero
    1cfc:	1009883a 	mov	r4,r2
    1d00:	180b883a 	mov	r5,r3
    1d04:	00049f80 	call	49f8 <__ledf2>
    1d08:	10014216 	blt	r2,zero,2214 <expm1+0x59c>
    1d0c:	01994b34 	movhi	r6,25900
    1d10:	01cffdf4 	movhi	r7,16375
    1d14:	31a0bf84 	addi	r6,r6,-32002
    1d18:	39c551c4 	addi	r7,r7,5447
    1d1c:	8809883a 	mov	r4,r17
    1d20:	800b883a 	mov	r5,r16
    1d24:	0004aec0 	call	4aec <__muldf3>
    1d28:	100d883a 	mov	r6,r2
    1d2c:	180f883a 	mov	r7,r3
    1d30:	016ff834 	movhi	r5,49120
    1d34:	0009883a 	mov	r4,zero
    1d38:	00037880 	call	3788 <__adddf3>
    1d3c:	180b883a 	mov	r5,r3
    1d40:	1009883a 	mov	r4,r2
    1d44:	0005b000 	call	5b00 <__fixdfsi>
    1d48:	1009883a 	mov	r4,r2
    1d4c:	1029883a 	mov	r20,r2
    1d50:	0005b800 	call	5b80 <__floatsidf>
    1d54:	01cff9b4 	movhi	r7,16358
    1d58:	39cb9084 	addi	r7,r7,11842
    1d5c:	01bfb834 	movhi	r6,65248
    1d60:	1009883a 	mov	r4,r2
    1d64:	180b883a 	mov	r5,r3
    1d68:	1027883a 	mov	r19,r2
    1d6c:	1825883a 	mov	r18,r3
    1d70:	0004aec0 	call	4aec <__muldf3>
    1d74:	100d883a 	mov	r6,r2
    1d78:	180f883a 	mov	r7,r3
    1d7c:	8809883a 	mov	r4,r17
    1d80:	800b883a 	mov	r5,r16
    1d84:	00052040 	call	5204 <__subdf3>
    1d88:	018d5e74 	movhi	r6,13689
    1d8c:	01cf7ab4 	movhi	r7,15850
    1d90:	9809883a 	mov	r4,r19
    1d94:	900b883a 	mov	r5,r18
    1d98:	318f1d84 	addi	r6,r6,15478
    1d9c:	39ce7bc4 	addi	r7,r7,14831
    1da0:	102d883a 	mov	r22,r2
    1da4:	182b883a 	mov	r21,r3
    1da8:	0004aec0 	call	4aec <__muldf3>
    1dac:	1027883a 	mov	r19,r2
    1db0:	1825883a 	mov	r18,r3
    1db4:	980d883a 	mov	r6,r19
    1db8:	900f883a 	mov	r7,r18
    1dbc:	b009883a 	mov	r4,r22
    1dc0:	a80b883a 	mov	r5,r21
    1dc4:	00052040 	call	5204 <__subdf3>
    1dc8:	100d883a 	mov	r6,r2
    1dcc:	180f883a 	mov	r7,r3
    1dd0:	b009883a 	mov	r4,r22
    1dd4:	a80b883a 	mov	r5,r21
    1dd8:	1023883a 	mov	r17,r2
    1ddc:	1821883a 	mov	r16,r3
    1de0:	00052040 	call	5204 <__subdf3>
    1de4:	980d883a 	mov	r6,r19
    1de8:	900f883a 	mov	r7,r18
    1dec:	1009883a 	mov	r4,r2
    1df0:	180b883a 	mov	r5,r3
    1df4:	00052040 	call	5204 <__subdf3>
    1df8:	d8800015 	stw	r2,0(sp)
    1dfc:	d8c00115 	stw	r3,4(sp)
    1e00:	00000706 	br	1e20 <expm1+0x1a8>
    1e04:	00cff5b4 	movhi	r3,16342
    1e08:	18cb9084 	addi	r3,r3,11842
    1e0c:	1880e036 	bltu	r3,r2,2190 <expm1+0x518>
    1e10:	00cf2434 	movhi	r3,15504
    1e14:	18ffffc4 	addi	r3,r3,-1
    1e18:	18810a2e 	bgeu	r3,r2,2244 <expm1+0x5cc>
    1e1c:	0029883a 	mov	r20,zero
    1e20:	000d883a 	mov	r6,zero
    1e24:	01cff834 	movhi	r7,16352
    1e28:	8809883a 	mov	r4,r17
    1e2c:	800b883a 	mov	r5,r16
    1e30:	0004aec0 	call	4aec <__muldf3>
    1e34:	100d883a 	mov	r6,r2
    1e38:	180f883a 	mov	r7,r3
    1e3c:	8809883a 	mov	r4,r17
    1e40:	800b883a 	mov	r5,r16
    1e44:	1039883a 	mov	fp,r2
    1e48:	182f883a 	mov	r23,r3
    1e4c:	0004aec0 	call	4aec <__muldf3>
    1e50:	019b82b4 	movhi	r6,28170
    1e54:	01efa2f4 	movhi	r7,48779
    1e58:	31b0cb44 	addi	r6,r6,-15571
    1e5c:	39ff6dc4 	addi	r7,r7,-585
    1e60:	1009883a 	mov	r4,r2
    1e64:	180b883a 	mov	r5,r3
    1e68:	1027883a 	mov	r19,r2
    1e6c:	1825883a 	mov	r18,r3
    1e70:	0004aec0 	call	4aec <__muldf3>
    1e74:	01a1b9b4 	movhi	r6,34534
    1e78:	01cfb474 	movhi	r7,16081
    1e7c:	31948e44 	addi	r6,r6,21049
    1e80:	39f3f284 	addi	r7,r7,-12342
    1e84:	1009883a 	mov	r4,r2
    1e88:	180b883a 	mov	r5,r3
    1e8c:	00037880 	call	3788 <__adddf3>
    1e90:	980d883a 	mov	r6,r19
    1e94:	900f883a 	mov	r7,r18
    1e98:	1009883a 	mov	r4,r2
    1e9c:	180b883a 	mov	r5,r3
    1ea0:	0004aec0 	call	4aec <__muldf3>
    1ea4:	01a7aaf4 	movhi	r6,40619
    1ea8:	01cfc574 	movhi	r7,16149
    1eac:	31b6edc4 	addi	r6,r6,-9289
    1eb0:	39f38644 	addi	r7,r7,-12775
    1eb4:	1009883a 	mov	r4,r2
    1eb8:	180b883a 	mov	r5,r3
    1ebc:	00052040 	call	5204 <__subdf3>
    1ec0:	980d883a 	mov	r6,r19
    1ec4:	900f883a 	mov	r7,r18
    1ec8:	1009883a 	mov	r4,r2
    1ecc:	180b883a 	mov	r5,r3
    1ed0:	0004aec0 	call	4aec <__muldf3>
    1ed4:	01867fb4 	movhi	r6,6654
    1ed8:	01cfd6b4 	movhi	r7,16218
    1edc:	31956144 	addi	r6,r6,21893
    1ee0:	39c06804 	addi	r7,r7,416
    1ee4:	1009883a 	mov	r4,r2
    1ee8:	180b883a 	mov	r5,r3
    1eec:	00037880 	call	3788 <__adddf3>
    1ef0:	980d883a 	mov	r6,r19
    1ef4:	900f883a 	mov	r7,r18
    1ef8:	1009883a 	mov	r4,r2
    1efc:	180b883a 	mov	r5,r3
    1f00:	0004aec0 	call	4aec <__muldf3>
    1f04:	01844474 	movhi	r6,4369
    1f08:	01cfe874 	movhi	r7,16289
    1f0c:	31843d04 	addi	r6,r6,4340
    1f10:	39c44444 	addi	r7,r7,4369
    1f14:	1009883a 	mov	r4,r2
    1f18:	180b883a 	mov	r5,r3
    1f1c:	00052040 	call	5204 <__subdf3>
    1f20:	980d883a 	mov	r6,r19
    1f24:	900f883a 	mov	r7,r18
    1f28:	1009883a 	mov	r4,r2
    1f2c:	180b883a 	mov	r5,r3
    1f30:	0004aec0 	call	4aec <__muldf3>
    1f34:	000d883a 	mov	r6,zero
    1f38:	01cffc34 	movhi	r7,16368
    1f3c:	1009883a 	mov	r4,r2
    1f40:	180b883a 	mov	r5,r3
    1f44:	00037880 	call	3788 <__adddf3>
    1f48:	e009883a 	mov	r4,fp
    1f4c:	b80b883a 	mov	r5,r23
    1f50:	100d883a 	mov	r6,r2
    1f54:	180f883a 	mov	r7,r3
    1f58:	102d883a 	mov	r22,r2
    1f5c:	182b883a 	mov	r21,r3
    1f60:	0004aec0 	call	4aec <__muldf3>
    1f64:	100d883a 	mov	r6,r2
    1f68:	180f883a 	mov	r7,r3
    1f6c:	0009883a 	mov	r4,zero
    1f70:	01500234 	movhi	r5,16392
    1f74:	00052040 	call	5204 <__subdf3>
    1f78:	b009883a 	mov	r4,r22
    1f7c:	a80b883a 	mov	r5,r21
    1f80:	100d883a 	mov	r6,r2
    1f84:	180f883a 	mov	r7,r3
    1f88:	1039883a 	mov	fp,r2
    1f8c:	182f883a 	mov	r23,r3
    1f90:	00052040 	call	5204 <__subdf3>
    1f94:	e00d883a 	mov	r6,fp
    1f98:	b80f883a 	mov	r7,r23
    1f9c:	8809883a 	mov	r4,r17
    1fa0:	800b883a 	mov	r5,r16
    1fa4:	102d883a 	mov	r22,r2
    1fa8:	182b883a 	mov	r21,r3
    1fac:	0004aec0 	call	4aec <__muldf3>
    1fb0:	100d883a 	mov	r6,r2
    1fb4:	180f883a 	mov	r7,r3
    1fb8:	0009883a 	mov	r4,zero
    1fbc:	01500634 	movhi	r5,16408
    1fc0:	00052040 	call	5204 <__subdf3>
    1fc4:	100d883a 	mov	r6,r2
    1fc8:	180f883a 	mov	r7,r3
    1fcc:	b009883a 	mov	r4,r22
    1fd0:	a80b883a 	mov	r5,r21
    1fd4:	00040340 	call	4034 <__divdf3>
    1fd8:	980d883a 	mov	r6,r19
    1fdc:	900f883a 	mov	r7,r18
    1fe0:	1009883a 	mov	r4,r2
    1fe4:	180b883a 	mov	r5,r3
    1fe8:	0004aec0 	call	4aec <__muldf3>
    1fec:	a0003f26 	beq	r20,zero,20ec <expm1+0x474>
    1ff0:	d9800017 	ldw	r6,0(sp)
    1ff4:	d9c00117 	ldw	r7,4(sp)
    1ff8:	1009883a 	mov	r4,r2
    1ffc:	180b883a 	mov	r5,r3
    2000:	00052040 	call	5204 <__subdf3>
    2004:	880d883a 	mov	r6,r17
    2008:	800f883a 	mov	r7,r16
    200c:	1009883a 	mov	r4,r2
    2010:	180b883a 	mov	r5,r3
    2014:	0004aec0 	call	4aec <__muldf3>
    2018:	d9800017 	ldw	r6,0(sp)
    201c:	d9c00117 	ldw	r7,4(sp)
    2020:	1009883a 	mov	r4,r2
    2024:	180b883a 	mov	r5,r3
    2028:	00052040 	call	5204 <__subdf3>
    202c:	980d883a 	mov	r6,r19
    2030:	900f883a 	mov	r7,r18
    2034:	1009883a 	mov	r4,r2
    2038:	180b883a 	mov	r5,r3
    203c:	00052040 	call	5204 <__subdf3>
    2040:	1027883a 	mov	r19,r2
    2044:	00bfffc4 	movi	r2,-1
    2048:	1825883a 	mov	r18,r3
    204c:	a080a826 	beq	r20,r2,22f0 <expm1+0x678>
    2050:	00800044 	movi	r2,1
    2054:	a0808526 	beq	r20,r2,226c <expm1+0x5f4>
    2058:	a0800044 	addi	r2,r20,1
    205c:	00c00e44 	movi	r3,57
    2060:	18805b36 	bltu	r3,r2,21d0 <expm1+0x558>
    2064:	008004c4 	movi	r2,19
    2068:	1500b10e 	bge	r2,r20,2330 <expm1+0x6b8>
    206c:	01c0ffc4 	movi	r7,1023
    2070:	3d0fc83a 	sub	r7,r7,r20
    2074:	380e953a 	slli	r7,r7,20
    2078:	000d883a 	mov	r6,zero
    207c:	9809883a 	mov	r4,r19
    2080:	900b883a 	mov	r5,r18
    2084:	00037880 	call	3788 <__adddf3>
    2088:	800b883a 	mov	r5,r16
    208c:	100d883a 	mov	r6,r2
    2090:	180f883a 	mov	r7,r3
    2094:	8809883a 	mov	r4,r17
    2098:	00052040 	call	5204 <__subdf3>
    209c:	a020953a 	slli	r16,r20,20
    20a0:	000d883a 	mov	r6,zero
    20a4:	01cffc34 	movhi	r7,16368
    20a8:	1009883a 	mov	r4,r2
    20ac:	180b883a 	mov	r5,r3
    20b0:	00037880 	call	3788 <__adddf3>
    20b4:	80c7883a 	add	r3,r16,r3
    20b8:	00001b06 	br	2128 <expm1+0x4b0>
    20bc:	00dffc34 	movhi	r3,32752
    20c0:	18ffffc4 	addi	r3,r3,-1
    20c4:	1880242e 	bgeu	r3,r2,2158 <expm1+0x4e0>
    20c8:	00800434 	movhi	r2,16
    20cc:	10bfffc4 	addi	r2,r2,-1
    20d0:	2884703a 	and	r2,r5,r2
    20d4:	1104b03a 	or	r2,r2,r4
    20d8:	1000c01e 	bne	r2,zero,23dc <expm1+0x764>
    20dc:	90004d1e 	bne	r18,zero,2214 <expm1+0x59c>
    20e0:	2005883a 	mov	r2,r4
    20e4:	2807883a 	mov	r3,r5
    20e8:	00000f06 	br	2128 <expm1+0x4b0>
    20ec:	100d883a 	mov	r6,r2
    20f0:	180f883a 	mov	r7,r3
    20f4:	8809883a 	mov	r4,r17
    20f8:	800b883a 	mov	r5,r16
    20fc:	0004aec0 	call	4aec <__muldf3>
    2100:	980d883a 	mov	r6,r19
    2104:	900f883a 	mov	r7,r18
    2108:	1009883a 	mov	r4,r2
    210c:	180b883a 	mov	r5,r3
    2110:	00052040 	call	5204 <__subdf3>
    2114:	100d883a 	mov	r6,r2
    2118:	180f883a 	mov	r7,r3
    211c:	8809883a 	mov	r4,r17
    2120:	800b883a 	mov	r5,r16
    2124:	00052040 	call	5204 <__subdf3>
    2128:	dfc00b17 	ldw	ra,44(sp)
    212c:	df000a17 	ldw	fp,40(sp)
    2130:	ddc00917 	ldw	r23,36(sp)
    2134:	dd800817 	ldw	r22,32(sp)
    2138:	dd400717 	ldw	r21,28(sp)
    213c:	dd000617 	ldw	r20,24(sp)
    2140:	dcc00517 	ldw	r19,20(sp)
    2144:	dc800417 	ldw	r18,16(sp)
    2148:	dc400317 	ldw	r17,12(sp)
    214c:	dc000217 	ldw	r16,8(sp)
    2150:	dec00c04 	addi	sp,sp,48
    2154:	f800283a 	ret
    2158:	01bfbeb4 	movhi	r6,65274
    215c:	01d021b4 	movhi	r7,16518
    2160:	318e7bc4 	addi	r6,r6,14831
    2164:	39cb9084 	addi	r7,r7,11842
    2168:	000491c0 	call	491c <__gedf2>
    216c:	00bed90e 	bge	zero,r2,1cd4 <__alt_mem_onchip_memory+0xf7801cd4>
    2170:	01a20034 	movhi	r6,34816
    2174:	01df8e34 	movhi	r7,32312
    2178:	319d6704 	addi	r6,r6,30108
    217c:	39f90f04 	addi	r7,r7,-7108
    2180:	3009883a 	mov	r4,r6
    2184:	380b883a 	mov	r5,r7
    2188:	0004aec0 	call	4aec <__muldf3>
    218c:	003fe606 	br	2128 <__alt_mem_onchip_memory+0xf7802128>
    2190:	00cffc74 	movhi	r3,16369
    2194:	18e8ac44 	addi	r3,r3,-23887
    2198:	18807636 	bltu	r3,r2,2374 <expm1+0x6fc>
    219c:	01cff9b4 	movhi	r7,16358
    21a0:	39cb9084 	addi	r7,r7,11842
    21a4:	01bfb834 	movhi	r6,65248
    21a8:	90001d26 	beq	r18,zero,2220 <expm1+0x5a8>
    21ac:	00037880 	call	3788 <__adddf3>
    21b0:	04cd5e74 	movhi	r19,13689
    21b4:	04af7ab4 	movhi	r18,48618
    21b8:	053fffc4 	movi	r20,-1
    21bc:	102d883a 	mov	r22,r2
    21c0:	182b883a 	mov	r21,r3
    21c4:	9ccf1d84 	addi	r19,r19,15478
    21c8:	948e7bc4 	addi	r18,r18,14831
    21cc:	003ef906 	br	1db4 <__alt_mem_onchip_memory+0xf7801db4>
    21d0:	9809883a 	mov	r4,r19
    21d4:	900b883a 	mov	r5,r18
    21d8:	880d883a 	mov	r6,r17
    21dc:	800f883a 	mov	r7,r16
    21e0:	00052040 	call	5204 <__subdf3>
    21e4:	100d883a 	mov	r6,r2
    21e8:	180f883a 	mov	r7,r3
    21ec:	0009883a 	mov	r4,zero
    21f0:	014ffc34 	movhi	r5,16368
    21f4:	00052040 	call	5204 <__subdf3>
    21f8:	a00a953a 	slli	r5,r20,20
    21fc:	000d883a 	mov	r6,zero
    2200:	01cffc34 	movhi	r7,16368
    2204:	1009883a 	mov	r4,r2
    2208:	28cb883a 	add	r5,r5,r3
    220c:	00052040 	call	5204 <__subdf3>
    2210:	003fc506 	br	2128 <__alt_mem_onchip_memory+0xf7802128>
    2214:	0005883a 	mov	r2,zero
    2218:	00effc34 	movhi	r3,49136
    221c:	003fc206 	br	2128 <__alt_mem_onchip_memory+0xf7802128>
    2220:	00052040 	call	5204 <__subdf3>
    2224:	04cd5e74 	movhi	r19,13689
    2228:	048f7ab4 	movhi	r18,15850
    222c:	05000044 	movi	r20,1
    2230:	102d883a 	mov	r22,r2
    2234:	182b883a 	mov	r21,r3
    2238:	9ccf1d84 	addi	r19,r19,15478
    223c:	948e7bc4 	addi	r18,r18,14831
    2240:	003edc06 	br	1db4 <__alt_mem_onchip_memory+0xf7801db4>
    2244:	01a20034 	movhi	r6,34816
    2248:	01df8e34 	movhi	r7,32312
    224c:	319d6704 	addi	r6,r6,30108
    2250:	39f90f04 	addi	r7,r7,-7108
    2254:	00037880 	call	3788 <__adddf3>
    2258:	100d883a 	mov	r6,r2
    225c:	180f883a 	mov	r7,r3
    2260:	1009883a 	mov	r4,r2
    2264:	180b883a 	mov	r5,r3
    2268:	003fa906 	br	2110 <__alt_mem_onchip_memory+0xf7802110>
    226c:	000d883a 	mov	r6,zero
    2270:	01eff434 	movhi	r7,49104
    2274:	8809883a 	mov	r4,r17
    2278:	800b883a 	mov	r5,r16
    227c:	00049f80 	call	49f8 <__ledf2>
    2280:	1000460e 	bge	r2,zero,239c <expm1+0x724>
    2284:	8809883a 	mov	r4,r17
    2288:	800b883a 	mov	r5,r16
    228c:	000d883a 	mov	r6,zero
    2290:	01cff834 	movhi	r7,16352
    2294:	00037880 	call	3788 <__adddf3>
    2298:	9809883a 	mov	r4,r19
    229c:	900b883a 	mov	r5,r18
    22a0:	100d883a 	mov	r6,r2
    22a4:	180f883a 	mov	r7,r3
    22a8:	00052040 	call	5204 <__subdf3>
    22ac:	000d883a 	mov	r6,zero
    22b0:	01f00034 	movhi	r7,49152
    22b4:	1009883a 	mov	r4,r2
    22b8:	180b883a 	mov	r5,r3
    22bc:	0004aec0 	call	4aec <__muldf3>
    22c0:	003f9906 	br	2128 <__alt_mem_onchip_memory+0xf7802128>
    22c4:	01994b34 	movhi	r6,25900
    22c8:	01cffdf4 	movhi	r7,16375
    22cc:	31a0bf84 	addi	r6,r6,-32002
    22d0:	39c551c4 	addi	r7,r7,5447
    22d4:	800b883a 	mov	r5,r16
    22d8:	8809883a 	mov	r4,r17
    22dc:	0004aec0 	call	4aec <__muldf3>
    22e0:	100d883a 	mov	r6,r2
    22e4:	180f883a 	mov	r7,r3
    22e8:	014ff834 	movhi	r5,16352
    22ec:	003e9106 	br	1d34 <__alt_mem_onchip_memory+0xf7801d34>
    22f0:	980d883a 	mov	r6,r19
    22f4:	8809883a 	mov	r4,r17
    22f8:	800b883a 	mov	r5,r16
    22fc:	180f883a 	mov	r7,r3
    2300:	00052040 	call	5204 <__subdf3>
    2304:	000d883a 	mov	r6,zero
    2308:	01cff834 	movhi	r7,16352
    230c:	1009883a 	mov	r4,r2
    2310:	180b883a 	mov	r5,r3
    2314:	0004aec0 	call	4aec <__muldf3>
    2318:	000d883a 	mov	r6,zero
    231c:	01cff834 	movhi	r7,16352
    2320:	1009883a 	mov	r4,r2
    2324:	180b883a 	mov	r5,r3
    2328:	00052040 	call	5204 <__subdf3>
    232c:	003f7e06 	br	2128 <__alt_mem_onchip_memory+0xf7802128>
    2330:	00c00834 	movhi	r3,32
    2334:	1d07d83a 	sra	r3,r3,r20
    2338:	800f883a 	mov	r7,r16
    233c:	9809883a 	mov	r4,r19
    2340:	900b883a 	mov	r5,r18
    2344:	880d883a 	mov	r6,r17
    2348:	008ffc34 	movhi	r2,16368
    234c:	10e1c83a 	sub	r16,r2,r3
    2350:	00052040 	call	5204 <__subdf3>
    2354:	800b883a 	mov	r5,r16
    2358:	a020953a 	slli	r16,r20,20
    235c:	100d883a 	mov	r6,r2
    2360:	180f883a 	mov	r7,r3
    2364:	0009883a 	mov	r4,zero
    2368:	00052040 	call	5204 <__subdf3>
    236c:	80c7883a 	add	r3,r16,r3
    2370:	003f6d06 	br	2128 <__alt_mem_onchip_memory+0xf7802128>
    2374:	01994b34 	movhi	r6,25900
    2378:	01cffdf4 	movhi	r7,16375
    237c:	31a0bf84 	addi	r6,r6,-32002
    2380:	39c551c4 	addi	r7,r7,5447
    2384:	0004aec0 	call	4aec <__muldf3>
    2388:	100d883a 	mov	r6,r2
    238c:	180f883a 	mov	r7,r3
    2390:	903e671e 	bne	r18,zero,1d30 <__alt_mem_onchip_memory+0xf7801d30>
    2394:	014ff834 	movhi	r5,16352
    2398:	003e6606 	br	1d34 <__alt_mem_onchip_memory+0xf7801d34>
    239c:	980d883a 	mov	r6,r19
    23a0:	900f883a 	mov	r7,r18
    23a4:	8809883a 	mov	r4,r17
    23a8:	800b883a 	mov	r5,r16
    23ac:	00052040 	call	5204 <__subdf3>
    23b0:	100d883a 	mov	r6,r2
    23b4:	180f883a 	mov	r7,r3
    23b8:	1009883a 	mov	r4,r2
    23bc:	180b883a 	mov	r5,r3
    23c0:	00037880 	call	3788 <__adddf3>
    23c4:	000d883a 	mov	r6,zero
    23c8:	01cffc34 	movhi	r7,16368
    23cc:	1009883a 	mov	r4,r2
    23d0:	180b883a 	mov	r5,r3
    23d4:	00037880 	call	3788 <__adddf3>
    23d8:	003f5306 	br	2128 <__alt_mem_onchip_memory+0xf7802128>
    23dc:	200d883a 	mov	r6,r4
    23e0:	280f883a 	mov	r7,r5
    23e4:	00037880 	call	3788 <__adddf3>
    23e8:	003f4f06 	br	2128 <__alt_mem_onchip_memory+0xf7802128>

000023ec <fabs>:
    23ec:	00e00034 	movhi	r3,32768
    23f0:	18ffffc4 	addi	r3,r3,-1
    23f4:	2005883a 	mov	r2,r4
    23f8:	28c6703a 	and	r3,r5,r3
    23fc:	f800283a 	ret

00002400 <__fpclassifyd>:
    2400:	00a00034 	movhi	r2,32768
    2404:	10bfffc4 	addi	r2,r2,-1
    2408:	2884703a 	and	r2,r5,r2
    240c:	10000726 	beq	r2,zero,242c <__fpclassifyd+0x2c>
    2410:	00fffc34 	movhi	r3,65520
    2414:	019ff834 	movhi	r6,32736
    2418:	28c7883a 	add	r3,r5,r3
    241c:	31bfffc4 	addi	r6,r6,-1
    2420:	30c00536 	bltu	r6,r3,2438 <__fpclassifyd+0x38>
    2424:	00800104 	movi	r2,4
    2428:	f800283a 	ret
    242c:	2000021e 	bne	r4,zero,2438 <__fpclassifyd+0x38>
    2430:	00800084 	movi	r2,2
    2434:	f800283a 	ret
    2438:	00dffc34 	movhi	r3,32752
    243c:	019ff834 	movhi	r6,32736
    2440:	28cb883a 	add	r5,r5,r3
    2444:	31bfffc4 	addi	r6,r6,-1
    2448:	317ff62e 	bgeu	r6,r5,2424 <__alt_mem_onchip_memory+0xf7802424>
    244c:	01400434 	movhi	r5,16
    2450:	297fffc4 	addi	r5,r5,-1
    2454:	28800236 	bltu	r5,r2,2460 <__fpclassifyd+0x60>
    2458:	008000c4 	movi	r2,3
    245c:	f800283a 	ret
    2460:	10c00226 	beq	r2,r3,246c <__fpclassifyd+0x6c>
    2464:	0005883a 	mov	r2,zero
    2468:	f800283a 	ret
    246c:	2005003a 	cmpeq	r2,r4,zero
    2470:	f800283a 	ret

00002474 <matherr>:
    2474:	0005883a 	mov	r2,zero
    2478:	f800283a 	ret

0000247c <__addsf3>:
    247c:	defffc04 	addi	sp,sp,-16
    2480:	2004d7fa 	srli	r2,r4,31
    2484:	280cd5fa 	srli	r6,r5,23
    2488:	dc000015 	stw	r16,0(sp)
    248c:	00c02034 	movhi	r3,128
    2490:	2020d5fa 	srli	r16,r4,23
    2494:	280ed7fa 	srli	r7,r5,31
    2498:	18ffffc4 	addi	r3,r3,-1
    249c:	dc400115 	stw	r17,4(sp)
    24a0:	1908703a 	and	r4,r3,r4
    24a4:	194a703a 	and	r5,r3,r5
    24a8:	dfc00315 	stw	ra,12(sp)
    24ac:	dc800215 	stw	r18,8(sp)
    24b0:	14403fcc 	andi	r17,r2,255
    24b4:	84003fcc 	andi	r16,r16,255
    24b8:	200890fa 	slli	r4,r4,3
    24bc:	31803fcc 	andi	r6,r6,255
    24c0:	280a90fa 	slli	r5,r5,3
    24c4:	89c05026 	beq	r17,r7,2608 <__addsf3+0x18c>
    24c8:	8185c83a 	sub	r2,r16,r6
    24cc:	00807a0e 	bge	zero,r2,26b8 <__addsf3+0x23c>
    24d0:	30001e1e 	bne	r6,zero,254c <__addsf3+0xd0>
    24d4:	28006d1e 	bne	r5,zero,268c <__addsf3+0x210>
    24d8:	208001cc 	andi	r2,r4,7
    24dc:	10000426 	beq	r2,zero,24f0 <__addsf3+0x74>
    24e0:	208003cc 	andi	r2,r4,15
    24e4:	00c00104 	movi	r3,4
    24e8:	10c00126 	beq	r2,r3,24f0 <__addsf3+0x74>
    24ec:	20c9883a 	add	r4,r4,r3
    24f0:	2081002c 	andhi	r2,r4,1024
    24f4:	10003926 	beq	r2,zero,25dc <__addsf3+0x160>
    24f8:	84000044 	addi	r16,r16,1
    24fc:	00803fc4 	movi	r2,255
    2500:	80807826 	beq	r16,r2,26e4 <__addsf3+0x268>
    2504:	200891ba 	slli	r4,r4,6
    2508:	8805883a 	mov	r2,r17
    250c:	2008d27a 	srli	r4,r4,9
    2510:	84003fcc 	andi	r16,r16,255
    2514:	800695fa 	slli	r3,r16,23
    2518:	10803fcc 	andi	r2,r2,255
    251c:	04002034 	movhi	r16,128
    2520:	843fffc4 	addi	r16,r16,-1
    2524:	100497fa 	slli	r2,r2,31
    2528:	2408703a 	and	r4,r4,r16
    252c:	20e0b03a 	or	r16,r4,r3
    2530:	8084b03a 	or	r2,r16,r2
    2534:	dfc00317 	ldw	ra,12(sp)
    2538:	dc800217 	ldw	r18,8(sp)
    253c:	dc400117 	ldw	r17,4(sp)
    2540:	dc000017 	ldw	r16,0(sp)
    2544:	dec00404 	addi	sp,sp,16
    2548:	f800283a 	ret
    254c:	00c03fc4 	movi	r3,255
    2550:	80ffe126 	beq	r16,r3,24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2554:	29410034 	orhi	r5,r5,1024
    2558:	00c006c4 	movi	r3,27
    255c:	18807516 	blt	r3,r2,2734 <__addsf3+0x2b8>
    2560:	00c00804 	movi	r3,32
    2564:	1887c83a 	sub	r3,r3,r2
    2568:	28c6983a 	sll	r3,r5,r3
    256c:	288ad83a 	srl	r5,r5,r2
    2570:	1804c03a 	cmpne	r2,r3,zero
    2574:	288ab03a 	or	r5,r5,r2
    2578:	2149c83a 	sub	r4,r4,r5
    257c:	2081002c 	andhi	r2,r4,1024
    2580:	10001426 	beq	r2,zero,25d4 <__addsf3+0x158>
    2584:	04810034 	movhi	r18,1024
    2588:	94bfffc4 	addi	r18,r18,-1
    258c:	24a4703a 	and	r18,r4,r18
    2590:	9009883a 	mov	r4,r18
    2594:	0005f140 	call	5f14 <__clzsi2>
    2598:	10bffec4 	addi	r2,r2,-5
    259c:	90a4983a 	sll	r18,r18,r2
    25a0:	14005416 	blt	r2,r16,26f4 <__addsf3+0x278>
    25a4:	1405c83a 	sub	r2,r2,r16
    25a8:	11000044 	addi	r4,r2,1
    25ac:	00800804 	movi	r2,32
    25b0:	1105c83a 	sub	r2,r2,r4
    25b4:	9084983a 	sll	r2,r18,r2
    25b8:	9124d83a 	srl	r18,r18,r4
    25bc:	0021883a 	mov	r16,zero
    25c0:	1008c03a 	cmpne	r4,r2,zero
    25c4:	9108b03a 	or	r4,r18,r4
    25c8:	003fc306 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    25cc:	1000db26 	beq	r2,zero,293c <__addsf3+0x4c0>
    25d0:	1009883a 	mov	r4,r2
    25d4:	208001cc 	andi	r2,r4,7
    25d8:	103fc11e 	bne	r2,zero,24e0 <__alt_mem_onchip_memory+0xf78024e0>
    25dc:	2006d0fa 	srli	r3,r4,3
    25e0:	01003fc4 	movi	r4,255
    25e4:	8805883a 	mov	r2,r17
    25e8:	8100241e 	bne	r16,r4,267c <__addsf3+0x200>
    25ec:	18006e26 	beq	r3,zero,27a8 <__addsf3+0x32c>
    25f0:	19001034 	orhi	r4,r3,64
    25f4:	00c02034 	movhi	r3,128
    25f8:	18ffffc4 	addi	r3,r3,-1
    25fc:	043fffc4 	movi	r16,-1
    2600:	20c8703a 	and	r4,r4,r3
    2604:	003fc206 	br	2510 <__alt_mem_onchip_memory+0xf7802510>
    2608:	8187c83a 	sub	r3,r16,r6
    260c:	00c03e0e 	bge	zero,r3,2708 <__addsf3+0x28c>
    2610:	30002326 	beq	r6,zero,26a0 <__addsf3+0x224>
    2614:	01803fc4 	movi	r6,255
    2618:	81bfaf26 	beq	r16,r6,24d8 <__alt_mem_onchip_memory+0xf78024d8>
    261c:	29410034 	orhi	r5,r5,1024
    2620:	018006c4 	movi	r6,27
    2624:	30c07416 	blt	r6,r3,27f8 <__addsf3+0x37c>
    2628:	01800804 	movi	r6,32
    262c:	30cdc83a 	sub	r6,r6,r3
    2630:	298c983a 	sll	r6,r5,r6
    2634:	28cad83a 	srl	r5,r5,r3
    2638:	3006c03a 	cmpne	r3,r6,zero
    263c:	28cab03a 	or	r5,r5,r3
    2640:	2149883a 	add	r4,r4,r5
    2644:	20c1002c 	andhi	r3,r4,1024
    2648:	183fe226 	beq	r3,zero,25d4 <__alt_mem_onchip_memory+0xf78025d4>
    264c:	84000044 	addi	r16,r16,1
    2650:	00c03fc4 	movi	r3,255
    2654:	80c05426 	beq	r16,r3,27a8 <__addsf3+0x32c>
    2658:	00bf0034 	movhi	r2,64512
    265c:	10bfffc4 	addi	r2,r2,-1
    2660:	20c0004c 	andi	r3,r4,1
    2664:	2088703a 	and	r4,r4,r2
    2668:	2008d07a 	srli	r4,r4,1
    266c:	20c8b03a 	or	r4,r4,r3
    2670:	003f9906 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2674:	0007883a 	mov	r3,zero
    2678:	0005883a 	mov	r2,zero
    267c:	01002034 	movhi	r4,128
    2680:	213fffc4 	addi	r4,r4,-1
    2684:	1908703a 	and	r4,r3,r4
    2688:	003fa106 	br	2510 <__alt_mem_onchip_memory+0xf7802510>
    268c:	10bfffc4 	addi	r2,r2,-1
    2690:	103fb926 	beq	r2,zero,2578 <__alt_mem_onchip_memory+0xf7802578>
    2694:	00c03fc4 	movi	r3,255
    2698:	80ffaf1e 	bne	r16,r3,2558 <__alt_mem_onchip_memory+0xf7802558>
    269c:	003f8e06 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    26a0:	283f8d26 	beq	r5,zero,24d8 <__alt_mem_onchip_memory+0xf78024d8>
    26a4:	18ffffc4 	addi	r3,r3,-1
    26a8:	183fe526 	beq	r3,zero,2640 <__alt_mem_onchip_memory+0xf7802640>
    26ac:	01803fc4 	movi	r6,255
    26b0:	81bfdb1e 	bne	r16,r6,2620 <__alt_mem_onchip_memory+0xf7802620>
    26b4:	003f8806 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    26b8:	1000201e 	bne	r2,zero,273c <__addsf3+0x2c0>
    26bc:	80800044 	addi	r2,r16,1
    26c0:	10803fcc 	andi	r2,r2,255
    26c4:	01800044 	movi	r6,1
    26c8:	3080450e 	bge	r6,r2,27e0 <__addsf3+0x364>
    26cc:	2165c83a 	sub	r18,r4,r5
    26d0:	90c1002c 	andhi	r3,r18,1024
    26d4:	18002b26 	beq	r3,zero,2784 <__addsf3+0x308>
    26d8:	2925c83a 	sub	r18,r5,r4
    26dc:	3823883a 	mov	r17,r7
    26e0:	003fab06 	br	2590 <__alt_mem_onchip_memory+0xf7802590>
    26e4:	8805883a 	mov	r2,r17
    26e8:	043fffc4 	movi	r16,-1
    26ec:	0009883a 	mov	r4,zero
    26f0:	003f8706 	br	2510 <__alt_mem_onchip_memory+0xf7802510>
    26f4:	013f0034 	movhi	r4,64512
    26f8:	213fffc4 	addi	r4,r4,-1
    26fc:	80a1c83a 	sub	r16,r16,r2
    2700:	9108703a 	and	r4,r18,r4
    2704:	003f7406 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2708:	1800411e 	bne	r3,zero,2810 <__addsf3+0x394>
    270c:	80c00044 	addi	r3,r16,1
    2710:	19c03fcc 	andi	r7,r3,255
    2714:	01800044 	movi	r6,1
    2718:	31c0260e 	bge	r6,r7,27b4 <__addsf3+0x338>
    271c:	01803fc4 	movi	r6,255
    2720:	19802126 	beq	r3,r6,27a8 <__addsf3+0x32c>
    2724:	2149883a 	add	r4,r4,r5
    2728:	2008d07a 	srli	r4,r4,1
    272c:	1821883a 	mov	r16,r3
    2730:	003f6906 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2734:	01400044 	movi	r5,1
    2738:	003f8f06 	br	2578 <__alt_mem_onchip_memory+0xf7802578>
    273c:	8000151e 	bne	r16,zero,2794 <__addsf3+0x318>
    2740:	20002f26 	beq	r4,zero,2800 <__addsf3+0x384>
    2744:	0084303a 	nor	r2,zero,r2
    2748:	10000a26 	beq	r2,zero,2774 <__addsf3+0x2f8>
    274c:	00c03fc4 	movi	r3,255
    2750:	30c02b26 	beq	r6,r3,2800 <__addsf3+0x384>
    2754:	00c006c4 	movi	r3,27
    2758:	18806d16 	blt	r3,r2,2910 <__addsf3+0x494>
    275c:	00c00804 	movi	r3,32
    2760:	1887c83a 	sub	r3,r3,r2
    2764:	20c6983a 	sll	r3,r4,r3
    2768:	2084d83a 	srl	r2,r4,r2
    276c:	1808c03a 	cmpne	r4,r3,zero
    2770:	1108b03a 	or	r4,r2,r4
    2774:	2909c83a 	sub	r4,r5,r4
    2778:	3021883a 	mov	r16,r6
    277c:	3823883a 	mov	r17,r7
    2780:	003f7e06 	br	257c <__alt_mem_onchip_memory+0xf780257c>
    2784:	903f821e 	bne	r18,zero,2590 <__alt_mem_onchip_memory+0xf7802590>
    2788:	0005883a 	mov	r2,zero
    278c:	0021883a 	mov	r16,zero
    2790:	003fba06 	br	267c <__alt_mem_onchip_memory+0xf780267c>
    2794:	00c03fc4 	movi	r3,255
    2798:	30c01926 	beq	r6,r3,2800 <__addsf3+0x384>
    279c:	0085c83a 	sub	r2,zero,r2
    27a0:	21010034 	orhi	r4,r4,1024
    27a4:	003feb06 	br	2754 <__alt_mem_onchip_memory+0xf7802754>
    27a8:	043fffc4 	movi	r16,-1
    27ac:	0009883a 	mov	r4,zero
    27b0:	003f5706 	br	2510 <__alt_mem_onchip_memory+0xf7802510>
    27b4:	80004a1e 	bne	r16,zero,28e0 <__addsf3+0x464>
    27b8:	20005926 	beq	r4,zero,2920 <__addsf3+0x4a4>
    27bc:	283f4626 	beq	r5,zero,24d8 <__alt_mem_onchip_memory+0xf78024d8>
    27c0:	2149883a 	add	r4,r4,r5
    27c4:	2081002c 	andhi	r2,r4,1024
    27c8:	103f8226 	beq	r2,zero,25d4 <__alt_mem_onchip_memory+0xf78025d4>
    27cc:	00bf0034 	movhi	r2,64512
    27d0:	10bfffc4 	addi	r2,r2,-1
    27d4:	3021883a 	mov	r16,r6
    27d8:	2088703a 	and	r4,r4,r2
    27dc:	003f3e06 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    27e0:	8000121e 	bne	r16,zero,282c <__addsf3+0x3b0>
    27e4:	2000261e 	bne	r4,zero,2880 <__addsf3+0x404>
    27e8:	283fa226 	beq	r5,zero,2674 <__alt_mem_onchip_memory+0xf7802674>
    27ec:	2809883a 	mov	r4,r5
    27f0:	3823883a 	mov	r17,r7
    27f4:	003f3806 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    27f8:	01400044 	movi	r5,1
    27fc:	003f9006 	br	2640 <__alt_mem_onchip_memory+0xf7802640>
    2800:	2809883a 	mov	r4,r5
    2804:	3021883a 	mov	r16,r6
    2808:	3823883a 	mov	r17,r7
    280c:	003f3206 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2810:	80000c1e 	bne	r16,zero,2844 <__addsf3+0x3c8>
    2814:	20002f26 	beq	r4,zero,28d4 <__addsf3+0x458>
    2818:	00c6303a 	nor	r3,zero,r3
    281c:	18002b1e 	bne	r3,zero,28cc <__addsf3+0x450>
    2820:	2149883a 	add	r4,r4,r5
    2824:	3021883a 	mov	r16,r6
    2828:	003f8606 	br	2644 <__alt_mem_onchip_memory+0xf7802644>
    282c:	20001b1e 	bne	r4,zero,289c <__addsf3+0x420>
    2830:	28003926 	beq	r5,zero,2918 <__addsf3+0x49c>
    2834:	2809883a 	mov	r4,r5
    2838:	3823883a 	mov	r17,r7
    283c:	04003fc4 	movi	r16,255
    2840:	003f2506 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2844:	01c03fc4 	movi	r7,255
    2848:	31c02226 	beq	r6,r7,28d4 <__addsf3+0x458>
    284c:	00c7c83a 	sub	r3,zero,r3
    2850:	21010034 	orhi	r4,r4,1024
    2854:	01c006c4 	movi	r7,27
    2858:	38c03616 	blt	r7,r3,2934 <__addsf3+0x4b8>
    285c:	01c00804 	movi	r7,32
    2860:	38cfc83a 	sub	r7,r7,r3
    2864:	21ce983a 	sll	r7,r4,r7
    2868:	20c6d83a 	srl	r3,r4,r3
    286c:	3808c03a 	cmpne	r4,r7,zero
    2870:	1906b03a 	or	r3,r3,r4
    2874:	1949883a 	add	r4,r3,r5
    2878:	3021883a 	mov	r16,r6
    287c:	003f7106 	br	2644 <__alt_mem_onchip_memory+0xf7802644>
    2880:	283f1526 	beq	r5,zero,24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2884:	2145c83a 	sub	r2,r4,r5
    2888:	10c1002c 	andhi	r3,r2,1024
    288c:	183f4f26 	beq	r3,zero,25cc <__alt_mem_onchip_memory+0xf78025cc>
    2890:	2909c83a 	sub	r4,r5,r4
    2894:	3823883a 	mov	r17,r7
    2898:	003f0f06 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    289c:	28001a26 	beq	r5,zero,2908 <__addsf3+0x48c>
    28a0:	2008d0fa 	srli	r4,r4,3
    28a4:	2080102c 	andhi	r2,r4,64
    28a8:	10000526 	beq	r2,zero,28c0 <__addsf3+0x444>
    28ac:	280ad0fa 	srli	r5,r5,3
    28b0:	2880102c 	andhi	r2,r5,64
    28b4:	1000021e 	bne	r2,zero,28c0 <__addsf3+0x444>
    28b8:	2809883a 	mov	r4,r5
    28bc:	3823883a 	mov	r17,r7
    28c0:	200890fa 	slli	r4,r4,3
    28c4:	04003fc4 	movi	r16,255
    28c8:	003f0306 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    28cc:	01c03fc4 	movi	r7,255
    28d0:	31ffe01e 	bne	r6,r7,2854 <__alt_mem_onchip_memory+0xf7802854>
    28d4:	2809883a 	mov	r4,r5
    28d8:	3021883a 	mov	r16,r6
    28dc:	003efe06 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    28e0:	20001126 	beq	r4,zero,2928 <__addsf3+0x4ac>
    28e4:	28000826 	beq	r5,zero,2908 <__addsf3+0x48c>
    28e8:	2008d0fa 	srli	r4,r4,3
    28ec:	2080102c 	andhi	r2,r4,64
    28f0:	103ff326 	beq	r2,zero,28c0 <__alt_mem_onchip_memory+0xf78028c0>
    28f4:	280ad0fa 	srli	r5,r5,3
    28f8:	2880102c 	andhi	r2,r5,64
    28fc:	103ff01e 	bne	r2,zero,28c0 <__alt_mem_onchip_memory+0xf78028c0>
    2900:	2809883a 	mov	r4,r5
    2904:	003fee06 	br	28c0 <__alt_mem_onchip_memory+0xf78028c0>
    2908:	04003fc4 	movi	r16,255
    290c:	003ef206 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2910:	01000044 	movi	r4,1
    2914:	003f9706 	br	2774 <__alt_mem_onchip_memory+0xf7802774>
    2918:	0005883a 	mov	r2,zero
    291c:	003f3406 	br	25f0 <__alt_mem_onchip_memory+0xf78025f0>
    2920:	2809883a 	mov	r4,r5
    2924:	003eec06 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2928:	2809883a 	mov	r4,r5
    292c:	04003fc4 	movi	r16,255
    2930:	003ee906 	br	24d8 <__alt_mem_onchip_memory+0xf78024d8>
    2934:	00c00044 	movi	r3,1
    2938:	003fce06 	br	2874 <__alt_mem_onchip_memory+0xf7802874>
    293c:	0005883a 	mov	r2,zero
    2940:	003f4e06 	br	267c <__alt_mem_onchip_memory+0xf780267c>

00002944 <__divsf3>:
    2944:	defff504 	addi	sp,sp,-44
    2948:	200cd5fa 	srli	r6,r4,23
    294c:	dcc00415 	stw	r19,16(sp)
    2950:	2026d7fa 	srli	r19,r4,31
    2954:	00c02034 	movhi	r3,128
    2958:	dd800715 	stw	r22,28(sp)
    295c:	dd000515 	stw	r20,20(sp)
    2960:	dc800315 	stw	r18,12(sp)
    2964:	18ffffc4 	addi	r3,r3,-1
    2968:	dfc00a15 	stw	ra,40(sp)
    296c:	df000915 	stw	fp,36(sp)
    2970:	ddc00815 	stw	r23,32(sp)
    2974:	dd400615 	stw	r21,24(sp)
    2978:	dc400215 	stw	r17,8(sp)
    297c:	dc000115 	stw	r16,4(sp)
    2980:	35003fcc 	andi	r20,r6,255
    2984:	1924703a 	and	r18,r3,r4
    2988:	9d803fcc 	andi	r22,r19,255
    298c:	a0005226 	beq	r20,zero,2ad8 <__divsf3+0x194>
    2990:	00803fc4 	movi	r2,255
    2994:	a0802e26 	beq	r20,r2,2a50 <__divsf3+0x10c>
    2998:	91002034 	orhi	r4,r18,128
    299c:	202490fa 	slli	r18,r4,3
    29a0:	a53fe044 	addi	r20,r20,-127
    29a4:	0021883a 	mov	r16,zero
    29a8:	002f883a 	mov	r23,zero
    29ac:	280cd5fa 	srli	r6,r5,23
    29b0:	282ad7fa 	srli	r21,r5,31
    29b4:	00c02034 	movhi	r3,128
    29b8:	18ffffc4 	addi	r3,r3,-1
    29bc:	31803fcc 	andi	r6,r6,255
    29c0:	1962703a 	and	r17,r3,r5
    29c4:	af003fcc 	andi	fp,r21,255
    29c8:	30004a26 	beq	r6,zero,2af4 <__divsf3+0x1b0>
    29cc:	00803fc4 	movi	r2,255
    29d0:	30804526 	beq	r6,r2,2ae8 <__divsf3+0x1a4>
    29d4:	89402034 	orhi	r5,r17,128
    29d8:	282290fa 	slli	r17,r5,3
    29dc:	31bfe044 	addi	r6,r6,-127
    29e0:	000b883a 	mov	r5,zero
    29e4:	2c20b03a 	or	r16,r5,r16
    29e8:	802090ba 	slli	r16,r16,2
    29ec:	00800034 	movhi	r2,0
    29f0:	108a8404 	addi	r2,r2,10768
    29f4:	80a1883a 	add	r16,r16,r2
    29f8:	81000017 	ldw	r4,0(r16)
    29fc:	9d46f03a 	xor	r3,r19,r21
    2a00:	180f883a 	mov	r7,r3
    2a04:	18803fcc 	andi	r2,r3,255
    2a08:	a18dc83a 	sub	r6,r20,r6
    2a0c:	2000683a 	jmp	r4
    2a10:	00002bf4 	movhi	zero,175
    2a14:	00002a78 	rdprs	zero,zero,169
    2a18:	00002be8 	cmpgeui	zero,zero,175
    2a1c:	00002a64 	muli	zero,zero,169
    2a20:	00002be8 	cmpgeui	zero,zero,175
    2a24:	00002bc0 	call	2bc <print_array+0x2c>
    2a28:	00002be8 	cmpgeui	zero,zero,175
    2a2c:	00002a64 	muli	zero,zero,169
    2a30:	00002a78 	rdprs	zero,zero,169
    2a34:	00002a78 	rdprs	zero,zero,169
    2a38:	00002bc0 	call	2bc <print_array+0x2c>
    2a3c:	00002a64 	muli	zero,zero,169
    2a40:	00002cd4 	movui	zero,179
    2a44:	00002cd4 	movui	zero,179
    2a48:	00002cd4 	movui	zero,179
    2a4c:	00002c88 	cmpgei	zero,zero,178
    2a50:	9000581e 	bne	r18,zero,2bb4 <__divsf3+0x270>
    2a54:	04000204 	movi	r16,8
    2a58:	05c00084 	movi	r23,2
    2a5c:	003fd306 	br	29ac <__alt_mem_onchip_memory+0xf78029ac>
    2a60:	0023883a 	mov	r17,zero
    2a64:	e02d883a 	mov	r22,fp
    2a68:	282f883a 	mov	r23,r5
    2a6c:	00800084 	movi	r2,2
    2a70:	b8808f1e 	bne	r23,r2,2cb0 <__divsf3+0x36c>
    2a74:	b005883a 	mov	r2,r22
    2a78:	11c0004c 	andi	r7,r2,1
    2a7c:	013fffc4 	movi	r4,-1
    2a80:	000d883a 	mov	r6,zero
    2a84:	21003fcc 	andi	r4,r4,255
    2a88:	200895fa 	slli	r4,r4,23
    2a8c:	38803fcc 	andi	r2,r7,255
    2a90:	00c02034 	movhi	r3,128
    2a94:	100497fa 	slli	r2,r2,31
    2a98:	18ffffc4 	addi	r3,r3,-1
    2a9c:	30c6703a 	and	r3,r6,r3
    2aa0:	1906b03a 	or	r3,r3,r4
    2aa4:	1884b03a 	or	r2,r3,r2
    2aa8:	dfc00a17 	ldw	ra,40(sp)
    2aac:	df000917 	ldw	fp,36(sp)
    2ab0:	ddc00817 	ldw	r23,32(sp)
    2ab4:	dd800717 	ldw	r22,28(sp)
    2ab8:	dd400617 	ldw	r21,24(sp)
    2abc:	dd000517 	ldw	r20,20(sp)
    2ac0:	dcc00417 	ldw	r19,16(sp)
    2ac4:	dc800317 	ldw	r18,12(sp)
    2ac8:	dc400217 	ldw	r17,8(sp)
    2acc:	dc000117 	ldw	r16,4(sp)
    2ad0:	dec00b04 	addi	sp,sp,44
    2ad4:	f800283a 	ret
    2ad8:	90002b1e 	bne	r18,zero,2b88 <__divsf3+0x244>
    2adc:	04000104 	movi	r16,4
    2ae0:	05c00044 	movi	r23,1
    2ae4:	003fb106 	br	29ac <__alt_mem_onchip_memory+0xf78029ac>
    2ae8:	8800251e 	bne	r17,zero,2b80 <__divsf3+0x23c>
    2aec:	01400084 	movi	r5,2
    2af0:	00000206 	br	2afc <__divsf3+0x1b8>
    2af4:	88001a1e 	bne	r17,zero,2b60 <__divsf3+0x21c>
    2af8:	01400044 	movi	r5,1
    2afc:	8160b03a 	or	r16,r16,r5
    2b00:	802090ba 	slli	r16,r16,2
    2b04:	00c00034 	movhi	r3,0
    2b08:	18cac804 	addi	r3,r3,11040
    2b0c:	80e1883a 	add	r16,r16,r3
    2b10:	80c00017 	ldw	r3,0(r16)
    2b14:	9d44f03a 	xor	r2,r19,r21
    2b18:	a18dc83a 	sub	r6,r20,r6
    2b1c:	1800683a 	jmp	r3
    2b20:	00002a78 	rdprs	zero,zero,169
    2b24:	00002a78 	rdprs	zero,zero,169
    2b28:	00002cc4 	movi	zero,179
    2b2c:	00002a60 	cmpeqi	zero,zero,169
    2b30:	00002cc4 	movi	zero,179
    2b34:	00002bc0 	call	2bc <print_array+0x2c>
    2b38:	00002cc4 	movi	zero,179
    2b3c:	00002a60 	cmpeqi	zero,zero,169
    2b40:	00002a78 	rdprs	zero,zero,169
    2b44:	00002a78 	rdprs	zero,zero,169
    2b48:	00002bc0 	call	2bc <print_array+0x2c>
    2b4c:	00002a60 	cmpeqi	zero,zero,169
    2b50:	00002cd4 	movui	zero,179
    2b54:	00002cd4 	movui	zero,179
    2b58:	00002cd4 	movui	zero,179
    2b5c:	00002cec 	andhi	zero,zero,179
    2b60:	8809883a 	mov	r4,r17
    2b64:	0005f140 	call	5f14 <__clzsi2>
    2b68:	10fffec4 	addi	r3,r2,-5
    2b6c:	10801d84 	addi	r2,r2,118
    2b70:	88e2983a 	sll	r17,r17,r3
    2b74:	008dc83a 	sub	r6,zero,r2
    2b78:	000b883a 	mov	r5,zero
    2b7c:	003f9906 	br	29e4 <__alt_mem_onchip_memory+0xf78029e4>
    2b80:	014000c4 	movi	r5,3
    2b84:	003f9706 	br	29e4 <__alt_mem_onchip_memory+0xf78029e4>
    2b88:	9009883a 	mov	r4,r18
    2b8c:	d9400015 	stw	r5,0(sp)
    2b90:	0005f140 	call	5f14 <__clzsi2>
    2b94:	10fffec4 	addi	r3,r2,-5
    2b98:	11801d84 	addi	r6,r2,118
    2b9c:	90e4983a 	sll	r18,r18,r3
    2ba0:	01a9c83a 	sub	r20,zero,r6
    2ba4:	0021883a 	mov	r16,zero
    2ba8:	002f883a 	mov	r23,zero
    2bac:	d9400017 	ldw	r5,0(sp)
    2bb0:	003f7e06 	br	29ac <__alt_mem_onchip_memory+0xf78029ac>
    2bb4:	04000304 	movi	r16,12
    2bb8:	05c000c4 	movi	r23,3
    2bbc:	003f7b06 	br	29ac <__alt_mem_onchip_memory+0xf78029ac>
    2bc0:	01802034 	movhi	r6,128
    2bc4:	000f883a 	mov	r7,zero
    2bc8:	31bfffc4 	addi	r6,r6,-1
    2bcc:	013fffc4 	movi	r4,-1
    2bd0:	003fac06 	br	2a84 <__alt_mem_onchip_memory+0xf7802a84>
    2bd4:	01400044 	movi	r5,1
    2bd8:	2909c83a 	sub	r4,r5,r4
    2bdc:	00c006c4 	movi	r3,27
    2be0:	19004b0e 	bge	r3,r4,2d10 <__divsf3+0x3cc>
    2be4:	114e703a 	and	r7,r2,r5
    2be8:	0009883a 	mov	r4,zero
    2bec:	000d883a 	mov	r6,zero
    2bf0:	003fa406 	br	2a84 <__alt_mem_onchip_memory+0xf7802a84>
    2bf4:	9006917a 	slli	r3,r18,5
    2bf8:	8822917a 	slli	r17,r17,5
    2bfc:	1c40372e 	bgeu	r3,r17,2cdc <__divsf3+0x398>
    2c00:	31bfffc4 	addi	r6,r6,-1
    2c04:	010006c4 	movi	r4,27
    2c08:	000b883a 	mov	r5,zero
    2c0c:	180f883a 	mov	r7,r3
    2c10:	294b883a 	add	r5,r5,r5
    2c14:	18c7883a 	add	r3,r3,r3
    2c18:	38000116 	blt	r7,zero,2c20 <__divsf3+0x2dc>
    2c1c:	1c400236 	bltu	r3,r17,2c28 <__divsf3+0x2e4>
    2c20:	1c47c83a 	sub	r3,r3,r17
    2c24:	29400054 	ori	r5,r5,1
    2c28:	213fffc4 	addi	r4,r4,-1
    2c2c:	203ff71e 	bne	r4,zero,2c0c <__alt_mem_onchip_memory+0xf7802c0c>
    2c30:	1806c03a 	cmpne	r3,r3,zero
    2c34:	1962b03a 	or	r17,r3,r5
    2c38:	31001fc4 	addi	r4,r6,127
    2c3c:	013fe50e 	bge	zero,r4,2bd4 <__alt_mem_onchip_memory+0xf7802bd4>
    2c40:	88c001cc 	andi	r3,r17,7
    2c44:	18000426 	beq	r3,zero,2c58 <__divsf3+0x314>
    2c48:	88c003cc 	andi	r3,r17,15
    2c4c:	01400104 	movi	r5,4
    2c50:	19400126 	beq	r3,r5,2c58 <__divsf3+0x314>
    2c54:	8963883a 	add	r17,r17,r5
    2c58:	88c2002c 	andhi	r3,r17,2048
    2c5c:	18000426 	beq	r3,zero,2c70 <__divsf3+0x32c>
    2c60:	00fe0034 	movhi	r3,63488
    2c64:	18ffffc4 	addi	r3,r3,-1
    2c68:	31002004 	addi	r4,r6,128
    2c6c:	88e2703a 	and	r17,r17,r3
    2c70:	00c03f84 	movi	r3,254
    2c74:	193f8016 	blt	r3,r4,2a78 <__alt_mem_onchip_memory+0xf7802a78>
    2c78:	880c91ba 	slli	r6,r17,6
    2c7c:	11c0004c 	andi	r7,r2,1
    2c80:	300cd27a 	srli	r6,r6,9
    2c84:	003f7f06 	br	2a84 <__alt_mem_onchip_memory+0xf7802a84>
    2c88:	9080102c 	andhi	r2,r18,64
    2c8c:	10000226 	beq	r2,zero,2c98 <__divsf3+0x354>
    2c90:	8880102c 	andhi	r2,r17,64
    2c94:	10001826 	beq	r2,zero,2cf8 <__divsf3+0x3b4>
    2c98:	00802034 	movhi	r2,128
    2c9c:	91801034 	orhi	r6,r18,64
    2ca0:	10bfffc4 	addi	r2,r2,-1
    2ca4:	980f883a 	mov	r7,r19
    2ca8:	308c703a 	and	r6,r6,r2
    2cac:	003fc706 	br	2bcc <__alt_mem_onchip_memory+0xf7802bcc>
    2cb0:	008000c4 	movi	r2,3
    2cb4:	b8802d26 	beq	r23,r2,2d6c <__divsf3+0x428>
    2cb8:	00c00044 	movi	r3,1
    2cbc:	b005883a 	mov	r2,r22
    2cc0:	b8ffdd1e 	bne	r23,r3,2c38 <__alt_mem_onchip_memory+0xf7802c38>
    2cc4:	11c0004c 	andi	r7,r2,1
    2cc8:	0009883a 	mov	r4,zero
    2ccc:	000d883a 	mov	r6,zero
    2cd0:	003f6c06 	br	2a84 <__alt_mem_onchip_memory+0xf7802a84>
    2cd4:	9023883a 	mov	r17,r18
    2cd8:	003f6406 	br	2a6c <__alt_mem_onchip_memory+0xf7802a6c>
    2cdc:	1c47c83a 	sub	r3,r3,r17
    2ce0:	01000684 	movi	r4,26
    2ce4:	01400044 	movi	r5,1
    2ce8:	003fc806 	br	2c0c <__alt_mem_onchip_memory+0xf7802c0c>
    2cec:	9080102c 	andhi	r2,r18,64
    2cf0:	103fe926 	beq	r2,zero,2c98 <__alt_mem_onchip_memory+0xf7802c98>
    2cf4:	0023883a 	mov	r17,zero
    2cf8:	00802034 	movhi	r2,128
    2cfc:	89801034 	orhi	r6,r17,64
    2d00:	10bfffc4 	addi	r2,r2,-1
    2d04:	a80f883a 	mov	r7,r21
    2d08:	308c703a 	and	r6,r6,r2
    2d0c:	003faf06 	br	2bcc <__alt_mem_onchip_memory+0xf7802bcc>
    2d10:	01c00804 	movi	r7,32
    2d14:	390fc83a 	sub	r7,r7,r4
    2d18:	89ce983a 	sll	r7,r17,r7
    2d1c:	890ad83a 	srl	r5,r17,r4
    2d20:	380ec03a 	cmpne	r7,r7,zero
    2d24:	29cab03a 	or	r5,r5,r7
    2d28:	28c001cc 	andi	r3,r5,7
    2d2c:	18000426 	beq	r3,zero,2d40 <__divsf3+0x3fc>
    2d30:	28c003cc 	andi	r3,r5,15
    2d34:	01000104 	movi	r4,4
    2d38:	19000126 	beq	r3,r4,2d40 <__divsf3+0x3fc>
    2d3c:	290b883a 	add	r5,r5,r4
    2d40:	28c1002c 	andhi	r3,r5,1024
    2d44:	18000426 	beq	r3,zero,2d58 <__divsf3+0x414>
    2d48:	11c0004c 	andi	r7,r2,1
    2d4c:	01000044 	movi	r4,1
    2d50:	000d883a 	mov	r6,zero
    2d54:	003f4b06 	br	2a84 <__alt_mem_onchip_memory+0xf7802a84>
    2d58:	280a91ba 	slli	r5,r5,6
    2d5c:	11c0004c 	andi	r7,r2,1
    2d60:	0009883a 	mov	r4,zero
    2d64:	280cd27a 	srli	r6,r5,9
    2d68:	003f4606 	br	2a84 <__alt_mem_onchip_memory+0xf7802a84>
    2d6c:	00802034 	movhi	r2,128
    2d70:	89801034 	orhi	r6,r17,64
    2d74:	10bfffc4 	addi	r2,r2,-1
    2d78:	b00f883a 	mov	r7,r22
    2d7c:	308c703a 	and	r6,r6,r2
    2d80:	003f9206 	br	2bcc <__alt_mem_onchip_memory+0xf7802bcc>

00002d84 <__mulsf3>:
    2d84:	defff504 	addi	sp,sp,-44
    2d88:	dc000115 	stw	r16,4(sp)
    2d8c:	2020d5fa 	srli	r16,r4,23
    2d90:	dd400615 	stw	r21,24(sp)
    2d94:	202ad7fa 	srli	r21,r4,31
    2d98:	dc800315 	stw	r18,12(sp)
    2d9c:	04802034 	movhi	r18,128
    2da0:	df000915 	stw	fp,36(sp)
    2da4:	dd000515 	stw	r20,20(sp)
    2da8:	94bfffc4 	addi	r18,r18,-1
    2dac:	dfc00a15 	stw	ra,40(sp)
    2db0:	ddc00815 	stw	r23,32(sp)
    2db4:	dd800715 	stw	r22,28(sp)
    2db8:	dcc00415 	stw	r19,16(sp)
    2dbc:	dc400215 	stw	r17,8(sp)
    2dc0:	84003fcc 	andi	r16,r16,255
    2dc4:	9124703a 	and	r18,r18,r4
    2dc8:	a829883a 	mov	r20,r21
    2dcc:	af003fcc 	andi	fp,r21,255
    2dd0:	80005426 	beq	r16,zero,2f24 <__mulsf3+0x1a0>
    2dd4:	00803fc4 	movi	r2,255
    2dd8:	80802f26 	beq	r16,r2,2e98 <__mulsf3+0x114>
    2ddc:	91002034 	orhi	r4,r18,128
    2de0:	202490fa 	slli	r18,r4,3
    2de4:	843fe044 	addi	r16,r16,-127
    2de8:	0023883a 	mov	r17,zero
    2dec:	002f883a 	mov	r23,zero
    2df0:	2804d5fa 	srli	r2,r5,23
    2df4:	282cd7fa 	srli	r22,r5,31
    2df8:	01002034 	movhi	r4,128
    2dfc:	213fffc4 	addi	r4,r4,-1
    2e00:	10803fcc 	andi	r2,r2,255
    2e04:	2166703a 	and	r19,r4,r5
    2e08:	b1803fcc 	andi	r6,r22,255
    2e0c:	10004c26 	beq	r2,zero,2f40 <__mulsf3+0x1bc>
    2e10:	00c03fc4 	movi	r3,255
    2e14:	10c04726 	beq	r2,r3,2f34 <__mulsf3+0x1b0>
    2e18:	99002034 	orhi	r4,r19,128
    2e1c:	202690fa 	slli	r19,r4,3
    2e20:	10bfe044 	addi	r2,r2,-127
    2e24:	0007883a 	mov	r3,zero
    2e28:	80a1883a 	add	r16,r16,r2
    2e2c:	010003c4 	movi	r4,15
    2e30:	1c44b03a 	or	r2,r3,r17
    2e34:	b56af03a 	xor	r21,r22,r21
    2e38:	81c00044 	addi	r7,r16,1
    2e3c:	20806b36 	bltu	r4,r2,2fec <__mulsf3+0x268>
    2e40:	100490ba 	slli	r2,r2,2
    2e44:	01000034 	movhi	r4,0
    2e48:	210b9604 	addi	r4,r4,11864
    2e4c:	1105883a 	add	r2,r2,r4
    2e50:	10800017 	ldw	r2,0(r2)
    2e54:	1000683a 	jmp	r2
    2e58:	00002fec 	andhi	zero,zero,191
    2e5c:	00002eac 	andhi	zero,zero,186
    2e60:	00002eac 	andhi	zero,zero,186
    2e64:	00002ea8 	cmpgeui	zero,zero,186
    2e68:	00002fd0 	cmplti	zero,zero,191
    2e6c:	00002fd0 	cmplti	zero,zero,191
    2e70:	00002fbc 	xorhi	zero,zero,190
    2e74:	00002ea8 	cmpgeui	zero,zero,186
    2e78:	00002fd0 	cmplti	zero,zero,191
    2e7c:	00002fbc 	xorhi	zero,zero,190
    2e80:	00002fd0 	cmplti	zero,zero,191
    2e84:	00002ea8 	cmpgeui	zero,zero,186
    2e88:	00002fdc 	xori	zero,zero,191
    2e8c:	00002fdc 	xori	zero,zero,191
    2e90:	00002fdc 	xori	zero,zero,191
    2e94:	000030b8 	rdprs	zero,zero,194
    2e98:	90003b1e 	bne	r18,zero,2f88 <__mulsf3+0x204>
    2e9c:	04400204 	movi	r17,8
    2ea0:	05c00084 	movi	r23,2
    2ea4:	003fd206 	br	2df0 <__alt_mem_onchip_memory+0xf7802df0>
    2ea8:	302b883a 	mov	r21,r6
    2eac:	00800084 	movi	r2,2
    2eb0:	18802626 	beq	r3,r2,2f4c <__mulsf3+0x1c8>
    2eb4:	008000c4 	movi	r2,3
    2eb8:	1880ab26 	beq	r3,r2,3168 <__mulsf3+0x3e4>
    2ebc:	00800044 	movi	r2,1
    2ec0:	1880a21e 	bne	r3,r2,314c <__mulsf3+0x3c8>
    2ec4:	a829883a 	mov	r20,r21
    2ec8:	0007883a 	mov	r3,zero
    2ecc:	0009883a 	mov	r4,zero
    2ed0:	18803fcc 	andi	r2,r3,255
    2ed4:	100695fa 	slli	r3,r2,23
    2ed8:	a0803fcc 	andi	r2,r20,255
    2edc:	100a97fa 	slli	r5,r2,31
    2ee0:	00802034 	movhi	r2,128
    2ee4:	10bfffc4 	addi	r2,r2,-1
    2ee8:	2084703a 	and	r2,r4,r2
    2eec:	10c4b03a 	or	r2,r2,r3
    2ef0:	1144b03a 	or	r2,r2,r5
    2ef4:	dfc00a17 	ldw	ra,40(sp)
    2ef8:	df000917 	ldw	fp,36(sp)
    2efc:	ddc00817 	ldw	r23,32(sp)
    2f00:	dd800717 	ldw	r22,28(sp)
    2f04:	dd400617 	ldw	r21,24(sp)
    2f08:	dd000517 	ldw	r20,20(sp)
    2f0c:	dcc00417 	ldw	r19,16(sp)
    2f10:	dc800317 	ldw	r18,12(sp)
    2f14:	dc400217 	ldw	r17,8(sp)
    2f18:	dc000117 	ldw	r16,4(sp)
    2f1c:	dec00b04 	addi	sp,sp,44
    2f20:	f800283a 	ret
    2f24:	90000d1e 	bne	r18,zero,2f5c <__mulsf3+0x1d8>
    2f28:	04400104 	movi	r17,4
    2f2c:	05c00044 	movi	r23,1
    2f30:	003faf06 	br	2df0 <__alt_mem_onchip_memory+0xf7802df0>
    2f34:	9806c03a 	cmpne	r3,r19,zero
    2f38:	18c00084 	addi	r3,r3,2
    2f3c:	003fba06 	br	2e28 <__alt_mem_onchip_memory+0xf7802e28>
    2f40:	9800141e 	bne	r19,zero,2f94 <__mulsf3+0x210>
    2f44:	00c00044 	movi	r3,1
    2f48:	003fb706 	br	2e28 <__alt_mem_onchip_memory+0xf7802e28>
    2f4c:	a829883a 	mov	r20,r21
    2f50:	00ffffc4 	movi	r3,-1
    2f54:	0009883a 	mov	r4,zero
    2f58:	003fdd06 	br	2ed0 <__alt_mem_onchip_memory+0xf7802ed0>
    2f5c:	9009883a 	mov	r4,r18
    2f60:	d9400015 	stw	r5,0(sp)
    2f64:	0005f140 	call	5f14 <__clzsi2>
    2f68:	10fffec4 	addi	r3,r2,-5
    2f6c:	10801d84 	addi	r2,r2,118
    2f70:	90e4983a 	sll	r18,r18,r3
    2f74:	00a1c83a 	sub	r16,zero,r2
    2f78:	0023883a 	mov	r17,zero
    2f7c:	002f883a 	mov	r23,zero
    2f80:	d9400017 	ldw	r5,0(sp)
    2f84:	003f9a06 	br	2df0 <__alt_mem_onchip_memory+0xf7802df0>
    2f88:	04400304 	movi	r17,12
    2f8c:	05c000c4 	movi	r23,3
    2f90:	003f9706 	br	2df0 <__alt_mem_onchip_memory+0xf7802df0>
    2f94:	9809883a 	mov	r4,r19
    2f98:	d9800015 	stw	r6,0(sp)
    2f9c:	0005f140 	call	5f14 <__clzsi2>
    2fa0:	10fffec4 	addi	r3,r2,-5
    2fa4:	10801d84 	addi	r2,r2,118
    2fa8:	98e6983a 	sll	r19,r19,r3
    2fac:	0085c83a 	sub	r2,zero,r2
    2fb0:	0007883a 	mov	r3,zero
    2fb4:	d9800017 	ldw	r6,0(sp)
    2fb8:	003f9b06 	br	2e28 <__alt_mem_onchip_memory+0xf7802e28>
    2fbc:	01002034 	movhi	r4,128
    2fc0:	0029883a 	mov	r20,zero
    2fc4:	213fffc4 	addi	r4,r4,-1
    2fc8:	00ffffc4 	movi	r3,-1
    2fcc:	003fc006 	br	2ed0 <__alt_mem_onchip_memory+0xf7802ed0>
    2fd0:	9027883a 	mov	r19,r18
    2fd4:	b807883a 	mov	r3,r23
    2fd8:	003fb406 	br	2eac <__alt_mem_onchip_memory+0xf7802eac>
    2fdc:	9027883a 	mov	r19,r18
    2fe0:	e02b883a 	mov	r21,fp
    2fe4:	b807883a 	mov	r3,r23
    2fe8:	003fb006 	br	2eac <__alt_mem_onchip_memory+0xf7802eac>
    2fec:	9004d43a 	srli	r2,r18,16
    2ff0:	9810d43a 	srli	r8,r19,16
    2ff4:	94bfffcc 	andi	r18,r18,65535
    2ff8:	993fffcc 	andi	r4,r19,65535
    2ffc:	910d383a 	mul	r6,r18,r4
    3000:	20a7383a 	mul	r19,r4,r2
    3004:	9225383a 	mul	r18,r18,r8
    3008:	3006d43a 	srli	r3,r6,16
    300c:	1211383a 	mul	r8,r2,r8
    3010:	94e5883a 	add	r18,r18,r19
    3014:	1c87883a 	add	r3,r3,r18
    3018:	1cc0022e 	bgeu	r3,r19,3024 <__mulsf3+0x2a0>
    301c:	00800074 	movhi	r2,1
    3020:	4091883a 	add	r8,r8,r2
    3024:	1804943a 	slli	r2,r3,16
    3028:	31bfffcc 	andi	r6,r6,65535
    302c:	1806d43a 	srli	r3,r3,16
    3030:	1185883a 	add	r2,r2,r6
    3034:	102691ba 	slli	r19,r2,6
    3038:	1a07883a 	add	r3,r3,r8
    303c:	1004d6ba 	srli	r2,r2,26
    3040:	180891ba 	slli	r4,r3,6
    3044:	9826c03a 	cmpne	r19,r19,zero
    3048:	9884b03a 	or	r2,r19,r2
    304c:	1126b03a 	or	r19,r2,r4
    3050:	9882002c 	andhi	r2,r19,2048
    3054:	10000426 	beq	r2,zero,3068 <__mulsf3+0x2e4>
    3058:	9804d07a 	srli	r2,r19,1
    305c:	9900004c 	andi	r4,r19,1
    3060:	3821883a 	mov	r16,r7
    3064:	1126b03a 	or	r19,r2,r4
    3068:	80c01fc4 	addi	r3,r16,127
    306c:	00c0210e 	bge	zero,r3,30f4 <__mulsf3+0x370>
    3070:	988001cc 	andi	r2,r19,7
    3074:	10000426 	beq	r2,zero,3088 <__mulsf3+0x304>
    3078:	988003cc 	andi	r2,r19,15
    307c:	01000104 	movi	r4,4
    3080:	11000126 	beq	r2,r4,3088 <__mulsf3+0x304>
    3084:	9927883a 	add	r19,r19,r4
    3088:	9882002c 	andhi	r2,r19,2048
    308c:	10000426 	beq	r2,zero,30a0 <__mulsf3+0x31c>
    3090:	00be0034 	movhi	r2,63488
    3094:	10bfffc4 	addi	r2,r2,-1
    3098:	80c02004 	addi	r3,r16,128
    309c:	98a6703a 	and	r19,r19,r2
    30a0:	00803f84 	movi	r2,254
    30a4:	10ffa916 	blt	r2,r3,2f4c <__alt_mem_onchip_memory+0xf7802f4c>
    30a8:	980891ba 	slli	r4,r19,6
    30ac:	a829883a 	mov	r20,r21
    30b0:	2008d27a 	srli	r4,r4,9
    30b4:	003f8606 	br	2ed0 <__alt_mem_onchip_memory+0xf7802ed0>
    30b8:	9080102c 	andhi	r2,r18,64
    30bc:	10000826 	beq	r2,zero,30e0 <__mulsf3+0x35c>
    30c0:	9880102c 	andhi	r2,r19,64
    30c4:	1000061e 	bne	r2,zero,30e0 <__mulsf3+0x35c>
    30c8:	00802034 	movhi	r2,128
    30cc:	99001034 	orhi	r4,r19,64
    30d0:	10bfffc4 	addi	r2,r2,-1
    30d4:	b029883a 	mov	r20,r22
    30d8:	2088703a 	and	r4,r4,r2
    30dc:	003fba06 	br	2fc8 <__alt_mem_onchip_memory+0xf7802fc8>
    30e0:	00802034 	movhi	r2,128
    30e4:	91001034 	orhi	r4,r18,64
    30e8:	10bfffc4 	addi	r2,r2,-1
    30ec:	2088703a 	and	r4,r4,r2
    30f0:	003fb506 	br	2fc8 <__alt_mem_onchip_memory+0xf7802fc8>
    30f4:	00800044 	movi	r2,1
    30f8:	10c7c83a 	sub	r3,r2,r3
    30fc:	008006c4 	movi	r2,27
    3100:	10ff7016 	blt	r2,r3,2ec4 <__alt_mem_onchip_memory+0xf7802ec4>
    3104:	00800804 	movi	r2,32
    3108:	10c5c83a 	sub	r2,r2,r3
    310c:	9884983a 	sll	r2,r19,r2
    3110:	98c6d83a 	srl	r3,r19,r3
    3114:	1004c03a 	cmpne	r2,r2,zero
    3118:	1884b03a 	or	r2,r3,r2
    311c:	10c001cc 	andi	r3,r2,7
    3120:	18000426 	beq	r3,zero,3134 <__mulsf3+0x3b0>
    3124:	10c003cc 	andi	r3,r2,15
    3128:	01000104 	movi	r4,4
    312c:	19000126 	beq	r3,r4,3134 <__mulsf3+0x3b0>
    3130:	1105883a 	add	r2,r2,r4
    3134:	10c1002c 	andhi	r3,r2,1024
    3138:	18000626 	beq	r3,zero,3154 <__mulsf3+0x3d0>
    313c:	a829883a 	mov	r20,r21
    3140:	00c00044 	movi	r3,1
    3144:	0009883a 	mov	r4,zero
    3148:	003f6106 	br	2ed0 <__alt_mem_onchip_memory+0xf7802ed0>
    314c:	3821883a 	mov	r16,r7
    3150:	003fc506 	br	3068 <__alt_mem_onchip_memory+0xf7803068>
    3154:	100491ba 	slli	r2,r2,6
    3158:	a829883a 	mov	r20,r21
    315c:	0007883a 	mov	r3,zero
    3160:	1008d27a 	srli	r4,r2,9
    3164:	003f5a06 	br	2ed0 <__alt_mem_onchip_memory+0xf7802ed0>
    3168:	00802034 	movhi	r2,128
    316c:	99001034 	orhi	r4,r19,64
    3170:	10bfffc4 	addi	r2,r2,-1
    3174:	a829883a 	mov	r20,r21
    3178:	2088703a 	and	r4,r4,r2
    317c:	003f9206 	br	2fc8 <__alt_mem_onchip_memory+0xf7802fc8>

00003180 <__subsf3>:
    3180:	defffc04 	addi	sp,sp,-16
    3184:	280cd5fa 	srli	r6,r5,23
    3188:	dc000015 	stw	r16,0(sp)
    318c:	01c02034 	movhi	r7,128
    3190:	2020d5fa 	srli	r16,r4,23
    3194:	39ffffc4 	addi	r7,r7,-1
    3198:	3906703a 	and	r3,r7,r4
    319c:	dc400115 	stw	r17,4(sp)
    31a0:	394e703a 	and	r7,r7,r5
    31a4:	2022d7fa 	srli	r17,r4,31
    31a8:	dfc00315 	stw	ra,12(sp)
    31ac:	dc800215 	stw	r18,8(sp)
    31b0:	31803fcc 	andi	r6,r6,255
    31b4:	01003fc4 	movi	r4,255
    31b8:	84003fcc 	andi	r16,r16,255
    31bc:	180690fa 	slli	r3,r3,3
    31c0:	2804d7fa 	srli	r2,r5,31
    31c4:	380e90fa 	slli	r7,r7,3
    31c8:	31006d26 	beq	r6,r4,3380 <__subsf3+0x200>
    31cc:	1080005c 	xori	r2,r2,1
    31d0:	8189c83a 	sub	r4,r16,r6
    31d4:	14404f26 	beq	r2,r17,3314 <__subsf3+0x194>
    31d8:	0100770e 	bge	zero,r4,33b8 <__subsf3+0x238>
    31dc:	30001e1e 	bne	r6,zero,3258 <__subsf3+0xd8>
    31e0:	38006a1e 	bne	r7,zero,338c <__subsf3+0x20c>
    31e4:	188001cc 	andi	r2,r3,7
    31e8:	10000426 	beq	r2,zero,31fc <__subsf3+0x7c>
    31ec:	188003cc 	andi	r2,r3,15
    31f0:	01000104 	movi	r4,4
    31f4:	11000126 	beq	r2,r4,31fc <__subsf3+0x7c>
    31f8:	1907883a 	add	r3,r3,r4
    31fc:	1881002c 	andhi	r2,r3,1024
    3200:	10003926 	beq	r2,zero,32e8 <__subsf3+0x168>
    3204:	84000044 	addi	r16,r16,1
    3208:	00803fc4 	movi	r2,255
    320c:	80807526 	beq	r16,r2,33e4 <__subsf3+0x264>
    3210:	180691ba 	slli	r3,r3,6
    3214:	8880004c 	andi	r2,r17,1
    3218:	180ad27a 	srli	r5,r3,9
    321c:	84003fcc 	andi	r16,r16,255
    3220:	800695fa 	slli	r3,r16,23
    3224:	10803fcc 	andi	r2,r2,255
    3228:	01002034 	movhi	r4,128
    322c:	213fffc4 	addi	r4,r4,-1
    3230:	100497fa 	slli	r2,r2,31
    3234:	2920703a 	and	r16,r5,r4
    3238:	80e0b03a 	or	r16,r16,r3
    323c:	8084b03a 	or	r2,r16,r2
    3240:	dfc00317 	ldw	ra,12(sp)
    3244:	dc800217 	ldw	r18,8(sp)
    3248:	dc400117 	ldw	r17,4(sp)
    324c:	dc000017 	ldw	r16,0(sp)
    3250:	dec00404 	addi	sp,sp,16
    3254:	f800283a 	ret
    3258:	00803fc4 	movi	r2,255
    325c:	80bfe126 	beq	r16,r2,31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3260:	39c10034 	orhi	r7,r7,1024
    3264:	008006c4 	movi	r2,27
    3268:	11007416 	blt	r2,r4,343c <__subsf3+0x2bc>
    326c:	00800804 	movi	r2,32
    3270:	1105c83a 	sub	r2,r2,r4
    3274:	3884983a 	sll	r2,r7,r2
    3278:	390ed83a 	srl	r7,r7,r4
    327c:	1008c03a 	cmpne	r4,r2,zero
    3280:	390eb03a 	or	r7,r7,r4
    3284:	19c7c83a 	sub	r3,r3,r7
    3288:	1881002c 	andhi	r2,r3,1024
    328c:	10001426 	beq	r2,zero,32e0 <__subsf3+0x160>
    3290:	04810034 	movhi	r18,1024
    3294:	94bfffc4 	addi	r18,r18,-1
    3298:	1ca4703a 	and	r18,r3,r18
    329c:	9009883a 	mov	r4,r18
    32a0:	0005f140 	call	5f14 <__clzsi2>
    32a4:	10bffec4 	addi	r2,r2,-5
    32a8:	90a4983a 	sll	r18,r18,r2
    32ac:	14005116 	blt	r2,r16,33f4 <__subsf3+0x274>
    32b0:	1405c83a 	sub	r2,r2,r16
    32b4:	10c00044 	addi	r3,r2,1
    32b8:	00800804 	movi	r2,32
    32bc:	10c5c83a 	sub	r2,r2,r3
    32c0:	9084983a 	sll	r2,r18,r2
    32c4:	90e4d83a 	srl	r18,r18,r3
    32c8:	0021883a 	mov	r16,zero
    32cc:	1006c03a 	cmpne	r3,r2,zero
    32d0:	90c6b03a 	or	r3,r18,r3
    32d4:	003fc306 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    32d8:	2000e026 	beq	r4,zero,365c <__subsf3+0x4dc>
    32dc:	2007883a 	mov	r3,r4
    32e0:	188001cc 	andi	r2,r3,7
    32e4:	103fc11e 	bne	r2,zero,31ec <__alt_mem_onchip_memory+0xf78031ec>
    32e8:	180ad0fa 	srli	r5,r3,3
    32ec:	00c03fc4 	movi	r3,255
    32f0:	8880004c 	andi	r2,r17,1
    32f4:	80c0031e 	bne	r16,r3,3304 <__subsf3+0x184>
    32f8:	28006d26 	beq	r5,zero,34b0 <__subsf3+0x330>
    32fc:	29401034 	orhi	r5,r5,64
    3300:	043fffc4 	movi	r16,-1
    3304:	00c02034 	movhi	r3,128
    3308:	18ffffc4 	addi	r3,r3,-1
    330c:	28ca703a 	and	r5,r5,r3
    3310:	003fc206 	br	321c <__alt_mem_onchip_memory+0xf780321c>
    3314:	01003c0e 	bge	zero,r4,3408 <__subsf3+0x288>
    3318:	30002126 	beq	r6,zero,33a0 <__subsf3+0x220>
    331c:	01403fc4 	movi	r5,255
    3320:	817fb026 	beq	r16,r5,31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3324:	39c10034 	orhi	r7,r7,1024
    3328:	014006c4 	movi	r5,27
    332c:	29007416 	blt	r5,r4,3500 <__subsf3+0x380>
    3330:	01400804 	movi	r5,32
    3334:	290bc83a 	sub	r5,r5,r4
    3338:	394a983a 	sll	r5,r7,r5
    333c:	390ed83a 	srl	r7,r7,r4
    3340:	2808c03a 	cmpne	r4,r5,zero
    3344:	390eb03a 	or	r7,r7,r4
    3348:	19c7883a 	add	r3,r3,r7
    334c:	1901002c 	andhi	r4,r3,1024
    3350:	20003826 	beq	r4,zero,3434 <__subsf3+0x2b4>
    3354:	84000044 	addi	r16,r16,1
    3358:	01003fc4 	movi	r4,255
    335c:	81005426 	beq	r16,r4,34b0 <__subsf3+0x330>
    3360:	1023883a 	mov	r17,r2
    3364:	00bf0034 	movhi	r2,64512
    3368:	10bfffc4 	addi	r2,r2,-1
    336c:	1900004c 	andi	r4,r3,1
    3370:	1886703a 	and	r3,r3,r2
    3374:	1806d07a 	srli	r3,r3,1
    3378:	1906b03a 	or	r3,r3,r4
    337c:	003f9906 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3380:	383f9226 	beq	r7,zero,31cc <__alt_mem_onchip_memory+0xf78031cc>
    3384:	10803fcc 	andi	r2,r2,255
    3388:	003f9106 	br	31d0 <__alt_mem_onchip_memory+0xf78031d0>
    338c:	213fffc4 	addi	r4,r4,-1
    3390:	203fbc26 	beq	r4,zero,3284 <__alt_mem_onchip_memory+0xf7803284>
    3394:	00803fc4 	movi	r2,255
    3398:	80bfb21e 	bne	r16,r2,3264 <__alt_mem_onchip_memory+0xf7803264>
    339c:	003f9106 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    33a0:	383f9026 	beq	r7,zero,31e4 <__alt_mem_onchip_memory+0xf78031e4>
    33a4:	213fffc4 	addi	r4,r4,-1
    33a8:	203fe726 	beq	r4,zero,3348 <__alt_mem_onchip_memory+0xf7803348>
    33ac:	01403fc4 	movi	r5,255
    33b0:	817fdd1e 	bne	r16,r5,3328 <__alt_mem_onchip_memory+0xf7803328>
    33b4:	003f8b06 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    33b8:	2000221e 	bne	r4,zero,3444 <__subsf3+0x2c4>
    33bc:	81000044 	addi	r4,r16,1
    33c0:	21003fcc 	andi	r4,r4,255
    33c4:	01400044 	movi	r5,1
    33c8:	2900470e 	bge	r5,r4,34e8 <__subsf3+0x368>
    33cc:	19e5c83a 	sub	r18,r3,r7
    33d0:	9141002c 	andhi	r5,r18,1024
    33d4:	28002d26 	beq	r5,zero,348c <__subsf3+0x30c>
    33d8:	38e5c83a 	sub	r18,r7,r3
    33dc:	1023883a 	mov	r17,r2
    33e0:	003fae06 	br	329c <__alt_mem_onchip_memory+0xf780329c>
    33e4:	8880004c 	andi	r2,r17,1
    33e8:	043fffc4 	movi	r16,-1
    33ec:	000b883a 	mov	r5,zero
    33f0:	003f8a06 	br	321c <__alt_mem_onchip_memory+0xf780321c>
    33f4:	00ff0034 	movhi	r3,64512
    33f8:	18ffffc4 	addi	r3,r3,-1
    33fc:	80a1c83a 	sub	r16,r16,r2
    3400:	90c6703a 	and	r3,r18,r3
    3404:	003f7706 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3408:	2000431e 	bne	r4,zero,3518 <__subsf3+0x398>
    340c:	81000044 	addi	r4,r16,1
    3410:	21803fcc 	andi	r6,r4,255
    3414:	01400044 	movi	r5,1
    3418:	2980280e 	bge	r5,r6,34bc <__subsf3+0x33c>
    341c:	01403fc4 	movi	r5,255
    3420:	21402326 	beq	r4,r5,34b0 <__subsf3+0x330>
    3424:	19c7883a 	add	r3,r3,r7
    3428:	1806d07a 	srli	r3,r3,1
    342c:	2021883a 	mov	r16,r4
    3430:	003f6c06 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3434:	1023883a 	mov	r17,r2
    3438:	003fa906 	br	32e0 <__alt_mem_onchip_memory+0xf78032e0>
    343c:	01c00044 	movi	r7,1
    3440:	003f9006 	br	3284 <__alt_mem_onchip_memory+0xf7803284>
    3444:	8000151e 	bne	r16,zero,349c <__subsf3+0x31c>
    3448:	18002f26 	beq	r3,zero,3508 <__subsf3+0x388>
    344c:	0108303a 	nor	r4,zero,r4
    3450:	20000a26 	beq	r4,zero,347c <__subsf3+0x2fc>
    3454:	01403fc4 	movi	r5,255
    3458:	31402b26 	beq	r6,r5,3508 <__subsf3+0x388>
    345c:	014006c4 	movi	r5,27
    3460:	29006e16 	blt	r5,r4,361c <__subsf3+0x49c>
    3464:	01400804 	movi	r5,32
    3468:	290bc83a 	sub	r5,r5,r4
    346c:	194a983a 	sll	r5,r3,r5
    3470:	1908d83a 	srl	r4,r3,r4
    3474:	2806c03a 	cmpne	r3,r5,zero
    3478:	20c6b03a 	or	r3,r4,r3
    347c:	38c7c83a 	sub	r3,r7,r3
    3480:	3021883a 	mov	r16,r6
    3484:	1023883a 	mov	r17,r2
    3488:	003f7f06 	br	3288 <__alt_mem_onchip_memory+0xf7803288>
    348c:	903f831e 	bne	r18,zero,329c <__alt_mem_onchip_memory+0xf780329c>
    3490:	0005883a 	mov	r2,zero
    3494:	0021883a 	mov	r16,zero
    3498:	003f9a06 	br	3304 <__alt_mem_onchip_memory+0xf7803304>
    349c:	01403fc4 	movi	r5,255
    34a0:	31401926 	beq	r6,r5,3508 <__subsf3+0x388>
    34a4:	0109c83a 	sub	r4,zero,r4
    34a8:	18c10034 	orhi	r3,r3,1024
    34ac:	003feb06 	br	345c <__alt_mem_onchip_memory+0xf780345c>
    34b0:	043fffc4 	movi	r16,-1
    34b4:	000b883a 	mov	r5,zero
    34b8:	003f5806 	br	321c <__alt_mem_onchip_memory+0xf780321c>
    34bc:	8000481e 	bne	r16,zero,35e0 <__subsf3+0x460>
    34c0:	18006226 	beq	r3,zero,364c <__subsf3+0x4cc>
    34c4:	383f4726 	beq	r7,zero,31e4 <__alt_mem_onchip_memory+0xf78031e4>
    34c8:	19c7883a 	add	r3,r3,r7
    34cc:	1881002c 	andhi	r2,r3,1024
    34d0:	103f8326 	beq	r2,zero,32e0 <__alt_mem_onchip_memory+0xf78032e0>
    34d4:	00bf0034 	movhi	r2,64512
    34d8:	10bfffc4 	addi	r2,r2,-1
    34dc:	2821883a 	mov	r16,r5
    34e0:	1886703a 	and	r3,r3,r2
    34e4:	003f3f06 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    34e8:	80001c1e 	bne	r16,zero,355c <__subsf3+0x3dc>
    34ec:	1800261e 	bne	r3,zero,3588 <__subsf3+0x408>
    34f0:	38004c26 	beq	r7,zero,3624 <__subsf3+0x4a4>
    34f4:	3807883a 	mov	r3,r7
    34f8:	1023883a 	mov	r17,r2
    34fc:	003f3906 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3500:	01c00044 	movi	r7,1
    3504:	003f9006 	br	3348 <__alt_mem_onchip_memory+0xf7803348>
    3508:	3807883a 	mov	r3,r7
    350c:	3021883a 	mov	r16,r6
    3510:	1023883a 	mov	r17,r2
    3514:	003f3306 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3518:	8000161e 	bne	r16,zero,3574 <__subsf3+0x3f4>
    351c:	18002d26 	beq	r3,zero,35d4 <__subsf3+0x454>
    3520:	0108303a 	nor	r4,zero,r4
    3524:	20000a26 	beq	r4,zero,3550 <__subsf3+0x3d0>
    3528:	01403fc4 	movi	r5,255
    352c:	31402926 	beq	r6,r5,35d4 <__subsf3+0x454>
    3530:	014006c4 	movi	r5,27
    3534:	29004716 	blt	r5,r4,3654 <__subsf3+0x4d4>
    3538:	01400804 	movi	r5,32
    353c:	290bc83a 	sub	r5,r5,r4
    3540:	194a983a 	sll	r5,r3,r5
    3544:	1908d83a 	srl	r4,r3,r4
    3548:	2806c03a 	cmpne	r3,r5,zero
    354c:	20c6b03a 	or	r3,r4,r3
    3550:	19c7883a 	add	r3,r3,r7
    3554:	3021883a 	mov	r16,r6
    3558:	003f7c06 	br	334c <__alt_mem_onchip_memory+0xf780334c>
    355c:	1800111e 	bne	r3,zero,35a4 <__subsf3+0x424>
    3560:	38003326 	beq	r7,zero,3630 <__subsf3+0x4b0>
    3564:	3807883a 	mov	r3,r7
    3568:	1023883a 	mov	r17,r2
    356c:	04003fc4 	movi	r16,255
    3570:	003f1c06 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3574:	01403fc4 	movi	r5,255
    3578:	31401626 	beq	r6,r5,35d4 <__subsf3+0x454>
    357c:	0109c83a 	sub	r4,zero,r4
    3580:	18c10034 	orhi	r3,r3,1024
    3584:	003fea06 	br	3530 <__alt_mem_onchip_memory+0xf7803530>
    3588:	383f1626 	beq	r7,zero,31e4 <__alt_mem_onchip_memory+0xf78031e4>
    358c:	19c9c83a 	sub	r4,r3,r7
    3590:	2141002c 	andhi	r5,r4,1024
    3594:	283f5026 	beq	r5,zero,32d8 <__alt_mem_onchip_memory+0xf78032d8>
    3598:	38c7c83a 	sub	r3,r7,r3
    359c:	1023883a 	mov	r17,r2
    35a0:	003f1006 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    35a4:	38001b26 	beq	r7,zero,3614 <__subsf3+0x494>
    35a8:	1806d0fa 	srli	r3,r3,3
    35ac:	1900102c 	andhi	r4,r3,64
    35b0:	20000526 	beq	r4,zero,35c8 <__subsf3+0x448>
    35b4:	380ed0fa 	srli	r7,r7,3
    35b8:	3900102c 	andhi	r4,r7,64
    35bc:	2000021e 	bne	r4,zero,35c8 <__subsf3+0x448>
    35c0:	3807883a 	mov	r3,r7
    35c4:	1023883a 	mov	r17,r2
    35c8:	180690fa 	slli	r3,r3,3
    35cc:	04003fc4 	movi	r16,255
    35d0:	003f0406 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    35d4:	3807883a 	mov	r3,r7
    35d8:	3021883a 	mov	r16,r6
    35dc:	003f0106 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    35e0:	18001726 	beq	r3,zero,3640 <__subsf3+0x4c0>
    35e4:	38000b26 	beq	r7,zero,3614 <__subsf3+0x494>
    35e8:	1806d0fa 	srli	r3,r3,3
    35ec:	1900102c 	andhi	r4,r3,64
    35f0:	20000426 	beq	r4,zero,3604 <__subsf3+0x484>
    35f4:	380ed0fa 	srli	r7,r7,3
    35f8:	3900102c 	andhi	r4,r7,64
    35fc:	2000011e 	bne	r4,zero,3604 <__subsf3+0x484>
    3600:	3807883a 	mov	r3,r7
    3604:	180690fa 	slli	r3,r3,3
    3608:	1023883a 	mov	r17,r2
    360c:	04003fc4 	movi	r16,255
    3610:	003ef406 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3614:	04003fc4 	movi	r16,255
    3618:	003ef206 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    361c:	00c00044 	movi	r3,1
    3620:	003f9606 	br	347c <__alt_mem_onchip_memory+0xf780347c>
    3624:	000b883a 	mov	r5,zero
    3628:	0005883a 	mov	r2,zero
    362c:	003f3506 	br	3304 <__alt_mem_onchip_memory+0xf7803304>
    3630:	01402034 	movhi	r5,128
    3634:	297fffc4 	addi	r5,r5,-1
    3638:	0005883a 	mov	r2,zero
    363c:	003f2f06 	br	32fc <__alt_mem_onchip_memory+0xf78032fc>
    3640:	3807883a 	mov	r3,r7
    3644:	04003fc4 	movi	r16,255
    3648:	003ee606 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    364c:	3807883a 	mov	r3,r7
    3650:	003ee406 	br	31e4 <__alt_mem_onchip_memory+0xf78031e4>
    3654:	00c00044 	movi	r3,1
    3658:	003fbd06 	br	3550 <__alt_mem_onchip_memory+0xf7803550>
    365c:	0005883a 	mov	r2,zero
    3660:	003f2806 	br	3304 <__alt_mem_onchip_memory+0xf7803304>

00003664 <__floatsisf>:
    3664:	defffd04 	addi	sp,sp,-12
    3668:	dfc00215 	stw	ra,8(sp)
    366c:	dc400115 	stw	r17,4(sp)
    3670:	dc000015 	stw	r16,0(sp)
    3674:	20003526 	beq	r4,zero,374c <__floatsisf+0xe8>
    3678:	2021883a 	mov	r16,r4
    367c:	2022d7fa 	srli	r17,r4,31
    3680:	20003616 	blt	r4,zero,375c <__floatsisf+0xf8>
    3684:	8009883a 	mov	r4,r16
    3688:	0005f140 	call	5f14 <__clzsi2>
    368c:	00c02784 	movi	r3,158
    3690:	1887c83a 	sub	r3,r3,r2
    3694:	01002584 	movi	r4,150
    3698:	20c01416 	blt	r4,r3,36ec <__floatsisf+0x88>
    369c:	20c9c83a 	sub	r4,r4,r3
    36a0:	8120983a 	sll	r16,r16,r4
    36a4:	00802034 	movhi	r2,128
    36a8:	10bfffc4 	addi	r2,r2,-1
    36ac:	8809883a 	mov	r4,r17
    36b0:	80a0703a 	and	r16,r16,r2
    36b4:	18803fcc 	andi	r2,r3,255
    36b8:	100695fa 	slli	r3,r2,23
    36bc:	20803fcc 	andi	r2,r4,255
    36c0:	100897fa 	slli	r4,r2,31
    36c4:	00802034 	movhi	r2,128
    36c8:	10bfffc4 	addi	r2,r2,-1
    36cc:	8084703a 	and	r2,r16,r2
    36d0:	10c4b03a 	or	r2,r2,r3
    36d4:	1104b03a 	or	r2,r2,r4
    36d8:	dfc00217 	ldw	ra,8(sp)
    36dc:	dc400117 	ldw	r17,4(sp)
    36e0:	dc000017 	ldw	r16,0(sp)
    36e4:	dec00304 	addi	sp,sp,12
    36e8:	f800283a 	ret
    36ec:	01002644 	movi	r4,153
    36f0:	20c01c16 	blt	r4,r3,3764 <__floatsisf+0x100>
    36f4:	20c9c83a 	sub	r4,r4,r3
    36f8:	8120983a 	sll	r16,r16,r4
    36fc:	013f0034 	movhi	r4,64512
    3700:	213fffc4 	addi	r4,r4,-1
    3704:	814001cc 	andi	r5,r16,7
    3708:	8108703a 	and	r4,r16,r4
    370c:	28000426 	beq	r5,zero,3720 <__floatsisf+0xbc>
    3710:	840003cc 	andi	r16,r16,15
    3714:	01400104 	movi	r5,4
    3718:	81400126 	beq	r16,r5,3720 <__floatsisf+0xbc>
    371c:	2149883a 	add	r4,r4,r5
    3720:	2141002c 	andhi	r5,r4,1024
    3724:	28000526 	beq	r5,zero,373c <__floatsisf+0xd8>
    3728:	00c027c4 	movi	r3,159
    372c:	1887c83a 	sub	r3,r3,r2
    3730:	00bf0034 	movhi	r2,64512
    3734:	10bfffc4 	addi	r2,r2,-1
    3738:	2088703a 	and	r4,r4,r2
    373c:	202091ba 	slli	r16,r4,6
    3740:	8809883a 	mov	r4,r17
    3744:	8020d27a 	srli	r16,r16,9
    3748:	003fda06 	br	36b4 <__alt_mem_onchip_memory+0xf78036b4>
    374c:	0009883a 	mov	r4,zero
    3750:	0007883a 	mov	r3,zero
    3754:	0021883a 	mov	r16,zero
    3758:	003fd606 	br	36b4 <__alt_mem_onchip_memory+0xf78036b4>
    375c:	0121c83a 	sub	r16,zero,r4
    3760:	003fc806 	br	3684 <__alt_mem_onchip_memory+0xf7803684>
    3764:	01002e44 	movi	r4,185
    3768:	20c9c83a 	sub	r4,r4,r3
    376c:	01400144 	movi	r5,5
    3770:	8108983a 	sll	r4,r16,r4
    3774:	288bc83a 	sub	r5,r5,r2
    3778:	8160d83a 	srl	r16,r16,r5
    377c:	2008c03a 	cmpne	r4,r4,zero
    3780:	8120b03a 	or	r16,r16,r4
    3784:	003fdd06 	br	36fc <__alt_mem_onchip_memory+0xf78036fc>

00003788 <__adddf3>:
    3788:	02c00434 	movhi	r11,16
    378c:	5affffc4 	addi	r11,r11,-1
    3790:	2806d7fa 	srli	r3,r5,31
    3794:	2ad4703a 	and	r10,r5,r11
    3798:	3ad2703a 	and	r9,r7,r11
    379c:	3804d53a 	srli	r2,r7,20
    37a0:	3018d77a 	srli	r12,r6,29
    37a4:	280ad53a 	srli	r5,r5,20
    37a8:	501490fa 	slli	r10,r10,3
    37ac:	2010d77a 	srli	r8,r4,29
    37b0:	481290fa 	slli	r9,r9,3
    37b4:	380ed7fa 	srli	r7,r7,31
    37b8:	defffb04 	addi	sp,sp,-20
    37bc:	dc800215 	stw	r18,8(sp)
    37c0:	dc400115 	stw	r17,4(sp)
    37c4:	dc000015 	stw	r16,0(sp)
    37c8:	dfc00415 	stw	ra,16(sp)
    37cc:	dcc00315 	stw	r19,12(sp)
    37d0:	1c803fcc 	andi	r18,r3,255
    37d4:	2c01ffcc 	andi	r16,r5,2047
    37d8:	5210b03a 	or	r8,r10,r8
    37dc:	202290fa 	slli	r17,r4,3
    37e0:	1081ffcc 	andi	r2,r2,2047
    37e4:	4b12b03a 	or	r9,r9,r12
    37e8:	300c90fa 	slli	r6,r6,3
    37ec:	91c07526 	beq	r18,r7,39c4 <__adddf3+0x23c>
    37f0:	8087c83a 	sub	r3,r16,r2
    37f4:	00c0ab0e 	bge	zero,r3,3aa4 <__adddf3+0x31c>
    37f8:	10002a1e 	bne	r2,zero,38a4 <__adddf3+0x11c>
    37fc:	4984b03a 	or	r2,r9,r6
    3800:	1000961e 	bne	r2,zero,3a5c <__adddf3+0x2d4>
    3804:	888001cc 	andi	r2,r17,7
    3808:	10000726 	beq	r2,zero,3828 <__adddf3+0xa0>
    380c:	888003cc 	andi	r2,r17,15
    3810:	00c00104 	movi	r3,4
    3814:	10c00426 	beq	r2,r3,3828 <__adddf3+0xa0>
    3818:	88c7883a 	add	r3,r17,r3
    381c:	1c63803a 	cmpltu	r17,r3,r17
    3820:	4451883a 	add	r8,r8,r17
    3824:	1823883a 	mov	r17,r3
    3828:	4080202c 	andhi	r2,r8,128
    382c:	10005926 	beq	r2,zero,3994 <__adddf3+0x20c>
    3830:	84000044 	addi	r16,r16,1
    3834:	0081ffc4 	movi	r2,2047
    3838:	8080ba26 	beq	r16,r2,3b24 <__adddf3+0x39c>
    383c:	00bfe034 	movhi	r2,65408
    3840:	10bfffc4 	addi	r2,r2,-1
    3844:	4090703a 	and	r8,r8,r2
    3848:	4004977a 	slli	r2,r8,29
    384c:	4010927a 	slli	r8,r8,9
    3850:	8822d0fa 	srli	r17,r17,3
    3854:	8401ffcc 	andi	r16,r16,2047
    3858:	4010d33a 	srli	r8,r8,12
    385c:	9007883a 	mov	r3,r18
    3860:	1444b03a 	or	r2,r2,r17
    3864:	8401ffcc 	andi	r16,r16,2047
    3868:	8020953a 	slli	r16,r16,20
    386c:	18c03fcc 	andi	r3,r3,255
    3870:	01000434 	movhi	r4,16
    3874:	213fffc4 	addi	r4,r4,-1
    3878:	180697fa 	slli	r3,r3,31
    387c:	4110703a 	and	r8,r8,r4
    3880:	4410b03a 	or	r8,r8,r16
    3884:	40c6b03a 	or	r3,r8,r3
    3888:	dfc00417 	ldw	ra,16(sp)
    388c:	dcc00317 	ldw	r19,12(sp)
    3890:	dc800217 	ldw	r18,8(sp)
    3894:	dc400117 	ldw	r17,4(sp)
    3898:	dc000017 	ldw	r16,0(sp)
    389c:	dec00504 	addi	sp,sp,20
    38a0:	f800283a 	ret
    38a4:	0081ffc4 	movi	r2,2047
    38a8:	80bfd626 	beq	r16,r2,3804 <__alt_mem_onchip_memory+0xf7803804>
    38ac:	4a402034 	orhi	r9,r9,128
    38b0:	00800e04 	movi	r2,56
    38b4:	10c09f16 	blt	r2,r3,3b34 <__adddf3+0x3ac>
    38b8:	008007c4 	movi	r2,31
    38bc:	10c0c216 	blt	r2,r3,3bc8 <__adddf3+0x440>
    38c0:	00800804 	movi	r2,32
    38c4:	10c5c83a 	sub	r2,r2,r3
    38c8:	488a983a 	sll	r5,r9,r2
    38cc:	30c8d83a 	srl	r4,r6,r3
    38d0:	3084983a 	sll	r2,r6,r2
    38d4:	48c6d83a 	srl	r3,r9,r3
    38d8:	290cb03a 	or	r6,r5,r4
    38dc:	1004c03a 	cmpne	r2,r2,zero
    38e0:	308cb03a 	or	r6,r6,r2
    38e4:	898dc83a 	sub	r6,r17,r6
    38e8:	89a3803a 	cmpltu	r17,r17,r6
    38ec:	40d1c83a 	sub	r8,r8,r3
    38f0:	4451c83a 	sub	r8,r8,r17
    38f4:	3023883a 	mov	r17,r6
    38f8:	4080202c 	andhi	r2,r8,128
    38fc:	10002326 	beq	r2,zero,398c <__adddf3+0x204>
    3900:	04c02034 	movhi	r19,128
    3904:	9cffffc4 	addi	r19,r19,-1
    3908:	44e6703a 	and	r19,r8,r19
    390c:	98007626 	beq	r19,zero,3ae8 <__adddf3+0x360>
    3910:	9809883a 	mov	r4,r19
    3914:	0005f140 	call	5f14 <__clzsi2>
    3918:	10fffe04 	addi	r3,r2,-8
    391c:	010007c4 	movi	r4,31
    3920:	20c07716 	blt	r4,r3,3b00 <__adddf3+0x378>
    3924:	00800804 	movi	r2,32
    3928:	10c5c83a 	sub	r2,r2,r3
    392c:	8884d83a 	srl	r2,r17,r2
    3930:	98d0983a 	sll	r8,r19,r3
    3934:	88e2983a 	sll	r17,r17,r3
    3938:	1204b03a 	or	r2,r2,r8
    393c:	1c007416 	blt	r3,r16,3b10 <__adddf3+0x388>
    3940:	1c21c83a 	sub	r16,r3,r16
    3944:	82000044 	addi	r8,r16,1
    3948:	00c007c4 	movi	r3,31
    394c:	1a009116 	blt	r3,r8,3b94 <__adddf3+0x40c>
    3950:	00c00804 	movi	r3,32
    3954:	1a07c83a 	sub	r3,r3,r8
    3958:	8a08d83a 	srl	r4,r17,r8
    395c:	88e2983a 	sll	r17,r17,r3
    3960:	10c6983a 	sll	r3,r2,r3
    3964:	1210d83a 	srl	r8,r2,r8
    3968:	8804c03a 	cmpne	r2,r17,zero
    396c:	1906b03a 	or	r3,r3,r4
    3970:	18a2b03a 	or	r17,r3,r2
    3974:	0021883a 	mov	r16,zero
    3978:	003fa206 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    397c:	1890b03a 	or	r8,r3,r2
    3980:	40017d26 	beq	r8,zero,3f78 <__adddf3+0x7f0>
    3984:	1011883a 	mov	r8,r2
    3988:	1823883a 	mov	r17,r3
    398c:	888001cc 	andi	r2,r17,7
    3990:	103f9e1e 	bne	r2,zero,380c <__alt_mem_onchip_memory+0xf780380c>
    3994:	4004977a 	slli	r2,r8,29
    3998:	8822d0fa 	srli	r17,r17,3
    399c:	4010d0fa 	srli	r8,r8,3
    39a0:	9007883a 	mov	r3,r18
    39a4:	1444b03a 	or	r2,r2,r17
    39a8:	0101ffc4 	movi	r4,2047
    39ac:	81002426 	beq	r16,r4,3a40 <__adddf3+0x2b8>
    39b0:	8120703a 	and	r16,r16,r4
    39b4:	01000434 	movhi	r4,16
    39b8:	213fffc4 	addi	r4,r4,-1
    39bc:	4110703a 	and	r8,r8,r4
    39c0:	003fa806 	br	3864 <__alt_mem_onchip_memory+0xf7803864>
    39c4:	8089c83a 	sub	r4,r16,r2
    39c8:	01005e0e 	bge	zero,r4,3b44 <__adddf3+0x3bc>
    39cc:	10002b26 	beq	r2,zero,3a7c <__adddf3+0x2f4>
    39d0:	0081ffc4 	movi	r2,2047
    39d4:	80bf8b26 	beq	r16,r2,3804 <__alt_mem_onchip_memory+0xf7803804>
    39d8:	4a402034 	orhi	r9,r9,128
    39dc:	00800e04 	movi	r2,56
    39e0:	1100a40e 	bge	r2,r4,3c74 <__adddf3+0x4ec>
    39e4:	498cb03a 	or	r6,r9,r6
    39e8:	300ac03a 	cmpne	r5,r6,zero
    39ec:	0013883a 	mov	r9,zero
    39f0:	2c4b883a 	add	r5,r5,r17
    39f4:	2c63803a 	cmpltu	r17,r5,r17
    39f8:	4a11883a 	add	r8,r9,r8
    39fc:	8a11883a 	add	r8,r17,r8
    3a00:	2823883a 	mov	r17,r5
    3a04:	4080202c 	andhi	r2,r8,128
    3a08:	103fe026 	beq	r2,zero,398c <__alt_mem_onchip_memory+0xf780398c>
    3a0c:	84000044 	addi	r16,r16,1
    3a10:	0081ffc4 	movi	r2,2047
    3a14:	8080d226 	beq	r16,r2,3d60 <__adddf3+0x5d8>
    3a18:	00bfe034 	movhi	r2,65408
    3a1c:	10bfffc4 	addi	r2,r2,-1
    3a20:	4090703a 	and	r8,r8,r2
    3a24:	880ad07a 	srli	r5,r17,1
    3a28:	400897fa 	slli	r4,r8,31
    3a2c:	88c0004c 	andi	r3,r17,1
    3a30:	28e2b03a 	or	r17,r5,r3
    3a34:	4010d07a 	srli	r8,r8,1
    3a38:	2462b03a 	or	r17,r4,r17
    3a3c:	003f7106 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3a40:	4088b03a 	or	r4,r8,r2
    3a44:	20014526 	beq	r4,zero,3f5c <__adddf3+0x7d4>
    3a48:	01000434 	movhi	r4,16
    3a4c:	42000234 	orhi	r8,r8,8
    3a50:	213fffc4 	addi	r4,r4,-1
    3a54:	4110703a 	and	r8,r8,r4
    3a58:	003f8206 	br	3864 <__alt_mem_onchip_memory+0xf7803864>
    3a5c:	18ffffc4 	addi	r3,r3,-1
    3a60:	1800491e 	bne	r3,zero,3b88 <__adddf3+0x400>
    3a64:	898bc83a 	sub	r5,r17,r6
    3a68:	8963803a 	cmpltu	r17,r17,r5
    3a6c:	4251c83a 	sub	r8,r8,r9
    3a70:	4451c83a 	sub	r8,r8,r17
    3a74:	2823883a 	mov	r17,r5
    3a78:	003f9f06 	br	38f8 <__alt_mem_onchip_memory+0xf78038f8>
    3a7c:	4984b03a 	or	r2,r9,r6
    3a80:	103f6026 	beq	r2,zero,3804 <__alt_mem_onchip_memory+0xf7803804>
    3a84:	213fffc4 	addi	r4,r4,-1
    3a88:	2000931e 	bne	r4,zero,3cd8 <__adddf3+0x550>
    3a8c:	898d883a 	add	r6,r17,r6
    3a90:	3463803a 	cmpltu	r17,r6,r17
    3a94:	4251883a 	add	r8,r8,r9
    3a98:	8a11883a 	add	r8,r17,r8
    3a9c:	3023883a 	mov	r17,r6
    3aa0:	003fd806 	br	3a04 <__alt_mem_onchip_memory+0xf7803a04>
    3aa4:	1800541e 	bne	r3,zero,3bf8 <__adddf3+0x470>
    3aa8:	80800044 	addi	r2,r16,1
    3aac:	1081ffcc 	andi	r2,r2,2047
    3ab0:	00c00044 	movi	r3,1
    3ab4:	1880a00e 	bge	r3,r2,3d38 <__adddf3+0x5b0>
    3ab8:	8989c83a 	sub	r4,r17,r6
    3abc:	8905803a 	cmpltu	r2,r17,r4
    3ac0:	4267c83a 	sub	r19,r8,r9
    3ac4:	98a7c83a 	sub	r19,r19,r2
    3ac8:	9880202c 	andhi	r2,r19,128
    3acc:	10006326 	beq	r2,zero,3c5c <__adddf3+0x4d4>
    3ad0:	3463c83a 	sub	r17,r6,r17
    3ad4:	4a07c83a 	sub	r3,r9,r8
    3ad8:	344d803a 	cmpltu	r6,r6,r17
    3adc:	19a7c83a 	sub	r19,r3,r6
    3ae0:	3825883a 	mov	r18,r7
    3ae4:	983f8a1e 	bne	r19,zero,3910 <__alt_mem_onchip_memory+0xf7803910>
    3ae8:	8809883a 	mov	r4,r17
    3aec:	0005f140 	call	5f14 <__clzsi2>
    3af0:	10800804 	addi	r2,r2,32
    3af4:	10fffe04 	addi	r3,r2,-8
    3af8:	010007c4 	movi	r4,31
    3afc:	20ff890e 	bge	r4,r3,3924 <__alt_mem_onchip_memory+0xf7803924>
    3b00:	10bff604 	addi	r2,r2,-40
    3b04:	8884983a 	sll	r2,r17,r2
    3b08:	0023883a 	mov	r17,zero
    3b0c:	1c3f8c0e 	bge	r3,r16,3940 <__alt_mem_onchip_memory+0xf7803940>
    3b10:	023fe034 	movhi	r8,65408
    3b14:	423fffc4 	addi	r8,r8,-1
    3b18:	80e1c83a 	sub	r16,r16,r3
    3b1c:	1210703a 	and	r8,r2,r8
    3b20:	003f3806 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3b24:	9007883a 	mov	r3,r18
    3b28:	0011883a 	mov	r8,zero
    3b2c:	0005883a 	mov	r2,zero
    3b30:	003f4c06 	br	3864 <__alt_mem_onchip_memory+0xf7803864>
    3b34:	498cb03a 	or	r6,r9,r6
    3b38:	300cc03a 	cmpne	r6,r6,zero
    3b3c:	0007883a 	mov	r3,zero
    3b40:	003f6806 	br	38e4 <__alt_mem_onchip_memory+0xf78038e4>
    3b44:	20009c1e 	bne	r4,zero,3db8 <__adddf3+0x630>
    3b48:	80800044 	addi	r2,r16,1
    3b4c:	1141ffcc 	andi	r5,r2,2047
    3b50:	01000044 	movi	r4,1
    3b54:	2140670e 	bge	r4,r5,3cf4 <__adddf3+0x56c>
    3b58:	0101ffc4 	movi	r4,2047
    3b5c:	11007f26 	beq	r2,r4,3d5c <__adddf3+0x5d4>
    3b60:	898d883a 	add	r6,r17,r6
    3b64:	4247883a 	add	r3,r8,r9
    3b68:	3451803a 	cmpltu	r8,r6,r17
    3b6c:	40d1883a 	add	r8,r8,r3
    3b70:	402297fa 	slli	r17,r8,31
    3b74:	300cd07a 	srli	r6,r6,1
    3b78:	4010d07a 	srli	r8,r8,1
    3b7c:	1021883a 	mov	r16,r2
    3b80:	89a2b03a 	or	r17,r17,r6
    3b84:	003f1f06 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3b88:	0081ffc4 	movi	r2,2047
    3b8c:	80bf481e 	bne	r16,r2,38b0 <__alt_mem_onchip_memory+0xf78038b0>
    3b90:	003f1c06 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3b94:	843ff844 	addi	r16,r16,-31
    3b98:	01000804 	movi	r4,32
    3b9c:	1406d83a 	srl	r3,r2,r16
    3ba0:	41005026 	beq	r8,r4,3ce4 <__adddf3+0x55c>
    3ba4:	01001004 	movi	r4,64
    3ba8:	2211c83a 	sub	r8,r4,r8
    3bac:	1204983a 	sll	r2,r2,r8
    3bb0:	88a2b03a 	or	r17,r17,r2
    3bb4:	8822c03a 	cmpne	r17,r17,zero
    3bb8:	1c62b03a 	or	r17,r3,r17
    3bbc:	0011883a 	mov	r8,zero
    3bc0:	0021883a 	mov	r16,zero
    3bc4:	003f7106 	br	398c <__alt_mem_onchip_memory+0xf780398c>
    3bc8:	193ff804 	addi	r4,r3,-32
    3bcc:	00800804 	movi	r2,32
    3bd0:	4908d83a 	srl	r4,r9,r4
    3bd4:	18804526 	beq	r3,r2,3cec <__adddf3+0x564>
    3bd8:	00801004 	movi	r2,64
    3bdc:	10c5c83a 	sub	r2,r2,r3
    3be0:	4886983a 	sll	r3,r9,r2
    3be4:	198cb03a 	or	r6,r3,r6
    3be8:	300cc03a 	cmpne	r6,r6,zero
    3bec:	218cb03a 	or	r6,r4,r6
    3bf0:	0007883a 	mov	r3,zero
    3bf4:	003f3b06 	br	38e4 <__alt_mem_onchip_memory+0xf78038e4>
    3bf8:	80002a26 	beq	r16,zero,3ca4 <__adddf3+0x51c>
    3bfc:	0101ffc4 	movi	r4,2047
    3c00:	11006826 	beq	r2,r4,3da4 <__adddf3+0x61c>
    3c04:	00c7c83a 	sub	r3,zero,r3
    3c08:	42002034 	orhi	r8,r8,128
    3c0c:	01000e04 	movi	r4,56
    3c10:	20c07c16 	blt	r4,r3,3e04 <__adddf3+0x67c>
    3c14:	010007c4 	movi	r4,31
    3c18:	20c0da16 	blt	r4,r3,3f84 <__adddf3+0x7fc>
    3c1c:	01000804 	movi	r4,32
    3c20:	20c9c83a 	sub	r4,r4,r3
    3c24:	4114983a 	sll	r10,r8,r4
    3c28:	88cad83a 	srl	r5,r17,r3
    3c2c:	8908983a 	sll	r4,r17,r4
    3c30:	40c6d83a 	srl	r3,r8,r3
    3c34:	5162b03a 	or	r17,r10,r5
    3c38:	2008c03a 	cmpne	r4,r4,zero
    3c3c:	8922b03a 	or	r17,r17,r4
    3c40:	3463c83a 	sub	r17,r6,r17
    3c44:	48c7c83a 	sub	r3,r9,r3
    3c48:	344d803a 	cmpltu	r6,r6,r17
    3c4c:	1991c83a 	sub	r8,r3,r6
    3c50:	1021883a 	mov	r16,r2
    3c54:	3825883a 	mov	r18,r7
    3c58:	003f2706 	br	38f8 <__alt_mem_onchip_memory+0xf78038f8>
    3c5c:	24d0b03a 	or	r8,r4,r19
    3c60:	40001b1e 	bne	r8,zero,3cd0 <__adddf3+0x548>
    3c64:	0005883a 	mov	r2,zero
    3c68:	0007883a 	mov	r3,zero
    3c6c:	0021883a 	mov	r16,zero
    3c70:	003f4d06 	br	39a8 <__alt_mem_onchip_memory+0xf78039a8>
    3c74:	008007c4 	movi	r2,31
    3c78:	11003c16 	blt	r2,r4,3d6c <__adddf3+0x5e4>
    3c7c:	00800804 	movi	r2,32
    3c80:	1105c83a 	sub	r2,r2,r4
    3c84:	488e983a 	sll	r7,r9,r2
    3c88:	310ad83a 	srl	r5,r6,r4
    3c8c:	3084983a 	sll	r2,r6,r2
    3c90:	4912d83a 	srl	r9,r9,r4
    3c94:	394ab03a 	or	r5,r7,r5
    3c98:	1004c03a 	cmpne	r2,r2,zero
    3c9c:	288ab03a 	or	r5,r5,r2
    3ca0:	003f5306 	br	39f0 <__alt_mem_onchip_memory+0xf78039f0>
    3ca4:	4448b03a 	or	r4,r8,r17
    3ca8:	20003e26 	beq	r4,zero,3da4 <__adddf3+0x61c>
    3cac:	00c6303a 	nor	r3,zero,r3
    3cb0:	18003a1e 	bne	r3,zero,3d9c <__adddf3+0x614>
    3cb4:	3463c83a 	sub	r17,r6,r17
    3cb8:	4a07c83a 	sub	r3,r9,r8
    3cbc:	344d803a 	cmpltu	r6,r6,r17
    3cc0:	1991c83a 	sub	r8,r3,r6
    3cc4:	1021883a 	mov	r16,r2
    3cc8:	3825883a 	mov	r18,r7
    3ccc:	003f0a06 	br	38f8 <__alt_mem_onchip_memory+0xf78038f8>
    3cd0:	2023883a 	mov	r17,r4
    3cd4:	003f0d06 	br	390c <__alt_mem_onchip_memory+0xf780390c>
    3cd8:	0081ffc4 	movi	r2,2047
    3cdc:	80bf3f1e 	bne	r16,r2,39dc <__alt_mem_onchip_memory+0xf78039dc>
    3ce0:	003ec806 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3ce4:	0005883a 	mov	r2,zero
    3ce8:	003fb106 	br	3bb0 <__alt_mem_onchip_memory+0xf7803bb0>
    3cec:	0007883a 	mov	r3,zero
    3cf0:	003fbc06 	br	3be4 <__alt_mem_onchip_memory+0xf7803be4>
    3cf4:	4444b03a 	or	r2,r8,r17
    3cf8:	8000871e 	bne	r16,zero,3f18 <__adddf3+0x790>
    3cfc:	1000ba26 	beq	r2,zero,3fe8 <__adddf3+0x860>
    3d00:	4984b03a 	or	r2,r9,r6
    3d04:	103ebf26 	beq	r2,zero,3804 <__alt_mem_onchip_memory+0xf7803804>
    3d08:	8985883a 	add	r2,r17,r6
    3d0c:	4247883a 	add	r3,r8,r9
    3d10:	1451803a 	cmpltu	r8,r2,r17
    3d14:	40d1883a 	add	r8,r8,r3
    3d18:	40c0202c 	andhi	r3,r8,128
    3d1c:	1023883a 	mov	r17,r2
    3d20:	183f1a26 	beq	r3,zero,398c <__alt_mem_onchip_memory+0xf780398c>
    3d24:	00bfe034 	movhi	r2,65408
    3d28:	10bfffc4 	addi	r2,r2,-1
    3d2c:	2021883a 	mov	r16,r4
    3d30:	4090703a 	and	r8,r8,r2
    3d34:	003eb306 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3d38:	4444b03a 	or	r2,r8,r17
    3d3c:	8000291e 	bne	r16,zero,3de4 <__adddf3+0x65c>
    3d40:	10004b1e 	bne	r2,zero,3e70 <__adddf3+0x6e8>
    3d44:	4990b03a 	or	r8,r9,r6
    3d48:	40008b26 	beq	r8,zero,3f78 <__adddf3+0x7f0>
    3d4c:	4811883a 	mov	r8,r9
    3d50:	3023883a 	mov	r17,r6
    3d54:	3825883a 	mov	r18,r7
    3d58:	003eaa06 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3d5c:	1021883a 	mov	r16,r2
    3d60:	0011883a 	mov	r8,zero
    3d64:	0005883a 	mov	r2,zero
    3d68:	003f0f06 	br	39a8 <__alt_mem_onchip_memory+0xf78039a8>
    3d6c:	217ff804 	addi	r5,r4,-32
    3d70:	00800804 	movi	r2,32
    3d74:	494ad83a 	srl	r5,r9,r5
    3d78:	20807d26 	beq	r4,r2,3f70 <__adddf3+0x7e8>
    3d7c:	00801004 	movi	r2,64
    3d80:	1109c83a 	sub	r4,r2,r4
    3d84:	4912983a 	sll	r9,r9,r4
    3d88:	498cb03a 	or	r6,r9,r6
    3d8c:	300cc03a 	cmpne	r6,r6,zero
    3d90:	298ab03a 	or	r5,r5,r6
    3d94:	0013883a 	mov	r9,zero
    3d98:	003f1506 	br	39f0 <__alt_mem_onchip_memory+0xf78039f0>
    3d9c:	0101ffc4 	movi	r4,2047
    3da0:	113f9a1e 	bne	r2,r4,3c0c <__alt_mem_onchip_memory+0xf7803c0c>
    3da4:	4811883a 	mov	r8,r9
    3da8:	3023883a 	mov	r17,r6
    3dac:	1021883a 	mov	r16,r2
    3db0:	3825883a 	mov	r18,r7
    3db4:	003e9306 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3db8:	8000161e 	bne	r16,zero,3e14 <__adddf3+0x68c>
    3dbc:	444ab03a 	or	r5,r8,r17
    3dc0:	28005126 	beq	r5,zero,3f08 <__adddf3+0x780>
    3dc4:	0108303a 	nor	r4,zero,r4
    3dc8:	20004d1e 	bne	r4,zero,3f00 <__adddf3+0x778>
    3dcc:	89a3883a 	add	r17,r17,r6
    3dd0:	4253883a 	add	r9,r8,r9
    3dd4:	898d803a 	cmpltu	r6,r17,r6
    3dd8:	3251883a 	add	r8,r6,r9
    3ddc:	1021883a 	mov	r16,r2
    3de0:	003f0806 	br	3a04 <__alt_mem_onchip_memory+0xf7803a04>
    3de4:	1000301e 	bne	r2,zero,3ea8 <__adddf3+0x720>
    3de8:	4984b03a 	or	r2,r9,r6
    3dec:	10007126 	beq	r2,zero,3fb4 <__adddf3+0x82c>
    3df0:	4811883a 	mov	r8,r9
    3df4:	3023883a 	mov	r17,r6
    3df8:	3825883a 	mov	r18,r7
    3dfc:	0401ffc4 	movi	r16,2047
    3e00:	003e8006 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3e04:	4462b03a 	or	r17,r8,r17
    3e08:	8822c03a 	cmpne	r17,r17,zero
    3e0c:	0007883a 	mov	r3,zero
    3e10:	003f8b06 	br	3c40 <__alt_mem_onchip_memory+0xf7803c40>
    3e14:	0141ffc4 	movi	r5,2047
    3e18:	11403b26 	beq	r2,r5,3f08 <__adddf3+0x780>
    3e1c:	0109c83a 	sub	r4,zero,r4
    3e20:	42002034 	orhi	r8,r8,128
    3e24:	01400e04 	movi	r5,56
    3e28:	29006716 	blt	r5,r4,3fc8 <__adddf3+0x840>
    3e2c:	014007c4 	movi	r5,31
    3e30:	29007016 	blt	r5,r4,3ff4 <__adddf3+0x86c>
    3e34:	01400804 	movi	r5,32
    3e38:	290bc83a 	sub	r5,r5,r4
    3e3c:	4154983a 	sll	r10,r8,r5
    3e40:	890ed83a 	srl	r7,r17,r4
    3e44:	894a983a 	sll	r5,r17,r5
    3e48:	4108d83a 	srl	r4,r8,r4
    3e4c:	51e2b03a 	or	r17,r10,r7
    3e50:	280ac03a 	cmpne	r5,r5,zero
    3e54:	8962b03a 	or	r17,r17,r5
    3e58:	89a3883a 	add	r17,r17,r6
    3e5c:	2253883a 	add	r9,r4,r9
    3e60:	898d803a 	cmpltu	r6,r17,r6
    3e64:	3251883a 	add	r8,r6,r9
    3e68:	1021883a 	mov	r16,r2
    3e6c:	003ee506 	br	3a04 <__alt_mem_onchip_memory+0xf7803a04>
    3e70:	4984b03a 	or	r2,r9,r6
    3e74:	103e6326 	beq	r2,zero,3804 <__alt_mem_onchip_memory+0xf7803804>
    3e78:	8987c83a 	sub	r3,r17,r6
    3e7c:	88c9803a 	cmpltu	r4,r17,r3
    3e80:	4245c83a 	sub	r2,r8,r9
    3e84:	1105c83a 	sub	r2,r2,r4
    3e88:	1100202c 	andhi	r4,r2,128
    3e8c:	203ebb26 	beq	r4,zero,397c <__alt_mem_onchip_memory+0xf780397c>
    3e90:	3463c83a 	sub	r17,r6,r17
    3e94:	4a07c83a 	sub	r3,r9,r8
    3e98:	344d803a 	cmpltu	r6,r6,r17
    3e9c:	1991c83a 	sub	r8,r3,r6
    3ea0:	3825883a 	mov	r18,r7
    3ea4:	003e5706 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3ea8:	4984b03a 	or	r2,r9,r6
    3eac:	10002e26 	beq	r2,zero,3f68 <__adddf3+0x7e0>
    3eb0:	4004d0fa 	srli	r2,r8,3
    3eb4:	8822d0fa 	srli	r17,r17,3
    3eb8:	4010977a 	slli	r8,r8,29
    3ebc:	10c0022c 	andhi	r3,r2,8
    3ec0:	4462b03a 	or	r17,r8,r17
    3ec4:	18000826 	beq	r3,zero,3ee8 <__adddf3+0x760>
    3ec8:	4808d0fa 	srli	r4,r9,3
    3ecc:	20c0022c 	andhi	r3,r4,8
    3ed0:	1800051e 	bne	r3,zero,3ee8 <__adddf3+0x760>
    3ed4:	300cd0fa 	srli	r6,r6,3
    3ed8:	4806977a 	slli	r3,r9,29
    3edc:	2005883a 	mov	r2,r4
    3ee0:	3825883a 	mov	r18,r7
    3ee4:	19a2b03a 	or	r17,r3,r6
    3ee8:	8810d77a 	srli	r8,r17,29
    3eec:	100490fa 	slli	r2,r2,3
    3ef0:	882290fa 	slli	r17,r17,3
    3ef4:	0401ffc4 	movi	r16,2047
    3ef8:	4090b03a 	or	r8,r8,r2
    3efc:	003e4106 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3f00:	0141ffc4 	movi	r5,2047
    3f04:	117fc71e 	bne	r2,r5,3e24 <__alt_mem_onchip_memory+0xf7803e24>
    3f08:	4811883a 	mov	r8,r9
    3f0c:	3023883a 	mov	r17,r6
    3f10:	1021883a 	mov	r16,r2
    3f14:	003e3b06 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3f18:	10002f26 	beq	r2,zero,3fd8 <__adddf3+0x850>
    3f1c:	4984b03a 	or	r2,r9,r6
    3f20:	10001126 	beq	r2,zero,3f68 <__adddf3+0x7e0>
    3f24:	4004d0fa 	srli	r2,r8,3
    3f28:	8822d0fa 	srli	r17,r17,3
    3f2c:	4010977a 	slli	r8,r8,29
    3f30:	10c0022c 	andhi	r3,r2,8
    3f34:	4462b03a 	or	r17,r8,r17
    3f38:	183feb26 	beq	r3,zero,3ee8 <__alt_mem_onchip_memory+0xf7803ee8>
    3f3c:	4808d0fa 	srli	r4,r9,3
    3f40:	20c0022c 	andhi	r3,r4,8
    3f44:	183fe81e 	bne	r3,zero,3ee8 <__alt_mem_onchip_memory+0xf7803ee8>
    3f48:	300cd0fa 	srli	r6,r6,3
    3f4c:	4806977a 	slli	r3,r9,29
    3f50:	2005883a 	mov	r2,r4
    3f54:	19a2b03a 	or	r17,r3,r6
    3f58:	003fe306 	br	3ee8 <__alt_mem_onchip_memory+0xf7803ee8>
    3f5c:	0011883a 	mov	r8,zero
    3f60:	0005883a 	mov	r2,zero
    3f64:	003e3f06 	br	3864 <__alt_mem_onchip_memory+0xf7803864>
    3f68:	0401ffc4 	movi	r16,2047
    3f6c:	003e2506 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3f70:	0013883a 	mov	r9,zero
    3f74:	003f8406 	br	3d88 <__alt_mem_onchip_memory+0xf7803d88>
    3f78:	0005883a 	mov	r2,zero
    3f7c:	0007883a 	mov	r3,zero
    3f80:	003e8906 	br	39a8 <__alt_mem_onchip_memory+0xf78039a8>
    3f84:	197ff804 	addi	r5,r3,-32
    3f88:	01000804 	movi	r4,32
    3f8c:	414ad83a 	srl	r5,r8,r5
    3f90:	19002426 	beq	r3,r4,4024 <__adddf3+0x89c>
    3f94:	01001004 	movi	r4,64
    3f98:	20c7c83a 	sub	r3,r4,r3
    3f9c:	40c6983a 	sll	r3,r8,r3
    3fa0:	1c46b03a 	or	r3,r3,r17
    3fa4:	1806c03a 	cmpne	r3,r3,zero
    3fa8:	28e2b03a 	or	r17,r5,r3
    3fac:	0007883a 	mov	r3,zero
    3fb0:	003f2306 	br	3c40 <__alt_mem_onchip_memory+0xf7803c40>
    3fb4:	0007883a 	mov	r3,zero
    3fb8:	5811883a 	mov	r8,r11
    3fbc:	00bfffc4 	movi	r2,-1
    3fc0:	0401ffc4 	movi	r16,2047
    3fc4:	003e7806 	br	39a8 <__alt_mem_onchip_memory+0xf78039a8>
    3fc8:	4462b03a 	or	r17,r8,r17
    3fcc:	8822c03a 	cmpne	r17,r17,zero
    3fd0:	0009883a 	mov	r4,zero
    3fd4:	003fa006 	br	3e58 <__alt_mem_onchip_memory+0xf7803e58>
    3fd8:	4811883a 	mov	r8,r9
    3fdc:	3023883a 	mov	r17,r6
    3fe0:	0401ffc4 	movi	r16,2047
    3fe4:	003e0706 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3fe8:	4811883a 	mov	r8,r9
    3fec:	3023883a 	mov	r17,r6
    3ff0:	003e0406 	br	3804 <__alt_mem_onchip_memory+0xf7803804>
    3ff4:	21fff804 	addi	r7,r4,-32
    3ff8:	01400804 	movi	r5,32
    3ffc:	41ced83a 	srl	r7,r8,r7
    4000:	21400a26 	beq	r4,r5,402c <__adddf3+0x8a4>
    4004:	01401004 	movi	r5,64
    4008:	2909c83a 	sub	r4,r5,r4
    400c:	4108983a 	sll	r4,r8,r4
    4010:	2448b03a 	or	r4,r4,r17
    4014:	2008c03a 	cmpne	r4,r4,zero
    4018:	3922b03a 	or	r17,r7,r4
    401c:	0009883a 	mov	r4,zero
    4020:	003f8d06 	br	3e58 <__alt_mem_onchip_memory+0xf7803e58>
    4024:	0007883a 	mov	r3,zero
    4028:	003fdd06 	br	3fa0 <__alt_mem_onchip_memory+0xf7803fa0>
    402c:	0009883a 	mov	r4,zero
    4030:	003ff706 	br	4010 <__alt_mem_onchip_memory+0xf7804010>

00004034 <__divdf3>:
    4034:	defff204 	addi	sp,sp,-56
    4038:	dd400915 	stw	r21,36(sp)
    403c:	282ad53a 	srli	r21,r5,20
    4040:	dd000815 	stw	r20,32(sp)
    4044:	2828d7fa 	srli	r20,r5,31
    4048:	dc000415 	stw	r16,16(sp)
    404c:	04000434 	movhi	r16,16
    4050:	df000c15 	stw	fp,48(sp)
    4054:	843fffc4 	addi	r16,r16,-1
    4058:	dfc00d15 	stw	ra,52(sp)
    405c:	ddc00b15 	stw	r23,44(sp)
    4060:	dd800a15 	stw	r22,40(sp)
    4064:	dcc00715 	stw	r19,28(sp)
    4068:	dc800615 	stw	r18,24(sp)
    406c:	dc400515 	stw	r17,20(sp)
    4070:	ad41ffcc 	andi	r21,r21,2047
    4074:	2c20703a 	and	r16,r5,r16
    4078:	a7003fcc 	andi	fp,r20,255
    407c:	a8006126 	beq	r21,zero,4204 <__divdf3+0x1d0>
    4080:	0081ffc4 	movi	r2,2047
    4084:	2025883a 	mov	r18,r4
    4088:	a8803726 	beq	r21,r2,4168 <__divdf3+0x134>
    408c:	80800434 	orhi	r2,r16,16
    4090:	100490fa 	slli	r2,r2,3
    4094:	2020d77a 	srli	r16,r4,29
    4098:	202490fa 	slli	r18,r4,3
    409c:	ad7f0044 	addi	r21,r21,-1023
    40a0:	80a0b03a 	or	r16,r16,r2
    40a4:	0027883a 	mov	r19,zero
    40a8:	0013883a 	mov	r9,zero
    40ac:	3804d53a 	srli	r2,r7,20
    40b0:	382cd7fa 	srli	r22,r7,31
    40b4:	04400434 	movhi	r17,16
    40b8:	8c7fffc4 	addi	r17,r17,-1
    40bc:	1081ffcc 	andi	r2,r2,2047
    40c0:	3011883a 	mov	r8,r6
    40c4:	3c62703a 	and	r17,r7,r17
    40c8:	b5c03fcc 	andi	r23,r22,255
    40cc:	10006c26 	beq	r2,zero,4280 <__divdf3+0x24c>
    40d0:	00c1ffc4 	movi	r3,2047
    40d4:	10c06426 	beq	r2,r3,4268 <__divdf3+0x234>
    40d8:	88c00434 	orhi	r3,r17,16
    40dc:	180690fa 	slli	r3,r3,3
    40e0:	3022d77a 	srli	r17,r6,29
    40e4:	301090fa 	slli	r8,r6,3
    40e8:	10bf0044 	addi	r2,r2,-1023
    40ec:	88e2b03a 	or	r17,r17,r3
    40f0:	000f883a 	mov	r7,zero
    40f4:	a58cf03a 	xor	r6,r20,r22
    40f8:	3cc8b03a 	or	r4,r7,r19
    40fc:	a8abc83a 	sub	r21,r21,r2
    4100:	008003c4 	movi	r2,15
    4104:	3007883a 	mov	r3,r6
    4108:	34c03fcc 	andi	r19,r6,255
    410c:	11009036 	bltu	r2,r4,4350 <__divdf3+0x31c>
    4110:	200890ba 	slli	r4,r4,2
    4114:	00800034 	movhi	r2,0
    4118:	10904a04 	addi	r2,r2,16680
    411c:	2089883a 	add	r4,r4,r2
    4120:	20800017 	ldw	r2,0(r4)
    4124:	1000683a 	jmp	r2
    4128:	00004350 	cmplti	zero,zero,269
    412c:	000041a0 	cmpeqi	zero,zero,262
    4130:	00004340 	call	434 <calcNet+0xe8>
    4134:	00004194 	movui	zero,262
    4138:	00004340 	call	434 <calcNet+0xe8>
    413c:	00004314 	movui	zero,268
    4140:	00004340 	call	434 <calcNet+0xe8>
    4144:	00004194 	movui	zero,262
    4148:	000041a0 	cmpeqi	zero,zero,262
    414c:	000041a0 	cmpeqi	zero,zero,262
    4150:	00004314 	movui	zero,268
    4154:	00004194 	movui	zero,262
    4158:	00004184 	movi	zero,262
    415c:	00004184 	movi	zero,262
    4160:	00004184 	movi	zero,262
    4164:	00004634 	movhi	zero,280
    4168:	2404b03a 	or	r2,r4,r16
    416c:	1000661e 	bne	r2,zero,4308 <__divdf3+0x2d4>
    4170:	04c00204 	movi	r19,8
    4174:	0021883a 	mov	r16,zero
    4178:	0025883a 	mov	r18,zero
    417c:	02400084 	movi	r9,2
    4180:	003fca06 	br	40ac <__alt_mem_onchip_memory+0xf78040ac>
    4184:	8023883a 	mov	r17,r16
    4188:	9011883a 	mov	r8,r18
    418c:	e02f883a 	mov	r23,fp
    4190:	480f883a 	mov	r7,r9
    4194:	00800084 	movi	r2,2
    4198:	3881311e 	bne	r7,r2,4660 <__divdf3+0x62c>
    419c:	b827883a 	mov	r19,r23
    41a0:	98c0004c 	andi	r3,r19,1
    41a4:	0081ffc4 	movi	r2,2047
    41a8:	000b883a 	mov	r5,zero
    41ac:	0025883a 	mov	r18,zero
    41b0:	1004953a 	slli	r2,r2,20
    41b4:	18c03fcc 	andi	r3,r3,255
    41b8:	04400434 	movhi	r17,16
    41bc:	8c7fffc4 	addi	r17,r17,-1
    41c0:	180697fa 	slli	r3,r3,31
    41c4:	2c4a703a 	and	r5,r5,r17
    41c8:	288ab03a 	or	r5,r5,r2
    41cc:	28c6b03a 	or	r3,r5,r3
    41d0:	9005883a 	mov	r2,r18
    41d4:	dfc00d17 	ldw	ra,52(sp)
    41d8:	df000c17 	ldw	fp,48(sp)
    41dc:	ddc00b17 	ldw	r23,44(sp)
    41e0:	dd800a17 	ldw	r22,40(sp)
    41e4:	dd400917 	ldw	r21,36(sp)
    41e8:	dd000817 	ldw	r20,32(sp)
    41ec:	dcc00717 	ldw	r19,28(sp)
    41f0:	dc800617 	ldw	r18,24(sp)
    41f4:	dc400517 	ldw	r17,20(sp)
    41f8:	dc000417 	ldw	r16,16(sp)
    41fc:	dec00e04 	addi	sp,sp,56
    4200:	f800283a 	ret
    4204:	2404b03a 	or	r2,r4,r16
    4208:	2027883a 	mov	r19,r4
    420c:	10003926 	beq	r2,zero,42f4 <__divdf3+0x2c0>
    4210:	80012e26 	beq	r16,zero,46cc <__divdf3+0x698>
    4214:	8009883a 	mov	r4,r16
    4218:	d9800315 	stw	r6,12(sp)
    421c:	d9c00215 	stw	r7,8(sp)
    4220:	0005f140 	call	5f14 <__clzsi2>
    4224:	d9800317 	ldw	r6,12(sp)
    4228:	d9c00217 	ldw	r7,8(sp)
    422c:	113ffd44 	addi	r4,r2,-11
    4230:	00c00704 	movi	r3,28
    4234:	19012116 	blt	r3,r4,46bc <__divdf3+0x688>
    4238:	00c00744 	movi	r3,29
    423c:	147ffe04 	addi	r17,r2,-8
    4240:	1907c83a 	sub	r3,r3,r4
    4244:	8460983a 	sll	r16,r16,r17
    4248:	98c6d83a 	srl	r3,r19,r3
    424c:	9c64983a 	sll	r18,r19,r17
    4250:	1c20b03a 	or	r16,r3,r16
    4254:	1080fcc4 	addi	r2,r2,1011
    4258:	00abc83a 	sub	r21,zero,r2
    425c:	0027883a 	mov	r19,zero
    4260:	0013883a 	mov	r9,zero
    4264:	003f9106 	br	40ac <__alt_mem_onchip_memory+0xf78040ac>
    4268:	3446b03a 	or	r3,r6,r17
    426c:	18001f1e 	bne	r3,zero,42ec <__divdf3+0x2b8>
    4270:	0023883a 	mov	r17,zero
    4274:	0011883a 	mov	r8,zero
    4278:	01c00084 	movi	r7,2
    427c:	003f9d06 	br	40f4 <__alt_mem_onchip_memory+0xf78040f4>
    4280:	3446b03a 	or	r3,r6,r17
    4284:	18001526 	beq	r3,zero,42dc <__divdf3+0x2a8>
    4288:	88011b26 	beq	r17,zero,46f8 <__divdf3+0x6c4>
    428c:	8809883a 	mov	r4,r17
    4290:	d9800315 	stw	r6,12(sp)
    4294:	da400115 	stw	r9,4(sp)
    4298:	0005f140 	call	5f14 <__clzsi2>
    429c:	d9800317 	ldw	r6,12(sp)
    42a0:	da400117 	ldw	r9,4(sp)
    42a4:	113ffd44 	addi	r4,r2,-11
    42a8:	00c00704 	movi	r3,28
    42ac:	19010e16 	blt	r3,r4,46e8 <__divdf3+0x6b4>
    42b0:	00c00744 	movi	r3,29
    42b4:	123ffe04 	addi	r8,r2,-8
    42b8:	1907c83a 	sub	r3,r3,r4
    42bc:	8a22983a 	sll	r17,r17,r8
    42c0:	30c6d83a 	srl	r3,r6,r3
    42c4:	3210983a 	sll	r8,r6,r8
    42c8:	1c62b03a 	or	r17,r3,r17
    42cc:	1080fcc4 	addi	r2,r2,1011
    42d0:	0085c83a 	sub	r2,zero,r2
    42d4:	000f883a 	mov	r7,zero
    42d8:	003f8606 	br	40f4 <__alt_mem_onchip_memory+0xf78040f4>
    42dc:	0023883a 	mov	r17,zero
    42e0:	0011883a 	mov	r8,zero
    42e4:	01c00044 	movi	r7,1
    42e8:	003f8206 	br	40f4 <__alt_mem_onchip_memory+0xf78040f4>
    42ec:	01c000c4 	movi	r7,3
    42f0:	003f8006 	br	40f4 <__alt_mem_onchip_memory+0xf78040f4>
    42f4:	04c00104 	movi	r19,4
    42f8:	0021883a 	mov	r16,zero
    42fc:	0025883a 	mov	r18,zero
    4300:	02400044 	movi	r9,1
    4304:	003f6906 	br	40ac <__alt_mem_onchip_memory+0xf78040ac>
    4308:	04c00304 	movi	r19,12
    430c:	024000c4 	movi	r9,3
    4310:	003f6606 	br	40ac <__alt_mem_onchip_memory+0xf78040ac>
    4314:	01400434 	movhi	r5,16
    4318:	0007883a 	mov	r3,zero
    431c:	297fffc4 	addi	r5,r5,-1
    4320:	04bfffc4 	movi	r18,-1
    4324:	0081ffc4 	movi	r2,2047
    4328:	003fa106 	br	41b0 <__alt_mem_onchip_memory+0xf78041b0>
    432c:	00c00044 	movi	r3,1
    4330:	1887c83a 	sub	r3,r3,r2
    4334:	01000e04 	movi	r4,56
    4338:	20c1210e 	bge	r4,r3,47c0 <__divdf3+0x78c>
    433c:	98c0004c 	andi	r3,r19,1
    4340:	0005883a 	mov	r2,zero
    4344:	000b883a 	mov	r5,zero
    4348:	0025883a 	mov	r18,zero
    434c:	003f9806 	br	41b0 <__alt_mem_onchip_memory+0xf78041b0>
    4350:	8c00fd36 	bltu	r17,r16,4748 <__divdf3+0x714>
    4354:	8440fb26 	beq	r16,r17,4744 <__divdf3+0x710>
    4358:	8007883a 	mov	r3,r16
    435c:	ad7fffc4 	addi	r21,r21,-1
    4360:	0021883a 	mov	r16,zero
    4364:	4004d63a 	srli	r2,r8,24
    4368:	8822923a 	slli	r17,r17,8
    436c:	1809883a 	mov	r4,r3
    4370:	402c923a 	slli	r22,r8,8
    4374:	88b8b03a 	or	fp,r17,r2
    4378:	e028d43a 	srli	r20,fp,16
    437c:	d8c00015 	stw	r3,0(sp)
    4380:	e5ffffcc 	andi	r23,fp,65535
    4384:	a00b883a 	mov	r5,r20
    4388:	00060700 	call	6070 <__udivsi3>
    438c:	d8c00017 	ldw	r3,0(sp)
    4390:	a00b883a 	mov	r5,r20
    4394:	d8800315 	stw	r2,12(sp)
    4398:	1809883a 	mov	r4,r3
    439c:	00060d40 	call	60d4 <__umodsi3>
    43a0:	d9800317 	ldw	r6,12(sp)
    43a4:	1006943a 	slli	r3,r2,16
    43a8:	9004d43a 	srli	r2,r18,16
    43ac:	b9a3383a 	mul	r17,r23,r6
    43b0:	10c4b03a 	or	r2,r2,r3
    43b4:	1440062e 	bgeu	r2,r17,43d0 <__divdf3+0x39c>
    43b8:	1705883a 	add	r2,r2,fp
    43bc:	30ffffc4 	addi	r3,r6,-1
    43c0:	1700ee36 	bltu	r2,fp,477c <__divdf3+0x748>
    43c4:	1440ed2e 	bgeu	r2,r17,477c <__divdf3+0x748>
    43c8:	31bfff84 	addi	r6,r6,-2
    43cc:	1705883a 	add	r2,r2,fp
    43d0:	1463c83a 	sub	r17,r2,r17
    43d4:	a00b883a 	mov	r5,r20
    43d8:	8809883a 	mov	r4,r17
    43dc:	d9800315 	stw	r6,12(sp)
    43e0:	00060700 	call	6070 <__udivsi3>
    43e4:	a00b883a 	mov	r5,r20
    43e8:	8809883a 	mov	r4,r17
    43ec:	d8800215 	stw	r2,8(sp)
    43f0:	00060d40 	call	60d4 <__umodsi3>
    43f4:	d9c00217 	ldw	r7,8(sp)
    43f8:	1004943a 	slli	r2,r2,16
    43fc:	94bfffcc 	andi	r18,r18,65535
    4400:	b9d1383a 	mul	r8,r23,r7
    4404:	90a4b03a 	or	r18,r18,r2
    4408:	d9800317 	ldw	r6,12(sp)
    440c:	9200062e 	bgeu	r18,r8,4428 <__divdf3+0x3f4>
    4410:	9725883a 	add	r18,r18,fp
    4414:	38bfffc4 	addi	r2,r7,-1
    4418:	9700d636 	bltu	r18,fp,4774 <__divdf3+0x740>
    441c:	9200d52e 	bgeu	r18,r8,4774 <__divdf3+0x740>
    4420:	39ffff84 	addi	r7,r7,-2
    4424:	9725883a 	add	r18,r18,fp
    4428:	3004943a 	slli	r2,r6,16
    442c:	b012d43a 	srli	r9,r22,16
    4430:	b1bfffcc 	andi	r6,r22,65535
    4434:	11e2b03a 	or	r17,r2,r7
    4438:	8806d43a 	srli	r3,r17,16
    443c:	893fffcc 	andi	r4,r17,65535
    4440:	218b383a 	mul	r5,r4,r6
    4444:	30c5383a 	mul	r2,r6,r3
    4448:	2249383a 	mul	r4,r4,r9
    444c:	280ed43a 	srli	r7,r5,16
    4450:	9225c83a 	sub	r18,r18,r8
    4454:	2089883a 	add	r4,r4,r2
    4458:	3909883a 	add	r4,r7,r4
    445c:	1a47383a 	mul	r3,r3,r9
    4460:	2080022e 	bgeu	r4,r2,446c <__divdf3+0x438>
    4464:	00800074 	movhi	r2,1
    4468:	1887883a 	add	r3,r3,r2
    446c:	2004d43a 	srli	r2,r4,16
    4470:	2008943a 	slli	r4,r4,16
    4474:	297fffcc 	andi	r5,r5,65535
    4478:	10c7883a 	add	r3,r2,r3
    447c:	2149883a 	add	r4,r4,r5
    4480:	90c0a536 	bltu	r18,r3,4718 <__divdf3+0x6e4>
    4484:	90c0bf26 	beq	r18,r3,4784 <__divdf3+0x750>
    4488:	90c7c83a 	sub	r3,r18,r3
    448c:	810fc83a 	sub	r7,r16,r4
    4490:	81e5803a 	cmpltu	r18,r16,r7
    4494:	1ca5c83a 	sub	r18,r3,r18
    4498:	e480c126 	beq	fp,r18,47a0 <__divdf3+0x76c>
    449c:	a00b883a 	mov	r5,r20
    44a0:	9009883a 	mov	r4,r18
    44a4:	d9800315 	stw	r6,12(sp)
    44a8:	d9c00215 	stw	r7,8(sp)
    44ac:	da400115 	stw	r9,4(sp)
    44b0:	00060700 	call	6070 <__udivsi3>
    44b4:	a00b883a 	mov	r5,r20
    44b8:	9009883a 	mov	r4,r18
    44bc:	d8800015 	stw	r2,0(sp)
    44c0:	00060d40 	call	60d4 <__umodsi3>
    44c4:	d9c00217 	ldw	r7,8(sp)
    44c8:	da000017 	ldw	r8,0(sp)
    44cc:	1006943a 	slli	r3,r2,16
    44d0:	3804d43a 	srli	r2,r7,16
    44d4:	ba21383a 	mul	r16,r23,r8
    44d8:	d9800317 	ldw	r6,12(sp)
    44dc:	10c4b03a 	or	r2,r2,r3
    44e0:	da400117 	ldw	r9,4(sp)
    44e4:	1400062e 	bgeu	r2,r16,4500 <__divdf3+0x4cc>
    44e8:	1705883a 	add	r2,r2,fp
    44ec:	40ffffc4 	addi	r3,r8,-1
    44f0:	1700ad36 	bltu	r2,fp,47a8 <__divdf3+0x774>
    44f4:	1400ac2e 	bgeu	r2,r16,47a8 <__divdf3+0x774>
    44f8:	423fff84 	addi	r8,r8,-2
    44fc:	1705883a 	add	r2,r2,fp
    4500:	1421c83a 	sub	r16,r2,r16
    4504:	a00b883a 	mov	r5,r20
    4508:	8009883a 	mov	r4,r16
    450c:	d9800315 	stw	r6,12(sp)
    4510:	d9c00215 	stw	r7,8(sp)
    4514:	da000015 	stw	r8,0(sp)
    4518:	da400115 	stw	r9,4(sp)
    451c:	00060700 	call	6070 <__udivsi3>
    4520:	8009883a 	mov	r4,r16
    4524:	a00b883a 	mov	r5,r20
    4528:	1025883a 	mov	r18,r2
    452c:	00060d40 	call	60d4 <__umodsi3>
    4530:	d9c00217 	ldw	r7,8(sp)
    4534:	1004943a 	slli	r2,r2,16
    4538:	bcaf383a 	mul	r23,r23,r18
    453c:	393fffcc 	andi	r4,r7,65535
    4540:	2088b03a 	or	r4,r4,r2
    4544:	d9800317 	ldw	r6,12(sp)
    4548:	da000017 	ldw	r8,0(sp)
    454c:	da400117 	ldw	r9,4(sp)
    4550:	25c0062e 	bgeu	r4,r23,456c <__divdf3+0x538>
    4554:	2709883a 	add	r4,r4,fp
    4558:	90bfffc4 	addi	r2,r18,-1
    455c:	27009436 	bltu	r4,fp,47b0 <__divdf3+0x77c>
    4560:	25c0932e 	bgeu	r4,r23,47b0 <__divdf3+0x77c>
    4564:	94bfff84 	addi	r18,r18,-2
    4568:	2709883a 	add	r4,r4,fp
    456c:	4004943a 	slli	r2,r8,16
    4570:	25efc83a 	sub	r23,r4,r23
    4574:	1490b03a 	or	r8,r2,r18
    4578:	4008d43a 	srli	r4,r8,16
    457c:	40ffffcc 	andi	r3,r8,65535
    4580:	30c5383a 	mul	r2,r6,r3
    4584:	1a47383a 	mul	r3,r3,r9
    4588:	310d383a 	mul	r6,r6,r4
    458c:	100ad43a 	srli	r5,r2,16
    4590:	4913383a 	mul	r9,r9,r4
    4594:	1987883a 	add	r3,r3,r6
    4598:	28c7883a 	add	r3,r5,r3
    459c:	1980022e 	bgeu	r3,r6,45a8 <__divdf3+0x574>
    45a0:	01000074 	movhi	r4,1
    45a4:	4913883a 	add	r9,r9,r4
    45a8:	1808d43a 	srli	r4,r3,16
    45ac:	1806943a 	slli	r3,r3,16
    45b0:	10bfffcc 	andi	r2,r2,65535
    45b4:	2253883a 	add	r9,r4,r9
    45b8:	1887883a 	add	r3,r3,r2
    45bc:	ba403836 	bltu	r23,r9,46a0 <__divdf3+0x66c>
    45c0:	ba403626 	beq	r23,r9,469c <__divdf3+0x668>
    45c4:	42000054 	ori	r8,r8,1
    45c8:	a880ffc4 	addi	r2,r21,1023
    45cc:	00bf570e 	bge	zero,r2,432c <__alt_mem_onchip_memory+0xf780432c>
    45d0:	40c001cc 	andi	r3,r8,7
    45d4:	18000726 	beq	r3,zero,45f4 <__divdf3+0x5c0>
    45d8:	40c003cc 	andi	r3,r8,15
    45dc:	01000104 	movi	r4,4
    45e0:	19000426 	beq	r3,r4,45f4 <__divdf3+0x5c0>
    45e4:	4107883a 	add	r3,r8,r4
    45e8:	1a11803a 	cmpltu	r8,r3,r8
    45ec:	8a23883a 	add	r17,r17,r8
    45f0:	1811883a 	mov	r8,r3
    45f4:	88c0402c 	andhi	r3,r17,256
    45f8:	18000426 	beq	r3,zero,460c <__divdf3+0x5d8>
    45fc:	00ffc034 	movhi	r3,65280
    4600:	18ffffc4 	addi	r3,r3,-1
    4604:	a8810004 	addi	r2,r21,1024
    4608:	88e2703a 	and	r17,r17,r3
    460c:	00c1ff84 	movi	r3,2046
    4610:	18bee316 	blt	r3,r2,41a0 <__alt_mem_onchip_memory+0xf78041a0>
    4614:	8824977a 	slli	r18,r17,29
    4618:	4010d0fa 	srli	r8,r8,3
    461c:	8822927a 	slli	r17,r17,9
    4620:	1081ffcc 	andi	r2,r2,2047
    4624:	9224b03a 	or	r18,r18,r8
    4628:	880ad33a 	srli	r5,r17,12
    462c:	98c0004c 	andi	r3,r19,1
    4630:	003edf06 	br	41b0 <__alt_mem_onchip_memory+0xf78041b0>
    4634:	8080022c 	andhi	r2,r16,8
    4638:	10001226 	beq	r2,zero,4684 <__divdf3+0x650>
    463c:	8880022c 	andhi	r2,r17,8
    4640:	1000101e 	bne	r2,zero,4684 <__divdf3+0x650>
    4644:	00800434 	movhi	r2,16
    4648:	89400234 	orhi	r5,r17,8
    464c:	10bfffc4 	addi	r2,r2,-1
    4650:	b007883a 	mov	r3,r22
    4654:	288a703a 	and	r5,r5,r2
    4658:	4025883a 	mov	r18,r8
    465c:	003f3106 	br	4324 <__alt_mem_onchip_memory+0xf7804324>
    4660:	008000c4 	movi	r2,3
    4664:	3880a626 	beq	r7,r2,4900 <__divdf3+0x8cc>
    4668:	00800044 	movi	r2,1
    466c:	3880521e 	bne	r7,r2,47b8 <__divdf3+0x784>
    4670:	b807883a 	mov	r3,r23
    4674:	0005883a 	mov	r2,zero
    4678:	000b883a 	mov	r5,zero
    467c:	0025883a 	mov	r18,zero
    4680:	003ecb06 	br	41b0 <__alt_mem_onchip_memory+0xf78041b0>
    4684:	00800434 	movhi	r2,16
    4688:	81400234 	orhi	r5,r16,8
    468c:	10bfffc4 	addi	r2,r2,-1
    4690:	a007883a 	mov	r3,r20
    4694:	288a703a 	and	r5,r5,r2
    4698:	003f2206 	br	4324 <__alt_mem_onchip_memory+0xf7804324>
    469c:	183fca26 	beq	r3,zero,45c8 <__alt_mem_onchip_memory+0xf78045c8>
    46a0:	e5ef883a 	add	r23,fp,r23
    46a4:	40bfffc4 	addi	r2,r8,-1
    46a8:	bf00392e 	bgeu	r23,fp,4790 <__divdf3+0x75c>
    46ac:	1011883a 	mov	r8,r2
    46b0:	ba7fc41e 	bne	r23,r9,45c4 <__alt_mem_onchip_memory+0xf78045c4>
    46b4:	b0ffc31e 	bne	r22,r3,45c4 <__alt_mem_onchip_memory+0xf78045c4>
    46b8:	003fc306 	br	45c8 <__alt_mem_onchip_memory+0xf78045c8>
    46bc:	143ff604 	addi	r16,r2,-40
    46c0:	9c20983a 	sll	r16,r19,r16
    46c4:	0025883a 	mov	r18,zero
    46c8:	003ee206 	br	4254 <__alt_mem_onchip_memory+0xf7804254>
    46cc:	d9800315 	stw	r6,12(sp)
    46d0:	d9c00215 	stw	r7,8(sp)
    46d4:	0005f140 	call	5f14 <__clzsi2>
    46d8:	10800804 	addi	r2,r2,32
    46dc:	d9c00217 	ldw	r7,8(sp)
    46e0:	d9800317 	ldw	r6,12(sp)
    46e4:	003ed106 	br	422c <__alt_mem_onchip_memory+0xf780422c>
    46e8:	147ff604 	addi	r17,r2,-40
    46ec:	3462983a 	sll	r17,r6,r17
    46f0:	0011883a 	mov	r8,zero
    46f4:	003ef506 	br	42cc <__alt_mem_onchip_memory+0xf78042cc>
    46f8:	3009883a 	mov	r4,r6
    46fc:	d9800315 	stw	r6,12(sp)
    4700:	da400115 	stw	r9,4(sp)
    4704:	0005f140 	call	5f14 <__clzsi2>
    4708:	10800804 	addi	r2,r2,32
    470c:	da400117 	ldw	r9,4(sp)
    4710:	d9800317 	ldw	r6,12(sp)
    4714:	003ee306 	br	42a4 <__alt_mem_onchip_memory+0xf78042a4>
    4718:	85a1883a 	add	r16,r16,r22
    471c:	8585803a 	cmpltu	r2,r16,r22
    4720:	1705883a 	add	r2,r2,fp
    4724:	14a5883a 	add	r18,r2,r18
    4728:	88bfffc4 	addi	r2,r17,-1
    472c:	e4800c2e 	bgeu	fp,r18,4760 <__divdf3+0x72c>
    4730:	90c03e36 	bltu	r18,r3,482c <__divdf3+0x7f8>
    4734:	1c806926 	beq	r3,r18,48dc <__divdf3+0x8a8>
    4738:	90c7c83a 	sub	r3,r18,r3
    473c:	1023883a 	mov	r17,r2
    4740:	003f5206 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4744:	923f0436 	bltu	r18,r8,4358 <__alt_mem_onchip_memory+0xf7804358>
    4748:	800897fa 	slli	r4,r16,31
    474c:	9004d07a 	srli	r2,r18,1
    4750:	8006d07a 	srli	r3,r16,1
    4754:	902097fa 	slli	r16,r18,31
    4758:	20a4b03a 	or	r18,r4,r2
    475c:	003f0106 	br	4364 <__alt_mem_onchip_memory+0xf7804364>
    4760:	e4bff51e 	bne	fp,r18,4738 <__alt_mem_onchip_memory+0xf7804738>
    4764:	85bff22e 	bgeu	r16,r22,4730 <__alt_mem_onchip_memory+0xf7804730>
    4768:	e0c7c83a 	sub	r3,fp,r3
    476c:	1023883a 	mov	r17,r2
    4770:	003f4606 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4774:	100f883a 	mov	r7,r2
    4778:	003f2b06 	br	4428 <__alt_mem_onchip_memory+0xf7804428>
    477c:	180d883a 	mov	r6,r3
    4780:	003f1306 	br	43d0 <__alt_mem_onchip_memory+0xf78043d0>
    4784:	813fe436 	bltu	r16,r4,4718 <__alt_mem_onchip_memory+0xf7804718>
    4788:	0007883a 	mov	r3,zero
    478c:	003f3f06 	br	448c <__alt_mem_onchip_memory+0xf780448c>
    4790:	ba402c36 	bltu	r23,r9,4844 <__divdf3+0x810>
    4794:	4dc05426 	beq	r9,r23,48e8 <__divdf3+0x8b4>
    4798:	1011883a 	mov	r8,r2
    479c:	003f8906 	br	45c4 <__alt_mem_onchip_memory+0xf78045c4>
    47a0:	023fffc4 	movi	r8,-1
    47a4:	003f8806 	br	45c8 <__alt_mem_onchip_memory+0xf78045c8>
    47a8:	1811883a 	mov	r8,r3
    47ac:	003f5406 	br	4500 <__alt_mem_onchip_memory+0xf7804500>
    47b0:	1025883a 	mov	r18,r2
    47b4:	003f6d06 	br	456c <__alt_mem_onchip_memory+0xf780456c>
    47b8:	b827883a 	mov	r19,r23
    47bc:	003f8206 	br	45c8 <__alt_mem_onchip_memory+0xf78045c8>
    47c0:	010007c4 	movi	r4,31
    47c4:	20c02616 	blt	r4,r3,4860 <__divdf3+0x82c>
    47c8:	00800804 	movi	r2,32
    47cc:	10c5c83a 	sub	r2,r2,r3
    47d0:	888a983a 	sll	r5,r17,r2
    47d4:	40c8d83a 	srl	r4,r8,r3
    47d8:	4084983a 	sll	r2,r8,r2
    47dc:	88e2d83a 	srl	r17,r17,r3
    47e0:	2906b03a 	or	r3,r5,r4
    47e4:	1004c03a 	cmpne	r2,r2,zero
    47e8:	1886b03a 	or	r3,r3,r2
    47ec:	188001cc 	andi	r2,r3,7
    47f0:	10000726 	beq	r2,zero,4810 <__divdf3+0x7dc>
    47f4:	188003cc 	andi	r2,r3,15
    47f8:	01000104 	movi	r4,4
    47fc:	11000426 	beq	r2,r4,4810 <__divdf3+0x7dc>
    4800:	1805883a 	mov	r2,r3
    4804:	10c00104 	addi	r3,r2,4
    4808:	1885803a 	cmpltu	r2,r3,r2
    480c:	88a3883a 	add	r17,r17,r2
    4810:	8880202c 	andhi	r2,r17,128
    4814:	10002726 	beq	r2,zero,48b4 <__divdf3+0x880>
    4818:	98c0004c 	andi	r3,r19,1
    481c:	00800044 	movi	r2,1
    4820:	000b883a 	mov	r5,zero
    4824:	0025883a 	mov	r18,zero
    4828:	003e6106 	br	41b0 <__alt_mem_onchip_memory+0xf78041b0>
    482c:	85a1883a 	add	r16,r16,r22
    4830:	8585803a 	cmpltu	r2,r16,r22
    4834:	1705883a 	add	r2,r2,fp
    4838:	14a5883a 	add	r18,r2,r18
    483c:	8c7fff84 	addi	r17,r17,-2
    4840:	003f1106 	br	4488 <__alt_mem_onchip_memory+0xf7804488>
    4844:	b589883a 	add	r4,r22,r22
    4848:	25ad803a 	cmpltu	r22,r4,r22
    484c:	b739883a 	add	fp,r22,fp
    4850:	40bfff84 	addi	r2,r8,-2
    4854:	bf2f883a 	add	r23,r23,fp
    4858:	202d883a 	mov	r22,r4
    485c:	003f9306 	br	46ac <__alt_mem_onchip_memory+0xf78046ac>
    4860:	013ff844 	movi	r4,-31
    4864:	2085c83a 	sub	r2,r4,r2
    4868:	8888d83a 	srl	r4,r17,r2
    486c:	00800804 	movi	r2,32
    4870:	18802126 	beq	r3,r2,48f8 <__divdf3+0x8c4>
    4874:	00801004 	movi	r2,64
    4878:	10c5c83a 	sub	r2,r2,r3
    487c:	8884983a 	sll	r2,r17,r2
    4880:	1204b03a 	or	r2,r2,r8
    4884:	1004c03a 	cmpne	r2,r2,zero
    4888:	2084b03a 	or	r2,r4,r2
    488c:	144001cc 	andi	r17,r2,7
    4890:	88000d1e 	bne	r17,zero,48c8 <__divdf3+0x894>
    4894:	000b883a 	mov	r5,zero
    4898:	1024d0fa 	srli	r18,r2,3
    489c:	98c0004c 	andi	r3,r19,1
    48a0:	0005883a 	mov	r2,zero
    48a4:	9464b03a 	or	r18,r18,r17
    48a8:	003e4106 	br	41b0 <__alt_mem_onchip_memory+0xf78041b0>
    48ac:	1007883a 	mov	r3,r2
    48b0:	0023883a 	mov	r17,zero
    48b4:	880a927a 	slli	r5,r17,9
    48b8:	1805883a 	mov	r2,r3
    48bc:	8822977a 	slli	r17,r17,29
    48c0:	280ad33a 	srli	r5,r5,12
    48c4:	003ff406 	br	4898 <__alt_mem_onchip_memory+0xf7804898>
    48c8:	10c003cc 	andi	r3,r2,15
    48cc:	01000104 	movi	r4,4
    48d0:	193ff626 	beq	r3,r4,48ac <__alt_mem_onchip_memory+0xf78048ac>
    48d4:	0023883a 	mov	r17,zero
    48d8:	003fca06 	br	4804 <__alt_mem_onchip_memory+0xf7804804>
    48dc:	813fd336 	bltu	r16,r4,482c <__alt_mem_onchip_memory+0xf780482c>
    48e0:	1023883a 	mov	r17,r2
    48e4:	003fa806 	br	4788 <__alt_mem_onchip_memory+0xf7804788>
    48e8:	b0ffd636 	bltu	r22,r3,4844 <__alt_mem_onchip_memory+0xf7804844>
    48ec:	1011883a 	mov	r8,r2
    48f0:	b0ff341e 	bne	r22,r3,45c4 <__alt_mem_onchip_memory+0xf78045c4>
    48f4:	003f3406 	br	45c8 <__alt_mem_onchip_memory+0xf78045c8>
    48f8:	0005883a 	mov	r2,zero
    48fc:	003fe006 	br	4880 <__alt_mem_onchip_memory+0xf7804880>
    4900:	00800434 	movhi	r2,16
    4904:	89400234 	orhi	r5,r17,8
    4908:	10bfffc4 	addi	r2,r2,-1
    490c:	b807883a 	mov	r3,r23
    4910:	288a703a 	and	r5,r5,r2
    4914:	4025883a 	mov	r18,r8
    4918:	003e8206 	br	4324 <__alt_mem_onchip_memory+0xf7804324>

0000491c <__gedf2>:
    491c:	2804d53a 	srli	r2,r5,20
    4920:	3806d53a 	srli	r3,r7,20
    4924:	02000434 	movhi	r8,16
    4928:	423fffc4 	addi	r8,r8,-1
    492c:	1081ffcc 	andi	r2,r2,2047
    4930:	0241ffc4 	movi	r9,2047
    4934:	2a14703a 	and	r10,r5,r8
    4938:	18c1ffcc 	andi	r3,r3,2047
    493c:	3a10703a 	and	r8,r7,r8
    4940:	280ad7fa 	srli	r5,r5,31
    4944:	380ed7fa 	srli	r7,r7,31
    4948:	12401d26 	beq	r2,r9,49c0 <__gedf2+0xa4>
    494c:	0241ffc4 	movi	r9,2047
    4950:	1a401226 	beq	r3,r9,499c <__gedf2+0x80>
    4954:	1000081e 	bne	r2,zero,4978 <__gedf2+0x5c>
    4958:	2296b03a 	or	r11,r4,r10
    495c:	5813003a 	cmpeq	r9,r11,zero
    4960:	1800091e 	bne	r3,zero,4988 <__gedf2+0x6c>
    4964:	3218b03a 	or	r12,r6,r8
    4968:	6000071e 	bne	r12,zero,4988 <__gedf2+0x6c>
    496c:	0005883a 	mov	r2,zero
    4970:	5800101e 	bne	r11,zero,49b4 <__gedf2+0x98>
    4974:	f800283a 	ret
    4978:	18000c1e 	bne	r3,zero,49ac <__gedf2+0x90>
    497c:	3212b03a 	or	r9,r6,r8
    4980:	48000c26 	beq	r9,zero,49b4 <__gedf2+0x98>
    4984:	0013883a 	mov	r9,zero
    4988:	39c03fcc 	andi	r7,r7,255
    498c:	48000826 	beq	r9,zero,49b0 <__gedf2+0x94>
    4990:	38000926 	beq	r7,zero,49b8 <__gedf2+0x9c>
    4994:	00800044 	movi	r2,1
    4998:	f800283a 	ret
    499c:	3212b03a 	or	r9,r6,r8
    49a0:	483fec26 	beq	r9,zero,4954 <__alt_mem_onchip_memory+0xf7804954>
    49a4:	00bfff84 	movi	r2,-2
    49a8:	f800283a 	ret
    49ac:	39c03fcc 	andi	r7,r7,255
    49b0:	29c00626 	beq	r5,r7,49cc <__gedf2+0xb0>
    49b4:	283ff726 	beq	r5,zero,4994 <__alt_mem_onchip_memory+0xf7804994>
    49b8:	00bfffc4 	movi	r2,-1
    49bc:	f800283a 	ret
    49c0:	2292b03a 	or	r9,r4,r10
    49c4:	483fe126 	beq	r9,zero,494c <__alt_mem_onchip_memory+0xf780494c>
    49c8:	003ff606 	br	49a4 <__alt_mem_onchip_memory+0xf78049a4>
    49cc:	18bff916 	blt	r3,r2,49b4 <__alt_mem_onchip_memory+0xf78049b4>
    49d0:	10c00316 	blt	r2,r3,49e0 <__gedf2+0xc4>
    49d4:	42bff736 	bltu	r8,r10,49b4 <__alt_mem_onchip_memory+0xf78049b4>
    49d8:	52000326 	beq	r10,r8,49e8 <__gedf2+0xcc>
    49dc:	5200042e 	bgeu	r10,r8,49f0 <__gedf2+0xd4>
    49e0:	283fec1e 	bne	r5,zero,4994 <__alt_mem_onchip_memory+0xf7804994>
    49e4:	003ff406 	br	49b8 <__alt_mem_onchip_memory+0xf78049b8>
    49e8:	313ff236 	bltu	r6,r4,49b4 <__alt_mem_onchip_memory+0xf78049b4>
    49ec:	21bffc36 	bltu	r4,r6,49e0 <__alt_mem_onchip_memory+0xf78049e0>
    49f0:	0005883a 	mov	r2,zero
    49f4:	f800283a 	ret

000049f8 <__ledf2>:
    49f8:	2804d53a 	srli	r2,r5,20
    49fc:	3810d53a 	srli	r8,r7,20
    4a00:	00c00434 	movhi	r3,16
    4a04:	18ffffc4 	addi	r3,r3,-1
    4a08:	1081ffcc 	andi	r2,r2,2047
    4a0c:	0241ffc4 	movi	r9,2047
    4a10:	28d4703a 	and	r10,r5,r3
    4a14:	4201ffcc 	andi	r8,r8,2047
    4a18:	38c6703a 	and	r3,r7,r3
    4a1c:	280ad7fa 	srli	r5,r5,31
    4a20:	380ed7fa 	srli	r7,r7,31
    4a24:	12401f26 	beq	r2,r9,4aa4 <__ledf2+0xac>
    4a28:	0241ffc4 	movi	r9,2047
    4a2c:	42401426 	beq	r8,r9,4a80 <__ledf2+0x88>
    4a30:	1000091e 	bne	r2,zero,4a58 <__ledf2+0x60>
    4a34:	2296b03a 	or	r11,r4,r10
    4a38:	5813003a 	cmpeq	r9,r11,zero
    4a3c:	29403fcc 	andi	r5,r5,255
    4a40:	40000a1e 	bne	r8,zero,4a6c <__ledf2+0x74>
    4a44:	30d8b03a 	or	r12,r6,r3
    4a48:	6000081e 	bne	r12,zero,4a6c <__ledf2+0x74>
    4a4c:	0005883a 	mov	r2,zero
    4a50:	5800111e 	bne	r11,zero,4a98 <__ledf2+0xa0>
    4a54:	f800283a 	ret
    4a58:	29403fcc 	andi	r5,r5,255
    4a5c:	40000c1e 	bne	r8,zero,4a90 <__ledf2+0x98>
    4a60:	30d2b03a 	or	r9,r6,r3
    4a64:	48000c26 	beq	r9,zero,4a98 <__ledf2+0xa0>
    4a68:	0013883a 	mov	r9,zero
    4a6c:	39c03fcc 	andi	r7,r7,255
    4a70:	48000826 	beq	r9,zero,4a94 <__ledf2+0x9c>
    4a74:	38001126 	beq	r7,zero,4abc <__ledf2+0xc4>
    4a78:	00800044 	movi	r2,1
    4a7c:	f800283a 	ret
    4a80:	30d2b03a 	or	r9,r6,r3
    4a84:	483fea26 	beq	r9,zero,4a30 <__alt_mem_onchip_memory+0xf7804a30>
    4a88:	00800084 	movi	r2,2
    4a8c:	f800283a 	ret
    4a90:	39c03fcc 	andi	r7,r7,255
    4a94:	39400726 	beq	r7,r5,4ab4 <__ledf2+0xbc>
    4a98:	2800081e 	bne	r5,zero,4abc <__ledf2+0xc4>
    4a9c:	00800044 	movi	r2,1
    4aa0:	f800283a 	ret
    4aa4:	2292b03a 	or	r9,r4,r10
    4aa8:	483fdf26 	beq	r9,zero,4a28 <__alt_mem_onchip_memory+0xf7804a28>
    4aac:	00800084 	movi	r2,2
    4ab0:	f800283a 	ret
    4ab4:	4080030e 	bge	r8,r2,4ac4 <__ledf2+0xcc>
    4ab8:	383fef26 	beq	r7,zero,4a78 <__alt_mem_onchip_memory+0xf7804a78>
    4abc:	00bfffc4 	movi	r2,-1
    4ac0:	f800283a 	ret
    4ac4:	123feb16 	blt	r2,r8,4a74 <__alt_mem_onchip_memory+0xf7804a74>
    4ac8:	1abff336 	bltu	r3,r10,4a98 <__alt_mem_onchip_memory+0xf7804a98>
    4acc:	50c00326 	beq	r10,r3,4adc <__ledf2+0xe4>
    4ad0:	50c0042e 	bgeu	r10,r3,4ae4 <__ledf2+0xec>
    4ad4:	283fe81e 	bne	r5,zero,4a78 <__alt_mem_onchip_memory+0xf7804a78>
    4ad8:	003ff806 	br	4abc <__alt_mem_onchip_memory+0xf7804abc>
    4adc:	313fee36 	bltu	r6,r4,4a98 <__alt_mem_onchip_memory+0xf7804a98>
    4ae0:	21bffc36 	bltu	r4,r6,4ad4 <__alt_mem_onchip_memory+0xf7804ad4>
    4ae4:	0005883a 	mov	r2,zero
    4ae8:	f800283a 	ret

00004aec <__muldf3>:
    4aec:	defff304 	addi	sp,sp,-52
    4af0:	2804d53a 	srli	r2,r5,20
    4af4:	dd800915 	stw	r22,36(sp)
    4af8:	282cd7fa 	srli	r22,r5,31
    4afc:	dc000315 	stw	r16,12(sp)
    4b00:	04000434 	movhi	r16,16
    4b04:	dd400815 	stw	r21,32(sp)
    4b08:	dc800515 	stw	r18,20(sp)
    4b0c:	843fffc4 	addi	r16,r16,-1
    4b10:	dfc00c15 	stw	ra,48(sp)
    4b14:	df000b15 	stw	fp,44(sp)
    4b18:	ddc00a15 	stw	r23,40(sp)
    4b1c:	dd000715 	stw	r20,28(sp)
    4b20:	dcc00615 	stw	r19,24(sp)
    4b24:	dc400415 	stw	r17,16(sp)
    4b28:	1481ffcc 	andi	r18,r2,2047
    4b2c:	2c20703a 	and	r16,r5,r16
    4b30:	b02b883a 	mov	r21,r22
    4b34:	b2403fcc 	andi	r9,r22,255
    4b38:	90006026 	beq	r18,zero,4cbc <__muldf3+0x1d0>
    4b3c:	0081ffc4 	movi	r2,2047
    4b40:	2029883a 	mov	r20,r4
    4b44:	90803626 	beq	r18,r2,4c20 <__muldf3+0x134>
    4b48:	80800434 	orhi	r2,r16,16
    4b4c:	100490fa 	slli	r2,r2,3
    4b50:	2020d77a 	srli	r16,r4,29
    4b54:	202890fa 	slli	r20,r4,3
    4b58:	94bf0044 	addi	r18,r18,-1023
    4b5c:	80a0b03a 	or	r16,r16,r2
    4b60:	0027883a 	mov	r19,zero
    4b64:	0039883a 	mov	fp,zero
    4b68:	3804d53a 	srli	r2,r7,20
    4b6c:	382ed7fa 	srli	r23,r7,31
    4b70:	04400434 	movhi	r17,16
    4b74:	8c7fffc4 	addi	r17,r17,-1
    4b78:	1081ffcc 	andi	r2,r2,2047
    4b7c:	3011883a 	mov	r8,r6
    4b80:	3c62703a 	and	r17,r7,r17
    4b84:	ba803fcc 	andi	r10,r23,255
    4b88:	10006d26 	beq	r2,zero,4d40 <__muldf3+0x254>
    4b8c:	00c1ffc4 	movi	r3,2047
    4b90:	10c06526 	beq	r2,r3,4d28 <__muldf3+0x23c>
    4b94:	88c00434 	orhi	r3,r17,16
    4b98:	180690fa 	slli	r3,r3,3
    4b9c:	3022d77a 	srli	r17,r6,29
    4ba0:	301090fa 	slli	r8,r6,3
    4ba4:	10bf0044 	addi	r2,r2,-1023
    4ba8:	88e2b03a 	or	r17,r17,r3
    4bac:	000b883a 	mov	r5,zero
    4bb0:	9085883a 	add	r2,r18,r2
    4bb4:	2cc8b03a 	or	r4,r5,r19
    4bb8:	00c003c4 	movi	r3,15
    4bbc:	bdacf03a 	xor	r22,r23,r22
    4bc0:	12c00044 	addi	r11,r2,1
    4bc4:	19009936 	bltu	r3,r4,4e2c <__muldf3+0x340>
    4bc8:	200890ba 	slli	r4,r4,2
    4bcc:	00c00034 	movhi	r3,0
    4bd0:	18d2f804 	addi	r3,r3,19424
    4bd4:	20c9883a 	add	r4,r4,r3
    4bd8:	20c00017 	ldw	r3,0(r4)
    4bdc:	1800683a 	jmp	r3
    4be0:	00004e2c 	andhi	zero,zero,312
    4be4:	00004c40 	call	4c4 <calcNet+0x178>
    4be8:	00004c40 	call	4c4 <calcNet+0x178>
    4bec:	00004c3c 	xorhi	zero,zero,304
    4bf0:	00004e08 	cmpgei	zero,zero,312
    4bf4:	00004e08 	cmpgei	zero,zero,312
    4bf8:	00004df0 	cmpltui	zero,zero,311
    4bfc:	00004c3c 	xorhi	zero,zero,304
    4c00:	00004e08 	cmpgei	zero,zero,312
    4c04:	00004df0 	cmpltui	zero,zero,311
    4c08:	00004e08 	cmpgei	zero,zero,312
    4c0c:	00004c3c 	xorhi	zero,zero,304
    4c10:	00004e18 	cmpnei	zero,zero,312
    4c14:	00004e18 	cmpnei	zero,zero,312
    4c18:	00004e18 	cmpnei	zero,zero,312
    4c1c:	00005034 	movhi	zero,320
    4c20:	2404b03a 	or	r2,r4,r16
    4c24:	10006f1e 	bne	r2,zero,4de4 <__muldf3+0x2f8>
    4c28:	04c00204 	movi	r19,8
    4c2c:	0021883a 	mov	r16,zero
    4c30:	0029883a 	mov	r20,zero
    4c34:	07000084 	movi	fp,2
    4c38:	003fcb06 	br	4b68 <__alt_mem_onchip_memory+0xf7804b68>
    4c3c:	502d883a 	mov	r22,r10
    4c40:	00800084 	movi	r2,2
    4c44:	28805726 	beq	r5,r2,4da4 <__muldf3+0x2b8>
    4c48:	008000c4 	movi	r2,3
    4c4c:	28816626 	beq	r5,r2,51e8 <__muldf3+0x6fc>
    4c50:	00800044 	movi	r2,1
    4c54:	2881411e 	bne	r5,r2,515c <__muldf3+0x670>
    4c58:	b02b883a 	mov	r21,r22
    4c5c:	0005883a 	mov	r2,zero
    4c60:	000b883a 	mov	r5,zero
    4c64:	0029883a 	mov	r20,zero
    4c68:	1004953a 	slli	r2,r2,20
    4c6c:	a8c03fcc 	andi	r3,r21,255
    4c70:	04400434 	movhi	r17,16
    4c74:	8c7fffc4 	addi	r17,r17,-1
    4c78:	180697fa 	slli	r3,r3,31
    4c7c:	2c4a703a 	and	r5,r5,r17
    4c80:	288ab03a 	or	r5,r5,r2
    4c84:	28c6b03a 	or	r3,r5,r3
    4c88:	a005883a 	mov	r2,r20
    4c8c:	dfc00c17 	ldw	ra,48(sp)
    4c90:	df000b17 	ldw	fp,44(sp)
    4c94:	ddc00a17 	ldw	r23,40(sp)
    4c98:	dd800917 	ldw	r22,36(sp)
    4c9c:	dd400817 	ldw	r21,32(sp)
    4ca0:	dd000717 	ldw	r20,28(sp)
    4ca4:	dcc00617 	ldw	r19,24(sp)
    4ca8:	dc800517 	ldw	r18,20(sp)
    4cac:	dc400417 	ldw	r17,16(sp)
    4cb0:	dc000317 	ldw	r16,12(sp)
    4cb4:	dec00d04 	addi	sp,sp,52
    4cb8:	f800283a 	ret
    4cbc:	2404b03a 	or	r2,r4,r16
    4cc0:	2027883a 	mov	r19,r4
    4cc4:	10004226 	beq	r2,zero,4dd0 <__muldf3+0x2e4>
    4cc8:	8000fc26 	beq	r16,zero,50bc <__muldf3+0x5d0>
    4ccc:	8009883a 	mov	r4,r16
    4cd0:	d9800215 	stw	r6,8(sp)
    4cd4:	d9c00015 	stw	r7,0(sp)
    4cd8:	da400115 	stw	r9,4(sp)
    4cdc:	0005f140 	call	5f14 <__clzsi2>
    4ce0:	d9800217 	ldw	r6,8(sp)
    4ce4:	d9c00017 	ldw	r7,0(sp)
    4ce8:	da400117 	ldw	r9,4(sp)
    4cec:	113ffd44 	addi	r4,r2,-11
    4cf0:	00c00704 	movi	r3,28
    4cf4:	1900ed16 	blt	r3,r4,50ac <__muldf3+0x5c0>
    4cf8:	00c00744 	movi	r3,29
    4cfc:	147ffe04 	addi	r17,r2,-8
    4d00:	1907c83a 	sub	r3,r3,r4
    4d04:	8460983a 	sll	r16,r16,r17
    4d08:	98c6d83a 	srl	r3,r19,r3
    4d0c:	9c68983a 	sll	r20,r19,r17
    4d10:	1c20b03a 	or	r16,r3,r16
    4d14:	1080fcc4 	addi	r2,r2,1011
    4d18:	00a5c83a 	sub	r18,zero,r2
    4d1c:	0027883a 	mov	r19,zero
    4d20:	0039883a 	mov	fp,zero
    4d24:	003f9006 	br	4b68 <__alt_mem_onchip_memory+0xf7804b68>
    4d28:	3446b03a 	or	r3,r6,r17
    4d2c:	1800261e 	bne	r3,zero,4dc8 <__muldf3+0x2dc>
    4d30:	0023883a 	mov	r17,zero
    4d34:	0011883a 	mov	r8,zero
    4d38:	01400084 	movi	r5,2
    4d3c:	003f9c06 	br	4bb0 <__alt_mem_onchip_memory+0xf7804bb0>
    4d40:	3446b03a 	or	r3,r6,r17
    4d44:	18001c26 	beq	r3,zero,4db8 <__muldf3+0x2cc>
    4d48:	8800ce26 	beq	r17,zero,5084 <__muldf3+0x598>
    4d4c:	8809883a 	mov	r4,r17
    4d50:	d9800215 	stw	r6,8(sp)
    4d54:	da400115 	stw	r9,4(sp)
    4d58:	da800015 	stw	r10,0(sp)
    4d5c:	0005f140 	call	5f14 <__clzsi2>
    4d60:	d9800217 	ldw	r6,8(sp)
    4d64:	da400117 	ldw	r9,4(sp)
    4d68:	da800017 	ldw	r10,0(sp)
    4d6c:	113ffd44 	addi	r4,r2,-11
    4d70:	00c00704 	movi	r3,28
    4d74:	1900bf16 	blt	r3,r4,5074 <__muldf3+0x588>
    4d78:	00c00744 	movi	r3,29
    4d7c:	123ffe04 	addi	r8,r2,-8
    4d80:	1907c83a 	sub	r3,r3,r4
    4d84:	8a22983a 	sll	r17,r17,r8
    4d88:	30c6d83a 	srl	r3,r6,r3
    4d8c:	3210983a 	sll	r8,r6,r8
    4d90:	1c62b03a 	or	r17,r3,r17
    4d94:	1080fcc4 	addi	r2,r2,1011
    4d98:	0085c83a 	sub	r2,zero,r2
    4d9c:	000b883a 	mov	r5,zero
    4da0:	003f8306 	br	4bb0 <__alt_mem_onchip_memory+0xf7804bb0>
    4da4:	b02b883a 	mov	r21,r22
    4da8:	0081ffc4 	movi	r2,2047
    4dac:	000b883a 	mov	r5,zero
    4db0:	0029883a 	mov	r20,zero
    4db4:	003fac06 	br	4c68 <__alt_mem_onchip_memory+0xf7804c68>
    4db8:	0023883a 	mov	r17,zero
    4dbc:	0011883a 	mov	r8,zero
    4dc0:	01400044 	movi	r5,1
    4dc4:	003f7a06 	br	4bb0 <__alt_mem_onchip_memory+0xf7804bb0>
    4dc8:	014000c4 	movi	r5,3
    4dcc:	003f7806 	br	4bb0 <__alt_mem_onchip_memory+0xf7804bb0>
    4dd0:	04c00104 	movi	r19,4
    4dd4:	0021883a 	mov	r16,zero
    4dd8:	0029883a 	mov	r20,zero
    4ddc:	07000044 	movi	fp,1
    4de0:	003f6106 	br	4b68 <__alt_mem_onchip_memory+0xf7804b68>
    4de4:	04c00304 	movi	r19,12
    4de8:	070000c4 	movi	fp,3
    4dec:	003f5e06 	br	4b68 <__alt_mem_onchip_memory+0xf7804b68>
    4df0:	01400434 	movhi	r5,16
    4df4:	002b883a 	mov	r21,zero
    4df8:	297fffc4 	addi	r5,r5,-1
    4dfc:	053fffc4 	movi	r20,-1
    4e00:	0081ffc4 	movi	r2,2047
    4e04:	003f9806 	br	4c68 <__alt_mem_onchip_memory+0xf7804c68>
    4e08:	8023883a 	mov	r17,r16
    4e0c:	a011883a 	mov	r8,r20
    4e10:	e00b883a 	mov	r5,fp
    4e14:	003f8a06 	br	4c40 <__alt_mem_onchip_memory+0xf7804c40>
    4e18:	8023883a 	mov	r17,r16
    4e1c:	a011883a 	mov	r8,r20
    4e20:	482d883a 	mov	r22,r9
    4e24:	e00b883a 	mov	r5,fp
    4e28:	003f8506 	br	4c40 <__alt_mem_onchip_memory+0xf7804c40>
    4e2c:	a00ad43a 	srli	r5,r20,16
    4e30:	401ad43a 	srli	r13,r8,16
    4e34:	a53fffcc 	andi	r20,r20,65535
    4e38:	423fffcc 	andi	r8,r8,65535
    4e3c:	4519383a 	mul	r12,r8,r20
    4e40:	4147383a 	mul	r3,r8,r5
    4e44:	6d09383a 	mul	r4,r13,r20
    4e48:	600cd43a 	srli	r6,r12,16
    4e4c:	2b5d383a 	mul	r14,r5,r13
    4e50:	20c9883a 	add	r4,r4,r3
    4e54:	310d883a 	add	r6,r6,r4
    4e58:	30c0022e 	bgeu	r6,r3,4e64 <__muldf3+0x378>
    4e5c:	00c00074 	movhi	r3,1
    4e60:	70dd883a 	add	r14,r14,r3
    4e64:	8826d43a 	srli	r19,r17,16
    4e68:	8bffffcc 	andi	r15,r17,65535
    4e6c:	7d23383a 	mul	r17,r15,r20
    4e70:	7949383a 	mul	r4,r15,r5
    4e74:	9d29383a 	mul	r20,r19,r20
    4e78:	8814d43a 	srli	r10,r17,16
    4e7c:	3012943a 	slli	r9,r6,16
    4e80:	a129883a 	add	r20,r20,r4
    4e84:	633fffcc 	andi	r12,r12,65535
    4e88:	5515883a 	add	r10,r10,r20
    4e8c:	3006d43a 	srli	r3,r6,16
    4e90:	4b13883a 	add	r9,r9,r12
    4e94:	2ccb383a 	mul	r5,r5,r19
    4e98:	5100022e 	bgeu	r10,r4,4ea4 <__muldf3+0x3b8>
    4e9c:	01000074 	movhi	r4,1
    4ea0:	290b883a 	add	r5,r5,r4
    4ea4:	802ad43a 	srli	r21,r16,16
    4ea8:	843fffcc 	andi	r16,r16,65535
    4eac:	440d383a 	mul	r6,r8,r16
    4eb0:	4565383a 	mul	r18,r8,r21
    4eb4:	8349383a 	mul	r4,r16,r13
    4eb8:	500e943a 	slli	r7,r10,16
    4ebc:	3010d43a 	srli	r8,r6,16
    4ec0:	5028d43a 	srli	r20,r10,16
    4ec4:	2489883a 	add	r4,r4,r18
    4ec8:	8abfffcc 	andi	r10,r17,65535
    4ecc:	3a95883a 	add	r10,r7,r10
    4ed0:	4119883a 	add	r12,r8,r4
    4ed4:	a169883a 	add	r20,r20,r5
    4ed8:	1a87883a 	add	r3,r3,r10
    4edc:	6d5b383a 	mul	r13,r13,r21
    4ee0:	6480022e 	bgeu	r12,r18,4eec <__muldf3+0x400>
    4ee4:	01000074 	movhi	r4,1
    4ee8:	691b883a 	add	r13,r13,r4
    4eec:	7c25383a 	mul	r18,r15,r16
    4ef0:	7d4b383a 	mul	r5,r15,r21
    4ef4:	84cf383a 	mul	r7,r16,r19
    4ef8:	901ed43a 	srli	r15,r18,16
    4efc:	6008d43a 	srli	r4,r12,16
    4f00:	6010943a 	slli	r8,r12,16
    4f04:	394f883a 	add	r7,r7,r5
    4f08:	333fffcc 	andi	r12,r6,65535
    4f0c:	79df883a 	add	r15,r15,r7
    4f10:	235b883a 	add	r13,r4,r13
    4f14:	9d63383a 	mul	r17,r19,r21
    4f18:	4309883a 	add	r4,r8,r12
    4f1c:	7940022e 	bgeu	r15,r5,4f28 <__muldf3+0x43c>
    4f20:	01400074 	movhi	r5,1
    4f24:	8963883a 	add	r17,r17,r5
    4f28:	780a943a 	slli	r5,r15,16
    4f2c:	91bfffcc 	andi	r6,r18,65535
    4f30:	70c7883a 	add	r3,r14,r3
    4f34:	298d883a 	add	r6,r5,r6
    4f38:	1a8f803a 	cmpltu	r7,r3,r10
    4f3c:	350b883a 	add	r5,r6,r20
    4f40:	20c7883a 	add	r3,r4,r3
    4f44:	3955883a 	add	r10,r7,r5
    4f48:	1909803a 	cmpltu	r4,r3,r4
    4f4c:	6a91883a 	add	r8,r13,r10
    4f50:	780cd43a 	srli	r6,r15,16
    4f54:	2219883a 	add	r12,r4,r8
    4f58:	2d0b803a 	cmpltu	r5,r5,r20
    4f5c:	51cf803a 	cmpltu	r7,r10,r7
    4f60:	29ceb03a 	or	r7,r5,r7
    4f64:	4351803a 	cmpltu	r8,r8,r13
    4f68:	610b803a 	cmpltu	r5,r12,r4
    4f6c:	4148b03a 	or	r4,r8,r5
    4f70:	398f883a 	add	r7,r7,r6
    4f74:	3909883a 	add	r4,r7,r4
    4f78:	1810927a 	slli	r8,r3,9
    4f7c:	2449883a 	add	r4,r4,r17
    4f80:	2008927a 	slli	r4,r4,9
    4f84:	6022d5fa 	srli	r17,r12,23
    4f88:	1806d5fa 	srli	r3,r3,23
    4f8c:	4252b03a 	or	r9,r8,r9
    4f90:	600a927a 	slli	r5,r12,9
    4f94:	4810c03a 	cmpne	r8,r9,zero
    4f98:	2462b03a 	or	r17,r4,r17
    4f9c:	40c6b03a 	or	r3,r8,r3
    4fa0:	8900402c 	andhi	r4,r17,256
    4fa4:	1950b03a 	or	r8,r3,r5
    4fa8:	20000726 	beq	r4,zero,4fc8 <__muldf3+0x4dc>
    4fac:	4006d07a 	srli	r3,r8,1
    4fb0:	880497fa 	slli	r2,r17,31
    4fb4:	4200004c 	andi	r8,r8,1
    4fb8:	8822d07a 	srli	r17,r17,1
    4fbc:	1a10b03a 	or	r8,r3,r8
    4fc0:	1210b03a 	or	r8,r2,r8
    4fc4:	5805883a 	mov	r2,r11
    4fc8:	1140ffc4 	addi	r5,r2,1023
    4fcc:	0140440e 	bge	zero,r5,50e0 <__muldf3+0x5f4>
    4fd0:	40c001cc 	andi	r3,r8,7
    4fd4:	18000726 	beq	r3,zero,4ff4 <__muldf3+0x508>
    4fd8:	40c003cc 	andi	r3,r8,15
    4fdc:	01000104 	movi	r4,4
    4fe0:	19000426 	beq	r3,r4,4ff4 <__muldf3+0x508>
    4fe4:	4107883a 	add	r3,r8,r4
    4fe8:	1a11803a 	cmpltu	r8,r3,r8
    4fec:	8a23883a 	add	r17,r17,r8
    4ff0:	1811883a 	mov	r8,r3
    4ff4:	88c0402c 	andhi	r3,r17,256
    4ff8:	18000426 	beq	r3,zero,500c <__muldf3+0x520>
    4ffc:	11410004 	addi	r5,r2,1024
    5000:	00bfc034 	movhi	r2,65280
    5004:	10bfffc4 	addi	r2,r2,-1
    5008:	88a2703a 	and	r17,r17,r2
    500c:	0081ff84 	movi	r2,2046
    5010:	117f6416 	blt	r2,r5,4da4 <__alt_mem_onchip_memory+0xf7804da4>
    5014:	8828977a 	slli	r20,r17,29
    5018:	4010d0fa 	srli	r8,r8,3
    501c:	8822927a 	slli	r17,r17,9
    5020:	2881ffcc 	andi	r2,r5,2047
    5024:	a228b03a 	or	r20,r20,r8
    5028:	880ad33a 	srli	r5,r17,12
    502c:	b02b883a 	mov	r21,r22
    5030:	003f0d06 	br	4c68 <__alt_mem_onchip_memory+0xf7804c68>
    5034:	8080022c 	andhi	r2,r16,8
    5038:	10000926 	beq	r2,zero,5060 <__muldf3+0x574>
    503c:	8880022c 	andhi	r2,r17,8
    5040:	1000071e 	bne	r2,zero,5060 <__muldf3+0x574>
    5044:	00800434 	movhi	r2,16
    5048:	89400234 	orhi	r5,r17,8
    504c:	10bfffc4 	addi	r2,r2,-1
    5050:	b82b883a 	mov	r21,r23
    5054:	288a703a 	and	r5,r5,r2
    5058:	4029883a 	mov	r20,r8
    505c:	003f6806 	br	4e00 <__alt_mem_onchip_memory+0xf7804e00>
    5060:	00800434 	movhi	r2,16
    5064:	81400234 	orhi	r5,r16,8
    5068:	10bfffc4 	addi	r2,r2,-1
    506c:	288a703a 	and	r5,r5,r2
    5070:	003f6306 	br	4e00 <__alt_mem_onchip_memory+0xf7804e00>
    5074:	147ff604 	addi	r17,r2,-40
    5078:	3462983a 	sll	r17,r6,r17
    507c:	0011883a 	mov	r8,zero
    5080:	003f4406 	br	4d94 <__alt_mem_onchip_memory+0xf7804d94>
    5084:	3009883a 	mov	r4,r6
    5088:	d9800215 	stw	r6,8(sp)
    508c:	da400115 	stw	r9,4(sp)
    5090:	da800015 	stw	r10,0(sp)
    5094:	0005f140 	call	5f14 <__clzsi2>
    5098:	10800804 	addi	r2,r2,32
    509c:	da800017 	ldw	r10,0(sp)
    50a0:	da400117 	ldw	r9,4(sp)
    50a4:	d9800217 	ldw	r6,8(sp)
    50a8:	003f3006 	br	4d6c <__alt_mem_onchip_memory+0xf7804d6c>
    50ac:	143ff604 	addi	r16,r2,-40
    50b0:	9c20983a 	sll	r16,r19,r16
    50b4:	0029883a 	mov	r20,zero
    50b8:	003f1606 	br	4d14 <__alt_mem_onchip_memory+0xf7804d14>
    50bc:	d9800215 	stw	r6,8(sp)
    50c0:	d9c00015 	stw	r7,0(sp)
    50c4:	da400115 	stw	r9,4(sp)
    50c8:	0005f140 	call	5f14 <__clzsi2>
    50cc:	10800804 	addi	r2,r2,32
    50d0:	da400117 	ldw	r9,4(sp)
    50d4:	d9c00017 	ldw	r7,0(sp)
    50d8:	d9800217 	ldw	r6,8(sp)
    50dc:	003f0306 	br	4cec <__alt_mem_onchip_memory+0xf7804cec>
    50e0:	00c00044 	movi	r3,1
    50e4:	1947c83a 	sub	r3,r3,r5
    50e8:	00800e04 	movi	r2,56
    50ec:	10feda16 	blt	r2,r3,4c58 <__alt_mem_onchip_memory+0xf7804c58>
    50f0:	008007c4 	movi	r2,31
    50f4:	10c01b16 	blt	r2,r3,5164 <__muldf3+0x678>
    50f8:	00800804 	movi	r2,32
    50fc:	10c5c83a 	sub	r2,r2,r3
    5100:	888a983a 	sll	r5,r17,r2
    5104:	40c8d83a 	srl	r4,r8,r3
    5108:	4084983a 	sll	r2,r8,r2
    510c:	88e2d83a 	srl	r17,r17,r3
    5110:	2906b03a 	or	r3,r5,r4
    5114:	1004c03a 	cmpne	r2,r2,zero
    5118:	1886b03a 	or	r3,r3,r2
    511c:	188001cc 	andi	r2,r3,7
    5120:	10000726 	beq	r2,zero,5140 <__muldf3+0x654>
    5124:	188003cc 	andi	r2,r3,15
    5128:	01000104 	movi	r4,4
    512c:	11000426 	beq	r2,r4,5140 <__muldf3+0x654>
    5130:	1805883a 	mov	r2,r3
    5134:	10c00104 	addi	r3,r2,4
    5138:	1885803a 	cmpltu	r2,r3,r2
    513c:	88a3883a 	add	r17,r17,r2
    5140:	8880202c 	andhi	r2,r17,128
    5144:	10001c26 	beq	r2,zero,51b8 <__muldf3+0x6cc>
    5148:	b02b883a 	mov	r21,r22
    514c:	00800044 	movi	r2,1
    5150:	000b883a 	mov	r5,zero
    5154:	0029883a 	mov	r20,zero
    5158:	003ec306 	br	4c68 <__alt_mem_onchip_memory+0xf7804c68>
    515c:	5805883a 	mov	r2,r11
    5160:	003f9906 	br	4fc8 <__alt_mem_onchip_memory+0xf7804fc8>
    5164:	00bff844 	movi	r2,-31
    5168:	1145c83a 	sub	r2,r2,r5
    516c:	8888d83a 	srl	r4,r17,r2
    5170:	00800804 	movi	r2,32
    5174:	18801a26 	beq	r3,r2,51e0 <__muldf3+0x6f4>
    5178:	00801004 	movi	r2,64
    517c:	10c5c83a 	sub	r2,r2,r3
    5180:	8884983a 	sll	r2,r17,r2
    5184:	1204b03a 	or	r2,r2,r8
    5188:	1004c03a 	cmpne	r2,r2,zero
    518c:	2084b03a 	or	r2,r4,r2
    5190:	144001cc 	andi	r17,r2,7
    5194:	88000d1e 	bne	r17,zero,51cc <__muldf3+0x6e0>
    5198:	000b883a 	mov	r5,zero
    519c:	1028d0fa 	srli	r20,r2,3
    51a0:	b02b883a 	mov	r21,r22
    51a4:	0005883a 	mov	r2,zero
    51a8:	a468b03a 	or	r20,r20,r17
    51ac:	003eae06 	br	4c68 <__alt_mem_onchip_memory+0xf7804c68>
    51b0:	1007883a 	mov	r3,r2
    51b4:	0023883a 	mov	r17,zero
    51b8:	880a927a 	slli	r5,r17,9
    51bc:	1805883a 	mov	r2,r3
    51c0:	8822977a 	slli	r17,r17,29
    51c4:	280ad33a 	srli	r5,r5,12
    51c8:	003ff406 	br	519c <__alt_mem_onchip_memory+0xf780519c>
    51cc:	10c003cc 	andi	r3,r2,15
    51d0:	01000104 	movi	r4,4
    51d4:	193ff626 	beq	r3,r4,51b0 <__alt_mem_onchip_memory+0xf78051b0>
    51d8:	0023883a 	mov	r17,zero
    51dc:	003fd506 	br	5134 <__alt_mem_onchip_memory+0xf7805134>
    51e0:	0005883a 	mov	r2,zero
    51e4:	003fe706 	br	5184 <__alt_mem_onchip_memory+0xf7805184>
    51e8:	00800434 	movhi	r2,16
    51ec:	89400234 	orhi	r5,r17,8
    51f0:	10bfffc4 	addi	r2,r2,-1
    51f4:	b02b883a 	mov	r21,r22
    51f8:	288a703a 	and	r5,r5,r2
    51fc:	4029883a 	mov	r20,r8
    5200:	003eff06 	br	4e00 <__alt_mem_onchip_memory+0xf7804e00>

00005204 <__subdf3>:
    5204:	02000434 	movhi	r8,16
    5208:	423fffc4 	addi	r8,r8,-1
    520c:	defffb04 	addi	sp,sp,-20
    5210:	2a14703a 	and	r10,r5,r8
    5214:	3812d53a 	srli	r9,r7,20
    5218:	3a10703a 	and	r8,r7,r8
    521c:	2006d77a 	srli	r3,r4,29
    5220:	3004d77a 	srli	r2,r6,29
    5224:	dc000015 	stw	r16,0(sp)
    5228:	501490fa 	slli	r10,r10,3
    522c:	2820d53a 	srli	r16,r5,20
    5230:	401090fa 	slli	r8,r8,3
    5234:	dc800215 	stw	r18,8(sp)
    5238:	dc400115 	stw	r17,4(sp)
    523c:	dfc00415 	stw	ra,16(sp)
    5240:	202290fa 	slli	r17,r4,3
    5244:	dcc00315 	stw	r19,12(sp)
    5248:	4a41ffcc 	andi	r9,r9,2047
    524c:	0101ffc4 	movi	r4,2047
    5250:	2824d7fa 	srli	r18,r5,31
    5254:	8401ffcc 	andi	r16,r16,2047
    5258:	50c6b03a 	or	r3,r10,r3
    525c:	380ed7fa 	srli	r7,r7,31
    5260:	408ab03a 	or	r5,r8,r2
    5264:	300c90fa 	slli	r6,r6,3
    5268:	49009626 	beq	r9,r4,54c4 <__subdf3+0x2c0>
    526c:	39c0005c 	xori	r7,r7,1
    5270:	8245c83a 	sub	r2,r16,r9
    5274:	3c807426 	beq	r7,r18,5448 <__subdf3+0x244>
    5278:	0080af0e 	bge	zero,r2,5538 <__subdf3+0x334>
    527c:	48002a1e 	bne	r9,zero,5328 <__subdf3+0x124>
    5280:	2988b03a 	or	r4,r5,r6
    5284:	20009a1e 	bne	r4,zero,54f0 <__subdf3+0x2ec>
    5288:	888001cc 	andi	r2,r17,7
    528c:	10000726 	beq	r2,zero,52ac <__subdf3+0xa8>
    5290:	888003cc 	andi	r2,r17,15
    5294:	01000104 	movi	r4,4
    5298:	11000426 	beq	r2,r4,52ac <__subdf3+0xa8>
    529c:	890b883a 	add	r5,r17,r4
    52a0:	2c63803a 	cmpltu	r17,r5,r17
    52a4:	1c47883a 	add	r3,r3,r17
    52a8:	2823883a 	mov	r17,r5
    52ac:	1880202c 	andhi	r2,r3,128
    52b0:	10005926 	beq	r2,zero,5418 <__subdf3+0x214>
    52b4:	84000044 	addi	r16,r16,1
    52b8:	0081ffc4 	movi	r2,2047
    52bc:	8080be26 	beq	r16,r2,55b8 <__subdf3+0x3b4>
    52c0:	017fe034 	movhi	r5,65408
    52c4:	297fffc4 	addi	r5,r5,-1
    52c8:	1946703a 	and	r3,r3,r5
    52cc:	1804977a 	slli	r2,r3,29
    52d0:	1806927a 	slli	r3,r3,9
    52d4:	8822d0fa 	srli	r17,r17,3
    52d8:	8401ffcc 	andi	r16,r16,2047
    52dc:	180ad33a 	srli	r5,r3,12
    52e0:	9100004c 	andi	r4,r18,1
    52e4:	1444b03a 	or	r2,r2,r17
    52e8:	80c1ffcc 	andi	r3,r16,2047
    52ec:	1820953a 	slli	r16,r3,20
    52f0:	20c03fcc 	andi	r3,r4,255
    52f4:	180897fa 	slli	r4,r3,31
    52f8:	00c00434 	movhi	r3,16
    52fc:	18ffffc4 	addi	r3,r3,-1
    5300:	28c6703a 	and	r3,r5,r3
    5304:	1c06b03a 	or	r3,r3,r16
    5308:	1906b03a 	or	r3,r3,r4
    530c:	dfc00417 	ldw	ra,16(sp)
    5310:	dcc00317 	ldw	r19,12(sp)
    5314:	dc800217 	ldw	r18,8(sp)
    5318:	dc400117 	ldw	r17,4(sp)
    531c:	dc000017 	ldw	r16,0(sp)
    5320:	dec00504 	addi	sp,sp,20
    5324:	f800283a 	ret
    5328:	0101ffc4 	movi	r4,2047
    532c:	813fd626 	beq	r16,r4,5288 <__alt_mem_onchip_memory+0xf7805288>
    5330:	29402034 	orhi	r5,r5,128
    5334:	01000e04 	movi	r4,56
    5338:	2080a316 	blt	r4,r2,55c8 <__subdf3+0x3c4>
    533c:	010007c4 	movi	r4,31
    5340:	2080c616 	blt	r4,r2,565c <__subdf3+0x458>
    5344:	01000804 	movi	r4,32
    5348:	2089c83a 	sub	r4,r4,r2
    534c:	2910983a 	sll	r8,r5,r4
    5350:	308ed83a 	srl	r7,r6,r2
    5354:	3108983a 	sll	r4,r6,r4
    5358:	2884d83a 	srl	r2,r5,r2
    535c:	41ccb03a 	or	r6,r8,r7
    5360:	2008c03a 	cmpne	r4,r4,zero
    5364:	310cb03a 	or	r6,r6,r4
    5368:	898dc83a 	sub	r6,r17,r6
    536c:	89a3803a 	cmpltu	r17,r17,r6
    5370:	1887c83a 	sub	r3,r3,r2
    5374:	1c47c83a 	sub	r3,r3,r17
    5378:	3023883a 	mov	r17,r6
    537c:	1880202c 	andhi	r2,r3,128
    5380:	10002326 	beq	r2,zero,5410 <__subdf3+0x20c>
    5384:	04c02034 	movhi	r19,128
    5388:	9cffffc4 	addi	r19,r19,-1
    538c:	1ce6703a 	and	r19,r3,r19
    5390:	98007a26 	beq	r19,zero,557c <__subdf3+0x378>
    5394:	9809883a 	mov	r4,r19
    5398:	0005f140 	call	5f14 <__clzsi2>
    539c:	113ffe04 	addi	r4,r2,-8
    53a0:	00c007c4 	movi	r3,31
    53a4:	19007b16 	blt	r3,r4,5594 <__subdf3+0x390>
    53a8:	00800804 	movi	r2,32
    53ac:	1105c83a 	sub	r2,r2,r4
    53b0:	8884d83a 	srl	r2,r17,r2
    53b4:	9906983a 	sll	r3,r19,r4
    53b8:	8922983a 	sll	r17,r17,r4
    53bc:	10c4b03a 	or	r2,r2,r3
    53c0:	24007816 	blt	r4,r16,55a4 <__subdf3+0x3a0>
    53c4:	2421c83a 	sub	r16,r4,r16
    53c8:	80c00044 	addi	r3,r16,1
    53cc:	010007c4 	movi	r4,31
    53d0:	20c09516 	blt	r4,r3,5628 <__subdf3+0x424>
    53d4:	01400804 	movi	r5,32
    53d8:	28cbc83a 	sub	r5,r5,r3
    53dc:	88c8d83a 	srl	r4,r17,r3
    53e0:	8962983a 	sll	r17,r17,r5
    53e4:	114a983a 	sll	r5,r2,r5
    53e8:	10c6d83a 	srl	r3,r2,r3
    53ec:	8804c03a 	cmpne	r2,r17,zero
    53f0:	290ab03a 	or	r5,r5,r4
    53f4:	28a2b03a 	or	r17,r5,r2
    53f8:	0021883a 	mov	r16,zero
    53fc:	003fa206 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5400:	2090b03a 	or	r8,r4,r2
    5404:	40018e26 	beq	r8,zero,5a40 <__subdf3+0x83c>
    5408:	1007883a 	mov	r3,r2
    540c:	2023883a 	mov	r17,r4
    5410:	888001cc 	andi	r2,r17,7
    5414:	103f9e1e 	bne	r2,zero,5290 <__alt_mem_onchip_memory+0xf7805290>
    5418:	1804977a 	slli	r2,r3,29
    541c:	8822d0fa 	srli	r17,r17,3
    5420:	1810d0fa 	srli	r8,r3,3
    5424:	9100004c 	andi	r4,r18,1
    5428:	1444b03a 	or	r2,r2,r17
    542c:	00c1ffc4 	movi	r3,2047
    5430:	80c02826 	beq	r16,r3,54d4 <__subdf3+0x2d0>
    5434:	01400434 	movhi	r5,16
    5438:	297fffc4 	addi	r5,r5,-1
    543c:	80e0703a 	and	r16,r16,r3
    5440:	414a703a 	and	r5,r8,r5
    5444:	003fa806 	br	52e8 <__alt_mem_onchip_memory+0xf78052e8>
    5448:	0080630e 	bge	zero,r2,55d8 <__subdf3+0x3d4>
    544c:	48003026 	beq	r9,zero,5510 <__subdf3+0x30c>
    5450:	0101ffc4 	movi	r4,2047
    5454:	813f8c26 	beq	r16,r4,5288 <__alt_mem_onchip_memory+0xf7805288>
    5458:	29402034 	orhi	r5,r5,128
    545c:	01000e04 	movi	r4,56
    5460:	2080a90e 	bge	r4,r2,5708 <__subdf3+0x504>
    5464:	298cb03a 	or	r6,r5,r6
    5468:	3012c03a 	cmpne	r9,r6,zero
    546c:	0005883a 	mov	r2,zero
    5470:	4c53883a 	add	r9,r9,r17
    5474:	4c63803a 	cmpltu	r17,r9,r17
    5478:	10c7883a 	add	r3,r2,r3
    547c:	88c7883a 	add	r3,r17,r3
    5480:	4823883a 	mov	r17,r9
    5484:	1880202c 	andhi	r2,r3,128
    5488:	1000d026 	beq	r2,zero,57cc <__subdf3+0x5c8>
    548c:	84000044 	addi	r16,r16,1
    5490:	0081ffc4 	movi	r2,2047
    5494:	8080fe26 	beq	r16,r2,5890 <__subdf3+0x68c>
    5498:	00bfe034 	movhi	r2,65408
    549c:	10bfffc4 	addi	r2,r2,-1
    54a0:	1886703a 	and	r3,r3,r2
    54a4:	880ad07a 	srli	r5,r17,1
    54a8:	180497fa 	slli	r2,r3,31
    54ac:	8900004c 	andi	r4,r17,1
    54b0:	2922b03a 	or	r17,r5,r4
    54b4:	1806d07a 	srli	r3,r3,1
    54b8:	1462b03a 	or	r17,r2,r17
    54bc:	3825883a 	mov	r18,r7
    54c0:	003f7106 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    54c4:	2984b03a 	or	r2,r5,r6
    54c8:	103f6826 	beq	r2,zero,526c <__alt_mem_onchip_memory+0xf780526c>
    54cc:	39c03fcc 	andi	r7,r7,255
    54d0:	003f6706 	br	5270 <__alt_mem_onchip_memory+0xf7805270>
    54d4:	4086b03a 	or	r3,r8,r2
    54d8:	18015226 	beq	r3,zero,5a24 <__subdf3+0x820>
    54dc:	00c00434 	movhi	r3,16
    54e0:	41400234 	orhi	r5,r8,8
    54e4:	18ffffc4 	addi	r3,r3,-1
    54e8:	28ca703a 	and	r5,r5,r3
    54ec:	003f7e06 	br	52e8 <__alt_mem_onchip_memory+0xf78052e8>
    54f0:	10bfffc4 	addi	r2,r2,-1
    54f4:	1000491e 	bne	r2,zero,561c <__subdf3+0x418>
    54f8:	898fc83a 	sub	r7,r17,r6
    54fc:	89e3803a 	cmpltu	r17,r17,r7
    5500:	1947c83a 	sub	r3,r3,r5
    5504:	1c47c83a 	sub	r3,r3,r17
    5508:	3823883a 	mov	r17,r7
    550c:	003f9b06 	br	537c <__alt_mem_onchip_memory+0xf780537c>
    5510:	2988b03a 	or	r4,r5,r6
    5514:	203f5c26 	beq	r4,zero,5288 <__alt_mem_onchip_memory+0xf7805288>
    5518:	10bfffc4 	addi	r2,r2,-1
    551c:	1000931e 	bne	r2,zero,576c <__subdf3+0x568>
    5520:	898d883a 	add	r6,r17,r6
    5524:	3463803a 	cmpltu	r17,r6,r17
    5528:	1947883a 	add	r3,r3,r5
    552c:	88c7883a 	add	r3,r17,r3
    5530:	3023883a 	mov	r17,r6
    5534:	003fd306 	br	5484 <__alt_mem_onchip_memory+0xf7805484>
    5538:	1000541e 	bne	r2,zero,568c <__subdf3+0x488>
    553c:	80800044 	addi	r2,r16,1
    5540:	1081ffcc 	andi	r2,r2,2047
    5544:	01000044 	movi	r4,1
    5548:	2080a20e 	bge	r4,r2,57d4 <__subdf3+0x5d0>
    554c:	8989c83a 	sub	r4,r17,r6
    5550:	8905803a 	cmpltu	r2,r17,r4
    5554:	1967c83a 	sub	r19,r3,r5
    5558:	98a7c83a 	sub	r19,r19,r2
    555c:	9880202c 	andhi	r2,r19,128
    5560:	10006326 	beq	r2,zero,56f0 <__subdf3+0x4ec>
    5564:	3463c83a 	sub	r17,r6,r17
    5568:	28c7c83a 	sub	r3,r5,r3
    556c:	344d803a 	cmpltu	r6,r6,r17
    5570:	19a7c83a 	sub	r19,r3,r6
    5574:	3825883a 	mov	r18,r7
    5578:	983f861e 	bne	r19,zero,5394 <__alt_mem_onchip_memory+0xf7805394>
    557c:	8809883a 	mov	r4,r17
    5580:	0005f140 	call	5f14 <__clzsi2>
    5584:	10800804 	addi	r2,r2,32
    5588:	113ffe04 	addi	r4,r2,-8
    558c:	00c007c4 	movi	r3,31
    5590:	193f850e 	bge	r3,r4,53a8 <__alt_mem_onchip_memory+0xf78053a8>
    5594:	10bff604 	addi	r2,r2,-40
    5598:	8884983a 	sll	r2,r17,r2
    559c:	0023883a 	mov	r17,zero
    55a0:	243f880e 	bge	r4,r16,53c4 <__alt_mem_onchip_memory+0xf78053c4>
    55a4:	00ffe034 	movhi	r3,65408
    55a8:	18ffffc4 	addi	r3,r3,-1
    55ac:	8121c83a 	sub	r16,r16,r4
    55b0:	10c6703a 	and	r3,r2,r3
    55b4:	003f3406 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    55b8:	9100004c 	andi	r4,r18,1
    55bc:	000b883a 	mov	r5,zero
    55c0:	0005883a 	mov	r2,zero
    55c4:	003f4806 	br	52e8 <__alt_mem_onchip_memory+0xf78052e8>
    55c8:	298cb03a 	or	r6,r5,r6
    55cc:	300cc03a 	cmpne	r6,r6,zero
    55d0:	0005883a 	mov	r2,zero
    55d4:	003f6406 	br	5368 <__alt_mem_onchip_memory+0xf7805368>
    55d8:	10009a1e 	bne	r2,zero,5844 <__subdf3+0x640>
    55dc:	82400044 	addi	r9,r16,1
    55e0:	4881ffcc 	andi	r2,r9,2047
    55e4:	02800044 	movi	r10,1
    55e8:	5080670e 	bge	r10,r2,5788 <__subdf3+0x584>
    55ec:	0081ffc4 	movi	r2,2047
    55f0:	4880af26 	beq	r9,r2,58b0 <__subdf3+0x6ac>
    55f4:	898d883a 	add	r6,r17,r6
    55f8:	1945883a 	add	r2,r3,r5
    55fc:	3447803a 	cmpltu	r3,r6,r17
    5600:	1887883a 	add	r3,r3,r2
    5604:	182297fa 	slli	r17,r3,31
    5608:	300cd07a 	srli	r6,r6,1
    560c:	1806d07a 	srli	r3,r3,1
    5610:	4821883a 	mov	r16,r9
    5614:	89a2b03a 	or	r17,r17,r6
    5618:	003f1b06 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    561c:	0101ffc4 	movi	r4,2047
    5620:	813f441e 	bne	r16,r4,5334 <__alt_mem_onchip_memory+0xf7805334>
    5624:	003f1806 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5628:	843ff844 	addi	r16,r16,-31
    562c:	01400804 	movi	r5,32
    5630:	1408d83a 	srl	r4,r2,r16
    5634:	19405026 	beq	r3,r5,5778 <__subdf3+0x574>
    5638:	01401004 	movi	r5,64
    563c:	28c7c83a 	sub	r3,r5,r3
    5640:	10c4983a 	sll	r2,r2,r3
    5644:	88a2b03a 	or	r17,r17,r2
    5648:	8822c03a 	cmpne	r17,r17,zero
    564c:	2462b03a 	or	r17,r4,r17
    5650:	0007883a 	mov	r3,zero
    5654:	0021883a 	mov	r16,zero
    5658:	003f6d06 	br	5410 <__alt_mem_onchip_memory+0xf7805410>
    565c:	11fff804 	addi	r7,r2,-32
    5660:	01000804 	movi	r4,32
    5664:	29ced83a 	srl	r7,r5,r7
    5668:	11004526 	beq	r2,r4,5780 <__subdf3+0x57c>
    566c:	01001004 	movi	r4,64
    5670:	2089c83a 	sub	r4,r4,r2
    5674:	2904983a 	sll	r2,r5,r4
    5678:	118cb03a 	or	r6,r2,r6
    567c:	300cc03a 	cmpne	r6,r6,zero
    5680:	398cb03a 	or	r6,r7,r6
    5684:	0005883a 	mov	r2,zero
    5688:	003f3706 	br	5368 <__alt_mem_onchip_memory+0xf7805368>
    568c:	80002a26 	beq	r16,zero,5738 <__subdf3+0x534>
    5690:	0101ffc4 	movi	r4,2047
    5694:	49006626 	beq	r9,r4,5830 <__subdf3+0x62c>
    5698:	0085c83a 	sub	r2,zero,r2
    569c:	18c02034 	orhi	r3,r3,128
    56a0:	01000e04 	movi	r4,56
    56a4:	20807e16 	blt	r4,r2,58a0 <__subdf3+0x69c>
    56a8:	010007c4 	movi	r4,31
    56ac:	2080e716 	blt	r4,r2,5a4c <__subdf3+0x848>
    56b0:	01000804 	movi	r4,32
    56b4:	2089c83a 	sub	r4,r4,r2
    56b8:	1914983a 	sll	r10,r3,r4
    56bc:	8890d83a 	srl	r8,r17,r2
    56c0:	8908983a 	sll	r4,r17,r4
    56c4:	1884d83a 	srl	r2,r3,r2
    56c8:	5222b03a 	or	r17,r10,r8
    56cc:	2006c03a 	cmpne	r3,r4,zero
    56d0:	88e2b03a 	or	r17,r17,r3
    56d4:	3463c83a 	sub	r17,r6,r17
    56d8:	2885c83a 	sub	r2,r5,r2
    56dc:	344d803a 	cmpltu	r6,r6,r17
    56e0:	1187c83a 	sub	r3,r2,r6
    56e4:	4821883a 	mov	r16,r9
    56e8:	3825883a 	mov	r18,r7
    56ec:	003f2306 	br	537c <__alt_mem_onchip_memory+0xf780537c>
    56f0:	24d0b03a 	or	r8,r4,r19
    56f4:	40001b1e 	bne	r8,zero,5764 <__subdf3+0x560>
    56f8:	0005883a 	mov	r2,zero
    56fc:	0009883a 	mov	r4,zero
    5700:	0021883a 	mov	r16,zero
    5704:	003f4906 	br	542c <__alt_mem_onchip_memory+0xf780542c>
    5708:	010007c4 	movi	r4,31
    570c:	20803a16 	blt	r4,r2,57f8 <__subdf3+0x5f4>
    5710:	01000804 	movi	r4,32
    5714:	2089c83a 	sub	r4,r4,r2
    5718:	2912983a 	sll	r9,r5,r4
    571c:	3090d83a 	srl	r8,r6,r2
    5720:	3108983a 	sll	r4,r6,r4
    5724:	2884d83a 	srl	r2,r5,r2
    5728:	4a12b03a 	or	r9,r9,r8
    572c:	2008c03a 	cmpne	r4,r4,zero
    5730:	4912b03a 	or	r9,r9,r4
    5734:	003f4e06 	br	5470 <__alt_mem_onchip_memory+0xf7805470>
    5738:	1c48b03a 	or	r4,r3,r17
    573c:	20003c26 	beq	r4,zero,5830 <__subdf3+0x62c>
    5740:	0084303a 	nor	r2,zero,r2
    5744:	1000381e 	bne	r2,zero,5828 <__subdf3+0x624>
    5748:	3463c83a 	sub	r17,r6,r17
    574c:	28c5c83a 	sub	r2,r5,r3
    5750:	344d803a 	cmpltu	r6,r6,r17
    5754:	1187c83a 	sub	r3,r2,r6
    5758:	4821883a 	mov	r16,r9
    575c:	3825883a 	mov	r18,r7
    5760:	003f0606 	br	537c <__alt_mem_onchip_memory+0xf780537c>
    5764:	2023883a 	mov	r17,r4
    5768:	003f0906 	br	5390 <__alt_mem_onchip_memory+0xf7805390>
    576c:	0101ffc4 	movi	r4,2047
    5770:	813f3a1e 	bne	r16,r4,545c <__alt_mem_onchip_memory+0xf780545c>
    5774:	003ec406 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5778:	0005883a 	mov	r2,zero
    577c:	003fb106 	br	5644 <__alt_mem_onchip_memory+0xf7805644>
    5780:	0005883a 	mov	r2,zero
    5784:	003fbc06 	br	5678 <__alt_mem_onchip_memory+0xf7805678>
    5788:	1c44b03a 	or	r2,r3,r17
    578c:	80008e1e 	bne	r16,zero,59c8 <__subdf3+0x7c4>
    5790:	1000c826 	beq	r2,zero,5ab4 <__subdf3+0x8b0>
    5794:	2984b03a 	or	r2,r5,r6
    5798:	103ebb26 	beq	r2,zero,5288 <__alt_mem_onchip_memory+0xf7805288>
    579c:	8989883a 	add	r4,r17,r6
    57a0:	1945883a 	add	r2,r3,r5
    57a4:	2447803a 	cmpltu	r3,r4,r17
    57a8:	1887883a 	add	r3,r3,r2
    57ac:	1880202c 	andhi	r2,r3,128
    57b0:	2023883a 	mov	r17,r4
    57b4:	103f1626 	beq	r2,zero,5410 <__alt_mem_onchip_memory+0xf7805410>
    57b8:	00bfe034 	movhi	r2,65408
    57bc:	10bfffc4 	addi	r2,r2,-1
    57c0:	5021883a 	mov	r16,r10
    57c4:	1886703a 	and	r3,r3,r2
    57c8:	003eaf06 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    57cc:	3825883a 	mov	r18,r7
    57d0:	003f0f06 	br	5410 <__alt_mem_onchip_memory+0xf7805410>
    57d4:	1c44b03a 	or	r2,r3,r17
    57d8:	8000251e 	bne	r16,zero,5870 <__subdf3+0x66c>
    57dc:	1000661e 	bne	r2,zero,5978 <__subdf3+0x774>
    57e0:	2990b03a 	or	r8,r5,r6
    57e4:	40009626 	beq	r8,zero,5a40 <__subdf3+0x83c>
    57e8:	2807883a 	mov	r3,r5
    57ec:	3023883a 	mov	r17,r6
    57f0:	3825883a 	mov	r18,r7
    57f4:	003ea406 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    57f8:	127ff804 	addi	r9,r2,-32
    57fc:	01000804 	movi	r4,32
    5800:	2a52d83a 	srl	r9,r5,r9
    5804:	11008c26 	beq	r2,r4,5a38 <__subdf3+0x834>
    5808:	01001004 	movi	r4,64
    580c:	2085c83a 	sub	r2,r4,r2
    5810:	2884983a 	sll	r2,r5,r2
    5814:	118cb03a 	or	r6,r2,r6
    5818:	300cc03a 	cmpne	r6,r6,zero
    581c:	4992b03a 	or	r9,r9,r6
    5820:	0005883a 	mov	r2,zero
    5824:	003f1206 	br	5470 <__alt_mem_onchip_memory+0xf7805470>
    5828:	0101ffc4 	movi	r4,2047
    582c:	493f9c1e 	bne	r9,r4,56a0 <__alt_mem_onchip_memory+0xf78056a0>
    5830:	2807883a 	mov	r3,r5
    5834:	3023883a 	mov	r17,r6
    5838:	4821883a 	mov	r16,r9
    583c:	3825883a 	mov	r18,r7
    5840:	003e9106 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5844:	80001f1e 	bne	r16,zero,58c4 <__subdf3+0x6c0>
    5848:	1c48b03a 	or	r4,r3,r17
    584c:	20005a26 	beq	r4,zero,59b8 <__subdf3+0x7b4>
    5850:	0084303a 	nor	r2,zero,r2
    5854:	1000561e 	bne	r2,zero,59b0 <__subdf3+0x7ac>
    5858:	89a3883a 	add	r17,r17,r6
    585c:	1945883a 	add	r2,r3,r5
    5860:	898d803a 	cmpltu	r6,r17,r6
    5864:	3087883a 	add	r3,r6,r2
    5868:	4821883a 	mov	r16,r9
    586c:	003f0506 	br	5484 <__alt_mem_onchip_memory+0xf7805484>
    5870:	10002b1e 	bne	r2,zero,5920 <__subdf3+0x71c>
    5874:	2984b03a 	or	r2,r5,r6
    5878:	10008026 	beq	r2,zero,5a7c <__subdf3+0x878>
    587c:	2807883a 	mov	r3,r5
    5880:	3023883a 	mov	r17,r6
    5884:	3825883a 	mov	r18,r7
    5888:	0401ffc4 	movi	r16,2047
    588c:	003e7e06 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5890:	3809883a 	mov	r4,r7
    5894:	0011883a 	mov	r8,zero
    5898:	0005883a 	mov	r2,zero
    589c:	003ee306 	br	542c <__alt_mem_onchip_memory+0xf780542c>
    58a0:	1c62b03a 	or	r17,r3,r17
    58a4:	8822c03a 	cmpne	r17,r17,zero
    58a8:	0005883a 	mov	r2,zero
    58ac:	003f8906 	br	56d4 <__alt_mem_onchip_memory+0xf78056d4>
    58b0:	3809883a 	mov	r4,r7
    58b4:	4821883a 	mov	r16,r9
    58b8:	0011883a 	mov	r8,zero
    58bc:	0005883a 	mov	r2,zero
    58c0:	003eda06 	br	542c <__alt_mem_onchip_memory+0xf780542c>
    58c4:	0101ffc4 	movi	r4,2047
    58c8:	49003b26 	beq	r9,r4,59b8 <__subdf3+0x7b4>
    58cc:	0085c83a 	sub	r2,zero,r2
    58d0:	18c02034 	orhi	r3,r3,128
    58d4:	01000e04 	movi	r4,56
    58d8:	20806e16 	blt	r4,r2,5a94 <__subdf3+0x890>
    58dc:	010007c4 	movi	r4,31
    58e0:	20807716 	blt	r4,r2,5ac0 <__subdf3+0x8bc>
    58e4:	01000804 	movi	r4,32
    58e8:	2089c83a 	sub	r4,r4,r2
    58ec:	1914983a 	sll	r10,r3,r4
    58f0:	8890d83a 	srl	r8,r17,r2
    58f4:	8908983a 	sll	r4,r17,r4
    58f8:	1884d83a 	srl	r2,r3,r2
    58fc:	5222b03a 	or	r17,r10,r8
    5900:	2006c03a 	cmpne	r3,r4,zero
    5904:	88e2b03a 	or	r17,r17,r3
    5908:	89a3883a 	add	r17,r17,r6
    590c:	1145883a 	add	r2,r2,r5
    5910:	898d803a 	cmpltu	r6,r17,r6
    5914:	3087883a 	add	r3,r6,r2
    5918:	4821883a 	mov	r16,r9
    591c:	003ed906 	br	5484 <__alt_mem_onchip_memory+0xf7805484>
    5920:	2984b03a 	or	r2,r5,r6
    5924:	10004226 	beq	r2,zero,5a30 <__subdf3+0x82c>
    5928:	1808d0fa 	srli	r4,r3,3
    592c:	8822d0fa 	srli	r17,r17,3
    5930:	1806977a 	slli	r3,r3,29
    5934:	2080022c 	andhi	r2,r4,8
    5938:	1c62b03a 	or	r17,r3,r17
    593c:	10000826 	beq	r2,zero,5960 <__subdf3+0x75c>
    5940:	2812d0fa 	srli	r9,r5,3
    5944:	4880022c 	andhi	r2,r9,8
    5948:	1000051e 	bne	r2,zero,5960 <__subdf3+0x75c>
    594c:	300cd0fa 	srli	r6,r6,3
    5950:	2804977a 	slli	r2,r5,29
    5954:	4809883a 	mov	r4,r9
    5958:	3825883a 	mov	r18,r7
    595c:	11a2b03a 	or	r17,r2,r6
    5960:	8806d77a 	srli	r3,r17,29
    5964:	200890fa 	slli	r4,r4,3
    5968:	882290fa 	slli	r17,r17,3
    596c:	0401ffc4 	movi	r16,2047
    5970:	1906b03a 	or	r3,r3,r4
    5974:	003e4406 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5978:	2984b03a 	or	r2,r5,r6
    597c:	103e4226 	beq	r2,zero,5288 <__alt_mem_onchip_memory+0xf7805288>
    5980:	8989c83a 	sub	r4,r17,r6
    5984:	8911803a 	cmpltu	r8,r17,r4
    5988:	1945c83a 	sub	r2,r3,r5
    598c:	1205c83a 	sub	r2,r2,r8
    5990:	1200202c 	andhi	r8,r2,128
    5994:	403e9a26 	beq	r8,zero,5400 <__alt_mem_onchip_memory+0xf7805400>
    5998:	3463c83a 	sub	r17,r6,r17
    599c:	28c5c83a 	sub	r2,r5,r3
    59a0:	344d803a 	cmpltu	r6,r6,r17
    59a4:	1187c83a 	sub	r3,r2,r6
    59a8:	3825883a 	mov	r18,r7
    59ac:	003e3606 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    59b0:	0101ffc4 	movi	r4,2047
    59b4:	493fc71e 	bne	r9,r4,58d4 <__alt_mem_onchip_memory+0xf78058d4>
    59b8:	2807883a 	mov	r3,r5
    59bc:	3023883a 	mov	r17,r6
    59c0:	4821883a 	mov	r16,r9
    59c4:	003e3006 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    59c8:	10003626 	beq	r2,zero,5aa4 <__subdf3+0x8a0>
    59cc:	2984b03a 	or	r2,r5,r6
    59d0:	10001726 	beq	r2,zero,5a30 <__subdf3+0x82c>
    59d4:	1808d0fa 	srli	r4,r3,3
    59d8:	8822d0fa 	srli	r17,r17,3
    59dc:	1806977a 	slli	r3,r3,29
    59e0:	2080022c 	andhi	r2,r4,8
    59e4:	1c62b03a 	or	r17,r3,r17
    59e8:	10000726 	beq	r2,zero,5a08 <__subdf3+0x804>
    59ec:	2812d0fa 	srli	r9,r5,3
    59f0:	4880022c 	andhi	r2,r9,8
    59f4:	1000041e 	bne	r2,zero,5a08 <__subdf3+0x804>
    59f8:	300cd0fa 	srli	r6,r6,3
    59fc:	2804977a 	slli	r2,r5,29
    5a00:	4809883a 	mov	r4,r9
    5a04:	11a2b03a 	or	r17,r2,r6
    5a08:	8806d77a 	srli	r3,r17,29
    5a0c:	200890fa 	slli	r4,r4,3
    5a10:	882290fa 	slli	r17,r17,3
    5a14:	3825883a 	mov	r18,r7
    5a18:	1906b03a 	or	r3,r3,r4
    5a1c:	0401ffc4 	movi	r16,2047
    5a20:	003e1906 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5a24:	000b883a 	mov	r5,zero
    5a28:	0005883a 	mov	r2,zero
    5a2c:	003e2e06 	br	52e8 <__alt_mem_onchip_memory+0xf78052e8>
    5a30:	0401ffc4 	movi	r16,2047
    5a34:	003e1406 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5a38:	0005883a 	mov	r2,zero
    5a3c:	003f7506 	br	5814 <__alt_mem_onchip_memory+0xf7805814>
    5a40:	0005883a 	mov	r2,zero
    5a44:	0009883a 	mov	r4,zero
    5a48:	003e7806 	br	542c <__alt_mem_onchip_memory+0xf780542c>
    5a4c:	123ff804 	addi	r8,r2,-32
    5a50:	01000804 	movi	r4,32
    5a54:	1a10d83a 	srl	r8,r3,r8
    5a58:	11002526 	beq	r2,r4,5af0 <__subdf3+0x8ec>
    5a5c:	01001004 	movi	r4,64
    5a60:	2085c83a 	sub	r2,r4,r2
    5a64:	1884983a 	sll	r2,r3,r2
    5a68:	1444b03a 	or	r2,r2,r17
    5a6c:	1004c03a 	cmpne	r2,r2,zero
    5a70:	40a2b03a 	or	r17,r8,r2
    5a74:	0005883a 	mov	r2,zero
    5a78:	003f1606 	br	56d4 <__alt_mem_onchip_memory+0xf78056d4>
    5a7c:	02000434 	movhi	r8,16
    5a80:	0009883a 	mov	r4,zero
    5a84:	423fffc4 	addi	r8,r8,-1
    5a88:	00bfffc4 	movi	r2,-1
    5a8c:	0401ffc4 	movi	r16,2047
    5a90:	003e6606 	br	542c <__alt_mem_onchip_memory+0xf780542c>
    5a94:	1c62b03a 	or	r17,r3,r17
    5a98:	8822c03a 	cmpne	r17,r17,zero
    5a9c:	0005883a 	mov	r2,zero
    5aa0:	003f9906 	br	5908 <__alt_mem_onchip_memory+0xf7805908>
    5aa4:	2807883a 	mov	r3,r5
    5aa8:	3023883a 	mov	r17,r6
    5aac:	0401ffc4 	movi	r16,2047
    5ab0:	003df506 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5ab4:	2807883a 	mov	r3,r5
    5ab8:	3023883a 	mov	r17,r6
    5abc:	003df206 	br	5288 <__alt_mem_onchip_memory+0xf7805288>
    5ac0:	123ff804 	addi	r8,r2,-32
    5ac4:	01000804 	movi	r4,32
    5ac8:	1a10d83a 	srl	r8,r3,r8
    5acc:	11000a26 	beq	r2,r4,5af8 <__subdf3+0x8f4>
    5ad0:	01001004 	movi	r4,64
    5ad4:	2085c83a 	sub	r2,r4,r2
    5ad8:	1884983a 	sll	r2,r3,r2
    5adc:	1444b03a 	or	r2,r2,r17
    5ae0:	1004c03a 	cmpne	r2,r2,zero
    5ae4:	40a2b03a 	or	r17,r8,r2
    5ae8:	0005883a 	mov	r2,zero
    5aec:	003f8606 	br	5908 <__alt_mem_onchip_memory+0xf7805908>
    5af0:	0005883a 	mov	r2,zero
    5af4:	003fdc06 	br	5a68 <__alt_mem_onchip_memory+0xf7805a68>
    5af8:	0005883a 	mov	r2,zero
    5afc:	003ff706 	br	5adc <__alt_mem_onchip_memory+0xf7805adc>

00005b00 <__fixdfsi>:
    5b00:	280cd53a 	srli	r6,r5,20
    5b04:	00c00434 	movhi	r3,16
    5b08:	18ffffc4 	addi	r3,r3,-1
    5b0c:	3181ffcc 	andi	r6,r6,2047
    5b10:	01c0ff84 	movi	r7,1022
    5b14:	28c6703a 	and	r3,r5,r3
    5b18:	280ad7fa 	srli	r5,r5,31
    5b1c:	3980120e 	bge	r7,r6,5b68 <__fixdfsi+0x68>
    5b20:	00810744 	movi	r2,1053
    5b24:	11800c16 	blt	r2,r6,5b58 <__fixdfsi+0x58>
    5b28:	00810cc4 	movi	r2,1075
    5b2c:	1185c83a 	sub	r2,r2,r6
    5b30:	01c007c4 	movi	r7,31
    5b34:	18c00434 	orhi	r3,r3,16
    5b38:	38800d16 	blt	r7,r2,5b70 <__fixdfsi+0x70>
    5b3c:	31befb44 	addi	r6,r6,-1043
    5b40:	2084d83a 	srl	r2,r4,r2
    5b44:	1986983a 	sll	r3,r3,r6
    5b48:	1884b03a 	or	r2,r3,r2
    5b4c:	28000726 	beq	r5,zero,5b6c <__fixdfsi+0x6c>
    5b50:	0085c83a 	sub	r2,zero,r2
    5b54:	f800283a 	ret
    5b58:	00a00034 	movhi	r2,32768
    5b5c:	10bfffc4 	addi	r2,r2,-1
    5b60:	2885883a 	add	r2,r5,r2
    5b64:	f800283a 	ret
    5b68:	0005883a 	mov	r2,zero
    5b6c:	f800283a 	ret
    5b70:	008104c4 	movi	r2,1043
    5b74:	1185c83a 	sub	r2,r2,r6
    5b78:	1884d83a 	srl	r2,r3,r2
    5b7c:	003ff306 	br	5b4c <__alt_mem_onchip_memory+0xf7805b4c>

00005b80 <__floatsidf>:
    5b80:	defffd04 	addi	sp,sp,-12
    5b84:	dfc00215 	stw	ra,8(sp)
    5b88:	dc400115 	stw	r17,4(sp)
    5b8c:	dc000015 	stw	r16,0(sp)
    5b90:	20002b26 	beq	r4,zero,5c40 <__floatsidf+0xc0>
    5b94:	2023883a 	mov	r17,r4
    5b98:	2020d7fa 	srli	r16,r4,31
    5b9c:	20002d16 	blt	r4,zero,5c54 <__floatsidf+0xd4>
    5ba0:	8809883a 	mov	r4,r17
    5ba4:	0005f140 	call	5f14 <__clzsi2>
    5ba8:	01410784 	movi	r5,1054
    5bac:	288bc83a 	sub	r5,r5,r2
    5bb0:	01010cc4 	movi	r4,1075
    5bb4:	2149c83a 	sub	r4,r4,r5
    5bb8:	00c007c4 	movi	r3,31
    5bbc:	1900160e 	bge	r3,r4,5c18 <__floatsidf+0x98>
    5bc0:	00c104c4 	movi	r3,1043
    5bc4:	1947c83a 	sub	r3,r3,r5
    5bc8:	88c6983a 	sll	r3,r17,r3
    5bcc:	00800434 	movhi	r2,16
    5bd0:	10bfffc4 	addi	r2,r2,-1
    5bd4:	1886703a 	and	r3,r3,r2
    5bd8:	2941ffcc 	andi	r5,r5,2047
    5bdc:	800d883a 	mov	r6,r16
    5be0:	0005883a 	mov	r2,zero
    5be4:	280a953a 	slli	r5,r5,20
    5be8:	31803fcc 	andi	r6,r6,255
    5bec:	01000434 	movhi	r4,16
    5bf0:	300c97fa 	slli	r6,r6,31
    5bf4:	213fffc4 	addi	r4,r4,-1
    5bf8:	1906703a 	and	r3,r3,r4
    5bfc:	1946b03a 	or	r3,r3,r5
    5c00:	1986b03a 	or	r3,r3,r6
    5c04:	dfc00217 	ldw	ra,8(sp)
    5c08:	dc400117 	ldw	r17,4(sp)
    5c0c:	dc000017 	ldw	r16,0(sp)
    5c10:	dec00304 	addi	sp,sp,12
    5c14:	f800283a 	ret
    5c18:	00c002c4 	movi	r3,11
    5c1c:	1887c83a 	sub	r3,r3,r2
    5c20:	88c6d83a 	srl	r3,r17,r3
    5c24:	8904983a 	sll	r2,r17,r4
    5c28:	01000434 	movhi	r4,16
    5c2c:	213fffc4 	addi	r4,r4,-1
    5c30:	2941ffcc 	andi	r5,r5,2047
    5c34:	1906703a 	and	r3,r3,r4
    5c38:	800d883a 	mov	r6,r16
    5c3c:	003fe906 	br	5be4 <__alt_mem_onchip_memory+0xf7805be4>
    5c40:	000d883a 	mov	r6,zero
    5c44:	000b883a 	mov	r5,zero
    5c48:	0007883a 	mov	r3,zero
    5c4c:	0005883a 	mov	r2,zero
    5c50:	003fe406 	br	5be4 <__alt_mem_onchip_memory+0xf7805be4>
    5c54:	0123c83a 	sub	r17,zero,r4
    5c58:	003fd106 	br	5ba0 <__alt_mem_onchip_memory+0xf7805ba0>

00005c5c <__extendsfdf2>:
    5c5c:	200ad5fa 	srli	r5,r4,23
    5c60:	defffd04 	addi	sp,sp,-12
    5c64:	dc400115 	stw	r17,4(sp)
    5c68:	29403fcc 	andi	r5,r5,255
    5c6c:	29800044 	addi	r6,r5,1
    5c70:	04402034 	movhi	r17,128
    5c74:	dc000015 	stw	r16,0(sp)
    5c78:	8c7fffc4 	addi	r17,r17,-1
    5c7c:	dfc00215 	stw	ra,8(sp)
    5c80:	31803fcc 	andi	r6,r6,255
    5c84:	00800044 	movi	r2,1
    5c88:	8922703a 	and	r17,r17,r4
    5c8c:	2020d7fa 	srli	r16,r4,31
    5c90:	1180110e 	bge	r2,r6,5cd8 <__extendsfdf2+0x7c>
    5c94:	880cd0fa 	srli	r6,r17,3
    5c98:	8822977a 	slli	r17,r17,29
    5c9c:	2940e004 	addi	r5,r5,896
    5ca0:	2941ffcc 	andi	r5,r5,2047
    5ca4:	2804953a 	slli	r2,r5,20
    5ca8:	01400434 	movhi	r5,16
    5cac:	800697fa 	slli	r3,r16,31
    5cb0:	297fffc4 	addi	r5,r5,-1
    5cb4:	314a703a 	and	r5,r6,r5
    5cb8:	288ab03a 	or	r5,r5,r2
    5cbc:	28c6b03a 	or	r3,r5,r3
    5cc0:	8805883a 	mov	r2,r17
    5cc4:	dfc00217 	ldw	ra,8(sp)
    5cc8:	dc400117 	ldw	r17,4(sp)
    5ccc:	dc000017 	ldw	r16,0(sp)
    5cd0:	dec00304 	addi	sp,sp,12
    5cd4:	f800283a 	ret
    5cd8:	2800111e 	bne	r5,zero,5d20 <__extendsfdf2+0xc4>
    5cdc:	88001c26 	beq	r17,zero,5d50 <__extendsfdf2+0xf4>
    5ce0:	8809883a 	mov	r4,r17
    5ce4:	0005f140 	call	5f14 <__clzsi2>
    5ce8:	00c00284 	movi	r3,10
    5cec:	18801b16 	blt	r3,r2,5d5c <__extendsfdf2+0x100>
    5cf0:	018002c4 	movi	r6,11
    5cf4:	308dc83a 	sub	r6,r6,r2
    5cf8:	11000544 	addi	r4,r2,21
    5cfc:	8986d83a 	srl	r3,r17,r6
    5d00:	8922983a 	sll	r17,r17,r4
    5d04:	0180e244 	movi	r6,905
    5d08:	01400434 	movhi	r5,16
    5d0c:	3085c83a 	sub	r2,r6,r2
    5d10:	297fffc4 	addi	r5,r5,-1
    5d14:	194c703a 	and	r6,r3,r5
    5d18:	1141ffcc 	andi	r5,r2,2047
    5d1c:	003fe006 	br	5ca0 <__alt_mem_onchip_memory+0xf7805ca0>
    5d20:	88000826 	beq	r17,zero,5d44 <__extendsfdf2+0xe8>
    5d24:	880cd0fa 	srli	r6,r17,3
    5d28:	00800434 	movhi	r2,16
    5d2c:	10bfffc4 	addi	r2,r2,-1
    5d30:	31800234 	orhi	r6,r6,8
    5d34:	8822977a 	slli	r17,r17,29
    5d38:	308c703a 	and	r6,r6,r2
    5d3c:	0141ffc4 	movi	r5,2047
    5d40:	003fd706 	br	5ca0 <__alt_mem_onchip_memory+0xf7805ca0>
    5d44:	0141ffc4 	movi	r5,2047
    5d48:	000d883a 	mov	r6,zero
    5d4c:	003fd406 	br	5ca0 <__alt_mem_onchip_memory+0xf7805ca0>
    5d50:	000b883a 	mov	r5,zero
    5d54:	000d883a 	mov	r6,zero
    5d58:	003fd106 	br	5ca0 <__alt_mem_onchip_memory+0xf7805ca0>
    5d5c:	11bffd44 	addi	r6,r2,-11
    5d60:	8986983a 	sll	r3,r17,r6
    5d64:	0023883a 	mov	r17,zero
    5d68:	003fe606 	br	5d04 <__alt_mem_onchip_memory+0xf7805d04>

00005d6c <__truncdfsf2>:
    5d6c:	2810d53a 	srli	r8,r5,20
    5d70:	01c00434 	movhi	r7,16
    5d74:	39ffffc4 	addi	r7,r7,-1
    5d78:	29ce703a 	and	r7,r5,r7
    5d7c:	4201ffcc 	andi	r8,r8,2047
    5d80:	380e90fa 	slli	r7,r7,3
    5d84:	200cd77a 	srli	r6,r4,29
    5d88:	42400044 	addi	r9,r8,1
    5d8c:	4a41ffcc 	andi	r9,r9,2047
    5d90:	00c00044 	movi	r3,1
    5d94:	280ad7fa 	srli	r5,r5,31
    5d98:	31ceb03a 	or	r7,r6,r7
    5d9c:	200490fa 	slli	r2,r4,3
    5da0:	1a40230e 	bge	r3,r9,5e30 <__truncdfsf2+0xc4>
    5da4:	40ff2004 	addi	r3,r8,-896
    5da8:	01803f84 	movi	r6,254
    5dac:	30c01516 	blt	r6,r3,5e04 <__truncdfsf2+0x98>
    5db0:	00c0380e 	bge	zero,r3,5e94 <__truncdfsf2+0x128>
    5db4:	200c91ba 	slli	r6,r4,6
    5db8:	380e90fa 	slli	r7,r7,3
    5dbc:	1004d77a 	srli	r2,r2,29
    5dc0:	300cc03a 	cmpne	r6,r6,zero
    5dc4:	31ccb03a 	or	r6,r6,r7
    5dc8:	308cb03a 	or	r6,r6,r2
    5dcc:	308001cc 	andi	r2,r6,7
    5dd0:	10000426 	beq	r2,zero,5de4 <__truncdfsf2+0x78>
    5dd4:	308003cc 	andi	r2,r6,15
    5dd8:	01000104 	movi	r4,4
    5ddc:	11000126 	beq	r2,r4,5de4 <__truncdfsf2+0x78>
    5de0:	31800104 	addi	r6,r6,4
    5de4:	3081002c 	andhi	r2,r6,1024
    5de8:	10001626 	beq	r2,zero,5e44 <__truncdfsf2+0xd8>
    5dec:	18c00044 	addi	r3,r3,1
    5df0:	00803fc4 	movi	r2,255
    5df4:	18800326 	beq	r3,r2,5e04 <__truncdfsf2+0x98>
    5df8:	300c91ba 	slli	r6,r6,6
    5dfc:	300cd27a 	srli	r6,r6,9
    5e00:	00000206 	br	5e0c <__truncdfsf2+0xa0>
    5e04:	00ffffc4 	movi	r3,-1
    5e08:	000d883a 	mov	r6,zero
    5e0c:	18c03fcc 	andi	r3,r3,255
    5e10:	180895fa 	slli	r4,r3,23
    5e14:	00c02034 	movhi	r3,128
    5e18:	280a97fa 	slli	r5,r5,31
    5e1c:	18ffffc4 	addi	r3,r3,-1
    5e20:	30c6703a 	and	r3,r6,r3
    5e24:	1906b03a 	or	r3,r3,r4
    5e28:	1944b03a 	or	r2,r3,r5
    5e2c:	f800283a 	ret
    5e30:	40000b1e 	bne	r8,zero,5e60 <__truncdfsf2+0xf4>
    5e34:	388cb03a 	or	r6,r7,r2
    5e38:	0007883a 	mov	r3,zero
    5e3c:	30000426 	beq	r6,zero,5e50 <__truncdfsf2+0xe4>
    5e40:	01800144 	movi	r6,5
    5e44:	00803fc4 	movi	r2,255
    5e48:	300cd0fa 	srli	r6,r6,3
    5e4c:	18800a26 	beq	r3,r2,5e78 <__truncdfsf2+0x10c>
    5e50:	00802034 	movhi	r2,128
    5e54:	10bfffc4 	addi	r2,r2,-1
    5e58:	308c703a 	and	r6,r6,r2
    5e5c:	003feb06 	br	5e0c <__alt_mem_onchip_memory+0xf7805e0c>
    5e60:	3888b03a 	or	r4,r7,r2
    5e64:	203fe726 	beq	r4,zero,5e04 <__alt_mem_onchip_memory+0xf7805e04>
    5e68:	380c90fa 	slli	r6,r7,3
    5e6c:	00c03fc4 	movi	r3,255
    5e70:	31808034 	orhi	r6,r6,512
    5e74:	003fd506 	br	5dcc <__alt_mem_onchip_memory+0xf7805dcc>
    5e78:	303fe226 	beq	r6,zero,5e04 <__alt_mem_onchip_memory+0xf7805e04>
    5e7c:	00802034 	movhi	r2,128
    5e80:	31801034 	orhi	r6,r6,64
    5e84:	10bfffc4 	addi	r2,r2,-1
    5e88:	00ffffc4 	movi	r3,-1
    5e8c:	308c703a 	and	r6,r6,r2
    5e90:	003fde06 	br	5e0c <__alt_mem_onchip_memory+0xf7805e0c>
    5e94:	013ffa44 	movi	r4,-23
    5e98:	19000e16 	blt	r3,r4,5ed4 <__truncdfsf2+0x168>
    5e9c:	01000784 	movi	r4,30
    5ea0:	20c9c83a 	sub	r4,r4,r3
    5ea4:	018007c4 	movi	r6,31
    5ea8:	39c02034 	orhi	r7,r7,128
    5eac:	31000b16 	blt	r6,r4,5edc <__truncdfsf2+0x170>
    5eb0:	423f2084 	addi	r8,r8,-894
    5eb4:	120c983a 	sll	r6,r2,r8
    5eb8:	3a0e983a 	sll	r7,r7,r8
    5ebc:	1104d83a 	srl	r2,r2,r4
    5ec0:	300cc03a 	cmpne	r6,r6,zero
    5ec4:	31ceb03a 	or	r7,r6,r7
    5ec8:	388cb03a 	or	r6,r7,r2
    5ecc:	0007883a 	mov	r3,zero
    5ed0:	003fbe06 	br	5dcc <__alt_mem_onchip_memory+0xf7805dcc>
    5ed4:	0007883a 	mov	r3,zero
    5ed8:	003fd906 	br	5e40 <__alt_mem_onchip_memory+0xf7805e40>
    5edc:	01bfff84 	movi	r6,-2
    5ee0:	30cdc83a 	sub	r6,r6,r3
    5ee4:	00c00804 	movi	r3,32
    5ee8:	398cd83a 	srl	r6,r7,r6
    5eec:	20c00726 	beq	r4,r3,5f0c <__truncdfsf2+0x1a0>
    5ef0:	423f2884 	addi	r8,r8,-862
    5ef4:	3a0e983a 	sll	r7,r7,r8
    5ef8:	3884b03a 	or	r2,r7,r2
    5efc:	1004c03a 	cmpne	r2,r2,zero
    5f00:	118cb03a 	or	r6,r2,r6
    5f04:	0007883a 	mov	r3,zero
    5f08:	003fb006 	br	5dcc <__alt_mem_onchip_memory+0xf7805dcc>
    5f0c:	000f883a 	mov	r7,zero
    5f10:	003ff906 	br	5ef8 <__alt_mem_onchip_memory+0xf7805ef8>

00005f14 <__clzsi2>:
    5f14:	00bfffd4 	movui	r2,65535
    5f18:	11000536 	bltu	r2,r4,5f30 <__clzsi2+0x1c>
    5f1c:	00803fc4 	movi	r2,255
    5f20:	11000f36 	bltu	r2,r4,5f60 <__clzsi2+0x4c>
    5f24:	00800804 	movi	r2,32
    5f28:	0007883a 	mov	r3,zero
    5f2c:	00000506 	br	5f44 <__clzsi2+0x30>
    5f30:	00804034 	movhi	r2,256
    5f34:	10bfffc4 	addi	r2,r2,-1
    5f38:	11000c2e 	bgeu	r2,r4,5f6c <__clzsi2+0x58>
    5f3c:	00800204 	movi	r2,8
    5f40:	00c00604 	movi	r3,24
    5f44:	20c8d83a 	srl	r4,r4,r3
    5f48:	00c00074 	movhi	r3,1
    5f4c:	18cd5644 	addi	r3,r3,13657
    5f50:	1909883a 	add	r4,r3,r4
    5f54:	20c00003 	ldbu	r3,0(r4)
    5f58:	10c5c83a 	sub	r2,r2,r3
    5f5c:	f800283a 	ret
    5f60:	00800604 	movi	r2,24
    5f64:	00c00204 	movi	r3,8
    5f68:	003ff606 	br	5f44 <__alt_mem_onchip_memory+0xf7805f44>
    5f6c:	00800404 	movi	r2,16
    5f70:	1007883a 	mov	r3,r2
    5f74:	003ff306 	br	5f44 <__alt_mem_onchip_memory+0xf7805f44>

00005f78 <__divsi3>:
    5f78:	20001b16 	blt	r4,zero,5fe8 <__divsi3+0x70>
    5f7c:	000f883a 	mov	r7,zero
    5f80:	28001616 	blt	r5,zero,5fdc <__divsi3+0x64>
    5f84:	200d883a 	mov	r6,r4
    5f88:	29001a2e 	bgeu	r5,r4,5ff4 <__divsi3+0x7c>
    5f8c:	00800804 	movi	r2,32
    5f90:	00c00044 	movi	r3,1
    5f94:	00000106 	br	5f9c <__divsi3+0x24>
    5f98:	10000d26 	beq	r2,zero,5fd0 <__divsi3+0x58>
    5f9c:	294b883a 	add	r5,r5,r5
    5fa0:	10bfffc4 	addi	r2,r2,-1
    5fa4:	18c7883a 	add	r3,r3,r3
    5fa8:	293ffb36 	bltu	r5,r4,5f98 <__alt_mem_onchip_memory+0xf7805f98>
    5fac:	0005883a 	mov	r2,zero
    5fb0:	18000726 	beq	r3,zero,5fd0 <__divsi3+0x58>
    5fb4:	0005883a 	mov	r2,zero
    5fb8:	31400236 	bltu	r6,r5,5fc4 <__divsi3+0x4c>
    5fbc:	314dc83a 	sub	r6,r6,r5
    5fc0:	10c4b03a 	or	r2,r2,r3
    5fc4:	1806d07a 	srli	r3,r3,1
    5fc8:	280ad07a 	srli	r5,r5,1
    5fcc:	183ffa1e 	bne	r3,zero,5fb8 <__alt_mem_onchip_memory+0xf7805fb8>
    5fd0:	38000126 	beq	r7,zero,5fd8 <__divsi3+0x60>
    5fd4:	0085c83a 	sub	r2,zero,r2
    5fd8:	f800283a 	ret
    5fdc:	014bc83a 	sub	r5,zero,r5
    5fe0:	39c0005c 	xori	r7,r7,1
    5fe4:	003fe706 	br	5f84 <__alt_mem_onchip_memory+0xf7805f84>
    5fe8:	0109c83a 	sub	r4,zero,r4
    5fec:	01c00044 	movi	r7,1
    5ff0:	003fe306 	br	5f80 <__alt_mem_onchip_memory+0xf7805f80>
    5ff4:	00c00044 	movi	r3,1
    5ff8:	003fee06 	br	5fb4 <__alt_mem_onchip_memory+0xf7805fb4>

00005ffc <__modsi3>:
    5ffc:	20001716 	blt	r4,zero,605c <__modsi3+0x60>
    6000:	000f883a 	mov	r7,zero
    6004:	2005883a 	mov	r2,r4
    6008:	28001216 	blt	r5,zero,6054 <__modsi3+0x58>
    600c:	2900162e 	bgeu	r5,r4,6068 <__modsi3+0x6c>
    6010:	01800804 	movi	r6,32
    6014:	00c00044 	movi	r3,1
    6018:	00000106 	br	6020 <__modsi3+0x24>
    601c:	30000a26 	beq	r6,zero,6048 <__modsi3+0x4c>
    6020:	294b883a 	add	r5,r5,r5
    6024:	31bfffc4 	addi	r6,r6,-1
    6028:	18c7883a 	add	r3,r3,r3
    602c:	293ffb36 	bltu	r5,r4,601c <__alt_mem_onchip_memory+0xf780601c>
    6030:	18000526 	beq	r3,zero,6048 <__modsi3+0x4c>
    6034:	1806d07a 	srli	r3,r3,1
    6038:	11400136 	bltu	r2,r5,6040 <__modsi3+0x44>
    603c:	1145c83a 	sub	r2,r2,r5
    6040:	280ad07a 	srli	r5,r5,1
    6044:	183ffb1e 	bne	r3,zero,6034 <__alt_mem_onchip_memory+0xf7806034>
    6048:	38000126 	beq	r7,zero,6050 <__modsi3+0x54>
    604c:	0085c83a 	sub	r2,zero,r2
    6050:	f800283a 	ret
    6054:	014bc83a 	sub	r5,zero,r5
    6058:	003fec06 	br	600c <__alt_mem_onchip_memory+0xf780600c>
    605c:	0109c83a 	sub	r4,zero,r4
    6060:	01c00044 	movi	r7,1
    6064:	003fe706 	br	6004 <__alt_mem_onchip_memory+0xf7806004>
    6068:	00c00044 	movi	r3,1
    606c:	003ff106 	br	6034 <__alt_mem_onchip_memory+0xf7806034>

00006070 <__udivsi3>:
    6070:	200d883a 	mov	r6,r4
    6074:	2900152e 	bgeu	r5,r4,60cc <__udivsi3+0x5c>
    6078:	28001416 	blt	r5,zero,60cc <__udivsi3+0x5c>
    607c:	00800804 	movi	r2,32
    6080:	00c00044 	movi	r3,1
    6084:	00000206 	br	6090 <__udivsi3+0x20>
    6088:	10000e26 	beq	r2,zero,60c4 <__udivsi3+0x54>
    608c:	28000516 	blt	r5,zero,60a4 <__udivsi3+0x34>
    6090:	294b883a 	add	r5,r5,r5
    6094:	10bfffc4 	addi	r2,r2,-1
    6098:	18c7883a 	add	r3,r3,r3
    609c:	293ffa36 	bltu	r5,r4,6088 <__alt_mem_onchip_memory+0xf7806088>
    60a0:	18000826 	beq	r3,zero,60c4 <__udivsi3+0x54>
    60a4:	0005883a 	mov	r2,zero
    60a8:	31400236 	bltu	r6,r5,60b4 <__udivsi3+0x44>
    60ac:	314dc83a 	sub	r6,r6,r5
    60b0:	10c4b03a 	or	r2,r2,r3
    60b4:	1806d07a 	srli	r3,r3,1
    60b8:	280ad07a 	srli	r5,r5,1
    60bc:	183ffa1e 	bne	r3,zero,60a8 <__alt_mem_onchip_memory+0xf78060a8>
    60c0:	f800283a 	ret
    60c4:	0005883a 	mov	r2,zero
    60c8:	f800283a 	ret
    60cc:	00c00044 	movi	r3,1
    60d0:	003ff406 	br	60a4 <__alt_mem_onchip_memory+0xf78060a4>

000060d4 <__umodsi3>:
    60d4:	2005883a 	mov	r2,r4
    60d8:	2900122e 	bgeu	r5,r4,6124 <__umodsi3+0x50>
    60dc:	28001116 	blt	r5,zero,6124 <__umodsi3+0x50>
    60e0:	01800804 	movi	r6,32
    60e4:	00c00044 	movi	r3,1
    60e8:	00000206 	br	60f4 <__umodsi3+0x20>
    60ec:	30000c26 	beq	r6,zero,6120 <__umodsi3+0x4c>
    60f0:	28000516 	blt	r5,zero,6108 <__umodsi3+0x34>
    60f4:	294b883a 	add	r5,r5,r5
    60f8:	31bfffc4 	addi	r6,r6,-1
    60fc:	18c7883a 	add	r3,r3,r3
    6100:	293ffa36 	bltu	r5,r4,60ec <__alt_mem_onchip_memory+0xf78060ec>
    6104:	18000626 	beq	r3,zero,6120 <__umodsi3+0x4c>
    6108:	1806d07a 	srli	r3,r3,1
    610c:	11400136 	bltu	r2,r5,6114 <__umodsi3+0x40>
    6110:	1145c83a 	sub	r2,r2,r5
    6114:	280ad07a 	srli	r5,r5,1
    6118:	183ffb1e 	bne	r3,zero,6108 <__alt_mem_onchip_memory+0xf7806108>
    611c:	f800283a 	ret
    6120:	f800283a 	ret
    6124:	00c00044 	movi	r3,1
    6128:	003ff706 	br	6108 <__alt_mem_onchip_memory+0xf7806108>

0000612c <__errno>:
    612c:	00800074 	movhi	r2,1
    6130:	10950604 	addi	r2,r2,21528
    6134:	10800017 	ldw	r2,0(r2)
    6138:	f800283a 	ret

0000613c <_printf_r>:
    613c:	defffd04 	addi	sp,sp,-12
    6140:	2805883a 	mov	r2,r5
    6144:	dfc00015 	stw	ra,0(sp)
    6148:	d9800115 	stw	r6,4(sp)
    614c:	d9c00215 	stw	r7,8(sp)
    6150:	21400217 	ldw	r5,8(r4)
    6154:	d9c00104 	addi	r7,sp,4
    6158:	100d883a 	mov	r6,r2
    615c:	00064600 	call	6460 <___vfprintf_internal_r>
    6160:	dfc00017 	ldw	ra,0(sp)
    6164:	dec00304 	addi	sp,sp,12
    6168:	f800283a 	ret

0000616c <printf>:
    616c:	defffc04 	addi	sp,sp,-16
    6170:	dfc00015 	stw	ra,0(sp)
    6174:	d9400115 	stw	r5,4(sp)
    6178:	d9800215 	stw	r6,8(sp)
    617c:	d9c00315 	stw	r7,12(sp)
    6180:	00800074 	movhi	r2,1
    6184:	10950604 	addi	r2,r2,21528
    6188:	10800017 	ldw	r2,0(r2)
    618c:	200b883a 	mov	r5,r4
    6190:	d9800104 	addi	r6,sp,4
    6194:	11000217 	ldw	r4,8(r2)
    6198:	00086580 	call	8658 <__vfprintf_internal>
    619c:	dfc00017 	ldw	ra,0(sp)
    61a0:	dec00404 	addi	sp,sp,16
    61a4:	f800283a 	ret

000061a8 <_putchar_r>:
    61a8:	21800217 	ldw	r6,8(r4)
    61ac:	000d1781 	jmpi	d178 <_putc_r>

000061b0 <putchar>:
    61b0:	00800074 	movhi	r2,1
    61b4:	10950604 	addi	r2,r2,21528
    61b8:	200b883a 	mov	r5,r4
    61bc:	11000017 	ldw	r4,0(r2)
    61c0:	21800217 	ldw	r6,8(r4)
    61c4:	000d1781 	jmpi	d178 <_putc_r>

000061c8 <_puts_r>:
    61c8:	defff604 	addi	sp,sp,-40
    61cc:	dc000715 	stw	r16,28(sp)
    61d0:	2021883a 	mov	r16,r4
    61d4:	2809883a 	mov	r4,r5
    61d8:	dc400815 	stw	r17,32(sp)
    61dc:	dfc00915 	stw	ra,36(sp)
    61e0:	2823883a 	mov	r17,r5
    61e4:	00063180 	call	6318 <strlen>
    61e8:	10c00044 	addi	r3,r2,1
    61ec:	d8800115 	stw	r2,4(sp)
    61f0:	00800074 	movhi	r2,1
    61f4:	108d9804 	addi	r2,r2,13920
    61f8:	d8800215 	stw	r2,8(sp)
    61fc:	00800044 	movi	r2,1
    6200:	d8800315 	stw	r2,12(sp)
    6204:	00800084 	movi	r2,2
    6208:	dc400015 	stw	r17,0(sp)
    620c:	d8c00615 	stw	r3,24(sp)
    6210:	dec00415 	stw	sp,16(sp)
    6214:	d8800515 	stw	r2,20(sp)
    6218:	80000226 	beq	r16,zero,6224 <_puts_r+0x5c>
    621c:	80800e17 	ldw	r2,56(r16)
    6220:	10001426 	beq	r2,zero,6274 <_puts_r+0xac>
    6224:	81400217 	ldw	r5,8(r16)
    6228:	2880030b 	ldhu	r2,12(r5)
    622c:	10c8000c 	andi	r3,r2,8192
    6230:	1800061e 	bne	r3,zero,624c <_puts_r+0x84>
    6234:	29001917 	ldw	r4,100(r5)
    6238:	00f7ffc4 	movi	r3,-8193
    623c:	10880014 	ori	r2,r2,8192
    6240:	20c6703a 	and	r3,r4,r3
    6244:	2880030d 	sth	r2,12(r5)
    6248:	28c01915 	stw	r3,100(r5)
    624c:	d9800404 	addi	r6,sp,16
    6250:	8009883a 	mov	r4,r16
    6254:	000ab880 	call	ab88 <__sfvwrite_r>
    6258:	1000091e 	bne	r2,zero,6280 <_puts_r+0xb8>
    625c:	00800284 	movi	r2,10
    6260:	dfc00917 	ldw	ra,36(sp)
    6264:	dc400817 	ldw	r17,32(sp)
    6268:	dc000717 	ldw	r16,28(sp)
    626c:	dec00a04 	addi	sp,sp,40
    6270:	f800283a 	ret
    6274:	8009883a 	mov	r4,r16
    6278:	000a7040 	call	a704 <__sinit>
    627c:	003fe906 	br	6224 <__alt_mem_onchip_memory+0xf7806224>
    6280:	00bfffc4 	movi	r2,-1
    6284:	003ff606 	br	6260 <__alt_mem_onchip_memory+0xf7806260>

00006288 <puts>:
    6288:	00800074 	movhi	r2,1
    628c:	10950604 	addi	r2,r2,21528
    6290:	200b883a 	mov	r5,r4
    6294:	11000017 	ldw	r4,0(r2)
    6298:	00061c81 	jmpi	61c8 <_puts_r>

0000629c <srand>:
    629c:	00800074 	movhi	r2,1
    62a0:	10950604 	addi	r2,r2,21528
    62a4:	10800017 	ldw	r2,0(r2)
    62a8:	11002915 	stw	r4,164(r2)
    62ac:	10002a15 	stw	zero,168(r2)
    62b0:	f800283a 	ret

000062b4 <rand>:
    62b4:	00800074 	movhi	r2,1
    62b8:	defffe04 	addi	sp,sp,-8
    62bc:	10950604 	addi	r2,r2,21528
    62c0:	dc000015 	stw	r16,0(sp)
    62c4:	14000017 	ldw	r16,0(r2)
    62c8:	dfc00115 	stw	ra,4(sp)
    62cc:	01932574 	movhi	r6,19605
    62d0:	81002917 	ldw	r4,164(r16)
    62d4:	81402a17 	ldw	r5,168(r16)
    62d8:	01d614b4 	movhi	r7,22610
    62dc:	319fcb44 	addi	r6,r6,32557
    62e0:	39fd0b44 	addi	r7,r7,-3027
    62e4:	000fa2c0 	call	fa2c <__muldi3>
    62e8:	11000044 	addi	r4,r2,1
    62ec:	2085803a 	cmpltu	r2,r4,r2
    62f0:	10c7883a 	add	r3,r2,r3
    62f4:	00a00034 	movhi	r2,32768
    62f8:	10bfffc4 	addi	r2,r2,-1
    62fc:	1884703a 	and	r2,r3,r2
    6300:	81002915 	stw	r4,164(r16)
    6304:	80c02a15 	stw	r3,168(r16)
    6308:	dfc00117 	ldw	ra,4(sp)
    630c:	dc000017 	ldw	r16,0(sp)
    6310:	dec00204 	addi	sp,sp,8
    6314:	f800283a 	ret

00006318 <strlen>:
    6318:	208000cc 	andi	r2,r4,3
    631c:	10002026 	beq	r2,zero,63a0 <strlen+0x88>
    6320:	20800007 	ldb	r2,0(r4)
    6324:	10002026 	beq	r2,zero,63a8 <strlen+0x90>
    6328:	2005883a 	mov	r2,r4
    632c:	00000206 	br	6338 <strlen+0x20>
    6330:	10c00007 	ldb	r3,0(r2)
    6334:	18001826 	beq	r3,zero,6398 <strlen+0x80>
    6338:	10800044 	addi	r2,r2,1
    633c:	10c000cc 	andi	r3,r2,3
    6340:	183ffb1e 	bne	r3,zero,6330 <__alt_mem_onchip_memory+0xf7806330>
    6344:	10c00017 	ldw	r3,0(r2)
    6348:	01ffbff4 	movhi	r7,65279
    634c:	39ffbfc4 	addi	r7,r7,-257
    6350:	00ca303a 	nor	r5,zero,r3
    6354:	01a02074 	movhi	r6,32897
    6358:	19c7883a 	add	r3,r3,r7
    635c:	31a02004 	addi	r6,r6,-32640
    6360:	1946703a 	and	r3,r3,r5
    6364:	1986703a 	and	r3,r3,r6
    6368:	1800091e 	bne	r3,zero,6390 <strlen+0x78>
    636c:	10800104 	addi	r2,r2,4
    6370:	10c00017 	ldw	r3,0(r2)
    6374:	19cb883a 	add	r5,r3,r7
    6378:	00c6303a 	nor	r3,zero,r3
    637c:	28c6703a 	and	r3,r5,r3
    6380:	1986703a 	and	r3,r3,r6
    6384:	183ff926 	beq	r3,zero,636c <__alt_mem_onchip_memory+0xf780636c>
    6388:	00000106 	br	6390 <strlen+0x78>
    638c:	10800044 	addi	r2,r2,1
    6390:	10c00007 	ldb	r3,0(r2)
    6394:	183ffd1e 	bne	r3,zero,638c <__alt_mem_onchip_memory+0xf780638c>
    6398:	1105c83a 	sub	r2,r2,r4
    639c:	f800283a 	ret
    63a0:	2005883a 	mov	r2,r4
    63a4:	003fe706 	br	6344 <__alt_mem_onchip_memory+0xf7806344>
    63a8:	0005883a 	mov	r2,zero
    63ac:	f800283a 	ret

000063b0 <_system_r>:
    63b0:	2800021e 	bne	r5,zero,63bc <_system_r+0xc>
    63b4:	0005883a 	mov	r2,zero
    63b8:	f800283a 	ret
    63bc:	deffff04 	addi	sp,sp,-4
    63c0:	dfc00015 	stw	ra,0(sp)
    63c4:	000612c0 	call	612c <__errno>
    63c8:	00c01604 	movi	r3,88
    63cc:	10c00015 	stw	r3,0(r2)
    63d0:	00bfffc4 	movi	r2,-1
    63d4:	dfc00017 	ldw	ra,0(sp)
    63d8:	dec00104 	addi	sp,sp,4
    63dc:	f800283a 	ret

000063e0 <system>:
    63e0:	20000926 	beq	r4,zero,6408 <system+0x28>
    63e4:	deffff04 	addi	sp,sp,-4
    63e8:	dfc00015 	stw	ra,0(sp)
    63ec:	000612c0 	call	612c <__errno>
    63f0:	00c01604 	movi	r3,88
    63f4:	10c00015 	stw	r3,0(r2)
    63f8:	00bfffc4 	movi	r2,-1
    63fc:	dfc00017 	ldw	ra,0(sp)
    6400:	dec00104 	addi	sp,sp,4
    6404:	f800283a 	ret
    6408:	0005883a 	mov	r2,zero
    640c:	f800283a 	ret

00006410 <time>:
    6410:	00800074 	movhi	r2,1
    6414:	defffc04 	addi	sp,sp,-16
    6418:	10950604 	addi	r2,r2,21528
    641c:	dc000215 	stw	r16,8(sp)
    6420:	2021883a 	mov	r16,r4
    6424:	11000017 	ldw	r4,0(r2)
    6428:	000d883a 	mov	r6,zero
    642c:	d80b883a 	mov	r5,sp
    6430:	dfc00315 	stw	ra,12(sp)
    6434:	000b1cc0 	call	b1cc <_gettimeofday_r>
    6438:	10000716 	blt	r2,zero,6458 <time+0x48>
    643c:	d8800017 	ldw	r2,0(sp)
    6440:	80000126 	beq	r16,zero,6448 <time+0x38>
    6444:	80800015 	stw	r2,0(r16)
    6448:	dfc00317 	ldw	ra,12(sp)
    644c:	dc000217 	ldw	r16,8(sp)
    6450:	dec00404 	addi	sp,sp,16
    6454:	f800283a 	ret
    6458:	00bfffc4 	movi	r2,-1
    645c:	003ffa06 	br	6448 <__alt_mem_onchip_memory+0xf7806448>

00006460 <___vfprintf_internal_r>:
    6460:	deffb804 	addi	sp,sp,-288
    6464:	dfc04715 	stw	ra,284(sp)
    6468:	ddc04515 	stw	r23,276(sp)
    646c:	dd404315 	stw	r21,268(sp)
    6470:	d9002c15 	stw	r4,176(sp)
    6474:	282f883a 	mov	r23,r5
    6478:	302b883a 	mov	r21,r6
    647c:	d9c02d15 	stw	r7,180(sp)
    6480:	df004615 	stw	fp,280(sp)
    6484:	dd804415 	stw	r22,272(sp)
    6488:	dd004215 	stw	r20,264(sp)
    648c:	dcc04115 	stw	r19,260(sp)
    6490:	dc804015 	stw	r18,256(sp)
    6494:	dc403f15 	stw	r17,252(sp)
    6498:	dc003e15 	stw	r16,248(sp)
    649c:	000b2d40 	call	b2d4 <_localeconv_r>
    64a0:	10800017 	ldw	r2,0(r2)
    64a4:	1009883a 	mov	r4,r2
    64a8:	d8803415 	stw	r2,208(sp)
    64ac:	00063180 	call	6318 <strlen>
    64b0:	d8803715 	stw	r2,220(sp)
    64b4:	d8802c17 	ldw	r2,176(sp)
    64b8:	10000226 	beq	r2,zero,64c4 <___vfprintf_internal_r+0x64>
    64bc:	10800e17 	ldw	r2,56(r2)
    64c0:	1000f926 	beq	r2,zero,68a8 <___vfprintf_internal_r+0x448>
    64c4:	b880030b 	ldhu	r2,12(r23)
    64c8:	10c8000c 	andi	r3,r2,8192
    64cc:	1800061e 	bne	r3,zero,64e8 <___vfprintf_internal_r+0x88>
    64d0:	b9001917 	ldw	r4,100(r23)
    64d4:	00f7ffc4 	movi	r3,-8193
    64d8:	10880014 	ori	r2,r2,8192
    64dc:	20c6703a 	and	r3,r4,r3
    64e0:	b880030d 	sth	r2,12(r23)
    64e4:	b8c01915 	stw	r3,100(r23)
    64e8:	10c0020c 	andi	r3,r2,8
    64ec:	1800c126 	beq	r3,zero,67f4 <___vfprintf_internal_r+0x394>
    64f0:	b8c00417 	ldw	r3,16(r23)
    64f4:	1800bf26 	beq	r3,zero,67f4 <___vfprintf_internal_r+0x394>
    64f8:	1080068c 	andi	r2,r2,26
    64fc:	00c00284 	movi	r3,10
    6500:	10c0c426 	beq	r2,r3,6814 <___vfprintf_internal_r+0x3b4>
    6504:	d8c00404 	addi	r3,sp,16
    6508:	05000074 	movhi	r20,1
    650c:	d9001e04 	addi	r4,sp,120
    6510:	a50da984 	addi	r20,r20,13990
    6514:	d8c01e15 	stw	r3,120(sp)
    6518:	d8002015 	stw	zero,128(sp)
    651c:	d8001f15 	stw	zero,124(sp)
    6520:	d8003315 	stw	zero,204(sp)
    6524:	d8003615 	stw	zero,216(sp)
    6528:	d8003815 	stw	zero,224(sp)
    652c:	1811883a 	mov	r8,r3
    6530:	d8003915 	stw	zero,228(sp)
    6534:	d8003a15 	stw	zero,232(sp)
    6538:	d8002f15 	stw	zero,188(sp)
    653c:	d9002815 	stw	r4,160(sp)
    6540:	a8800007 	ldb	r2,0(r21)
    6544:	10027b26 	beq	r2,zero,6f34 <___vfprintf_internal_r+0xad4>
    6548:	00c00944 	movi	r3,37
    654c:	a821883a 	mov	r16,r21
    6550:	10c0021e 	bne	r2,r3,655c <___vfprintf_internal_r+0xfc>
    6554:	00001406 	br	65a8 <___vfprintf_internal_r+0x148>
    6558:	10c00326 	beq	r2,r3,6568 <___vfprintf_internal_r+0x108>
    655c:	84000044 	addi	r16,r16,1
    6560:	80800007 	ldb	r2,0(r16)
    6564:	103ffc1e 	bne	r2,zero,6558 <__alt_mem_onchip_memory+0xf7806558>
    6568:	8563c83a 	sub	r17,r16,r21
    656c:	88000e26 	beq	r17,zero,65a8 <___vfprintf_internal_r+0x148>
    6570:	d8c02017 	ldw	r3,128(sp)
    6574:	d8801f17 	ldw	r2,124(sp)
    6578:	45400015 	stw	r21,0(r8)
    657c:	1c47883a 	add	r3,r3,r17
    6580:	10800044 	addi	r2,r2,1
    6584:	d8c02015 	stw	r3,128(sp)
    6588:	44400115 	stw	r17,4(r8)
    658c:	d8801f15 	stw	r2,124(sp)
    6590:	00c001c4 	movi	r3,7
    6594:	1880a716 	blt	r3,r2,6834 <___vfprintf_internal_r+0x3d4>
    6598:	42000204 	addi	r8,r8,8
    659c:	d9402f17 	ldw	r5,188(sp)
    65a0:	2c4b883a 	add	r5,r5,r17
    65a4:	d9402f15 	stw	r5,188(sp)
    65a8:	80800007 	ldb	r2,0(r16)
    65ac:	1000a826 	beq	r2,zero,6850 <___vfprintf_internal_r+0x3f0>
    65b0:	84400047 	ldb	r17,1(r16)
    65b4:	00bfffc4 	movi	r2,-1
    65b8:	85400044 	addi	r21,r16,1
    65bc:	d8002785 	stb	zero,158(sp)
    65c0:	0007883a 	mov	r3,zero
    65c4:	000f883a 	mov	r7,zero
    65c8:	d8802915 	stw	r2,164(sp)
    65cc:	d8003115 	stw	zero,196(sp)
    65d0:	0025883a 	mov	r18,zero
    65d4:	01401604 	movi	r5,88
    65d8:	01800244 	movi	r6,9
    65dc:	02800a84 	movi	r10,42
    65e0:	02401b04 	movi	r9,108
    65e4:	ad400044 	addi	r21,r21,1
    65e8:	88bff804 	addi	r2,r17,-32
    65ec:	28830436 	bltu	r5,r2,7200 <___vfprintf_internal_r+0xda0>
    65f0:	100490ba 	slli	r2,r2,2
    65f4:	01000034 	movhi	r4,0
    65f8:	21198204 	addi	r4,r4,26120
    65fc:	1105883a 	add	r2,r2,r4
    6600:	10800017 	ldw	r2,0(r2)
    6604:	1000683a 	jmp	r2
    6608:	00007120 	cmpeqi	zero,zero,452
    660c:	00007200 	call	720 <calcNet+0x3d4>
    6610:	00007200 	call	720 <calcNet+0x3d4>
    6614:	00007140 	call	714 <calcNet+0x3c8>
    6618:	00007200 	call	720 <calcNet+0x3d4>
    661c:	00007200 	call	720 <calcNet+0x3d4>
    6620:	00007200 	call	720 <calcNet+0x3d4>
    6624:	00007200 	call	720 <calcNet+0x3d4>
    6628:	00007200 	call	720 <calcNet+0x3d4>
    662c:	00007200 	call	720 <calcNet+0x3d4>
    6630:	000068b4 	movhi	zero,418
    6634:	0000705c 	xori	zero,zero,449
    6638:	00007200 	call	720 <calcNet+0x3d4>
    663c:	0000677c 	xorhi	zero,zero,413
    6640:	000068dc 	xori	zero,zero,419
    6644:	00007200 	call	720 <calcNet+0x3d4>
    6648:	0000691c 	xori	zero,zero,420
    664c:	00006928 	cmpgeui	zero,zero,420
    6650:	00006928 	cmpgeui	zero,zero,420
    6654:	00006928 	cmpgeui	zero,zero,420
    6658:	00006928 	cmpgeui	zero,zero,420
    665c:	00006928 	cmpgeui	zero,zero,420
    6660:	00006928 	cmpgeui	zero,zero,420
    6664:	00006928 	cmpgeui	zero,zero,420
    6668:	00006928 	cmpgeui	zero,zero,420
    666c:	00006928 	cmpgeui	zero,zero,420
    6670:	00007200 	call	720 <calcNet+0x3d4>
    6674:	00007200 	call	720 <calcNet+0x3d4>
    6678:	00007200 	call	720 <calcNet+0x3d4>
    667c:	00007200 	call	720 <calcNet+0x3d4>
    6680:	00007200 	call	720 <calcNet+0x3d4>
    6684:	00007200 	call	720 <calcNet+0x3d4>
    6688:	00007200 	call	720 <calcNet+0x3d4>
    668c:	00007200 	call	720 <calcNet+0x3d4>
    6690:	00007200 	call	720 <calcNet+0x3d4>
    6694:	00007200 	call	720 <calcNet+0x3d4>
    6698:	0000695c 	xori	zero,zero,421
    669c:	00006a18 	cmpnei	zero,zero,424
    66a0:	00007200 	call	720 <calcNet+0x3d4>
    66a4:	00006a18 	cmpnei	zero,zero,424
    66a8:	00007200 	call	720 <calcNet+0x3d4>
    66ac:	00007200 	call	720 <calcNet+0x3d4>
    66b0:	00007200 	call	720 <calcNet+0x3d4>
    66b4:	00007200 	call	720 <calcNet+0x3d4>
    66b8:	00006ab8 	rdprs	zero,zero,426
    66bc:	00007200 	call	720 <calcNet+0x3d4>
    66c0:	00007200 	call	720 <calcNet+0x3d4>
    66c4:	00006ac4 	movi	zero,427
    66c8:	00007200 	call	720 <calcNet+0x3d4>
    66cc:	00007200 	call	720 <calcNet+0x3d4>
    66d0:	00007200 	call	720 <calcNet+0x3d4>
    66d4:	00007200 	call	720 <calcNet+0x3d4>
    66d8:	00007200 	call	720 <calcNet+0x3d4>
    66dc:	00006f3c 	xorhi	zero,zero,444
    66e0:	00007200 	call	720 <calcNet+0x3d4>
    66e4:	00007200 	call	720 <calcNet+0x3d4>
    66e8:	00006f9c 	xori	zero,zero,446
    66ec:	00007200 	call	720 <calcNet+0x3d4>
    66f0:	00007200 	call	720 <calcNet+0x3d4>
    66f4:	00007200 	call	720 <calcNet+0x3d4>
    66f8:	00007200 	call	720 <calcNet+0x3d4>
    66fc:	00007200 	call	720 <calcNet+0x3d4>
    6700:	00007200 	call	720 <calcNet+0x3d4>
    6704:	00007200 	call	720 <calcNet+0x3d4>
    6708:	00007200 	call	720 <calcNet+0x3d4>
    670c:	00007200 	call	720 <calcNet+0x3d4>
    6710:	00007200 	call	720 <calcNet+0x3d4>
    6714:	000071ac 	andhi	zero,zero,454
    6718:	0000714c 	andi	zero,zero,453
    671c:	00006a18 	cmpnei	zero,zero,424
    6720:	00006a18 	cmpnei	zero,zero,424
    6724:	00006a18 	cmpnei	zero,zero,424
    6728:	0000715c 	xori	zero,zero,453
    672c:	0000714c 	andi	zero,zero,453
    6730:	00007200 	call	720 <calcNet+0x3d4>
    6734:	00007200 	call	720 <calcNet+0x3d4>
    6738:	00007168 	cmpgeui	zero,zero,453
    673c:	00007200 	call	720 <calcNet+0x3d4>
    6740:	00007178 	rdprs	zero,zero,453
    6744:	0000704c 	andi	zero,zero,449
    6748:	00006788 	cmpgei	zero,zero,414
    674c:	0000706c 	andhi	zero,zero,449
    6750:	00007200 	call	720 <calcNet+0x3d4>
    6754:	00007078 	rdprs	zero,zero,449
    6758:	00007200 	call	720 <calcNet+0x3d4>
    675c:	000070d4 	movui	zero,451
    6760:	00007200 	call	720 <calcNet+0x3d4>
    6764:	00007200 	call	720 <calcNet+0x3d4>
    6768:	000070e4 	muli	zero,zero,451
    676c:	d9003117 	ldw	r4,196(sp)
    6770:	d8802d15 	stw	r2,180(sp)
    6774:	0109c83a 	sub	r4,zero,r4
    6778:	d9003115 	stw	r4,196(sp)
    677c:	94800114 	ori	r18,r18,4
    6780:	ac400007 	ldb	r17,0(r21)
    6784:	003f9706 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    6788:	00800c04 	movi	r2,48
    678c:	d9002d17 	ldw	r4,180(sp)
    6790:	d9402917 	ldw	r5,164(sp)
    6794:	d8802705 	stb	r2,156(sp)
    6798:	00801e04 	movi	r2,120
    679c:	d8802745 	stb	r2,157(sp)
    67a0:	d8002785 	stb	zero,158(sp)
    67a4:	20c00104 	addi	r3,r4,4
    67a8:	24c00017 	ldw	r19,0(r4)
    67ac:	002d883a 	mov	r22,zero
    67b0:	90800094 	ori	r2,r18,2
    67b4:	28029a16 	blt	r5,zero,7220 <___vfprintf_internal_r+0xdc0>
    67b8:	00bfdfc4 	movi	r2,-129
    67bc:	90a4703a 	and	r18,r18,r2
    67c0:	d8c02d15 	stw	r3,180(sp)
    67c4:	94800094 	ori	r18,r18,2
    67c8:	9802871e 	bne	r19,zero,71e8 <___vfprintf_internal_r+0xd88>
    67cc:	00800074 	movhi	r2,1
    67d0:	108da204 	addi	r2,r2,13960
    67d4:	d8803915 	stw	r2,228(sp)
    67d8:	04401e04 	movi	r17,120
    67dc:	d8802917 	ldw	r2,164(sp)
    67e0:	0039883a 	mov	fp,zero
    67e4:	1001e926 	beq	r2,zero,6f8c <___vfprintf_internal_r+0xb2c>
    67e8:	0027883a 	mov	r19,zero
    67ec:	002d883a 	mov	r22,zero
    67f0:	00020506 	br	7008 <___vfprintf_internal_r+0xba8>
    67f4:	d9002c17 	ldw	r4,176(sp)
    67f8:	b80b883a 	mov	r5,r23
    67fc:	00087300 	call	8730 <__swsetup_r>
    6800:	1005ac1e 	bne	r2,zero,7eb4 <___vfprintf_internal_r+0x1a54>
    6804:	b880030b 	ldhu	r2,12(r23)
    6808:	00c00284 	movi	r3,10
    680c:	1080068c 	andi	r2,r2,26
    6810:	10ff3c1e 	bne	r2,r3,6504 <__alt_mem_onchip_memory+0xf7806504>
    6814:	b880038f 	ldh	r2,14(r23)
    6818:	103f3a16 	blt	r2,zero,6504 <__alt_mem_onchip_memory+0xf7806504>
    681c:	d9c02d17 	ldw	r7,180(sp)
    6820:	d9002c17 	ldw	r4,176(sp)
    6824:	a80d883a 	mov	r6,r21
    6828:	b80b883a 	mov	r5,r23
    682c:	00086740 	call	8674 <__sbprintf>
    6830:	00001106 	br	6878 <___vfprintf_internal_r+0x418>
    6834:	d9002c17 	ldw	r4,176(sp)
    6838:	d9801e04 	addi	r6,sp,120
    683c:	b80b883a 	mov	r5,r23
    6840:	000dbac0 	call	dbac <__sprint_r>
    6844:	1000081e 	bne	r2,zero,6868 <___vfprintf_internal_r+0x408>
    6848:	da000404 	addi	r8,sp,16
    684c:	003f5306 	br	659c <__alt_mem_onchip_memory+0xf780659c>
    6850:	d8802017 	ldw	r2,128(sp)
    6854:	10000426 	beq	r2,zero,6868 <___vfprintf_internal_r+0x408>
    6858:	d9002c17 	ldw	r4,176(sp)
    685c:	d9801e04 	addi	r6,sp,120
    6860:	b80b883a 	mov	r5,r23
    6864:	000dbac0 	call	dbac <__sprint_r>
    6868:	b880030b 	ldhu	r2,12(r23)
    686c:	1080100c 	andi	r2,r2,64
    6870:	1005901e 	bne	r2,zero,7eb4 <___vfprintf_internal_r+0x1a54>
    6874:	d8802f17 	ldw	r2,188(sp)
    6878:	dfc04717 	ldw	ra,284(sp)
    687c:	df004617 	ldw	fp,280(sp)
    6880:	ddc04517 	ldw	r23,276(sp)
    6884:	dd804417 	ldw	r22,272(sp)
    6888:	dd404317 	ldw	r21,268(sp)
    688c:	dd004217 	ldw	r20,264(sp)
    6890:	dcc04117 	ldw	r19,260(sp)
    6894:	dc804017 	ldw	r18,256(sp)
    6898:	dc403f17 	ldw	r17,252(sp)
    689c:	dc003e17 	ldw	r16,248(sp)
    68a0:	dec04804 	addi	sp,sp,288
    68a4:	f800283a 	ret
    68a8:	d9002c17 	ldw	r4,176(sp)
    68ac:	000a7040 	call	a704 <__sinit>
    68b0:	003f0406 	br	64c4 <__alt_mem_onchip_memory+0xf78064c4>
    68b4:	d8802d17 	ldw	r2,180(sp)
    68b8:	d9002d17 	ldw	r4,180(sp)
    68bc:	10800017 	ldw	r2,0(r2)
    68c0:	d8803115 	stw	r2,196(sp)
    68c4:	20800104 	addi	r2,r4,4
    68c8:	d9003117 	ldw	r4,196(sp)
    68cc:	203fa716 	blt	r4,zero,676c <__alt_mem_onchip_memory+0xf780676c>
    68d0:	d8802d15 	stw	r2,180(sp)
    68d4:	ac400007 	ldb	r17,0(r21)
    68d8:	003f4206 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    68dc:	ac400007 	ldb	r17,0(r21)
    68e0:	aac00044 	addi	r11,r21,1
    68e4:	8a872826 	beq	r17,r10,8588 <___vfprintf_internal_r+0x2128>
    68e8:	88bff404 	addi	r2,r17,-48
    68ec:	0009883a 	mov	r4,zero
    68f0:	30867d36 	bltu	r6,r2,82e8 <___vfprintf_internal_r+0x1e88>
    68f4:	5c400007 	ldb	r17,0(r11)
    68f8:	210002a4 	muli	r4,r4,10
    68fc:	5d400044 	addi	r21,r11,1
    6900:	a817883a 	mov	r11,r21
    6904:	2089883a 	add	r4,r4,r2
    6908:	88bff404 	addi	r2,r17,-48
    690c:	30bff92e 	bgeu	r6,r2,68f4 <__alt_mem_onchip_memory+0xf78068f4>
    6910:	2005c916 	blt	r4,zero,8038 <___vfprintf_internal_r+0x1bd8>
    6914:	d9002915 	stw	r4,164(sp)
    6918:	003f3306 	br	65e8 <__alt_mem_onchip_memory+0xf78065e8>
    691c:	94802014 	ori	r18,r18,128
    6920:	ac400007 	ldb	r17,0(r21)
    6924:	003f2f06 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    6928:	a809883a 	mov	r4,r21
    692c:	d8003115 	stw	zero,196(sp)
    6930:	88bff404 	addi	r2,r17,-48
    6934:	0017883a 	mov	r11,zero
    6938:	24400007 	ldb	r17,0(r4)
    693c:	5ac002a4 	muli	r11,r11,10
    6940:	ad400044 	addi	r21,r21,1
    6944:	a809883a 	mov	r4,r21
    6948:	12d7883a 	add	r11,r2,r11
    694c:	88bff404 	addi	r2,r17,-48
    6950:	30bff92e 	bgeu	r6,r2,6938 <__alt_mem_onchip_memory+0xf7806938>
    6954:	dac03115 	stw	r11,196(sp)
    6958:	003f2306 	br	65e8 <__alt_mem_onchip_memory+0xf78065e8>
    695c:	18c03fcc 	andi	r3,r3,255
    6960:	18072b1e 	bne	r3,zero,8610 <___vfprintf_internal_r+0x21b0>
    6964:	94800414 	ori	r18,r18,16
    6968:	9080080c 	andi	r2,r18,32
    696c:	10037b26 	beq	r2,zero,775c <___vfprintf_internal_r+0x12fc>
    6970:	d9402d17 	ldw	r5,180(sp)
    6974:	28800117 	ldw	r2,4(r5)
    6978:	2cc00017 	ldw	r19,0(r5)
    697c:	29400204 	addi	r5,r5,8
    6980:	d9402d15 	stw	r5,180(sp)
    6984:	102d883a 	mov	r22,r2
    6988:	10044b16 	blt	r2,zero,7ab8 <___vfprintf_internal_r+0x1658>
    698c:	d9402917 	ldw	r5,164(sp)
    6990:	df002783 	ldbu	fp,158(sp)
    6994:	2803bc16 	blt	r5,zero,7888 <___vfprintf_internal_r+0x1428>
    6998:	00ffdfc4 	movi	r3,-129
    699c:	9d84b03a 	or	r2,r19,r22
    69a0:	90e4703a 	and	r18,r18,r3
    69a4:	10017726 	beq	r2,zero,6f84 <___vfprintf_internal_r+0xb24>
    69a8:	b0038326 	beq	r22,zero,77b8 <___vfprintf_internal_r+0x1358>
    69ac:	dc402a15 	stw	r17,168(sp)
    69b0:	dc001e04 	addi	r16,sp,120
    69b4:	b023883a 	mov	r17,r22
    69b8:	402d883a 	mov	r22,r8
    69bc:	9809883a 	mov	r4,r19
    69c0:	880b883a 	mov	r5,r17
    69c4:	01800284 	movi	r6,10
    69c8:	000f883a 	mov	r7,zero
    69cc:	00100040 	call	10004 <__umoddi3>
    69d0:	10800c04 	addi	r2,r2,48
    69d4:	843fffc4 	addi	r16,r16,-1
    69d8:	9809883a 	mov	r4,r19
    69dc:	880b883a 	mov	r5,r17
    69e0:	80800005 	stb	r2,0(r16)
    69e4:	01800284 	movi	r6,10
    69e8:	000f883a 	mov	r7,zero
    69ec:	000fa8c0 	call	fa8c <__udivdi3>
    69f0:	1027883a 	mov	r19,r2
    69f4:	10c4b03a 	or	r2,r2,r3
    69f8:	1823883a 	mov	r17,r3
    69fc:	103fef1e 	bne	r2,zero,69bc <__alt_mem_onchip_memory+0xf78069bc>
    6a00:	d8c02817 	ldw	r3,160(sp)
    6a04:	dc402a17 	ldw	r17,168(sp)
    6a08:	b011883a 	mov	r8,r22
    6a0c:	1c07c83a 	sub	r3,r3,r16
    6a10:	d8c02e15 	stw	r3,184(sp)
    6a14:	00005906 	br	6b7c <___vfprintf_internal_r+0x71c>
    6a18:	18c03fcc 	andi	r3,r3,255
    6a1c:	1806fa1e 	bne	r3,zero,8608 <___vfprintf_internal_r+0x21a8>
    6a20:	9080020c 	andi	r2,r18,8
    6a24:	10048a26 	beq	r2,zero,7c50 <___vfprintf_internal_r+0x17f0>
    6a28:	d8c02d17 	ldw	r3,180(sp)
    6a2c:	d9002d17 	ldw	r4,180(sp)
    6a30:	d9402d17 	ldw	r5,180(sp)
    6a34:	18c00017 	ldw	r3,0(r3)
    6a38:	21000117 	ldw	r4,4(r4)
    6a3c:	29400204 	addi	r5,r5,8
    6a40:	d8c03615 	stw	r3,216(sp)
    6a44:	d9003815 	stw	r4,224(sp)
    6a48:	d9402d15 	stw	r5,180(sp)
    6a4c:	d9003617 	ldw	r4,216(sp)
    6a50:	d9403817 	ldw	r5,224(sp)
    6a54:	da003d15 	stw	r8,244(sp)
    6a58:	04000044 	movi	r16,1
    6a5c:	00024000 	call	2400 <__fpclassifyd>
    6a60:	da003d17 	ldw	r8,244(sp)
    6a64:	14041f1e 	bne	r2,r16,7ae4 <___vfprintf_internal_r+0x1684>
    6a68:	d9003617 	ldw	r4,216(sp)
    6a6c:	d9403817 	ldw	r5,224(sp)
    6a70:	000d883a 	mov	r6,zero
    6a74:	000f883a 	mov	r7,zero
    6a78:	00049f80 	call	49f8 <__ledf2>
    6a7c:	da003d17 	ldw	r8,244(sp)
    6a80:	1005be16 	blt	r2,zero,817c <___vfprintf_internal_r+0x1d1c>
    6a84:	df002783 	ldbu	fp,158(sp)
    6a88:	008011c4 	movi	r2,71
    6a8c:	1445330e 	bge	r2,r17,7f5c <___vfprintf_internal_r+0x1afc>
    6a90:	04000074 	movhi	r16,1
    6a94:	840d9a04 	addi	r16,r16,13928
    6a98:	00c000c4 	movi	r3,3
    6a9c:	00bfdfc4 	movi	r2,-129
    6aa0:	d8c02a15 	stw	r3,168(sp)
    6aa4:	90a4703a 	and	r18,r18,r2
    6aa8:	d8c02e15 	stw	r3,184(sp)
    6aac:	d8002915 	stw	zero,164(sp)
    6ab0:	d8003215 	stw	zero,200(sp)
    6ab4:	00003706 	br	6b94 <___vfprintf_internal_r+0x734>
    6ab8:	94800214 	ori	r18,r18,8
    6abc:	ac400007 	ldb	r17,0(r21)
    6ac0:	003ec806 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    6ac4:	18c03fcc 	andi	r3,r3,255
    6ac8:	1806db1e 	bne	r3,zero,8638 <___vfprintf_internal_r+0x21d8>
    6acc:	94800414 	ori	r18,r18,16
    6ad0:	9080080c 	andi	r2,r18,32
    6ad4:	1002d826 	beq	r2,zero,7638 <___vfprintf_internal_r+0x11d8>
    6ad8:	d9402d17 	ldw	r5,180(sp)
    6adc:	d8c02917 	ldw	r3,164(sp)
    6ae0:	d8002785 	stb	zero,158(sp)
    6ae4:	28800204 	addi	r2,r5,8
    6ae8:	2cc00017 	ldw	r19,0(r5)
    6aec:	2d800117 	ldw	r22,4(r5)
    6af0:	18048f16 	blt	r3,zero,7d30 <___vfprintf_internal_r+0x18d0>
    6af4:	013fdfc4 	movi	r4,-129
    6af8:	9d86b03a 	or	r3,r19,r22
    6afc:	d8802d15 	stw	r2,180(sp)
    6b00:	9124703a 	and	r18,r18,r4
    6b04:	1802d91e 	bne	r3,zero,766c <___vfprintf_internal_r+0x120c>
    6b08:	d8c02917 	ldw	r3,164(sp)
    6b0c:	0039883a 	mov	fp,zero
    6b10:	1805c326 	beq	r3,zero,8220 <___vfprintf_internal_r+0x1dc0>
    6b14:	0027883a 	mov	r19,zero
    6b18:	002d883a 	mov	r22,zero
    6b1c:	dc001e04 	addi	r16,sp,120
    6b20:	9806d0fa 	srli	r3,r19,3
    6b24:	b008977a 	slli	r4,r22,29
    6b28:	b02cd0fa 	srli	r22,r22,3
    6b2c:	9cc001cc 	andi	r19,r19,7
    6b30:	98800c04 	addi	r2,r19,48
    6b34:	843fffc4 	addi	r16,r16,-1
    6b38:	20e6b03a 	or	r19,r4,r3
    6b3c:	80800005 	stb	r2,0(r16)
    6b40:	9d86b03a 	or	r3,r19,r22
    6b44:	183ff61e 	bne	r3,zero,6b20 <__alt_mem_onchip_memory+0xf7806b20>
    6b48:	90c0004c 	andi	r3,r18,1
    6b4c:	18013b26 	beq	r3,zero,703c <___vfprintf_internal_r+0xbdc>
    6b50:	10803fcc 	andi	r2,r2,255
    6b54:	1080201c 	xori	r2,r2,128
    6b58:	10bfe004 	addi	r2,r2,-128
    6b5c:	00c00c04 	movi	r3,48
    6b60:	10c13626 	beq	r2,r3,703c <___vfprintf_internal_r+0xbdc>
    6b64:	80ffffc5 	stb	r3,-1(r16)
    6b68:	d8c02817 	ldw	r3,160(sp)
    6b6c:	80bfffc4 	addi	r2,r16,-1
    6b70:	1021883a 	mov	r16,r2
    6b74:	1887c83a 	sub	r3,r3,r2
    6b78:	d8c02e15 	stw	r3,184(sp)
    6b7c:	d8802e17 	ldw	r2,184(sp)
    6b80:	d9002917 	ldw	r4,164(sp)
    6b84:	1100010e 	bge	r2,r4,6b8c <___vfprintf_internal_r+0x72c>
    6b88:	2005883a 	mov	r2,r4
    6b8c:	d8802a15 	stw	r2,168(sp)
    6b90:	d8003215 	stw	zero,200(sp)
    6b94:	e7003fcc 	andi	fp,fp,255
    6b98:	e700201c 	xori	fp,fp,128
    6b9c:	e73fe004 	addi	fp,fp,-128
    6ba0:	e0000326 	beq	fp,zero,6bb0 <___vfprintf_internal_r+0x750>
    6ba4:	d8c02a17 	ldw	r3,168(sp)
    6ba8:	18c00044 	addi	r3,r3,1
    6bac:	d8c02a15 	stw	r3,168(sp)
    6bb0:	90c0008c 	andi	r3,r18,2
    6bb4:	d8c02b15 	stw	r3,172(sp)
    6bb8:	18000326 	beq	r3,zero,6bc8 <___vfprintf_internal_r+0x768>
    6bbc:	d8c02a17 	ldw	r3,168(sp)
    6bc0:	18c00084 	addi	r3,r3,2
    6bc4:	d8c02a15 	stw	r3,168(sp)
    6bc8:	90c0210c 	andi	r3,r18,132
    6bcc:	d8c03015 	stw	r3,192(sp)
    6bd0:	1801a31e 	bne	r3,zero,7260 <___vfprintf_internal_r+0xe00>
    6bd4:	d9003117 	ldw	r4,196(sp)
    6bd8:	d8c02a17 	ldw	r3,168(sp)
    6bdc:	20e7c83a 	sub	r19,r4,r3
    6be0:	04c19f0e 	bge	zero,r19,7260 <___vfprintf_internal_r+0xe00>
    6be4:	02400404 	movi	r9,16
    6be8:	d8c02017 	ldw	r3,128(sp)
    6bec:	d8801f17 	ldw	r2,124(sp)
    6bf0:	4cc50d0e 	bge	r9,r19,8028 <___vfprintf_internal_r+0x1bc8>
    6bf4:	01400074 	movhi	r5,1
    6bf8:	294dad84 	addi	r5,r5,14006
    6bfc:	dc403b15 	stw	r17,236(sp)
    6c00:	d9403515 	stw	r5,212(sp)
    6c04:	9823883a 	mov	r17,r19
    6c08:	482d883a 	mov	r22,r9
    6c0c:	9027883a 	mov	r19,r18
    6c10:	070001c4 	movi	fp,7
    6c14:	8025883a 	mov	r18,r16
    6c18:	dc002c17 	ldw	r16,176(sp)
    6c1c:	00000306 	br	6c2c <___vfprintf_internal_r+0x7cc>
    6c20:	8c7ffc04 	addi	r17,r17,-16
    6c24:	42000204 	addi	r8,r8,8
    6c28:	b440130e 	bge	r22,r17,6c78 <___vfprintf_internal_r+0x818>
    6c2c:	01000074 	movhi	r4,1
    6c30:	18c00404 	addi	r3,r3,16
    6c34:	10800044 	addi	r2,r2,1
    6c38:	210dad84 	addi	r4,r4,14006
    6c3c:	41000015 	stw	r4,0(r8)
    6c40:	45800115 	stw	r22,4(r8)
    6c44:	d8c02015 	stw	r3,128(sp)
    6c48:	d8801f15 	stw	r2,124(sp)
    6c4c:	e0bff40e 	bge	fp,r2,6c20 <__alt_mem_onchip_memory+0xf7806c20>
    6c50:	d9801e04 	addi	r6,sp,120
    6c54:	b80b883a 	mov	r5,r23
    6c58:	8009883a 	mov	r4,r16
    6c5c:	000dbac0 	call	dbac <__sprint_r>
    6c60:	103f011e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    6c64:	8c7ffc04 	addi	r17,r17,-16
    6c68:	d8c02017 	ldw	r3,128(sp)
    6c6c:	d8801f17 	ldw	r2,124(sp)
    6c70:	da000404 	addi	r8,sp,16
    6c74:	b47fed16 	blt	r22,r17,6c2c <__alt_mem_onchip_memory+0xf7806c2c>
    6c78:	9021883a 	mov	r16,r18
    6c7c:	9825883a 	mov	r18,r19
    6c80:	8827883a 	mov	r19,r17
    6c84:	dc403b17 	ldw	r17,236(sp)
    6c88:	d9403517 	ldw	r5,212(sp)
    6c8c:	98c7883a 	add	r3,r19,r3
    6c90:	10800044 	addi	r2,r2,1
    6c94:	41400015 	stw	r5,0(r8)
    6c98:	44c00115 	stw	r19,4(r8)
    6c9c:	d8c02015 	stw	r3,128(sp)
    6ca0:	d8801f15 	stw	r2,124(sp)
    6ca4:	010001c4 	movi	r4,7
    6ca8:	2082a316 	blt	r4,r2,7738 <___vfprintf_internal_r+0x12d8>
    6cac:	df002787 	ldb	fp,158(sp)
    6cb0:	42000204 	addi	r8,r8,8
    6cb4:	e0000c26 	beq	fp,zero,6ce8 <___vfprintf_internal_r+0x888>
    6cb8:	d8801f17 	ldw	r2,124(sp)
    6cbc:	d9002784 	addi	r4,sp,158
    6cc0:	18c00044 	addi	r3,r3,1
    6cc4:	10800044 	addi	r2,r2,1
    6cc8:	41000015 	stw	r4,0(r8)
    6ccc:	01000044 	movi	r4,1
    6cd0:	41000115 	stw	r4,4(r8)
    6cd4:	d8c02015 	stw	r3,128(sp)
    6cd8:	d8801f15 	stw	r2,124(sp)
    6cdc:	010001c4 	movi	r4,7
    6ce0:	20823c16 	blt	r4,r2,75d4 <___vfprintf_internal_r+0x1174>
    6ce4:	42000204 	addi	r8,r8,8
    6ce8:	d8802b17 	ldw	r2,172(sp)
    6cec:	10000c26 	beq	r2,zero,6d20 <___vfprintf_internal_r+0x8c0>
    6cf0:	d8801f17 	ldw	r2,124(sp)
    6cf4:	d9002704 	addi	r4,sp,156
    6cf8:	18c00084 	addi	r3,r3,2
    6cfc:	10800044 	addi	r2,r2,1
    6d00:	41000015 	stw	r4,0(r8)
    6d04:	01000084 	movi	r4,2
    6d08:	41000115 	stw	r4,4(r8)
    6d0c:	d8c02015 	stw	r3,128(sp)
    6d10:	d8801f15 	stw	r2,124(sp)
    6d14:	010001c4 	movi	r4,7
    6d18:	20823616 	blt	r4,r2,75f4 <___vfprintf_internal_r+0x1194>
    6d1c:	42000204 	addi	r8,r8,8
    6d20:	d9003017 	ldw	r4,192(sp)
    6d24:	00802004 	movi	r2,128
    6d28:	20819926 	beq	r4,r2,7390 <___vfprintf_internal_r+0xf30>
    6d2c:	d9402917 	ldw	r5,164(sp)
    6d30:	d8802e17 	ldw	r2,184(sp)
    6d34:	28adc83a 	sub	r22,r5,r2
    6d38:	0580310e 	bge	zero,r22,6e00 <___vfprintf_internal_r+0x9a0>
    6d3c:	07000404 	movi	fp,16
    6d40:	d8801f17 	ldw	r2,124(sp)
    6d44:	e584140e 	bge	fp,r22,7d98 <___vfprintf_internal_r+0x1938>
    6d48:	01400074 	movhi	r5,1
    6d4c:	294da984 	addi	r5,r5,13990
    6d50:	dc402915 	stw	r17,164(sp)
    6d54:	d9402b15 	stw	r5,172(sp)
    6d58:	b023883a 	mov	r17,r22
    6d5c:	04c001c4 	movi	r19,7
    6d60:	a82d883a 	mov	r22,r21
    6d64:	902b883a 	mov	r21,r18
    6d68:	8025883a 	mov	r18,r16
    6d6c:	dc002c17 	ldw	r16,176(sp)
    6d70:	00000306 	br	6d80 <___vfprintf_internal_r+0x920>
    6d74:	8c7ffc04 	addi	r17,r17,-16
    6d78:	42000204 	addi	r8,r8,8
    6d7c:	e440110e 	bge	fp,r17,6dc4 <___vfprintf_internal_r+0x964>
    6d80:	18c00404 	addi	r3,r3,16
    6d84:	10800044 	addi	r2,r2,1
    6d88:	45000015 	stw	r20,0(r8)
    6d8c:	47000115 	stw	fp,4(r8)
    6d90:	d8c02015 	stw	r3,128(sp)
    6d94:	d8801f15 	stw	r2,124(sp)
    6d98:	98bff60e 	bge	r19,r2,6d74 <__alt_mem_onchip_memory+0xf7806d74>
    6d9c:	d9801e04 	addi	r6,sp,120
    6da0:	b80b883a 	mov	r5,r23
    6da4:	8009883a 	mov	r4,r16
    6da8:	000dbac0 	call	dbac <__sprint_r>
    6dac:	103eae1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    6db0:	8c7ffc04 	addi	r17,r17,-16
    6db4:	d8c02017 	ldw	r3,128(sp)
    6db8:	d8801f17 	ldw	r2,124(sp)
    6dbc:	da000404 	addi	r8,sp,16
    6dc0:	e47fef16 	blt	fp,r17,6d80 <__alt_mem_onchip_memory+0xf7806d80>
    6dc4:	9021883a 	mov	r16,r18
    6dc8:	a825883a 	mov	r18,r21
    6dcc:	b02b883a 	mov	r21,r22
    6dd0:	882d883a 	mov	r22,r17
    6dd4:	dc402917 	ldw	r17,164(sp)
    6dd8:	d9002b17 	ldw	r4,172(sp)
    6ddc:	1d87883a 	add	r3,r3,r22
    6de0:	10800044 	addi	r2,r2,1
    6de4:	41000015 	stw	r4,0(r8)
    6de8:	45800115 	stw	r22,4(r8)
    6dec:	d8c02015 	stw	r3,128(sp)
    6df0:	d8801f15 	stw	r2,124(sp)
    6df4:	010001c4 	movi	r4,7
    6df8:	2081ee16 	blt	r4,r2,75b4 <___vfprintf_internal_r+0x1154>
    6dfc:	42000204 	addi	r8,r8,8
    6e00:	9080400c 	andi	r2,r18,256
    6e04:	1001181e 	bne	r2,zero,7268 <___vfprintf_internal_r+0xe08>
    6e08:	d9402e17 	ldw	r5,184(sp)
    6e0c:	d8801f17 	ldw	r2,124(sp)
    6e10:	44000015 	stw	r16,0(r8)
    6e14:	1947883a 	add	r3,r3,r5
    6e18:	10800044 	addi	r2,r2,1
    6e1c:	41400115 	stw	r5,4(r8)
    6e20:	d8c02015 	stw	r3,128(sp)
    6e24:	d8801f15 	stw	r2,124(sp)
    6e28:	010001c4 	movi	r4,7
    6e2c:	2081d316 	blt	r4,r2,757c <___vfprintf_internal_r+0x111c>
    6e30:	42000204 	addi	r8,r8,8
    6e34:	9480010c 	andi	r18,r18,4
    6e38:	90003226 	beq	r18,zero,6f04 <___vfprintf_internal_r+0xaa4>
    6e3c:	d9403117 	ldw	r5,196(sp)
    6e40:	d8802a17 	ldw	r2,168(sp)
    6e44:	28a1c83a 	sub	r16,r5,r2
    6e48:	04002e0e 	bge	zero,r16,6f04 <___vfprintf_internal_r+0xaa4>
    6e4c:	04400404 	movi	r17,16
    6e50:	d8801f17 	ldw	r2,124(sp)
    6e54:	8c04a20e 	bge	r17,r16,80e0 <___vfprintf_internal_r+0x1c80>
    6e58:	01400074 	movhi	r5,1
    6e5c:	294dad84 	addi	r5,r5,14006
    6e60:	d9403515 	stw	r5,212(sp)
    6e64:	048001c4 	movi	r18,7
    6e68:	dcc02c17 	ldw	r19,176(sp)
    6e6c:	00000306 	br	6e7c <___vfprintf_internal_r+0xa1c>
    6e70:	843ffc04 	addi	r16,r16,-16
    6e74:	42000204 	addi	r8,r8,8
    6e78:	8c00130e 	bge	r17,r16,6ec8 <___vfprintf_internal_r+0xa68>
    6e7c:	01000074 	movhi	r4,1
    6e80:	18c00404 	addi	r3,r3,16
    6e84:	10800044 	addi	r2,r2,1
    6e88:	210dad84 	addi	r4,r4,14006
    6e8c:	41000015 	stw	r4,0(r8)
    6e90:	44400115 	stw	r17,4(r8)
    6e94:	d8c02015 	stw	r3,128(sp)
    6e98:	d8801f15 	stw	r2,124(sp)
    6e9c:	90bff40e 	bge	r18,r2,6e70 <__alt_mem_onchip_memory+0xf7806e70>
    6ea0:	d9801e04 	addi	r6,sp,120
    6ea4:	b80b883a 	mov	r5,r23
    6ea8:	9809883a 	mov	r4,r19
    6eac:	000dbac0 	call	dbac <__sprint_r>
    6eb0:	103e6d1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    6eb4:	843ffc04 	addi	r16,r16,-16
    6eb8:	d8c02017 	ldw	r3,128(sp)
    6ebc:	d8801f17 	ldw	r2,124(sp)
    6ec0:	da000404 	addi	r8,sp,16
    6ec4:	8c3fed16 	blt	r17,r16,6e7c <__alt_mem_onchip_memory+0xf7806e7c>
    6ec8:	d9403517 	ldw	r5,212(sp)
    6ecc:	1c07883a 	add	r3,r3,r16
    6ed0:	10800044 	addi	r2,r2,1
    6ed4:	41400015 	stw	r5,0(r8)
    6ed8:	44000115 	stw	r16,4(r8)
    6edc:	d8c02015 	stw	r3,128(sp)
    6ee0:	d8801f15 	stw	r2,124(sp)
    6ee4:	010001c4 	movi	r4,7
    6ee8:	2080060e 	bge	r4,r2,6f04 <___vfprintf_internal_r+0xaa4>
    6eec:	d9002c17 	ldw	r4,176(sp)
    6ef0:	d9801e04 	addi	r6,sp,120
    6ef4:	b80b883a 	mov	r5,r23
    6ef8:	000dbac0 	call	dbac <__sprint_r>
    6efc:	103e5a1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    6f00:	d8c02017 	ldw	r3,128(sp)
    6f04:	d8803117 	ldw	r2,196(sp)
    6f08:	d9002a17 	ldw	r4,168(sp)
    6f0c:	1100010e 	bge	r2,r4,6f14 <___vfprintf_internal_r+0xab4>
    6f10:	2005883a 	mov	r2,r4
    6f14:	d9402f17 	ldw	r5,188(sp)
    6f18:	288b883a 	add	r5,r5,r2
    6f1c:	d9402f15 	stw	r5,188(sp)
    6f20:	18019e1e 	bne	r3,zero,759c <___vfprintf_internal_r+0x113c>
    6f24:	a8800007 	ldb	r2,0(r21)
    6f28:	d8001f15 	stw	zero,124(sp)
    6f2c:	da000404 	addi	r8,sp,16
    6f30:	103d851e 	bne	r2,zero,6548 <__alt_mem_onchip_memory+0xf7806548>
    6f34:	a821883a 	mov	r16,r21
    6f38:	003d9b06 	br	65a8 <__alt_mem_onchip_memory+0xf78065a8>
    6f3c:	18c03fcc 	andi	r3,r3,255
    6f40:	1805c11e 	bne	r3,zero,8648 <___vfprintf_internal_r+0x21e8>
    6f44:	94800414 	ori	r18,r18,16
    6f48:	9080080c 	andi	r2,r18,32
    6f4c:	10020c26 	beq	r2,zero,7780 <___vfprintf_internal_r+0x1320>
    6f50:	d8802d17 	ldw	r2,180(sp)
    6f54:	d9002917 	ldw	r4,164(sp)
    6f58:	d8002785 	stb	zero,158(sp)
    6f5c:	10c00204 	addi	r3,r2,8
    6f60:	14c00017 	ldw	r19,0(r2)
    6f64:	15800117 	ldw	r22,4(r2)
    6f68:	20040f16 	blt	r4,zero,7fa8 <___vfprintf_internal_r+0x1b48>
    6f6c:	013fdfc4 	movi	r4,-129
    6f70:	9d84b03a 	or	r2,r19,r22
    6f74:	d8c02d15 	stw	r3,180(sp)
    6f78:	9124703a 	and	r18,r18,r4
    6f7c:	0039883a 	mov	fp,zero
    6f80:	103e891e 	bne	r2,zero,69a8 <__alt_mem_onchip_memory+0xf78069a8>
    6f84:	d9002917 	ldw	r4,164(sp)
    6f88:	2002c11e 	bne	r4,zero,7a90 <___vfprintf_internal_r+0x1630>
    6f8c:	d8002915 	stw	zero,164(sp)
    6f90:	d8002e15 	stw	zero,184(sp)
    6f94:	dc001e04 	addi	r16,sp,120
    6f98:	003ef806 	br	6b7c <__alt_mem_onchip_memory+0xf7806b7c>
    6f9c:	18c03fcc 	andi	r3,r3,255
    6fa0:	18059d1e 	bne	r3,zero,8618 <___vfprintf_internal_r+0x21b8>
    6fa4:	01400074 	movhi	r5,1
    6fa8:	294d9d04 	addi	r5,r5,13940
    6fac:	d9403915 	stw	r5,228(sp)
    6fb0:	9080080c 	andi	r2,r18,32
    6fb4:	10005226 	beq	r2,zero,7100 <___vfprintf_internal_r+0xca0>
    6fb8:	d8802d17 	ldw	r2,180(sp)
    6fbc:	14c00017 	ldw	r19,0(r2)
    6fc0:	15800117 	ldw	r22,4(r2)
    6fc4:	10800204 	addi	r2,r2,8
    6fc8:	d8802d15 	stw	r2,180(sp)
    6fcc:	9080004c 	andi	r2,r18,1
    6fd0:	10019026 	beq	r2,zero,7614 <___vfprintf_internal_r+0x11b4>
    6fd4:	9d84b03a 	or	r2,r19,r22
    6fd8:	10036926 	beq	r2,zero,7d80 <___vfprintf_internal_r+0x1920>
    6fdc:	d8c02917 	ldw	r3,164(sp)
    6fe0:	00800c04 	movi	r2,48
    6fe4:	d8802705 	stb	r2,156(sp)
    6fe8:	dc402745 	stb	r17,157(sp)
    6fec:	d8002785 	stb	zero,158(sp)
    6ff0:	90800094 	ori	r2,r18,2
    6ff4:	18045d16 	blt	r3,zero,816c <___vfprintf_internal_r+0x1d0c>
    6ff8:	00bfdfc4 	movi	r2,-129
    6ffc:	90a4703a 	and	r18,r18,r2
    7000:	94800094 	ori	r18,r18,2
    7004:	0039883a 	mov	fp,zero
    7008:	d9003917 	ldw	r4,228(sp)
    700c:	dc001e04 	addi	r16,sp,120
    7010:	988003cc 	andi	r2,r19,15
    7014:	b006973a 	slli	r3,r22,28
    7018:	2085883a 	add	r2,r4,r2
    701c:	9826d13a 	srli	r19,r19,4
    7020:	10800003 	ldbu	r2,0(r2)
    7024:	b02cd13a 	srli	r22,r22,4
    7028:	843fffc4 	addi	r16,r16,-1
    702c:	1ce6b03a 	or	r19,r3,r19
    7030:	80800005 	stb	r2,0(r16)
    7034:	9d84b03a 	or	r2,r19,r22
    7038:	103ff51e 	bne	r2,zero,7010 <__alt_mem_onchip_memory+0xf7807010>
    703c:	d8c02817 	ldw	r3,160(sp)
    7040:	1c07c83a 	sub	r3,r3,r16
    7044:	d8c02e15 	stw	r3,184(sp)
    7048:	003ecc06 	br	6b7c <__alt_mem_onchip_memory+0xf7806b7c>
    704c:	18c03fcc 	andi	r3,r3,255
    7050:	183e9f26 	beq	r3,zero,6ad0 <__alt_mem_onchip_memory+0xf7806ad0>
    7054:	d9c02785 	stb	r7,158(sp)
    7058:	003e9d06 	br	6ad0 <__alt_mem_onchip_memory+0xf7806ad0>
    705c:	00c00044 	movi	r3,1
    7060:	01c00ac4 	movi	r7,43
    7064:	ac400007 	ldb	r17,0(r21)
    7068:	003d5e06 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    706c:	94800814 	ori	r18,r18,32
    7070:	ac400007 	ldb	r17,0(r21)
    7074:	003d5b06 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    7078:	d8c02d17 	ldw	r3,180(sp)
    707c:	d8002785 	stb	zero,158(sp)
    7080:	1c000017 	ldw	r16,0(r3)
    7084:	1cc00104 	addi	r19,r3,4
    7088:	80041926 	beq	r16,zero,80f0 <___vfprintf_internal_r+0x1c90>
    708c:	d9002917 	ldw	r4,164(sp)
    7090:	2003d016 	blt	r4,zero,7fd4 <___vfprintf_internal_r+0x1b74>
    7094:	200d883a 	mov	r6,r4
    7098:	000b883a 	mov	r5,zero
    709c:	8009883a 	mov	r4,r16
    70a0:	da003d15 	stw	r8,244(sp)
    70a4:	000bccc0 	call	bccc <memchr>
    70a8:	da003d17 	ldw	r8,244(sp)
    70ac:	10045426 	beq	r2,zero,8200 <___vfprintf_internal_r+0x1da0>
    70b0:	1405c83a 	sub	r2,r2,r16
    70b4:	d8802e15 	stw	r2,184(sp)
    70b8:	1003cc16 	blt	r2,zero,7fec <___vfprintf_internal_r+0x1b8c>
    70bc:	df002783 	ldbu	fp,158(sp)
    70c0:	d8802a15 	stw	r2,168(sp)
    70c4:	dcc02d15 	stw	r19,180(sp)
    70c8:	d8002915 	stw	zero,164(sp)
    70cc:	d8003215 	stw	zero,200(sp)
    70d0:	003eb006 	br	6b94 <__alt_mem_onchip_memory+0xf7806b94>
    70d4:	18c03fcc 	andi	r3,r3,255
    70d8:	183f9b26 	beq	r3,zero,6f48 <__alt_mem_onchip_memory+0xf7806f48>
    70dc:	d9c02785 	stb	r7,158(sp)
    70e0:	003f9906 	br	6f48 <__alt_mem_onchip_memory+0xf7806f48>
    70e4:	18c03fcc 	andi	r3,r3,255
    70e8:	1805551e 	bne	r3,zero,8640 <___vfprintf_internal_r+0x21e0>
    70ec:	01400074 	movhi	r5,1
    70f0:	294da204 	addi	r5,r5,13960
    70f4:	d9403915 	stw	r5,228(sp)
    70f8:	9080080c 	andi	r2,r18,32
    70fc:	103fae1e 	bne	r2,zero,6fb8 <__alt_mem_onchip_memory+0xf7806fb8>
    7100:	9080040c 	andi	r2,r18,16
    7104:	1002de26 	beq	r2,zero,7c80 <___vfprintf_internal_r+0x1820>
    7108:	d8c02d17 	ldw	r3,180(sp)
    710c:	002d883a 	mov	r22,zero
    7110:	1cc00017 	ldw	r19,0(r3)
    7114:	18c00104 	addi	r3,r3,4
    7118:	d8c02d15 	stw	r3,180(sp)
    711c:	003fab06 	br	6fcc <__alt_mem_onchip_memory+0xf7806fcc>
    7120:	38803fcc 	andi	r2,r7,255
    7124:	1080201c 	xori	r2,r2,128
    7128:	10bfe004 	addi	r2,r2,-128
    712c:	1002d21e 	bne	r2,zero,7c78 <___vfprintf_internal_r+0x1818>
    7130:	00c00044 	movi	r3,1
    7134:	01c00804 	movi	r7,32
    7138:	ac400007 	ldb	r17,0(r21)
    713c:	003d2906 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    7140:	94800054 	ori	r18,r18,1
    7144:	ac400007 	ldb	r17,0(r21)
    7148:	003d2606 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    714c:	18c03fcc 	andi	r3,r3,255
    7150:	183e0526 	beq	r3,zero,6968 <__alt_mem_onchip_memory+0xf7806968>
    7154:	d9c02785 	stb	r7,158(sp)
    7158:	003e0306 	br	6968 <__alt_mem_onchip_memory+0xf7806968>
    715c:	94801014 	ori	r18,r18,64
    7160:	ac400007 	ldb	r17,0(r21)
    7164:	003d1f06 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    7168:	ac400007 	ldb	r17,0(r21)
    716c:	8a438726 	beq	r17,r9,7f8c <___vfprintf_internal_r+0x1b2c>
    7170:	94800414 	ori	r18,r18,16
    7174:	003d1b06 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    7178:	18c03fcc 	andi	r3,r3,255
    717c:	1805341e 	bne	r3,zero,8650 <___vfprintf_internal_r+0x21f0>
    7180:	9080080c 	andi	r2,r18,32
    7184:	1002cd26 	beq	r2,zero,7cbc <___vfprintf_internal_r+0x185c>
    7188:	d9402d17 	ldw	r5,180(sp)
    718c:	d9002f17 	ldw	r4,188(sp)
    7190:	28800017 	ldw	r2,0(r5)
    7194:	2007d7fa 	srai	r3,r4,31
    7198:	29400104 	addi	r5,r5,4
    719c:	d9402d15 	stw	r5,180(sp)
    71a0:	11000015 	stw	r4,0(r2)
    71a4:	10c00115 	stw	r3,4(r2)
    71a8:	003ce506 	br	6540 <__alt_mem_onchip_memory+0xf7806540>
    71ac:	d8c02d17 	ldw	r3,180(sp)
    71b0:	d9002d17 	ldw	r4,180(sp)
    71b4:	d8002785 	stb	zero,158(sp)
    71b8:	18800017 	ldw	r2,0(r3)
    71bc:	21000104 	addi	r4,r4,4
    71c0:	00c00044 	movi	r3,1
    71c4:	d8c02a15 	stw	r3,168(sp)
    71c8:	d8801405 	stb	r2,80(sp)
    71cc:	d9002d15 	stw	r4,180(sp)
    71d0:	d8c02e15 	stw	r3,184(sp)
    71d4:	d8002915 	stw	zero,164(sp)
    71d8:	d8003215 	stw	zero,200(sp)
    71dc:	dc001404 	addi	r16,sp,80
    71e0:	0039883a 	mov	fp,zero
    71e4:	003e7206 	br	6bb0 <__alt_mem_onchip_memory+0xf7806bb0>
    71e8:	01000074 	movhi	r4,1
    71ec:	210da204 	addi	r4,r4,13960
    71f0:	0039883a 	mov	fp,zero
    71f4:	d9003915 	stw	r4,228(sp)
    71f8:	04401e04 	movi	r17,120
    71fc:	003f8206 	br	7008 <__alt_mem_onchip_memory+0xf7807008>
    7200:	18c03fcc 	andi	r3,r3,255
    7204:	1805061e 	bne	r3,zero,8620 <___vfprintf_internal_r+0x21c0>
    7208:	883d9126 	beq	r17,zero,6850 <__alt_mem_onchip_memory+0xf7806850>
    720c:	00c00044 	movi	r3,1
    7210:	d8c02a15 	stw	r3,168(sp)
    7214:	dc401405 	stb	r17,80(sp)
    7218:	d8002785 	stb	zero,158(sp)
    721c:	003fec06 	br	71d0 <__alt_mem_onchip_memory+0xf78071d0>
    7220:	01400074 	movhi	r5,1
    7224:	294da204 	addi	r5,r5,13960
    7228:	d9403915 	stw	r5,228(sp)
    722c:	d8c02d15 	stw	r3,180(sp)
    7230:	1025883a 	mov	r18,r2
    7234:	04401e04 	movi	r17,120
    7238:	9d84b03a 	or	r2,r19,r22
    723c:	1000fc1e 	bne	r2,zero,7630 <___vfprintf_internal_r+0x11d0>
    7240:	0039883a 	mov	fp,zero
    7244:	00800084 	movi	r2,2
    7248:	10803fcc 	andi	r2,r2,255
    724c:	00c00044 	movi	r3,1
    7250:	10c20f26 	beq	r2,r3,7a90 <___vfprintf_internal_r+0x1630>
    7254:	00c00084 	movi	r3,2
    7258:	10fd6326 	beq	r2,r3,67e8 <__alt_mem_onchip_memory+0xf78067e8>
    725c:	003e2d06 	br	6b14 <__alt_mem_onchip_memory+0xf7806b14>
    7260:	d8c02017 	ldw	r3,128(sp)
    7264:	003e9306 	br	6cb4 <__alt_mem_onchip_memory+0xf7806cb4>
    7268:	00801944 	movi	r2,101
    726c:	14407e0e 	bge	r2,r17,7468 <___vfprintf_internal_r+0x1008>
    7270:	d9003617 	ldw	r4,216(sp)
    7274:	d9403817 	ldw	r5,224(sp)
    7278:	000d883a 	mov	r6,zero
    727c:	000f883a 	mov	r7,zero
    7280:	d8c03c15 	stw	r3,240(sp)
    7284:	da003d15 	stw	r8,244(sp)
    7288:	001053c0 	call	1053c <__eqdf2>
    728c:	d8c03c17 	ldw	r3,240(sp)
    7290:	da003d17 	ldw	r8,244(sp)
    7294:	1000f71e 	bne	r2,zero,7674 <___vfprintf_internal_r+0x1214>
    7298:	d8801f17 	ldw	r2,124(sp)
    729c:	01000074 	movhi	r4,1
    72a0:	210da904 	addi	r4,r4,13988
    72a4:	18c00044 	addi	r3,r3,1
    72a8:	10800044 	addi	r2,r2,1
    72ac:	41000015 	stw	r4,0(r8)
    72b0:	01000044 	movi	r4,1
    72b4:	41000115 	stw	r4,4(r8)
    72b8:	d8c02015 	stw	r3,128(sp)
    72bc:	d8801f15 	stw	r2,124(sp)
    72c0:	010001c4 	movi	r4,7
    72c4:	2082b816 	blt	r4,r2,7da8 <___vfprintf_internal_r+0x1948>
    72c8:	42000204 	addi	r8,r8,8
    72cc:	d8802617 	ldw	r2,152(sp)
    72d0:	d9403317 	ldw	r5,204(sp)
    72d4:	11400216 	blt	r2,r5,72e0 <___vfprintf_internal_r+0xe80>
    72d8:	9080004c 	andi	r2,r18,1
    72dc:	103ed526 	beq	r2,zero,6e34 <__alt_mem_onchip_memory+0xf7806e34>
    72e0:	d8803717 	ldw	r2,220(sp)
    72e4:	d9003417 	ldw	r4,208(sp)
    72e8:	d9403717 	ldw	r5,220(sp)
    72ec:	1887883a 	add	r3,r3,r2
    72f0:	d8801f17 	ldw	r2,124(sp)
    72f4:	41000015 	stw	r4,0(r8)
    72f8:	41400115 	stw	r5,4(r8)
    72fc:	10800044 	addi	r2,r2,1
    7300:	d8c02015 	stw	r3,128(sp)
    7304:	d8801f15 	stw	r2,124(sp)
    7308:	010001c4 	movi	r4,7
    730c:	20832916 	blt	r4,r2,7fb4 <___vfprintf_internal_r+0x1b54>
    7310:	42000204 	addi	r8,r8,8
    7314:	d8803317 	ldw	r2,204(sp)
    7318:	143fffc4 	addi	r16,r2,-1
    731c:	043ec50e 	bge	zero,r16,6e34 <__alt_mem_onchip_memory+0xf7806e34>
    7320:	04400404 	movi	r17,16
    7324:	d8801f17 	ldw	r2,124(sp)
    7328:	8c00880e 	bge	r17,r16,754c <___vfprintf_internal_r+0x10ec>
    732c:	01400074 	movhi	r5,1
    7330:	294da984 	addi	r5,r5,13990
    7334:	d9402b15 	stw	r5,172(sp)
    7338:	058001c4 	movi	r22,7
    733c:	dcc02c17 	ldw	r19,176(sp)
    7340:	00000306 	br	7350 <___vfprintf_internal_r+0xef0>
    7344:	42000204 	addi	r8,r8,8
    7348:	843ffc04 	addi	r16,r16,-16
    734c:	8c00820e 	bge	r17,r16,7558 <___vfprintf_internal_r+0x10f8>
    7350:	18c00404 	addi	r3,r3,16
    7354:	10800044 	addi	r2,r2,1
    7358:	45000015 	stw	r20,0(r8)
    735c:	44400115 	stw	r17,4(r8)
    7360:	d8c02015 	stw	r3,128(sp)
    7364:	d8801f15 	stw	r2,124(sp)
    7368:	b0bff60e 	bge	r22,r2,7344 <__alt_mem_onchip_memory+0xf7807344>
    736c:	d9801e04 	addi	r6,sp,120
    7370:	b80b883a 	mov	r5,r23
    7374:	9809883a 	mov	r4,r19
    7378:	000dbac0 	call	dbac <__sprint_r>
    737c:	103d3a1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7380:	d8c02017 	ldw	r3,128(sp)
    7384:	d8801f17 	ldw	r2,124(sp)
    7388:	da000404 	addi	r8,sp,16
    738c:	003fee06 	br	7348 <__alt_mem_onchip_memory+0xf7807348>
    7390:	d9403117 	ldw	r5,196(sp)
    7394:	d8802a17 	ldw	r2,168(sp)
    7398:	28adc83a 	sub	r22,r5,r2
    739c:	05be630e 	bge	zero,r22,6d2c <__alt_mem_onchip_memory+0xf7806d2c>
    73a0:	07000404 	movi	fp,16
    73a4:	d8801f17 	ldw	r2,124(sp)
    73a8:	e5838f0e 	bge	fp,r22,81e8 <___vfprintf_internal_r+0x1d88>
    73ac:	01400074 	movhi	r5,1
    73b0:	294da984 	addi	r5,r5,13990
    73b4:	dc403015 	stw	r17,192(sp)
    73b8:	d9402b15 	stw	r5,172(sp)
    73bc:	b023883a 	mov	r17,r22
    73c0:	04c001c4 	movi	r19,7
    73c4:	a82d883a 	mov	r22,r21
    73c8:	902b883a 	mov	r21,r18
    73cc:	8025883a 	mov	r18,r16
    73d0:	dc002c17 	ldw	r16,176(sp)
    73d4:	00000306 	br	73e4 <___vfprintf_internal_r+0xf84>
    73d8:	8c7ffc04 	addi	r17,r17,-16
    73dc:	42000204 	addi	r8,r8,8
    73e0:	e440110e 	bge	fp,r17,7428 <___vfprintf_internal_r+0xfc8>
    73e4:	18c00404 	addi	r3,r3,16
    73e8:	10800044 	addi	r2,r2,1
    73ec:	45000015 	stw	r20,0(r8)
    73f0:	47000115 	stw	fp,4(r8)
    73f4:	d8c02015 	stw	r3,128(sp)
    73f8:	d8801f15 	stw	r2,124(sp)
    73fc:	98bff60e 	bge	r19,r2,73d8 <__alt_mem_onchip_memory+0xf78073d8>
    7400:	d9801e04 	addi	r6,sp,120
    7404:	b80b883a 	mov	r5,r23
    7408:	8009883a 	mov	r4,r16
    740c:	000dbac0 	call	dbac <__sprint_r>
    7410:	103d151e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7414:	8c7ffc04 	addi	r17,r17,-16
    7418:	d8c02017 	ldw	r3,128(sp)
    741c:	d8801f17 	ldw	r2,124(sp)
    7420:	da000404 	addi	r8,sp,16
    7424:	e47fef16 	blt	fp,r17,73e4 <__alt_mem_onchip_memory+0xf78073e4>
    7428:	9021883a 	mov	r16,r18
    742c:	a825883a 	mov	r18,r21
    7430:	b02b883a 	mov	r21,r22
    7434:	882d883a 	mov	r22,r17
    7438:	dc403017 	ldw	r17,192(sp)
    743c:	d9002b17 	ldw	r4,172(sp)
    7440:	1d87883a 	add	r3,r3,r22
    7444:	10800044 	addi	r2,r2,1
    7448:	41000015 	stw	r4,0(r8)
    744c:	45800115 	stw	r22,4(r8)
    7450:	d8c02015 	stw	r3,128(sp)
    7454:	d8801f15 	stw	r2,124(sp)
    7458:	010001c4 	movi	r4,7
    745c:	20818e16 	blt	r4,r2,7a98 <___vfprintf_internal_r+0x1638>
    7460:	42000204 	addi	r8,r8,8
    7464:	003e3106 	br	6d2c <__alt_mem_onchip_memory+0xf7806d2c>
    7468:	d9403317 	ldw	r5,204(sp)
    746c:	00800044 	movi	r2,1
    7470:	18c00044 	addi	r3,r3,1
    7474:	1141530e 	bge	r2,r5,79c4 <___vfprintf_internal_r+0x1564>
    7478:	dc401f17 	ldw	r17,124(sp)
    747c:	00800044 	movi	r2,1
    7480:	40800115 	stw	r2,4(r8)
    7484:	8c400044 	addi	r17,r17,1
    7488:	44000015 	stw	r16,0(r8)
    748c:	d8c02015 	stw	r3,128(sp)
    7490:	dc401f15 	stw	r17,124(sp)
    7494:	008001c4 	movi	r2,7
    7498:	14416b16 	blt	r2,r17,7a48 <___vfprintf_internal_r+0x15e8>
    749c:	42000204 	addi	r8,r8,8
    74a0:	d8803717 	ldw	r2,220(sp)
    74a4:	d9003417 	ldw	r4,208(sp)
    74a8:	8c400044 	addi	r17,r17,1
    74ac:	10c7883a 	add	r3,r2,r3
    74b0:	40800115 	stw	r2,4(r8)
    74b4:	41000015 	stw	r4,0(r8)
    74b8:	d8c02015 	stw	r3,128(sp)
    74bc:	dc401f15 	stw	r17,124(sp)
    74c0:	008001c4 	movi	r2,7
    74c4:	14416916 	blt	r2,r17,7a6c <___vfprintf_internal_r+0x160c>
    74c8:	45800204 	addi	r22,r8,8
    74cc:	d9003617 	ldw	r4,216(sp)
    74d0:	d9403817 	ldw	r5,224(sp)
    74d4:	000d883a 	mov	r6,zero
    74d8:	000f883a 	mov	r7,zero
    74dc:	d8c03c15 	stw	r3,240(sp)
    74e0:	001053c0 	call	1053c <__eqdf2>
    74e4:	d8c03c17 	ldw	r3,240(sp)
    74e8:	1000bc26 	beq	r2,zero,77dc <___vfprintf_internal_r+0x137c>
    74ec:	d9403317 	ldw	r5,204(sp)
    74f0:	84000044 	addi	r16,r16,1
    74f4:	8c400044 	addi	r17,r17,1
    74f8:	28bfffc4 	addi	r2,r5,-1
    74fc:	1887883a 	add	r3,r3,r2
    7500:	b0800115 	stw	r2,4(r22)
    7504:	b4000015 	stw	r16,0(r22)
    7508:	d8c02015 	stw	r3,128(sp)
    750c:	dc401f15 	stw	r17,124(sp)
    7510:	008001c4 	movi	r2,7
    7514:	14414316 	blt	r2,r17,7a24 <___vfprintf_internal_r+0x15c4>
    7518:	b5800204 	addi	r22,r22,8
    751c:	d9003a17 	ldw	r4,232(sp)
    7520:	df0022c4 	addi	fp,sp,139
    7524:	8c400044 	addi	r17,r17,1
    7528:	20c7883a 	add	r3,r4,r3
    752c:	b7000015 	stw	fp,0(r22)
    7530:	b1000115 	stw	r4,4(r22)
    7534:	d8c02015 	stw	r3,128(sp)
    7538:	dc401f15 	stw	r17,124(sp)
    753c:	008001c4 	movi	r2,7
    7540:	14400e16 	blt	r2,r17,757c <___vfprintf_internal_r+0x111c>
    7544:	b2000204 	addi	r8,r22,8
    7548:	003e3a06 	br	6e34 <__alt_mem_onchip_memory+0xf7806e34>
    754c:	01000074 	movhi	r4,1
    7550:	210da984 	addi	r4,r4,13990
    7554:	d9002b15 	stw	r4,172(sp)
    7558:	d9002b17 	ldw	r4,172(sp)
    755c:	1c07883a 	add	r3,r3,r16
    7560:	44000115 	stw	r16,4(r8)
    7564:	41000015 	stw	r4,0(r8)
    7568:	10800044 	addi	r2,r2,1
    756c:	d8c02015 	stw	r3,128(sp)
    7570:	d8801f15 	stw	r2,124(sp)
    7574:	010001c4 	movi	r4,7
    7578:	20be2d0e 	bge	r4,r2,6e30 <__alt_mem_onchip_memory+0xf7806e30>
    757c:	d9002c17 	ldw	r4,176(sp)
    7580:	d9801e04 	addi	r6,sp,120
    7584:	b80b883a 	mov	r5,r23
    7588:	000dbac0 	call	dbac <__sprint_r>
    758c:	103cb61e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7590:	d8c02017 	ldw	r3,128(sp)
    7594:	da000404 	addi	r8,sp,16
    7598:	003e2606 	br	6e34 <__alt_mem_onchip_memory+0xf7806e34>
    759c:	d9002c17 	ldw	r4,176(sp)
    75a0:	d9801e04 	addi	r6,sp,120
    75a4:	b80b883a 	mov	r5,r23
    75a8:	000dbac0 	call	dbac <__sprint_r>
    75ac:	103e5d26 	beq	r2,zero,6f24 <__alt_mem_onchip_memory+0xf7806f24>
    75b0:	003cad06 	br	6868 <__alt_mem_onchip_memory+0xf7806868>
    75b4:	d9002c17 	ldw	r4,176(sp)
    75b8:	d9801e04 	addi	r6,sp,120
    75bc:	b80b883a 	mov	r5,r23
    75c0:	000dbac0 	call	dbac <__sprint_r>
    75c4:	103ca81e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    75c8:	d8c02017 	ldw	r3,128(sp)
    75cc:	da000404 	addi	r8,sp,16
    75d0:	003e0b06 	br	6e00 <__alt_mem_onchip_memory+0xf7806e00>
    75d4:	d9002c17 	ldw	r4,176(sp)
    75d8:	d9801e04 	addi	r6,sp,120
    75dc:	b80b883a 	mov	r5,r23
    75e0:	000dbac0 	call	dbac <__sprint_r>
    75e4:	103ca01e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    75e8:	d8c02017 	ldw	r3,128(sp)
    75ec:	da000404 	addi	r8,sp,16
    75f0:	003dbd06 	br	6ce8 <__alt_mem_onchip_memory+0xf7806ce8>
    75f4:	d9002c17 	ldw	r4,176(sp)
    75f8:	d9801e04 	addi	r6,sp,120
    75fc:	b80b883a 	mov	r5,r23
    7600:	000dbac0 	call	dbac <__sprint_r>
    7604:	103c981e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7608:	d8c02017 	ldw	r3,128(sp)
    760c:	da000404 	addi	r8,sp,16
    7610:	003dc306 	br	6d20 <__alt_mem_onchip_memory+0xf7806d20>
    7614:	d8802917 	ldw	r2,164(sp)
    7618:	d8002785 	stb	zero,158(sp)
    761c:	103f0616 	blt	r2,zero,7238 <__alt_mem_onchip_memory+0xf7807238>
    7620:	00ffdfc4 	movi	r3,-129
    7624:	9d84b03a 	or	r2,r19,r22
    7628:	90e4703a 	and	r18,r18,r3
    762c:	103c6b26 	beq	r2,zero,67dc <__alt_mem_onchip_memory+0xf78067dc>
    7630:	0039883a 	mov	fp,zero
    7634:	003e7406 	br	7008 <__alt_mem_onchip_memory+0xf7807008>
    7638:	9080040c 	andi	r2,r18,16
    763c:	1001b326 	beq	r2,zero,7d0c <___vfprintf_internal_r+0x18ac>
    7640:	d9002d17 	ldw	r4,180(sp)
    7644:	d9402917 	ldw	r5,164(sp)
    7648:	d8002785 	stb	zero,158(sp)
    764c:	20800104 	addi	r2,r4,4
    7650:	24c00017 	ldw	r19,0(r4)
    7654:	002d883a 	mov	r22,zero
    7658:	2801b516 	blt	r5,zero,7d30 <___vfprintf_internal_r+0x18d0>
    765c:	00ffdfc4 	movi	r3,-129
    7660:	d8802d15 	stw	r2,180(sp)
    7664:	90e4703a 	and	r18,r18,r3
    7668:	983d2726 	beq	r19,zero,6b08 <__alt_mem_onchip_memory+0xf7806b08>
    766c:	0039883a 	mov	fp,zero
    7670:	003d2a06 	br	6b1c <__alt_mem_onchip_memory+0xf7806b1c>
    7674:	dc402617 	ldw	r17,152(sp)
    7678:	0441d30e 	bge	zero,r17,7dc8 <___vfprintf_internal_r+0x1968>
    767c:	dc403217 	ldw	r17,200(sp)
    7680:	d8803317 	ldw	r2,204(sp)
    7684:	1440010e 	bge	r2,r17,768c <___vfprintf_internal_r+0x122c>
    7688:	1023883a 	mov	r17,r2
    768c:	04400a0e 	bge	zero,r17,76b8 <___vfprintf_internal_r+0x1258>
    7690:	d8801f17 	ldw	r2,124(sp)
    7694:	1c47883a 	add	r3,r3,r17
    7698:	44000015 	stw	r16,0(r8)
    769c:	10800044 	addi	r2,r2,1
    76a0:	44400115 	stw	r17,4(r8)
    76a4:	d8c02015 	stw	r3,128(sp)
    76a8:	d8801f15 	stw	r2,124(sp)
    76ac:	010001c4 	movi	r4,7
    76b0:	20826516 	blt	r4,r2,8048 <___vfprintf_internal_r+0x1be8>
    76b4:	42000204 	addi	r8,r8,8
    76b8:	88026116 	blt	r17,zero,8040 <___vfprintf_internal_r+0x1be0>
    76bc:	d9003217 	ldw	r4,200(sp)
    76c0:	2463c83a 	sub	r17,r4,r17
    76c4:	04407b0e 	bge	zero,r17,78b4 <___vfprintf_internal_r+0x1454>
    76c8:	05800404 	movi	r22,16
    76cc:	d8801f17 	ldw	r2,124(sp)
    76d0:	b4419d0e 	bge	r22,r17,7d48 <___vfprintf_internal_r+0x18e8>
    76d4:	01000074 	movhi	r4,1
    76d8:	210da984 	addi	r4,r4,13990
    76dc:	d9002b15 	stw	r4,172(sp)
    76e0:	070001c4 	movi	fp,7
    76e4:	dcc02c17 	ldw	r19,176(sp)
    76e8:	00000306 	br	76f8 <___vfprintf_internal_r+0x1298>
    76ec:	42000204 	addi	r8,r8,8
    76f0:	8c7ffc04 	addi	r17,r17,-16
    76f4:	b441970e 	bge	r22,r17,7d54 <___vfprintf_internal_r+0x18f4>
    76f8:	18c00404 	addi	r3,r3,16
    76fc:	10800044 	addi	r2,r2,1
    7700:	45000015 	stw	r20,0(r8)
    7704:	45800115 	stw	r22,4(r8)
    7708:	d8c02015 	stw	r3,128(sp)
    770c:	d8801f15 	stw	r2,124(sp)
    7710:	e0bff60e 	bge	fp,r2,76ec <__alt_mem_onchip_memory+0xf78076ec>
    7714:	d9801e04 	addi	r6,sp,120
    7718:	b80b883a 	mov	r5,r23
    771c:	9809883a 	mov	r4,r19
    7720:	000dbac0 	call	dbac <__sprint_r>
    7724:	103c501e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7728:	d8c02017 	ldw	r3,128(sp)
    772c:	d8801f17 	ldw	r2,124(sp)
    7730:	da000404 	addi	r8,sp,16
    7734:	003fee06 	br	76f0 <__alt_mem_onchip_memory+0xf78076f0>
    7738:	d9002c17 	ldw	r4,176(sp)
    773c:	d9801e04 	addi	r6,sp,120
    7740:	b80b883a 	mov	r5,r23
    7744:	000dbac0 	call	dbac <__sprint_r>
    7748:	103c471e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    774c:	d8c02017 	ldw	r3,128(sp)
    7750:	df002787 	ldb	fp,158(sp)
    7754:	da000404 	addi	r8,sp,16
    7758:	003d5606 	br	6cb4 <__alt_mem_onchip_memory+0xf7806cb4>
    775c:	9080040c 	andi	r2,r18,16
    7760:	10016126 	beq	r2,zero,7ce8 <___vfprintf_internal_r+0x1888>
    7764:	d8802d17 	ldw	r2,180(sp)
    7768:	14c00017 	ldw	r19,0(r2)
    776c:	10800104 	addi	r2,r2,4
    7770:	d8802d15 	stw	r2,180(sp)
    7774:	982dd7fa 	srai	r22,r19,31
    7778:	b005883a 	mov	r2,r22
    777c:	003c8206 	br	6988 <__alt_mem_onchip_memory+0xf7806988>
    7780:	9080040c 	andi	r2,r18,16
    7784:	10003526 	beq	r2,zero,785c <___vfprintf_internal_r+0x13fc>
    7788:	d9402d17 	ldw	r5,180(sp)
    778c:	d8c02917 	ldw	r3,164(sp)
    7790:	d8002785 	stb	zero,158(sp)
    7794:	28800104 	addi	r2,r5,4
    7798:	2cc00017 	ldw	r19,0(r5)
    779c:	002d883a 	mov	r22,zero
    77a0:	18003716 	blt	r3,zero,7880 <___vfprintf_internal_r+0x1420>
    77a4:	00ffdfc4 	movi	r3,-129
    77a8:	d8802d15 	stw	r2,180(sp)
    77ac:	90e4703a 	and	r18,r18,r3
    77b0:	0039883a 	mov	fp,zero
    77b4:	983df326 	beq	r19,zero,6f84 <__alt_mem_onchip_memory+0xf7806f84>
    77b8:	00800244 	movi	r2,9
    77bc:	14fc7b36 	bltu	r2,r19,69ac <__alt_mem_onchip_memory+0xf78069ac>
    77c0:	d8c02817 	ldw	r3,160(sp)
    77c4:	dc001dc4 	addi	r16,sp,119
    77c8:	9cc00c04 	addi	r19,r19,48
    77cc:	1c07c83a 	sub	r3,r3,r16
    77d0:	dcc01dc5 	stb	r19,119(sp)
    77d4:	d8c02e15 	stw	r3,184(sp)
    77d8:	003ce806 	br	6b7c <__alt_mem_onchip_memory+0xf7806b7c>
    77dc:	d8803317 	ldw	r2,204(sp)
    77e0:	143fffc4 	addi	r16,r2,-1
    77e4:	043f4d0e 	bge	zero,r16,751c <__alt_mem_onchip_memory+0xf780751c>
    77e8:	07000404 	movi	fp,16
    77ec:	e400810e 	bge	fp,r16,79f4 <___vfprintf_internal_r+0x1594>
    77f0:	01400074 	movhi	r5,1
    77f4:	294da984 	addi	r5,r5,13990
    77f8:	d9402b15 	stw	r5,172(sp)
    77fc:	01c001c4 	movi	r7,7
    7800:	dcc02c17 	ldw	r19,176(sp)
    7804:	00000306 	br	7814 <___vfprintf_internal_r+0x13b4>
    7808:	b5800204 	addi	r22,r22,8
    780c:	843ffc04 	addi	r16,r16,-16
    7810:	e4007b0e 	bge	fp,r16,7a00 <___vfprintf_internal_r+0x15a0>
    7814:	18c00404 	addi	r3,r3,16
    7818:	8c400044 	addi	r17,r17,1
    781c:	b5000015 	stw	r20,0(r22)
    7820:	b7000115 	stw	fp,4(r22)
    7824:	d8c02015 	stw	r3,128(sp)
    7828:	dc401f15 	stw	r17,124(sp)
    782c:	3c7ff60e 	bge	r7,r17,7808 <__alt_mem_onchip_memory+0xf7807808>
    7830:	d9801e04 	addi	r6,sp,120
    7834:	b80b883a 	mov	r5,r23
    7838:	9809883a 	mov	r4,r19
    783c:	d9c03c15 	stw	r7,240(sp)
    7840:	000dbac0 	call	dbac <__sprint_r>
    7844:	d9c03c17 	ldw	r7,240(sp)
    7848:	103c071e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    784c:	d8c02017 	ldw	r3,128(sp)
    7850:	dc401f17 	ldw	r17,124(sp)
    7854:	dd800404 	addi	r22,sp,16
    7858:	003fec06 	br	780c <__alt_mem_onchip_memory+0xf780780c>
    785c:	9080100c 	andi	r2,r18,64
    7860:	d8002785 	stb	zero,158(sp)
    7864:	10010e26 	beq	r2,zero,7ca0 <___vfprintf_internal_r+0x1840>
    7868:	d9002d17 	ldw	r4,180(sp)
    786c:	d9402917 	ldw	r5,164(sp)
    7870:	002d883a 	mov	r22,zero
    7874:	20800104 	addi	r2,r4,4
    7878:	24c0000b 	ldhu	r19,0(r4)
    787c:	283fc90e 	bge	r5,zero,77a4 <__alt_mem_onchip_memory+0xf78077a4>
    7880:	d8802d15 	stw	r2,180(sp)
    7884:	0039883a 	mov	fp,zero
    7888:	9d84b03a 	or	r2,r19,r22
    788c:	103c461e 	bne	r2,zero,69a8 <__alt_mem_onchip_memory+0xf78069a8>
    7890:	00800044 	movi	r2,1
    7894:	003e6c06 	br	7248 <__alt_mem_onchip_memory+0xf7807248>
    7898:	d9002c17 	ldw	r4,176(sp)
    789c:	d9801e04 	addi	r6,sp,120
    78a0:	b80b883a 	mov	r5,r23
    78a4:	000dbac0 	call	dbac <__sprint_r>
    78a8:	103bef1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    78ac:	d8c02017 	ldw	r3,128(sp)
    78b0:	da000404 	addi	r8,sp,16
    78b4:	d9003217 	ldw	r4,200(sp)
    78b8:	d8802617 	ldw	r2,152(sp)
    78bc:	d9403317 	ldw	r5,204(sp)
    78c0:	8123883a 	add	r17,r16,r4
    78c4:	11400216 	blt	r2,r5,78d0 <___vfprintf_internal_r+0x1470>
    78c8:	9100004c 	andi	r4,r18,1
    78cc:	20000d26 	beq	r4,zero,7904 <___vfprintf_internal_r+0x14a4>
    78d0:	d9003717 	ldw	r4,220(sp)
    78d4:	d9403417 	ldw	r5,208(sp)
    78d8:	1907883a 	add	r3,r3,r4
    78dc:	d9001f17 	ldw	r4,124(sp)
    78e0:	41400015 	stw	r5,0(r8)
    78e4:	d9403717 	ldw	r5,220(sp)
    78e8:	21000044 	addi	r4,r4,1
    78ec:	d8c02015 	stw	r3,128(sp)
    78f0:	41400115 	stw	r5,4(r8)
    78f4:	d9001f15 	stw	r4,124(sp)
    78f8:	014001c4 	movi	r5,7
    78fc:	2901e816 	blt	r5,r4,80a0 <___vfprintf_internal_r+0x1c40>
    7900:	42000204 	addi	r8,r8,8
    7904:	d9003317 	ldw	r4,204(sp)
    7908:	8121883a 	add	r16,r16,r4
    790c:	2085c83a 	sub	r2,r4,r2
    7910:	8461c83a 	sub	r16,r16,r17
    7914:	1400010e 	bge	r2,r16,791c <___vfprintf_internal_r+0x14bc>
    7918:	1021883a 	mov	r16,r2
    791c:	04000a0e 	bge	zero,r16,7948 <___vfprintf_internal_r+0x14e8>
    7920:	d9001f17 	ldw	r4,124(sp)
    7924:	1c07883a 	add	r3,r3,r16
    7928:	44400015 	stw	r17,0(r8)
    792c:	21000044 	addi	r4,r4,1
    7930:	44000115 	stw	r16,4(r8)
    7934:	d8c02015 	stw	r3,128(sp)
    7938:	d9001f15 	stw	r4,124(sp)
    793c:	014001c4 	movi	r5,7
    7940:	2901fb16 	blt	r5,r4,8130 <___vfprintf_internal_r+0x1cd0>
    7944:	42000204 	addi	r8,r8,8
    7948:	8001f716 	blt	r16,zero,8128 <___vfprintf_internal_r+0x1cc8>
    794c:	1421c83a 	sub	r16,r2,r16
    7950:	043d380e 	bge	zero,r16,6e34 <__alt_mem_onchip_memory+0xf7806e34>
    7954:	04400404 	movi	r17,16
    7958:	d8801f17 	ldw	r2,124(sp)
    795c:	8c3efb0e 	bge	r17,r16,754c <__alt_mem_onchip_memory+0xf780754c>
    7960:	01400074 	movhi	r5,1
    7964:	294da984 	addi	r5,r5,13990
    7968:	d9402b15 	stw	r5,172(sp)
    796c:	058001c4 	movi	r22,7
    7970:	dcc02c17 	ldw	r19,176(sp)
    7974:	00000306 	br	7984 <___vfprintf_internal_r+0x1524>
    7978:	42000204 	addi	r8,r8,8
    797c:	843ffc04 	addi	r16,r16,-16
    7980:	8c3ef50e 	bge	r17,r16,7558 <__alt_mem_onchip_memory+0xf7807558>
    7984:	18c00404 	addi	r3,r3,16
    7988:	10800044 	addi	r2,r2,1
    798c:	45000015 	stw	r20,0(r8)
    7990:	44400115 	stw	r17,4(r8)
    7994:	d8c02015 	stw	r3,128(sp)
    7998:	d8801f15 	stw	r2,124(sp)
    799c:	b0bff60e 	bge	r22,r2,7978 <__alt_mem_onchip_memory+0xf7807978>
    79a0:	d9801e04 	addi	r6,sp,120
    79a4:	b80b883a 	mov	r5,r23
    79a8:	9809883a 	mov	r4,r19
    79ac:	000dbac0 	call	dbac <__sprint_r>
    79b0:	103bad1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    79b4:	d8c02017 	ldw	r3,128(sp)
    79b8:	d8801f17 	ldw	r2,124(sp)
    79bc:	da000404 	addi	r8,sp,16
    79c0:	003fee06 	br	797c <__alt_mem_onchip_memory+0xf780797c>
    79c4:	9088703a 	and	r4,r18,r2
    79c8:	203eab1e 	bne	r4,zero,7478 <__alt_mem_onchip_memory+0xf7807478>
    79cc:	dc401f17 	ldw	r17,124(sp)
    79d0:	40800115 	stw	r2,4(r8)
    79d4:	44000015 	stw	r16,0(r8)
    79d8:	8c400044 	addi	r17,r17,1
    79dc:	d8c02015 	stw	r3,128(sp)
    79e0:	dc401f15 	stw	r17,124(sp)
    79e4:	008001c4 	movi	r2,7
    79e8:	14400e16 	blt	r2,r17,7a24 <___vfprintf_internal_r+0x15c4>
    79ec:	45800204 	addi	r22,r8,8
    79f0:	003eca06 	br	751c <__alt_mem_onchip_memory+0xf780751c>
    79f4:	01000074 	movhi	r4,1
    79f8:	210da984 	addi	r4,r4,13990
    79fc:	d9002b15 	stw	r4,172(sp)
    7a00:	d8802b17 	ldw	r2,172(sp)
    7a04:	1c07883a 	add	r3,r3,r16
    7a08:	8c400044 	addi	r17,r17,1
    7a0c:	b0800015 	stw	r2,0(r22)
    7a10:	b4000115 	stw	r16,4(r22)
    7a14:	d8c02015 	stw	r3,128(sp)
    7a18:	dc401f15 	stw	r17,124(sp)
    7a1c:	008001c4 	movi	r2,7
    7a20:	147ebd0e 	bge	r2,r17,7518 <__alt_mem_onchip_memory+0xf7807518>
    7a24:	d9002c17 	ldw	r4,176(sp)
    7a28:	d9801e04 	addi	r6,sp,120
    7a2c:	b80b883a 	mov	r5,r23
    7a30:	000dbac0 	call	dbac <__sprint_r>
    7a34:	103b8c1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7a38:	d8c02017 	ldw	r3,128(sp)
    7a3c:	dc401f17 	ldw	r17,124(sp)
    7a40:	dd800404 	addi	r22,sp,16
    7a44:	003eb506 	br	751c <__alt_mem_onchip_memory+0xf780751c>
    7a48:	d9002c17 	ldw	r4,176(sp)
    7a4c:	d9801e04 	addi	r6,sp,120
    7a50:	b80b883a 	mov	r5,r23
    7a54:	000dbac0 	call	dbac <__sprint_r>
    7a58:	103b831e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7a5c:	d8c02017 	ldw	r3,128(sp)
    7a60:	dc401f17 	ldw	r17,124(sp)
    7a64:	da000404 	addi	r8,sp,16
    7a68:	003e8d06 	br	74a0 <__alt_mem_onchip_memory+0xf78074a0>
    7a6c:	d9002c17 	ldw	r4,176(sp)
    7a70:	d9801e04 	addi	r6,sp,120
    7a74:	b80b883a 	mov	r5,r23
    7a78:	000dbac0 	call	dbac <__sprint_r>
    7a7c:	103b7a1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7a80:	d8c02017 	ldw	r3,128(sp)
    7a84:	dc401f17 	ldw	r17,124(sp)
    7a88:	dd800404 	addi	r22,sp,16
    7a8c:	003e8f06 	br	74cc <__alt_mem_onchip_memory+0xf78074cc>
    7a90:	0027883a 	mov	r19,zero
    7a94:	003f4a06 	br	77c0 <__alt_mem_onchip_memory+0xf78077c0>
    7a98:	d9002c17 	ldw	r4,176(sp)
    7a9c:	d9801e04 	addi	r6,sp,120
    7aa0:	b80b883a 	mov	r5,r23
    7aa4:	000dbac0 	call	dbac <__sprint_r>
    7aa8:	103b6f1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7aac:	d8c02017 	ldw	r3,128(sp)
    7ab0:	da000404 	addi	r8,sp,16
    7ab4:	003c9d06 	br	6d2c <__alt_mem_onchip_memory+0xf7806d2c>
    7ab8:	04e7c83a 	sub	r19,zero,r19
    7abc:	9804c03a 	cmpne	r2,r19,zero
    7ac0:	05adc83a 	sub	r22,zero,r22
    7ac4:	b0adc83a 	sub	r22,r22,r2
    7ac8:	d8802917 	ldw	r2,164(sp)
    7acc:	07000b44 	movi	fp,45
    7ad0:	df002785 	stb	fp,158(sp)
    7ad4:	10017b16 	blt	r2,zero,80c4 <___vfprintf_internal_r+0x1c64>
    7ad8:	00bfdfc4 	movi	r2,-129
    7adc:	90a4703a 	and	r18,r18,r2
    7ae0:	003bb106 	br	69a8 <__alt_mem_onchip_memory+0xf78069a8>
    7ae4:	d9003617 	ldw	r4,216(sp)
    7ae8:	d9403817 	ldw	r5,224(sp)
    7aec:	da003d15 	stw	r8,244(sp)
    7af0:	00024000 	call	2400 <__fpclassifyd>
    7af4:	da003d17 	ldw	r8,244(sp)
    7af8:	1000f026 	beq	r2,zero,7ebc <___vfprintf_internal_r+0x1a5c>
    7afc:	d9002917 	ldw	r4,164(sp)
    7b00:	05bff7c4 	movi	r22,-33
    7b04:	00bfffc4 	movi	r2,-1
    7b08:	8dac703a 	and	r22,r17,r22
    7b0c:	20820026 	beq	r4,r2,8310 <___vfprintf_internal_r+0x1eb0>
    7b10:	008011c4 	movi	r2,71
    7b14:	b081f726 	beq	r22,r2,82f4 <___vfprintf_internal_r+0x1e94>
    7b18:	d9003817 	ldw	r4,224(sp)
    7b1c:	90c04014 	ori	r3,r18,256
    7b20:	d8c02b15 	stw	r3,172(sp)
    7b24:	20021516 	blt	r4,zero,837c <___vfprintf_internal_r+0x1f1c>
    7b28:	dcc03817 	ldw	r19,224(sp)
    7b2c:	d8002a05 	stb	zero,168(sp)
    7b30:	00801984 	movi	r2,102
    7b34:	8881f926 	beq	r17,r2,831c <___vfprintf_internal_r+0x1ebc>
    7b38:	00801184 	movi	r2,70
    7b3c:	88821c26 	beq	r17,r2,83b0 <___vfprintf_internal_r+0x1f50>
    7b40:	00801144 	movi	r2,69
    7b44:	b081ef26 	beq	r22,r2,8304 <___vfprintf_internal_r+0x1ea4>
    7b48:	d8c02917 	ldw	r3,164(sp)
    7b4c:	d8802104 	addi	r2,sp,132
    7b50:	d8800315 	stw	r2,12(sp)
    7b54:	d9403617 	ldw	r5,216(sp)
    7b58:	d8802504 	addi	r2,sp,148
    7b5c:	d9002c17 	ldw	r4,176(sp)
    7b60:	d8800215 	stw	r2,8(sp)
    7b64:	d8802604 	addi	r2,sp,152
    7b68:	d8c00015 	stw	r3,0(sp)
    7b6c:	d8800115 	stw	r2,4(sp)
    7b70:	01c00084 	movi	r7,2
    7b74:	980d883a 	mov	r6,r19
    7b78:	d8c03c15 	stw	r3,240(sp)
    7b7c:	da003d15 	stw	r8,244(sp)
    7b80:	0008a840 	call	8a84 <_dtoa_r>
    7b84:	1021883a 	mov	r16,r2
    7b88:	008019c4 	movi	r2,103
    7b8c:	d8c03c17 	ldw	r3,240(sp)
    7b90:	da003d17 	ldw	r8,244(sp)
    7b94:	88817126 	beq	r17,r2,815c <___vfprintf_internal_r+0x1cfc>
    7b98:	008011c4 	movi	r2,71
    7b9c:	88829226 	beq	r17,r2,85e8 <___vfprintf_internal_r+0x2188>
    7ba0:	80f9883a 	add	fp,r16,r3
    7ba4:	d9003617 	ldw	r4,216(sp)
    7ba8:	000d883a 	mov	r6,zero
    7bac:	000f883a 	mov	r7,zero
    7bb0:	980b883a 	mov	r5,r19
    7bb4:	da003d15 	stw	r8,244(sp)
    7bb8:	001053c0 	call	1053c <__eqdf2>
    7bbc:	da003d17 	ldw	r8,244(sp)
    7bc0:	10018d26 	beq	r2,zero,81f8 <___vfprintf_internal_r+0x1d98>
    7bc4:	d8802117 	ldw	r2,132(sp)
    7bc8:	1700062e 	bgeu	r2,fp,7be4 <___vfprintf_internal_r+0x1784>
    7bcc:	01000c04 	movi	r4,48
    7bd0:	10c00044 	addi	r3,r2,1
    7bd4:	d8c02115 	stw	r3,132(sp)
    7bd8:	11000005 	stb	r4,0(r2)
    7bdc:	d8802117 	ldw	r2,132(sp)
    7be0:	173ffb36 	bltu	r2,fp,7bd0 <__alt_mem_onchip_memory+0xf7807bd0>
    7be4:	1405c83a 	sub	r2,r2,r16
    7be8:	d8803315 	stw	r2,204(sp)
    7bec:	008011c4 	movi	r2,71
    7bf0:	b0817626 	beq	r22,r2,81cc <___vfprintf_internal_r+0x1d6c>
    7bf4:	00801944 	movi	r2,101
    7bf8:	1442810e 	bge	r2,r17,8600 <___vfprintf_internal_r+0x21a0>
    7bfc:	d8c02617 	ldw	r3,152(sp)
    7c00:	00801984 	movi	r2,102
    7c04:	d8c03215 	stw	r3,200(sp)
    7c08:	8881fe26 	beq	r17,r2,8404 <___vfprintf_internal_r+0x1fa4>
    7c0c:	d8c03217 	ldw	r3,200(sp)
    7c10:	d9003317 	ldw	r4,204(sp)
    7c14:	1901dd16 	blt	r3,r4,838c <___vfprintf_internal_r+0x1f2c>
    7c18:	9480004c 	andi	r18,r18,1
    7c1c:	90022b1e 	bne	r18,zero,84cc <___vfprintf_internal_r+0x206c>
    7c20:	1805883a 	mov	r2,r3
    7c24:	18028016 	blt	r3,zero,8628 <___vfprintf_internal_r+0x21c8>
    7c28:	d8c03217 	ldw	r3,200(sp)
    7c2c:	044019c4 	movi	r17,103
    7c30:	d8c02e15 	stw	r3,184(sp)
    7c34:	df002a07 	ldb	fp,168(sp)
    7c38:	e001531e 	bne	fp,zero,8188 <___vfprintf_internal_r+0x1d28>
    7c3c:	df002783 	ldbu	fp,158(sp)
    7c40:	d8802a15 	stw	r2,168(sp)
    7c44:	dc802b17 	ldw	r18,172(sp)
    7c48:	d8002915 	stw	zero,164(sp)
    7c4c:	003bd106 	br	6b94 <__alt_mem_onchip_memory+0xf7806b94>
    7c50:	d8802d17 	ldw	r2,180(sp)
    7c54:	d8c02d17 	ldw	r3,180(sp)
    7c58:	d9002d17 	ldw	r4,180(sp)
    7c5c:	10800017 	ldw	r2,0(r2)
    7c60:	18c00117 	ldw	r3,4(r3)
    7c64:	21000204 	addi	r4,r4,8
    7c68:	d8803615 	stw	r2,216(sp)
    7c6c:	d8c03815 	stw	r3,224(sp)
    7c70:	d9002d15 	stw	r4,180(sp)
    7c74:	003b7506 	br	6a4c <__alt_mem_onchip_memory+0xf7806a4c>
    7c78:	ac400007 	ldb	r17,0(r21)
    7c7c:	003a5906 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    7c80:	9080100c 	andi	r2,r18,64
    7c84:	1000a826 	beq	r2,zero,7f28 <___vfprintf_internal_r+0x1ac8>
    7c88:	d9002d17 	ldw	r4,180(sp)
    7c8c:	002d883a 	mov	r22,zero
    7c90:	24c0000b 	ldhu	r19,0(r4)
    7c94:	21000104 	addi	r4,r4,4
    7c98:	d9002d15 	stw	r4,180(sp)
    7c9c:	003ccb06 	br	6fcc <__alt_mem_onchip_memory+0xf7806fcc>
    7ca0:	d8c02d17 	ldw	r3,180(sp)
    7ca4:	d9002917 	ldw	r4,164(sp)
    7ca8:	002d883a 	mov	r22,zero
    7cac:	18800104 	addi	r2,r3,4
    7cb0:	1cc00017 	ldw	r19,0(r3)
    7cb4:	203ebb0e 	bge	r4,zero,77a4 <__alt_mem_onchip_memory+0xf78077a4>
    7cb8:	003ef106 	br	7880 <__alt_mem_onchip_memory+0xf7807880>
    7cbc:	9080040c 	andi	r2,r18,16
    7cc0:	1000921e 	bne	r2,zero,7f0c <___vfprintf_internal_r+0x1aac>
    7cc4:	9480100c 	andi	r18,r18,64
    7cc8:	90013926 	beq	r18,zero,81b0 <___vfprintf_internal_r+0x1d50>
    7ccc:	d9002d17 	ldw	r4,180(sp)
    7cd0:	d9402f17 	ldw	r5,188(sp)
    7cd4:	20800017 	ldw	r2,0(r4)
    7cd8:	21000104 	addi	r4,r4,4
    7cdc:	d9002d15 	stw	r4,180(sp)
    7ce0:	1140000d 	sth	r5,0(r2)
    7ce4:	003a1606 	br	6540 <__alt_mem_onchip_memory+0xf7806540>
    7ce8:	9080100c 	andi	r2,r18,64
    7cec:	10008026 	beq	r2,zero,7ef0 <___vfprintf_internal_r+0x1a90>
    7cf0:	d8c02d17 	ldw	r3,180(sp)
    7cf4:	1cc0000f 	ldh	r19,0(r3)
    7cf8:	18c00104 	addi	r3,r3,4
    7cfc:	d8c02d15 	stw	r3,180(sp)
    7d00:	982dd7fa 	srai	r22,r19,31
    7d04:	b005883a 	mov	r2,r22
    7d08:	003b1f06 	br	6988 <__alt_mem_onchip_memory+0xf7806988>
    7d0c:	9080100c 	andi	r2,r18,64
    7d10:	d8002785 	stb	zero,158(sp)
    7d14:	10008a1e 	bne	r2,zero,7f40 <___vfprintf_internal_r+0x1ae0>
    7d18:	d9402d17 	ldw	r5,180(sp)
    7d1c:	d8c02917 	ldw	r3,164(sp)
    7d20:	002d883a 	mov	r22,zero
    7d24:	28800104 	addi	r2,r5,4
    7d28:	2cc00017 	ldw	r19,0(r5)
    7d2c:	183e4b0e 	bge	r3,zero,765c <__alt_mem_onchip_memory+0xf780765c>
    7d30:	9d86b03a 	or	r3,r19,r22
    7d34:	d8802d15 	stw	r2,180(sp)
    7d38:	183e4c1e 	bne	r3,zero,766c <__alt_mem_onchip_memory+0xf780766c>
    7d3c:	0039883a 	mov	fp,zero
    7d40:	0005883a 	mov	r2,zero
    7d44:	003d4006 	br	7248 <__alt_mem_onchip_memory+0xf7807248>
    7d48:	01400074 	movhi	r5,1
    7d4c:	294da984 	addi	r5,r5,13990
    7d50:	d9402b15 	stw	r5,172(sp)
    7d54:	d9402b17 	ldw	r5,172(sp)
    7d58:	1c47883a 	add	r3,r3,r17
    7d5c:	10800044 	addi	r2,r2,1
    7d60:	41400015 	stw	r5,0(r8)
    7d64:	44400115 	stw	r17,4(r8)
    7d68:	d8c02015 	stw	r3,128(sp)
    7d6c:	d8801f15 	stw	r2,124(sp)
    7d70:	010001c4 	movi	r4,7
    7d74:	20bec816 	blt	r4,r2,7898 <__alt_mem_onchip_memory+0xf7807898>
    7d78:	42000204 	addi	r8,r8,8
    7d7c:	003ecd06 	br	78b4 <__alt_mem_onchip_memory+0xf78078b4>
    7d80:	d9002917 	ldw	r4,164(sp)
    7d84:	d8002785 	stb	zero,158(sp)
    7d88:	203d2d16 	blt	r4,zero,7240 <__alt_mem_onchip_memory+0xf7807240>
    7d8c:	00bfdfc4 	movi	r2,-129
    7d90:	90a4703a 	and	r18,r18,r2
    7d94:	003a9106 	br	67dc <__alt_mem_onchip_memory+0xf78067dc>
    7d98:	01000074 	movhi	r4,1
    7d9c:	210da984 	addi	r4,r4,13990
    7da0:	d9002b15 	stw	r4,172(sp)
    7da4:	003c0c06 	br	6dd8 <__alt_mem_onchip_memory+0xf7806dd8>
    7da8:	d9002c17 	ldw	r4,176(sp)
    7dac:	d9801e04 	addi	r6,sp,120
    7db0:	b80b883a 	mov	r5,r23
    7db4:	000dbac0 	call	dbac <__sprint_r>
    7db8:	103aab1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7dbc:	d8c02017 	ldw	r3,128(sp)
    7dc0:	da000404 	addi	r8,sp,16
    7dc4:	003d4106 	br	72cc <__alt_mem_onchip_memory+0xf78072cc>
    7dc8:	d8801f17 	ldw	r2,124(sp)
    7dcc:	01400074 	movhi	r5,1
    7dd0:	01000044 	movi	r4,1
    7dd4:	18c00044 	addi	r3,r3,1
    7dd8:	10800044 	addi	r2,r2,1
    7ddc:	294da904 	addi	r5,r5,13988
    7de0:	41000115 	stw	r4,4(r8)
    7de4:	41400015 	stw	r5,0(r8)
    7de8:	d8c02015 	stw	r3,128(sp)
    7dec:	d8801f15 	stw	r2,124(sp)
    7df0:	010001c4 	movi	r4,7
    7df4:	20805c16 	blt	r4,r2,7f68 <___vfprintf_internal_r+0x1b08>
    7df8:	42000204 	addi	r8,r8,8
    7dfc:	8800041e 	bne	r17,zero,7e10 <___vfprintf_internal_r+0x19b0>
    7e00:	d8803317 	ldw	r2,204(sp)
    7e04:	1000021e 	bne	r2,zero,7e10 <___vfprintf_internal_r+0x19b0>
    7e08:	9080004c 	andi	r2,r18,1
    7e0c:	103c0926 	beq	r2,zero,6e34 <__alt_mem_onchip_memory+0xf7806e34>
    7e10:	d9003717 	ldw	r4,220(sp)
    7e14:	d8801f17 	ldw	r2,124(sp)
    7e18:	d9403417 	ldw	r5,208(sp)
    7e1c:	20c7883a 	add	r3,r4,r3
    7e20:	10800044 	addi	r2,r2,1
    7e24:	41000115 	stw	r4,4(r8)
    7e28:	41400015 	stw	r5,0(r8)
    7e2c:	d8c02015 	stw	r3,128(sp)
    7e30:	d8801f15 	stw	r2,124(sp)
    7e34:	010001c4 	movi	r4,7
    7e38:	20812116 	blt	r4,r2,82c0 <___vfprintf_internal_r+0x1e60>
    7e3c:	42000204 	addi	r8,r8,8
    7e40:	0463c83a 	sub	r17,zero,r17
    7e44:	0440730e 	bge	zero,r17,8014 <___vfprintf_internal_r+0x1bb4>
    7e48:	05800404 	movi	r22,16
    7e4c:	b440860e 	bge	r22,r17,8068 <___vfprintf_internal_r+0x1c08>
    7e50:	01400074 	movhi	r5,1
    7e54:	294da984 	addi	r5,r5,13990
    7e58:	d9402b15 	stw	r5,172(sp)
    7e5c:	070001c4 	movi	fp,7
    7e60:	dcc02c17 	ldw	r19,176(sp)
    7e64:	00000306 	br	7e74 <___vfprintf_internal_r+0x1a14>
    7e68:	42000204 	addi	r8,r8,8
    7e6c:	8c7ffc04 	addi	r17,r17,-16
    7e70:	b440800e 	bge	r22,r17,8074 <___vfprintf_internal_r+0x1c14>
    7e74:	18c00404 	addi	r3,r3,16
    7e78:	10800044 	addi	r2,r2,1
    7e7c:	45000015 	stw	r20,0(r8)
    7e80:	45800115 	stw	r22,4(r8)
    7e84:	d8c02015 	stw	r3,128(sp)
    7e88:	d8801f15 	stw	r2,124(sp)
    7e8c:	e0bff60e 	bge	fp,r2,7e68 <__alt_mem_onchip_memory+0xf7807e68>
    7e90:	d9801e04 	addi	r6,sp,120
    7e94:	b80b883a 	mov	r5,r23
    7e98:	9809883a 	mov	r4,r19
    7e9c:	000dbac0 	call	dbac <__sprint_r>
    7ea0:	103a711e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7ea4:	d8c02017 	ldw	r3,128(sp)
    7ea8:	d8801f17 	ldw	r2,124(sp)
    7eac:	da000404 	addi	r8,sp,16
    7eb0:	003fee06 	br	7e6c <__alt_mem_onchip_memory+0xf7807e6c>
    7eb4:	00bfffc4 	movi	r2,-1
    7eb8:	003a6f06 	br	6878 <__alt_mem_onchip_memory+0xf7806878>
    7ebc:	008011c4 	movi	r2,71
    7ec0:	1440b816 	blt	r2,r17,81a4 <___vfprintf_internal_r+0x1d44>
    7ec4:	04000074 	movhi	r16,1
    7ec8:	840d9b04 	addi	r16,r16,13932
    7ecc:	00c000c4 	movi	r3,3
    7ed0:	00bfdfc4 	movi	r2,-129
    7ed4:	d8c02a15 	stw	r3,168(sp)
    7ed8:	90a4703a 	and	r18,r18,r2
    7edc:	df002783 	ldbu	fp,158(sp)
    7ee0:	d8c02e15 	stw	r3,184(sp)
    7ee4:	d8002915 	stw	zero,164(sp)
    7ee8:	d8003215 	stw	zero,200(sp)
    7eec:	003b2906 	br	6b94 <__alt_mem_onchip_memory+0xf7806b94>
    7ef0:	d9002d17 	ldw	r4,180(sp)
    7ef4:	24c00017 	ldw	r19,0(r4)
    7ef8:	21000104 	addi	r4,r4,4
    7efc:	d9002d15 	stw	r4,180(sp)
    7f00:	982dd7fa 	srai	r22,r19,31
    7f04:	b005883a 	mov	r2,r22
    7f08:	003a9f06 	br	6988 <__alt_mem_onchip_memory+0xf7806988>
    7f0c:	d9402d17 	ldw	r5,180(sp)
    7f10:	d8c02f17 	ldw	r3,188(sp)
    7f14:	28800017 	ldw	r2,0(r5)
    7f18:	29400104 	addi	r5,r5,4
    7f1c:	d9402d15 	stw	r5,180(sp)
    7f20:	10c00015 	stw	r3,0(r2)
    7f24:	00398606 	br	6540 <__alt_mem_onchip_memory+0xf7806540>
    7f28:	d9402d17 	ldw	r5,180(sp)
    7f2c:	002d883a 	mov	r22,zero
    7f30:	2cc00017 	ldw	r19,0(r5)
    7f34:	29400104 	addi	r5,r5,4
    7f38:	d9402d15 	stw	r5,180(sp)
    7f3c:	003c2306 	br	6fcc <__alt_mem_onchip_memory+0xf7806fcc>
    7f40:	d8c02d17 	ldw	r3,180(sp)
    7f44:	d9002917 	ldw	r4,164(sp)
    7f48:	002d883a 	mov	r22,zero
    7f4c:	18800104 	addi	r2,r3,4
    7f50:	1cc0000b 	ldhu	r19,0(r3)
    7f54:	203dc10e 	bge	r4,zero,765c <__alt_mem_onchip_memory+0xf780765c>
    7f58:	003f7506 	br	7d30 <__alt_mem_onchip_memory+0xf7807d30>
    7f5c:	04000074 	movhi	r16,1
    7f60:	840d9904 	addi	r16,r16,13924
    7f64:	003acc06 	br	6a98 <__alt_mem_onchip_memory+0xf7806a98>
    7f68:	d9002c17 	ldw	r4,176(sp)
    7f6c:	d9801e04 	addi	r6,sp,120
    7f70:	b80b883a 	mov	r5,r23
    7f74:	000dbac0 	call	dbac <__sprint_r>
    7f78:	103a3b1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7f7c:	dc402617 	ldw	r17,152(sp)
    7f80:	d8c02017 	ldw	r3,128(sp)
    7f84:	da000404 	addi	r8,sp,16
    7f88:	003f9c06 	br	7dfc <__alt_mem_onchip_memory+0xf7807dfc>
    7f8c:	ac400043 	ldbu	r17,1(r21)
    7f90:	94800814 	ori	r18,r18,32
    7f94:	ad400044 	addi	r21,r21,1
    7f98:	8c403fcc 	andi	r17,r17,255
    7f9c:	8c40201c 	xori	r17,r17,128
    7fa0:	8c7fe004 	addi	r17,r17,-128
    7fa4:	00398f06 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    7fa8:	d8c02d15 	stw	r3,180(sp)
    7fac:	0039883a 	mov	fp,zero
    7fb0:	003e3506 	br	7888 <__alt_mem_onchip_memory+0xf7807888>
    7fb4:	d9002c17 	ldw	r4,176(sp)
    7fb8:	d9801e04 	addi	r6,sp,120
    7fbc:	b80b883a 	mov	r5,r23
    7fc0:	000dbac0 	call	dbac <__sprint_r>
    7fc4:	103a281e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    7fc8:	d8c02017 	ldw	r3,128(sp)
    7fcc:	da000404 	addi	r8,sp,16
    7fd0:	003cd006 	br	7314 <__alt_mem_onchip_memory+0xf7807314>
    7fd4:	8009883a 	mov	r4,r16
    7fd8:	da003d15 	stw	r8,244(sp)
    7fdc:	00063180 	call	6318 <strlen>
    7fe0:	d8802e15 	stw	r2,184(sp)
    7fe4:	da003d17 	ldw	r8,244(sp)
    7fe8:	103c340e 	bge	r2,zero,70bc <__alt_mem_onchip_memory+0xf78070bc>
    7fec:	0005883a 	mov	r2,zero
    7ff0:	003c3206 	br	70bc <__alt_mem_onchip_memory+0xf78070bc>
    7ff4:	d9002c17 	ldw	r4,176(sp)
    7ff8:	d9801e04 	addi	r6,sp,120
    7ffc:	b80b883a 	mov	r5,r23
    8000:	000dbac0 	call	dbac <__sprint_r>
    8004:	103a181e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    8008:	d8c02017 	ldw	r3,128(sp)
    800c:	d8801f17 	ldw	r2,124(sp)
    8010:	da000404 	addi	r8,sp,16
    8014:	d9403317 	ldw	r5,204(sp)
    8018:	10800044 	addi	r2,r2,1
    801c:	44000015 	stw	r16,0(r8)
    8020:	28c7883a 	add	r3,r5,r3
    8024:	003b7d06 	br	6e1c <__alt_mem_onchip_memory+0xf7806e1c>
    8028:	01000074 	movhi	r4,1
    802c:	210dad84 	addi	r4,r4,14006
    8030:	d9003515 	stw	r4,212(sp)
    8034:	003b1406 	br	6c88 <__alt_mem_onchip_memory+0xf7806c88>
    8038:	013fffc4 	movi	r4,-1
    803c:	003a3506 	br	6914 <__alt_mem_onchip_memory+0xf7806914>
    8040:	0023883a 	mov	r17,zero
    8044:	003d9d06 	br	76bc <__alt_mem_onchip_memory+0xf78076bc>
    8048:	d9002c17 	ldw	r4,176(sp)
    804c:	d9801e04 	addi	r6,sp,120
    8050:	b80b883a 	mov	r5,r23
    8054:	000dbac0 	call	dbac <__sprint_r>
    8058:	103a031e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    805c:	d8c02017 	ldw	r3,128(sp)
    8060:	da000404 	addi	r8,sp,16
    8064:	003d9406 	br	76b8 <__alt_mem_onchip_memory+0xf78076b8>
    8068:	01000074 	movhi	r4,1
    806c:	210da984 	addi	r4,r4,13990
    8070:	d9002b15 	stw	r4,172(sp)
    8074:	d9002b17 	ldw	r4,172(sp)
    8078:	1c47883a 	add	r3,r3,r17
    807c:	10800044 	addi	r2,r2,1
    8080:	41000015 	stw	r4,0(r8)
    8084:	44400115 	stw	r17,4(r8)
    8088:	d8c02015 	stw	r3,128(sp)
    808c:	d8801f15 	stw	r2,124(sp)
    8090:	010001c4 	movi	r4,7
    8094:	20bfd716 	blt	r4,r2,7ff4 <__alt_mem_onchip_memory+0xf7807ff4>
    8098:	42000204 	addi	r8,r8,8
    809c:	003fdd06 	br	8014 <__alt_mem_onchip_memory+0xf7808014>
    80a0:	d9002c17 	ldw	r4,176(sp)
    80a4:	d9801e04 	addi	r6,sp,120
    80a8:	b80b883a 	mov	r5,r23
    80ac:	000dbac0 	call	dbac <__sprint_r>
    80b0:	1039ed1e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    80b4:	d8802617 	ldw	r2,152(sp)
    80b8:	d8c02017 	ldw	r3,128(sp)
    80bc:	da000404 	addi	r8,sp,16
    80c0:	003e1006 	br	7904 <__alt_mem_onchip_memory+0xf7807904>
    80c4:	00800044 	movi	r2,1
    80c8:	10803fcc 	andi	r2,r2,255
    80cc:	00c00044 	movi	r3,1
    80d0:	10fa3526 	beq	r2,r3,69a8 <__alt_mem_onchip_memory+0xf78069a8>
    80d4:	00c00084 	movi	r3,2
    80d8:	10fbcb26 	beq	r2,r3,7008 <__alt_mem_onchip_memory+0xf7807008>
    80dc:	003a8f06 	br	6b1c <__alt_mem_onchip_memory+0xf7806b1c>
    80e0:	01000074 	movhi	r4,1
    80e4:	210dad84 	addi	r4,r4,14006
    80e8:	d9003515 	stw	r4,212(sp)
    80ec:	003b7606 	br	6ec8 <__alt_mem_onchip_memory+0xf7806ec8>
    80f0:	d8802917 	ldw	r2,164(sp)
    80f4:	00c00184 	movi	r3,6
    80f8:	1880012e 	bgeu	r3,r2,8100 <___vfprintf_internal_r+0x1ca0>
    80fc:	1805883a 	mov	r2,r3
    8100:	d8802e15 	stw	r2,184(sp)
    8104:	1000ef16 	blt	r2,zero,84c4 <___vfprintf_internal_r+0x2064>
    8108:	04000074 	movhi	r16,1
    810c:	d8802a15 	stw	r2,168(sp)
    8110:	dcc02d15 	stw	r19,180(sp)
    8114:	d8002915 	stw	zero,164(sp)
    8118:	d8003215 	stw	zero,200(sp)
    811c:	840da704 	addi	r16,r16,13980
    8120:	0039883a 	mov	fp,zero
    8124:	003aa206 	br	6bb0 <__alt_mem_onchip_memory+0xf7806bb0>
    8128:	0021883a 	mov	r16,zero
    812c:	003e0706 	br	794c <__alt_mem_onchip_memory+0xf780794c>
    8130:	d9002c17 	ldw	r4,176(sp)
    8134:	d9801e04 	addi	r6,sp,120
    8138:	b80b883a 	mov	r5,r23
    813c:	000dbac0 	call	dbac <__sprint_r>
    8140:	1039c91e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    8144:	d8802617 	ldw	r2,152(sp)
    8148:	d9403317 	ldw	r5,204(sp)
    814c:	d8c02017 	ldw	r3,128(sp)
    8150:	da000404 	addi	r8,sp,16
    8154:	2885c83a 	sub	r2,r5,r2
    8158:	003dfb06 	br	7948 <__alt_mem_onchip_memory+0xf7807948>
    815c:	9080004c 	andi	r2,r18,1
    8160:	103e8f1e 	bne	r2,zero,7ba0 <__alt_mem_onchip_memory+0xf7807ba0>
    8164:	d8802117 	ldw	r2,132(sp)
    8168:	003e9e06 	br	7be4 <__alt_mem_onchip_memory+0xf7807be4>
    816c:	1025883a 	mov	r18,r2
    8170:	0039883a 	mov	fp,zero
    8174:	00800084 	movi	r2,2
    8178:	003fd306 	br	80c8 <__alt_mem_onchip_memory+0xf78080c8>
    817c:	07000b44 	movi	fp,45
    8180:	df002785 	stb	fp,158(sp)
    8184:	003a4006 	br	6a88 <__alt_mem_onchip_memory+0xf7806a88>
    8188:	00c00b44 	movi	r3,45
    818c:	d8c02785 	stb	r3,158(sp)
    8190:	d8802a15 	stw	r2,168(sp)
    8194:	dc802b17 	ldw	r18,172(sp)
    8198:	d8002915 	stw	zero,164(sp)
    819c:	07000b44 	movi	fp,45
    81a0:	003a8006 	br	6ba4 <__alt_mem_onchip_memory+0xf7806ba4>
    81a4:	04000074 	movhi	r16,1
    81a8:	840d9c04 	addi	r16,r16,13936
    81ac:	003f4706 	br	7ecc <__alt_mem_onchip_memory+0xf7807ecc>
    81b0:	d8c02d17 	ldw	r3,180(sp)
    81b4:	d9002f17 	ldw	r4,188(sp)
    81b8:	18800017 	ldw	r2,0(r3)
    81bc:	18c00104 	addi	r3,r3,4
    81c0:	d8c02d15 	stw	r3,180(sp)
    81c4:	11000015 	stw	r4,0(r2)
    81c8:	0038dd06 	br	6540 <__alt_mem_onchip_memory+0xf7806540>
    81cc:	dd802617 	ldw	r22,152(sp)
    81d0:	00bfff44 	movi	r2,-3
    81d4:	b0801c16 	blt	r22,r2,8248 <___vfprintf_internal_r+0x1de8>
    81d8:	d9402917 	ldw	r5,164(sp)
    81dc:	2d801a16 	blt	r5,r22,8248 <___vfprintf_internal_r+0x1de8>
    81e0:	dd803215 	stw	r22,200(sp)
    81e4:	003e8906 	br	7c0c <__alt_mem_onchip_memory+0xf7807c0c>
    81e8:	01000074 	movhi	r4,1
    81ec:	210da984 	addi	r4,r4,13990
    81f0:	d9002b15 	stw	r4,172(sp)
    81f4:	003c9106 	br	743c <__alt_mem_onchip_memory+0xf780743c>
    81f8:	e005883a 	mov	r2,fp
    81fc:	003e7906 	br	7be4 <__alt_mem_onchip_memory+0xf7807be4>
    8200:	d9402917 	ldw	r5,164(sp)
    8204:	df002783 	ldbu	fp,158(sp)
    8208:	dcc02d15 	stw	r19,180(sp)
    820c:	d9402a15 	stw	r5,168(sp)
    8210:	d9402e15 	stw	r5,184(sp)
    8214:	d8002915 	stw	zero,164(sp)
    8218:	d8003215 	stw	zero,200(sp)
    821c:	003a5d06 	br	6b94 <__alt_mem_onchip_memory+0xf7806b94>
    8220:	9080004c 	andi	r2,r18,1
    8224:	0039883a 	mov	fp,zero
    8228:	10000426 	beq	r2,zero,823c <___vfprintf_internal_r+0x1ddc>
    822c:	00800c04 	movi	r2,48
    8230:	dc001dc4 	addi	r16,sp,119
    8234:	d8801dc5 	stb	r2,119(sp)
    8238:	003b8006 	br	703c <__alt_mem_onchip_memory+0xf780703c>
    823c:	d8002e15 	stw	zero,184(sp)
    8240:	dc001e04 	addi	r16,sp,120
    8244:	003a4d06 	br	6b7c <__alt_mem_onchip_memory+0xf7806b7c>
    8248:	8c7fff84 	addi	r17,r17,-2
    824c:	b5bfffc4 	addi	r22,r22,-1
    8250:	dd802615 	stw	r22,152(sp)
    8254:	dc4022c5 	stb	r17,139(sp)
    8258:	b000bf16 	blt	r22,zero,8558 <___vfprintf_internal_r+0x20f8>
    825c:	00800ac4 	movi	r2,43
    8260:	d8802305 	stb	r2,140(sp)
    8264:	00800244 	movi	r2,9
    8268:	15807016 	blt	r2,r22,842c <___vfprintf_internal_r+0x1fcc>
    826c:	00800c04 	movi	r2,48
    8270:	b5800c04 	addi	r22,r22,48
    8274:	d8802345 	stb	r2,141(sp)
    8278:	dd802385 	stb	r22,142(sp)
    827c:	d88023c4 	addi	r2,sp,143
    8280:	df0022c4 	addi	fp,sp,139
    8284:	d8c03317 	ldw	r3,204(sp)
    8288:	1739c83a 	sub	fp,r2,fp
    828c:	d9003317 	ldw	r4,204(sp)
    8290:	e0c7883a 	add	r3,fp,r3
    8294:	df003a15 	stw	fp,232(sp)
    8298:	d8c02e15 	stw	r3,184(sp)
    829c:	00800044 	movi	r2,1
    82a0:	1100b30e 	bge	r2,r4,8570 <___vfprintf_internal_r+0x2110>
    82a4:	d8c02e17 	ldw	r3,184(sp)
    82a8:	18c00044 	addi	r3,r3,1
    82ac:	d8c02e15 	stw	r3,184(sp)
    82b0:	1805883a 	mov	r2,r3
    82b4:	1800ac16 	blt	r3,zero,8568 <___vfprintf_internal_r+0x2108>
    82b8:	d8003215 	stw	zero,200(sp)
    82bc:	003e5d06 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    82c0:	d9002c17 	ldw	r4,176(sp)
    82c4:	d9801e04 	addi	r6,sp,120
    82c8:	b80b883a 	mov	r5,r23
    82cc:	000dbac0 	call	dbac <__sprint_r>
    82d0:	1039651e 	bne	r2,zero,6868 <__alt_mem_onchip_memory+0xf7806868>
    82d4:	dc402617 	ldw	r17,152(sp)
    82d8:	d8c02017 	ldw	r3,128(sp)
    82dc:	d8801f17 	ldw	r2,124(sp)
    82e0:	da000404 	addi	r8,sp,16
    82e4:	003ed606 	br	7e40 <__alt_mem_onchip_memory+0xf7807e40>
    82e8:	582b883a 	mov	r21,r11
    82ec:	d8002915 	stw	zero,164(sp)
    82f0:	0038bd06 	br	65e8 <__alt_mem_onchip_memory+0xf78065e8>
    82f4:	d8802917 	ldw	r2,164(sp)
    82f8:	103e071e 	bne	r2,zero,7b18 <__alt_mem_onchip_memory+0xf7807b18>
    82fc:	dc002915 	stw	r16,164(sp)
    8300:	003e0506 	br	7b18 <__alt_mem_onchip_memory+0xf7807b18>
    8304:	d9002917 	ldw	r4,164(sp)
    8308:	20c00044 	addi	r3,r4,1
    830c:	003e0f06 	br	7b4c <__alt_mem_onchip_memory+0xf7807b4c>
    8310:	01400184 	movi	r5,6
    8314:	d9402915 	stw	r5,164(sp)
    8318:	003dff06 	br	7b18 <__alt_mem_onchip_memory+0xf7807b18>
    831c:	d8802104 	addi	r2,sp,132
    8320:	d8800315 	stw	r2,12(sp)
    8324:	d8802504 	addi	r2,sp,148
    8328:	d8800215 	stw	r2,8(sp)
    832c:	d8802604 	addi	r2,sp,152
    8330:	d8800115 	stw	r2,4(sp)
    8334:	d8802917 	ldw	r2,164(sp)
    8338:	d9403617 	ldw	r5,216(sp)
    833c:	d9002c17 	ldw	r4,176(sp)
    8340:	d8800015 	stw	r2,0(sp)
    8344:	01c000c4 	movi	r7,3
    8348:	980d883a 	mov	r6,r19
    834c:	da003d15 	stw	r8,244(sp)
    8350:	0008a840 	call	8a84 <_dtoa_r>
    8354:	d8c02917 	ldw	r3,164(sp)
    8358:	da003d17 	ldw	r8,244(sp)
    835c:	1021883a 	mov	r16,r2
    8360:	10f9883a 	add	fp,r2,r3
    8364:	81000007 	ldb	r4,0(r16)
    8368:	00800c04 	movi	r2,48
    836c:	20805e26 	beq	r4,r2,84e8 <___vfprintf_internal_r+0x2088>
    8370:	d8c02617 	ldw	r3,152(sp)
    8374:	e0f9883a 	add	fp,fp,r3
    8378:	003e0a06 	br	7ba4 <__alt_mem_onchip_memory+0xf7807ba4>
    837c:	00c00b44 	movi	r3,45
    8380:	24e0003c 	xorhi	r19,r4,32768
    8384:	d8c02a05 	stb	r3,168(sp)
    8388:	003de906 	br	7b30 <__alt_mem_onchip_memory+0xf7807b30>
    838c:	d8c03217 	ldw	r3,200(sp)
    8390:	00c07a0e 	bge	zero,r3,857c <___vfprintf_internal_r+0x211c>
    8394:	00800044 	movi	r2,1
    8398:	d9003317 	ldw	r4,204(sp)
    839c:	1105883a 	add	r2,r2,r4
    83a0:	d8802e15 	stw	r2,184(sp)
    83a4:	10004e16 	blt	r2,zero,84e0 <___vfprintf_internal_r+0x2080>
    83a8:	044019c4 	movi	r17,103
    83ac:	003e2106 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    83b0:	d9002917 	ldw	r4,164(sp)
    83b4:	d8802104 	addi	r2,sp,132
    83b8:	d8800315 	stw	r2,12(sp)
    83bc:	d9000015 	stw	r4,0(sp)
    83c0:	d8802504 	addi	r2,sp,148
    83c4:	d9403617 	ldw	r5,216(sp)
    83c8:	d9002c17 	ldw	r4,176(sp)
    83cc:	d8800215 	stw	r2,8(sp)
    83d0:	d8802604 	addi	r2,sp,152
    83d4:	d8800115 	stw	r2,4(sp)
    83d8:	01c000c4 	movi	r7,3
    83dc:	980d883a 	mov	r6,r19
    83e0:	da003d15 	stw	r8,244(sp)
    83e4:	0008a840 	call	8a84 <_dtoa_r>
    83e8:	d8c02917 	ldw	r3,164(sp)
    83ec:	da003d17 	ldw	r8,244(sp)
    83f0:	1021883a 	mov	r16,r2
    83f4:	00801184 	movi	r2,70
    83f8:	80f9883a 	add	fp,r16,r3
    83fc:	88bfd926 	beq	r17,r2,8364 <__alt_mem_onchip_memory+0xf7808364>
    8400:	003de806 	br	7ba4 <__alt_mem_onchip_memory+0xf7807ba4>
    8404:	d9002917 	ldw	r4,164(sp)
    8408:	00c04d0e 	bge	zero,r3,8540 <___vfprintf_internal_r+0x20e0>
    840c:	2000441e 	bne	r4,zero,8520 <___vfprintf_internal_r+0x20c0>
    8410:	9480004c 	andi	r18,r18,1
    8414:	9000421e 	bne	r18,zero,8520 <___vfprintf_internal_r+0x20c0>
    8418:	1805883a 	mov	r2,r3
    841c:	18007016 	blt	r3,zero,85e0 <___vfprintf_internal_r+0x2180>
    8420:	d8c03217 	ldw	r3,200(sp)
    8424:	d8c02e15 	stw	r3,184(sp)
    8428:	003e0206 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    842c:	df0022c4 	addi	fp,sp,139
    8430:	dc002915 	stw	r16,164(sp)
    8434:	4027883a 	mov	r19,r8
    8438:	e021883a 	mov	r16,fp
    843c:	b009883a 	mov	r4,r22
    8440:	01400284 	movi	r5,10
    8444:	0005ffc0 	call	5ffc <__modsi3>
    8448:	10800c04 	addi	r2,r2,48
    844c:	843fffc4 	addi	r16,r16,-1
    8450:	b009883a 	mov	r4,r22
    8454:	01400284 	movi	r5,10
    8458:	80800005 	stb	r2,0(r16)
    845c:	0005f780 	call	5f78 <__divsi3>
    8460:	102d883a 	mov	r22,r2
    8464:	00800244 	movi	r2,9
    8468:	15bff416 	blt	r2,r22,843c <__alt_mem_onchip_memory+0xf780843c>
    846c:	9811883a 	mov	r8,r19
    8470:	b0800c04 	addi	r2,r22,48
    8474:	8027883a 	mov	r19,r16
    8478:	997fffc4 	addi	r5,r19,-1
    847c:	98bfffc5 	stb	r2,-1(r19)
    8480:	dc002917 	ldw	r16,164(sp)
    8484:	2f006a2e 	bgeu	r5,fp,8630 <___vfprintf_internal_r+0x21d0>
    8488:	d9c02384 	addi	r7,sp,142
    848c:	3ccfc83a 	sub	r7,r7,r19
    8490:	d9002344 	addi	r4,sp,141
    8494:	e1cf883a 	add	r7,fp,r7
    8498:	00000106 	br	84a0 <___vfprintf_internal_r+0x2040>
    849c:	28800003 	ldbu	r2,0(r5)
    84a0:	20800005 	stb	r2,0(r4)
    84a4:	21000044 	addi	r4,r4,1
    84a8:	29400044 	addi	r5,r5,1
    84ac:	393ffb1e 	bne	r7,r4,849c <__alt_mem_onchip_memory+0xf780849c>
    84b0:	d8802304 	addi	r2,sp,140
    84b4:	14c5c83a 	sub	r2,r2,r19
    84b8:	d8c02344 	addi	r3,sp,141
    84bc:	1885883a 	add	r2,r3,r2
    84c0:	003f7006 	br	8284 <__alt_mem_onchip_memory+0xf7808284>
    84c4:	0005883a 	mov	r2,zero
    84c8:	003f0f06 	br	8108 <__alt_mem_onchip_memory+0xf7808108>
    84cc:	d8c03217 	ldw	r3,200(sp)
    84d0:	18c00044 	addi	r3,r3,1
    84d4:	d8c02e15 	stw	r3,184(sp)
    84d8:	1805883a 	mov	r2,r3
    84dc:	183fb20e 	bge	r3,zero,83a8 <__alt_mem_onchip_memory+0xf78083a8>
    84e0:	0005883a 	mov	r2,zero
    84e4:	003fb006 	br	83a8 <__alt_mem_onchip_memory+0xf78083a8>
    84e8:	d9003617 	ldw	r4,216(sp)
    84ec:	000d883a 	mov	r6,zero
    84f0:	000f883a 	mov	r7,zero
    84f4:	980b883a 	mov	r5,r19
    84f8:	d8c03c15 	stw	r3,240(sp)
    84fc:	da003d15 	stw	r8,244(sp)
    8500:	001053c0 	call	1053c <__eqdf2>
    8504:	d8c03c17 	ldw	r3,240(sp)
    8508:	da003d17 	ldw	r8,244(sp)
    850c:	103f9826 	beq	r2,zero,8370 <__alt_mem_onchip_memory+0xf7808370>
    8510:	00800044 	movi	r2,1
    8514:	10c7c83a 	sub	r3,r2,r3
    8518:	d8c02615 	stw	r3,152(sp)
    851c:	003f9506 	br	8374 <__alt_mem_onchip_memory+0xf7808374>
    8520:	d9002917 	ldw	r4,164(sp)
    8524:	d8c03217 	ldw	r3,200(sp)
    8528:	20800044 	addi	r2,r4,1
    852c:	1885883a 	add	r2,r3,r2
    8530:	d8802e15 	stw	r2,184(sp)
    8534:	103dbf0e 	bge	r2,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    8538:	0005883a 	mov	r2,zero
    853c:	003dbd06 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    8540:	2000211e 	bne	r4,zero,85c8 <___vfprintf_internal_r+0x2168>
    8544:	9480004c 	andi	r18,r18,1
    8548:	90001f1e 	bne	r18,zero,85c8 <___vfprintf_internal_r+0x2168>
    854c:	00800044 	movi	r2,1
    8550:	d8802e15 	stw	r2,184(sp)
    8554:	003db706 	br	7c34 <__alt_mem_onchip_memory+0xf7807c34>
    8558:	00800b44 	movi	r2,45
    855c:	05adc83a 	sub	r22,zero,r22
    8560:	d8802305 	stb	r2,140(sp)
    8564:	003f3f06 	br	8264 <__alt_mem_onchip_memory+0xf7808264>
    8568:	0005883a 	mov	r2,zero
    856c:	003f5206 	br	82b8 <__alt_mem_onchip_memory+0xf78082b8>
    8570:	90a4703a 	and	r18,r18,r2
    8574:	903f4e26 	beq	r18,zero,82b0 <__alt_mem_onchip_memory+0xf78082b0>
    8578:	003f4a06 	br	82a4 <__alt_mem_onchip_memory+0xf78082a4>
    857c:	00800084 	movi	r2,2
    8580:	10c5c83a 	sub	r2,r2,r3
    8584:	003f8406 	br	8398 <__alt_mem_onchip_memory+0xf7808398>
    8588:	d8802d17 	ldw	r2,180(sp)
    858c:	d9002d17 	ldw	r4,180(sp)
    8590:	ac400043 	ldbu	r17,1(r21)
    8594:	10800017 	ldw	r2,0(r2)
    8598:	582b883a 	mov	r21,r11
    859c:	d8802915 	stw	r2,164(sp)
    85a0:	20800104 	addi	r2,r4,4
    85a4:	d9002917 	ldw	r4,164(sp)
    85a8:	d8802d15 	stw	r2,180(sp)
    85ac:	203e7a0e 	bge	r4,zero,7f98 <__alt_mem_onchip_memory+0xf7807f98>
    85b0:	8c403fcc 	andi	r17,r17,255
    85b4:	00bfffc4 	movi	r2,-1
    85b8:	8c40201c 	xori	r17,r17,128
    85bc:	d8802915 	stw	r2,164(sp)
    85c0:	8c7fe004 	addi	r17,r17,-128
    85c4:	00380706 	br	65e4 <__alt_mem_onchip_memory+0xf78065e4>
    85c8:	d8c02917 	ldw	r3,164(sp)
    85cc:	18c00084 	addi	r3,r3,2
    85d0:	d8c02e15 	stw	r3,184(sp)
    85d4:	1805883a 	mov	r2,r3
    85d8:	183d960e 	bge	r3,zero,7c34 <__alt_mem_onchip_memory+0xf7807c34>
    85dc:	003fd606 	br	8538 <__alt_mem_onchip_memory+0xf7808538>
    85e0:	0005883a 	mov	r2,zero
    85e4:	003f8e06 	br	8420 <__alt_mem_onchip_memory+0xf7808420>
    85e8:	9080004c 	andi	r2,r18,1
    85ec:	103f811e 	bne	r2,zero,83f4 <__alt_mem_onchip_memory+0xf78083f4>
    85f0:	d8802117 	ldw	r2,132(sp)
    85f4:	1405c83a 	sub	r2,r2,r16
    85f8:	d8803315 	stw	r2,204(sp)
    85fc:	b47ef326 	beq	r22,r17,81cc <__alt_mem_onchip_memory+0xf78081cc>
    8600:	dd802617 	ldw	r22,152(sp)
    8604:	003f1106 	br	824c <__alt_mem_onchip_memory+0xf780824c>
    8608:	d9c02785 	stb	r7,158(sp)
    860c:	00390406 	br	6a20 <__alt_mem_onchip_memory+0xf7806a20>
    8610:	d9c02785 	stb	r7,158(sp)
    8614:	0038d306 	br	6964 <__alt_mem_onchip_memory+0xf7806964>
    8618:	d9c02785 	stb	r7,158(sp)
    861c:	003a6106 	br	6fa4 <__alt_mem_onchip_memory+0xf7806fa4>
    8620:	d9c02785 	stb	r7,158(sp)
    8624:	003af806 	br	7208 <__alt_mem_onchip_memory+0xf7807208>
    8628:	0005883a 	mov	r2,zero
    862c:	003d7e06 	br	7c28 <__alt_mem_onchip_memory+0xf7807c28>
    8630:	d8802344 	addi	r2,sp,141
    8634:	003f1306 	br	8284 <__alt_mem_onchip_memory+0xf7808284>
    8638:	d9c02785 	stb	r7,158(sp)
    863c:	00392306 	br	6acc <__alt_mem_onchip_memory+0xf7806acc>
    8640:	d9c02785 	stb	r7,158(sp)
    8644:	003aa906 	br	70ec <__alt_mem_onchip_memory+0xf78070ec>
    8648:	d9c02785 	stb	r7,158(sp)
    864c:	003a3d06 	br	6f44 <__alt_mem_onchip_memory+0xf7806f44>
    8650:	d9c02785 	stb	r7,158(sp)
    8654:	003aca06 	br	7180 <__alt_mem_onchip_memory+0xf7807180>

00008658 <__vfprintf_internal>:
    8658:	00800074 	movhi	r2,1
    865c:	10950604 	addi	r2,r2,21528
    8660:	300f883a 	mov	r7,r6
    8664:	280d883a 	mov	r6,r5
    8668:	200b883a 	mov	r5,r4
    866c:	11000017 	ldw	r4,0(r2)
    8670:	00064601 	jmpi	6460 <___vfprintf_internal_r>

00008674 <__sbprintf>:
    8674:	2880030b 	ldhu	r2,12(r5)
    8678:	2ac01917 	ldw	r11,100(r5)
    867c:	2a80038b 	ldhu	r10,14(r5)
    8680:	2a400717 	ldw	r9,28(r5)
    8684:	2a000917 	ldw	r8,36(r5)
    8688:	defee204 	addi	sp,sp,-1144
    868c:	00c10004 	movi	r3,1024
    8690:	dc011a15 	stw	r16,1128(sp)
    8694:	10bfff4c 	andi	r2,r2,65533
    8698:	2821883a 	mov	r16,r5
    869c:	d8cb883a 	add	r5,sp,r3
    86a0:	dc811c15 	stw	r18,1136(sp)
    86a4:	dc411b15 	stw	r17,1132(sp)
    86a8:	dfc11d15 	stw	ra,1140(sp)
    86ac:	2025883a 	mov	r18,r4
    86b0:	d881030d 	sth	r2,1036(sp)
    86b4:	dac11915 	stw	r11,1124(sp)
    86b8:	da81038d 	sth	r10,1038(sp)
    86bc:	da410715 	stw	r9,1052(sp)
    86c0:	da010915 	stw	r8,1060(sp)
    86c4:	dec10015 	stw	sp,1024(sp)
    86c8:	dec10415 	stw	sp,1040(sp)
    86cc:	d8c10215 	stw	r3,1032(sp)
    86d0:	d8c10515 	stw	r3,1044(sp)
    86d4:	d8010615 	stw	zero,1048(sp)
    86d8:	00064600 	call	6460 <___vfprintf_internal_r>
    86dc:	1023883a 	mov	r17,r2
    86e0:	10000416 	blt	r2,zero,86f4 <__sbprintf+0x80>
    86e4:	d9410004 	addi	r5,sp,1024
    86e8:	9009883a 	mov	r4,r18
    86ec:	000a3280 	call	a328 <_fflush_r>
    86f0:	10000d1e 	bne	r2,zero,8728 <__sbprintf+0xb4>
    86f4:	d881030b 	ldhu	r2,1036(sp)
    86f8:	1080100c 	andi	r2,r2,64
    86fc:	10000326 	beq	r2,zero,870c <__sbprintf+0x98>
    8700:	8080030b 	ldhu	r2,12(r16)
    8704:	10801014 	ori	r2,r2,64
    8708:	8080030d 	sth	r2,12(r16)
    870c:	8805883a 	mov	r2,r17
    8710:	dfc11d17 	ldw	ra,1140(sp)
    8714:	dc811c17 	ldw	r18,1136(sp)
    8718:	dc411b17 	ldw	r17,1132(sp)
    871c:	dc011a17 	ldw	r16,1128(sp)
    8720:	dec11e04 	addi	sp,sp,1144
    8724:	f800283a 	ret
    8728:	047fffc4 	movi	r17,-1
    872c:	003ff106 	br	86f4 <__alt_mem_onchip_memory+0xf78086f4>

00008730 <__swsetup_r>:
    8730:	00800074 	movhi	r2,1
    8734:	defffd04 	addi	sp,sp,-12
    8738:	10950604 	addi	r2,r2,21528
    873c:	dc400115 	stw	r17,4(sp)
    8740:	2023883a 	mov	r17,r4
    8744:	11000017 	ldw	r4,0(r2)
    8748:	dc000015 	stw	r16,0(sp)
    874c:	dfc00215 	stw	ra,8(sp)
    8750:	2821883a 	mov	r16,r5
    8754:	20000226 	beq	r4,zero,8760 <__swsetup_r+0x30>
    8758:	20800e17 	ldw	r2,56(r4)
    875c:	10003126 	beq	r2,zero,8824 <__swsetup_r+0xf4>
    8760:	8080030b 	ldhu	r2,12(r16)
    8764:	10c0020c 	andi	r3,r2,8
    8768:	1009883a 	mov	r4,r2
    876c:	18000f26 	beq	r3,zero,87ac <__swsetup_r+0x7c>
    8770:	80c00417 	ldw	r3,16(r16)
    8774:	18001526 	beq	r3,zero,87cc <__swsetup_r+0x9c>
    8778:	1100004c 	andi	r4,r2,1
    877c:	20001c1e 	bne	r4,zero,87f0 <__swsetup_r+0xc0>
    8780:	1080008c 	andi	r2,r2,2
    8784:	1000291e 	bne	r2,zero,882c <__swsetup_r+0xfc>
    8788:	80800517 	ldw	r2,20(r16)
    878c:	80800215 	stw	r2,8(r16)
    8790:	18001c26 	beq	r3,zero,8804 <__swsetup_r+0xd4>
    8794:	0005883a 	mov	r2,zero
    8798:	dfc00217 	ldw	ra,8(sp)
    879c:	dc400117 	ldw	r17,4(sp)
    87a0:	dc000017 	ldw	r16,0(sp)
    87a4:	dec00304 	addi	sp,sp,12
    87a8:	f800283a 	ret
    87ac:	2080040c 	andi	r2,r4,16
    87b0:	10002e26 	beq	r2,zero,886c <__swsetup_r+0x13c>
    87b4:	2080010c 	andi	r2,r4,4
    87b8:	10001e1e 	bne	r2,zero,8834 <__swsetup_r+0x104>
    87bc:	80c00417 	ldw	r3,16(r16)
    87c0:	20800214 	ori	r2,r4,8
    87c4:	8080030d 	sth	r2,12(r16)
    87c8:	183feb1e 	bne	r3,zero,8778 <__alt_mem_onchip_memory+0xf7808778>
    87cc:	1100a00c 	andi	r4,r2,640
    87d0:	01408004 	movi	r5,512
    87d4:	217fe826 	beq	r4,r5,8778 <__alt_mem_onchip_memory+0xf7808778>
    87d8:	800b883a 	mov	r5,r16
    87dc:	8809883a 	mov	r4,r17
    87e0:	000b3040 	call	b304 <__smakebuf_r>
    87e4:	8080030b 	ldhu	r2,12(r16)
    87e8:	80c00417 	ldw	r3,16(r16)
    87ec:	003fe206 	br	8778 <__alt_mem_onchip_memory+0xf7808778>
    87f0:	80800517 	ldw	r2,20(r16)
    87f4:	80000215 	stw	zero,8(r16)
    87f8:	0085c83a 	sub	r2,zero,r2
    87fc:	80800615 	stw	r2,24(r16)
    8800:	183fe41e 	bne	r3,zero,8794 <__alt_mem_onchip_memory+0xf7808794>
    8804:	80c0030b 	ldhu	r3,12(r16)
    8808:	0005883a 	mov	r2,zero
    880c:	1900200c 	andi	r4,r3,128
    8810:	203fe126 	beq	r4,zero,8798 <__alt_mem_onchip_memory+0xf7808798>
    8814:	18c01014 	ori	r3,r3,64
    8818:	80c0030d 	sth	r3,12(r16)
    881c:	00bfffc4 	movi	r2,-1
    8820:	003fdd06 	br	8798 <__alt_mem_onchip_memory+0xf7808798>
    8824:	000a7040 	call	a704 <__sinit>
    8828:	003fcd06 	br	8760 <__alt_mem_onchip_memory+0xf7808760>
    882c:	0005883a 	mov	r2,zero
    8830:	003fd606 	br	878c <__alt_mem_onchip_memory+0xf780878c>
    8834:	81400c17 	ldw	r5,48(r16)
    8838:	28000626 	beq	r5,zero,8854 <__swsetup_r+0x124>
    883c:	80801004 	addi	r2,r16,64
    8840:	28800326 	beq	r5,r2,8850 <__swsetup_r+0x120>
    8844:	8809883a 	mov	r4,r17
    8848:	000a8780 	call	a878 <_free_r>
    884c:	8100030b 	ldhu	r4,12(r16)
    8850:	80000c15 	stw	zero,48(r16)
    8854:	80c00417 	ldw	r3,16(r16)
    8858:	00bff6c4 	movi	r2,-37
    885c:	1108703a 	and	r4,r2,r4
    8860:	80000115 	stw	zero,4(r16)
    8864:	80c00015 	stw	r3,0(r16)
    8868:	003fd506 	br	87c0 <__alt_mem_onchip_memory+0xf78087c0>
    886c:	00800244 	movi	r2,9
    8870:	88800015 	stw	r2,0(r17)
    8874:	20801014 	ori	r2,r4,64
    8878:	8080030d 	sth	r2,12(r16)
    887c:	00bfffc4 	movi	r2,-1
    8880:	003fc506 	br	8798 <__alt_mem_onchip_memory+0xf7808798>

00008884 <quorem>:
    8884:	defff704 	addi	sp,sp,-36
    8888:	dc800215 	stw	r18,8(sp)
    888c:	20800417 	ldw	r2,16(r4)
    8890:	2c800417 	ldw	r18,16(r5)
    8894:	dfc00815 	stw	ra,32(sp)
    8898:	ddc00715 	stw	r23,28(sp)
    889c:	dd800615 	stw	r22,24(sp)
    88a0:	dd400515 	stw	r21,20(sp)
    88a4:	dd000415 	stw	r20,16(sp)
    88a8:	dcc00315 	stw	r19,12(sp)
    88ac:	dc400115 	stw	r17,4(sp)
    88b0:	dc000015 	stw	r16,0(sp)
    88b4:	14807116 	blt	r2,r18,8a7c <quorem+0x1f8>
    88b8:	94bfffc4 	addi	r18,r18,-1
    88bc:	94ad883a 	add	r22,r18,r18
    88c0:	b5ad883a 	add	r22,r22,r22
    88c4:	2c400504 	addi	r17,r5,20
    88c8:	8da9883a 	add	r20,r17,r22
    88cc:	25400504 	addi	r21,r4,20
    88d0:	282f883a 	mov	r23,r5
    88d4:	adad883a 	add	r22,r21,r22
    88d8:	a1400017 	ldw	r5,0(r20)
    88dc:	2021883a 	mov	r16,r4
    88e0:	b1000017 	ldw	r4,0(r22)
    88e4:	29400044 	addi	r5,r5,1
    88e8:	00060700 	call	6070 <__udivsi3>
    88ec:	1027883a 	mov	r19,r2
    88f0:	10002c26 	beq	r2,zero,89a4 <quorem+0x120>
    88f4:	a813883a 	mov	r9,r21
    88f8:	880b883a 	mov	r5,r17
    88fc:	0009883a 	mov	r4,zero
    8900:	000d883a 	mov	r6,zero
    8904:	2a000017 	ldw	r8,0(r5)
    8908:	49c00017 	ldw	r7,0(r9)
    890c:	29400104 	addi	r5,r5,4
    8910:	40bfffcc 	andi	r2,r8,65535
    8914:	14c5383a 	mul	r2,r2,r19
    8918:	4010d43a 	srli	r8,r8,16
    891c:	38ffffcc 	andi	r3,r7,65535
    8920:	1105883a 	add	r2,r2,r4
    8924:	1008d43a 	srli	r4,r2,16
    8928:	44d1383a 	mul	r8,r8,r19
    892c:	198d883a 	add	r6,r3,r6
    8930:	10ffffcc 	andi	r3,r2,65535
    8934:	30c7c83a 	sub	r3,r6,r3
    8938:	380ed43a 	srli	r7,r7,16
    893c:	4105883a 	add	r2,r8,r4
    8940:	180dd43a 	srai	r6,r3,16
    8944:	113fffcc 	andi	r4,r2,65535
    8948:	390fc83a 	sub	r7,r7,r4
    894c:	398d883a 	add	r6,r7,r6
    8950:	300e943a 	slli	r7,r6,16
    8954:	18ffffcc 	andi	r3,r3,65535
    8958:	1008d43a 	srli	r4,r2,16
    895c:	38ceb03a 	or	r7,r7,r3
    8960:	49c00015 	stw	r7,0(r9)
    8964:	300dd43a 	srai	r6,r6,16
    8968:	4a400104 	addi	r9,r9,4
    896c:	a17fe52e 	bgeu	r20,r5,8904 <__alt_mem_onchip_memory+0xf7808904>
    8970:	b0800017 	ldw	r2,0(r22)
    8974:	10000b1e 	bne	r2,zero,89a4 <quorem+0x120>
    8978:	b0bfff04 	addi	r2,r22,-4
    897c:	a880082e 	bgeu	r21,r2,89a0 <quorem+0x11c>
    8980:	b0ffff17 	ldw	r3,-4(r22)
    8984:	18000326 	beq	r3,zero,8994 <quorem+0x110>
    8988:	00000506 	br	89a0 <quorem+0x11c>
    898c:	10c00017 	ldw	r3,0(r2)
    8990:	1800031e 	bne	r3,zero,89a0 <quorem+0x11c>
    8994:	10bfff04 	addi	r2,r2,-4
    8998:	94bfffc4 	addi	r18,r18,-1
    899c:	a8bffb36 	bltu	r21,r2,898c <__alt_mem_onchip_memory+0xf780898c>
    89a0:	84800415 	stw	r18,16(r16)
    89a4:	b80b883a 	mov	r5,r23
    89a8:	8009883a 	mov	r4,r16
    89ac:	000ca440 	call	ca44 <__mcmp>
    89b0:	10002616 	blt	r2,zero,8a4c <quorem+0x1c8>
    89b4:	9cc00044 	addi	r19,r19,1
    89b8:	a805883a 	mov	r2,r21
    89bc:	000b883a 	mov	r5,zero
    89c0:	11000017 	ldw	r4,0(r2)
    89c4:	89800017 	ldw	r6,0(r17)
    89c8:	10800104 	addi	r2,r2,4
    89cc:	20ffffcc 	andi	r3,r4,65535
    89d0:	194b883a 	add	r5,r3,r5
    89d4:	30ffffcc 	andi	r3,r6,65535
    89d8:	28c7c83a 	sub	r3,r5,r3
    89dc:	300cd43a 	srli	r6,r6,16
    89e0:	2008d43a 	srli	r4,r4,16
    89e4:	180bd43a 	srai	r5,r3,16
    89e8:	18ffffcc 	andi	r3,r3,65535
    89ec:	2189c83a 	sub	r4,r4,r6
    89f0:	2149883a 	add	r4,r4,r5
    89f4:	200c943a 	slli	r6,r4,16
    89f8:	8c400104 	addi	r17,r17,4
    89fc:	200bd43a 	srai	r5,r4,16
    8a00:	30c6b03a 	or	r3,r6,r3
    8a04:	10ffff15 	stw	r3,-4(r2)
    8a08:	a47fed2e 	bgeu	r20,r17,89c0 <__alt_mem_onchip_memory+0xf78089c0>
    8a0c:	9485883a 	add	r2,r18,r18
    8a10:	1085883a 	add	r2,r2,r2
    8a14:	a887883a 	add	r3,r21,r2
    8a18:	18800017 	ldw	r2,0(r3)
    8a1c:	10000b1e 	bne	r2,zero,8a4c <quorem+0x1c8>
    8a20:	18bfff04 	addi	r2,r3,-4
    8a24:	a880082e 	bgeu	r21,r2,8a48 <quorem+0x1c4>
    8a28:	18ffff17 	ldw	r3,-4(r3)
    8a2c:	18000326 	beq	r3,zero,8a3c <quorem+0x1b8>
    8a30:	00000506 	br	8a48 <quorem+0x1c4>
    8a34:	10c00017 	ldw	r3,0(r2)
    8a38:	1800031e 	bne	r3,zero,8a48 <quorem+0x1c4>
    8a3c:	10bfff04 	addi	r2,r2,-4
    8a40:	94bfffc4 	addi	r18,r18,-1
    8a44:	a8bffb36 	bltu	r21,r2,8a34 <__alt_mem_onchip_memory+0xf7808a34>
    8a48:	84800415 	stw	r18,16(r16)
    8a4c:	9805883a 	mov	r2,r19
    8a50:	dfc00817 	ldw	ra,32(sp)
    8a54:	ddc00717 	ldw	r23,28(sp)
    8a58:	dd800617 	ldw	r22,24(sp)
    8a5c:	dd400517 	ldw	r21,20(sp)
    8a60:	dd000417 	ldw	r20,16(sp)
    8a64:	dcc00317 	ldw	r19,12(sp)
    8a68:	dc800217 	ldw	r18,8(sp)
    8a6c:	dc400117 	ldw	r17,4(sp)
    8a70:	dc000017 	ldw	r16,0(sp)
    8a74:	dec00904 	addi	sp,sp,36
    8a78:	f800283a 	ret
    8a7c:	0005883a 	mov	r2,zero
    8a80:	003ff306 	br	8a50 <__alt_mem_onchip_memory+0xf7808a50>

00008a84 <_dtoa_r>:
    8a84:	20801017 	ldw	r2,64(r4)
    8a88:	deffde04 	addi	sp,sp,-136
    8a8c:	df002015 	stw	fp,128(sp)
    8a90:	dcc01b15 	stw	r19,108(sp)
    8a94:	dc801a15 	stw	r18,104(sp)
    8a98:	dc401915 	stw	r17,100(sp)
    8a9c:	dc001815 	stw	r16,96(sp)
    8aa0:	dfc02115 	stw	ra,132(sp)
    8aa4:	ddc01f15 	stw	r23,124(sp)
    8aa8:	dd801e15 	stw	r22,120(sp)
    8aac:	dd401d15 	stw	r21,116(sp)
    8ab0:	dd001c15 	stw	r20,112(sp)
    8ab4:	d9c00315 	stw	r7,12(sp)
    8ab8:	2039883a 	mov	fp,r4
    8abc:	3023883a 	mov	r17,r6
    8ac0:	2825883a 	mov	r18,r5
    8ac4:	dc002417 	ldw	r16,144(sp)
    8ac8:	3027883a 	mov	r19,r6
    8acc:	10000826 	beq	r2,zero,8af0 <_dtoa_r+0x6c>
    8ad0:	21801117 	ldw	r6,68(r4)
    8ad4:	00c00044 	movi	r3,1
    8ad8:	100b883a 	mov	r5,r2
    8adc:	1986983a 	sll	r3,r3,r6
    8ae0:	11800115 	stw	r6,4(r2)
    8ae4:	10c00215 	stw	r3,8(r2)
    8ae8:	000c2240 	call	c224 <_Bfree>
    8aec:	e0001015 	stw	zero,64(fp)
    8af0:	88002e16 	blt	r17,zero,8bac <_dtoa_r+0x128>
    8af4:	80000015 	stw	zero,0(r16)
    8af8:	889ffc2c 	andhi	r2,r17,32752
    8afc:	00dffc34 	movhi	r3,32752
    8b00:	10c01c26 	beq	r2,r3,8b74 <_dtoa_r+0xf0>
    8b04:	000d883a 	mov	r6,zero
    8b08:	000f883a 	mov	r7,zero
    8b0c:	9009883a 	mov	r4,r18
    8b10:	980b883a 	mov	r5,r19
    8b14:	001053c0 	call	1053c <__eqdf2>
    8b18:	10002b1e 	bne	r2,zero,8bc8 <_dtoa_r+0x144>
    8b1c:	d9c02317 	ldw	r7,140(sp)
    8b20:	00800044 	movi	r2,1
    8b24:	38800015 	stw	r2,0(r7)
    8b28:	d8802517 	ldw	r2,148(sp)
    8b2c:	10019e26 	beq	r2,zero,91a8 <_dtoa_r+0x724>
    8b30:	d8c02517 	ldw	r3,148(sp)
    8b34:	00800074 	movhi	r2,1
    8b38:	108da944 	addi	r2,r2,13989
    8b3c:	18800015 	stw	r2,0(r3)
    8b40:	10bfffc4 	addi	r2,r2,-1
    8b44:	dfc02117 	ldw	ra,132(sp)
    8b48:	df002017 	ldw	fp,128(sp)
    8b4c:	ddc01f17 	ldw	r23,124(sp)
    8b50:	dd801e17 	ldw	r22,120(sp)
    8b54:	dd401d17 	ldw	r21,116(sp)
    8b58:	dd001c17 	ldw	r20,112(sp)
    8b5c:	dcc01b17 	ldw	r19,108(sp)
    8b60:	dc801a17 	ldw	r18,104(sp)
    8b64:	dc401917 	ldw	r17,100(sp)
    8b68:	dc001817 	ldw	r16,96(sp)
    8b6c:	dec02204 	addi	sp,sp,136
    8b70:	f800283a 	ret
    8b74:	d8c02317 	ldw	r3,140(sp)
    8b78:	0089c3c4 	movi	r2,9999
    8b7c:	18800015 	stw	r2,0(r3)
    8b80:	90017726 	beq	r18,zero,9160 <_dtoa_r+0x6dc>
    8b84:	00800074 	movhi	r2,1
    8b88:	108db504 	addi	r2,r2,14036
    8b8c:	d9002517 	ldw	r4,148(sp)
    8b90:	203fec26 	beq	r4,zero,8b44 <__alt_mem_onchip_memory+0xf7808b44>
    8b94:	10c000c7 	ldb	r3,3(r2)
    8b98:	1801781e 	bne	r3,zero,917c <_dtoa_r+0x6f8>
    8b9c:	10c000c4 	addi	r3,r2,3
    8ba0:	d9802517 	ldw	r6,148(sp)
    8ba4:	30c00015 	stw	r3,0(r6)
    8ba8:	003fe606 	br	8b44 <__alt_mem_onchip_memory+0xf7808b44>
    8bac:	04e00034 	movhi	r19,32768
    8bb0:	9cffffc4 	addi	r19,r19,-1
    8bb4:	00800044 	movi	r2,1
    8bb8:	8ce6703a 	and	r19,r17,r19
    8bbc:	80800015 	stw	r2,0(r16)
    8bc0:	9823883a 	mov	r17,r19
    8bc4:	003fcc06 	br	8af8 <__alt_mem_onchip_memory+0xf7808af8>
    8bc8:	d8800204 	addi	r2,sp,8
    8bcc:	d8800015 	stw	r2,0(sp)
    8bd0:	d9c00104 	addi	r7,sp,4
    8bd4:	900b883a 	mov	r5,r18
    8bd8:	980d883a 	mov	r6,r19
    8bdc:	e009883a 	mov	r4,fp
    8be0:	8820d53a 	srli	r16,r17,20
    8be4:	000ce100 	call	ce10 <__d2b>
    8be8:	d8800915 	stw	r2,36(sp)
    8bec:	8001651e 	bne	r16,zero,9184 <_dtoa_r+0x700>
    8bf0:	dd800217 	ldw	r22,8(sp)
    8bf4:	dc000117 	ldw	r16,4(sp)
    8bf8:	00800804 	movi	r2,32
    8bfc:	b421883a 	add	r16,r22,r16
    8c00:	80c10c84 	addi	r3,r16,1074
    8c04:	10c2d10e 	bge	r2,r3,974c <_dtoa_r+0xcc8>
    8c08:	00801004 	movi	r2,64
    8c0c:	81010484 	addi	r4,r16,1042
    8c10:	10c7c83a 	sub	r3,r2,r3
    8c14:	9108d83a 	srl	r4,r18,r4
    8c18:	88e2983a 	sll	r17,r17,r3
    8c1c:	2448b03a 	or	r4,r4,r17
    8c20:	00105c40 	call	105c4 <__floatunsidf>
    8c24:	017f8434 	movhi	r5,65040
    8c28:	01800044 	movi	r6,1
    8c2c:	1009883a 	mov	r4,r2
    8c30:	194b883a 	add	r5,r3,r5
    8c34:	843fffc4 	addi	r16,r16,-1
    8c38:	d9801115 	stw	r6,68(sp)
    8c3c:	000d883a 	mov	r6,zero
    8c40:	01cffe34 	movhi	r7,16376
    8c44:	00052040 	call	5204 <__subdf3>
    8c48:	0198dbf4 	movhi	r6,25455
    8c4c:	01cff4f4 	movhi	r7,16339
    8c50:	3190d844 	addi	r6,r6,17249
    8c54:	39e1e9c4 	addi	r7,r7,-30809
    8c58:	1009883a 	mov	r4,r2
    8c5c:	180b883a 	mov	r5,r3
    8c60:	0004aec0 	call	4aec <__muldf3>
    8c64:	01a2d874 	movhi	r6,35681
    8c68:	01cff1f4 	movhi	r7,16327
    8c6c:	31b22cc4 	addi	r6,r6,-14157
    8c70:	39e28a04 	addi	r7,r7,-30168
    8c74:	180b883a 	mov	r5,r3
    8c78:	1009883a 	mov	r4,r2
    8c7c:	00037880 	call	3788 <__adddf3>
    8c80:	8009883a 	mov	r4,r16
    8c84:	1029883a 	mov	r20,r2
    8c88:	1823883a 	mov	r17,r3
    8c8c:	0005b800 	call	5b80 <__floatsidf>
    8c90:	019427f4 	movhi	r6,20639
    8c94:	01cff4f4 	movhi	r7,16339
    8c98:	319e7ec4 	addi	r6,r6,31227
    8c9c:	39d104c4 	addi	r7,r7,17427
    8ca0:	1009883a 	mov	r4,r2
    8ca4:	180b883a 	mov	r5,r3
    8ca8:	0004aec0 	call	4aec <__muldf3>
    8cac:	100d883a 	mov	r6,r2
    8cb0:	180f883a 	mov	r7,r3
    8cb4:	a009883a 	mov	r4,r20
    8cb8:	880b883a 	mov	r5,r17
    8cbc:	00037880 	call	3788 <__adddf3>
    8cc0:	1009883a 	mov	r4,r2
    8cc4:	180b883a 	mov	r5,r3
    8cc8:	1029883a 	mov	r20,r2
    8ccc:	1823883a 	mov	r17,r3
    8cd0:	0005b000 	call	5b00 <__fixdfsi>
    8cd4:	000d883a 	mov	r6,zero
    8cd8:	000f883a 	mov	r7,zero
    8cdc:	a009883a 	mov	r4,r20
    8ce0:	880b883a 	mov	r5,r17
    8ce4:	d8800515 	stw	r2,20(sp)
    8ce8:	00049f80 	call	49f8 <__ledf2>
    8cec:	10028716 	blt	r2,zero,970c <_dtoa_r+0xc88>
    8cf0:	d8c00517 	ldw	r3,20(sp)
    8cf4:	00800584 	movi	r2,22
    8cf8:	10c27536 	bltu	r2,r3,96d0 <_dtoa_r+0xc4c>
    8cfc:	180490fa 	slli	r2,r3,3
    8d00:	00c00074 	movhi	r3,1
    8d04:	18cdd004 	addi	r3,r3,14144
    8d08:	1885883a 	add	r2,r3,r2
    8d0c:	11000017 	ldw	r4,0(r2)
    8d10:	11400117 	ldw	r5,4(r2)
    8d14:	900d883a 	mov	r6,r18
    8d18:	980f883a 	mov	r7,r19
    8d1c:	000491c0 	call	491c <__gedf2>
    8d20:	00828d0e 	bge	zero,r2,9758 <_dtoa_r+0xcd4>
    8d24:	d9000517 	ldw	r4,20(sp)
    8d28:	d8000e15 	stw	zero,56(sp)
    8d2c:	213fffc4 	addi	r4,r4,-1
    8d30:	d9000515 	stw	r4,20(sp)
    8d34:	b42dc83a 	sub	r22,r22,r16
    8d38:	b5bfffc4 	addi	r22,r22,-1
    8d3c:	b0026f16 	blt	r22,zero,96fc <_dtoa_r+0xc78>
    8d40:	d8000815 	stw	zero,32(sp)
    8d44:	d9c00517 	ldw	r7,20(sp)
    8d48:	38026416 	blt	r7,zero,96dc <_dtoa_r+0xc58>
    8d4c:	b1ed883a 	add	r22,r22,r7
    8d50:	d9c00d15 	stw	r7,52(sp)
    8d54:	d8000a15 	stw	zero,40(sp)
    8d58:	d9800317 	ldw	r6,12(sp)
    8d5c:	00800244 	movi	r2,9
    8d60:	11811436 	bltu	r2,r6,91b4 <_dtoa_r+0x730>
    8d64:	00800144 	movi	r2,5
    8d68:	1184e10e 	bge	r2,r6,a0f0 <_dtoa_r+0x166c>
    8d6c:	31bfff04 	addi	r6,r6,-4
    8d70:	d9800315 	stw	r6,12(sp)
    8d74:	0023883a 	mov	r17,zero
    8d78:	d9800317 	ldw	r6,12(sp)
    8d7c:	008000c4 	movi	r2,3
    8d80:	30836726 	beq	r6,r2,9b20 <_dtoa_r+0x109c>
    8d84:	1183410e 	bge	r2,r6,9a8c <_dtoa_r+0x1008>
    8d88:	d9c00317 	ldw	r7,12(sp)
    8d8c:	00800104 	movi	r2,4
    8d90:	38827c26 	beq	r7,r2,9784 <_dtoa_r+0xd00>
    8d94:	00800144 	movi	r2,5
    8d98:	3884c41e 	bne	r7,r2,a0ac <_dtoa_r+0x1628>
    8d9c:	00800044 	movi	r2,1
    8da0:	d8800b15 	stw	r2,44(sp)
    8da4:	d8c00517 	ldw	r3,20(sp)
    8da8:	d9002217 	ldw	r4,136(sp)
    8dac:	1907883a 	add	r3,r3,r4
    8db0:	19800044 	addi	r6,r3,1
    8db4:	d8c00c15 	stw	r3,48(sp)
    8db8:	d9800615 	stw	r6,24(sp)
    8dbc:	0183a40e 	bge	zero,r6,9c50 <_dtoa_r+0x11cc>
    8dc0:	d9800617 	ldw	r6,24(sp)
    8dc4:	3021883a 	mov	r16,r6
    8dc8:	e0001115 	stw	zero,68(fp)
    8dcc:	008005c4 	movi	r2,23
    8dd0:	1184c92e 	bgeu	r2,r6,a0f8 <_dtoa_r+0x1674>
    8dd4:	00c00044 	movi	r3,1
    8dd8:	00800104 	movi	r2,4
    8ddc:	1085883a 	add	r2,r2,r2
    8de0:	11000504 	addi	r4,r2,20
    8de4:	180b883a 	mov	r5,r3
    8de8:	18c00044 	addi	r3,r3,1
    8dec:	313ffb2e 	bgeu	r6,r4,8ddc <__alt_mem_onchip_memory+0xf7808ddc>
    8df0:	e1401115 	stw	r5,68(fp)
    8df4:	e009883a 	mov	r4,fp
    8df8:	000c17c0 	call	c17c <_Balloc>
    8dfc:	d8800715 	stw	r2,28(sp)
    8e00:	e0801015 	stw	r2,64(fp)
    8e04:	00800384 	movi	r2,14
    8e08:	1400f736 	bltu	r2,r16,91e8 <_dtoa_r+0x764>
    8e0c:	8800f626 	beq	r17,zero,91e8 <_dtoa_r+0x764>
    8e10:	d9c00517 	ldw	r7,20(sp)
    8e14:	01c39a0e 	bge	zero,r7,9c80 <_dtoa_r+0x11fc>
    8e18:	388003cc 	andi	r2,r7,15
    8e1c:	100490fa 	slli	r2,r2,3
    8e20:	382bd13a 	srai	r21,r7,4
    8e24:	00c00074 	movhi	r3,1
    8e28:	18cdd004 	addi	r3,r3,14144
    8e2c:	1885883a 	add	r2,r3,r2
    8e30:	a8c0040c 	andi	r3,r21,16
    8e34:	12400017 	ldw	r9,0(r2)
    8e38:	12000117 	ldw	r8,4(r2)
    8e3c:	18037926 	beq	r3,zero,9c24 <_dtoa_r+0x11a0>
    8e40:	00800074 	movhi	r2,1
    8e44:	108dc604 	addi	r2,r2,14104
    8e48:	11800817 	ldw	r6,32(r2)
    8e4c:	11c00917 	ldw	r7,36(r2)
    8e50:	9009883a 	mov	r4,r18
    8e54:	980b883a 	mov	r5,r19
    8e58:	da001715 	stw	r8,92(sp)
    8e5c:	da401615 	stw	r9,88(sp)
    8e60:	00040340 	call	4034 <__divdf3>
    8e64:	da001717 	ldw	r8,92(sp)
    8e68:	da401617 	ldw	r9,88(sp)
    8e6c:	ad4003cc 	andi	r21,r21,15
    8e70:	040000c4 	movi	r16,3
    8e74:	1023883a 	mov	r17,r2
    8e78:	1829883a 	mov	r20,r3
    8e7c:	a8001126 	beq	r21,zero,8ec4 <_dtoa_r+0x440>
    8e80:	05c00074 	movhi	r23,1
    8e84:	bdcdc604 	addi	r23,r23,14104
    8e88:	4805883a 	mov	r2,r9
    8e8c:	4007883a 	mov	r3,r8
    8e90:	a980004c 	andi	r6,r21,1
    8e94:	1009883a 	mov	r4,r2
    8e98:	a82bd07a 	srai	r21,r21,1
    8e9c:	180b883a 	mov	r5,r3
    8ea0:	30000426 	beq	r6,zero,8eb4 <_dtoa_r+0x430>
    8ea4:	b9800017 	ldw	r6,0(r23)
    8ea8:	b9c00117 	ldw	r7,4(r23)
    8eac:	84000044 	addi	r16,r16,1
    8eb0:	0004aec0 	call	4aec <__muldf3>
    8eb4:	bdc00204 	addi	r23,r23,8
    8eb8:	a83ff51e 	bne	r21,zero,8e90 <__alt_mem_onchip_memory+0xf7808e90>
    8ebc:	1013883a 	mov	r9,r2
    8ec0:	1811883a 	mov	r8,r3
    8ec4:	480d883a 	mov	r6,r9
    8ec8:	400f883a 	mov	r7,r8
    8ecc:	8809883a 	mov	r4,r17
    8ed0:	a00b883a 	mov	r5,r20
    8ed4:	00040340 	call	4034 <__divdf3>
    8ed8:	d8800f15 	stw	r2,60(sp)
    8edc:	d8c01015 	stw	r3,64(sp)
    8ee0:	d8c00e17 	ldw	r3,56(sp)
    8ee4:	18000626 	beq	r3,zero,8f00 <_dtoa_r+0x47c>
    8ee8:	d9000f17 	ldw	r4,60(sp)
    8eec:	d9401017 	ldw	r5,64(sp)
    8ef0:	000d883a 	mov	r6,zero
    8ef4:	01cffc34 	movhi	r7,16368
    8ef8:	00049f80 	call	49f8 <__ledf2>
    8efc:	10040b16 	blt	r2,zero,9f2c <_dtoa_r+0x14a8>
    8f00:	8009883a 	mov	r4,r16
    8f04:	0005b800 	call	5b80 <__floatsidf>
    8f08:	d9800f17 	ldw	r6,60(sp)
    8f0c:	d9c01017 	ldw	r7,64(sp)
    8f10:	1009883a 	mov	r4,r2
    8f14:	180b883a 	mov	r5,r3
    8f18:	0004aec0 	call	4aec <__muldf3>
    8f1c:	000d883a 	mov	r6,zero
    8f20:	01d00734 	movhi	r7,16412
    8f24:	1009883a 	mov	r4,r2
    8f28:	180b883a 	mov	r5,r3
    8f2c:	00037880 	call	3788 <__adddf3>
    8f30:	1021883a 	mov	r16,r2
    8f34:	d8800617 	ldw	r2,24(sp)
    8f38:	047f3034 	movhi	r17,64704
    8f3c:	1c63883a 	add	r17,r3,r17
    8f40:	10031826 	beq	r2,zero,9ba4 <_dtoa_r+0x1120>
    8f44:	d8c00517 	ldw	r3,20(sp)
    8f48:	db000617 	ldw	r12,24(sp)
    8f4c:	d8c01315 	stw	r3,76(sp)
    8f50:	d9000b17 	ldw	r4,44(sp)
    8f54:	20038f26 	beq	r4,zero,9d94 <_dtoa_r+0x1310>
    8f58:	60bfffc4 	addi	r2,r12,-1
    8f5c:	100490fa 	slli	r2,r2,3
    8f60:	00c00074 	movhi	r3,1
    8f64:	18cdd004 	addi	r3,r3,14144
    8f68:	1885883a 	add	r2,r3,r2
    8f6c:	11800017 	ldw	r6,0(r2)
    8f70:	11c00117 	ldw	r7,4(r2)
    8f74:	d8800717 	ldw	r2,28(sp)
    8f78:	0009883a 	mov	r4,zero
    8f7c:	014ff834 	movhi	r5,16352
    8f80:	db001615 	stw	r12,88(sp)
    8f84:	15c00044 	addi	r23,r2,1
    8f88:	00040340 	call	4034 <__divdf3>
    8f8c:	800d883a 	mov	r6,r16
    8f90:	880f883a 	mov	r7,r17
    8f94:	1009883a 	mov	r4,r2
    8f98:	180b883a 	mov	r5,r3
    8f9c:	00052040 	call	5204 <__subdf3>
    8fa0:	d9401017 	ldw	r5,64(sp)
    8fa4:	d9000f17 	ldw	r4,60(sp)
    8fa8:	102b883a 	mov	r21,r2
    8fac:	d8c01215 	stw	r3,72(sp)
    8fb0:	0005b000 	call	5b00 <__fixdfsi>
    8fb4:	1009883a 	mov	r4,r2
    8fb8:	1029883a 	mov	r20,r2
    8fbc:	0005b800 	call	5b80 <__floatsidf>
    8fc0:	d9000f17 	ldw	r4,60(sp)
    8fc4:	d9401017 	ldw	r5,64(sp)
    8fc8:	100d883a 	mov	r6,r2
    8fcc:	180f883a 	mov	r7,r3
    8fd0:	00052040 	call	5204 <__subdf3>
    8fd4:	1823883a 	mov	r17,r3
    8fd8:	d8c00717 	ldw	r3,28(sp)
    8fdc:	d9401217 	ldw	r5,72(sp)
    8fe0:	a2000c04 	addi	r8,r20,48
    8fe4:	1021883a 	mov	r16,r2
    8fe8:	1a000005 	stb	r8,0(r3)
    8fec:	800d883a 	mov	r6,r16
    8ff0:	880f883a 	mov	r7,r17
    8ff4:	a809883a 	mov	r4,r21
    8ff8:	4029883a 	mov	r20,r8
    8ffc:	000491c0 	call	491c <__gedf2>
    9000:	00841d16 	blt	zero,r2,a078 <_dtoa_r+0x15f4>
    9004:	800d883a 	mov	r6,r16
    9008:	880f883a 	mov	r7,r17
    900c:	0009883a 	mov	r4,zero
    9010:	014ffc34 	movhi	r5,16368
    9014:	00052040 	call	5204 <__subdf3>
    9018:	d9401217 	ldw	r5,72(sp)
    901c:	100d883a 	mov	r6,r2
    9020:	180f883a 	mov	r7,r3
    9024:	a809883a 	mov	r4,r21
    9028:	000491c0 	call	491c <__gedf2>
    902c:	db001617 	ldw	r12,88(sp)
    9030:	00840e16 	blt	zero,r2,a06c <_dtoa_r+0x15e8>
    9034:	00800044 	movi	r2,1
    9038:	13006b0e 	bge	r2,r12,91e8 <_dtoa_r+0x764>
    903c:	d9000717 	ldw	r4,28(sp)
    9040:	dd800f15 	stw	r22,60(sp)
    9044:	dcc01015 	stw	r19,64(sp)
    9048:	2319883a 	add	r12,r4,r12
    904c:	dcc01217 	ldw	r19,72(sp)
    9050:	602d883a 	mov	r22,r12
    9054:	dc801215 	stw	r18,72(sp)
    9058:	b825883a 	mov	r18,r23
    905c:	00000906 	br	9084 <_dtoa_r+0x600>
    9060:	00052040 	call	5204 <__subdf3>
    9064:	a80d883a 	mov	r6,r21
    9068:	980f883a 	mov	r7,r19
    906c:	1009883a 	mov	r4,r2
    9070:	180b883a 	mov	r5,r3
    9074:	00049f80 	call	49f8 <__ledf2>
    9078:	1003e816 	blt	r2,zero,a01c <_dtoa_r+0x1598>
    907c:	b825883a 	mov	r18,r23
    9080:	bd83e926 	beq	r23,r22,a028 <_dtoa_r+0x15a4>
    9084:	a809883a 	mov	r4,r21
    9088:	980b883a 	mov	r5,r19
    908c:	000d883a 	mov	r6,zero
    9090:	01d00934 	movhi	r7,16420
    9094:	0004aec0 	call	4aec <__muldf3>
    9098:	000d883a 	mov	r6,zero
    909c:	01d00934 	movhi	r7,16420
    90a0:	8009883a 	mov	r4,r16
    90a4:	880b883a 	mov	r5,r17
    90a8:	102b883a 	mov	r21,r2
    90ac:	1827883a 	mov	r19,r3
    90b0:	0004aec0 	call	4aec <__muldf3>
    90b4:	180b883a 	mov	r5,r3
    90b8:	1009883a 	mov	r4,r2
    90bc:	1821883a 	mov	r16,r3
    90c0:	1023883a 	mov	r17,r2
    90c4:	0005b000 	call	5b00 <__fixdfsi>
    90c8:	1009883a 	mov	r4,r2
    90cc:	1029883a 	mov	r20,r2
    90d0:	0005b800 	call	5b80 <__floatsidf>
    90d4:	8809883a 	mov	r4,r17
    90d8:	800b883a 	mov	r5,r16
    90dc:	100d883a 	mov	r6,r2
    90e0:	180f883a 	mov	r7,r3
    90e4:	00052040 	call	5204 <__subdf3>
    90e8:	a5000c04 	addi	r20,r20,48
    90ec:	a80d883a 	mov	r6,r21
    90f0:	980f883a 	mov	r7,r19
    90f4:	1009883a 	mov	r4,r2
    90f8:	180b883a 	mov	r5,r3
    90fc:	95000005 	stb	r20,0(r18)
    9100:	1021883a 	mov	r16,r2
    9104:	1823883a 	mov	r17,r3
    9108:	00049f80 	call	49f8 <__ledf2>
    910c:	bdc00044 	addi	r23,r23,1
    9110:	800d883a 	mov	r6,r16
    9114:	880f883a 	mov	r7,r17
    9118:	0009883a 	mov	r4,zero
    911c:	014ffc34 	movhi	r5,16368
    9120:	103fcf0e 	bge	r2,zero,9060 <__alt_mem_onchip_memory+0xf7809060>
    9124:	d8c01317 	ldw	r3,76(sp)
    9128:	d8c00515 	stw	r3,20(sp)
    912c:	d9400917 	ldw	r5,36(sp)
    9130:	e009883a 	mov	r4,fp
    9134:	000c2240 	call	c224 <_Bfree>
    9138:	d9000517 	ldw	r4,20(sp)
    913c:	d9802317 	ldw	r6,140(sp)
    9140:	d9c02517 	ldw	r7,148(sp)
    9144:	b8000005 	stb	zero,0(r23)
    9148:	20800044 	addi	r2,r4,1
    914c:	30800015 	stw	r2,0(r6)
    9150:	3802aa26 	beq	r7,zero,9bfc <_dtoa_r+0x1178>
    9154:	3dc00015 	stw	r23,0(r7)
    9158:	d8800717 	ldw	r2,28(sp)
    915c:	003e7906 	br	8b44 <__alt_mem_onchip_memory+0xf7808b44>
    9160:	00800434 	movhi	r2,16
    9164:	10bfffc4 	addi	r2,r2,-1
    9168:	88a2703a 	and	r17,r17,r2
    916c:	883e851e 	bne	r17,zero,8b84 <__alt_mem_onchip_memory+0xf7808b84>
    9170:	00800074 	movhi	r2,1
    9174:	108db204 	addi	r2,r2,14024
    9178:	003e8406 	br	8b8c <__alt_mem_onchip_memory+0xf7808b8c>
    917c:	10c00204 	addi	r3,r2,8
    9180:	003e8706 	br	8ba0 <__alt_mem_onchip_memory+0xf7808ba0>
    9184:	01400434 	movhi	r5,16
    9188:	297fffc4 	addi	r5,r5,-1
    918c:	994a703a 	and	r5,r19,r5
    9190:	9009883a 	mov	r4,r18
    9194:	843f0044 	addi	r16,r16,-1023
    9198:	294ffc34 	orhi	r5,r5,16368
    919c:	dd800217 	ldw	r22,8(sp)
    91a0:	d8001115 	stw	zero,68(sp)
    91a4:	003ea506 	br	8c3c <__alt_mem_onchip_memory+0xf7808c3c>
    91a8:	00800074 	movhi	r2,1
    91ac:	108da904 	addi	r2,r2,13988
    91b0:	003e6406 	br	8b44 <__alt_mem_onchip_memory+0xf7808b44>
    91b4:	e0001115 	stw	zero,68(fp)
    91b8:	000b883a 	mov	r5,zero
    91bc:	e009883a 	mov	r4,fp
    91c0:	000c17c0 	call	c17c <_Balloc>
    91c4:	01bfffc4 	movi	r6,-1
    91c8:	01c00044 	movi	r7,1
    91cc:	d8800715 	stw	r2,28(sp)
    91d0:	d9800c15 	stw	r6,48(sp)
    91d4:	e0801015 	stw	r2,64(fp)
    91d8:	d8000315 	stw	zero,12(sp)
    91dc:	d9c00b15 	stw	r7,44(sp)
    91e0:	d9800615 	stw	r6,24(sp)
    91e4:	d8002215 	stw	zero,136(sp)
    91e8:	d8800117 	ldw	r2,4(sp)
    91ec:	10008916 	blt	r2,zero,9414 <_dtoa_r+0x990>
    91f0:	d9000517 	ldw	r4,20(sp)
    91f4:	00c00384 	movi	r3,14
    91f8:	19008616 	blt	r3,r4,9414 <_dtoa_r+0x990>
    91fc:	200490fa 	slli	r2,r4,3
    9200:	00c00074 	movhi	r3,1
    9204:	d9802217 	ldw	r6,136(sp)
    9208:	18cdd004 	addi	r3,r3,14144
    920c:	1885883a 	add	r2,r3,r2
    9210:	14000017 	ldw	r16,0(r2)
    9214:	14400117 	ldw	r17,4(r2)
    9218:	30016316 	blt	r6,zero,97a8 <_dtoa_r+0xd24>
    921c:	800d883a 	mov	r6,r16
    9220:	880f883a 	mov	r7,r17
    9224:	9009883a 	mov	r4,r18
    9228:	980b883a 	mov	r5,r19
    922c:	00040340 	call	4034 <__divdf3>
    9230:	180b883a 	mov	r5,r3
    9234:	1009883a 	mov	r4,r2
    9238:	0005b000 	call	5b00 <__fixdfsi>
    923c:	1009883a 	mov	r4,r2
    9240:	102b883a 	mov	r21,r2
    9244:	0005b800 	call	5b80 <__floatsidf>
    9248:	800d883a 	mov	r6,r16
    924c:	880f883a 	mov	r7,r17
    9250:	1009883a 	mov	r4,r2
    9254:	180b883a 	mov	r5,r3
    9258:	0004aec0 	call	4aec <__muldf3>
    925c:	100d883a 	mov	r6,r2
    9260:	180f883a 	mov	r7,r3
    9264:	9009883a 	mov	r4,r18
    9268:	980b883a 	mov	r5,r19
    926c:	00052040 	call	5204 <__subdf3>
    9270:	d9c00717 	ldw	r7,28(sp)
    9274:	1009883a 	mov	r4,r2
    9278:	a8800c04 	addi	r2,r21,48
    927c:	38800005 	stb	r2,0(r7)
    9280:	3dc00044 	addi	r23,r7,1
    9284:	d9c00617 	ldw	r7,24(sp)
    9288:	01800044 	movi	r6,1
    928c:	180b883a 	mov	r5,r3
    9290:	2005883a 	mov	r2,r4
    9294:	39803826 	beq	r7,r6,9378 <_dtoa_r+0x8f4>
    9298:	000d883a 	mov	r6,zero
    929c:	01d00934 	movhi	r7,16420
    92a0:	0004aec0 	call	4aec <__muldf3>
    92a4:	000d883a 	mov	r6,zero
    92a8:	000f883a 	mov	r7,zero
    92ac:	1009883a 	mov	r4,r2
    92b0:	180b883a 	mov	r5,r3
    92b4:	1025883a 	mov	r18,r2
    92b8:	1827883a 	mov	r19,r3
    92bc:	001053c0 	call	1053c <__eqdf2>
    92c0:	103f9a26 	beq	r2,zero,912c <__alt_mem_onchip_memory+0xf780912c>
    92c4:	d9c00617 	ldw	r7,24(sp)
    92c8:	d8c00717 	ldw	r3,28(sp)
    92cc:	b829883a 	mov	r20,r23
    92d0:	38bfffc4 	addi	r2,r7,-1
    92d4:	18ad883a 	add	r22,r3,r2
    92d8:	00000a06 	br	9304 <_dtoa_r+0x880>
    92dc:	0004aec0 	call	4aec <__muldf3>
    92e0:	000d883a 	mov	r6,zero
    92e4:	000f883a 	mov	r7,zero
    92e8:	1009883a 	mov	r4,r2
    92ec:	180b883a 	mov	r5,r3
    92f0:	1025883a 	mov	r18,r2
    92f4:	1827883a 	mov	r19,r3
    92f8:	b829883a 	mov	r20,r23
    92fc:	001053c0 	call	1053c <__eqdf2>
    9300:	103f8a26 	beq	r2,zero,912c <__alt_mem_onchip_memory+0xf780912c>
    9304:	800d883a 	mov	r6,r16
    9308:	880f883a 	mov	r7,r17
    930c:	9009883a 	mov	r4,r18
    9310:	980b883a 	mov	r5,r19
    9314:	00040340 	call	4034 <__divdf3>
    9318:	180b883a 	mov	r5,r3
    931c:	1009883a 	mov	r4,r2
    9320:	0005b000 	call	5b00 <__fixdfsi>
    9324:	1009883a 	mov	r4,r2
    9328:	102b883a 	mov	r21,r2
    932c:	0005b800 	call	5b80 <__floatsidf>
    9330:	800d883a 	mov	r6,r16
    9334:	880f883a 	mov	r7,r17
    9338:	1009883a 	mov	r4,r2
    933c:	180b883a 	mov	r5,r3
    9340:	0004aec0 	call	4aec <__muldf3>
    9344:	100d883a 	mov	r6,r2
    9348:	180f883a 	mov	r7,r3
    934c:	9009883a 	mov	r4,r18
    9350:	980b883a 	mov	r5,r19
    9354:	00052040 	call	5204 <__subdf3>
    9358:	aa000c04 	addi	r8,r21,48
    935c:	a2000005 	stb	r8,0(r20)
    9360:	000d883a 	mov	r6,zero
    9364:	01d00934 	movhi	r7,16420
    9368:	1009883a 	mov	r4,r2
    936c:	180b883a 	mov	r5,r3
    9370:	a5c00044 	addi	r23,r20,1
    9374:	b53fd91e 	bne	r22,r20,92dc <__alt_mem_onchip_memory+0xf78092dc>
    9378:	100d883a 	mov	r6,r2
    937c:	180f883a 	mov	r7,r3
    9380:	1009883a 	mov	r4,r2
    9384:	180b883a 	mov	r5,r3
    9388:	00037880 	call	3788 <__adddf3>
    938c:	100d883a 	mov	r6,r2
    9390:	180f883a 	mov	r7,r3
    9394:	8009883a 	mov	r4,r16
    9398:	880b883a 	mov	r5,r17
    939c:	1027883a 	mov	r19,r2
    93a0:	1825883a 	mov	r18,r3
    93a4:	00049f80 	call	49f8 <__ledf2>
    93a8:	10000816 	blt	r2,zero,93cc <_dtoa_r+0x948>
    93ac:	980d883a 	mov	r6,r19
    93b0:	900f883a 	mov	r7,r18
    93b4:	8009883a 	mov	r4,r16
    93b8:	880b883a 	mov	r5,r17
    93bc:	001053c0 	call	1053c <__eqdf2>
    93c0:	103f5a1e 	bne	r2,zero,912c <__alt_mem_onchip_memory+0xf780912c>
    93c4:	ad40004c 	andi	r21,r21,1
    93c8:	a83f5826 	beq	r21,zero,912c <__alt_mem_onchip_memory+0xf780912c>
    93cc:	bd3fffc3 	ldbu	r20,-1(r23)
    93d0:	b8bfffc4 	addi	r2,r23,-1
    93d4:	1007883a 	mov	r3,r2
    93d8:	01400e44 	movi	r5,57
    93dc:	d9800717 	ldw	r6,28(sp)
    93e0:	00000506 	br	93f8 <_dtoa_r+0x974>
    93e4:	18ffffc4 	addi	r3,r3,-1
    93e8:	11824726 	beq	r2,r6,9d08 <_dtoa_r+0x1284>
    93ec:	1d000003 	ldbu	r20,0(r3)
    93f0:	102f883a 	mov	r23,r2
    93f4:	10bfffc4 	addi	r2,r2,-1
    93f8:	a1003fcc 	andi	r4,r20,255
    93fc:	2100201c 	xori	r4,r4,128
    9400:	213fe004 	addi	r4,r4,-128
    9404:	217ff726 	beq	r4,r5,93e4 <__alt_mem_onchip_memory+0xf78093e4>
    9408:	a2000044 	addi	r8,r20,1
    940c:	12000005 	stb	r8,0(r2)
    9410:	003f4606 	br	912c <__alt_mem_onchip_memory+0xf780912c>
    9414:	d9000b17 	ldw	r4,44(sp)
    9418:	2000c826 	beq	r4,zero,973c <_dtoa_r+0xcb8>
    941c:	d9800317 	ldw	r6,12(sp)
    9420:	00c00044 	movi	r3,1
    9424:	1980f90e 	bge	r3,r6,980c <_dtoa_r+0xd88>
    9428:	d8800617 	ldw	r2,24(sp)
    942c:	d8c00a17 	ldw	r3,40(sp)
    9430:	157fffc4 	addi	r21,r2,-1
    9434:	1d41f316 	blt	r3,r21,9c04 <_dtoa_r+0x1180>
    9438:	1d6bc83a 	sub	r21,r3,r21
    943c:	d9c00617 	ldw	r7,24(sp)
    9440:	3802aa16 	blt	r7,zero,9eec <_dtoa_r+0x1468>
    9444:	dd000817 	ldw	r20,32(sp)
    9448:	d8800617 	ldw	r2,24(sp)
    944c:	d8c00817 	ldw	r3,32(sp)
    9450:	01400044 	movi	r5,1
    9454:	e009883a 	mov	r4,fp
    9458:	1887883a 	add	r3,r3,r2
    945c:	d8c00815 	stw	r3,32(sp)
    9460:	b0ad883a 	add	r22,r22,r2
    9464:	000c5880 	call	c588 <__i2b>
    9468:	1023883a 	mov	r17,r2
    946c:	a0000826 	beq	r20,zero,9490 <_dtoa_r+0xa0c>
    9470:	0580070e 	bge	zero,r22,9490 <_dtoa_r+0xa0c>
    9474:	a005883a 	mov	r2,r20
    9478:	b500b916 	blt	r22,r20,9760 <_dtoa_r+0xcdc>
    947c:	d9000817 	ldw	r4,32(sp)
    9480:	a0a9c83a 	sub	r20,r20,r2
    9484:	b0adc83a 	sub	r22,r22,r2
    9488:	2089c83a 	sub	r4,r4,r2
    948c:	d9000815 	stw	r4,32(sp)
    9490:	d9800a17 	ldw	r6,40(sp)
    9494:	0181810e 	bge	zero,r6,9a9c <_dtoa_r+0x1018>
    9498:	d9c00b17 	ldw	r7,44(sp)
    949c:	3800b326 	beq	r7,zero,976c <_dtoa_r+0xce8>
    94a0:	a800b226 	beq	r21,zero,976c <_dtoa_r+0xce8>
    94a4:	880b883a 	mov	r5,r17
    94a8:	a80d883a 	mov	r6,r21
    94ac:	e009883a 	mov	r4,fp
    94b0:	000c7bc0 	call	c7bc <__pow5mult>
    94b4:	d9800917 	ldw	r6,36(sp)
    94b8:	100b883a 	mov	r5,r2
    94bc:	e009883a 	mov	r4,fp
    94c0:	1023883a 	mov	r17,r2
    94c4:	000c5c40 	call	c5c4 <__multiply>
    94c8:	1021883a 	mov	r16,r2
    94cc:	d8800a17 	ldw	r2,40(sp)
    94d0:	d9400917 	ldw	r5,36(sp)
    94d4:	e009883a 	mov	r4,fp
    94d8:	1545c83a 	sub	r2,r2,r21
    94dc:	d8800a15 	stw	r2,40(sp)
    94e0:	000c2240 	call	c224 <_Bfree>
    94e4:	d8c00a17 	ldw	r3,40(sp)
    94e8:	18009f1e 	bne	r3,zero,9768 <_dtoa_r+0xce4>
    94ec:	05c00044 	movi	r23,1
    94f0:	e009883a 	mov	r4,fp
    94f4:	b80b883a 	mov	r5,r23
    94f8:	000c5880 	call	c588 <__i2b>
    94fc:	d9000d17 	ldw	r4,52(sp)
    9500:	102b883a 	mov	r21,r2
    9504:	2000ce26 	beq	r4,zero,9840 <_dtoa_r+0xdbc>
    9508:	200d883a 	mov	r6,r4
    950c:	100b883a 	mov	r5,r2
    9510:	e009883a 	mov	r4,fp
    9514:	000c7bc0 	call	c7bc <__pow5mult>
    9518:	d9800317 	ldw	r6,12(sp)
    951c:	102b883a 	mov	r21,r2
    9520:	b981810e 	bge	r23,r6,9b28 <_dtoa_r+0x10a4>
    9524:	0027883a 	mov	r19,zero
    9528:	a8800417 	ldw	r2,16(r21)
    952c:	05c00804 	movi	r23,32
    9530:	10800104 	addi	r2,r2,4
    9534:	1085883a 	add	r2,r2,r2
    9538:	1085883a 	add	r2,r2,r2
    953c:	a885883a 	add	r2,r21,r2
    9540:	11000017 	ldw	r4,0(r2)
    9544:	000c4700 	call	c470 <__hi0bits>
    9548:	b885c83a 	sub	r2,r23,r2
    954c:	1585883a 	add	r2,r2,r22
    9550:	108007cc 	andi	r2,r2,31
    9554:	1000b326 	beq	r2,zero,9824 <_dtoa_r+0xda0>
    9558:	00c00804 	movi	r3,32
    955c:	1887c83a 	sub	r3,r3,r2
    9560:	01000104 	movi	r4,4
    9564:	20c2cd0e 	bge	r4,r3,a09c <_dtoa_r+0x1618>
    9568:	00c00704 	movi	r3,28
    956c:	1885c83a 	sub	r2,r3,r2
    9570:	d8c00817 	ldw	r3,32(sp)
    9574:	a0a9883a 	add	r20,r20,r2
    9578:	b0ad883a 	add	r22,r22,r2
    957c:	1887883a 	add	r3,r3,r2
    9580:	d8c00815 	stw	r3,32(sp)
    9584:	d9800817 	ldw	r6,32(sp)
    9588:	0180040e 	bge	zero,r6,959c <_dtoa_r+0xb18>
    958c:	800b883a 	mov	r5,r16
    9590:	e009883a 	mov	r4,fp
    9594:	000c8fc0 	call	c8fc <__lshift>
    9598:	1021883a 	mov	r16,r2
    959c:	0580050e 	bge	zero,r22,95b4 <_dtoa_r+0xb30>
    95a0:	a80b883a 	mov	r5,r21
    95a4:	b00d883a 	mov	r6,r22
    95a8:	e009883a 	mov	r4,fp
    95ac:	000c8fc0 	call	c8fc <__lshift>
    95b0:	102b883a 	mov	r21,r2
    95b4:	d9c00e17 	ldw	r7,56(sp)
    95b8:	3801211e 	bne	r7,zero,9a40 <_dtoa_r+0xfbc>
    95bc:	d9800617 	ldw	r6,24(sp)
    95c0:	0181380e 	bge	zero,r6,9aa4 <_dtoa_r+0x1020>
    95c4:	d8c00b17 	ldw	r3,44(sp)
    95c8:	1800ab1e 	bne	r3,zero,9878 <_dtoa_r+0xdf4>
    95cc:	dc800717 	ldw	r18,28(sp)
    95d0:	dcc00617 	ldw	r19,24(sp)
    95d4:	9029883a 	mov	r20,r18
    95d8:	00000206 	br	95e4 <_dtoa_r+0xb60>
    95dc:	000c24c0 	call	c24c <__multadd>
    95e0:	1021883a 	mov	r16,r2
    95e4:	a80b883a 	mov	r5,r21
    95e8:	8009883a 	mov	r4,r16
    95ec:	00088840 	call	8884 <quorem>
    95f0:	10800c04 	addi	r2,r2,48
    95f4:	90800005 	stb	r2,0(r18)
    95f8:	94800044 	addi	r18,r18,1
    95fc:	9507c83a 	sub	r3,r18,r20
    9600:	000f883a 	mov	r7,zero
    9604:	01800284 	movi	r6,10
    9608:	800b883a 	mov	r5,r16
    960c:	e009883a 	mov	r4,fp
    9610:	1cfff216 	blt	r3,r19,95dc <__alt_mem_onchip_memory+0xf78095dc>
    9614:	1011883a 	mov	r8,r2
    9618:	d8800617 	ldw	r2,24(sp)
    961c:	0082370e 	bge	zero,r2,9efc <_dtoa_r+0x1478>
    9620:	d9000717 	ldw	r4,28(sp)
    9624:	0025883a 	mov	r18,zero
    9628:	20af883a 	add	r23,r4,r2
    962c:	01800044 	movi	r6,1
    9630:	800b883a 	mov	r5,r16
    9634:	e009883a 	mov	r4,fp
    9638:	da001715 	stw	r8,92(sp)
    963c:	000c8fc0 	call	c8fc <__lshift>
    9640:	a80b883a 	mov	r5,r21
    9644:	1009883a 	mov	r4,r2
    9648:	d8800915 	stw	r2,36(sp)
    964c:	000ca440 	call	ca44 <__mcmp>
    9650:	da001717 	ldw	r8,92(sp)
    9654:	0081800e 	bge	zero,r2,9c58 <_dtoa_r+0x11d4>
    9658:	b93fffc3 	ldbu	r4,-1(r23)
    965c:	b8bfffc4 	addi	r2,r23,-1
    9660:	1007883a 	mov	r3,r2
    9664:	01800e44 	movi	r6,57
    9668:	d9c00717 	ldw	r7,28(sp)
    966c:	00000506 	br	9684 <_dtoa_r+0xc00>
    9670:	18ffffc4 	addi	r3,r3,-1
    9674:	11c12326 	beq	r2,r7,9b04 <_dtoa_r+0x1080>
    9678:	19000003 	ldbu	r4,0(r3)
    967c:	102f883a 	mov	r23,r2
    9680:	10bfffc4 	addi	r2,r2,-1
    9684:	21403fcc 	andi	r5,r4,255
    9688:	2940201c 	xori	r5,r5,128
    968c:	297fe004 	addi	r5,r5,-128
    9690:	29bff726 	beq	r5,r6,9670 <__alt_mem_onchip_memory+0xf7809670>
    9694:	21000044 	addi	r4,r4,1
    9698:	11000005 	stb	r4,0(r2)
    969c:	a80b883a 	mov	r5,r21
    96a0:	e009883a 	mov	r4,fp
    96a4:	000c2240 	call	c224 <_Bfree>
    96a8:	883ea026 	beq	r17,zero,912c <__alt_mem_onchip_memory+0xf780912c>
    96ac:	90000426 	beq	r18,zero,96c0 <_dtoa_r+0xc3c>
    96b0:	94400326 	beq	r18,r17,96c0 <_dtoa_r+0xc3c>
    96b4:	900b883a 	mov	r5,r18
    96b8:	e009883a 	mov	r4,fp
    96bc:	000c2240 	call	c224 <_Bfree>
    96c0:	880b883a 	mov	r5,r17
    96c4:	e009883a 	mov	r4,fp
    96c8:	000c2240 	call	c224 <_Bfree>
    96cc:	003e9706 	br	912c <__alt_mem_onchip_memory+0xf780912c>
    96d0:	01800044 	movi	r6,1
    96d4:	d9800e15 	stw	r6,56(sp)
    96d8:	003d9606 	br	8d34 <__alt_mem_onchip_memory+0xf7808d34>
    96dc:	d8800817 	ldw	r2,32(sp)
    96e0:	d8c00517 	ldw	r3,20(sp)
    96e4:	d8000d15 	stw	zero,52(sp)
    96e8:	10c5c83a 	sub	r2,r2,r3
    96ec:	00c9c83a 	sub	r4,zero,r3
    96f0:	d8800815 	stw	r2,32(sp)
    96f4:	d9000a15 	stw	r4,40(sp)
    96f8:	003d9706 	br	8d58 <__alt_mem_onchip_memory+0xf7808d58>
    96fc:	05adc83a 	sub	r22,zero,r22
    9700:	dd800815 	stw	r22,32(sp)
    9704:	002d883a 	mov	r22,zero
    9708:	003d8e06 	br	8d44 <__alt_mem_onchip_memory+0xf7808d44>
    970c:	d9000517 	ldw	r4,20(sp)
    9710:	0005b800 	call	5b80 <__floatsidf>
    9714:	100d883a 	mov	r6,r2
    9718:	180f883a 	mov	r7,r3
    971c:	a009883a 	mov	r4,r20
    9720:	880b883a 	mov	r5,r17
    9724:	001053c0 	call	1053c <__eqdf2>
    9728:	103d7126 	beq	r2,zero,8cf0 <__alt_mem_onchip_memory+0xf7808cf0>
    972c:	d9c00517 	ldw	r7,20(sp)
    9730:	39ffffc4 	addi	r7,r7,-1
    9734:	d9c00515 	stw	r7,20(sp)
    9738:	003d6d06 	br	8cf0 <__alt_mem_onchip_memory+0xf7808cf0>
    973c:	dd400a17 	ldw	r21,40(sp)
    9740:	dd000817 	ldw	r20,32(sp)
    9744:	0023883a 	mov	r17,zero
    9748:	003f4806 	br	946c <__alt_mem_onchip_memory+0xf780946c>
    974c:	10e3c83a 	sub	r17,r2,r3
    9750:	9448983a 	sll	r4,r18,r17
    9754:	003d3206 	br	8c20 <__alt_mem_onchip_memory+0xf7808c20>
    9758:	d8000e15 	stw	zero,56(sp)
    975c:	003d7506 	br	8d34 <__alt_mem_onchip_memory+0xf7808d34>
    9760:	b005883a 	mov	r2,r22
    9764:	003f4506 	br	947c <__alt_mem_onchip_memory+0xf780947c>
    9768:	dc000915 	stw	r16,36(sp)
    976c:	d9800a17 	ldw	r6,40(sp)
    9770:	d9400917 	ldw	r5,36(sp)
    9774:	e009883a 	mov	r4,fp
    9778:	000c7bc0 	call	c7bc <__pow5mult>
    977c:	1021883a 	mov	r16,r2
    9780:	003f5a06 	br	94ec <__alt_mem_onchip_memory+0xf78094ec>
    9784:	01c00044 	movi	r7,1
    9788:	d9c00b15 	stw	r7,44(sp)
    978c:	d8802217 	ldw	r2,136(sp)
    9790:	0081280e 	bge	zero,r2,9c34 <_dtoa_r+0x11b0>
    9794:	100d883a 	mov	r6,r2
    9798:	1021883a 	mov	r16,r2
    979c:	d8800c15 	stw	r2,48(sp)
    97a0:	d8800615 	stw	r2,24(sp)
    97a4:	003d8806 	br	8dc8 <__alt_mem_onchip_memory+0xf7808dc8>
    97a8:	d8800617 	ldw	r2,24(sp)
    97ac:	00be9b16 	blt	zero,r2,921c <__alt_mem_onchip_memory+0xf780921c>
    97b0:	10010f1e 	bne	r2,zero,9bf0 <_dtoa_r+0x116c>
    97b4:	880b883a 	mov	r5,r17
    97b8:	000d883a 	mov	r6,zero
    97bc:	01d00534 	movhi	r7,16404
    97c0:	8009883a 	mov	r4,r16
    97c4:	0004aec0 	call	4aec <__muldf3>
    97c8:	900d883a 	mov	r6,r18
    97cc:	980f883a 	mov	r7,r19
    97d0:	1009883a 	mov	r4,r2
    97d4:	180b883a 	mov	r5,r3
    97d8:	000491c0 	call	491c <__gedf2>
    97dc:	002b883a 	mov	r21,zero
    97e0:	0023883a 	mov	r17,zero
    97e4:	1000bf16 	blt	r2,zero,9ae4 <_dtoa_r+0x1060>
    97e8:	d9802217 	ldw	r6,136(sp)
    97ec:	ddc00717 	ldw	r23,28(sp)
    97f0:	018c303a 	nor	r6,zero,r6
    97f4:	d9800515 	stw	r6,20(sp)
    97f8:	a80b883a 	mov	r5,r21
    97fc:	e009883a 	mov	r4,fp
    9800:	000c2240 	call	c224 <_Bfree>
    9804:	883e4926 	beq	r17,zero,912c <__alt_mem_onchip_memory+0xf780912c>
    9808:	003fad06 	br	96c0 <__alt_mem_onchip_memory+0xf78096c0>
    980c:	d9c01117 	ldw	r7,68(sp)
    9810:	3801bc26 	beq	r7,zero,9f04 <_dtoa_r+0x1480>
    9814:	10810cc4 	addi	r2,r2,1075
    9818:	dd400a17 	ldw	r21,40(sp)
    981c:	dd000817 	ldw	r20,32(sp)
    9820:	003f0a06 	br	944c <__alt_mem_onchip_memory+0xf780944c>
    9824:	00800704 	movi	r2,28
    9828:	d9000817 	ldw	r4,32(sp)
    982c:	a0a9883a 	add	r20,r20,r2
    9830:	b0ad883a 	add	r22,r22,r2
    9834:	2089883a 	add	r4,r4,r2
    9838:	d9000815 	stw	r4,32(sp)
    983c:	003f5106 	br	9584 <__alt_mem_onchip_memory+0xf7809584>
    9840:	d8c00317 	ldw	r3,12(sp)
    9844:	b8c1fc0e 	bge	r23,r3,a038 <_dtoa_r+0x15b4>
    9848:	0027883a 	mov	r19,zero
    984c:	b805883a 	mov	r2,r23
    9850:	003f3e06 	br	954c <__alt_mem_onchip_memory+0xf780954c>
    9854:	880b883a 	mov	r5,r17
    9858:	e009883a 	mov	r4,fp
    985c:	000f883a 	mov	r7,zero
    9860:	01800284 	movi	r6,10
    9864:	000c24c0 	call	c24c <__multadd>
    9868:	d9000c17 	ldw	r4,48(sp)
    986c:	1023883a 	mov	r17,r2
    9870:	0102040e 	bge	zero,r4,a084 <_dtoa_r+0x1600>
    9874:	d9000615 	stw	r4,24(sp)
    9878:	0500050e 	bge	zero,r20,9890 <_dtoa_r+0xe0c>
    987c:	880b883a 	mov	r5,r17
    9880:	a00d883a 	mov	r6,r20
    9884:	e009883a 	mov	r4,fp
    9888:	000c8fc0 	call	c8fc <__lshift>
    988c:	1023883a 	mov	r17,r2
    9890:	9801241e 	bne	r19,zero,9d24 <_dtoa_r+0x12a0>
    9894:	8829883a 	mov	r20,r17
    9898:	d9000617 	ldw	r4,24(sp)
    989c:	dcc00717 	ldw	r19,28(sp)
    98a0:	9480004c 	andi	r18,r18,1
    98a4:	20bfffc4 	addi	r2,r4,-1
    98a8:	9885883a 	add	r2,r19,r2
    98ac:	d8800415 	stw	r2,16(sp)
    98b0:	dc800615 	stw	r18,24(sp)
    98b4:	a80b883a 	mov	r5,r21
    98b8:	8009883a 	mov	r4,r16
    98bc:	00088840 	call	8884 <quorem>
    98c0:	880b883a 	mov	r5,r17
    98c4:	8009883a 	mov	r4,r16
    98c8:	102f883a 	mov	r23,r2
    98cc:	000ca440 	call	ca44 <__mcmp>
    98d0:	a80b883a 	mov	r5,r21
    98d4:	a00d883a 	mov	r6,r20
    98d8:	e009883a 	mov	r4,fp
    98dc:	102d883a 	mov	r22,r2
    98e0:	000caa40 	call	caa4 <__mdiff>
    98e4:	1007883a 	mov	r3,r2
    98e8:	10800317 	ldw	r2,12(r2)
    98ec:	bc800c04 	addi	r18,r23,48
    98f0:	180b883a 	mov	r5,r3
    98f4:	10004e1e 	bne	r2,zero,9a30 <_dtoa_r+0xfac>
    98f8:	8009883a 	mov	r4,r16
    98fc:	d8c01615 	stw	r3,88(sp)
    9900:	000ca440 	call	ca44 <__mcmp>
    9904:	d8c01617 	ldw	r3,88(sp)
    9908:	e009883a 	mov	r4,fp
    990c:	d8801615 	stw	r2,88(sp)
    9910:	180b883a 	mov	r5,r3
    9914:	000c2240 	call	c224 <_Bfree>
    9918:	d8801617 	ldw	r2,88(sp)
    991c:	1000041e 	bne	r2,zero,9930 <_dtoa_r+0xeac>
    9920:	d9800317 	ldw	r6,12(sp)
    9924:	3000021e 	bne	r6,zero,9930 <_dtoa_r+0xeac>
    9928:	d8c00617 	ldw	r3,24(sp)
    992c:	18003726 	beq	r3,zero,9a0c <_dtoa_r+0xf88>
    9930:	b0002016 	blt	r22,zero,99b4 <_dtoa_r+0xf30>
    9934:	b000041e 	bne	r22,zero,9948 <_dtoa_r+0xec4>
    9938:	d9000317 	ldw	r4,12(sp)
    993c:	2000021e 	bne	r4,zero,9948 <_dtoa_r+0xec4>
    9940:	d8c00617 	ldw	r3,24(sp)
    9944:	18001b26 	beq	r3,zero,99b4 <_dtoa_r+0xf30>
    9948:	00810716 	blt	zero,r2,9d68 <_dtoa_r+0x12e4>
    994c:	d8c00417 	ldw	r3,16(sp)
    9950:	9d800044 	addi	r22,r19,1
    9954:	9c800005 	stb	r18,0(r19)
    9958:	b02f883a 	mov	r23,r22
    995c:	98c10626 	beq	r19,r3,9d78 <_dtoa_r+0x12f4>
    9960:	800b883a 	mov	r5,r16
    9964:	000f883a 	mov	r7,zero
    9968:	01800284 	movi	r6,10
    996c:	e009883a 	mov	r4,fp
    9970:	000c24c0 	call	c24c <__multadd>
    9974:	1021883a 	mov	r16,r2
    9978:	000f883a 	mov	r7,zero
    997c:	01800284 	movi	r6,10
    9980:	880b883a 	mov	r5,r17
    9984:	e009883a 	mov	r4,fp
    9988:	8d002526 	beq	r17,r20,9a20 <_dtoa_r+0xf9c>
    998c:	000c24c0 	call	c24c <__multadd>
    9990:	a00b883a 	mov	r5,r20
    9994:	000f883a 	mov	r7,zero
    9998:	01800284 	movi	r6,10
    999c:	e009883a 	mov	r4,fp
    99a0:	1023883a 	mov	r17,r2
    99a4:	000c24c0 	call	c24c <__multadd>
    99a8:	1029883a 	mov	r20,r2
    99ac:	b027883a 	mov	r19,r22
    99b0:	003fc006 	br	98b4 <__alt_mem_onchip_memory+0xf78098b4>
    99b4:	9011883a 	mov	r8,r18
    99b8:	00800e0e 	bge	zero,r2,99f4 <_dtoa_r+0xf70>
    99bc:	800b883a 	mov	r5,r16
    99c0:	01800044 	movi	r6,1
    99c4:	e009883a 	mov	r4,fp
    99c8:	da001715 	stw	r8,92(sp)
    99cc:	000c8fc0 	call	c8fc <__lshift>
    99d0:	a80b883a 	mov	r5,r21
    99d4:	1009883a 	mov	r4,r2
    99d8:	1021883a 	mov	r16,r2
    99dc:	000ca440 	call	ca44 <__mcmp>
    99e0:	da001717 	ldw	r8,92(sp)
    99e4:	0081960e 	bge	zero,r2,a040 <_dtoa_r+0x15bc>
    99e8:	00800e44 	movi	r2,57
    99ec:	40817026 	beq	r8,r2,9fb0 <_dtoa_r+0x152c>
    99f0:	ba000c44 	addi	r8,r23,49
    99f4:	8825883a 	mov	r18,r17
    99f8:	9dc00044 	addi	r23,r19,1
    99fc:	9a000005 	stb	r8,0(r19)
    9a00:	a023883a 	mov	r17,r20
    9a04:	dc000915 	stw	r16,36(sp)
    9a08:	003f2406 	br	969c <__alt_mem_onchip_memory+0xf780969c>
    9a0c:	00800e44 	movi	r2,57
    9a10:	9011883a 	mov	r8,r18
    9a14:	90816626 	beq	r18,r2,9fb0 <_dtoa_r+0x152c>
    9a18:	05bff516 	blt	zero,r22,99f0 <__alt_mem_onchip_memory+0xf78099f0>
    9a1c:	003ff506 	br	99f4 <__alt_mem_onchip_memory+0xf78099f4>
    9a20:	000c24c0 	call	c24c <__multadd>
    9a24:	1023883a 	mov	r17,r2
    9a28:	1029883a 	mov	r20,r2
    9a2c:	003fdf06 	br	99ac <__alt_mem_onchip_memory+0xf78099ac>
    9a30:	e009883a 	mov	r4,fp
    9a34:	000c2240 	call	c224 <_Bfree>
    9a38:	00800044 	movi	r2,1
    9a3c:	003fbc06 	br	9930 <__alt_mem_onchip_memory+0xf7809930>
    9a40:	a80b883a 	mov	r5,r21
    9a44:	8009883a 	mov	r4,r16
    9a48:	000ca440 	call	ca44 <__mcmp>
    9a4c:	103edb0e 	bge	r2,zero,95bc <__alt_mem_onchip_memory+0xf78095bc>
    9a50:	800b883a 	mov	r5,r16
    9a54:	000f883a 	mov	r7,zero
    9a58:	01800284 	movi	r6,10
    9a5c:	e009883a 	mov	r4,fp
    9a60:	000c24c0 	call	c24c <__multadd>
    9a64:	1021883a 	mov	r16,r2
    9a68:	d8800517 	ldw	r2,20(sp)
    9a6c:	d8c00b17 	ldw	r3,44(sp)
    9a70:	10bfffc4 	addi	r2,r2,-1
    9a74:	d8800515 	stw	r2,20(sp)
    9a78:	183f761e 	bne	r3,zero,9854 <__alt_mem_onchip_memory+0xf7809854>
    9a7c:	d9000c17 	ldw	r4,48(sp)
    9a80:	0101730e 	bge	zero,r4,a050 <_dtoa_r+0x15cc>
    9a84:	d9000615 	stw	r4,24(sp)
    9a88:	003ed006 	br	95cc <__alt_mem_onchip_memory+0xf78095cc>
    9a8c:	00800084 	movi	r2,2
    9a90:	3081861e 	bne	r6,r2,a0ac <_dtoa_r+0x1628>
    9a94:	d8000b15 	stw	zero,44(sp)
    9a98:	003f3c06 	br	978c <__alt_mem_onchip_memory+0xf780978c>
    9a9c:	dc000917 	ldw	r16,36(sp)
    9aa0:	003e9206 	br	94ec <__alt_mem_onchip_memory+0xf78094ec>
    9aa4:	d9c00317 	ldw	r7,12(sp)
    9aa8:	00800084 	movi	r2,2
    9aac:	11fec50e 	bge	r2,r7,95c4 <__alt_mem_onchip_memory+0xf78095c4>
    9ab0:	d9000617 	ldw	r4,24(sp)
    9ab4:	20013c1e 	bne	r4,zero,9fa8 <_dtoa_r+0x1524>
    9ab8:	a80b883a 	mov	r5,r21
    9abc:	000f883a 	mov	r7,zero
    9ac0:	01800144 	movi	r6,5
    9ac4:	e009883a 	mov	r4,fp
    9ac8:	000c24c0 	call	c24c <__multadd>
    9acc:	100b883a 	mov	r5,r2
    9ad0:	8009883a 	mov	r4,r16
    9ad4:	102b883a 	mov	r21,r2
    9ad8:	000ca440 	call	ca44 <__mcmp>
    9adc:	dc000915 	stw	r16,36(sp)
    9ae0:	00bf410e 	bge	zero,r2,97e8 <__alt_mem_onchip_memory+0xf78097e8>
    9ae4:	d9c00717 	ldw	r7,28(sp)
    9ae8:	00800c44 	movi	r2,49
    9aec:	38800005 	stb	r2,0(r7)
    9af0:	d8800517 	ldw	r2,20(sp)
    9af4:	3dc00044 	addi	r23,r7,1
    9af8:	10800044 	addi	r2,r2,1
    9afc:	d8800515 	stw	r2,20(sp)
    9b00:	003f3d06 	br	97f8 <__alt_mem_onchip_memory+0xf78097f8>
    9b04:	d9800517 	ldw	r6,20(sp)
    9b08:	d9c00717 	ldw	r7,28(sp)
    9b0c:	00800c44 	movi	r2,49
    9b10:	31800044 	addi	r6,r6,1
    9b14:	d9800515 	stw	r6,20(sp)
    9b18:	38800005 	stb	r2,0(r7)
    9b1c:	003edf06 	br	969c <__alt_mem_onchip_memory+0xf780969c>
    9b20:	d8000b15 	stw	zero,44(sp)
    9b24:	003c9f06 	br	8da4 <__alt_mem_onchip_memory+0xf7808da4>
    9b28:	903e7e1e 	bne	r18,zero,9524 <__alt_mem_onchip_memory+0xf7809524>
    9b2c:	00800434 	movhi	r2,16
    9b30:	10bfffc4 	addi	r2,r2,-1
    9b34:	9884703a 	and	r2,r19,r2
    9b38:	1000ea1e 	bne	r2,zero,9ee4 <_dtoa_r+0x1460>
    9b3c:	9cdffc2c 	andhi	r19,r19,32752
    9b40:	9800e826 	beq	r19,zero,9ee4 <_dtoa_r+0x1460>
    9b44:	d9c00817 	ldw	r7,32(sp)
    9b48:	b5800044 	addi	r22,r22,1
    9b4c:	04c00044 	movi	r19,1
    9b50:	39c00044 	addi	r7,r7,1
    9b54:	d9c00815 	stw	r7,32(sp)
    9b58:	d8800d17 	ldw	r2,52(sp)
    9b5c:	103e721e 	bne	r2,zero,9528 <__alt_mem_onchip_memory+0xf7809528>
    9b60:	00800044 	movi	r2,1
    9b64:	003e7906 	br	954c <__alt_mem_onchip_memory+0xf780954c>
    9b68:	8009883a 	mov	r4,r16
    9b6c:	0005b800 	call	5b80 <__floatsidf>
    9b70:	d9800f17 	ldw	r6,60(sp)
    9b74:	d9c01017 	ldw	r7,64(sp)
    9b78:	1009883a 	mov	r4,r2
    9b7c:	180b883a 	mov	r5,r3
    9b80:	0004aec0 	call	4aec <__muldf3>
    9b84:	000d883a 	mov	r6,zero
    9b88:	01d00734 	movhi	r7,16412
    9b8c:	1009883a 	mov	r4,r2
    9b90:	180b883a 	mov	r5,r3
    9b94:	00037880 	call	3788 <__adddf3>
    9b98:	047f3034 	movhi	r17,64704
    9b9c:	1021883a 	mov	r16,r2
    9ba0:	1c63883a 	add	r17,r3,r17
    9ba4:	d9000f17 	ldw	r4,60(sp)
    9ba8:	d9401017 	ldw	r5,64(sp)
    9bac:	000d883a 	mov	r6,zero
    9bb0:	01d00534 	movhi	r7,16404
    9bb4:	00052040 	call	5204 <__subdf3>
    9bb8:	800d883a 	mov	r6,r16
    9bbc:	880f883a 	mov	r7,r17
    9bc0:	1009883a 	mov	r4,r2
    9bc4:	180b883a 	mov	r5,r3
    9bc8:	102b883a 	mov	r21,r2
    9bcc:	1829883a 	mov	r20,r3
    9bd0:	000491c0 	call	491c <__gedf2>
    9bd4:	00806c16 	blt	zero,r2,9d88 <_dtoa_r+0x1304>
    9bd8:	89e0003c 	xorhi	r7,r17,32768
    9bdc:	800d883a 	mov	r6,r16
    9be0:	a809883a 	mov	r4,r21
    9be4:	a00b883a 	mov	r5,r20
    9be8:	00049f80 	call	49f8 <__ledf2>
    9bec:	103d7e0e 	bge	r2,zero,91e8 <__alt_mem_onchip_memory+0xf78091e8>
    9bf0:	002b883a 	mov	r21,zero
    9bf4:	0023883a 	mov	r17,zero
    9bf8:	003efb06 	br	97e8 <__alt_mem_onchip_memory+0xf78097e8>
    9bfc:	d8800717 	ldw	r2,28(sp)
    9c00:	003bd006 	br	8b44 <__alt_mem_onchip_memory+0xf7808b44>
    9c04:	d9000a17 	ldw	r4,40(sp)
    9c08:	d9800d17 	ldw	r6,52(sp)
    9c0c:	dd400a15 	stw	r21,40(sp)
    9c10:	a905c83a 	sub	r2,r21,r4
    9c14:	308d883a 	add	r6,r6,r2
    9c18:	d9800d15 	stw	r6,52(sp)
    9c1c:	002b883a 	mov	r21,zero
    9c20:	003e0606 	br	943c <__alt_mem_onchip_memory+0xf780943c>
    9c24:	9023883a 	mov	r17,r18
    9c28:	9829883a 	mov	r20,r19
    9c2c:	04000084 	movi	r16,2
    9c30:	003c9206 	br	8e7c <__alt_mem_onchip_memory+0xf7808e7c>
    9c34:	04000044 	movi	r16,1
    9c38:	dc000c15 	stw	r16,48(sp)
    9c3c:	dc000615 	stw	r16,24(sp)
    9c40:	dc002215 	stw	r16,136(sp)
    9c44:	e0001115 	stw	zero,68(fp)
    9c48:	000b883a 	mov	r5,zero
    9c4c:	003c6906 	br	8df4 <__alt_mem_onchip_memory+0xf7808df4>
    9c50:	3021883a 	mov	r16,r6
    9c54:	003ffb06 	br	9c44 <__alt_mem_onchip_memory+0xf7809c44>
    9c58:	1000021e 	bne	r2,zero,9c64 <_dtoa_r+0x11e0>
    9c5c:	4200004c 	andi	r8,r8,1
    9c60:	403e7d1e 	bne	r8,zero,9658 <__alt_mem_onchip_memory+0xf7809658>
    9c64:	01000c04 	movi	r4,48
    9c68:	00000106 	br	9c70 <_dtoa_r+0x11ec>
    9c6c:	102f883a 	mov	r23,r2
    9c70:	b8bfffc4 	addi	r2,r23,-1
    9c74:	10c00007 	ldb	r3,0(r2)
    9c78:	193ffc26 	beq	r3,r4,9c6c <__alt_mem_onchip_memory+0xf7809c6c>
    9c7c:	003e8706 	br	969c <__alt_mem_onchip_memory+0xf780969c>
    9c80:	d8800517 	ldw	r2,20(sp)
    9c84:	00a3c83a 	sub	r17,zero,r2
    9c88:	8800a426 	beq	r17,zero,9f1c <_dtoa_r+0x1498>
    9c8c:	888003cc 	andi	r2,r17,15
    9c90:	100490fa 	slli	r2,r2,3
    9c94:	00c00074 	movhi	r3,1
    9c98:	18cdd004 	addi	r3,r3,14144
    9c9c:	1885883a 	add	r2,r3,r2
    9ca0:	11800017 	ldw	r6,0(r2)
    9ca4:	11c00117 	ldw	r7,4(r2)
    9ca8:	9009883a 	mov	r4,r18
    9cac:	980b883a 	mov	r5,r19
    9cb0:	8823d13a 	srai	r17,r17,4
    9cb4:	0004aec0 	call	4aec <__muldf3>
    9cb8:	d8800f15 	stw	r2,60(sp)
    9cbc:	d8c01015 	stw	r3,64(sp)
    9cc0:	8800e826 	beq	r17,zero,a064 <_dtoa_r+0x15e0>
    9cc4:	05000074 	movhi	r20,1
    9cc8:	a50dc604 	addi	r20,r20,14104
    9ccc:	04000084 	movi	r16,2
    9cd0:	8980004c 	andi	r6,r17,1
    9cd4:	1009883a 	mov	r4,r2
    9cd8:	8823d07a 	srai	r17,r17,1
    9cdc:	180b883a 	mov	r5,r3
    9ce0:	30000426 	beq	r6,zero,9cf4 <_dtoa_r+0x1270>
    9ce4:	a1800017 	ldw	r6,0(r20)
    9ce8:	a1c00117 	ldw	r7,4(r20)
    9cec:	84000044 	addi	r16,r16,1
    9cf0:	0004aec0 	call	4aec <__muldf3>
    9cf4:	a5000204 	addi	r20,r20,8
    9cf8:	883ff51e 	bne	r17,zero,9cd0 <__alt_mem_onchip_memory+0xf7809cd0>
    9cfc:	d8800f15 	stw	r2,60(sp)
    9d00:	d8c01015 	stw	r3,64(sp)
    9d04:	003c7606 	br	8ee0 <__alt_mem_onchip_memory+0xf7808ee0>
    9d08:	00c00c04 	movi	r3,48
    9d0c:	10c00005 	stb	r3,0(r2)
    9d10:	d8c00517 	ldw	r3,20(sp)
    9d14:	bd3fffc3 	ldbu	r20,-1(r23)
    9d18:	18c00044 	addi	r3,r3,1
    9d1c:	d8c00515 	stw	r3,20(sp)
    9d20:	003db906 	br	9408 <__alt_mem_onchip_memory+0xf7809408>
    9d24:	89400117 	ldw	r5,4(r17)
    9d28:	e009883a 	mov	r4,fp
    9d2c:	000c17c0 	call	c17c <_Balloc>
    9d30:	89800417 	ldw	r6,16(r17)
    9d34:	89400304 	addi	r5,r17,12
    9d38:	11000304 	addi	r4,r2,12
    9d3c:	31800084 	addi	r6,r6,2
    9d40:	318d883a 	add	r6,r6,r6
    9d44:	318d883a 	add	r6,r6,r6
    9d48:	1027883a 	mov	r19,r2
    9d4c:	000bdb00 	call	bdb0 <memcpy>
    9d50:	01800044 	movi	r6,1
    9d54:	980b883a 	mov	r5,r19
    9d58:	e009883a 	mov	r4,fp
    9d5c:	000c8fc0 	call	c8fc <__lshift>
    9d60:	1029883a 	mov	r20,r2
    9d64:	003ecc06 	br	9898 <__alt_mem_onchip_memory+0xf7809898>
    9d68:	00800e44 	movi	r2,57
    9d6c:	90809026 	beq	r18,r2,9fb0 <_dtoa_r+0x152c>
    9d70:	92000044 	addi	r8,r18,1
    9d74:	003f1f06 	br	99f4 <__alt_mem_onchip_memory+0xf78099f4>
    9d78:	9011883a 	mov	r8,r18
    9d7c:	8825883a 	mov	r18,r17
    9d80:	a023883a 	mov	r17,r20
    9d84:	003e2906 	br	962c <__alt_mem_onchip_memory+0xf780962c>
    9d88:	002b883a 	mov	r21,zero
    9d8c:	0023883a 	mov	r17,zero
    9d90:	003f5406 	br	9ae4 <__alt_mem_onchip_memory+0xf7809ae4>
    9d94:	61bfffc4 	addi	r6,r12,-1
    9d98:	300490fa 	slli	r2,r6,3
    9d9c:	00c00074 	movhi	r3,1
    9da0:	18cdd004 	addi	r3,r3,14144
    9da4:	1885883a 	add	r2,r3,r2
    9da8:	11000017 	ldw	r4,0(r2)
    9dac:	11400117 	ldw	r5,4(r2)
    9db0:	d8800717 	ldw	r2,28(sp)
    9db4:	880f883a 	mov	r7,r17
    9db8:	d9801215 	stw	r6,72(sp)
    9dbc:	800d883a 	mov	r6,r16
    9dc0:	db001615 	stw	r12,88(sp)
    9dc4:	15c00044 	addi	r23,r2,1
    9dc8:	0004aec0 	call	4aec <__muldf3>
    9dcc:	d9401017 	ldw	r5,64(sp)
    9dd0:	d9000f17 	ldw	r4,60(sp)
    9dd4:	d8c01515 	stw	r3,84(sp)
    9dd8:	d8801415 	stw	r2,80(sp)
    9ddc:	0005b000 	call	5b00 <__fixdfsi>
    9de0:	1009883a 	mov	r4,r2
    9de4:	1021883a 	mov	r16,r2
    9de8:	0005b800 	call	5b80 <__floatsidf>
    9dec:	d9000f17 	ldw	r4,60(sp)
    9df0:	d9401017 	ldw	r5,64(sp)
    9df4:	100d883a 	mov	r6,r2
    9df8:	180f883a 	mov	r7,r3
    9dfc:	00052040 	call	5204 <__subdf3>
    9e00:	1829883a 	mov	r20,r3
    9e04:	d8c00717 	ldw	r3,28(sp)
    9e08:	84000c04 	addi	r16,r16,48
    9e0c:	1023883a 	mov	r17,r2
    9e10:	1c000005 	stb	r16,0(r3)
    9e14:	db001617 	ldw	r12,88(sp)
    9e18:	00800044 	movi	r2,1
    9e1c:	60802226 	beq	r12,r2,9ea8 <_dtoa_r+0x1424>
    9e20:	d9c00717 	ldw	r7,28(sp)
    9e24:	8805883a 	mov	r2,r17
    9e28:	b82b883a 	mov	r21,r23
    9e2c:	3b19883a 	add	r12,r7,r12
    9e30:	6023883a 	mov	r17,r12
    9e34:	a007883a 	mov	r3,r20
    9e38:	dc800f15 	stw	r18,60(sp)
    9e3c:	000d883a 	mov	r6,zero
    9e40:	01d00934 	movhi	r7,16420
    9e44:	1009883a 	mov	r4,r2
    9e48:	180b883a 	mov	r5,r3
    9e4c:	0004aec0 	call	4aec <__muldf3>
    9e50:	180b883a 	mov	r5,r3
    9e54:	1009883a 	mov	r4,r2
    9e58:	1829883a 	mov	r20,r3
    9e5c:	1025883a 	mov	r18,r2
    9e60:	0005b000 	call	5b00 <__fixdfsi>
    9e64:	1009883a 	mov	r4,r2
    9e68:	1021883a 	mov	r16,r2
    9e6c:	0005b800 	call	5b80 <__floatsidf>
    9e70:	100d883a 	mov	r6,r2
    9e74:	180f883a 	mov	r7,r3
    9e78:	9009883a 	mov	r4,r18
    9e7c:	a00b883a 	mov	r5,r20
    9e80:	84000c04 	addi	r16,r16,48
    9e84:	00052040 	call	5204 <__subdf3>
    9e88:	ad400044 	addi	r21,r21,1
    9e8c:	ac3fffc5 	stb	r16,-1(r21)
    9e90:	ac7fea1e 	bne	r21,r17,9e3c <__alt_mem_onchip_memory+0xf7809e3c>
    9e94:	1023883a 	mov	r17,r2
    9e98:	d8801217 	ldw	r2,72(sp)
    9e9c:	dc800f17 	ldw	r18,60(sp)
    9ea0:	1829883a 	mov	r20,r3
    9ea4:	b8af883a 	add	r23,r23,r2
    9ea8:	d9001417 	ldw	r4,80(sp)
    9eac:	d9401517 	ldw	r5,84(sp)
    9eb0:	000d883a 	mov	r6,zero
    9eb4:	01cff834 	movhi	r7,16352
    9eb8:	00037880 	call	3788 <__adddf3>
    9ebc:	880d883a 	mov	r6,r17
    9ec0:	a00f883a 	mov	r7,r20
    9ec4:	1009883a 	mov	r4,r2
    9ec8:	180b883a 	mov	r5,r3
    9ecc:	00049f80 	call	49f8 <__ledf2>
    9ed0:	10003e0e 	bge	r2,zero,9fcc <_dtoa_r+0x1548>
    9ed4:	d9001317 	ldw	r4,76(sp)
    9ed8:	bd3fffc3 	ldbu	r20,-1(r23)
    9edc:	d9000515 	stw	r4,20(sp)
    9ee0:	003d3b06 	br	93d0 <__alt_mem_onchip_memory+0xf78093d0>
    9ee4:	0027883a 	mov	r19,zero
    9ee8:	003f1b06 	br	9b58 <__alt_mem_onchip_memory+0xf7809b58>
    9eec:	d8800817 	ldw	r2,32(sp)
    9ef0:	11e9c83a 	sub	r20,r2,r7
    9ef4:	0005883a 	mov	r2,zero
    9ef8:	003d5406 	br	944c <__alt_mem_onchip_memory+0xf780944c>
    9efc:	00800044 	movi	r2,1
    9f00:	003dc706 	br	9620 <__alt_mem_onchip_memory+0xf7809620>
    9f04:	d8c00217 	ldw	r3,8(sp)
    9f08:	00800d84 	movi	r2,54
    9f0c:	dd400a17 	ldw	r21,40(sp)
    9f10:	10c5c83a 	sub	r2,r2,r3
    9f14:	dd000817 	ldw	r20,32(sp)
    9f18:	003d4c06 	br	944c <__alt_mem_onchip_memory+0xf780944c>
    9f1c:	dc800f15 	stw	r18,60(sp)
    9f20:	dcc01015 	stw	r19,64(sp)
    9f24:	04000084 	movi	r16,2
    9f28:	003bed06 	br	8ee0 <__alt_mem_onchip_memory+0xf7808ee0>
    9f2c:	d9000617 	ldw	r4,24(sp)
    9f30:	203f0d26 	beq	r4,zero,9b68 <__alt_mem_onchip_memory+0xf7809b68>
    9f34:	d9800c17 	ldw	r6,48(sp)
    9f38:	01bcab0e 	bge	zero,r6,91e8 <__alt_mem_onchip_memory+0xf78091e8>
    9f3c:	d9401017 	ldw	r5,64(sp)
    9f40:	d9000f17 	ldw	r4,60(sp)
    9f44:	000d883a 	mov	r6,zero
    9f48:	01d00934 	movhi	r7,16420
    9f4c:	0004aec0 	call	4aec <__muldf3>
    9f50:	81000044 	addi	r4,r16,1
    9f54:	d8800f15 	stw	r2,60(sp)
    9f58:	d8c01015 	stw	r3,64(sp)
    9f5c:	0005b800 	call	5b80 <__floatsidf>
    9f60:	d9800f17 	ldw	r6,60(sp)
    9f64:	d9c01017 	ldw	r7,64(sp)
    9f68:	1009883a 	mov	r4,r2
    9f6c:	180b883a 	mov	r5,r3
    9f70:	0004aec0 	call	4aec <__muldf3>
    9f74:	01d00734 	movhi	r7,16412
    9f78:	000d883a 	mov	r6,zero
    9f7c:	1009883a 	mov	r4,r2
    9f80:	180b883a 	mov	r5,r3
    9f84:	00037880 	call	3788 <__adddf3>
    9f88:	d9c00517 	ldw	r7,20(sp)
    9f8c:	047f3034 	movhi	r17,64704
    9f90:	1021883a 	mov	r16,r2
    9f94:	39ffffc4 	addi	r7,r7,-1
    9f98:	d9c01315 	stw	r7,76(sp)
    9f9c:	1c63883a 	add	r17,r3,r17
    9fa0:	db000c17 	ldw	r12,48(sp)
    9fa4:	003bea06 	br	8f50 <__alt_mem_onchip_memory+0xf7808f50>
    9fa8:	dc000915 	stw	r16,36(sp)
    9fac:	003e0e06 	br	97e8 <__alt_mem_onchip_memory+0xf78097e8>
    9fb0:	01000e44 	movi	r4,57
    9fb4:	8825883a 	mov	r18,r17
    9fb8:	9dc00044 	addi	r23,r19,1
    9fbc:	99000005 	stb	r4,0(r19)
    9fc0:	a023883a 	mov	r17,r20
    9fc4:	dc000915 	stw	r16,36(sp)
    9fc8:	003da406 	br	965c <__alt_mem_onchip_memory+0xf780965c>
    9fcc:	d9801417 	ldw	r6,80(sp)
    9fd0:	d9c01517 	ldw	r7,84(sp)
    9fd4:	0009883a 	mov	r4,zero
    9fd8:	014ff834 	movhi	r5,16352
    9fdc:	00052040 	call	5204 <__subdf3>
    9fe0:	880d883a 	mov	r6,r17
    9fe4:	a00f883a 	mov	r7,r20
    9fe8:	1009883a 	mov	r4,r2
    9fec:	180b883a 	mov	r5,r3
    9ff0:	000491c0 	call	491c <__gedf2>
    9ff4:	00bc7c0e 	bge	zero,r2,91e8 <__alt_mem_onchip_memory+0xf78091e8>
    9ff8:	01000c04 	movi	r4,48
    9ffc:	00000106 	br	a004 <_dtoa_r+0x1580>
    a000:	102f883a 	mov	r23,r2
    a004:	b8bfffc4 	addi	r2,r23,-1
    a008:	10c00007 	ldb	r3,0(r2)
    a00c:	193ffc26 	beq	r3,r4,a000 <__alt_mem_onchip_memory+0xf780a000>
    a010:	d9801317 	ldw	r6,76(sp)
    a014:	d9800515 	stw	r6,20(sp)
    a018:	003c4406 	br	912c <__alt_mem_onchip_memory+0xf780912c>
    a01c:	d9801317 	ldw	r6,76(sp)
    a020:	d9800515 	stw	r6,20(sp)
    a024:	003cea06 	br	93d0 <__alt_mem_onchip_memory+0xf78093d0>
    a028:	dd800f17 	ldw	r22,60(sp)
    a02c:	dcc01017 	ldw	r19,64(sp)
    a030:	dc801217 	ldw	r18,72(sp)
    a034:	003c6c06 	br	91e8 <__alt_mem_onchip_memory+0xf78091e8>
    a038:	903e031e 	bne	r18,zero,9848 <__alt_mem_onchip_memory+0xf7809848>
    a03c:	003ebb06 	br	9b2c <__alt_mem_onchip_memory+0xf7809b2c>
    a040:	103e6c1e 	bne	r2,zero,99f4 <__alt_mem_onchip_memory+0xf78099f4>
    a044:	4080004c 	andi	r2,r8,1
    a048:	103e6a26 	beq	r2,zero,99f4 <__alt_mem_onchip_memory+0xf78099f4>
    a04c:	003e6606 	br	99e8 <__alt_mem_onchip_memory+0xf78099e8>
    a050:	d8c00317 	ldw	r3,12(sp)
    a054:	00800084 	movi	r2,2
    a058:	10c02916 	blt	r2,r3,a100 <_dtoa_r+0x167c>
    a05c:	d9000c17 	ldw	r4,48(sp)
    a060:	003e8806 	br	9a84 <__alt_mem_onchip_memory+0xf7809a84>
    a064:	04000084 	movi	r16,2
    a068:	003b9d06 	br	8ee0 <__alt_mem_onchip_memory+0xf7808ee0>
    a06c:	d9001317 	ldw	r4,76(sp)
    a070:	d9000515 	stw	r4,20(sp)
    a074:	003cd606 	br	93d0 <__alt_mem_onchip_memory+0xf78093d0>
    a078:	d8801317 	ldw	r2,76(sp)
    a07c:	d8800515 	stw	r2,20(sp)
    a080:	003c2a06 	br	912c <__alt_mem_onchip_memory+0xf780912c>
    a084:	d9800317 	ldw	r6,12(sp)
    a088:	00800084 	movi	r2,2
    a08c:	11801516 	blt	r2,r6,a0e4 <_dtoa_r+0x1660>
    a090:	d9c00c17 	ldw	r7,48(sp)
    a094:	d9c00615 	stw	r7,24(sp)
    a098:	003df706 	br	9878 <__alt_mem_onchip_memory+0xf7809878>
    a09c:	193d3926 	beq	r3,r4,9584 <__alt_mem_onchip_memory+0xf7809584>
    a0a0:	00c00f04 	movi	r3,60
    a0a4:	1885c83a 	sub	r2,r3,r2
    a0a8:	003ddf06 	br	9828 <__alt_mem_onchip_memory+0xf7809828>
    a0ac:	e009883a 	mov	r4,fp
    a0b0:	e0001115 	stw	zero,68(fp)
    a0b4:	000b883a 	mov	r5,zero
    a0b8:	000c17c0 	call	c17c <_Balloc>
    a0bc:	d8800715 	stw	r2,28(sp)
    a0c0:	d8c00717 	ldw	r3,28(sp)
    a0c4:	00bfffc4 	movi	r2,-1
    a0c8:	01000044 	movi	r4,1
    a0cc:	d8800c15 	stw	r2,48(sp)
    a0d0:	e0c01015 	stw	r3,64(fp)
    a0d4:	d9000b15 	stw	r4,44(sp)
    a0d8:	d8800615 	stw	r2,24(sp)
    a0dc:	d8002215 	stw	zero,136(sp)
    a0e0:	003c4106 	br	91e8 <__alt_mem_onchip_memory+0xf78091e8>
    a0e4:	d8c00c17 	ldw	r3,48(sp)
    a0e8:	d8c00615 	stw	r3,24(sp)
    a0ec:	003e7006 	br	9ab0 <__alt_mem_onchip_memory+0xf7809ab0>
    a0f0:	04400044 	movi	r17,1
    a0f4:	003b2006 	br	8d78 <__alt_mem_onchip_memory+0xf7808d78>
    a0f8:	000b883a 	mov	r5,zero
    a0fc:	003b3d06 	br	8df4 <__alt_mem_onchip_memory+0xf7808df4>
    a100:	d8800c17 	ldw	r2,48(sp)
    a104:	d8800615 	stw	r2,24(sp)
    a108:	003e6906 	br	9ab0 <__alt_mem_onchip_memory+0xf7809ab0>

0000a10c <__sflush_r>:
    a10c:	2880030b 	ldhu	r2,12(r5)
    a110:	defffb04 	addi	sp,sp,-20
    a114:	dcc00315 	stw	r19,12(sp)
    a118:	dc400115 	stw	r17,4(sp)
    a11c:	dfc00415 	stw	ra,16(sp)
    a120:	dc800215 	stw	r18,8(sp)
    a124:	dc000015 	stw	r16,0(sp)
    a128:	10c0020c 	andi	r3,r2,8
    a12c:	2823883a 	mov	r17,r5
    a130:	2027883a 	mov	r19,r4
    a134:	1800311e 	bne	r3,zero,a1fc <__sflush_r+0xf0>
    a138:	28c00117 	ldw	r3,4(r5)
    a13c:	10820014 	ori	r2,r2,2048
    a140:	2880030d 	sth	r2,12(r5)
    a144:	00c04b0e 	bge	zero,r3,a274 <__sflush_r+0x168>
    a148:	8a000a17 	ldw	r8,40(r17)
    a14c:	40002326 	beq	r8,zero,a1dc <__sflush_r+0xd0>
    a150:	9c000017 	ldw	r16,0(r19)
    a154:	10c4000c 	andi	r3,r2,4096
    a158:	98000015 	stw	zero,0(r19)
    a15c:	18004826 	beq	r3,zero,a280 <__sflush_r+0x174>
    a160:	89801417 	ldw	r6,80(r17)
    a164:	10c0010c 	andi	r3,r2,4
    a168:	18000626 	beq	r3,zero,a184 <__sflush_r+0x78>
    a16c:	88c00117 	ldw	r3,4(r17)
    a170:	88800c17 	ldw	r2,48(r17)
    a174:	30cdc83a 	sub	r6,r6,r3
    a178:	10000226 	beq	r2,zero,a184 <__sflush_r+0x78>
    a17c:	88800f17 	ldw	r2,60(r17)
    a180:	308dc83a 	sub	r6,r6,r2
    a184:	89400717 	ldw	r5,28(r17)
    a188:	000f883a 	mov	r7,zero
    a18c:	9809883a 	mov	r4,r19
    a190:	403ee83a 	callr	r8
    a194:	00ffffc4 	movi	r3,-1
    a198:	10c04426 	beq	r2,r3,a2ac <__sflush_r+0x1a0>
    a19c:	88c0030b 	ldhu	r3,12(r17)
    a1a0:	89000417 	ldw	r4,16(r17)
    a1a4:	88000115 	stw	zero,4(r17)
    a1a8:	197dffcc 	andi	r5,r3,63487
    a1ac:	8940030d 	sth	r5,12(r17)
    a1b0:	89000015 	stw	r4,0(r17)
    a1b4:	18c4000c 	andi	r3,r3,4096
    a1b8:	18002c1e 	bne	r3,zero,a26c <__sflush_r+0x160>
    a1bc:	89400c17 	ldw	r5,48(r17)
    a1c0:	9c000015 	stw	r16,0(r19)
    a1c4:	28000526 	beq	r5,zero,a1dc <__sflush_r+0xd0>
    a1c8:	88801004 	addi	r2,r17,64
    a1cc:	28800226 	beq	r5,r2,a1d8 <__sflush_r+0xcc>
    a1d0:	9809883a 	mov	r4,r19
    a1d4:	000a8780 	call	a878 <_free_r>
    a1d8:	88000c15 	stw	zero,48(r17)
    a1dc:	0005883a 	mov	r2,zero
    a1e0:	dfc00417 	ldw	ra,16(sp)
    a1e4:	dcc00317 	ldw	r19,12(sp)
    a1e8:	dc800217 	ldw	r18,8(sp)
    a1ec:	dc400117 	ldw	r17,4(sp)
    a1f0:	dc000017 	ldw	r16,0(sp)
    a1f4:	dec00504 	addi	sp,sp,20
    a1f8:	f800283a 	ret
    a1fc:	2c800417 	ldw	r18,16(r5)
    a200:	903ff626 	beq	r18,zero,a1dc <__alt_mem_onchip_memory+0xf780a1dc>
    a204:	2c000017 	ldw	r16,0(r5)
    a208:	108000cc 	andi	r2,r2,3
    a20c:	2c800015 	stw	r18,0(r5)
    a210:	84a1c83a 	sub	r16,r16,r18
    a214:	1000131e 	bne	r2,zero,a264 <__sflush_r+0x158>
    a218:	28800517 	ldw	r2,20(r5)
    a21c:	88800215 	stw	r2,8(r17)
    a220:	04000316 	blt	zero,r16,a230 <__sflush_r+0x124>
    a224:	003fed06 	br	a1dc <__alt_mem_onchip_memory+0xf780a1dc>
    a228:	90a5883a 	add	r18,r18,r2
    a22c:	043feb0e 	bge	zero,r16,a1dc <__alt_mem_onchip_memory+0xf780a1dc>
    a230:	88800917 	ldw	r2,36(r17)
    a234:	89400717 	ldw	r5,28(r17)
    a238:	800f883a 	mov	r7,r16
    a23c:	900d883a 	mov	r6,r18
    a240:	9809883a 	mov	r4,r19
    a244:	103ee83a 	callr	r2
    a248:	80a1c83a 	sub	r16,r16,r2
    a24c:	00bff616 	blt	zero,r2,a228 <__alt_mem_onchip_memory+0xf780a228>
    a250:	88c0030b 	ldhu	r3,12(r17)
    a254:	00bfffc4 	movi	r2,-1
    a258:	18c01014 	ori	r3,r3,64
    a25c:	88c0030d 	sth	r3,12(r17)
    a260:	003fdf06 	br	a1e0 <__alt_mem_onchip_memory+0xf780a1e0>
    a264:	0005883a 	mov	r2,zero
    a268:	003fec06 	br	a21c <__alt_mem_onchip_memory+0xf780a21c>
    a26c:	88801415 	stw	r2,80(r17)
    a270:	003fd206 	br	a1bc <__alt_mem_onchip_memory+0xf780a1bc>
    a274:	28c00f17 	ldw	r3,60(r5)
    a278:	00ffb316 	blt	zero,r3,a148 <__alt_mem_onchip_memory+0xf780a148>
    a27c:	003fd706 	br	a1dc <__alt_mem_onchip_memory+0xf780a1dc>
    a280:	89400717 	ldw	r5,28(r17)
    a284:	000d883a 	mov	r6,zero
    a288:	01c00044 	movi	r7,1
    a28c:	9809883a 	mov	r4,r19
    a290:	403ee83a 	callr	r8
    a294:	100d883a 	mov	r6,r2
    a298:	00bfffc4 	movi	r2,-1
    a29c:	30801426 	beq	r6,r2,a2f0 <__sflush_r+0x1e4>
    a2a0:	8880030b 	ldhu	r2,12(r17)
    a2a4:	8a000a17 	ldw	r8,40(r17)
    a2a8:	003fae06 	br	a164 <__alt_mem_onchip_memory+0xf780a164>
    a2ac:	98c00017 	ldw	r3,0(r19)
    a2b0:	183fba26 	beq	r3,zero,a19c <__alt_mem_onchip_memory+0xf780a19c>
    a2b4:	01000744 	movi	r4,29
    a2b8:	19000626 	beq	r3,r4,a2d4 <__sflush_r+0x1c8>
    a2bc:	01000584 	movi	r4,22
    a2c0:	19000426 	beq	r3,r4,a2d4 <__sflush_r+0x1c8>
    a2c4:	88c0030b 	ldhu	r3,12(r17)
    a2c8:	18c01014 	ori	r3,r3,64
    a2cc:	88c0030d 	sth	r3,12(r17)
    a2d0:	003fc306 	br	a1e0 <__alt_mem_onchip_memory+0xf780a1e0>
    a2d4:	8880030b 	ldhu	r2,12(r17)
    a2d8:	88c00417 	ldw	r3,16(r17)
    a2dc:	88000115 	stw	zero,4(r17)
    a2e0:	10bdffcc 	andi	r2,r2,63487
    a2e4:	8880030d 	sth	r2,12(r17)
    a2e8:	88c00015 	stw	r3,0(r17)
    a2ec:	003fb306 	br	a1bc <__alt_mem_onchip_memory+0xf780a1bc>
    a2f0:	98800017 	ldw	r2,0(r19)
    a2f4:	103fea26 	beq	r2,zero,a2a0 <__alt_mem_onchip_memory+0xf780a2a0>
    a2f8:	00c00744 	movi	r3,29
    a2fc:	10c00226 	beq	r2,r3,a308 <__sflush_r+0x1fc>
    a300:	00c00584 	movi	r3,22
    a304:	10c0031e 	bne	r2,r3,a314 <__sflush_r+0x208>
    a308:	9c000015 	stw	r16,0(r19)
    a30c:	0005883a 	mov	r2,zero
    a310:	003fb306 	br	a1e0 <__alt_mem_onchip_memory+0xf780a1e0>
    a314:	88c0030b 	ldhu	r3,12(r17)
    a318:	3005883a 	mov	r2,r6
    a31c:	18c01014 	ori	r3,r3,64
    a320:	88c0030d 	sth	r3,12(r17)
    a324:	003fae06 	br	a1e0 <__alt_mem_onchip_memory+0xf780a1e0>

0000a328 <_fflush_r>:
    a328:	defffd04 	addi	sp,sp,-12
    a32c:	dc000115 	stw	r16,4(sp)
    a330:	dfc00215 	stw	ra,8(sp)
    a334:	2021883a 	mov	r16,r4
    a338:	20000226 	beq	r4,zero,a344 <_fflush_r+0x1c>
    a33c:	20800e17 	ldw	r2,56(r4)
    a340:	10000c26 	beq	r2,zero,a374 <_fflush_r+0x4c>
    a344:	2880030f 	ldh	r2,12(r5)
    a348:	1000051e 	bne	r2,zero,a360 <_fflush_r+0x38>
    a34c:	0005883a 	mov	r2,zero
    a350:	dfc00217 	ldw	ra,8(sp)
    a354:	dc000117 	ldw	r16,4(sp)
    a358:	dec00304 	addi	sp,sp,12
    a35c:	f800283a 	ret
    a360:	8009883a 	mov	r4,r16
    a364:	dfc00217 	ldw	ra,8(sp)
    a368:	dc000117 	ldw	r16,4(sp)
    a36c:	dec00304 	addi	sp,sp,12
    a370:	000a10c1 	jmpi	a10c <__sflush_r>
    a374:	d9400015 	stw	r5,0(sp)
    a378:	000a7040 	call	a704 <__sinit>
    a37c:	d9400017 	ldw	r5,0(sp)
    a380:	003ff006 	br	a344 <__alt_mem_onchip_memory+0xf780a344>

0000a384 <fflush>:
    a384:	20000526 	beq	r4,zero,a39c <fflush+0x18>
    a388:	00800074 	movhi	r2,1
    a38c:	10950604 	addi	r2,r2,21528
    a390:	200b883a 	mov	r5,r4
    a394:	11000017 	ldw	r4,0(r2)
    a398:	000a3281 	jmpi	a328 <_fflush_r>
    a39c:	00800074 	movhi	r2,1
    a3a0:	10950504 	addi	r2,r2,21524
    a3a4:	11000017 	ldw	r4,0(r2)
    a3a8:	01400074 	movhi	r5,1
    a3ac:	2968ca04 	addi	r5,r5,-23768
    a3b0:	000b1081 	jmpi	b108 <_fwalk_reent>

0000a3b4 <__fp_unlock>:
    a3b4:	0005883a 	mov	r2,zero
    a3b8:	f800283a 	ret

0000a3bc <_cleanup_r>:
    a3bc:	01400074 	movhi	r5,1
    a3c0:	297cf204 	addi	r5,r5,-3128
    a3c4:	000b1081 	jmpi	b108 <_fwalk_reent>

0000a3c8 <__sinit.part.1>:
    a3c8:	defff704 	addi	sp,sp,-36
    a3cc:	00c00074 	movhi	r3,1
    a3d0:	dfc00815 	stw	ra,32(sp)
    a3d4:	ddc00715 	stw	r23,28(sp)
    a3d8:	dd800615 	stw	r22,24(sp)
    a3dc:	dd400515 	stw	r21,20(sp)
    a3e0:	dd000415 	stw	r20,16(sp)
    a3e4:	dcc00315 	stw	r19,12(sp)
    a3e8:	dc800215 	stw	r18,8(sp)
    a3ec:	dc400115 	stw	r17,4(sp)
    a3f0:	dc000015 	stw	r16,0(sp)
    a3f4:	18e8ef04 	addi	r3,r3,-23620
    a3f8:	24000117 	ldw	r16,4(r4)
    a3fc:	20c00f15 	stw	r3,60(r4)
    a400:	2080bb04 	addi	r2,r4,748
    a404:	00c000c4 	movi	r3,3
    a408:	20c0b915 	stw	r3,740(r4)
    a40c:	2080ba15 	stw	r2,744(r4)
    a410:	2000b815 	stw	zero,736(r4)
    a414:	05c00204 	movi	r23,8
    a418:	00800104 	movi	r2,4
    a41c:	2025883a 	mov	r18,r4
    a420:	b80d883a 	mov	r6,r23
    a424:	81001704 	addi	r4,r16,92
    a428:	000b883a 	mov	r5,zero
    a42c:	80000015 	stw	zero,0(r16)
    a430:	80000115 	stw	zero,4(r16)
    a434:	80000215 	stw	zero,8(r16)
    a438:	8080030d 	sth	r2,12(r16)
    a43c:	80001915 	stw	zero,100(r16)
    a440:	8000038d 	sth	zero,14(r16)
    a444:	80000415 	stw	zero,16(r16)
    a448:	80000515 	stw	zero,20(r16)
    a44c:	80000615 	stw	zero,24(r16)
    a450:	000c0540 	call	c054 <memset>
    a454:	05800074 	movhi	r22,1
    a458:	94400217 	ldw	r17,8(r18)
    a45c:	05400074 	movhi	r21,1
    a460:	05000074 	movhi	r20,1
    a464:	04c00074 	movhi	r19,1
    a468:	b5b62604 	addi	r22,r22,-10088
    a46c:	ad763d04 	addi	r21,r21,-9996
    a470:	a5365c04 	addi	r20,r20,-9872
    a474:	9cf67304 	addi	r19,r19,-9780
    a478:	85800815 	stw	r22,32(r16)
    a47c:	85400915 	stw	r21,36(r16)
    a480:	85000a15 	stw	r20,40(r16)
    a484:	84c00b15 	stw	r19,44(r16)
    a488:	84000715 	stw	r16,28(r16)
    a48c:	00800284 	movi	r2,10
    a490:	8880030d 	sth	r2,12(r17)
    a494:	00800044 	movi	r2,1
    a498:	b80d883a 	mov	r6,r23
    a49c:	89001704 	addi	r4,r17,92
    a4a0:	000b883a 	mov	r5,zero
    a4a4:	88000015 	stw	zero,0(r17)
    a4a8:	88000115 	stw	zero,4(r17)
    a4ac:	88000215 	stw	zero,8(r17)
    a4b0:	88001915 	stw	zero,100(r17)
    a4b4:	8880038d 	sth	r2,14(r17)
    a4b8:	88000415 	stw	zero,16(r17)
    a4bc:	88000515 	stw	zero,20(r17)
    a4c0:	88000615 	stw	zero,24(r17)
    a4c4:	000c0540 	call	c054 <memset>
    a4c8:	94000317 	ldw	r16,12(r18)
    a4cc:	00800484 	movi	r2,18
    a4d0:	8c400715 	stw	r17,28(r17)
    a4d4:	8d800815 	stw	r22,32(r17)
    a4d8:	8d400915 	stw	r21,36(r17)
    a4dc:	8d000a15 	stw	r20,40(r17)
    a4e0:	8cc00b15 	stw	r19,44(r17)
    a4e4:	8080030d 	sth	r2,12(r16)
    a4e8:	00800084 	movi	r2,2
    a4ec:	80000015 	stw	zero,0(r16)
    a4f0:	80000115 	stw	zero,4(r16)
    a4f4:	80000215 	stw	zero,8(r16)
    a4f8:	80001915 	stw	zero,100(r16)
    a4fc:	8080038d 	sth	r2,14(r16)
    a500:	80000415 	stw	zero,16(r16)
    a504:	80000515 	stw	zero,20(r16)
    a508:	80000615 	stw	zero,24(r16)
    a50c:	b80d883a 	mov	r6,r23
    a510:	000b883a 	mov	r5,zero
    a514:	81001704 	addi	r4,r16,92
    a518:	000c0540 	call	c054 <memset>
    a51c:	00800044 	movi	r2,1
    a520:	84000715 	stw	r16,28(r16)
    a524:	85800815 	stw	r22,32(r16)
    a528:	85400915 	stw	r21,36(r16)
    a52c:	85000a15 	stw	r20,40(r16)
    a530:	84c00b15 	stw	r19,44(r16)
    a534:	90800e15 	stw	r2,56(r18)
    a538:	dfc00817 	ldw	ra,32(sp)
    a53c:	ddc00717 	ldw	r23,28(sp)
    a540:	dd800617 	ldw	r22,24(sp)
    a544:	dd400517 	ldw	r21,20(sp)
    a548:	dd000417 	ldw	r20,16(sp)
    a54c:	dcc00317 	ldw	r19,12(sp)
    a550:	dc800217 	ldw	r18,8(sp)
    a554:	dc400117 	ldw	r17,4(sp)
    a558:	dc000017 	ldw	r16,0(sp)
    a55c:	dec00904 	addi	sp,sp,36
    a560:	f800283a 	ret

0000a564 <__fp_lock>:
    a564:	0005883a 	mov	r2,zero
    a568:	f800283a 	ret

0000a56c <__sfmoreglue>:
    a56c:	defffc04 	addi	sp,sp,-16
    a570:	dc400115 	stw	r17,4(sp)
    a574:	2c7fffc4 	addi	r17,r5,-1
    a578:	8c401a24 	muli	r17,r17,104
    a57c:	dc800215 	stw	r18,8(sp)
    a580:	2825883a 	mov	r18,r5
    a584:	89401d04 	addi	r5,r17,116
    a588:	dc000015 	stw	r16,0(sp)
    a58c:	dfc00315 	stw	ra,12(sp)
    a590:	000b4c00 	call	b4c0 <_malloc_r>
    a594:	1021883a 	mov	r16,r2
    a598:	10000726 	beq	r2,zero,a5b8 <__sfmoreglue+0x4c>
    a59c:	11000304 	addi	r4,r2,12
    a5a0:	10000015 	stw	zero,0(r2)
    a5a4:	14800115 	stw	r18,4(r2)
    a5a8:	11000215 	stw	r4,8(r2)
    a5ac:	89801a04 	addi	r6,r17,104
    a5b0:	000b883a 	mov	r5,zero
    a5b4:	000c0540 	call	c054 <memset>
    a5b8:	8005883a 	mov	r2,r16
    a5bc:	dfc00317 	ldw	ra,12(sp)
    a5c0:	dc800217 	ldw	r18,8(sp)
    a5c4:	dc400117 	ldw	r17,4(sp)
    a5c8:	dc000017 	ldw	r16,0(sp)
    a5cc:	dec00404 	addi	sp,sp,16
    a5d0:	f800283a 	ret

0000a5d4 <__sfp>:
    a5d4:	defffb04 	addi	sp,sp,-20
    a5d8:	dc000015 	stw	r16,0(sp)
    a5dc:	04000074 	movhi	r16,1
    a5e0:	84150504 	addi	r16,r16,21524
    a5e4:	dcc00315 	stw	r19,12(sp)
    a5e8:	2027883a 	mov	r19,r4
    a5ec:	81000017 	ldw	r4,0(r16)
    a5f0:	dfc00415 	stw	ra,16(sp)
    a5f4:	dc800215 	stw	r18,8(sp)
    a5f8:	20800e17 	ldw	r2,56(r4)
    a5fc:	dc400115 	stw	r17,4(sp)
    a600:	1000021e 	bne	r2,zero,a60c <__sfp+0x38>
    a604:	000a3c80 	call	a3c8 <__sinit.part.1>
    a608:	81000017 	ldw	r4,0(r16)
    a60c:	2480b804 	addi	r18,r4,736
    a610:	047fffc4 	movi	r17,-1
    a614:	91000117 	ldw	r4,4(r18)
    a618:	94000217 	ldw	r16,8(r18)
    a61c:	213fffc4 	addi	r4,r4,-1
    a620:	20000a16 	blt	r4,zero,a64c <__sfp+0x78>
    a624:	8080030f 	ldh	r2,12(r16)
    a628:	10000c26 	beq	r2,zero,a65c <__sfp+0x88>
    a62c:	80c01d04 	addi	r3,r16,116
    a630:	00000206 	br	a63c <__sfp+0x68>
    a634:	18bfe60f 	ldh	r2,-104(r3)
    a638:	10000826 	beq	r2,zero,a65c <__sfp+0x88>
    a63c:	213fffc4 	addi	r4,r4,-1
    a640:	1c3ffd04 	addi	r16,r3,-12
    a644:	18c01a04 	addi	r3,r3,104
    a648:	247ffa1e 	bne	r4,r17,a634 <__alt_mem_onchip_memory+0xf780a634>
    a64c:	90800017 	ldw	r2,0(r18)
    a650:	10001d26 	beq	r2,zero,a6c8 <__sfp+0xf4>
    a654:	1025883a 	mov	r18,r2
    a658:	003fee06 	br	a614 <__alt_mem_onchip_memory+0xf780a614>
    a65c:	00bfffc4 	movi	r2,-1
    a660:	8080038d 	sth	r2,14(r16)
    a664:	00800044 	movi	r2,1
    a668:	8080030d 	sth	r2,12(r16)
    a66c:	80001915 	stw	zero,100(r16)
    a670:	80000015 	stw	zero,0(r16)
    a674:	80000215 	stw	zero,8(r16)
    a678:	80000115 	stw	zero,4(r16)
    a67c:	80000415 	stw	zero,16(r16)
    a680:	80000515 	stw	zero,20(r16)
    a684:	80000615 	stw	zero,24(r16)
    a688:	01800204 	movi	r6,8
    a68c:	000b883a 	mov	r5,zero
    a690:	81001704 	addi	r4,r16,92
    a694:	000c0540 	call	c054 <memset>
    a698:	8005883a 	mov	r2,r16
    a69c:	80000c15 	stw	zero,48(r16)
    a6a0:	80000d15 	stw	zero,52(r16)
    a6a4:	80001115 	stw	zero,68(r16)
    a6a8:	80001215 	stw	zero,72(r16)
    a6ac:	dfc00417 	ldw	ra,16(sp)
    a6b0:	dcc00317 	ldw	r19,12(sp)
    a6b4:	dc800217 	ldw	r18,8(sp)
    a6b8:	dc400117 	ldw	r17,4(sp)
    a6bc:	dc000017 	ldw	r16,0(sp)
    a6c0:	dec00504 	addi	sp,sp,20
    a6c4:	f800283a 	ret
    a6c8:	01400104 	movi	r5,4
    a6cc:	9809883a 	mov	r4,r19
    a6d0:	000a56c0 	call	a56c <__sfmoreglue>
    a6d4:	90800015 	stw	r2,0(r18)
    a6d8:	103fde1e 	bne	r2,zero,a654 <__alt_mem_onchip_memory+0xf780a654>
    a6dc:	00800304 	movi	r2,12
    a6e0:	98800015 	stw	r2,0(r19)
    a6e4:	0005883a 	mov	r2,zero
    a6e8:	003ff006 	br	a6ac <__alt_mem_onchip_memory+0xf780a6ac>

0000a6ec <_cleanup>:
    a6ec:	00800074 	movhi	r2,1
    a6f0:	10950504 	addi	r2,r2,21524
    a6f4:	11000017 	ldw	r4,0(r2)
    a6f8:	01400074 	movhi	r5,1
    a6fc:	297cf204 	addi	r5,r5,-3128
    a700:	000b1081 	jmpi	b108 <_fwalk_reent>

0000a704 <__sinit>:
    a704:	20800e17 	ldw	r2,56(r4)
    a708:	10000126 	beq	r2,zero,a710 <__sinit+0xc>
    a70c:	f800283a 	ret
    a710:	000a3c81 	jmpi	a3c8 <__sinit.part.1>

0000a714 <__sfp_lock_acquire>:
    a714:	f800283a 	ret

0000a718 <__sfp_lock_release>:
    a718:	f800283a 	ret

0000a71c <__sinit_lock_acquire>:
    a71c:	f800283a 	ret

0000a720 <__sinit_lock_release>:
    a720:	f800283a 	ret

0000a724 <__fp_lock_all>:
    a724:	00800074 	movhi	r2,1
    a728:	10950604 	addi	r2,r2,21528
    a72c:	11000017 	ldw	r4,0(r2)
    a730:	01400074 	movhi	r5,1
    a734:	29695904 	addi	r5,r5,-23196
    a738:	000b0441 	jmpi	b044 <_fwalk>

0000a73c <__fp_unlock_all>:
    a73c:	00800074 	movhi	r2,1
    a740:	10950604 	addi	r2,r2,21528
    a744:	11000017 	ldw	r4,0(r2)
    a748:	01400074 	movhi	r5,1
    a74c:	2968ed04 	addi	r5,r5,-23628
    a750:	000b0441 	jmpi	b044 <_fwalk>

0000a754 <_malloc_trim_r>:
    a754:	defffb04 	addi	sp,sp,-20
    a758:	dcc00315 	stw	r19,12(sp)
    a75c:	04c00074 	movhi	r19,1
    a760:	dc800215 	stw	r18,8(sp)
    a764:	dc400115 	stw	r17,4(sp)
    a768:	dc000015 	stw	r16,0(sp)
    a76c:	dfc00415 	stw	ra,16(sp)
    a770:	2821883a 	mov	r16,r5
    a774:	9ccf7c04 	addi	r19,r19,15856
    a778:	2025883a 	mov	r18,r4
    a77c:	0010ddc0 	call	10ddc <__malloc_lock>
    a780:	98800217 	ldw	r2,8(r19)
    a784:	14400117 	ldw	r17,4(r2)
    a788:	00bfff04 	movi	r2,-4
    a78c:	88a2703a 	and	r17,r17,r2
    a790:	8c21c83a 	sub	r16,r17,r16
    a794:	8403fbc4 	addi	r16,r16,4079
    a798:	8020d33a 	srli	r16,r16,12
    a79c:	0083ffc4 	movi	r2,4095
    a7a0:	843fffc4 	addi	r16,r16,-1
    a7a4:	8020933a 	slli	r16,r16,12
    a7a8:	1400060e 	bge	r2,r16,a7c4 <_malloc_trim_r+0x70>
    a7ac:	000b883a 	mov	r5,zero
    a7b0:	9009883a 	mov	r4,r18
    a7b4:	000d8440 	call	d844 <_sbrk_r>
    a7b8:	98c00217 	ldw	r3,8(r19)
    a7bc:	1c47883a 	add	r3,r3,r17
    a7c0:	10c00a26 	beq	r2,r3,a7ec <_malloc_trim_r+0x98>
    a7c4:	9009883a 	mov	r4,r18
    a7c8:	0010e000 	call	10e00 <__malloc_unlock>
    a7cc:	0005883a 	mov	r2,zero
    a7d0:	dfc00417 	ldw	ra,16(sp)
    a7d4:	dcc00317 	ldw	r19,12(sp)
    a7d8:	dc800217 	ldw	r18,8(sp)
    a7dc:	dc400117 	ldw	r17,4(sp)
    a7e0:	dc000017 	ldw	r16,0(sp)
    a7e4:	dec00504 	addi	sp,sp,20
    a7e8:	f800283a 	ret
    a7ec:	040bc83a 	sub	r5,zero,r16
    a7f0:	9009883a 	mov	r4,r18
    a7f4:	000d8440 	call	d844 <_sbrk_r>
    a7f8:	00ffffc4 	movi	r3,-1
    a7fc:	10c00d26 	beq	r2,r3,a834 <_malloc_trim_r+0xe0>
    a800:	00c00074 	movhi	r3,1
    a804:	18dbee04 	addi	r3,r3,28600
    a808:	18800017 	ldw	r2,0(r3)
    a80c:	99000217 	ldw	r4,8(r19)
    a810:	8c23c83a 	sub	r17,r17,r16
    a814:	8c400054 	ori	r17,r17,1
    a818:	1421c83a 	sub	r16,r2,r16
    a81c:	24400115 	stw	r17,4(r4)
    a820:	9009883a 	mov	r4,r18
    a824:	1c000015 	stw	r16,0(r3)
    a828:	0010e000 	call	10e00 <__malloc_unlock>
    a82c:	00800044 	movi	r2,1
    a830:	003fe706 	br	a7d0 <__alt_mem_onchip_memory+0xf780a7d0>
    a834:	000b883a 	mov	r5,zero
    a838:	9009883a 	mov	r4,r18
    a83c:	000d8440 	call	d844 <_sbrk_r>
    a840:	99000217 	ldw	r4,8(r19)
    a844:	014003c4 	movi	r5,15
    a848:	1107c83a 	sub	r3,r2,r4
    a84c:	28ffdd0e 	bge	r5,r3,a7c4 <__alt_mem_onchip_memory+0xf780a7c4>
    a850:	01400074 	movhi	r5,1
    a854:	29550804 	addi	r5,r5,21536
    a858:	29400017 	ldw	r5,0(r5)
    a85c:	18c00054 	ori	r3,r3,1
    a860:	20c00115 	stw	r3,4(r4)
    a864:	00c00074 	movhi	r3,1
    a868:	1145c83a 	sub	r2,r2,r5
    a86c:	18dbee04 	addi	r3,r3,28600
    a870:	18800015 	stw	r2,0(r3)
    a874:	003fd306 	br	a7c4 <__alt_mem_onchip_memory+0xf780a7c4>

0000a878 <_free_r>:
    a878:	28004126 	beq	r5,zero,a980 <_free_r+0x108>
    a87c:	defffd04 	addi	sp,sp,-12
    a880:	dc400115 	stw	r17,4(sp)
    a884:	dc000015 	stw	r16,0(sp)
    a888:	2023883a 	mov	r17,r4
    a88c:	2821883a 	mov	r16,r5
    a890:	dfc00215 	stw	ra,8(sp)
    a894:	0010ddc0 	call	10ddc <__malloc_lock>
    a898:	81ffff17 	ldw	r7,-4(r16)
    a89c:	00bfff84 	movi	r2,-2
    a8a0:	01000074 	movhi	r4,1
    a8a4:	81bffe04 	addi	r6,r16,-8
    a8a8:	3884703a 	and	r2,r7,r2
    a8ac:	210f7c04 	addi	r4,r4,15856
    a8b0:	308b883a 	add	r5,r6,r2
    a8b4:	2a400117 	ldw	r9,4(r5)
    a8b8:	22000217 	ldw	r8,8(r4)
    a8bc:	00ffff04 	movi	r3,-4
    a8c0:	48c6703a 	and	r3,r9,r3
    a8c4:	2a005726 	beq	r5,r8,aa24 <_free_r+0x1ac>
    a8c8:	28c00115 	stw	r3,4(r5)
    a8cc:	39c0004c 	andi	r7,r7,1
    a8d0:	3800091e 	bne	r7,zero,a8f8 <_free_r+0x80>
    a8d4:	823ffe17 	ldw	r8,-8(r16)
    a8d8:	22400204 	addi	r9,r4,8
    a8dc:	320dc83a 	sub	r6,r6,r8
    a8e0:	31c00217 	ldw	r7,8(r6)
    a8e4:	1205883a 	add	r2,r2,r8
    a8e8:	3a406526 	beq	r7,r9,aa80 <_free_r+0x208>
    a8ec:	32000317 	ldw	r8,12(r6)
    a8f0:	3a000315 	stw	r8,12(r7)
    a8f4:	41c00215 	stw	r7,8(r8)
    a8f8:	28cf883a 	add	r7,r5,r3
    a8fc:	39c00117 	ldw	r7,4(r7)
    a900:	39c0004c 	andi	r7,r7,1
    a904:	38003a26 	beq	r7,zero,a9f0 <_free_r+0x178>
    a908:	10c00054 	ori	r3,r2,1
    a90c:	30c00115 	stw	r3,4(r6)
    a910:	3087883a 	add	r3,r6,r2
    a914:	18800015 	stw	r2,0(r3)
    a918:	00c07fc4 	movi	r3,511
    a91c:	18801936 	bltu	r3,r2,a984 <_free_r+0x10c>
    a920:	1004d0fa 	srli	r2,r2,3
    a924:	01c00044 	movi	r7,1
    a928:	21400117 	ldw	r5,4(r4)
    a92c:	10c00044 	addi	r3,r2,1
    a930:	18c7883a 	add	r3,r3,r3
    a934:	1005d0ba 	srai	r2,r2,2
    a938:	18c7883a 	add	r3,r3,r3
    a93c:	18c7883a 	add	r3,r3,r3
    a940:	1907883a 	add	r3,r3,r4
    a944:	3884983a 	sll	r2,r7,r2
    a948:	19c00017 	ldw	r7,0(r3)
    a94c:	1a3ffe04 	addi	r8,r3,-8
    a950:	1144b03a 	or	r2,r2,r5
    a954:	32000315 	stw	r8,12(r6)
    a958:	31c00215 	stw	r7,8(r6)
    a95c:	20800115 	stw	r2,4(r4)
    a960:	19800015 	stw	r6,0(r3)
    a964:	39800315 	stw	r6,12(r7)
    a968:	8809883a 	mov	r4,r17
    a96c:	dfc00217 	ldw	ra,8(sp)
    a970:	dc400117 	ldw	r17,4(sp)
    a974:	dc000017 	ldw	r16,0(sp)
    a978:	dec00304 	addi	sp,sp,12
    a97c:	0010e001 	jmpi	10e00 <__malloc_unlock>
    a980:	f800283a 	ret
    a984:	100ad27a 	srli	r5,r2,9
    a988:	00c00104 	movi	r3,4
    a98c:	19404a36 	bltu	r3,r5,aab8 <_free_r+0x240>
    a990:	100ad1ba 	srli	r5,r2,6
    a994:	28c00e44 	addi	r3,r5,57
    a998:	18c7883a 	add	r3,r3,r3
    a99c:	29400e04 	addi	r5,r5,56
    a9a0:	18c7883a 	add	r3,r3,r3
    a9a4:	18c7883a 	add	r3,r3,r3
    a9a8:	1909883a 	add	r4,r3,r4
    a9ac:	20c00017 	ldw	r3,0(r4)
    a9b0:	01c00074 	movhi	r7,1
    a9b4:	213ffe04 	addi	r4,r4,-8
    a9b8:	39cf7c04 	addi	r7,r7,15856
    a9bc:	20c04426 	beq	r4,r3,aad0 <_free_r+0x258>
    a9c0:	01ffff04 	movi	r7,-4
    a9c4:	19400117 	ldw	r5,4(r3)
    a9c8:	29ca703a 	and	r5,r5,r7
    a9cc:	1140022e 	bgeu	r2,r5,a9d8 <_free_r+0x160>
    a9d0:	18c00217 	ldw	r3,8(r3)
    a9d4:	20fffb1e 	bne	r4,r3,a9c4 <__alt_mem_onchip_memory+0xf780a9c4>
    a9d8:	19000317 	ldw	r4,12(r3)
    a9dc:	31000315 	stw	r4,12(r6)
    a9e0:	30c00215 	stw	r3,8(r6)
    a9e4:	21800215 	stw	r6,8(r4)
    a9e8:	19800315 	stw	r6,12(r3)
    a9ec:	003fde06 	br	a968 <__alt_mem_onchip_memory+0xf780a968>
    a9f0:	29c00217 	ldw	r7,8(r5)
    a9f4:	10c5883a 	add	r2,r2,r3
    a9f8:	00c00074 	movhi	r3,1
    a9fc:	18cf7e04 	addi	r3,r3,15864
    aa00:	38c03b26 	beq	r7,r3,aaf0 <_free_r+0x278>
    aa04:	2a000317 	ldw	r8,12(r5)
    aa08:	11400054 	ori	r5,r2,1
    aa0c:	3087883a 	add	r3,r6,r2
    aa10:	3a000315 	stw	r8,12(r7)
    aa14:	41c00215 	stw	r7,8(r8)
    aa18:	31400115 	stw	r5,4(r6)
    aa1c:	18800015 	stw	r2,0(r3)
    aa20:	003fbd06 	br	a918 <__alt_mem_onchip_memory+0xf780a918>
    aa24:	39c0004c 	andi	r7,r7,1
    aa28:	10c5883a 	add	r2,r2,r3
    aa2c:	3800071e 	bne	r7,zero,aa4c <_free_r+0x1d4>
    aa30:	81fffe17 	ldw	r7,-8(r16)
    aa34:	31cdc83a 	sub	r6,r6,r7
    aa38:	30c00317 	ldw	r3,12(r6)
    aa3c:	31400217 	ldw	r5,8(r6)
    aa40:	11c5883a 	add	r2,r2,r7
    aa44:	28c00315 	stw	r3,12(r5)
    aa48:	19400215 	stw	r5,8(r3)
    aa4c:	10c00054 	ori	r3,r2,1
    aa50:	30c00115 	stw	r3,4(r6)
    aa54:	00c00074 	movhi	r3,1
    aa58:	18d50904 	addi	r3,r3,21540
    aa5c:	18c00017 	ldw	r3,0(r3)
    aa60:	21800215 	stw	r6,8(r4)
    aa64:	10ffc036 	bltu	r2,r3,a968 <__alt_mem_onchip_memory+0xf780a968>
    aa68:	00800074 	movhi	r2,1
    aa6c:	109be204 	addi	r2,r2,28552
    aa70:	11400017 	ldw	r5,0(r2)
    aa74:	8809883a 	mov	r4,r17
    aa78:	000a7540 	call	a754 <_malloc_trim_r>
    aa7c:	003fba06 	br	a968 <__alt_mem_onchip_memory+0xf780a968>
    aa80:	28c9883a 	add	r4,r5,r3
    aa84:	21000117 	ldw	r4,4(r4)
    aa88:	2100004c 	andi	r4,r4,1
    aa8c:	2000391e 	bne	r4,zero,ab74 <_free_r+0x2fc>
    aa90:	29c00217 	ldw	r7,8(r5)
    aa94:	29000317 	ldw	r4,12(r5)
    aa98:	1885883a 	add	r2,r3,r2
    aa9c:	10c00054 	ori	r3,r2,1
    aaa0:	39000315 	stw	r4,12(r7)
    aaa4:	21c00215 	stw	r7,8(r4)
    aaa8:	30c00115 	stw	r3,4(r6)
    aaac:	308d883a 	add	r6,r6,r2
    aab0:	30800015 	stw	r2,0(r6)
    aab4:	003fac06 	br	a968 <__alt_mem_onchip_memory+0xf780a968>
    aab8:	00c00504 	movi	r3,20
    aabc:	19401536 	bltu	r3,r5,ab14 <_free_r+0x29c>
    aac0:	28c01704 	addi	r3,r5,92
    aac4:	18c7883a 	add	r3,r3,r3
    aac8:	294016c4 	addi	r5,r5,91
    aacc:	003fb406 	br	a9a0 <__alt_mem_onchip_memory+0xf780a9a0>
    aad0:	280bd0ba 	srai	r5,r5,2
    aad4:	00c00044 	movi	r3,1
    aad8:	38800117 	ldw	r2,4(r7)
    aadc:	194a983a 	sll	r5,r3,r5
    aae0:	2007883a 	mov	r3,r4
    aae4:	2884b03a 	or	r2,r5,r2
    aae8:	38800115 	stw	r2,4(r7)
    aaec:	003fbb06 	br	a9dc <__alt_mem_onchip_memory+0xf780a9dc>
    aaf0:	21800515 	stw	r6,20(r4)
    aaf4:	21800415 	stw	r6,16(r4)
    aaf8:	10c00054 	ori	r3,r2,1
    aafc:	31c00315 	stw	r7,12(r6)
    ab00:	31c00215 	stw	r7,8(r6)
    ab04:	30c00115 	stw	r3,4(r6)
    ab08:	308d883a 	add	r6,r6,r2
    ab0c:	30800015 	stw	r2,0(r6)
    ab10:	003f9506 	br	a968 <__alt_mem_onchip_memory+0xf780a968>
    ab14:	00c01504 	movi	r3,84
    ab18:	19400536 	bltu	r3,r5,ab30 <_free_r+0x2b8>
    ab1c:	100ad33a 	srli	r5,r2,12
    ab20:	28c01bc4 	addi	r3,r5,111
    ab24:	18c7883a 	add	r3,r3,r3
    ab28:	29401b84 	addi	r5,r5,110
    ab2c:	003f9c06 	br	a9a0 <__alt_mem_onchip_memory+0xf780a9a0>
    ab30:	00c05504 	movi	r3,340
    ab34:	19400536 	bltu	r3,r5,ab4c <_free_r+0x2d4>
    ab38:	100ad3fa 	srli	r5,r2,15
    ab3c:	28c01e04 	addi	r3,r5,120
    ab40:	18c7883a 	add	r3,r3,r3
    ab44:	29401dc4 	addi	r5,r5,119
    ab48:	003f9506 	br	a9a0 <__alt_mem_onchip_memory+0xf780a9a0>
    ab4c:	00c15504 	movi	r3,1364
    ab50:	19400536 	bltu	r3,r5,ab68 <_free_r+0x2f0>
    ab54:	100ad4ba 	srli	r5,r2,18
    ab58:	28c01f44 	addi	r3,r5,125
    ab5c:	18c7883a 	add	r3,r3,r3
    ab60:	29401f04 	addi	r5,r5,124
    ab64:	003f8e06 	br	a9a0 <__alt_mem_onchip_memory+0xf780a9a0>
    ab68:	00c03f84 	movi	r3,254
    ab6c:	01401f84 	movi	r5,126
    ab70:	003f8b06 	br	a9a0 <__alt_mem_onchip_memory+0xf780a9a0>
    ab74:	10c00054 	ori	r3,r2,1
    ab78:	30c00115 	stw	r3,4(r6)
    ab7c:	308d883a 	add	r6,r6,r2
    ab80:	30800015 	stw	r2,0(r6)
    ab84:	003f7806 	br	a968 <__alt_mem_onchip_memory+0xf780a968>

0000ab88 <__sfvwrite_r>:
    ab88:	30800217 	ldw	r2,8(r6)
    ab8c:	10006726 	beq	r2,zero,ad2c <__sfvwrite_r+0x1a4>
    ab90:	28c0030b 	ldhu	r3,12(r5)
    ab94:	defff404 	addi	sp,sp,-48
    ab98:	dd400715 	stw	r21,28(sp)
    ab9c:	dd000615 	stw	r20,24(sp)
    aba0:	dc000215 	stw	r16,8(sp)
    aba4:	dfc00b15 	stw	ra,44(sp)
    aba8:	df000a15 	stw	fp,40(sp)
    abac:	ddc00915 	stw	r23,36(sp)
    abb0:	dd800815 	stw	r22,32(sp)
    abb4:	dcc00515 	stw	r19,20(sp)
    abb8:	dc800415 	stw	r18,16(sp)
    abbc:	dc400315 	stw	r17,12(sp)
    abc0:	1880020c 	andi	r2,r3,8
    abc4:	2821883a 	mov	r16,r5
    abc8:	202b883a 	mov	r21,r4
    abcc:	3029883a 	mov	r20,r6
    abd0:	10002726 	beq	r2,zero,ac70 <__sfvwrite_r+0xe8>
    abd4:	28800417 	ldw	r2,16(r5)
    abd8:	10002526 	beq	r2,zero,ac70 <__sfvwrite_r+0xe8>
    abdc:	1880008c 	andi	r2,r3,2
    abe0:	a4400017 	ldw	r17,0(r20)
    abe4:	10002a26 	beq	r2,zero,ac90 <__sfvwrite_r+0x108>
    abe8:	05a00034 	movhi	r22,32768
    abec:	0027883a 	mov	r19,zero
    abf0:	0025883a 	mov	r18,zero
    abf4:	b5bf0004 	addi	r22,r22,-1024
    abf8:	980d883a 	mov	r6,r19
    abfc:	a809883a 	mov	r4,r21
    ac00:	90004626 	beq	r18,zero,ad1c <__sfvwrite_r+0x194>
    ac04:	900f883a 	mov	r7,r18
    ac08:	b480022e 	bgeu	r22,r18,ac14 <__sfvwrite_r+0x8c>
    ac0c:	01e00034 	movhi	r7,32768
    ac10:	39ff0004 	addi	r7,r7,-1024
    ac14:	80800917 	ldw	r2,36(r16)
    ac18:	81400717 	ldw	r5,28(r16)
    ac1c:	103ee83a 	callr	r2
    ac20:	0080570e 	bge	zero,r2,ad80 <__sfvwrite_r+0x1f8>
    ac24:	a0c00217 	ldw	r3,8(r20)
    ac28:	98a7883a 	add	r19,r19,r2
    ac2c:	90a5c83a 	sub	r18,r18,r2
    ac30:	1885c83a 	sub	r2,r3,r2
    ac34:	a0800215 	stw	r2,8(r20)
    ac38:	103fef1e 	bne	r2,zero,abf8 <__alt_mem_onchip_memory+0xf780abf8>
    ac3c:	0005883a 	mov	r2,zero
    ac40:	dfc00b17 	ldw	ra,44(sp)
    ac44:	df000a17 	ldw	fp,40(sp)
    ac48:	ddc00917 	ldw	r23,36(sp)
    ac4c:	dd800817 	ldw	r22,32(sp)
    ac50:	dd400717 	ldw	r21,28(sp)
    ac54:	dd000617 	ldw	r20,24(sp)
    ac58:	dcc00517 	ldw	r19,20(sp)
    ac5c:	dc800417 	ldw	r18,16(sp)
    ac60:	dc400317 	ldw	r17,12(sp)
    ac64:	dc000217 	ldw	r16,8(sp)
    ac68:	dec00c04 	addi	sp,sp,48
    ac6c:	f800283a 	ret
    ac70:	800b883a 	mov	r5,r16
    ac74:	a809883a 	mov	r4,r21
    ac78:	00087300 	call	8730 <__swsetup_r>
    ac7c:	1000eb1e 	bne	r2,zero,b02c <__sfvwrite_r+0x4a4>
    ac80:	80c0030b 	ldhu	r3,12(r16)
    ac84:	a4400017 	ldw	r17,0(r20)
    ac88:	1880008c 	andi	r2,r3,2
    ac8c:	103fd61e 	bne	r2,zero,abe8 <__alt_mem_onchip_memory+0xf780abe8>
    ac90:	1880004c 	andi	r2,r3,1
    ac94:	10003f1e 	bne	r2,zero,ad94 <__sfvwrite_r+0x20c>
    ac98:	0039883a 	mov	fp,zero
    ac9c:	0025883a 	mov	r18,zero
    aca0:	90001a26 	beq	r18,zero,ad0c <__sfvwrite_r+0x184>
    aca4:	1880800c 	andi	r2,r3,512
    aca8:	84c00217 	ldw	r19,8(r16)
    acac:	10002126 	beq	r2,zero,ad34 <__sfvwrite_r+0x1ac>
    acb0:	982f883a 	mov	r23,r19
    acb4:	94c09336 	bltu	r18,r19,af04 <__sfvwrite_r+0x37c>
    acb8:	1881200c 	andi	r2,r3,1152
    acbc:	10009e1e 	bne	r2,zero,af38 <__sfvwrite_r+0x3b0>
    acc0:	81000017 	ldw	r4,0(r16)
    acc4:	b80d883a 	mov	r6,r23
    acc8:	e00b883a 	mov	r5,fp
    accc:	000bef80 	call	bef8 <memmove>
    acd0:	80c00217 	ldw	r3,8(r16)
    acd4:	81000017 	ldw	r4,0(r16)
    acd8:	9005883a 	mov	r2,r18
    acdc:	1ce7c83a 	sub	r19,r3,r19
    ace0:	25cf883a 	add	r7,r4,r23
    ace4:	84c00215 	stw	r19,8(r16)
    ace8:	81c00015 	stw	r7,0(r16)
    acec:	a0c00217 	ldw	r3,8(r20)
    acf0:	e0b9883a 	add	fp,fp,r2
    acf4:	90a5c83a 	sub	r18,r18,r2
    acf8:	18a7c83a 	sub	r19,r3,r2
    acfc:	a4c00215 	stw	r19,8(r20)
    ad00:	983fce26 	beq	r19,zero,ac3c <__alt_mem_onchip_memory+0xf780ac3c>
    ad04:	80c0030b 	ldhu	r3,12(r16)
    ad08:	903fe61e 	bne	r18,zero,aca4 <__alt_mem_onchip_memory+0xf780aca4>
    ad0c:	8f000017 	ldw	fp,0(r17)
    ad10:	8c800117 	ldw	r18,4(r17)
    ad14:	8c400204 	addi	r17,r17,8
    ad18:	003fe106 	br	aca0 <__alt_mem_onchip_memory+0xf780aca0>
    ad1c:	8cc00017 	ldw	r19,0(r17)
    ad20:	8c800117 	ldw	r18,4(r17)
    ad24:	8c400204 	addi	r17,r17,8
    ad28:	003fb306 	br	abf8 <__alt_mem_onchip_memory+0xf780abf8>
    ad2c:	0005883a 	mov	r2,zero
    ad30:	f800283a 	ret
    ad34:	81000017 	ldw	r4,0(r16)
    ad38:	80800417 	ldw	r2,16(r16)
    ad3c:	11005736 	bltu	r2,r4,ae9c <__sfvwrite_r+0x314>
    ad40:	85c00517 	ldw	r23,20(r16)
    ad44:	95c05536 	bltu	r18,r23,ae9c <__sfvwrite_r+0x314>
    ad48:	00a00034 	movhi	r2,32768
    ad4c:	10bfffc4 	addi	r2,r2,-1
    ad50:	9009883a 	mov	r4,r18
    ad54:	1480012e 	bgeu	r2,r18,ad5c <__sfvwrite_r+0x1d4>
    ad58:	1009883a 	mov	r4,r2
    ad5c:	b80b883a 	mov	r5,r23
    ad60:	0005f780 	call	5f78 <__divsi3>
    ad64:	15cf383a 	mul	r7,r2,r23
    ad68:	81400717 	ldw	r5,28(r16)
    ad6c:	80800917 	ldw	r2,36(r16)
    ad70:	e00d883a 	mov	r6,fp
    ad74:	a809883a 	mov	r4,r21
    ad78:	103ee83a 	callr	r2
    ad7c:	00bfdb16 	blt	zero,r2,acec <__alt_mem_onchip_memory+0xf780acec>
    ad80:	8080030b 	ldhu	r2,12(r16)
    ad84:	10801014 	ori	r2,r2,64
    ad88:	8080030d 	sth	r2,12(r16)
    ad8c:	00bfffc4 	movi	r2,-1
    ad90:	003fab06 	br	ac40 <__alt_mem_onchip_memory+0xf780ac40>
    ad94:	0027883a 	mov	r19,zero
    ad98:	0011883a 	mov	r8,zero
    ad9c:	0039883a 	mov	fp,zero
    ada0:	0025883a 	mov	r18,zero
    ada4:	90001f26 	beq	r18,zero,ae24 <__sfvwrite_r+0x29c>
    ada8:	40005a26 	beq	r8,zero,af14 <__sfvwrite_r+0x38c>
    adac:	982d883a 	mov	r22,r19
    adb0:	94c0012e 	bgeu	r18,r19,adb8 <__sfvwrite_r+0x230>
    adb4:	902d883a 	mov	r22,r18
    adb8:	81000017 	ldw	r4,0(r16)
    adbc:	80800417 	ldw	r2,16(r16)
    adc0:	b02f883a 	mov	r23,r22
    adc4:	81c00517 	ldw	r7,20(r16)
    adc8:	1100032e 	bgeu	r2,r4,add8 <__sfvwrite_r+0x250>
    adcc:	80c00217 	ldw	r3,8(r16)
    add0:	38c7883a 	add	r3,r7,r3
    add4:	1d801816 	blt	r3,r22,ae38 <__sfvwrite_r+0x2b0>
    add8:	b1c03e16 	blt	r22,r7,aed4 <__sfvwrite_r+0x34c>
    addc:	80800917 	ldw	r2,36(r16)
    ade0:	81400717 	ldw	r5,28(r16)
    ade4:	e00d883a 	mov	r6,fp
    ade8:	da000115 	stw	r8,4(sp)
    adec:	a809883a 	mov	r4,r21
    adf0:	103ee83a 	callr	r2
    adf4:	102f883a 	mov	r23,r2
    adf8:	da000117 	ldw	r8,4(sp)
    adfc:	00bfe00e 	bge	zero,r2,ad80 <__alt_mem_onchip_memory+0xf780ad80>
    ae00:	9de7c83a 	sub	r19,r19,r23
    ae04:	98001f26 	beq	r19,zero,ae84 <__sfvwrite_r+0x2fc>
    ae08:	a0800217 	ldw	r2,8(r20)
    ae0c:	e5f9883a 	add	fp,fp,r23
    ae10:	95e5c83a 	sub	r18,r18,r23
    ae14:	15efc83a 	sub	r23,r2,r23
    ae18:	a5c00215 	stw	r23,8(r20)
    ae1c:	b83f8726 	beq	r23,zero,ac3c <__alt_mem_onchip_memory+0xf780ac3c>
    ae20:	903fe11e 	bne	r18,zero,ada8 <__alt_mem_onchip_memory+0xf780ada8>
    ae24:	8f000017 	ldw	fp,0(r17)
    ae28:	8c800117 	ldw	r18,4(r17)
    ae2c:	0011883a 	mov	r8,zero
    ae30:	8c400204 	addi	r17,r17,8
    ae34:	003fdb06 	br	ada4 <__alt_mem_onchip_memory+0xf780ada4>
    ae38:	180d883a 	mov	r6,r3
    ae3c:	e00b883a 	mov	r5,fp
    ae40:	da000115 	stw	r8,4(sp)
    ae44:	d8c00015 	stw	r3,0(sp)
    ae48:	000bef80 	call	bef8 <memmove>
    ae4c:	d8c00017 	ldw	r3,0(sp)
    ae50:	80800017 	ldw	r2,0(r16)
    ae54:	800b883a 	mov	r5,r16
    ae58:	a809883a 	mov	r4,r21
    ae5c:	10c5883a 	add	r2,r2,r3
    ae60:	80800015 	stw	r2,0(r16)
    ae64:	d8c00015 	stw	r3,0(sp)
    ae68:	000a3280 	call	a328 <_fflush_r>
    ae6c:	d8c00017 	ldw	r3,0(sp)
    ae70:	da000117 	ldw	r8,4(sp)
    ae74:	103fc21e 	bne	r2,zero,ad80 <__alt_mem_onchip_memory+0xf780ad80>
    ae78:	182f883a 	mov	r23,r3
    ae7c:	9de7c83a 	sub	r19,r19,r23
    ae80:	983fe11e 	bne	r19,zero,ae08 <__alt_mem_onchip_memory+0xf780ae08>
    ae84:	800b883a 	mov	r5,r16
    ae88:	a809883a 	mov	r4,r21
    ae8c:	000a3280 	call	a328 <_fflush_r>
    ae90:	103fbb1e 	bne	r2,zero,ad80 <__alt_mem_onchip_memory+0xf780ad80>
    ae94:	0011883a 	mov	r8,zero
    ae98:	003fdb06 	br	ae08 <__alt_mem_onchip_memory+0xf780ae08>
    ae9c:	94c0012e 	bgeu	r18,r19,aea4 <__sfvwrite_r+0x31c>
    aea0:	9027883a 	mov	r19,r18
    aea4:	980d883a 	mov	r6,r19
    aea8:	e00b883a 	mov	r5,fp
    aeac:	000bef80 	call	bef8 <memmove>
    aeb0:	80800217 	ldw	r2,8(r16)
    aeb4:	80c00017 	ldw	r3,0(r16)
    aeb8:	14c5c83a 	sub	r2,r2,r19
    aebc:	1cc7883a 	add	r3,r3,r19
    aec0:	80800215 	stw	r2,8(r16)
    aec4:	80c00015 	stw	r3,0(r16)
    aec8:	10004326 	beq	r2,zero,afd8 <__sfvwrite_r+0x450>
    aecc:	9805883a 	mov	r2,r19
    aed0:	003f8606 	br	acec <__alt_mem_onchip_memory+0xf780acec>
    aed4:	b00d883a 	mov	r6,r22
    aed8:	e00b883a 	mov	r5,fp
    aedc:	da000115 	stw	r8,4(sp)
    aee0:	000bef80 	call	bef8 <memmove>
    aee4:	80800217 	ldw	r2,8(r16)
    aee8:	80c00017 	ldw	r3,0(r16)
    aeec:	da000117 	ldw	r8,4(sp)
    aef0:	1585c83a 	sub	r2,r2,r22
    aef4:	1dad883a 	add	r22,r3,r22
    aef8:	80800215 	stw	r2,8(r16)
    aefc:	85800015 	stw	r22,0(r16)
    af00:	003fbf06 	br	ae00 <__alt_mem_onchip_memory+0xf780ae00>
    af04:	81000017 	ldw	r4,0(r16)
    af08:	9027883a 	mov	r19,r18
    af0c:	902f883a 	mov	r23,r18
    af10:	003f6c06 	br	acc4 <__alt_mem_onchip_memory+0xf780acc4>
    af14:	900d883a 	mov	r6,r18
    af18:	01400284 	movi	r5,10
    af1c:	e009883a 	mov	r4,fp
    af20:	000bccc0 	call	bccc <memchr>
    af24:	10003e26 	beq	r2,zero,b020 <__sfvwrite_r+0x498>
    af28:	10800044 	addi	r2,r2,1
    af2c:	1727c83a 	sub	r19,r2,fp
    af30:	02000044 	movi	r8,1
    af34:	003f9d06 	br	adac <__alt_mem_onchip_memory+0xf780adac>
    af38:	80800517 	ldw	r2,20(r16)
    af3c:	81400417 	ldw	r5,16(r16)
    af40:	81c00017 	ldw	r7,0(r16)
    af44:	10a7883a 	add	r19,r2,r2
    af48:	9885883a 	add	r2,r19,r2
    af4c:	1026d7fa 	srli	r19,r2,31
    af50:	396dc83a 	sub	r22,r7,r5
    af54:	b1000044 	addi	r4,r22,1
    af58:	9885883a 	add	r2,r19,r2
    af5c:	1027d07a 	srai	r19,r2,1
    af60:	2485883a 	add	r2,r4,r18
    af64:	980d883a 	mov	r6,r19
    af68:	9880022e 	bgeu	r19,r2,af74 <__sfvwrite_r+0x3ec>
    af6c:	1027883a 	mov	r19,r2
    af70:	100d883a 	mov	r6,r2
    af74:	18c1000c 	andi	r3,r3,1024
    af78:	18001c26 	beq	r3,zero,afec <__sfvwrite_r+0x464>
    af7c:	300b883a 	mov	r5,r6
    af80:	a809883a 	mov	r4,r21
    af84:	000b4c00 	call	b4c0 <_malloc_r>
    af88:	102f883a 	mov	r23,r2
    af8c:	10002926 	beq	r2,zero,b034 <__sfvwrite_r+0x4ac>
    af90:	81400417 	ldw	r5,16(r16)
    af94:	b00d883a 	mov	r6,r22
    af98:	1009883a 	mov	r4,r2
    af9c:	000bdb00 	call	bdb0 <memcpy>
    afa0:	8080030b 	ldhu	r2,12(r16)
    afa4:	00fedfc4 	movi	r3,-1153
    afa8:	10c4703a 	and	r2,r2,r3
    afac:	10802014 	ori	r2,r2,128
    afb0:	8080030d 	sth	r2,12(r16)
    afb4:	bd89883a 	add	r4,r23,r22
    afb8:	9d8fc83a 	sub	r7,r19,r22
    afbc:	85c00415 	stw	r23,16(r16)
    afc0:	84c00515 	stw	r19,20(r16)
    afc4:	81000015 	stw	r4,0(r16)
    afc8:	9027883a 	mov	r19,r18
    afcc:	81c00215 	stw	r7,8(r16)
    afd0:	902f883a 	mov	r23,r18
    afd4:	003f3b06 	br	acc4 <__alt_mem_onchip_memory+0xf780acc4>
    afd8:	800b883a 	mov	r5,r16
    afdc:	a809883a 	mov	r4,r21
    afe0:	000a3280 	call	a328 <_fflush_r>
    afe4:	103fb926 	beq	r2,zero,aecc <__alt_mem_onchip_memory+0xf780aecc>
    afe8:	003f6506 	br	ad80 <__alt_mem_onchip_memory+0xf780ad80>
    afec:	a809883a 	mov	r4,r21
    aff0:	000d2e00 	call	d2e0 <_realloc_r>
    aff4:	102f883a 	mov	r23,r2
    aff8:	103fee1e 	bne	r2,zero,afb4 <__alt_mem_onchip_memory+0xf780afb4>
    affc:	81400417 	ldw	r5,16(r16)
    b000:	a809883a 	mov	r4,r21
    b004:	000a8780 	call	a878 <_free_r>
    b008:	8080030b 	ldhu	r2,12(r16)
    b00c:	00ffdfc4 	movi	r3,-129
    b010:	1884703a 	and	r2,r3,r2
    b014:	00c00304 	movi	r3,12
    b018:	a8c00015 	stw	r3,0(r21)
    b01c:	003f5906 	br	ad84 <__alt_mem_onchip_memory+0xf780ad84>
    b020:	94c00044 	addi	r19,r18,1
    b024:	02000044 	movi	r8,1
    b028:	003f6006 	br	adac <__alt_mem_onchip_memory+0xf780adac>
    b02c:	00bfffc4 	movi	r2,-1
    b030:	003f0306 	br	ac40 <__alt_mem_onchip_memory+0xf780ac40>
    b034:	00800304 	movi	r2,12
    b038:	a8800015 	stw	r2,0(r21)
    b03c:	8080030b 	ldhu	r2,12(r16)
    b040:	003f5006 	br	ad84 <__alt_mem_onchip_memory+0xf780ad84>

0000b044 <_fwalk>:
    b044:	defff704 	addi	sp,sp,-36
    b048:	dd000415 	stw	r20,16(sp)
    b04c:	dfc00815 	stw	ra,32(sp)
    b050:	ddc00715 	stw	r23,28(sp)
    b054:	dd800615 	stw	r22,24(sp)
    b058:	dd400515 	stw	r21,20(sp)
    b05c:	dcc00315 	stw	r19,12(sp)
    b060:	dc800215 	stw	r18,8(sp)
    b064:	dc400115 	stw	r17,4(sp)
    b068:	dc000015 	stw	r16,0(sp)
    b06c:	2500b804 	addi	r20,r4,736
    b070:	a0002326 	beq	r20,zero,b100 <_fwalk+0xbc>
    b074:	282b883a 	mov	r21,r5
    b078:	002f883a 	mov	r23,zero
    b07c:	05800044 	movi	r22,1
    b080:	04ffffc4 	movi	r19,-1
    b084:	a4400117 	ldw	r17,4(r20)
    b088:	a4800217 	ldw	r18,8(r20)
    b08c:	8c7fffc4 	addi	r17,r17,-1
    b090:	88000d16 	blt	r17,zero,b0c8 <_fwalk+0x84>
    b094:	94000304 	addi	r16,r18,12
    b098:	94800384 	addi	r18,r18,14
    b09c:	8080000b 	ldhu	r2,0(r16)
    b0a0:	8c7fffc4 	addi	r17,r17,-1
    b0a4:	813ffd04 	addi	r4,r16,-12
    b0a8:	b080042e 	bgeu	r22,r2,b0bc <_fwalk+0x78>
    b0ac:	9080000f 	ldh	r2,0(r18)
    b0b0:	14c00226 	beq	r2,r19,b0bc <_fwalk+0x78>
    b0b4:	a83ee83a 	callr	r21
    b0b8:	b8aeb03a 	or	r23,r23,r2
    b0bc:	84001a04 	addi	r16,r16,104
    b0c0:	94801a04 	addi	r18,r18,104
    b0c4:	8cfff51e 	bne	r17,r19,b09c <__alt_mem_onchip_memory+0xf780b09c>
    b0c8:	a5000017 	ldw	r20,0(r20)
    b0cc:	a03fed1e 	bne	r20,zero,b084 <__alt_mem_onchip_memory+0xf780b084>
    b0d0:	b805883a 	mov	r2,r23
    b0d4:	dfc00817 	ldw	ra,32(sp)
    b0d8:	ddc00717 	ldw	r23,28(sp)
    b0dc:	dd800617 	ldw	r22,24(sp)
    b0e0:	dd400517 	ldw	r21,20(sp)
    b0e4:	dd000417 	ldw	r20,16(sp)
    b0e8:	dcc00317 	ldw	r19,12(sp)
    b0ec:	dc800217 	ldw	r18,8(sp)
    b0f0:	dc400117 	ldw	r17,4(sp)
    b0f4:	dc000017 	ldw	r16,0(sp)
    b0f8:	dec00904 	addi	sp,sp,36
    b0fc:	f800283a 	ret
    b100:	002f883a 	mov	r23,zero
    b104:	003ff206 	br	b0d0 <__alt_mem_onchip_memory+0xf780b0d0>

0000b108 <_fwalk_reent>:
    b108:	defff704 	addi	sp,sp,-36
    b10c:	dd000415 	stw	r20,16(sp)
    b110:	dfc00815 	stw	ra,32(sp)
    b114:	ddc00715 	stw	r23,28(sp)
    b118:	dd800615 	stw	r22,24(sp)
    b11c:	dd400515 	stw	r21,20(sp)
    b120:	dcc00315 	stw	r19,12(sp)
    b124:	dc800215 	stw	r18,8(sp)
    b128:	dc400115 	stw	r17,4(sp)
    b12c:	dc000015 	stw	r16,0(sp)
    b130:	2500b804 	addi	r20,r4,736
    b134:	a0002326 	beq	r20,zero,b1c4 <_fwalk_reent+0xbc>
    b138:	282b883a 	mov	r21,r5
    b13c:	2027883a 	mov	r19,r4
    b140:	002f883a 	mov	r23,zero
    b144:	05800044 	movi	r22,1
    b148:	04bfffc4 	movi	r18,-1
    b14c:	a4400117 	ldw	r17,4(r20)
    b150:	a4000217 	ldw	r16,8(r20)
    b154:	8c7fffc4 	addi	r17,r17,-1
    b158:	88000c16 	blt	r17,zero,b18c <_fwalk_reent+0x84>
    b15c:	84000304 	addi	r16,r16,12
    b160:	8080000b 	ldhu	r2,0(r16)
    b164:	8c7fffc4 	addi	r17,r17,-1
    b168:	817ffd04 	addi	r5,r16,-12
    b16c:	b080052e 	bgeu	r22,r2,b184 <_fwalk_reent+0x7c>
    b170:	8080008f 	ldh	r2,2(r16)
    b174:	9809883a 	mov	r4,r19
    b178:	14800226 	beq	r2,r18,b184 <_fwalk_reent+0x7c>
    b17c:	a83ee83a 	callr	r21
    b180:	b8aeb03a 	or	r23,r23,r2
    b184:	84001a04 	addi	r16,r16,104
    b188:	8cbff51e 	bne	r17,r18,b160 <__alt_mem_onchip_memory+0xf780b160>
    b18c:	a5000017 	ldw	r20,0(r20)
    b190:	a03fee1e 	bne	r20,zero,b14c <__alt_mem_onchip_memory+0xf780b14c>
    b194:	b805883a 	mov	r2,r23
    b198:	dfc00817 	ldw	ra,32(sp)
    b19c:	ddc00717 	ldw	r23,28(sp)
    b1a0:	dd800617 	ldw	r22,24(sp)
    b1a4:	dd400517 	ldw	r21,20(sp)
    b1a8:	dd000417 	ldw	r20,16(sp)
    b1ac:	dcc00317 	ldw	r19,12(sp)
    b1b0:	dc800217 	ldw	r18,8(sp)
    b1b4:	dc400117 	ldw	r17,4(sp)
    b1b8:	dc000017 	ldw	r16,0(sp)
    b1bc:	dec00904 	addi	sp,sp,36
    b1c0:	f800283a 	ret
    b1c4:	002f883a 	mov	r23,zero
    b1c8:	003ff206 	br	b194 <__alt_mem_onchip_memory+0xf780b194>

0000b1cc <_gettimeofday_r>:
    b1cc:	defffd04 	addi	sp,sp,-12
    b1d0:	2805883a 	mov	r2,r5
    b1d4:	dc000015 	stw	r16,0(sp)
    b1d8:	04000074 	movhi	r16,1
    b1dc:	dc400115 	stw	r17,4(sp)
    b1e0:	841bdc04 	addi	r16,r16,28528
    b1e4:	2023883a 	mov	r17,r4
    b1e8:	300b883a 	mov	r5,r6
    b1ec:	1009883a 	mov	r4,r2
    b1f0:	dfc00215 	stw	ra,8(sp)
    b1f4:	80000015 	stw	zero,0(r16)
    b1f8:	00108900 	call	10890 <gettimeofday>
    b1fc:	00ffffc4 	movi	r3,-1
    b200:	10c00526 	beq	r2,r3,b218 <_gettimeofday_r+0x4c>
    b204:	dfc00217 	ldw	ra,8(sp)
    b208:	dc400117 	ldw	r17,4(sp)
    b20c:	dc000017 	ldw	r16,0(sp)
    b210:	dec00304 	addi	sp,sp,12
    b214:	f800283a 	ret
    b218:	80c00017 	ldw	r3,0(r16)
    b21c:	183ff926 	beq	r3,zero,b204 <__alt_mem_onchip_memory+0xf780b204>
    b220:	88c00015 	stw	r3,0(r17)
    b224:	003ff706 	br	b204 <__alt_mem_onchip_memory+0xf780b204>

0000b228 <_setlocale_r>:
    b228:	30001b26 	beq	r6,zero,b298 <_setlocale_r+0x70>
    b22c:	01400074 	movhi	r5,1
    b230:	defffe04 	addi	sp,sp,-8
    b234:	294db604 	addi	r5,r5,14040
    b238:	3009883a 	mov	r4,r6
    b23c:	dc000015 	stw	r16,0(sp)
    b240:	dfc00115 	stw	ra,4(sp)
    b244:	3021883a 	mov	r16,r6
    b248:	000d9d40 	call	d9d4 <strcmp>
    b24c:	1000061e 	bne	r2,zero,b268 <_setlocale_r+0x40>
    b250:	00800074 	movhi	r2,1
    b254:	108d9704 	addi	r2,r2,13916
    b258:	dfc00117 	ldw	ra,4(sp)
    b25c:	dc000017 	ldw	r16,0(sp)
    b260:	dec00204 	addi	sp,sp,8
    b264:	f800283a 	ret
    b268:	01400074 	movhi	r5,1
    b26c:	294d9704 	addi	r5,r5,13916
    b270:	8009883a 	mov	r4,r16
    b274:	000d9d40 	call	d9d4 <strcmp>
    b278:	103ff526 	beq	r2,zero,b250 <__alt_mem_onchip_memory+0xf780b250>
    b27c:	01400074 	movhi	r5,1
    b280:	294da104 	addi	r5,r5,13956
    b284:	8009883a 	mov	r4,r16
    b288:	000d9d40 	call	d9d4 <strcmp>
    b28c:	103ff026 	beq	r2,zero,b250 <__alt_mem_onchip_memory+0xf780b250>
    b290:	0005883a 	mov	r2,zero
    b294:	003ff006 	br	b258 <__alt_mem_onchip_memory+0xf780b258>
    b298:	00800074 	movhi	r2,1
    b29c:	108d9704 	addi	r2,r2,13916
    b2a0:	f800283a 	ret

0000b2a4 <__locale_charset>:
    b2a4:	00800074 	movhi	r2,1
    b2a8:	108f6604 	addi	r2,r2,15768
    b2ac:	f800283a 	ret

0000b2b0 <__locale_mb_cur_max>:
    b2b0:	00800074 	movhi	r2,1
    b2b4:	10950704 	addi	r2,r2,21532
    b2b8:	10800017 	ldw	r2,0(r2)
    b2bc:	f800283a 	ret

0000b2c0 <__locale_msgcharset>:
    b2c0:	00800074 	movhi	r2,1
    b2c4:	108f5e04 	addi	r2,r2,15736
    b2c8:	f800283a 	ret

0000b2cc <__locale_cjk_lang>:
    b2cc:	0005883a 	mov	r2,zero
    b2d0:	f800283a 	ret

0000b2d4 <_localeconv_r>:
    b2d4:	00800074 	movhi	r2,1
    b2d8:	108f6e04 	addi	r2,r2,15800
    b2dc:	f800283a 	ret

0000b2e0 <setlocale>:
    b2e0:	00800074 	movhi	r2,1
    b2e4:	10950604 	addi	r2,r2,21528
    b2e8:	280d883a 	mov	r6,r5
    b2ec:	200b883a 	mov	r5,r4
    b2f0:	11000017 	ldw	r4,0(r2)
    b2f4:	000b2281 	jmpi	b228 <_setlocale_r>

0000b2f8 <localeconv>:
    b2f8:	00800074 	movhi	r2,1
    b2fc:	108f6e04 	addi	r2,r2,15800
    b300:	f800283a 	ret

0000b304 <__smakebuf_r>:
    b304:	2880030b 	ldhu	r2,12(r5)
    b308:	10c0008c 	andi	r3,r2,2
    b30c:	1800411e 	bne	r3,zero,b414 <__smakebuf_r+0x110>
    b310:	deffec04 	addi	sp,sp,-80
    b314:	dc000f15 	stw	r16,60(sp)
    b318:	2821883a 	mov	r16,r5
    b31c:	2940038f 	ldh	r5,14(r5)
    b320:	dc401015 	stw	r17,64(sp)
    b324:	dfc01315 	stw	ra,76(sp)
    b328:	dcc01215 	stw	r19,72(sp)
    b32c:	dc801115 	stw	r18,68(sp)
    b330:	2023883a 	mov	r17,r4
    b334:	28001c16 	blt	r5,zero,b3a8 <__smakebuf_r+0xa4>
    b338:	d80d883a 	mov	r6,sp
    b33c:	000f6d40 	call	f6d4 <_fstat_r>
    b340:	10001816 	blt	r2,zero,b3a4 <__smakebuf_r+0xa0>
    b344:	d8800117 	ldw	r2,4(sp)
    b348:	00e00014 	movui	r3,32768
    b34c:	10bc000c 	andi	r2,r2,61440
    b350:	14c80020 	cmpeqi	r19,r2,8192
    b354:	10c03726 	beq	r2,r3,b434 <__smakebuf_r+0x130>
    b358:	80c0030b 	ldhu	r3,12(r16)
    b35c:	18c20014 	ori	r3,r3,2048
    b360:	80c0030d 	sth	r3,12(r16)
    b364:	00c80004 	movi	r3,8192
    b368:	10c0521e 	bne	r2,r3,b4b4 <__smakebuf_r+0x1b0>
    b36c:	8140038f 	ldh	r5,14(r16)
    b370:	8809883a 	mov	r4,r17
    b374:	000f7300 	call	f730 <_isatty_r>
    b378:	10004c26 	beq	r2,zero,b4ac <__smakebuf_r+0x1a8>
    b37c:	8080030b 	ldhu	r2,12(r16)
    b380:	80c010c4 	addi	r3,r16,67
    b384:	80c00015 	stw	r3,0(r16)
    b388:	10800054 	ori	r2,r2,1
    b38c:	8080030d 	sth	r2,12(r16)
    b390:	00800044 	movi	r2,1
    b394:	80c00415 	stw	r3,16(r16)
    b398:	80800515 	stw	r2,20(r16)
    b39c:	04810004 	movi	r18,1024
    b3a0:	00000706 	br	b3c0 <__smakebuf_r+0xbc>
    b3a4:	8080030b 	ldhu	r2,12(r16)
    b3a8:	10c0200c 	andi	r3,r2,128
    b3ac:	18001f1e 	bne	r3,zero,b42c <__smakebuf_r+0x128>
    b3b0:	04810004 	movi	r18,1024
    b3b4:	10820014 	ori	r2,r2,2048
    b3b8:	8080030d 	sth	r2,12(r16)
    b3bc:	0027883a 	mov	r19,zero
    b3c0:	900b883a 	mov	r5,r18
    b3c4:	8809883a 	mov	r4,r17
    b3c8:	000b4c00 	call	b4c0 <_malloc_r>
    b3cc:	10002c26 	beq	r2,zero,b480 <__smakebuf_r+0x17c>
    b3d0:	80c0030b 	ldhu	r3,12(r16)
    b3d4:	01000074 	movhi	r4,1
    b3d8:	2128ef04 	addi	r4,r4,-23620
    b3dc:	89000f15 	stw	r4,60(r17)
    b3e0:	18c02014 	ori	r3,r3,128
    b3e4:	80c0030d 	sth	r3,12(r16)
    b3e8:	80800015 	stw	r2,0(r16)
    b3ec:	80800415 	stw	r2,16(r16)
    b3f0:	84800515 	stw	r18,20(r16)
    b3f4:	98001a1e 	bne	r19,zero,b460 <__smakebuf_r+0x15c>
    b3f8:	dfc01317 	ldw	ra,76(sp)
    b3fc:	dcc01217 	ldw	r19,72(sp)
    b400:	dc801117 	ldw	r18,68(sp)
    b404:	dc401017 	ldw	r17,64(sp)
    b408:	dc000f17 	ldw	r16,60(sp)
    b40c:	dec01404 	addi	sp,sp,80
    b410:	f800283a 	ret
    b414:	288010c4 	addi	r2,r5,67
    b418:	28800015 	stw	r2,0(r5)
    b41c:	28800415 	stw	r2,16(r5)
    b420:	00800044 	movi	r2,1
    b424:	28800515 	stw	r2,20(r5)
    b428:	f800283a 	ret
    b42c:	04801004 	movi	r18,64
    b430:	003fe006 	br	b3b4 <__alt_mem_onchip_memory+0xf780b3b4>
    b434:	81000a17 	ldw	r4,40(r16)
    b438:	00c00074 	movhi	r3,1
    b43c:	18f65c04 	addi	r3,r3,-9872
    b440:	20ffc51e 	bne	r4,r3,b358 <__alt_mem_onchip_memory+0xf780b358>
    b444:	8080030b 	ldhu	r2,12(r16)
    b448:	04810004 	movi	r18,1024
    b44c:	84801315 	stw	r18,76(r16)
    b450:	1484b03a 	or	r2,r2,r18
    b454:	8080030d 	sth	r2,12(r16)
    b458:	0027883a 	mov	r19,zero
    b45c:	003fd806 	br	b3c0 <__alt_mem_onchip_memory+0xf780b3c0>
    b460:	8140038f 	ldh	r5,14(r16)
    b464:	8809883a 	mov	r4,r17
    b468:	000f7300 	call	f730 <_isatty_r>
    b46c:	103fe226 	beq	r2,zero,b3f8 <__alt_mem_onchip_memory+0xf780b3f8>
    b470:	8080030b 	ldhu	r2,12(r16)
    b474:	10800054 	ori	r2,r2,1
    b478:	8080030d 	sth	r2,12(r16)
    b47c:	003fde06 	br	b3f8 <__alt_mem_onchip_memory+0xf780b3f8>
    b480:	8080030b 	ldhu	r2,12(r16)
    b484:	10c0800c 	andi	r3,r2,512
    b488:	183fdb1e 	bne	r3,zero,b3f8 <__alt_mem_onchip_memory+0xf780b3f8>
    b48c:	10800094 	ori	r2,r2,2
    b490:	80c010c4 	addi	r3,r16,67
    b494:	8080030d 	sth	r2,12(r16)
    b498:	00800044 	movi	r2,1
    b49c:	80c00015 	stw	r3,0(r16)
    b4a0:	80c00415 	stw	r3,16(r16)
    b4a4:	80800515 	stw	r2,20(r16)
    b4a8:	003fd306 	br	b3f8 <__alt_mem_onchip_memory+0xf780b3f8>
    b4ac:	04810004 	movi	r18,1024
    b4b0:	003fc306 	br	b3c0 <__alt_mem_onchip_memory+0xf780b3c0>
    b4b4:	0027883a 	mov	r19,zero
    b4b8:	04810004 	movi	r18,1024
    b4bc:	003fc006 	br	b3c0 <__alt_mem_onchip_memory+0xf780b3c0>

0000b4c0 <_malloc_r>:
    b4c0:	defff504 	addi	sp,sp,-44
    b4c4:	dc800315 	stw	r18,12(sp)
    b4c8:	dfc00a15 	stw	ra,40(sp)
    b4cc:	df000915 	stw	fp,36(sp)
    b4d0:	ddc00815 	stw	r23,32(sp)
    b4d4:	dd800715 	stw	r22,28(sp)
    b4d8:	dd400615 	stw	r21,24(sp)
    b4dc:	dd000515 	stw	r20,20(sp)
    b4e0:	dcc00415 	stw	r19,16(sp)
    b4e4:	dc400215 	stw	r17,8(sp)
    b4e8:	dc000115 	stw	r16,4(sp)
    b4ec:	288002c4 	addi	r2,r5,11
    b4f0:	00c00584 	movi	r3,22
    b4f4:	2025883a 	mov	r18,r4
    b4f8:	18807f2e 	bgeu	r3,r2,b6f8 <_malloc_r+0x238>
    b4fc:	047ffe04 	movi	r17,-8
    b500:	1462703a 	and	r17,r2,r17
    b504:	8800a316 	blt	r17,zero,b794 <_malloc_r+0x2d4>
    b508:	8940a236 	bltu	r17,r5,b794 <_malloc_r+0x2d4>
    b50c:	0010ddc0 	call	10ddc <__malloc_lock>
    b510:	00807dc4 	movi	r2,503
    b514:	1441e92e 	bgeu	r2,r17,bcbc <_malloc_r+0x7fc>
    b518:	8804d27a 	srli	r2,r17,9
    b51c:	1000a126 	beq	r2,zero,b7a4 <_malloc_r+0x2e4>
    b520:	00c00104 	movi	r3,4
    b524:	18811e36 	bltu	r3,r2,b9a0 <_malloc_r+0x4e0>
    b528:	8804d1ba 	srli	r2,r17,6
    b52c:	12000e44 	addi	r8,r2,57
    b530:	11c00e04 	addi	r7,r2,56
    b534:	4209883a 	add	r4,r8,r8
    b538:	04c00074 	movhi	r19,1
    b53c:	2109883a 	add	r4,r4,r4
    b540:	9ccf7c04 	addi	r19,r19,15856
    b544:	2109883a 	add	r4,r4,r4
    b548:	9909883a 	add	r4,r19,r4
    b54c:	24000117 	ldw	r16,4(r4)
    b550:	213ffe04 	addi	r4,r4,-8
    b554:	24009726 	beq	r4,r16,b7b4 <_malloc_r+0x2f4>
    b558:	80800117 	ldw	r2,4(r16)
    b55c:	01bfff04 	movi	r6,-4
    b560:	014003c4 	movi	r5,15
    b564:	1184703a 	and	r2,r2,r6
    b568:	1447c83a 	sub	r3,r2,r17
    b56c:	28c00716 	blt	r5,r3,b58c <_malloc_r+0xcc>
    b570:	1800920e 	bge	r3,zero,b7bc <_malloc_r+0x2fc>
    b574:	84000317 	ldw	r16,12(r16)
    b578:	24008e26 	beq	r4,r16,b7b4 <_malloc_r+0x2f4>
    b57c:	80800117 	ldw	r2,4(r16)
    b580:	1184703a 	and	r2,r2,r6
    b584:	1447c83a 	sub	r3,r2,r17
    b588:	28fff90e 	bge	r5,r3,b570 <__alt_mem_onchip_memory+0xf780b570>
    b58c:	3809883a 	mov	r4,r7
    b590:	01800074 	movhi	r6,1
    b594:	9c000417 	ldw	r16,16(r19)
    b598:	318f7c04 	addi	r6,r6,15856
    b59c:	32000204 	addi	r8,r6,8
    b5a0:	82013426 	beq	r16,r8,ba74 <_malloc_r+0x5b4>
    b5a4:	80c00117 	ldw	r3,4(r16)
    b5a8:	00bfff04 	movi	r2,-4
    b5ac:	188e703a 	and	r7,r3,r2
    b5b0:	3c45c83a 	sub	r2,r7,r17
    b5b4:	00c003c4 	movi	r3,15
    b5b8:	18811f16 	blt	r3,r2,ba38 <_malloc_r+0x578>
    b5bc:	32000515 	stw	r8,20(r6)
    b5c0:	32000415 	stw	r8,16(r6)
    b5c4:	10007f0e 	bge	r2,zero,b7c4 <_malloc_r+0x304>
    b5c8:	00807fc4 	movi	r2,511
    b5cc:	11c0fd36 	bltu	r2,r7,b9c4 <_malloc_r+0x504>
    b5d0:	3806d0fa 	srli	r3,r7,3
    b5d4:	01c00044 	movi	r7,1
    b5d8:	30800117 	ldw	r2,4(r6)
    b5dc:	19400044 	addi	r5,r3,1
    b5e0:	294b883a 	add	r5,r5,r5
    b5e4:	1807d0ba 	srai	r3,r3,2
    b5e8:	294b883a 	add	r5,r5,r5
    b5ec:	294b883a 	add	r5,r5,r5
    b5f0:	298b883a 	add	r5,r5,r6
    b5f4:	38c6983a 	sll	r3,r7,r3
    b5f8:	29c00017 	ldw	r7,0(r5)
    b5fc:	2a7ffe04 	addi	r9,r5,-8
    b600:	1886b03a 	or	r3,r3,r2
    b604:	82400315 	stw	r9,12(r16)
    b608:	81c00215 	stw	r7,8(r16)
    b60c:	30c00115 	stw	r3,4(r6)
    b610:	2c000015 	stw	r16,0(r5)
    b614:	3c000315 	stw	r16,12(r7)
    b618:	2005d0ba 	srai	r2,r4,2
    b61c:	01400044 	movi	r5,1
    b620:	288a983a 	sll	r5,r5,r2
    b624:	19406f36 	bltu	r3,r5,b7e4 <_malloc_r+0x324>
    b628:	28c4703a 	and	r2,r5,r3
    b62c:	10000a1e 	bne	r2,zero,b658 <_malloc_r+0x198>
    b630:	00bfff04 	movi	r2,-4
    b634:	294b883a 	add	r5,r5,r5
    b638:	2088703a 	and	r4,r4,r2
    b63c:	28c4703a 	and	r2,r5,r3
    b640:	21000104 	addi	r4,r4,4
    b644:	1000041e 	bne	r2,zero,b658 <_malloc_r+0x198>
    b648:	294b883a 	add	r5,r5,r5
    b64c:	28c4703a 	and	r2,r5,r3
    b650:	21000104 	addi	r4,r4,4
    b654:	103ffc26 	beq	r2,zero,b648 <__alt_mem_onchip_memory+0xf780b648>
    b658:	02bfff04 	movi	r10,-4
    b65c:	024003c4 	movi	r9,15
    b660:	21800044 	addi	r6,r4,1
    b664:	318d883a 	add	r6,r6,r6
    b668:	318d883a 	add	r6,r6,r6
    b66c:	318d883a 	add	r6,r6,r6
    b670:	998d883a 	add	r6,r19,r6
    b674:	333ffe04 	addi	r12,r6,-8
    b678:	2017883a 	mov	r11,r4
    b67c:	31800104 	addi	r6,r6,4
    b680:	34000017 	ldw	r16,0(r6)
    b684:	31fffd04 	addi	r7,r6,-12
    b688:	81c0041e 	bne	r16,r7,b69c <_malloc_r+0x1dc>
    b68c:	0000fb06 	br	ba7c <_malloc_r+0x5bc>
    b690:	1801030e 	bge	r3,zero,baa0 <_malloc_r+0x5e0>
    b694:	84000317 	ldw	r16,12(r16)
    b698:	81c0f826 	beq	r16,r7,ba7c <_malloc_r+0x5bc>
    b69c:	80800117 	ldw	r2,4(r16)
    b6a0:	1284703a 	and	r2,r2,r10
    b6a4:	1447c83a 	sub	r3,r2,r17
    b6a8:	48fff90e 	bge	r9,r3,b690 <__alt_mem_onchip_memory+0xf780b690>
    b6ac:	80800317 	ldw	r2,12(r16)
    b6b0:	81000217 	ldw	r4,8(r16)
    b6b4:	89400054 	ori	r5,r17,1
    b6b8:	81400115 	stw	r5,4(r16)
    b6bc:	20800315 	stw	r2,12(r4)
    b6c0:	11000215 	stw	r4,8(r2)
    b6c4:	8463883a 	add	r17,r16,r17
    b6c8:	9c400515 	stw	r17,20(r19)
    b6cc:	9c400415 	stw	r17,16(r19)
    b6d0:	18800054 	ori	r2,r3,1
    b6d4:	88800115 	stw	r2,4(r17)
    b6d8:	8a000315 	stw	r8,12(r17)
    b6dc:	8a000215 	stw	r8,8(r17)
    b6e0:	88e3883a 	add	r17,r17,r3
    b6e4:	88c00015 	stw	r3,0(r17)
    b6e8:	9009883a 	mov	r4,r18
    b6ec:	0010e000 	call	10e00 <__malloc_unlock>
    b6f0:	80800204 	addi	r2,r16,8
    b6f4:	00001b06 	br	b764 <_malloc_r+0x2a4>
    b6f8:	04400404 	movi	r17,16
    b6fc:	89402536 	bltu	r17,r5,b794 <_malloc_r+0x2d4>
    b700:	0010ddc0 	call	10ddc <__malloc_lock>
    b704:	00800184 	movi	r2,6
    b708:	01000084 	movi	r4,2
    b70c:	04c00074 	movhi	r19,1
    b710:	1085883a 	add	r2,r2,r2
    b714:	9ccf7c04 	addi	r19,r19,15856
    b718:	1085883a 	add	r2,r2,r2
    b71c:	9885883a 	add	r2,r19,r2
    b720:	14000117 	ldw	r16,4(r2)
    b724:	10fffe04 	addi	r3,r2,-8
    b728:	80c0d926 	beq	r16,r3,ba90 <_malloc_r+0x5d0>
    b72c:	80c00117 	ldw	r3,4(r16)
    b730:	81000317 	ldw	r4,12(r16)
    b734:	00bfff04 	movi	r2,-4
    b738:	1884703a 	and	r2,r3,r2
    b73c:	81400217 	ldw	r5,8(r16)
    b740:	8085883a 	add	r2,r16,r2
    b744:	10c00117 	ldw	r3,4(r2)
    b748:	29000315 	stw	r4,12(r5)
    b74c:	21400215 	stw	r5,8(r4)
    b750:	18c00054 	ori	r3,r3,1
    b754:	10c00115 	stw	r3,4(r2)
    b758:	9009883a 	mov	r4,r18
    b75c:	0010e000 	call	10e00 <__malloc_unlock>
    b760:	80800204 	addi	r2,r16,8
    b764:	dfc00a17 	ldw	ra,40(sp)
    b768:	df000917 	ldw	fp,36(sp)
    b76c:	ddc00817 	ldw	r23,32(sp)
    b770:	dd800717 	ldw	r22,28(sp)
    b774:	dd400617 	ldw	r21,24(sp)
    b778:	dd000517 	ldw	r20,20(sp)
    b77c:	dcc00417 	ldw	r19,16(sp)
    b780:	dc800317 	ldw	r18,12(sp)
    b784:	dc400217 	ldw	r17,8(sp)
    b788:	dc000117 	ldw	r16,4(sp)
    b78c:	dec00b04 	addi	sp,sp,44
    b790:	f800283a 	ret
    b794:	00800304 	movi	r2,12
    b798:	90800015 	stw	r2,0(r18)
    b79c:	0005883a 	mov	r2,zero
    b7a0:	003ff006 	br	b764 <__alt_mem_onchip_memory+0xf780b764>
    b7a4:	01002004 	movi	r4,128
    b7a8:	02001004 	movi	r8,64
    b7ac:	01c00fc4 	movi	r7,63
    b7b0:	003f6106 	br	b538 <__alt_mem_onchip_memory+0xf780b538>
    b7b4:	4009883a 	mov	r4,r8
    b7b8:	003f7506 	br	b590 <__alt_mem_onchip_memory+0xf780b590>
    b7bc:	81000317 	ldw	r4,12(r16)
    b7c0:	003fde06 	br	b73c <__alt_mem_onchip_memory+0xf780b73c>
    b7c4:	81c5883a 	add	r2,r16,r7
    b7c8:	11400117 	ldw	r5,4(r2)
    b7cc:	9009883a 	mov	r4,r18
    b7d0:	29400054 	ori	r5,r5,1
    b7d4:	11400115 	stw	r5,4(r2)
    b7d8:	0010e000 	call	10e00 <__malloc_unlock>
    b7dc:	80800204 	addi	r2,r16,8
    b7e0:	003fe006 	br	b764 <__alt_mem_onchip_memory+0xf780b764>
    b7e4:	9c000217 	ldw	r16,8(r19)
    b7e8:	00bfff04 	movi	r2,-4
    b7ec:	85800117 	ldw	r22,4(r16)
    b7f0:	b0ac703a 	and	r22,r22,r2
    b7f4:	b4400336 	bltu	r22,r17,b804 <_malloc_r+0x344>
    b7f8:	b445c83a 	sub	r2,r22,r17
    b7fc:	00c003c4 	movi	r3,15
    b800:	18805d16 	blt	r3,r2,b978 <_malloc_r+0x4b8>
    b804:	05c00074 	movhi	r23,1
    b808:	00800074 	movhi	r2,1
    b80c:	109be204 	addi	r2,r2,28552
    b810:	bdd50804 	addi	r23,r23,21536
    b814:	15400017 	ldw	r21,0(r2)
    b818:	b8c00017 	ldw	r3,0(r23)
    b81c:	00bfffc4 	movi	r2,-1
    b820:	858d883a 	add	r6,r16,r22
    b824:	8d6b883a 	add	r21,r17,r21
    b828:	1880ea26 	beq	r3,r2,bbd4 <_malloc_r+0x714>
    b82c:	ad4403c4 	addi	r21,r21,4111
    b830:	00bc0004 	movi	r2,-4096
    b834:	a8aa703a 	and	r21,r21,r2
    b838:	a80b883a 	mov	r5,r21
    b83c:	9009883a 	mov	r4,r18
    b840:	d9800015 	stw	r6,0(sp)
    b844:	000d8440 	call	d844 <_sbrk_r>
    b848:	1029883a 	mov	r20,r2
    b84c:	00bfffc4 	movi	r2,-1
    b850:	d9800017 	ldw	r6,0(sp)
    b854:	a080e826 	beq	r20,r2,bbf8 <_malloc_r+0x738>
    b858:	a180a636 	bltu	r20,r6,baf4 <_malloc_r+0x634>
    b85c:	07000074 	movhi	fp,1
    b860:	e71bee04 	addi	fp,fp,28600
    b864:	e0800017 	ldw	r2,0(fp)
    b868:	a887883a 	add	r3,r21,r2
    b86c:	e0c00015 	stw	r3,0(fp)
    b870:	3500e626 	beq	r6,r20,bc0c <_malloc_r+0x74c>
    b874:	b9000017 	ldw	r4,0(r23)
    b878:	00bfffc4 	movi	r2,-1
    b87c:	2080ee26 	beq	r4,r2,bc38 <_malloc_r+0x778>
    b880:	a185c83a 	sub	r2,r20,r6
    b884:	10c5883a 	add	r2,r2,r3
    b888:	e0800015 	stw	r2,0(fp)
    b88c:	a0c001cc 	andi	r3,r20,7
    b890:	1800bc26 	beq	r3,zero,bb84 <_malloc_r+0x6c4>
    b894:	a0e9c83a 	sub	r20,r20,r3
    b898:	00840204 	movi	r2,4104
    b89c:	a5000204 	addi	r20,r20,8
    b8a0:	10c7c83a 	sub	r3,r2,r3
    b8a4:	a545883a 	add	r2,r20,r21
    b8a8:	1083ffcc 	andi	r2,r2,4095
    b8ac:	18abc83a 	sub	r21,r3,r2
    b8b0:	a80b883a 	mov	r5,r21
    b8b4:	9009883a 	mov	r4,r18
    b8b8:	000d8440 	call	d844 <_sbrk_r>
    b8bc:	00ffffc4 	movi	r3,-1
    b8c0:	10c0e126 	beq	r2,r3,bc48 <_malloc_r+0x788>
    b8c4:	1505c83a 	sub	r2,r2,r20
    b8c8:	1545883a 	add	r2,r2,r21
    b8cc:	10800054 	ori	r2,r2,1
    b8d0:	e0c00017 	ldw	r3,0(fp)
    b8d4:	9d000215 	stw	r20,8(r19)
    b8d8:	a0800115 	stw	r2,4(r20)
    b8dc:	a8c7883a 	add	r3,r21,r3
    b8e0:	e0c00015 	stw	r3,0(fp)
    b8e4:	84c00e26 	beq	r16,r19,b920 <_malloc_r+0x460>
    b8e8:	018003c4 	movi	r6,15
    b8ec:	3580a72e 	bgeu	r6,r22,bb8c <_malloc_r+0x6cc>
    b8f0:	81400117 	ldw	r5,4(r16)
    b8f4:	013ffe04 	movi	r4,-8
    b8f8:	b0bffd04 	addi	r2,r22,-12
    b8fc:	1104703a 	and	r2,r2,r4
    b900:	2900004c 	andi	r4,r5,1
    b904:	2088b03a 	or	r4,r4,r2
    b908:	81000115 	stw	r4,4(r16)
    b90c:	01400144 	movi	r5,5
    b910:	8089883a 	add	r4,r16,r2
    b914:	21400115 	stw	r5,4(r4)
    b918:	21400215 	stw	r5,8(r4)
    b91c:	3080cd36 	bltu	r6,r2,bc54 <_malloc_r+0x794>
    b920:	00800074 	movhi	r2,1
    b924:	109be104 	addi	r2,r2,28548
    b928:	11000017 	ldw	r4,0(r2)
    b92c:	20c0012e 	bgeu	r4,r3,b934 <_malloc_r+0x474>
    b930:	10c00015 	stw	r3,0(r2)
    b934:	00800074 	movhi	r2,1
    b938:	109be004 	addi	r2,r2,28544
    b93c:	11000017 	ldw	r4,0(r2)
    b940:	9c000217 	ldw	r16,8(r19)
    b944:	20c0012e 	bgeu	r4,r3,b94c <_malloc_r+0x48c>
    b948:	10c00015 	stw	r3,0(r2)
    b94c:	80c00117 	ldw	r3,4(r16)
    b950:	00bfff04 	movi	r2,-4
    b954:	1886703a 	and	r3,r3,r2
    b958:	1c45c83a 	sub	r2,r3,r17
    b95c:	1c400236 	bltu	r3,r17,b968 <_malloc_r+0x4a8>
    b960:	00c003c4 	movi	r3,15
    b964:	18800416 	blt	r3,r2,b978 <_malloc_r+0x4b8>
    b968:	9009883a 	mov	r4,r18
    b96c:	0010e000 	call	10e00 <__malloc_unlock>
    b970:	0005883a 	mov	r2,zero
    b974:	003f7b06 	br	b764 <__alt_mem_onchip_memory+0xf780b764>
    b978:	88c00054 	ori	r3,r17,1
    b97c:	80c00115 	stw	r3,4(r16)
    b980:	8463883a 	add	r17,r16,r17
    b984:	10800054 	ori	r2,r2,1
    b988:	9c400215 	stw	r17,8(r19)
    b98c:	88800115 	stw	r2,4(r17)
    b990:	9009883a 	mov	r4,r18
    b994:	0010e000 	call	10e00 <__malloc_unlock>
    b998:	80800204 	addi	r2,r16,8
    b99c:	003f7106 	br	b764 <__alt_mem_onchip_memory+0xf780b764>
    b9a0:	00c00504 	movi	r3,20
    b9a4:	18804a2e 	bgeu	r3,r2,bad0 <_malloc_r+0x610>
    b9a8:	00c01504 	movi	r3,84
    b9ac:	18806e36 	bltu	r3,r2,bb68 <_malloc_r+0x6a8>
    b9b0:	8804d33a 	srli	r2,r17,12
    b9b4:	12001bc4 	addi	r8,r2,111
    b9b8:	11c01b84 	addi	r7,r2,110
    b9bc:	4209883a 	add	r4,r8,r8
    b9c0:	003edd06 	br	b538 <__alt_mem_onchip_memory+0xf780b538>
    b9c4:	3804d27a 	srli	r2,r7,9
    b9c8:	00c00104 	movi	r3,4
    b9cc:	1880442e 	bgeu	r3,r2,bae0 <_malloc_r+0x620>
    b9d0:	00c00504 	movi	r3,20
    b9d4:	18808136 	bltu	r3,r2,bbdc <_malloc_r+0x71c>
    b9d8:	11401704 	addi	r5,r2,92
    b9dc:	10c016c4 	addi	r3,r2,91
    b9e0:	294b883a 	add	r5,r5,r5
    b9e4:	294b883a 	add	r5,r5,r5
    b9e8:	294b883a 	add	r5,r5,r5
    b9ec:	994b883a 	add	r5,r19,r5
    b9f0:	28800017 	ldw	r2,0(r5)
    b9f4:	01800074 	movhi	r6,1
    b9f8:	297ffe04 	addi	r5,r5,-8
    b9fc:	318f7c04 	addi	r6,r6,15856
    ba00:	28806526 	beq	r5,r2,bb98 <_malloc_r+0x6d8>
    ba04:	01bfff04 	movi	r6,-4
    ba08:	10c00117 	ldw	r3,4(r2)
    ba0c:	1986703a 	and	r3,r3,r6
    ba10:	38c0022e 	bgeu	r7,r3,ba1c <_malloc_r+0x55c>
    ba14:	10800217 	ldw	r2,8(r2)
    ba18:	28bffb1e 	bne	r5,r2,ba08 <__alt_mem_onchip_memory+0xf780ba08>
    ba1c:	11400317 	ldw	r5,12(r2)
    ba20:	98c00117 	ldw	r3,4(r19)
    ba24:	81400315 	stw	r5,12(r16)
    ba28:	80800215 	stw	r2,8(r16)
    ba2c:	2c000215 	stw	r16,8(r5)
    ba30:	14000315 	stw	r16,12(r2)
    ba34:	003ef806 	br	b618 <__alt_mem_onchip_memory+0xf780b618>
    ba38:	88c00054 	ori	r3,r17,1
    ba3c:	80c00115 	stw	r3,4(r16)
    ba40:	8463883a 	add	r17,r16,r17
    ba44:	34400515 	stw	r17,20(r6)
    ba48:	34400415 	stw	r17,16(r6)
    ba4c:	10c00054 	ori	r3,r2,1
    ba50:	8a000315 	stw	r8,12(r17)
    ba54:	8a000215 	stw	r8,8(r17)
    ba58:	88c00115 	stw	r3,4(r17)
    ba5c:	88a3883a 	add	r17,r17,r2
    ba60:	88800015 	stw	r2,0(r17)
    ba64:	9009883a 	mov	r4,r18
    ba68:	0010e000 	call	10e00 <__malloc_unlock>
    ba6c:	80800204 	addi	r2,r16,8
    ba70:	003f3c06 	br	b764 <__alt_mem_onchip_memory+0xf780b764>
    ba74:	30c00117 	ldw	r3,4(r6)
    ba78:	003ee706 	br	b618 <__alt_mem_onchip_memory+0xf780b618>
    ba7c:	5ac00044 	addi	r11,r11,1
    ba80:	588000cc 	andi	r2,r11,3
    ba84:	31800204 	addi	r6,r6,8
    ba88:	103efd1e 	bne	r2,zero,b680 <__alt_mem_onchip_memory+0xf780b680>
    ba8c:	00002406 	br	bb20 <_malloc_r+0x660>
    ba90:	14000317 	ldw	r16,12(r2)
    ba94:	143f251e 	bne	r2,r16,b72c <__alt_mem_onchip_memory+0xf780b72c>
    ba98:	21000084 	addi	r4,r4,2
    ba9c:	003ebc06 	br	b590 <__alt_mem_onchip_memory+0xf780b590>
    baa0:	8085883a 	add	r2,r16,r2
    baa4:	10c00117 	ldw	r3,4(r2)
    baa8:	81000317 	ldw	r4,12(r16)
    baac:	81400217 	ldw	r5,8(r16)
    bab0:	18c00054 	ori	r3,r3,1
    bab4:	10c00115 	stw	r3,4(r2)
    bab8:	29000315 	stw	r4,12(r5)
    babc:	21400215 	stw	r5,8(r4)
    bac0:	9009883a 	mov	r4,r18
    bac4:	0010e000 	call	10e00 <__malloc_unlock>
    bac8:	80800204 	addi	r2,r16,8
    bacc:	003f2506 	br	b764 <__alt_mem_onchip_memory+0xf780b764>
    bad0:	12001704 	addi	r8,r2,92
    bad4:	11c016c4 	addi	r7,r2,91
    bad8:	4209883a 	add	r4,r8,r8
    badc:	003e9606 	br	b538 <__alt_mem_onchip_memory+0xf780b538>
    bae0:	3804d1ba 	srli	r2,r7,6
    bae4:	11400e44 	addi	r5,r2,57
    bae8:	10c00e04 	addi	r3,r2,56
    baec:	294b883a 	add	r5,r5,r5
    baf0:	003fbc06 	br	b9e4 <__alt_mem_onchip_memory+0xf780b9e4>
    baf4:	84ff5926 	beq	r16,r19,b85c <__alt_mem_onchip_memory+0xf780b85c>
    baf8:	00800074 	movhi	r2,1
    bafc:	108f7c04 	addi	r2,r2,15856
    bb00:	14000217 	ldw	r16,8(r2)
    bb04:	00bfff04 	movi	r2,-4
    bb08:	80c00117 	ldw	r3,4(r16)
    bb0c:	1886703a 	and	r3,r3,r2
    bb10:	003f9106 	br	b958 <__alt_mem_onchip_memory+0xf780b958>
    bb14:	60800217 	ldw	r2,8(r12)
    bb18:	213fffc4 	addi	r4,r4,-1
    bb1c:	1300651e 	bne	r2,r12,bcb4 <_malloc_r+0x7f4>
    bb20:	208000cc 	andi	r2,r4,3
    bb24:	633ffe04 	addi	r12,r12,-8
    bb28:	103ffa1e 	bne	r2,zero,bb14 <__alt_mem_onchip_memory+0xf780bb14>
    bb2c:	98800117 	ldw	r2,4(r19)
    bb30:	0146303a 	nor	r3,zero,r5
    bb34:	1884703a 	and	r2,r3,r2
    bb38:	98800115 	stw	r2,4(r19)
    bb3c:	294b883a 	add	r5,r5,r5
    bb40:	117f2836 	bltu	r2,r5,b7e4 <__alt_mem_onchip_memory+0xf780b7e4>
    bb44:	283f2726 	beq	r5,zero,b7e4 <__alt_mem_onchip_memory+0xf780b7e4>
    bb48:	2886703a 	and	r3,r5,r2
    bb4c:	5809883a 	mov	r4,r11
    bb50:	183ec31e 	bne	r3,zero,b660 <__alt_mem_onchip_memory+0xf780b660>
    bb54:	294b883a 	add	r5,r5,r5
    bb58:	2886703a 	and	r3,r5,r2
    bb5c:	21000104 	addi	r4,r4,4
    bb60:	183ffc26 	beq	r3,zero,bb54 <__alt_mem_onchip_memory+0xf780bb54>
    bb64:	003ebe06 	br	b660 <__alt_mem_onchip_memory+0xf780b660>
    bb68:	00c05504 	movi	r3,340
    bb6c:	18801236 	bltu	r3,r2,bbb8 <_malloc_r+0x6f8>
    bb70:	8804d3fa 	srli	r2,r17,15
    bb74:	12001e04 	addi	r8,r2,120
    bb78:	11c01dc4 	addi	r7,r2,119
    bb7c:	4209883a 	add	r4,r8,r8
    bb80:	003e6d06 	br	b538 <__alt_mem_onchip_memory+0xf780b538>
    bb84:	00c40004 	movi	r3,4096
    bb88:	003f4606 	br	b8a4 <__alt_mem_onchip_memory+0xf780b8a4>
    bb8c:	00800044 	movi	r2,1
    bb90:	a0800115 	stw	r2,4(r20)
    bb94:	003f7406 	br	b968 <__alt_mem_onchip_memory+0xf780b968>
    bb98:	1805d0ba 	srai	r2,r3,2
    bb9c:	01c00044 	movi	r7,1
    bba0:	30c00117 	ldw	r3,4(r6)
    bba4:	388e983a 	sll	r7,r7,r2
    bba8:	2805883a 	mov	r2,r5
    bbac:	38c6b03a 	or	r3,r7,r3
    bbb0:	30c00115 	stw	r3,4(r6)
    bbb4:	003f9b06 	br	ba24 <__alt_mem_onchip_memory+0xf780ba24>
    bbb8:	00c15504 	movi	r3,1364
    bbbc:	18801a36 	bltu	r3,r2,bc28 <_malloc_r+0x768>
    bbc0:	8804d4ba 	srli	r2,r17,18
    bbc4:	12001f44 	addi	r8,r2,125
    bbc8:	11c01f04 	addi	r7,r2,124
    bbcc:	4209883a 	add	r4,r8,r8
    bbd0:	003e5906 	br	b538 <__alt_mem_onchip_memory+0xf780b538>
    bbd4:	ad400404 	addi	r21,r21,16
    bbd8:	003f1706 	br	b838 <__alt_mem_onchip_memory+0xf780b838>
    bbdc:	00c01504 	movi	r3,84
    bbe0:	18802336 	bltu	r3,r2,bc70 <_malloc_r+0x7b0>
    bbe4:	3804d33a 	srli	r2,r7,12
    bbe8:	11401bc4 	addi	r5,r2,111
    bbec:	10c01b84 	addi	r3,r2,110
    bbf0:	294b883a 	add	r5,r5,r5
    bbf4:	003f7b06 	br	b9e4 <__alt_mem_onchip_memory+0xf780b9e4>
    bbf8:	9c000217 	ldw	r16,8(r19)
    bbfc:	00bfff04 	movi	r2,-4
    bc00:	80c00117 	ldw	r3,4(r16)
    bc04:	1886703a 	and	r3,r3,r2
    bc08:	003f5306 	br	b958 <__alt_mem_onchip_memory+0xf780b958>
    bc0c:	3083ffcc 	andi	r2,r6,4095
    bc10:	103f181e 	bne	r2,zero,b874 <__alt_mem_onchip_memory+0xf780b874>
    bc14:	99000217 	ldw	r4,8(r19)
    bc18:	b545883a 	add	r2,r22,r21
    bc1c:	10800054 	ori	r2,r2,1
    bc20:	20800115 	stw	r2,4(r4)
    bc24:	003f3e06 	br	b920 <__alt_mem_onchip_memory+0xf780b920>
    bc28:	01003f84 	movi	r4,254
    bc2c:	02001fc4 	movi	r8,127
    bc30:	01c01f84 	movi	r7,126
    bc34:	003e4006 	br	b538 <__alt_mem_onchip_memory+0xf780b538>
    bc38:	00800074 	movhi	r2,1
    bc3c:	10950804 	addi	r2,r2,21536
    bc40:	15000015 	stw	r20,0(r2)
    bc44:	003f1106 	br	b88c <__alt_mem_onchip_memory+0xf780b88c>
    bc48:	00800044 	movi	r2,1
    bc4c:	002b883a 	mov	r21,zero
    bc50:	003f1f06 	br	b8d0 <__alt_mem_onchip_memory+0xf780b8d0>
    bc54:	81400204 	addi	r5,r16,8
    bc58:	9009883a 	mov	r4,r18
    bc5c:	000a8780 	call	a878 <_free_r>
    bc60:	00800074 	movhi	r2,1
    bc64:	109bee04 	addi	r2,r2,28600
    bc68:	10c00017 	ldw	r3,0(r2)
    bc6c:	003f2c06 	br	b920 <__alt_mem_onchip_memory+0xf780b920>
    bc70:	00c05504 	movi	r3,340
    bc74:	18800536 	bltu	r3,r2,bc8c <_malloc_r+0x7cc>
    bc78:	3804d3fa 	srli	r2,r7,15
    bc7c:	11401e04 	addi	r5,r2,120
    bc80:	10c01dc4 	addi	r3,r2,119
    bc84:	294b883a 	add	r5,r5,r5
    bc88:	003f5606 	br	b9e4 <__alt_mem_onchip_memory+0xf780b9e4>
    bc8c:	00c15504 	movi	r3,1364
    bc90:	18800536 	bltu	r3,r2,bca8 <_malloc_r+0x7e8>
    bc94:	3804d4ba 	srli	r2,r7,18
    bc98:	11401f44 	addi	r5,r2,125
    bc9c:	10c01f04 	addi	r3,r2,124
    bca0:	294b883a 	add	r5,r5,r5
    bca4:	003f4f06 	br	b9e4 <__alt_mem_onchip_memory+0xf780b9e4>
    bca8:	01403f84 	movi	r5,254
    bcac:	00c01f84 	movi	r3,126
    bcb0:	003f4c06 	br	b9e4 <__alt_mem_onchip_memory+0xf780b9e4>
    bcb4:	98800117 	ldw	r2,4(r19)
    bcb8:	003fa006 	br	bb3c <__alt_mem_onchip_memory+0xf780bb3c>
    bcbc:	8808d0fa 	srli	r4,r17,3
    bcc0:	20800044 	addi	r2,r4,1
    bcc4:	1085883a 	add	r2,r2,r2
    bcc8:	003e9006 	br	b70c <__alt_mem_onchip_memory+0xf780b70c>

0000bccc <memchr>:
    bccc:	208000cc 	andi	r2,r4,3
    bcd0:	280f883a 	mov	r7,r5
    bcd4:	10003426 	beq	r2,zero,bda8 <memchr+0xdc>
    bcd8:	30bfffc4 	addi	r2,r6,-1
    bcdc:	30001a26 	beq	r6,zero,bd48 <memchr+0x7c>
    bce0:	20c00003 	ldbu	r3,0(r4)
    bce4:	29803fcc 	andi	r6,r5,255
    bce8:	30c0051e 	bne	r6,r3,bd00 <memchr+0x34>
    bcec:	00001806 	br	bd50 <memchr+0x84>
    bcf0:	10001526 	beq	r2,zero,bd48 <memchr+0x7c>
    bcf4:	20c00003 	ldbu	r3,0(r4)
    bcf8:	10bfffc4 	addi	r2,r2,-1
    bcfc:	30c01426 	beq	r6,r3,bd50 <memchr+0x84>
    bd00:	21000044 	addi	r4,r4,1
    bd04:	20c000cc 	andi	r3,r4,3
    bd08:	183ff91e 	bne	r3,zero,bcf0 <__alt_mem_onchip_memory+0xf780bcf0>
    bd0c:	020000c4 	movi	r8,3
    bd10:	40801136 	bltu	r8,r2,bd58 <memchr+0x8c>
    bd14:	10000c26 	beq	r2,zero,bd48 <memchr+0x7c>
    bd18:	20c00003 	ldbu	r3,0(r4)
    bd1c:	29403fcc 	andi	r5,r5,255
    bd20:	28c00b26 	beq	r5,r3,bd50 <memchr+0x84>
    bd24:	20c00044 	addi	r3,r4,1
    bd28:	39803fcc 	andi	r6,r7,255
    bd2c:	2089883a 	add	r4,r4,r2
    bd30:	00000306 	br	bd40 <memchr+0x74>
    bd34:	18c00044 	addi	r3,r3,1
    bd38:	197fffc3 	ldbu	r5,-1(r3)
    bd3c:	31400526 	beq	r6,r5,bd54 <memchr+0x88>
    bd40:	1805883a 	mov	r2,r3
    bd44:	20fffb1e 	bne	r4,r3,bd34 <__alt_mem_onchip_memory+0xf780bd34>
    bd48:	0005883a 	mov	r2,zero
    bd4c:	f800283a 	ret
    bd50:	2005883a 	mov	r2,r4
    bd54:	f800283a 	ret
    bd58:	28c03fcc 	andi	r3,r5,255
    bd5c:	1812923a 	slli	r9,r3,8
    bd60:	02ffbff4 	movhi	r11,65279
    bd64:	02a02074 	movhi	r10,32897
    bd68:	48d2b03a 	or	r9,r9,r3
    bd6c:	4806943a 	slli	r3,r9,16
    bd70:	5affbfc4 	addi	r11,r11,-257
    bd74:	52a02004 	addi	r10,r10,-32640
    bd78:	48d2b03a 	or	r9,r9,r3
    bd7c:	20c00017 	ldw	r3,0(r4)
    bd80:	48c6f03a 	xor	r3,r9,r3
    bd84:	1acd883a 	add	r6,r3,r11
    bd88:	00c6303a 	nor	r3,zero,r3
    bd8c:	30c6703a 	and	r3,r6,r3
    bd90:	1a86703a 	and	r3,r3,r10
    bd94:	183fe01e 	bne	r3,zero,bd18 <__alt_mem_onchip_memory+0xf780bd18>
    bd98:	10bfff04 	addi	r2,r2,-4
    bd9c:	21000104 	addi	r4,r4,4
    bda0:	40bff636 	bltu	r8,r2,bd7c <__alt_mem_onchip_memory+0xf780bd7c>
    bda4:	003fdb06 	br	bd14 <__alt_mem_onchip_memory+0xf780bd14>
    bda8:	3005883a 	mov	r2,r6
    bdac:	003fd706 	br	bd0c <__alt_mem_onchip_memory+0xf780bd0c>

0000bdb0 <memcpy>:
    bdb0:	defffd04 	addi	sp,sp,-12
    bdb4:	dfc00215 	stw	ra,8(sp)
    bdb8:	dc400115 	stw	r17,4(sp)
    bdbc:	dc000015 	stw	r16,0(sp)
    bdc0:	00c003c4 	movi	r3,15
    bdc4:	2005883a 	mov	r2,r4
    bdc8:	1980452e 	bgeu	r3,r6,bee0 <memcpy+0x130>
    bdcc:	2906b03a 	or	r3,r5,r4
    bdd0:	18c000cc 	andi	r3,r3,3
    bdd4:	1800441e 	bne	r3,zero,bee8 <memcpy+0x138>
    bdd8:	347ffc04 	addi	r17,r6,-16
    bddc:	8822d13a 	srli	r17,r17,4
    bde0:	28c00104 	addi	r3,r5,4
    bde4:	23400104 	addi	r13,r4,4
    bde8:	8820913a 	slli	r16,r17,4
    bdec:	2b000204 	addi	r12,r5,8
    bdf0:	22c00204 	addi	r11,r4,8
    bdf4:	84000504 	addi	r16,r16,20
    bdf8:	2a800304 	addi	r10,r5,12
    bdfc:	22400304 	addi	r9,r4,12
    be00:	2c21883a 	add	r16,r5,r16
    be04:	2811883a 	mov	r8,r5
    be08:	200f883a 	mov	r7,r4
    be0c:	41000017 	ldw	r4,0(r8)
    be10:	1fc00017 	ldw	ra,0(r3)
    be14:	63c00017 	ldw	r15,0(r12)
    be18:	39000015 	stw	r4,0(r7)
    be1c:	53800017 	ldw	r14,0(r10)
    be20:	6fc00015 	stw	ra,0(r13)
    be24:	5bc00015 	stw	r15,0(r11)
    be28:	4b800015 	stw	r14,0(r9)
    be2c:	18c00404 	addi	r3,r3,16
    be30:	39c00404 	addi	r7,r7,16
    be34:	42000404 	addi	r8,r8,16
    be38:	6b400404 	addi	r13,r13,16
    be3c:	63000404 	addi	r12,r12,16
    be40:	5ac00404 	addi	r11,r11,16
    be44:	52800404 	addi	r10,r10,16
    be48:	4a400404 	addi	r9,r9,16
    be4c:	1c3fef1e 	bne	r3,r16,be0c <__alt_mem_onchip_memory+0xf780be0c>
    be50:	89c00044 	addi	r7,r17,1
    be54:	380e913a 	slli	r7,r7,4
    be58:	310003cc 	andi	r4,r6,15
    be5c:	02c000c4 	movi	r11,3
    be60:	11c7883a 	add	r3,r2,r7
    be64:	29cb883a 	add	r5,r5,r7
    be68:	5900212e 	bgeu	r11,r4,bef0 <memcpy+0x140>
    be6c:	1813883a 	mov	r9,r3
    be70:	2811883a 	mov	r8,r5
    be74:	200f883a 	mov	r7,r4
    be78:	42800017 	ldw	r10,0(r8)
    be7c:	4a400104 	addi	r9,r9,4
    be80:	39ffff04 	addi	r7,r7,-4
    be84:	4abfff15 	stw	r10,-4(r9)
    be88:	42000104 	addi	r8,r8,4
    be8c:	59fffa36 	bltu	r11,r7,be78 <__alt_mem_onchip_memory+0xf780be78>
    be90:	213fff04 	addi	r4,r4,-4
    be94:	2008d0ba 	srli	r4,r4,2
    be98:	318000cc 	andi	r6,r6,3
    be9c:	21000044 	addi	r4,r4,1
    bea0:	2109883a 	add	r4,r4,r4
    bea4:	2109883a 	add	r4,r4,r4
    bea8:	1907883a 	add	r3,r3,r4
    beac:	290b883a 	add	r5,r5,r4
    beb0:	30000626 	beq	r6,zero,becc <memcpy+0x11c>
    beb4:	198d883a 	add	r6,r3,r6
    beb8:	29c00003 	ldbu	r7,0(r5)
    bebc:	18c00044 	addi	r3,r3,1
    bec0:	29400044 	addi	r5,r5,1
    bec4:	19ffffc5 	stb	r7,-1(r3)
    bec8:	19bffb1e 	bne	r3,r6,beb8 <__alt_mem_onchip_memory+0xf780beb8>
    becc:	dfc00217 	ldw	ra,8(sp)
    bed0:	dc400117 	ldw	r17,4(sp)
    bed4:	dc000017 	ldw	r16,0(sp)
    bed8:	dec00304 	addi	sp,sp,12
    bedc:	f800283a 	ret
    bee0:	2007883a 	mov	r3,r4
    bee4:	003ff206 	br	beb0 <__alt_mem_onchip_memory+0xf780beb0>
    bee8:	2007883a 	mov	r3,r4
    beec:	003ff106 	br	beb4 <__alt_mem_onchip_memory+0xf780beb4>
    bef0:	200d883a 	mov	r6,r4
    bef4:	003fee06 	br	beb0 <__alt_mem_onchip_memory+0xf780beb0>

0000bef8 <memmove>:
    bef8:	2005883a 	mov	r2,r4
    befc:	29000b2e 	bgeu	r5,r4,bf2c <memmove+0x34>
    bf00:	298f883a 	add	r7,r5,r6
    bf04:	21c0092e 	bgeu	r4,r7,bf2c <memmove+0x34>
    bf08:	2187883a 	add	r3,r4,r6
    bf0c:	198bc83a 	sub	r5,r3,r6
    bf10:	30004826 	beq	r6,zero,c034 <memmove+0x13c>
    bf14:	39ffffc4 	addi	r7,r7,-1
    bf18:	39000003 	ldbu	r4,0(r7)
    bf1c:	18ffffc4 	addi	r3,r3,-1
    bf20:	19000005 	stb	r4,0(r3)
    bf24:	28fffb1e 	bne	r5,r3,bf14 <__alt_mem_onchip_memory+0xf780bf14>
    bf28:	f800283a 	ret
    bf2c:	00c003c4 	movi	r3,15
    bf30:	1980412e 	bgeu	r3,r6,c038 <memmove+0x140>
    bf34:	2886b03a 	or	r3,r5,r2
    bf38:	18c000cc 	andi	r3,r3,3
    bf3c:	1800401e 	bne	r3,zero,c040 <memmove+0x148>
    bf40:	33fffc04 	addi	r15,r6,-16
    bf44:	781ed13a 	srli	r15,r15,4
    bf48:	28c00104 	addi	r3,r5,4
    bf4c:	13400104 	addi	r13,r2,4
    bf50:	781c913a 	slli	r14,r15,4
    bf54:	2b000204 	addi	r12,r5,8
    bf58:	12c00204 	addi	r11,r2,8
    bf5c:	73800504 	addi	r14,r14,20
    bf60:	2a800304 	addi	r10,r5,12
    bf64:	12400304 	addi	r9,r2,12
    bf68:	2b9d883a 	add	r14,r5,r14
    bf6c:	2811883a 	mov	r8,r5
    bf70:	100f883a 	mov	r7,r2
    bf74:	41000017 	ldw	r4,0(r8)
    bf78:	39c00404 	addi	r7,r7,16
    bf7c:	18c00404 	addi	r3,r3,16
    bf80:	393ffc15 	stw	r4,-16(r7)
    bf84:	193ffc17 	ldw	r4,-16(r3)
    bf88:	6b400404 	addi	r13,r13,16
    bf8c:	5ac00404 	addi	r11,r11,16
    bf90:	693ffc15 	stw	r4,-16(r13)
    bf94:	61000017 	ldw	r4,0(r12)
    bf98:	4a400404 	addi	r9,r9,16
    bf9c:	42000404 	addi	r8,r8,16
    bfa0:	593ffc15 	stw	r4,-16(r11)
    bfa4:	51000017 	ldw	r4,0(r10)
    bfa8:	63000404 	addi	r12,r12,16
    bfac:	52800404 	addi	r10,r10,16
    bfb0:	493ffc15 	stw	r4,-16(r9)
    bfb4:	1bbfef1e 	bne	r3,r14,bf74 <__alt_mem_onchip_memory+0xf780bf74>
    bfb8:	79000044 	addi	r4,r15,1
    bfbc:	2008913a 	slli	r4,r4,4
    bfc0:	328003cc 	andi	r10,r6,15
    bfc4:	02c000c4 	movi	r11,3
    bfc8:	1107883a 	add	r3,r2,r4
    bfcc:	290b883a 	add	r5,r5,r4
    bfd0:	5a801e2e 	bgeu	r11,r10,c04c <memmove+0x154>
    bfd4:	1813883a 	mov	r9,r3
    bfd8:	2811883a 	mov	r8,r5
    bfdc:	500f883a 	mov	r7,r10
    bfe0:	41000017 	ldw	r4,0(r8)
    bfe4:	4a400104 	addi	r9,r9,4
    bfe8:	39ffff04 	addi	r7,r7,-4
    bfec:	493fff15 	stw	r4,-4(r9)
    bff0:	42000104 	addi	r8,r8,4
    bff4:	59fffa36 	bltu	r11,r7,bfe0 <__alt_mem_onchip_memory+0xf780bfe0>
    bff8:	513fff04 	addi	r4,r10,-4
    bffc:	2008d0ba 	srli	r4,r4,2
    c000:	318000cc 	andi	r6,r6,3
    c004:	21000044 	addi	r4,r4,1
    c008:	2109883a 	add	r4,r4,r4
    c00c:	2109883a 	add	r4,r4,r4
    c010:	1907883a 	add	r3,r3,r4
    c014:	290b883a 	add	r5,r5,r4
    c018:	30000b26 	beq	r6,zero,c048 <memmove+0x150>
    c01c:	198d883a 	add	r6,r3,r6
    c020:	29c00003 	ldbu	r7,0(r5)
    c024:	18c00044 	addi	r3,r3,1
    c028:	29400044 	addi	r5,r5,1
    c02c:	19ffffc5 	stb	r7,-1(r3)
    c030:	19bffb1e 	bne	r3,r6,c020 <__alt_mem_onchip_memory+0xf780c020>
    c034:	f800283a 	ret
    c038:	1007883a 	mov	r3,r2
    c03c:	003ff606 	br	c018 <__alt_mem_onchip_memory+0xf780c018>
    c040:	1007883a 	mov	r3,r2
    c044:	003ff506 	br	c01c <__alt_mem_onchip_memory+0xf780c01c>
    c048:	f800283a 	ret
    c04c:	500d883a 	mov	r6,r10
    c050:	003ff106 	br	c018 <__alt_mem_onchip_memory+0xf780c018>

0000c054 <memset>:
    c054:	20c000cc 	andi	r3,r4,3
    c058:	2005883a 	mov	r2,r4
    c05c:	18004426 	beq	r3,zero,c170 <memset+0x11c>
    c060:	31ffffc4 	addi	r7,r6,-1
    c064:	30004026 	beq	r6,zero,c168 <memset+0x114>
    c068:	2813883a 	mov	r9,r5
    c06c:	200d883a 	mov	r6,r4
    c070:	2007883a 	mov	r3,r4
    c074:	00000406 	br	c088 <memset+0x34>
    c078:	3a3fffc4 	addi	r8,r7,-1
    c07c:	31800044 	addi	r6,r6,1
    c080:	38003926 	beq	r7,zero,c168 <memset+0x114>
    c084:	400f883a 	mov	r7,r8
    c088:	18c00044 	addi	r3,r3,1
    c08c:	32400005 	stb	r9,0(r6)
    c090:	1a0000cc 	andi	r8,r3,3
    c094:	403ff81e 	bne	r8,zero,c078 <__alt_mem_onchip_memory+0xf780c078>
    c098:	010000c4 	movi	r4,3
    c09c:	21c02d2e 	bgeu	r4,r7,c154 <memset+0x100>
    c0a0:	29003fcc 	andi	r4,r5,255
    c0a4:	200c923a 	slli	r6,r4,8
    c0a8:	3108b03a 	or	r4,r6,r4
    c0ac:	200c943a 	slli	r6,r4,16
    c0b0:	218cb03a 	or	r6,r4,r6
    c0b4:	010003c4 	movi	r4,15
    c0b8:	21c0182e 	bgeu	r4,r7,c11c <memset+0xc8>
    c0bc:	3b3ffc04 	addi	r12,r7,-16
    c0c0:	6018d13a 	srli	r12,r12,4
    c0c4:	1a000104 	addi	r8,r3,4
    c0c8:	1ac00204 	addi	r11,r3,8
    c0cc:	6008913a 	slli	r4,r12,4
    c0d0:	1a800304 	addi	r10,r3,12
    c0d4:	1813883a 	mov	r9,r3
    c0d8:	21000504 	addi	r4,r4,20
    c0dc:	1909883a 	add	r4,r3,r4
    c0e0:	49800015 	stw	r6,0(r9)
    c0e4:	41800015 	stw	r6,0(r8)
    c0e8:	59800015 	stw	r6,0(r11)
    c0ec:	51800015 	stw	r6,0(r10)
    c0f0:	42000404 	addi	r8,r8,16
    c0f4:	4a400404 	addi	r9,r9,16
    c0f8:	5ac00404 	addi	r11,r11,16
    c0fc:	52800404 	addi	r10,r10,16
    c100:	413ff71e 	bne	r8,r4,c0e0 <__alt_mem_onchip_memory+0xf780c0e0>
    c104:	63000044 	addi	r12,r12,1
    c108:	6018913a 	slli	r12,r12,4
    c10c:	39c003cc 	andi	r7,r7,15
    c110:	010000c4 	movi	r4,3
    c114:	1b07883a 	add	r3,r3,r12
    c118:	21c00e2e 	bgeu	r4,r7,c154 <memset+0x100>
    c11c:	1813883a 	mov	r9,r3
    c120:	3811883a 	mov	r8,r7
    c124:	010000c4 	movi	r4,3
    c128:	49800015 	stw	r6,0(r9)
    c12c:	423fff04 	addi	r8,r8,-4
    c130:	4a400104 	addi	r9,r9,4
    c134:	223ffc36 	bltu	r4,r8,c128 <__alt_mem_onchip_memory+0xf780c128>
    c138:	393fff04 	addi	r4,r7,-4
    c13c:	2008d0ba 	srli	r4,r4,2
    c140:	39c000cc 	andi	r7,r7,3
    c144:	21000044 	addi	r4,r4,1
    c148:	2109883a 	add	r4,r4,r4
    c14c:	2109883a 	add	r4,r4,r4
    c150:	1907883a 	add	r3,r3,r4
    c154:	38000526 	beq	r7,zero,c16c <memset+0x118>
    c158:	19cf883a 	add	r7,r3,r7
    c15c:	19400005 	stb	r5,0(r3)
    c160:	18c00044 	addi	r3,r3,1
    c164:	38fffd1e 	bne	r7,r3,c15c <__alt_mem_onchip_memory+0xf780c15c>
    c168:	f800283a 	ret
    c16c:	f800283a 	ret
    c170:	2007883a 	mov	r3,r4
    c174:	300f883a 	mov	r7,r6
    c178:	003fc706 	br	c098 <__alt_mem_onchip_memory+0xf780c098>

0000c17c <_Balloc>:
    c17c:	20801317 	ldw	r2,76(r4)
    c180:	defffc04 	addi	sp,sp,-16
    c184:	dc400115 	stw	r17,4(sp)
    c188:	dc000015 	stw	r16,0(sp)
    c18c:	dfc00315 	stw	ra,12(sp)
    c190:	dc800215 	stw	r18,8(sp)
    c194:	2023883a 	mov	r17,r4
    c198:	2821883a 	mov	r16,r5
    c19c:	10000f26 	beq	r2,zero,c1dc <_Balloc+0x60>
    c1a0:	8407883a 	add	r3,r16,r16
    c1a4:	18c7883a 	add	r3,r3,r3
    c1a8:	10c7883a 	add	r3,r2,r3
    c1ac:	18800017 	ldw	r2,0(r3)
    c1b0:	10001126 	beq	r2,zero,c1f8 <_Balloc+0x7c>
    c1b4:	11000017 	ldw	r4,0(r2)
    c1b8:	19000015 	stw	r4,0(r3)
    c1bc:	10000415 	stw	zero,16(r2)
    c1c0:	10000315 	stw	zero,12(r2)
    c1c4:	dfc00317 	ldw	ra,12(sp)
    c1c8:	dc800217 	ldw	r18,8(sp)
    c1cc:	dc400117 	ldw	r17,4(sp)
    c1d0:	dc000017 	ldw	r16,0(sp)
    c1d4:	dec00404 	addi	sp,sp,16
    c1d8:	f800283a 	ret
    c1dc:	01800844 	movi	r6,33
    c1e0:	01400104 	movi	r5,4
    c1e4:	000f3040 	call	f304 <_calloc_r>
    c1e8:	88801315 	stw	r2,76(r17)
    c1ec:	103fec1e 	bne	r2,zero,c1a0 <__alt_mem_onchip_memory+0xf780c1a0>
    c1f0:	0005883a 	mov	r2,zero
    c1f4:	003ff306 	br	c1c4 <__alt_mem_onchip_memory+0xf780c1c4>
    c1f8:	01400044 	movi	r5,1
    c1fc:	2c24983a 	sll	r18,r5,r16
    c200:	8809883a 	mov	r4,r17
    c204:	91800144 	addi	r6,r18,5
    c208:	318d883a 	add	r6,r6,r6
    c20c:	318d883a 	add	r6,r6,r6
    c210:	000f3040 	call	f304 <_calloc_r>
    c214:	103ff626 	beq	r2,zero,c1f0 <__alt_mem_onchip_memory+0xf780c1f0>
    c218:	14000115 	stw	r16,4(r2)
    c21c:	14800215 	stw	r18,8(r2)
    c220:	003fe606 	br	c1bc <__alt_mem_onchip_memory+0xf780c1bc>

0000c224 <_Bfree>:
    c224:	28000826 	beq	r5,zero,c248 <_Bfree+0x24>
    c228:	28c00117 	ldw	r3,4(r5)
    c22c:	20801317 	ldw	r2,76(r4)
    c230:	18c7883a 	add	r3,r3,r3
    c234:	18c7883a 	add	r3,r3,r3
    c238:	10c5883a 	add	r2,r2,r3
    c23c:	10c00017 	ldw	r3,0(r2)
    c240:	28c00015 	stw	r3,0(r5)
    c244:	11400015 	stw	r5,0(r2)
    c248:	f800283a 	ret

0000c24c <__multadd>:
    c24c:	defffa04 	addi	sp,sp,-24
    c250:	dc800315 	stw	r18,12(sp)
    c254:	dc400215 	stw	r17,8(sp)
    c258:	dc000115 	stw	r16,4(sp)
    c25c:	2823883a 	mov	r17,r5
    c260:	2c000417 	ldw	r16,16(r5)
    c264:	dfc00515 	stw	ra,20(sp)
    c268:	dcc00415 	stw	r19,16(sp)
    c26c:	2025883a 	mov	r18,r4
    c270:	29400504 	addi	r5,r5,20
    c274:	0011883a 	mov	r8,zero
    c278:	28c00017 	ldw	r3,0(r5)
    c27c:	29400104 	addi	r5,r5,4
    c280:	42000044 	addi	r8,r8,1
    c284:	18bfffcc 	andi	r2,r3,65535
    c288:	1185383a 	mul	r2,r2,r6
    c28c:	1806d43a 	srli	r3,r3,16
    c290:	11cf883a 	add	r7,r2,r7
    c294:	3808d43a 	srli	r4,r7,16
    c298:	1987383a 	mul	r3,r3,r6
    c29c:	38bfffcc 	andi	r2,r7,65535
    c2a0:	1907883a 	add	r3,r3,r4
    c2a4:	1808943a 	slli	r4,r3,16
    c2a8:	180ed43a 	srli	r7,r3,16
    c2ac:	2085883a 	add	r2,r4,r2
    c2b0:	28bfff15 	stw	r2,-4(r5)
    c2b4:	443ff016 	blt	r8,r16,c278 <__alt_mem_onchip_memory+0xf780c278>
    c2b8:	38000926 	beq	r7,zero,c2e0 <__multadd+0x94>
    c2bc:	88800217 	ldw	r2,8(r17)
    c2c0:	80800f0e 	bge	r16,r2,c300 <__multadd+0xb4>
    c2c4:	80800144 	addi	r2,r16,5
    c2c8:	1085883a 	add	r2,r2,r2
    c2cc:	1085883a 	add	r2,r2,r2
    c2d0:	8885883a 	add	r2,r17,r2
    c2d4:	11c00015 	stw	r7,0(r2)
    c2d8:	84000044 	addi	r16,r16,1
    c2dc:	8c000415 	stw	r16,16(r17)
    c2e0:	8805883a 	mov	r2,r17
    c2e4:	dfc00517 	ldw	ra,20(sp)
    c2e8:	dcc00417 	ldw	r19,16(sp)
    c2ec:	dc800317 	ldw	r18,12(sp)
    c2f0:	dc400217 	ldw	r17,8(sp)
    c2f4:	dc000117 	ldw	r16,4(sp)
    c2f8:	dec00604 	addi	sp,sp,24
    c2fc:	f800283a 	ret
    c300:	89400117 	ldw	r5,4(r17)
    c304:	9009883a 	mov	r4,r18
    c308:	d9c00015 	stw	r7,0(sp)
    c30c:	29400044 	addi	r5,r5,1
    c310:	000c17c0 	call	c17c <_Balloc>
    c314:	89800417 	ldw	r6,16(r17)
    c318:	89400304 	addi	r5,r17,12
    c31c:	11000304 	addi	r4,r2,12
    c320:	31800084 	addi	r6,r6,2
    c324:	318d883a 	add	r6,r6,r6
    c328:	318d883a 	add	r6,r6,r6
    c32c:	1027883a 	mov	r19,r2
    c330:	000bdb00 	call	bdb0 <memcpy>
    c334:	d9c00017 	ldw	r7,0(sp)
    c338:	88000a26 	beq	r17,zero,c364 <__multadd+0x118>
    c33c:	88c00117 	ldw	r3,4(r17)
    c340:	90801317 	ldw	r2,76(r18)
    c344:	18c7883a 	add	r3,r3,r3
    c348:	18c7883a 	add	r3,r3,r3
    c34c:	10c5883a 	add	r2,r2,r3
    c350:	10c00017 	ldw	r3,0(r2)
    c354:	88c00015 	stw	r3,0(r17)
    c358:	14400015 	stw	r17,0(r2)
    c35c:	9823883a 	mov	r17,r19
    c360:	003fd806 	br	c2c4 <__alt_mem_onchip_memory+0xf780c2c4>
    c364:	9823883a 	mov	r17,r19
    c368:	003fd606 	br	c2c4 <__alt_mem_onchip_memory+0xf780c2c4>

0000c36c <__s2b>:
    c36c:	defff904 	addi	sp,sp,-28
    c370:	dc400115 	stw	r17,4(sp)
    c374:	dc000015 	stw	r16,0(sp)
    c378:	2023883a 	mov	r17,r4
    c37c:	2821883a 	mov	r16,r5
    c380:	39000204 	addi	r4,r7,8
    c384:	01400244 	movi	r5,9
    c388:	dcc00315 	stw	r19,12(sp)
    c38c:	dc800215 	stw	r18,8(sp)
    c390:	dfc00615 	stw	ra,24(sp)
    c394:	dd400515 	stw	r21,20(sp)
    c398:	dd000415 	stw	r20,16(sp)
    c39c:	3825883a 	mov	r18,r7
    c3a0:	3027883a 	mov	r19,r6
    c3a4:	0005f780 	call	5f78 <__divsi3>
    c3a8:	00c00044 	movi	r3,1
    c3ac:	000b883a 	mov	r5,zero
    c3b0:	1880030e 	bge	r3,r2,c3c0 <__s2b+0x54>
    c3b4:	18c7883a 	add	r3,r3,r3
    c3b8:	29400044 	addi	r5,r5,1
    c3bc:	18bffd16 	blt	r3,r2,c3b4 <__alt_mem_onchip_memory+0xf780c3b4>
    c3c0:	8809883a 	mov	r4,r17
    c3c4:	000c17c0 	call	c17c <_Balloc>
    c3c8:	d8c00717 	ldw	r3,28(sp)
    c3cc:	10c00515 	stw	r3,20(r2)
    c3d0:	00c00044 	movi	r3,1
    c3d4:	10c00415 	stw	r3,16(r2)
    c3d8:	00c00244 	movi	r3,9
    c3dc:	1cc0210e 	bge	r3,r19,c464 <__s2b+0xf8>
    c3e0:	80eb883a 	add	r21,r16,r3
    c3e4:	a829883a 	mov	r20,r21
    c3e8:	84e1883a 	add	r16,r16,r19
    c3ec:	a1c00007 	ldb	r7,0(r20)
    c3f0:	01800284 	movi	r6,10
    c3f4:	a5000044 	addi	r20,r20,1
    c3f8:	100b883a 	mov	r5,r2
    c3fc:	39fff404 	addi	r7,r7,-48
    c400:	8809883a 	mov	r4,r17
    c404:	000c24c0 	call	c24c <__multadd>
    c408:	a43ff81e 	bne	r20,r16,c3ec <__alt_mem_onchip_memory+0xf780c3ec>
    c40c:	ace1883a 	add	r16,r21,r19
    c410:	843ffe04 	addi	r16,r16,-8
    c414:	9c800a0e 	bge	r19,r18,c440 <__s2b+0xd4>
    c418:	94e5c83a 	sub	r18,r18,r19
    c41c:	84a5883a 	add	r18,r16,r18
    c420:	81c00007 	ldb	r7,0(r16)
    c424:	01800284 	movi	r6,10
    c428:	84000044 	addi	r16,r16,1
    c42c:	100b883a 	mov	r5,r2
    c430:	39fff404 	addi	r7,r7,-48
    c434:	8809883a 	mov	r4,r17
    c438:	000c24c0 	call	c24c <__multadd>
    c43c:	84bff81e 	bne	r16,r18,c420 <__alt_mem_onchip_memory+0xf780c420>
    c440:	dfc00617 	ldw	ra,24(sp)
    c444:	dd400517 	ldw	r21,20(sp)
    c448:	dd000417 	ldw	r20,16(sp)
    c44c:	dcc00317 	ldw	r19,12(sp)
    c450:	dc800217 	ldw	r18,8(sp)
    c454:	dc400117 	ldw	r17,4(sp)
    c458:	dc000017 	ldw	r16,0(sp)
    c45c:	dec00704 	addi	sp,sp,28
    c460:	f800283a 	ret
    c464:	84000284 	addi	r16,r16,10
    c468:	1827883a 	mov	r19,r3
    c46c:	003fe906 	br	c414 <__alt_mem_onchip_memory+0xf780c414>

0000c470 <__hi0bits>:
    c470:	20bfffec 	andhi	r2,r4,65535
    c474:	1000141e 	bne	r2,zero,c4c8 <__hi0bits+0x58>
    c478:	2008943a 	slli	r4,r4,16
    c47c:	00800404 	movi	r2,16
    c480:	20ffc02c 	andhi	r3,r4,65280
    c484:	1800021e 	bne	r3,zero,c490 <__hi0bits+0x20>
    c488:	2008923a 	slli	r4,r4,8
    c48c:	10800204 	addi	r2,r2,8
    c490:	20fc002c 	andhi	r3,r4,61440
    c494:	1800021e 	bne	r3,zero,c4a0 <__hi0bits+0x30>
    c498:	2008913a 	slli	r4,r4,4
    c49c:	10800104 	addi	r2,r2,4
    c4a0:	20f0002c 	andhi	r3,r4,49152
    c4a4:	1800031e 	bne	r3,zero,c4b4 <__hi0bits+0x44>
    c4a8:	2109883a 	add	r4,r4,r4
    c4ac:	10800084 	addi	r2,r2,2
    c4b0:	2109883a 	add	r4,r4,r4
    c4b4:	20000316 	blt	r4,zero,c4c4 <__hi0bits+0x54>
    c4b8:	2110002c 	andhi	r4,r4,16384
    c4bc:	2000041e 	bne	r4,zero,c4d0 <__hi0bits+0x60>
    c4c0:	00800804 	movi	r2,32
    c4c4:	f800283a 	ret
    c4c8:	0005883a 	mov	r2,zero
    c4cc:	003fec06 	br	c480 <__alt_mem_onchip_memory+0xf780c480>
    c4d0:	10800044 	addi	r2,r2,1
    c4d4:	f800283a 	ret

0000c4d8 <__lo0bits>:
    c4d8:	20c00017 	ldw	r3,0(r4)
    c4dc:	188001cc 	andi	r2,r3,7
    c4e0:	10000826 	beq	r2,zero,c504 <__lo0bits+0x2c>
    c4e4:	1880004c 	andi	r2,r3,1
    c4e8:	1000211e 	bne	r2,zero,c570 <__lo0bits+0x98>
    c4ec:	1880008c 	andi	r2,r3,2
    c4f0:	1000211e 	bne	r2,zero,c578 <__lo0bits+0xa0>
    c4f4:	1806d0ba 	srli	r3,r3,2
    c4f8:	00800084 	movi	r2,2
    c4fc:	20c00015 	stw	r3,0(r4)
    c500:	f800283a 	ret
    c504:	18bfffcc 	andi	r2,r3,65535
    c508:	10001326 	beq	r2,zero,c558 <__lo0bits+0x80>
    c50c:	0005883a 	mov	r2,zero
    c510:	19403fcc 	andi	r5,r3,255
    c514:	2800021e 	bne	r5,zero,c520 <__lo0bits+0x48>
    c518:	1806d23a 	srli	r3,r3,8
    c51c:	10800204 	addi	r2,r2,8
    c520:	194003cc 	andi	r5,r3,15
    c524:	2800021e 	bne	r5,zero,c530 <__lo0bits+0x58>
    c528:	1806d13a 	srli	r3,r3,4
    c52c:	10800104 	addi	r2,r2,4
    c530:	194000cc 	andi	r5,r3,3
    c534:	2800021e 	bne	r5,zero,c540 <__lo0bits+0x68>
    c538:	1806d0ba 	srli	r3,r3,2
    c53c:	10800084 	addi	r2,r2,2
    c540:	1940004c 	andi	r5,r3,1
    c544:	2800081e 	bne	r5,zero,c568 <__lo0bits+0x90>
    c548:	1806d07a 	srli	r3,r3,1
    c54c:	1800051e 	bne	r3,zero,c564 <__lo0bits+0x8c>
    c550:	00800804 	movi	r2,32
    c554:	f800283a 	ret
    c558:	1806d43a 	srli	r3,r3,16
    c55c:	00800404 	movi	r2,16
    c560:	003feb06 	br	c510 <__alt_mem_onchip_memory+0xf780c510>
    c564:	10800044 	addi	r2,r2,1
    c568:	20c00015 	stw	r3,0(r4)
    c56c:	f800283a 	ret
    c570:	0005883a 	mov	r2,zero
    c574:	f800283a 	ret
    c578:	1806d07a 	srli	r3,r3,1
    c57c:	00800044 	movi	r2,1
    c580:	20c00015 	stw	r3,0(r4)
    c584:	f800283a 	ret

0000c588 <__i2b>:
    c588:	defffd04 	addi	sp,sp,-12
    c58c:	dc000015 	stw	r16,0(sp)
    c590:	04000044 	movi	r16,1
    c594:	dc400115 	stw	r17,4(sp)
    c598:	2823883a 	mov	r17,r5
    c59c:	800b883a 	mov	r5,r16
    c5a0:	dfc00215 	stw	ra,8(sp)
    c5a4:	000c17c0 	call	c17c <_Balloc>
    c5a8:	14400515 	stw	r17,20(r2)
    c5ac:	14000415 	stw	r16,16(r2)
    c5b0:	dfc00217 	ldw	ra,8(sp)
    c5b4:	dc400117 	ldw	r17,4(sp)
    c5b8:	dc000017 	ldw	r16,0(sp)
    c5bc:	dec00304 	addi	sp,sp,12
    c5c0:	f800283a 	ret

0000c5c4 <__multiply>:
    c5c4:	defffa04 	addi	sp,sp,-24
    c5c8:	dcc00315 	stw	r19,12(sp)
    c5cc:	dc800215 	stw	r18,8(sp)
    c5d0:	34c00417 	ldw	r19,16(r6)
    c5d4:	2c800417 	ldw	r18,16(r5)
    c5d8:	dd000415 	stw	r20,16(sp)
    c5dc:	dc400115 	stw	r17,4(sp)
    c5e0:	dfc00515 	stw	ra,20(sp)
    c5e4:	dc000015 	stw	r16,0(sp)
    c5e8:	2829883a 	mov	r20,r5
    c5ec:	3023883a 	mov	r17,r6
    c5f0:	94c0050e 	bge	r18,r19,c608 <__multiply+0x44>
    c5f4:	9007883a 	mov	r3,r18
    c5f8:	3029883a 	mov	r20,r6
    c5fc:	9825883a 	mov	r18,r19
    c600:	2823883a 	mov	r17,r5
    c604:	1827883a 	mov	r19,r3
    c608:	a0800217 	ldw	r2,8(r20)
    c60c:	94e1883a 	add	r16,r18,r19
    c610:	a1400117 	ldw	r5,4(r20)
    c614:	1400010e 	bge	r2,r16,c61c <__multiply+0x58>
    c618:	29400044 	addi	r5,r5,1
    c61c:	000c17c0 	call	c17c <_Balloc>
    c620:	8415883a 	add	r10,r16,r16
    c624:	12c00504 	addi	r11,r2,20
    c628:	5295883a 	add	r10,r10,r10
    c62c:	5a95883a 	add	r10,r11,r10
    c630:	5807883a 	mov	r3,r11
    c634:	5a80032e 	bgeu	r11,r10,c644 <__multiply+0x80>
    c638:	18000015 	stw	zero,0(r3)
    c63c:	18c00104 	addi	r3,r3,4
    c640:	1abffd36 	bltu	r3,r10,c638 <__alt_mem_onchip_memory+0xf780c638>
    c644:	9ce7883a 	add	r19,r19,r19
    c648:	94a5883a 	add	r18,r18,r18
    c64c:	89800504 	addi	r6,r17,20
    c650:	9ce7883a 	add	r19,r19,r19
    c654:	a3400504 	addi	r13,r20,20
    c658:	94a5883a 	add	r18,r18,r18
    c65c:	34d9883a 	add	r12,r6,r19
    c660:	6c93883a 	add	r9,r13,r18
    c664:	3300422e 	bgeu	r6,r12,c770 <__multiply+0x1ac>
    c668:	37c00017 	ldw	ra,0(r6)
    c66c:	fbffffcc 	andi	r15,ra,65535
    c670:	78001b26 	beq	r15,zero,c6e0 <__multiply+0x11c>
    c674:	5811883a 	mov	r8,r11
    c678:	681d883a 	mov	r14,r13
    c67c:	000f883a 	mov	r7,zero
    c680:	71000017 	ldw	r4,0(r14)
    c684:	40c00017 	ldw	r3,0(r8)
    c688:	73800104 	addi	r14,r14,4
    c68c:	217fffcc 	andi	r5,r4,65535
    c690:	2bcb383a 	mul	r5,r5,r15
    c694:	2008d43a 	srli	r4,r4,16
    c698:	1c7fffcc 	andi	r17,r3,65535
    c69c:	2c4b883a 	add	r5,r5,r17
    c6a0:	29cb883a 	add	r5,r5,r7
    c6a4:	23c9383a 	mul	r4,r4,r15
    c6a8:	1806d43a 	srli	r3,r3,16
    c6ac:	280ed43a 	srli	r7,r5,16
    c6b0:	297fffcc 	andi	r5,r5,65535
    c6b4:	20c7883a 	add	r3,r4,r3
    c6b8:	19c7883a 	add	r3,r3,r7
    c6bc:	1808943a 	slli	r4,r3,16
    c6c0:	4023883a 	mov	r17,r8
    c6c4:	180ed43a 	srli	r7,r3,16
    c6c8:	214ab03a 	or	r5,r4,r5
    c6cc:	41400015 	stw	r5,0(r8)
    c6d0:	42000104 	addi	r8,r8,4
    c6d4:	727fea36 	bltu	r14,r9,c680 <__alt_mem_onchip_memory+0xf780c680>
    c6d8:	89c00115 	stw	r7,4(r17)
    c6dc:	37c00017 	ldw	ra,0(r6)
    c6e0:	f83ed43a 	srli	ra,ra,16
    c6e4:	f8001f26 	beq	ra,zero,c764 <__multiply+0x1a0>
    c6e8:	58c00017 	ldw	r3,0(r11)
    c6ec:	681d883a 	mov	r14,r13
    c6f0:	581f883a 	mov	r15,r11
    c6f4:	1811883a 	mov	r8,r3
    c6f8:	5825883a 	mov	r18,r11
    c6fc:	000f883a 	mov	r7,zero
    c700:	00000106 	br	c708 <__multiply+0x144>
    c704:	8825883a 	mov	r18,r17
    c708:	7140000b 	ldhu	r5,0(r14)
    c70c:	4010d43a 	srli	r8,r8,16
    c710:	193fffcc 	andi	r4,r3,65535
    c714:	2fcb383a 	mul	r5,r5,ra
    c718:	7bc00104 	addi	r15,r15,4
    c71c:	73800104 	addi	r14,r14,4
    c720:	2a0b883a 	add	r5,r5,r8
    c724:	29cb883a 	add	r5,r5,r7
    c728:	2806943a 	slli	r3,r5,16
    c72c:	94400104 	addi	r17,r18,4
    c730:	280ad43a 	srli	r5,r5,16
    c734:	1908b03a 	or	r4,r3,r4
    c738:	793fff15 	stw	r4,-4(r15)
    c73c:	70ffff17 	ldw	r3,-4(r14)
    c740:	8a000017 	ldw	r8,0(r17)
    c744:	1806d43a 	srli	r3,r3,16
    c748:	413fffcc 	andi	r4,r8,65535
    c74c:	1fc7383a 	mul	r3,r3,ra
    c750:	1907883a 	add	r3,r3,r4
    c754:	1947883a 	add	r3,r3,r5
    c758:	180ed43a 	srli	r7,r3,16
    c75c:	727fe936 	bltu	r14,r9,c704 <__alt_mem_onchip_memory+0xf780c704>
    c760:	90c00115 	stw	r3,4(r18)
    c764:	31800104 	addi	r6,r6,4
    c768:	5ac00104 	addi	r11,r11,4
    c76c:	333fbe36 	bltu	r6,r12,c668 <__alt_mem_onchip_memory+0xf780c668>
    c770:	0400090e 	bge	zero,r16,c798 <__multiply+0x1d4>
    c774:	50ffff17 	ldw	r3,-4(r10)
    c778:	52bfff04 	addi	r10,r10,-4
    c77c:	18000326 	beq	r3,zero,c78c <__multiply+0x1c8>
    c780:	00000506 	br	c798 <__multiply+0x1d4>
    c784:	50c00017 	ldw	r3,0(r10)
    c788:	1800031e 	bne	r3,zero,c798 <__multiply+0x1d4>
    c78c:	843fffc4 	addi	r16,r16,-1
    c790:	52bfff04 	addi	r10,r10,-4
    c794:	803ffb1e 	bne	r16,zero,c784 <__alt_mem_onchip_memory+0xf780c784>
    c798:	14000415 	stw	r16,16(r2)
    c79c:	dfc00517 	ldw	ra,20(sp)
    c7a0:	dd000417 	ldw	r20,16(sp)
    c7a4:	dcc00317 	ldw	r19,12(sp)
    c7a8:	dc800217 	ldw	r18,8(sp)
    c7ac:	dc400117 	ldw	r17,4(sp)
    c7b0:	dc000017 	ldw	r16,0(sp)
    c7b4:	dec00604 	addi	sp,sp,24
    c7b8:	f800283a 	ret

0000c7bc <__pow5mult>:
    c7bc:	defffa04 	addi	sp,sp,-24
    c7c0:	dcc00315 	stw	r19,12(sp)
    c7c4:	dc000015 	stw	r16,0(sp)
    c7c8:	dfc00515 	stw	ra,20(sp)
    c7cc:	dd000415 	stw	r20,16(sp)
    c7d0:	dc800215 	stw	r18,8(sp)
    c7d4:	dc400115 	stw	r17,4(sp)
    c7d8:	308000cc 	andi	r2,r6,3
    c7dc:	3021883a 	mov	r16,r6
    c7e0:	2027883a 	mov	r19,r4
    c7e4:	10002f1e 	bne	r2,zero,c8a4 <__pow5mult+0xe8>
    c7e8:	2825883a 	mov	r18,r5
    c7ec:	8021d0ba 	srai	r16,r16,2
    c7f0:	80001a26 	beq	r16,zero,c85c <__pow5mult+0xa0>
    c7f4:	9c401217 	ldw	r17,72(r19)
    c7f8:	8800061e 	bne	r17,zero,c814 <__pow5mult+0x58>
    c7fc:	00003406 	br	c8d0 <__pow5mult+0x114>
    c800:	8021d07a 	srai	r16,r16,1
    c804:	80001526 	beq	r16,zero,c85c <__pow5mult+0xa0>
    c808:	88800017 	ldw	r2,0(r17)
    c80c:	10001c26 	beq	r2,zero,c880 <__pow5mult+0xc4>
    c810:	1023883a 	mov	r17,r2
    c814:	8080004c 	andi	r2,r16,1
    c818:	103ff926 	beq	r2,zero,c800 <__alt_mem_onchip_memory+0xf780c800>
    c81c:	880d883a 	mov	r6,r17
    c820:	900b883a 	mov	r5,r18
    c824:	9809883a 	mov	r4,r19
    c828:	000c5c40 	call	c5c4 <__multiply>
    c82c:	90001b26 	beq	r18,zero,c89c <__pow5mult+0xe0>
    c830:	91000117 	ldw	r4,4(r18)
    c834:	98c01317 	ldw	r3,76(r19)
    c838:	8021d07a 	srai	r16,r16,1
    c83c:	2109883a 	add	r4,r4,r4
    c840:	2109883a 	add	r4,r4,r4
    c844:	1907883a 	add	r3,r3,r4
    c848:	19000017 	ldw	r4,0(r3)
    c84c:	91000015 	stw	r4,0(r18)
    c850:	1c800015 	stw	r18,0(r3)
    c854:	1025883a 	mov	r18,r2
    c858:	803feb1e 	bne	r16,zero,c808 <__alt_mem_onchip_memory+0xf780c808>
    c85c:	9005883a 	mov	r2,r18
    c860:	dfc00517 	ldw	ra,20(sp)
    c864:	dd000417 	ldw	r20,16(sp)
    c868:	dcc00317 	ldw	r19,12(sp)
    c86c:	dc800217 	ldw	r18,8(sp)
    c870:	dc400117 	ldw	r17,4(sp)
    c874:	dc000017 	ldw	r16,0(sp)
    c878:	dec00604 	addi	sp,sp,24
    c87c:	f800283a 	ret
    c880:	880d883a 	mov	r6,r17
    c884:	880b883a 	mov	r5,r17
    c888:	9809883a 	mov	r4,r19
    c88c:	000c5c40 	call	c5c4 <__multiply>
    c890:	88800015 	stw	r2,0(r17)
    c894:	10000015 	stw	zero,0(r2)
    c898:	003fdd06 	br	c810 <__alt_mem_onchip_memory+0xf780c810>
    c89c:	1025883a 	mov	r18,r2
    c8a0:	003fd706 	br	c800 <__alt_mem_onchip_memory+0xf780c800>
    c8a4:	10bfffc4 	addi	r2,r2,-1
    c8a8:	1085883a 	add	r2,r2,r2
    c8ac:	00c00074 	movhi	r3,1
    c8b0:	18cdb904 	addi	r3,r3,14052
    c8b4:	1085883a 	add	r2,r2,r2
    c8b8:	1885883a 	add	r2,r3,r2
    c8bc:	11800017 	ldw	r6,0(r2)
    c8c0:	000f883a 	mov	r7,zero
    c8c4:	000c24c0 	call	c24c <__multadd>
    c8c8:	1025883a 	mov	r18,r2
    c8cc:	003fc706 	br	c7ec <__alt_mem_onchip_memory+0xf780c7ec>
    c8d0:	05000044 	movi	r20,1
    c8d4:	a00b883a 	mov	r5,r20
    c8d8:	9809883a 	mov	r4,r19
    c8dc:	000c17c0 	call	c17c <_Balloc>
    c8e0:	1023883a 	mov	r17,r2
    c8e4:	00809c44 	movi	r2,625
    c8e8:	88800515 	stw	r2,20(r17)
    c8ec:	8d000415 	stw	r20,16(r17)
    c8f0:	9c401215 	stw	r17,72(r19)
    c8f4:	88000015 	stw	zero,0(r17)
    c8f8:	003fc606 	br	c814 <__alt_mem_onchip_memory+0xf780c814>

0000c8fc <__lshift>:
    c8fc:	defff904 	addi	sp,sp,-28
    c900:	dd400515 	stw	r21,20(sp)
    c904:	dcc00315 	stw	r19,12(sp)
    c908:	302bd17a 	srai	r21,r6,5
    c90c:	2cc00417 	ldw	r19,16(r5)
    c910:	28800217 	ldw	r2,8(r5)
    c914:	dd000415 	stw	r20,16(sp)
    c918:	ace7883a 	add	r19,r21,r19
    c91c:	dc800215 	stw	r18,8(sp)
    c920:	dc400115 	stw	r17,4(sp)
    c924:	dc000015 	stw	r16,0(sp)
    c928:	dfc00615 	stw	ra,24(sp)
    c92c:	9c000044 	addi	r16,r19,1
    c930:	2823883a 	mov	r17,r5
    c934:	3029883a 	mov	r20,r6
    c938:	2025883a 	mov	r18,r4
    c93c:	29400117 	ldw	r5,4(r5)
    c940:	1400030e 	bge	r2,r16,c950 <__lshift+0x54>
    c944:	1085883a 	add	r2,r2,r2
    c948:	29400044 	addi	r5,r5,1
    c94c:	143ffd16 	blt	r2,r16,c944 <__alt_mem_onchip_memory+0xf780c944>
    c950:	9009883a 	mov	r4,r18
    c954:	000c17c0 	call	c17c <_Balloc>
    c958:	10c00504 	addi	r3,r2,20
    c95c:	0540070e 	bge	zero,r21,c97c <__lshift+0x80>
    c960:	ad6b883a 	add	r21,r21,r21
    c964:	ad6b883a 	add	r21,r21,r21
    c968:	1809883a 	mov	r4,r3
    c96c:	1d47883a 	add	r3,r3,r21
    c970:	20000015 	stw	zero,0(r4)
    c974:	21000104 	addi	r4,r4,4
    c978:	193ffd1e 	bne	r3,r4,c970 <__alt_mem_onchip_memory+0xf780c970>
    c97c:	8a000417 	ldw	r8,16(r17)
    c980:	89000504 	addi	r4,r17,20
    c984:	a18007cc 	andi	r6,r20,31
    c988:	4211883a 	add	r8,r8,r8
    c98c:	4211883a 	add	r8,r8,r8
    c990:	2211883a 	add	r8,r4,r8
    c994:	30002326 	beq	r6,zero,ca24 <__lshift+0x128>
    c998:	02400804 	movi	r9,32
    c99c:	4993c83a 	sub	r9,r9,r6
    c9a0:	000b883a 	mov	r5,zero
    c9a4:	21c00017 	ldw	r7,0(r4)
    c9a8:	1815883a 	mov	r10,r3
    c9ac:	18c00104 	addi	r3,r3,4
    c9b0:	398e983a 	sll	r7,r7,r6
    c9b4:	21000104 	addi	r4,r4,4
    c9b8:	394ab03a 	or	r5,r7,r5
    c9bc:	197fff15 	stw	r5,-4(r3)
    c9c0:	217fff17 	ldw	r5,-4(r4)
    c9c4:	2a4ad83a 	srl	r5,r5,r9
    c9c8:	223ff636 	bltu	r4,r8,c9a4 <__alt_mem_onchip_memory+0xf780c9a4>
    c9cc:	51400115 	stw	r5,4(r10)
    c9d0:	28001a1e 	bne	r5,zero,ca3c <__lshift+0x140>
    c9d4:	843fffc4 	addi	r16,r16,-1
    c9d8:	14000415 	stw	r16,16(r2)
    c9dc:	88000826 	beq	r17,zero,ca00 <__lshift+0x104>
    c9e0:	89000117 	ldw	r4,4(r17)
    c9e4:	90c01317 	ldw	r3,76(r18)
    c9e8:	2109883a 	add	r4,r4,r4
    c9ec:	2109883a 	add	r4,r4,r4
    c9f0:	1907883a 	add	r3,r3,r4
    c9f4:	19000017 	ldw	r4,0(r3)
    c9f8:	89000015 	stw	r4,0(r17)
    c9fc:	1c400015 	stw	r17,0(r3)
    ca00:	dfc00617 	ldw	ra,24(sp)
    ca04:	dd400517 	ldw	r21,20(sp)
    ca08:	dd000417 	ldw	r20,16(sp)
    ca0c:	dcc00317 	ldw	r19,12(sp)
    ca10:	dc800217 	ldw	r18,8(sp)
    ca14:	dc400117 	ldw	r17,4(sp)
    ca18:	dc000017 	ldw	r16,0(sp)
    ca1c:	dec00704 	addi	sp,sp,28
    ca20:	f800283a 	ret
    ca24:	21400017 	ldw	r5,0(r4)
    ca28:	18c00104 	addi	r3,r3,4
    ca2c:	21000104 	addi	r4,r4,4
    ca30:	197fff15 	stw	r5,-4(r3)
    ca34:	223ffb36 	bltu	r4,r8,ca24 <__alt_mem_onchip_memory+0xf780ca24>
    ca38:	003fe606 	br	c9d4 <__alt_mem_onchip_memory+0xf780c9d4>
    ca3c:	9c000084 	addi	r16,r19,2
    ca40:	003fe406 	br	c9d4 <__alt_mem_onchip_memory+0xf780c9d4>

0000ca44 <__mcmp>:
    ca44:	20800417 	ldw	r2,16(r4)
    ca48:	28c00417 	ldw	r3,16(r5)
    ca4c:	10c5c83a 	sub	r2,r2,r3
    ca50:	1000111e 	bne	r2,zero,ca98 <__mcmp+0x54>
    ca54:	18c7883a 	add	r3,r3,r3
    ca58:	18c7883a 	add	r3,r3,r3
    ca5c:	21000504 	addi	r4,r4,20
    ca60:	29400504 	addi	r5,r5,20
    ca64:	20c5883a 	add	r2,r4,r3
    ca68:	28cb883a 	add	r5,r5,r3
    ca6c:	00000106 	br	ca74 <__mcmp+0x30>
    ca70:	20800a2e 	bgeu	r4,r2,ca9c <__mcmp+0x58>
    ca74:	10bfff04 	addi	r2,r2,-4
    ca78:	297fff04 	addi	r5,r5,-4
    ca7c:	11800017 	ldw	r6,0(r2)
    ca80:	28c00017 	ldw	r3,0(r5)
    ca84:	30fffa26 	beq	r6,r3,ca70 <__alt_mem_onchip_memory+0xf780ca70>
    ca88:	30c00236 	bltu	r6,r3,ca94 <__mcmp+0x50>
    ca8c:	00800044 	movi	r2,1
    ca90:	f800283a 	ret
    ca94:	00bfffc4 	movi	r2,-1
    ca98:	f800283a 	ret
    ca9c:	0005883a 	mov	r2,zero
    caa0:	f800283a 	ret

0000caa4 <__mdiff>:
    caa4:	28c00417 	ldw	r3,16(r5)
    caa8:	30800417 	ldw	r2,16(r6)
    caac:	defffa04 	addi	sp,sp,-24
    cab0:	dcc00315 	stw	r19,12(sp)
    cab4:	dc800215 	stw	r18,8(sp)
    cab8:	dfc00515 	stw	ra,20(sp)
    cabc:	dd000415 	stw	r20,16(sp)
    cac0:	dc400115 	stw	r17,4(sp)
    cac4:	dc000015 	stw	r16,0(sp)
    cac8:	1887c83a 	sub	r3,r3,r2
    cacc:	2825883a 	mov	r18,r5
    cad0:	3027883a 	mov	r19,r6
    cad4:	1800141e 	bne	r3,zero,cb28 <__mdiff+0x84>
    cad8:	1085883a 	add	r2,r2,r2
    cadc:	1085883a 	add	r2,r2,r2
    cae0:	2a000504 	addi	r8,r5,20
    cae4:	34000504 	addi	r16,r6,20
    cae8:	4087883a 	add	r3,r8,r2
    caec:	8085883a 	add	r2,r16,r2
    caf0:	00000106 	br	caf8 <__mdiff+0x54>
    caf4:	40c0592e 	bgeu	r8,r3,cc5c <__mdiff+0x1b8>
    caf8:	18ffff04 	addi	r3,r3,-4
    cafc:	10bfff04 	addi	r2,r2,-4
    cb00:	19c00017 	ldw	r7,0(r3)
    cb04:	11400017 	ldw	r5,0(r2)
    cb08:	397ffa26 	beq	r7,r5,caf4 <__alt_mem_onchip_memory+0xf780caf4>
    cb0c:	3940592e 	bgeu	r7,r5,cc74 <__mdiff+0x1d0>
    cb10:	9005883a 	mov	r2,r18
    cb14:	4023883a 	mov	r17,r8
    cb18:	9825883a 	mov	r18,r19
    cb1c:	05000044 	movi	r20,1
    cb20:	1027883a 	mov	r19,r2
    cb24:	00000406 	br	cb38 <__mdiff+0x94>
    cb28:	18005616 	blt	r3,zero,cc84 <__mdiff+0x1e0>
    cb2c:	34400504 	addi	r17,r6,20
    cb30:	2c000504 	addi	r16,r5,20
    cb34:	0029883a 	mov	r20,zero
    cb38:	91400117 	ldw	r5,4(r18)
    cb3c:	000c17c0 	call	c17c <_Balloc>
    cb40:	92400417 	ldw	r9,16(r18)
    cb44:	9b000417 	ldw	r12,16(r19)
    cb48:	12c00504 	addi	r11,r2,20
    cb4c:	4a51883a 	add	r8,r9,r9
    cb50:	6319883a 	add	r12,r12,r12
    cb54:	4211883a 	add	r8,r8,r8
    cb58:	6319883a 	add	r12,r12,r12
    cb5c:	15000315 	stw	r20,12(r2)
    cb60:	8211883a 	add	r8,r16,r8
    cb64:	8b19883a 	add	r12,r17,r12
    cb68:	0007883a 	mov	r3,zero
    cb6c:	81400017 	ldw	r5,0(r16)
    cb70:	89c00017 	ldw	r7,0(r17)
    cb74:	59800104 	addi	r6,r11,4
    cb78:	293fffcc 	andi	r4,r5,65535
    cb7c:	20c7883a 	add	r3,r4,r3
    cb80:	393fffcc 	andi	r4,r7,65535
    cb84:	1909c83a 	sub	r4,r3,r4
    cb88:	280ad43a 	srli	r5,r5,16
    cb8c:	380ed43a 	srli	r7,r7,16
    cb90:	2007d43a 	srai	r3,r4,16
    cb94:	213fffcc 	andi	r4,r4,65535
    cb98:	29cbc83a 	sub	r5,r5,r7
    cb9c:	28c7883a 	add	r3,r5,r3
    cba0:	180a943a 	slli	r5,r3,16
    cba4:	8c400104 	addi	r17,r17,4
    cba8:	84000104 	addi	r16,r16,4
    cbac:	2908b03a 	or	r4,r5,r4
    cbb0:	59000015 	stw	r4,0(r11)
    cbb4:	1807d43a 	srai	r3,r3,16
    cbb8:	3015883a 	mov	r10,r6
    cbbc:	3017883a 	mov	r11,r6
    cbc0:	8b3fea36 	bltu	r17,r12,cb6c <__alt_mem_onchip_memory+0xf780cb6c>
    cbc4:	8200162e 	bgeu	r16,r8,cc20 <__mdiff+0x17c>
    cbc8:	8017883a 	mov	r11,r16
    cbcc:	59400017 	ldw	r5,0(r11)
    cbd0:	31800104 	addi	r6,r6,4
    cbd4:	5ac00104 	addi	r11,r11,4
    cbd8:	293fffcc 	andi	r4,r5,65535
    cbdc:	20c7883a 	add	r3,r4,r3
    cbe0:	280ed43a 	srli	r7,r5,16
    cbe4:	180bd43a 	srai	r5,r3,16
    cbe8:	193fffcc 	andi	r4,r3,65535
    cbec:	3947883a 	add	r3,r7,r5
    cbf0:	180a943a 	slli	r5,r3,16
    cbf4:	1807d43a 	srai	r3,r3,16
    cbf8:	2908b03a 	or	r4,r5,r4
    cbfc:	313fff15 	stw	r4,-4(r6)
    cc00:	5a3ff236 	bltu	r11,r8,cbcc <__alt_mem_onchip_memory+0xf780cbcc>
    cc04:	0406303a 	nor	r3,zero,r16
    cc08:	1a07883a 	add	r3,r3,r8
    cc0c:	1806d0ba 	srli	r3,r3,2
    cc10:	18c00044 	addi	r3,r3,1
    cc14:	18c7883a 	add	r3,r3,r3
    cc18:	18c7883a 	add	r3,r3,r3
    cc1c:	50d5883a 	add	r10,r10,r3
    cc20:	50ffff04 	addi	r3,r10,-4
    cc24:	2000041e 	bne	r4,zero,cc38 <__mdiff+0x194>
    cc28:	18ffff04 	addi	r3,r3,-4
    cc2c:	19000017 	ldw	r4,0(r3)
    cc30:	4a7fffc4 	addi	r9,r9,-1
    cc34:	203ffc26 	beq	r4,zero,cc28 <__alt_mem_onchip_memory+0xf780cc28>
    cc38:	12400415 	stw	r9,16(r2)
    cc3c:	dfc00517 	ldw	ra,20(sp)
    cc40:	dd000417 	ldw	r20,16(sp)
    cc44:	dcc00317 	ldw	r19,12(sp)
    cc48:	dc800217 	ldw	r18,8(sp)
    cc4c:	dc400117 	ldw	r17,4(sp)
    cc50:	dc000017 	ldw	r16,0(sp)
    cc54:	dec00604 	addi	sp,sp,24
    cc58:	f800283a 	ret
    cc5c:	000b883a 	mov	r5,zero
    cc60:	000c17c0 	call	c17c <_Balloc>
    cc64:	00c00044 	movi	r3,1
    cc68:	10c00415 	stw	r3,16(r2)
    cc6c:	10000515 	stw	zero,20(r2)
    cc70:	003ff206 	br	cc3c <__alt_mem_onchip_memory+0xf780cc3c>
    cc74:	8023883a 	mov	r17,r16
    cc78:	0029883a 	mov	r20,zero
    cc7c:	4021883a 	mov	r16,r8
    cc80:	003fad06 	br	cb38 <__alt_mem_onchip_memory+0xf780cb38>
    cc84:	9005883a 	mov	r2,r18
    cc88:	94400504 	addi	r17,r18,20
    cc8c:	9c000504 	addi	r16,r19,20
    cc90:	9825883a 	mov	r18,r19
    cc94:	05000044 	movi	r20,1
    cc98:	1027883a 	mov	r19,r2
    cc9c:	003fa606 	br	cb38 <__alt_mem_onchip_memory+0xf780cb38>

0000cca0 <__ulp>:
    cca0:	295ffc2c 	andhi	r5,r5,32752
    cca4:	00bf3034 	movhi	r2,64704
    cca8:	2887883a 	add	r3,r5,r2
    ccac:	00c0020e 	bge	zero,r3,ccb8 <__ulp+0x18>
    ccb0:	0005883a 	mov	r2,zero
    ccb4:	f800283a 	ret
    ccb8:	00c7c83a 	sub	r3,zero,r3
    ccbc:	1807d53a 	srai	r3,r3,20
    ccc0:	008004c4 	movi	r2,19
    ccc4:	10c00b0e 	bge	r2,r3,ccf4 <__ulp+0x54>
    ccc8:	18bffb04 	addi	r2,r3,-20
    cccc:	01000784 	movi	r4,30
    ccd0:	0007883a 	mov	r3,zero
    ccd4:	20800516 	blt	r4,r2,ccec <__ulp+0x4c>
    ccd8:	010007c4 	movi	r4,31
    ccdc:	2089c83a 	sub	r4,r4,r2
    cce0:	00800044 	movi	r2,1
    cce4:	1104983a 	sll	r2,r2,r4
    cce8:	f800283a 	ret
    ccec:	00800044 	movi	r2,1
    ccf0:	f800283a 	ret
    ccf4:	01400234 	movhi	r5,8
    ccf8:	28c7d83a 	sra	r3,r5,r3
    ccfc:	0005883a 	mov	r2,zero
    cd00:	f800283a 	ret

0000cd04 <__b2d>:
    cd04:	defffa04 	addi	sp,sp,-24
    cd08:	dc000015 	stw	r16,0(sp)
    cd0c:	24000417 	ldw	r16,16(r4)
    cd10:	dc400115 	stw	r17,4(sp)
    cd14:	24400504 	addi	r17,r4,20
    cd18:	8421883a 	add	r16,r16,r16
    cd1c:	8421883a 	add	r16,r16,r16
    cd20:	8c21883a 	add	r16,r17,r16
    cd24:	dc800215 	stw	r18,8(sp)
    cd28:	84bfff17 	ldw	r18,-4(r16)
    cd2c:	dd000415 	stw	r20,16(sp)
    cd30:	dcc00315 	stw	r19,12(sp)
    cd34:	9009883a 	mov	r4,r18
    cd38:	2829883a 	mov	r20,r5
    cd3c:	dfc00515 	stw	ra,20(sp)
    cd40:	000c4700 	call	c470 <__hi0bits>
    cd44:	00c00804 	movi	r3,32
    cd48:	1889c83a 	sub	r4,r3,r2
    cd4c:	a1000015 	stw	r4,0(r20)
    cd50:	01000284 	movi	r4,10
    cd54:	84ffff04 	addi	r19,r16,-4
    cd58:	20801216 	blt	r4,r2,cda4 <__b2d+0xa0>
    cd5c:	018002c4 	movi	r6,11
    cd60:	308dc83a 	sub	r6,r6,r2
    cd64:	9186d83a 	srl	r3,r18,r6
    cd68:	18cffc34 	orhi	r3,r3,16368
    cd6c:	8cc0212e 	bgeu	r17,r19,cdf4 <__b2d+0xf0>
    cd70:	813ffe17 	ldw	r4,-8(r16)
    cd74:	218cd83a 	srl	r6,r4,r6
    cd78:	10800544 	addi	r2,r2,21
    cd7c:	9084983a 	sll	r2,r18,r2
    cd80:	1184b03a 	or	r2,r2,r6
    cd84:	dfc00517 	ldw	ra,20(sp)
    cd88:	dd000417 	ldw	r20,16(sp)
    cd8c:	dcc00317 	ldw	r19,12(sp)
    cd90:	dc800217 	ldw	r18,8(sp)
    cd94:	dc400117 	ldw	r17,4(sp)
    cd98:	dc000017 	ldw	r16,0(sp)
    cd9c:	dec00604 	addi	sp,sp,24
    cda0:	f800283a 	ret
    cda4:	8cc00f2e 	bgeu	r17,r19,cde4 <__b2d+0xe0>
    cda8:	117ffd44 	addi	r5,r2,-11
    cdac:	80bffe17 	ldw	r2,-8(r16)
    cdb0:	28000e26 	beq	r5,zero,cdec <__b2d+0xe8>
    cdb4:	1949c83a 	sub	r4,r3,r5
    cdb8:	9164983a 	sll	r18,r18,r5
    cdbc:	1106d83a 	srl	r3,r2,r4
    cdc0:	81bffe04 	addi	r6,r16,-8
    cdc4:	948ffc34 	orhi	r18,r18,16368
    cdc8:	90c6b03a 	or	r3,r18,r3
    cdcc:	89800e2e 	bgeu	r17,r6,ce08 <__b2d+0x104>
    cdd0:	81bffd17 	ldw	r6,-12(r16)
    cdd4:	1144983a 	sll	r2,r2,r5
    cdd8:	310ad83a 	srl	r5,r6,r4
    cddc:	2884b03a 	or	r2,r5,r2
    cde0:	003fe806 	br	cd84 <__alt_mem_onchip_memory+0xf780cd84>
    cde4:	10bffd44 	addi	r2,r2,-11
    cde8:	1000041e 	bne	r2,zero,cdfc <__b2d+0xf8>
    cdec:	90cffc34 	orhi	r3,r18,16368
    cdf0:	003fe406 	br	cd84 <__alt_mem_onchip_memory+0xf780cd84>
    cdf4:	000d883a 	mov	r6,zero
    cdf8:	003fdf06 	br	cd78 <__alt_mem_onchip_memory+0xf780cd78>
    cdfc:	90a4983a 	sll	r18,r18,r2
    ce00:	0005883a 	mov	r2,zero
    ce04:	003ff906 	br	cdec <__alt_mem_onchip_memory+0xf780cdec>
    ce08:	1144983a 	sll	r2,r2,r5
    ce0c:	003fdd06 	br	cd84 <__alt_mem_onchip_memory+0xf780cd84>

0000ce10 <__d2b>:
    ce10:	defff804 	addi	sp,sp,-32
    ce14:	dc000215 	stw	r16,8(sp)
    ce18:	3021883a 	mov	r16,r6
    ce1c:	dc400315 	stw	r17,12(sp)
    ce20:	8022907a 	slli	r17,r16,1
    ce24:	dd000615 	stw	r20,24(sp)
    ce28:	2829883a 	mov	r20,r5
    ce2c:	01400044 	movi	r5,1
    ce30:	dcc00515 	stw	r19,20(sp)
    ce34:	dc800415 	stw	r18,16(sp)
    ce38:	dfc00715 	stw	ra,28(sp)
    ce3c:	3825883a 	mov	r18,r7
    ce40:	8822d57a 	srli	r17,r17,21
    ce44:	000c17c0 	call	c17c <_Balloc>
    ce48:	1027883a 	mov	r19,r2
    ce4c:	00800434 	movhi	r2,16
    ce50:	10bfffc4 	addi	r2,r2,-1
    ce54:	808c703a 	and	r6,r16,r2
    ce58:	88000126 	beq	r17,zero,ce60 <__d2b+0x50>
    ce5c:	31800434 	orhi	r6,r6,16
    ce60:	d9800015 	stw	r6,0(sp)
    ce64:	a0002426 	beq	r20,zero,cef8 <__d2b+0xe8>
    ce68:	d9000104 	addi	r4,sp,4
    ce6c:	dd000115 	stw	r20,4(sp)
    ce70:	000c4d80 	call	c4d8 <__lo0bits>
    ce74:	d8c00017 	ldw	r3,0(sp)
    ce78:	10002f1e 	bne	r2,zero,cf38 <__d2b+0x128>
    ce7c:	d9000117 	ldw	r4,4(sp)
    ce80:	99000515 	stw	r4,20(r19)
    ce84:	1821003a 	cmpeq	r16,r3,zero
    ce88:	01000084 	movi	r4,2
    ce8c:	2421c83a 	sub	r16,r4,r16
    ce90:	98c00615 	stw	r3,24(r19)
    ce94:	9c000415 	stw	r16,16(r19)
    ce98:	88001f1e 	bne	r17,zero,cf18 <__d2b+0x108>
    ce9c:	10bef384 	addi	r2,r2,-1074
    cea0:	90800015 	stw	r2,0(r18)
    cea4:	00900034 	movhi	r2,16384
    cea8:	10bfffc4 	addi	r2,r2,-1
    ceac:	8085883a 	add	r2,r16,r2
    ceb0:	1085883a 	add	r2,r2,r2
    ceb4:	1085883a 	add	r2,r2,r2
    ceb8:	9885883a 	add	r2,r19,r2
    cebc:	11000517 	ldw	r4,20(r2)
    cec0:	8020917a 	slli	r16,r16,5
    cec4:	000c4700 	call	c470 <__hi0bits>
    cec8:	d8c00817 	ldw	r3,32(sp)
    cecc:	8085c83a 	sub	r2,r16,r2
    ced0:	18800015 	stw	r2,0(r3)
    ced4:	9805883a 	mov	r2,r19
    ced8:	dfc00717 	ldw	ra,28(sp)
    cedc:	dd000617 	ldw	r20,24(sp)
    cee0:	dcc00517 	ldw	r19,20(sp)
    cee4:	dc800417 	ldw	r18,16(sp)
    cee8:	dc400317 	ldw	r17,12(sp)
    ceec:	dc000217 	ldw	r16,8(sp)
    cef0:	dec00804 	addi	sp,sp,32
    cef4:	f800283a 	ret
    cef8:	d809883a 	mov	r4,sp
    cefc:	000c4d80 	call	c4d8 <__lo0bits>
    cf00:	d8c00017 	ldw	r3,0(sp)
    cf04:	04000044 	movi	r16,1
    cf08:	9c000415 	stw	r16,16(r19)
    cf0c:	98c00515 	stw	r3,20(r19)
    cf10:	10800804 	addi	r2,r2,32
    cf14:	883fe126 	beq	r17,zero,ce9c <__alt_mem_onchip_memory+0xf780ce9c>
    cf18:	00c00d44 	movi	r3,53
    cf1c:	8c7ef344 	addi	r17,r17,-1075
    cf20:	88a3883a 	add	r17,r17,r2
    cf24:	1885c83a 	sub	r2,r3,r2
    cf28:	d8c00817 	ldw	r3,32(sp)
    cf2c:	94400015 	stw	r17,0(r18)
    cf30:	18800015 	stw	r2,0(r3)
    cf34:	003fe706 	br	ced4 <__alt_mem_onchip_memory+0xf780ced4>
    cf38:	01000804 	movi	r4,32
    cf3c:	2089c83a 	sub	r4,r4,r2
    cf40:	1908983a 	sll	r4,r3,r4
    cf44:	d9400117 	ldw	r5,4(sp)
    cf48:	1886d83a 	srl	r3,r3,r2
    cf4c:	2148b03a 	or	r4,r4,r5
    cf50:	99000515 	stw	r4,20(r19)
    cf54:	d8c00015 	stw	r3,0(sp)
    cf58:	003fca06 	br	ce84 <__alt_mem_onchip_memory+0xf780ce84>

0000cf5c <__ratio>:
    cf5c:	defff904 	addi	sp,sp,-28
    cf60:	dc400315 	stw	r17,12(sp)
    cf64:	2823883a 	mov	r17,r5
    cf68:	d9400104 	addi	r5,sp,4
    cf6c:	dfc00615 	stw	ra,24(sp)
    cf70:	dcc00515 	stw	r19,20(sp)
    cf74:	dc800415 	stw	r18,16(sp)
    cf78:	2027883a 	mov	r19,r4
    cf7c:	dc000215 	stw	r16,8(sp)
    cf80:	000cd040 	call	cd04 <__b2d>
    cf84:	d80b883a 	mov	r5,sp
    cf88:	8809883a 	mov	r4,r17
    cf8c:	1025883a 	mov	r18,r2
    cf90:	1821883a 	mov	r16,r3
    cf94:	000cd040 	call	cd04 <__b2d>
    cf98:	8a000417 	ldw	r8,16(r17)
    cf9c:	99000417 	ldw	r4,16(r19)
    cfa0:	d9400117 	ldw	r5,4(sp)
    cfa4:	2209c83a 	sub	r4,r4,r8
    cfa8:	2010917a 	slli	r8,r4,5
    cfac:	d9000017 	ldw	r4,0(sp)
    cfb0:	2909c83a 	sub	r4,r5,r4
    cfb4:	4109883a 	add	r4,r8,r4
    cfb8:	01000e0e 	bge	zero,r4,cff4 <__ratio+0x98>
    cfbc:	2008953a 	slli	r4,r4,20
    cfc0:	2421883a 	add	r16,r4,r16
    cfc4:	100d883a 	mov	r6,r2
    cfc8:	180f883a 	mov	r7,r3
    cfcc:	9009883a 	mov	r4,r18
    cfd0:	800b883a 	mov	r5,r16
    cfd4:	00040340 	call	4034 <__divdf3>
    cfd8:	dfc00617 	ldw	ra,24(sp)
    cfdc:	dcc00517 	ldw	r19,20(sp)
    cfe0:	dc800417 	ldw	r18,16(sp)
    cfe4:	dc400317 	ldw	r17,12(sp)
    cfe8:	dc000217 	ldw	r16,8(sp)
    cfec:	dec00704 	addi	sp,sp,28
    cff0:	f800283a 	ret
    cff4:	2008953a 	slli	r4,r4,20
    cff8:	1907c83a 	sub	r3,r3,r4
    cffc:	003ff106 	br	cfc4 <__alt_mem_onchip_memory+0xf780cfc4>

0000d000 <_mprec_log10>:
    d000:	defffe04 	addi	sp,sp,-8
    d004:	dc000015 	stw	r16,0(sp)
    d008:	dfc00115 	stw	ra,4(sp)
    d00c:	008005c4 	movi	r2,23
    d010:	2021883a 	mov	r16,r4
    d014:	11000d0e 	bge	r2,r4,d04c <_mprec_log10+0x4c>
    d018:	0005883a 	mov	r2,zero
    d01c:	00cffc34 	movhi	r3,16368
    d020:	843fffc4 	addi	r16,r16,-1
    d024:	000d883a 	mov	r6,zero
    d028:	01d00934 	movhi	r7,16420
    d02c:	1009883a 	mov	r4,r2
    d030:	180b883a 	mov	r5,r3
    d034:	0004aec0 	call	4aec <__muldf3>
    d038:	803ff91e 	bne	r16,zero,d020 <__alt_mem_onchip_memory+0xf780d020>
    d03c:	dfc00117 	ldw	ra,4(sp)
    d040:	dc000017 	ldw	r16,0(sp)
    d044:	dec00204 	addi	sp,sp,8
    d048:	f800283a 	ret
    d04c:	202090fa 	slli	r16,r4,3
    d050:	00800074 	movhi	r2,1
    d054:	108dd004 	addi	r2,r2,14144
    d058:	1421883a 	add	r16,r2,r16
    d05c:	80800017 	ldw	r2,0(r16)
    d060:	80c00117 	ldw	r3,4(r16)
    d064:	dfc00117 	ldw	ra,4(sp)
    d068:	dc000017 	ldw	r16,0(sp)
    d06c:	dec00204 	addi	sp,sp,8
    d070:	f800283a 	ret

0000d074 <__copybits>:
    d074:	297fffc4 	addi	r5,r5,-1
    d078:	280fd17a 	srai	r7,r5,5
    d07c:	30c00417 	ldw	r3,16(r6)
    d080:	30800504 	addi	r2,r6,20
    d084:	39c00044 	addi	r7,r7,1
    d088:	18c7883a 	add	r3,r3,r3
    d08c:	39cf883a 	add	r7,r7,r7
    d090:	18c7883a 	add	r3,r3,r3
    d094:	39cf883a 	add	r7,r7,r7
    d098:	10c7883a 	add	r3,r2,r3
    d09c:	21cf883a 	add	r7,r4,r7
    d0a0:	10c00d2e 	bgeu	r2,r3,d0d8 <__copybits+0x64>
    d0a4:	200b883a 	mov	r5,r4
    d0a8:	12000017 	ldw	r8,0(r2)
    d0ac:	29400104 	addi	r5,r5,4
    d0b0:	10800104 	addi	r2,r2,4
    d0b4:	2a3fff15 	stw	r8,-4(r5)
    d0b8:	10fffb36 	bltu	r2,r3,d0a8 <__alt_mem_onchip_memory+0xf780d0a8>
    d0bc:	1985c83a 	sub	r2,r3,r6
    d0c0:	10bffac4 	addi	r2,r2,-21
    d0c4:	1004d0ba 	srli	r2,r2,2
    d0c8:	10800044 	addi	r2,r2,1
    d0cc:	1085883a 	add	r2,r2,r2
    d0d0:	1085883a 	add	r2,r2,r2
    d0d4:	2089883a 	add	r4,r4,r2
    d0d8:	21c0032e 	bgeu	r4,r7,d0e8 <__copybits+0x74>
    d0dc:	20000015 	stw	zero,0(r4)
    d0e0:	21000104 	addi	r4,r4,4
    d0e4:	21fffd36 	bltu	r4,r7,d0dc <__alt_mem_onchip_memory+0xf780d0dc>
    d0e8:	f800283a 	ret

0000d0ec <__any_on>:
    d0ec:	20c00417 	ldw	r3,16(r4)
    d0f0:	2805d17a 	srai	r2,r5,5
    d0f4:	21000504 	addi	r4,r4,20
    d0f8:	18800d0e 	bge	r3,r2,d130 <__any_on+0x44>
    d0fc:	18c7883a 	add	r3,r3,r3
    d100:	18c7883a 	add	r3,r3,r3
    d104:	20c7883a 	add	r3,r4,r3
    d108:	20c0192e 	bgeu	r4,r3,d170 <__any_on+0x84>
    d10c:	18bfff17 	ldw	r2,-4(r3)
    d110:	18ffff04 	addi	r3,r3,-4
    d114:	1000041e 	bne	r2,zero,d128 <__any_on+0x3c>
    d118:	20c0142e 	bgeu	r4,r3,d16c <__any_on+0x80>
    d11c:	18ffff04 	addi	r3,r3,-4
    d120:	19400017 	ldw	r5,0(r3)
    d124:	283ffc26 	beq	r5,zero,d118 <__alt_mem_onchip_memory+0xf780d118>
    d128:	00800044 	movi	r2,1
    d12c:	f800283a 	ret
    d130:	10c00a0e 	bge	r2,r3,d15c <__any_on+0x70>
    d134:	1085883a 	add	r2,r2,r2
    d138:	1085883a 	add	r2,r2,r2
    d13c:	294007cc 	andi	r5,r5,31
    d140:	2087883a 	add	r3,r4,r2
    d144:	283ff026 	beq	r5,zero,d108 <__alt_mem_onchip_memory+0xf780d108>
    d148:	19800017 	ldw	r6,0(r3)
    d14c:	3144d83a 	srl	r2,r6,r5
    d150:	114a983a 	sll	r5,r2,r5
    d154:	317ff41e 	bne	r6,r5,d128 <__alt_mem_onchip_memory+0xf780d128>
    d158:	003feb06 	br	d108 <__alt_mem_onchip_memory+0xf780d108>
    d15c:	1085883a 	add	r2,r2,r2
    d160:	1085883a 	add	r2,r2,r2
    d164:	2087883a 	add	r3,r4,r2
    d168:	003fe706 	br	d108 <__alt_mem_onchip_memory+0xf780d108>
    d16c:	f800283a 	ret
    d170:	0005883a 	mov	r2,zero
    d174:	f800283a 	ret

0000d178 <_putc_r>:
    d178:	defffc04 	addi	sp,sp,-16
    d17c:	dc000215 	stw	r16,8(sp)
    d180:	dfc00315 	stw	ra,12(sp)
    d184:	2021883a 	mov	r16,r4
    d188:	20000226 	beq	r4,zero,d194 <_putc_r+0x1c>
    d18c:	20800e17 	ldw	r2,56(r4)
    d190:	10001b26 	beq	r2,zero,d200 <_putc_r+0x88>
    d194:	30800217 	ldw	r2,8(r6)
    d198:	10bfffc4 	addi	r2,r2,-1
    d19c:	30800215 	stw	r2,8(r6)
    d1a0:	10000a16 	blt	r2,zero,d1cc <_putc_r+0x54>
    d1a4:	30800017 	ldw	r2,0(r6)
    d1a8:	11400005 	stb	r5,0(r2)
    d1ac:	30800017 	ldw	r2,0(r6)
    d1b0:	10c00044 	addi	r3,r2,1
    d1b4:	30c00015 	stw	r3,0(r6)
    d1b8:	10800003 	ldbu	r2,0(r2)
    d1bc:	dfc00317 	ldw	ra,12(sp)
    d1c0:	dc000217 	ldw	r16,8(sp)
    d1c4:	dec00404 	addi	sp,sp,16
    d1c8:	f800283a 	ret
    d1cc:	30c00617 	ldw	r3,24(r6)
    d1d0:	10c00616 	blt	r2,r3,d1ec <_putc_r+0x74>
    d1d4:	30800017 	ldw	r2,0(r6)
    d1d8:	00c00284 	movi	r3,10
    d1dc:	11400005 	stb	r5,0(r2)
    d1e0:	30800017 	ldw	r2,0(r6)
    d1e4:	11400003 	ldbu	r5,0(r2)
    d1e8:	28fff11e 	bne	r5,r3,d1b0 <__alt_mem_onchip_memory+0xf780d1b0>
    d1ec:	8009883a 	mov	r4,r16
    d1f0:	dfc00317 	ldw	ra,12(sp)
    d1f4:	dc000217 	ldw	r16,8(sp)
    d1f8:	dec00404 	addi	sp,sp,16
    d1fc:	000f0f81 	jmpi	f0f8 <__swbuf_r>
    d200:	d9400015 	stw	r5,0(sp)
    d204:	d9800115 	stw	r6,4(sp)
    d208:	000a7040 	call	a704 <__sinit>
    d20c:	d9800117 	ldw	r6,4(sp)
    d210:	d9400017 	ldw	r5,0(sp)
    d214:	003fdf06 	br	d194 <__alt_mem_onchip_memory+0xf780d194>

0000d218 <putc>:
    d218:	00800074 	movhi	r2,1
    d21c:	defffc04 	addi	sp,sp,-16
    d220:	10950604 	addi	r2,r2,21528
    d224:	dc000115 	stw	r16,4(sp)
    d228:	14000017 	ldw	r16,0(r2)
    d22c:	dc400215 	stw	r17,8(sp)
    d230:	dfc00315 	stw	ra,12(sp)
    d234:	2023883a 	mov	r17,r4
    d238:	80000226 	beq	r16,zero,d244 <putc+0x2c>
    d23c:	80800e17 	ldw	r2,56(r16)
    d240:	10001a26 	beq	r2,zero,d2ac <putc+0x94>
    d244:	28800217 	ldw	r2,8(r5)
    d248:	10bfffc4 	addi	r2,r2,-1
    d24c:	28800215 	stw	r2,8(r5)
    d250:	10000b16 	blt	r2,zero,d280 <putc+0x68>
    d254:	28800017 	ldw	r2,0(r5)
    d258:	14400005 	stb	r17,0(r2)
    d25c:	28800017 	ldw	r2,0(r5)
    d260:	10c00044 	addi	r3,r2,1
    d264:	28c00015 	stw	r3,0(r5)
    d268:	10800003 	ldbu	r2,0(r2)
    d26c:	dfc00317 	ldw	ra,12(sp)
    d270:	dc400217 	ldw	r17,8(sp)
    d274:	dc000117 	ldw	r16,4(sp)
    d278:	dec00404 	addi	sp,sp,16
    d27c:	f800283a 	ret
    d280:	28c00617 	ldw	r3,24(r5)
    d284:	10c00e16 	blt	r2,r3,d2c0 <putc+0xa8>
    d288:	28800017 	ldw	r2,0(r5)
    d28c:	01000284 	movi	r4,10
    d290:	14400005 	stb	r17,0(r2)
    d294:	28800017 	ldw	r2,0(r5)
    d298:	10c00003 	ldbu	r3,0(r2)
    d29c:	193ff01e 	bne	r3,r4,d260 <__alt_mem_onchip_memory+0xf780d260>
    d2a0:	280d883a 	mov	r6,r5
    d2a4:	180b883a 	mov	r5,r3
    d2a8:	00000706 	br	d2c8 <putc+0xb0>
    d2ac:	8009883a 	mov	r4,r16
    d2b0:	d9400015 	stw	r5,0(sp)
    d2b4:	000a7040 	call	a704 <__sinit>
    d2b8:	d9400017 	ldw	r5,0(sp)
    d2bc:	003fe106 	br	d244 <__alt_mem_onchip_memory+0xf780d244>
    d2c0:	280d883a 	mov	r6,r5
    d2c4:	880b883a 	mov	r5,r17
    d2c8:	8009883a 	mov	r4,r16
    d2cc:	dfc00317 	ldw	ra,12(sp)
    d2d0:	dc400217 	ldw	r17,8(sp)
    d2d4:	dc000117 	ldw	r16,4(sp)
    d2d8:	dec00404 	addi	sp,sp,16
    d2dc:	000f0f81 	jmpi	f0f8 <__swbuf_r>

0000d2e0 <_realloc_r>:
    d2e0:	defff604 	addi	sp,sp,-40
    d2e4:	dc800215 	stw	r18,8(sp)
    d2e8:	dfc00915 	stw	ra,36(sp)
    d2ec:	df000815 	stw	fp,32(sp)
    d2f0:	ddc00715 	stw	r23,28(sp)
    d2f4:	dd800615 	stw	r22,24(sp)
    d2f8:	dd400515 	stw	r21,20(sp)
    d2fc:	dd000415 	stw	r20,16(sp)
    d300:	dcc00315 	stw	r19,12(sp)
    d304:	dc400115 	stw	r17,4(sp)
    d308:	dc000015 	stw	r16,0(sp)
    d30c:	3025883a 	mov	r18,r6
    d310:	2800b726 	beq	r5,zero,d5f0 <_realloc_r+0x310>
    d314:	282b883a 	mov	r21,r5
    d318:	2029883a 	mov	r20,r4
    d31c:	0010ddc0 	call	10ddc <__malloc_lock>
    d320:	a8bfff17 	ldw	r2,-4(r21)
    d324:	043fff04 	movi	r16,-4
    d328:	90c002c4 	addi	r3,r18,11
    d32c:	01000584 	movi	r4,22
    d330:	acfffe04 	addi	r19,r21,-8
    d334:	1420703a 	and	r16,r2,r16
    d338:	20c0332e 	bgeu	r4,r3,d408 <_realloc_r+0x128>
    d33c:	047ffe04 	movi	r17,-8
    d340:	1c62703a 	and	r17,r3,r17
    d344:	8807883a 	mov	r3,r17
    d348:	88005816 	blt	r17,zero,d4ac <_realloc_r+0x1cc>
    d34c:	8c805736 	bltu	r17,r18,d4ac <_realloc_r+0x1cc>
    d350:	80c0300e 	bge	r16,r3,d414 <_realloc_r+0x134>
    d354:	07000074 	movhi	fp,1
    d358:	e70f7c04 	addi	fp,fp,15856
    d35c:	e1c00217 	ldw	r7,8(fp)
    d360:	9c09883a 	add	r4,r19,r16
    d364:	22000117 	ldw	r8,4(r4)
    d368:	21c06326 	beq	r4,r7,d4f8 <_realloc_r+0x218>
    d36c:	017fff84 	movi	r5,-2
    d370:	414a703a 	and	r5,r8,r5
    d374:	214b883a 	add	r5,r4,r5
    d378:	29800117 	ldw	r6,4(r5)
    d37c:	3180004c 	andi	r6,r6,1
    d380:	30003f26 	beq	r6,zero,d480 <_realloc_r+0x1a0>
    d384:	1080004c 	andi	r2,r2,1
    d388:	10008326 	beq	r2,zero,d598 <_realloc_r+0x2b8>
    d38c:	900b883a 	mov	r5,r18
    d390:	a009883a 	mov	r4,r20
    d394:	000b4c00 	call	b4c0 <_malloc_r>
    d398:	1025883a 	mov	r18,r2
    d39c:	10011e26 	beq	r2,zero,d818 <_realloc_r+0x538>
    d3a0:	a93fff17 	ldw	r4,-4(r21)
    d3a4:	10fffe04 	addi	r3,r2,-8
    d3a8:	00bfff84 	movi	r2,-2
    d3ac:	2084703a 	and	r2,r4,r2
    d3b0:	9885883a 	add	r2,r19,r2
    d3b4:	1880ee26 	beq	r3,r2,d770 <_realloc_r+0x490>
    d3b8:	81bfff04 	addi	r6,r16,-4
    d3bc:	00800904 	movi	r2,36
    d3c0:	1180b836 	bltu	r2,r6,d6a4 <_realloc_r+0x3c4>
    d3c4:	00c004c4 	movi	r3,19
    d3c8:	19809636 	bltu	r3,r6,d624 <_realloc_r+0x344>
    d3cc:	9005883a 	mov	r2,r18
    d3d0:	a807883a 	mov	r3,r21
    d3d4:	19000017 	ldw	r4,0(r3)
    d3d8:	11000015 	stw	r4,0(r2)
    d3dc:	19000117 	ldw	r4,4(r3)
    d3e0:	11000115 	stw	r4,4(r2)
    d3e4:	18c00217 	ldw	r3,8(r3)
    d3e8:	10c00215 	stw	r3,8(r2)
    d3ec:	a80b883a 	mov	r5,r21
    d3f0:	a009883a 	mov	r4,r20
    d3f4:	000a8780 	call	a878 <_free_r>
    d3f8:	a009883a 	mov	r4,r20
    d3fc:	0010e000 	call	10e00 <__malloc_unlock>
    d400:	9005883a 	mov	r2,r18
    d404:	00001206 	br	d450 <_realloc_r+0x170>
    d408:	00c00404 	movi	r3,16
    d40c:	1823883a 	mov	r17,r3
    d410:	003fce06 	br	d34c <__alt_mem_onchip_memory+0xf780d34c>
    d414:	a825883a 	mov	r18,r21
    d418:	8445c83a 	sub	r2,r16,r17
    d41c:	00c003c4 	movi	r3,15
    d420:	18802636 	bltu	r3,r2,d4bc <_realloc_r+0x1dc>
    d424:	99800117 	ldw	r6,4(r19)
    d428:	9c07883a 	add	r3,r19,r16
    d42c:	3180004c 	andi	r6,r6,1
    d430:	3420b03a 	or	r16,r6,r16
    d434:	9c000115 	stw	r16,4(r19)
    d438:	18800117 	ldw	r2,4(r3)
    d43c:	10800054 	ori	r2,r2,1
    d440:	18800115 	stw	r2,4(r3)
    d444:	a009883a 	mov	r4,r20
    d448:	0010e000 	call	10e00 <__malloc_unlock>
    d44c:	9005883a 	mov	r2,r18
    d450:	dfc00917 	ldw	ra,36(sp)
    d454:	df000817 	ldw	fp,32(sp)
    d458:	ddc00717 	ldw	r23,28(sp)
    d45c:	dd800617 	ldw	r22,24(sp)
    d460:	dd400517 	ldw	r21,20(sp)
    d464:	dd000417 	ldw	r20,16(sp)
    d468:	dcc00317 	ldw	r19,12(sp)
    d46c:	dc800217 	ldw	r18,8(sp)
    d470:	dc400117 	ldw	r17,4(sp)
    d474:	dc000017 	ldw	r16,0(sp)
    d478:	dec00a04 	addi	sp,sp,40
    d47c:	f800283a 	ret
    d480:	017fff04 	movi	r5,-4
    d484:	414a703a 	and	r5,r8,r5
    d488:	814d883a 	add	r6,r16,r5
    d48c:	30c01f16 	blt	r6,r3,d50c <_realloc_r+0x22c>
    d490:	20800317 	ldw	r2,12(r4)
    d494:	20c00217 	ldw	r3,8(r4)
    d498:	a825883a 	mov	r18,r21
    d49c:	3021883a 	mov	r16,r6
    d4a0:	18800315 	stw	r2,12(r3)
    d4a4:	10c00215 	stw	r3,8(r2)
    d4a8:	003fdb06 	br	d418 <__alt_mem_onchip_memory+0xf780d418>
    d4ac:	00800304 	movi	r2,12
    d4b0:	a0800015 	stw	r2,0(r20)
    d4b4:	0005883a 	mov	r2,zero
    d4b8:	003fe506 	br	d450 <__alt_mem_onchip_memory+0xf780d450>
    d4bc:	98c00117 	ldw	r3,4(r19)
    d4c0:	9c4b883a 	add	r5,r19,r17
    d4c4:	11000054 	ori	r4,r2,1
    d4c8:	18c0004c 	andi	r3,r3,1
    d4cc:	1c62b03a 	or	r17,r3,r17
    d4d0:	9c400115 	stw	r17,4(r19)
    d4d4:	29000115 	stw	r4,4(r5)
    d4d8:	2885883a 	add	r2,r5,r2
    d4dc:	10c00117 	ldw	r3,4(r2)
    d4e0:	29400204 	addi	r5,r5,8
    d4e4:	a009883a 	mov	r4,r20
    d4e8:	18c00054 	ori	r3,r3,1
    d4ec:	10c00115 	stw	r3,4(r2)
    d4f0:	000a8780 	call	a878 <_free_r>
    d4f4:	003fd306 	br	d444 <__alt_mem_onchip_memory+0xf780d444>
    d4f8:	017fff04 	movi	r5,-4
    d4fc:	414a703a 	and	r5,r8,r5
    d500:	89800404 	addi	r6,r17,16
    d504:	8151883a 	add	r8,r16,r5
    d508:	4180590e 	bge	r8,r6,d670 <_realloc_r+0x390>
    d50c:	1080004c 	andi	r2,r2,1
    d510:	103f9e1e 	bne	r2,zero,d38c <__alt_mem_onchip_memory+0xf780d38c>
    d514:	adbffe17 	ldw	r22,-8(r21)
    d518:	00bfff04 	movi	r2,-4
    d51c:	9dadc83a 	sub	r22,r19,r22
    d520:	b1800117 	ldw	r6,4(r22)
    d524:	3084703a 	and	r2,r6,r2
    d528:	20002026 	beq	r4,zero,d5ac <_realloc_r+0x2cc>
    d52c:	80af883a 	add	r23,r16,r2
    d530:	b96f883a 	add	r23,r23,r5
    d534:	21c05f26 	beq	r4,r7,d6b4 <_realloc_r+0x3d4>
    d538:	b8c01c16 	blt	r23,r3,d5ac <_realloc_r+0x2cc>
    d53c:	20800317 	ldw	r2,12(r4)
    d540:	20c00217 	ldw	r3,8(r4)
    d544:	81bfff04 	addi	r6,r16,-4
    d548:	01000904 	movi	r4,36
    d54c:	18800315 	stw	r2,12(r3)
    d550:	10c00215 	stw	r3,8(r2)
    d554:	b0c00217 	ldw	r3,8(r22)
    d558:	b0800317 	ldw	r2,12(r22)
    d55c:	b4800204 	addi	r18,r22,8
    d560:	18800315 	stw	r2,12(r3)
    d564:	10c00215 	stw	r3,8(r2)
    d568:	21801b36 	bltu	r4,r6,d5d8 <_realloc_r+0x2f8>
    d56c:	008004c4 	movi	r2,19
    d570:	1180352e 	bgeu	r2,r6,d648 <_realloc_r+0x368>
    d574:	a8800017 	ldw	r2,0(r21)
    d578:	b0800215 	stw	r2,8(r22)
    d57c:	a8800117 	ldw	r2,4(r21)
    d580:	b0800315 	stw	r2,12(r22)
    d584:	008006c4 	movi	r2,27
    d588:	11807f36 	bltu	r2,r6,d788 <_realloc_r+0x4a8>
    d58c:	b0800404 	addi	r2,r22,16
    d590:	ad400204 	addi	r21,r21,8
    d594:	00002d06 	br	d64c <_realloc_r+0x36c>
    d598:	adbffe17 	ldw	r22,-8(r21)
    d59c:	00bfff04 	movi	r2,-4
    d5a0:	9dadc83a 	sub	r22,r19,r22
    d5a4:	b1000117 	ldw	r4,4(r22)
    d5a8:	2084703a 	and	r2,r4,r2
    d5ac:	b03f7726 	beq	r22,zero,d38c <__alt_mem_onchip_memory+0xf780d38c>
    d5b0:	80af883a 	add	r23,r16,r2
    d5b4:	b8ff7516 	blt	r23,r3,d38c <__alt_mem_onchip_memory+0xf780d38c>
    d5b8:	b0800317 	ldw	r2,12(r22)
    d5bc:	b0c00217 	ldw	r3,8(r22)
    d5c0:	81bfff04 	addi	r6,r16,-4
    d5c4:	01000904 	movi	r4,36
    d5c8:	18800315 	stw	r2,12(r3)
    d5cc:	10c00215 	stw	r3,8(r2)
    d5d0:	b4800204 	addi	r18,r22,8
    d5d4:	21bfe52e 	bgeu	r4,r6,d56c <__alt_mem_onchip_memory+0xf780d56c>
    d5d8:	a80b883a 	mov	r5,r21
    d5dc:	9009883a 	mov	r4,r18
    d5e0:	000bef80 	call	bef8 <memmove>
    d5e4:	b821883a 	mov	r16,r23
    d5e8:	b027883a 	mov	r19,r22
    d5ec:	003f8a06 	br	d418 <__alt_mem_onchip_memory+0xf780d418>
    d5f0:	300b883a 	mov	r5,r6
    d5f4:	dfc00917 	ldw	ra,36(sp)
    d5f8:	df000817 	ldw	fp,32(sp)
    d5fc:	ddc00717 	ldw	r23,28(sp)
    d600:	dd800617 	ldw	r22,24(sp)
    d604:	dd400517 	ldw	r21,20(sp)
    d608:	dd000417 	ldw	r20,16(sp)
    d60c:	dcc00317 	ldw	r19,12(sp)
    d610:	dc800217 	ldw	r18,8(sp)
    d614:	dc400117 	ldw	r17,4(sp)
    d618:	dc000017 	ldw	r16,0(sp)
    d61c:	dec00a04 	addi	sp,sp,40
    d620:	000b4c01 	jmpi	b4c0 <_malloc_r>
    d624:	a8c00017 	ldw	r3,0(r21)
    d628:	90c00015 	stw	r3,0(r18)
    d62c:	a8c00117 	ldw	r3,4(r21)
    d630:	90c00115 	stw	r3,4(r18)
    d634:	00c006c4 	movi	r3,27
    d638:	19804536 	bltu	r3,r6,d750 <_realloc_r+0x470>
    d63c:	90800204 	addi	r2,r18,8
    d640:	a8c00204 	addi	r3,r21,8
    d644:	003f6306 	br	d3d4 <__alt_mem_onchip_memory+0xf780d3d4>
    d648:	9005883a 	mov	r2,r18
    d64c:	a8c00017 	ldw	r3,0(r21)
    d650:	b821883a 	mov	r16,r23
    d654:	b027883a 	mov	r19,r22
    d658:	10c00015 	stw	r3,0(r2)
    d65c:	a8c00117 	ldw	r3,4(r21)
    d660:	10c00115 	stw	r3,4(r2)
    d664:	a8c00217 	ldw	r3,8(r21)
    d668:	10c00215 	stw	r3,8(r2)
    d66c:	003f6a06 	br	d418 <__alt_mem_onchip_memory+0xf780d418>
    d670:	9c67883a 	add	r19,r19,r17
    d674:	4445c83a 	sub	r2,r8,r17
    d678:	e4c00215 	stw	r19,8(fp)
    d67c:	10800054 	ori	r2,r2,1
    d680:	98800115 	stw	r2,4(r19)
    d684:	a8bfff17 	ldw	r2,-4(r21)
    d688:	a009883a 	mov	r4,r20
    d68c:	1080004c 	andi	r2,r2,1
    d690:	1462b03a 	or	r17,r2,r17
    d694:	ac7fff15 	stw	r17,-4(r21)
    d698:	0010e000 	call	10e00 <__malloc_unlock>
    d69c:	a805883a 	mov	r2,r21
    d6a0:	003f6b06 	br	d450 <__alt_mem_onchip_memory+0xf780d450>
    d6a4:	a80b883a 	mov	r5,r21
    d6a8:	9009883a 	mov	r4,r18
    d6ac:	000bef80 	call	bef8 <memmove>
    d6b0:	003f4e06 	br	d3ec <__alt_mem_onchip_memory+0xf780d3ec>
    d6b4:	89000404 	addi	r4,r17,16
    d6b8:	b93fbc16 	blt	r23,r4,d5ac <__alt_mem_onchip_memory+0xf780d5ac>
    d6bc:	b0800317 	ldw	r2,12(r22)
    d6c0:	b0c00217 	ldw	r3,8(r22)
    d6c4:	81bfff04 	addi	r6,r16,-4
    d6c8:	01000904 	movi	r4,36
    d6cc:	18800315 	stw	r2,12(r3)
    d6d0:	10c00215 	stw	r3,8(r2)
    d6d4:	b4800204 	addi	r18,r22,8
    d6d8:	21804336 	bltu	r4,r6,d7e8 <_realloc_r+0x508>
    d6dc:	008004c4 	movi	r2,19
    d6e0:	11803f2e 	bgeu	r2,r6,d7e0 <_realloc_r+0x500>
    d6e4:	a8800017 	ldw	r2,0(r21)
    d6e8:	b0800215 	stw	r2,8(r22)
    d6ec:	a8800117 	ldw	r2,4(r21)
    d6f0:	b0800315 	stw	r2,12(r22)
    d6f4:	008006c4 	movi	r2,27
    d6f8:	11803f36 	bltu	r2,r6,d7f8 <_realloc_r+0x518>
    d6fc:	b0800404 	addi	r2,r22,16
    d700:	ad400204 	addi	r21,r21,8
    d704:	a8c00017 	ldw	r3,0(r21)
    d708:	10c00015 	stw	r3,0(r2)
    d70c:	a8c00117 	ldw	r3,4(r21)
    d710:	10c00115 	stw	r3,4(r2)
    d714:	a8c00217 	ldw	r3,8(r21)
    d718:	10c00215 	stw	r3,8(r2)
    d71c:	b447883a 	add	r3,r22,r17
    d720:	bc45c83a 	sub	r2,r23,r17
    d724:	e0c00215 	stw	r3,8(fp)
    d728:	10800054 	ori	r2,r2,1
    d72c:	18800115 	stw	r2,4(r3)
    d730:	b0800117 	ldw	r2,4(r22)
    d734:	a009883a 	mov	r4,r20
    d738:	1080004c 	andi	r2,r2,1
    d73c:	1462b03a 	or	r17,r2,r17
    d740:	b4400115 	stw	r17,4(r22)
    d744:	0010e000 	call	10e00 <__malloc_unlock>
    d748:	9005883a 	mov	r2,r18
    d74c:	003f4006 	br	d450 <__alt_mem_onchip_memory+0xf780d450>
    d750:	a8c00217 	ldw	r3,8(r21)
    d754:	90c00215 	stw	r3,8(r18)
    d758:	a8c00317 	ldw	r3,12(r21)
    d75c:	90c00315 	stw	r3,12(r18)
    d760:	30801126 	beq	r6,r2,d7a8 <_realloc_r+0x4c8>
    d764:	90800404 	addi	r2,r18,16
    d768:	a8c00404 	addi	r3,r21,16
    d76c:	003f1906 	br	d3d4 <__alt_mem_onchip_memory+0xf780d3d4>
    d770:	90ffff17 	ldw	r3,-4(r18)
    d774:	00bfff04 	movi	r2,-4
    d778:	a825883a 	mov	r18,r21
    d77c:	1884703a 	and	r2,r3,r2
    d780:	80a1883a 	add	r16,r16,r2
    d784:	003f2406 	br	d418 <__alt_mem_onchip_memory+0xf780d418>
    d788:	a8800217 	ldw	r2,8(r21)
    d78c:	b0800415 	stw	r2,16(r22)
    d790:	a8800317 	ldw	r2,12(r21)
    d794:	b0800515 	stw	r2,20(r22)
    d798:	31000a26 	beq	r6,r4,d7c4 <_realloc_r+0x4e4>
    d79c:	b0800604 	addi	r2,r22,24
    d7a0:	ad400404 	addi	r21,r21,16
    d7a4:	003fa906 	br	d64c <__alt_mem_onchip_memory+0xf780d64c>
    d7a8:	a9000417 	ldw	r4,16(r21)
    d7ac:	90800604 	addi	r2,r18,24
    d7b0:	a8c00604 	addi	r3,r21,24
    d7b4:	91000415 	stw	r4,16(r18)
    d7b8:	a9000517 	ldw	r4,20(r21)
    d7bc:	91000515 	stw	r4,20(r18)
    d7c0:	003f0406 	br	d3d4 <__alt_mem_onchip_memory+0xf780d3d4>
    d7c4:	a8c00417 	ldw	r3,16(r21)
    d7c8:	ad400604 	addi	r21,r21,24
    d7cc:	b0800804 	addi	r2,r22,32
    d7d0:	b0c00615 	stw	r3,24(r22)
    d7d4:	a8ffff17 	ldw	r3,-4(r21)
    d7d8:	b0c00715 	stw	r3,28(r22)
    d7dc:	003f9b06 	br	d64c <__alt_mem_onchip_memory+0xf780d64c>
    d7e0:	9005883a 	mov	r2,r18
    d7e4:	003fc706 	br	d704 <__alt_mem_onchip_memory+0xf780d704>
    d7e8:	a80b883a 	mov	r5,r21
    d7ec:	9009883a 	mov	r4,r18
    d7f0:	000bef80 	call	bef8 <memmove>
    d7f4:	003fc906 	br	d71c <__alt_mem_onchip_memory+0xf780d71c>
    d7f8:	a8800217 	ldw	r2,8(r21)
    d7fc:	b0800415 	stw	r2,16(r22)
    d800:	a8800317 	ldw	r2,12(r21)
    d804:	b0800515 	stw	r2,20(r22)
    d808:	31000726 	beq	r6,r4,d828 <_realloc_r+0x548>
    d80c:	b0800604 	addi	r2,r22,24
    d810:	ad400404 	addi	r21,r21,16
    d814:	003fbb06 	br	d704 <__alt_mem_onchip_memory+0xf780d704>
    d818:	a009883a 	mov	r4,r20
    d81c:	0010e000 	call	10e00 <__malloc_unlock>
    d820:	0005883a 	mov	r2,zero
    d824:	003f0a06 	br	d450 <__alt_mem_onchip_memory+0xf780d450>
    d828:	a8c00417 	ldw	r3,16(r21)
    d82c:	ad400604 	addi	r21,r21,24
    d830:	b0800804 	addi	r2,r22,32
    d834:	b0c00615 	stw	r3,24(r22)
    d838:	a8ffff17 	ldw	r3,-4(r21)
    d83c:	b0c00715 	stw	r3,28(r22)
    d840:	003fb006 	br	d704 <__alt_mem_onchip_memory+0xf780d704>

0000d844 <_sbrk_r>:
    d844:	defffd04 	addi	sp,sp,-12
    d848:	dc000015 	stw	r16,0(sp)
    d84c:	04000074 	movhi	r16,1
    d850:	dc400115 	stw	r17,4(sp)
    d854:	841bdc04 	addi	r16,r16,28528
    d858:	2023883a 	mov	r17,r4
    d85c:	2809883a 	mov	r4,r5
    d860:	dfc00215 	stw	ra,8(sp)
    d864:	80000015 	stw	zero,0(r16)
    d868:	0010fc00 	call	10fc0 <sbrk>
    d86c:	00ffffc4 	movi	r3,-1
    d870:	10c00526 	beq	r2,r3,d888 <_sbrk_r+0x44>
    d874:	dfc00217 	ldw	ra,8(sp)
    d878:	dc400117 	ldw	r17,4(sp)
    d87c:	dc000017 	ldw	r16,0(sp)
    d880:	dec00304 	addi	sp,sp,12
    d884:	f800283a 	ret
    d888:	80c00017 	ldw	r3,0(r16)
    d88c:	183ff926 	beq	r3,zero,d874 <__alt_mem_onchip_memory+0xf780d874>
    d890:	88c00015 	stw	r3,0(r17)
    d894:	003ff706 	br	d874 <__alt_mem_onchip_memory+0xf780d874>

0000d898 <__sread>:
    d898:	defffe04 	addi	sp,sp,-8
    d89c:	dc000015 	stw	r16,0(sp)
    d8a0:	2821883a 	mov	r16,r5
    d8a4:	2940038f 	ldh	r5,14(r5)
    d8a8:	dfc00115 	stw	ra,4(sp)
    d8ac:	000f7e40 	call	f7e4 <_read_r>
    d8b0:	10000716 	blt	r2,zero,d8d0 <__sread+0x38>
    d8b4:	80c01417 	ldw	r3,80(r16)
    d8b8:	1887883a 	add	r3,r3,r2
    d8bc:	80c01415 	stw	r3,80(r16)
    d8c0:	dfc00117 	ldw	ra,4(sp)
    d8c4:	dc000017 	ldw	r16,0(sp)
    d8c8:	dec00204 	addi	sp,sp,8
    d8cc:	f800283a 	ret
    d8d0:	80c0030b 	ldhu	r3,12(r16)
    d8d4:	18fbffcc 	andi	r3,r3,61439
    d8d8:	80c0030d 	sth	r3,12(r16)
    d8dc:	dfc00117 	ldw	ra,4(sp)
    d8e0:	dc000017 	ldw	r16,0(sp)
    d8e4:	dec00204 	addi	sp,sp,8
    d8e8:	f800283a 	ret

0000d8ec <__seofread>:
    d8ec:	0005883a 	mov	r2,zero
    d8f0:	f800283a 	ret

0000d8f4 <__swrite>:
    d8f4:	2880030b 	ldhu	r2,12(r5)
    d8f8:	defffb04 	addi	sp,sp,-20
    d8fc:	dcc00315 	stw	r19,12(sp)
    d900:	dc800215 	stw	r18,8(sp)
    d904:	dc400115 	stw	r17,4(sp)
    d908:	dc000015 	stw	r16,0(sp)
    d90c:	dfc00415 	stw	ra,16(sp)
    d910:	10c0400c 	andi	r3,r2,256
    d914:	2821883a 	mov	r16,r5
    d918:	2023883a 	mov	r17,r4
    d91c:	3025883a 	mov	r18,r6
    d920:	3827883a 	mov	r19,r7
    d924:	18000526 	beq	r3,zero,d93c <__swrite+0x48>
    d928:	2940038f 	ldh	r5,14(r5)
    d92c:	01c00084 	movi	r7,2
    d930:	000d883a 	mov	r6,zero
    d934:	000f7840 	call	f784 <_lseek_r>
    d938:	8080030b 	ldhu	r2,12(r16)
    d93c:	8140038f 	ldh	r5,14(r16)
    d940:	10bbffcc 	andi	r2,r2,61439
    d944:	980f883a 	mov	r7,r19
    d948:	900d883a 	mov	r6,r18
    d94c:	8809883a 	mov	r4,r17
    d950:	8080030d 	sth	r2,12(r16)
    d954:	dfc00417 	ldw	ra,16(sp)
    d958:	dcc00317 	ldw	r19,12(sp)
    d95c:	dc800217 	ldw	r18,8(sp)
    d960:	dc400117 	ldw	r17,4(sp)
    d964:	dc000017 	ldw	r16,0(sp)
    d968:	dec00504 	addi	sp,sp,20
    d96c:	000f2501 	jmpi	f250 <_write_r>

0000d970 <__sseek>:
    d970:	defffe04 	addi	sp,sp,-8
    d974:	dc000015 	stw	r16,0(sp)
    d978:	2821883a 	mov	r16,r5
    d97c:	2940038f 	ldh	r5,14(r5)
    d980:	dfc00115 	stw	ra,4(sp)
    d984:	000f7840 	call	f784 <_lseek_r>
    d988:	00ffffc4 	movi	r3,-1
    d98c:	10c00826 	beq	r2,r3,d9b0 <__sseek+0x40>
    d990:	80c0030b 	ldhu	r3,12(r16)
    d994:	80801415 	stw	r2,80(r16)
    d998:	18c40014 	ori	r3,r3,4096
    d99c:	80c0030d 	sth	r3,12(r16)
    d9a0:	dfc00117 	ldw	ra,4(sp)
    d9a4:	dc000017 	ldw	r16,0(sp)
    d9a8:	dec00204 	addi	sp,sp,8
    d9ac:	f800283a 	ret
    d9b0:	80c0030b 	ldhu	r3,12(r16)
    d9b4:	18fbffcc 	andi	r3,r3,61439
    d9b8:	80c0030d 	sth	r3,12(r16)
    d9bc:	dfc00117 	ldw	ra,4(sp)
    d9c0:	dc000017 	ldw	r16,0(sp)
    d9c4:	dec00204 	addi	sp,sp,8
    d9c8:	f800283a 	ret

0000d9cc <__sclose>:
    d9cc:	2940038f 	ldh	r5,14(r5)
    d9d0:	000f2b01 	jmpi	f2b0 <_close_r>

0000d9d4 <strcmp>:
    d9d4:	2144b03a 	or	r2,r4,r5
    d9d8:	108000cc 	andi	r2,r2,3
    d9dc:	1000171e 	bne	r2,zero,da3c <strcmp+0x68>
    d9e0:	20800017 	ldw	r2,0(r4)
    d9e4:	28c00017 	ldw	r3,0(r5)
    d9e8:	10c0141e 	bne	r2,r3,da3c <strcmp+0x68>
    d9ec:	027fbff4 	movhi	r9,65279
    d9f0:	4a7fbfc4 	addi	r9,r9,-257
    d9f4:	0086303a 	nor	r3,zero,r2
    d9f8:	02202074 	movhi	r8,32897
    d9fc:	1245883a 	add	r2,r2,r9
    da00:	42202004 	addi	r8,r8,-32640
    da04:	10c4703a 	and	r2,r2,r3
    da08:	1204703a 	and	r2,r2,r8
    da0c:	10000226 	beq	r2,zero,da18 <strcmp+0x44>
    da10:	00002306 	br	daa0 <strcmp+0xcc>
    da14:	1000221e 	bne	r2,zero,daa0 <strcmp+0xcc>
    da18:	21000104 	addi	r4,r4,4
    da1c:	20c00017 	ldw	r3,0(r4)
    da20:	29400104 	addi	r5,r5,4
    da24:	29800017 	ldw	r6,0(r5)
    da28:	1a4f883a 	add	r7,r3,r9
    da2c:	00c4303a 	nor	r2,zero,r3
    da30:	3884703a 	and	r2,r7,r2
    da34:	1204703a 	and	r2,r2,r8
    da38:	19bff626 	beq	r3,r6,da14 <__alt_mem_onchip_memory+0xf780da14>
    da3c:	20800003 	ldbu	r2,0(r4)
    da40:	10c03fcc 	andi	r3,r2,255
    da44:	18c0201c 	xori	r3,r3,128
    da48:	18ffe004 	addi	r3,r3,-128
    da4c:	18000c26 	beq	r3,zero,da80 <strcmp+0xac>
    da50:	29800007 	ldb	r6,0(r5)
    da54:	19800326 	beq	r3,r6,da64 <strcmp+0x90>
    da58:	00001306 	br	daa8 <strcmp+0xd4>
    da5c:	29800007 	ldb	r6,0(r5)
    da60:	11800b1e 	bne	r2,r6,da90 <strcmp+0xbc>
    da64:	21000044 	addi	r4,r4,1
    da68:	20c00003 	ldbu	r3,0(r4)
    da6c:	29400044 	addi	r5,r5,1
    da70:	18803fcc 	andi	r2,r3,255
    da74:	1080201c 	xori	r2,r2,128
    da78:	10bfe004 	addi	r2,r2,-128
    da7c:	103ff71e 	bne	r2,zero,da5c <__alt_mem_onchip_memory+0xf780da5c>
    da80:	0007883a 	mov	r3,zero
    da84:	28800003 	ldbu	r2,0(r5)
    da88:	1885c83a 	sub	r2,r3,r2
    da8c:	f800283a 	ret
    da90:	28800003 	ldbu	r2,0(r5)
    da94:	18c03fcc 	andi	r3,r3,255
    da98:	1885c83a 	sub	r2,r3,r2
    da9c:	f800283a 	ret
    daa0:	0005883a 	mov	r2,zero
    daa4:	f800283a 	ret
    daa8:	10c03fcc 	andi	r3,r2,255
    daac:	003ff506 	br	da84 <__alt_mem_onchip_memory+0xf780da84>

0000dab0 <__sprint_r.part.0>:
    dab0:	28801917 	ldw	r2,100(r5)
    dab4:	defff604 	addi	sp,sp,-40
    dab8:	dd400515 	stw	r21,20(sp)
    dabc:	dfc00915 	stw	ra,36(sp)
    dac0:	df000815 	stw	fp,32(sp)
    dac4:	ddc00715 	stw	r23,28(sp)
    dac8:	dd800615 	stw	r22,24(sp)
    dacc:	dd000415 	stw	r20,16(sp)
    dad0:	dcc00315 	stw	r19,12(sp)
    dad4:	dc800215 	stw	r18,8(sp)
    dad8:	dc400115 	stw	r17,4(sp)
    dadc:	dc000015 	stw	r16,0(sp)
    dae0:	1088000c 	andi	r2,r2,8192
    dae4:	302b883a 	mov	r21,r6
    dae8:	10002e26 	beq	r2,zero,dba4 <__sprint_r.part.0+0xf4>
    daec:	30800217 	ldw	r2,8(r6)
    daf0:	35800017 	ldw	r22,0(r6)
    daf4:	10002926 	beq	r2,zero,db9c <__sprint_r.part.0+0xec>
    daf8:	2827883a 	mov	r19,r5
    dafc:	2029883a 	mov	r20,r4
    db00:	b5c00104 	addi	r23,r22,4
    db04:	04bfffc4 	movi	r18,-1
    db08:	bc400017 	ldw	r17,0(r23)
    db0c:	b4000017 	ldw	r16,0(r22)
    db10:	0039883a 	mov	fp,zero
    db14:	8822d0ba 	srli	r17,r17,2
    db18:	8800031e 	bne	r17,zero,db28 <__sprint_r.part.0+0x78>
    db1c:	00001806 	br	db80 <__sprint_r.part.0+0xd0>
    db20:	84000104 	addi	r16,r16,4
    db24:	8f001526 	beq	r17,fp,db7c <__sprint_r.part.0+0xcc>
    db28:	81400017 	ldw	r5,0(r16)
    db2c:	980d883a 	mov	r6,r19
    db30:	a009883a 	mov	r4,r20
    db34:	000f6300 	call	f630 <_fputwc_r>
    db38:	e7000044 	addi	fp,fp,1
    db3c:	14bff81e 	bne	r2,r18,db20 <__alt_mem_onchip_memory+0xf780db20>
    db40:	9005883a 	mov	r2,r18
    db44:	a8000215 	stw	zero,8(r21)
    db48:	a8000115 	stw	zero,4(r21)
    db4c:	dfc00917 	ldw	ra,36(sp)
    db50:	df000817 	ldw	fp,32(sp)
    db54:	ddc00717 	ldw	r23,28(sp)
    db58:	dd800617 	ldw	r22,24(sp)
    db5c:	dd400517 	ldw	r21,20(sp)
    db60:	dd000417 	ldw	r20,16(sp)
    db64:	dcc00317 	ldw	r19,12(sp)
    db68:	dc800217 	ldw	r18,8(sp)
    db6c:	dc400117 	ldw	r17,4(sp)
    db70:	dc000017 	ldw	r16,0(sp)
    db74:	dec00a04 	addi	sp,sp,40
    db78:	f800283a 	ret
    db7c:	a8800217 	ldw	r2,8(r21)
    db80:	8c63883a 	add	r17,r17,r17
    db84:	8c63883a 	add	r17,r17,r17
    db88:	1445c83a 	sub	r2,r2,r17
    db8c:	a8800215 	stw	r2,8(r21)
    db90:	b5800204 	addi	r22,r22,8
    db94:	bdc00204 	addi	r23,r23,8
    db98:	103fdb1e 	bne	r2,zero,db08 <__alt_mem_onchip_memory+0xf780db08>
    db9c:	0005883a 	mov	r2,zero
    dba0:	003fe806 	br	db44 <__alt_mem_onchip_memory+0xf780db44>
    dba4:	000ab880 	call	ab88 <__sfvwrite_r>
    dba8:	003fe606 	br	db44 <__alt_mem_onchip_memory+0xf780db44>

0000dbac <__sprint_r>:
    dbac:	30c00217 	ldw	r3,8(r6)
    dbb0:	18000126 	beq	r3,zero,dbb8 <__sprint_r+0xc>
    dbb4:	000dab01 	jmpi	dab0 <__sprint_r.part.0>
    dbb8:	30000115 	stw	zero,4(r6)
    dbbc:	0005883a 	mov	r2,zero
    dbc0:	f800283a 	ret

0000dbc4 <___vfiprintf_internal_r>:
    dbc4:	deffc904 	addi	sp,sp,-220
    dbc8:	df003515 	stw	fp,212(sp)
    dbcc:	dd003115 	stw	r20,196(sp)
    dbd0:	dfc03615 	stw	ra,216(sp)
    dbd4:	ddc03415 	stw	r23,208(sp)
    dbd8:	dd803315 	stw	r22,204(sp)
    dbdc:	dd403215 	stw	r21,200(sp)
    dbe0:	dcc03015 	stw	r19,192(sp)
    dbe4:	dc802f15 	stw	r18,188(sp)
    dbe8:	dc402e15 	stw	r17,184(sp)
    dbec:	dc002d15 	stw	r16,180(sp)
    dbf0:	d9002015 	stw	r4,128(sp)
    dbf4:	d9c02215 	stw	r7,136(sp)
    dbf8:	2829883a 	mov	r20,r5
    dbfc:	3039883a 	mov	fp,r6
    dc00:	20000226 	beq	r4,zero,dc0c <___vfiprintf_internal_r+0x48>
    dc04:	20800e17 	ldw	r2,56(r4)
    dc08:	1000cf26 	beq	r2,zero,df48 <___vfiprintf_internal_r+0x384>
    dc0c:	a080030b 	ldhu	r2,12(r20)
    dc10:	10c8000c 	andi	r3,r2,8192
    dc14:	1800061e 	bne	r3,zero,dc30 <___vfiprintf_internal_r+0x6c>
    dc18:	a1001917 	ldw	r4,100(r20)
    dc1c:	00f7ffc4 	movi	r3,-8193
    dc20:	10880014 	ori	r2,r2,8192
    dc24:	20c6703a 	and	r3,r4,r3
    dc28:	a080030d 	sth	r2,12(r20)
    dc2c:	a0c01915 	stw	r3,100(r20)
    dc30:	10c0020c 	andi	r3,r2,8
    dc34:	1800a926 	beq	r3,zero,dedc <___vfiprintf_internal_r+0x318>
    dc38:	a0c00417 	ldw	r3,16(r20)
    dc3c:	1800a726 	beq	r3,zero,dedc <___vfiprintf_internal_r+0x318>
    dc40:	1080068c 	andi	r2,r2,26
    dc44:	00c00284 	movi	r3,10
    dc48:	10c0ac26 	beq	r2,r3,defc <___vfiprintf_internal_r+0x338>
    dc4c:	da801a04 	addi	r10,sp,104
    dc50:	da801e15 	stw	r10,120(sp)
    dc54:	d8801e17 	ldw	r2,120(sp)
    dc58:	da8019c4 	addi	r10,sp,103
    dc5c:	05800074 	movhi	r22,1
    dc60:	05c00074 	movhi	r23,1
    dc64:	da801f15 	stw	r10,124(sp)
    dc68:	1295c83a 	sub	r10,r2,r10
    dc6c:	b58e0604 	addi	r22,r22,14360
    dc70:	bdce0204 	addi	r23,r23,14344
    dc74:	dec01a15 	stw	sp,104(sp)
    dc78:	d8001c15 	stw	zero,112(sp)
    dc7c:	d8001b15 	stw	zero,108(sp)
    dc80:	d8002615 	stw	zero,152(sp)
    dc84:	d8002315 	stw	zero,140(sp)
    dc88:	da802715 	stw	r10,156(sp)
    dc8c:	d811883a 	mov	r8,sp
    dc90:	dd002115 	stw	r20,132(sp)
    dc94:	e021883a 	mov	r16,fp
    dc98:	80800007 	ldb	r2,0(r16)
    dc9c:	1003ea26 	beq	r2,zero,ec48 <___vfiprintf_internal_r+0x1084>
    dca0:	00c00944 	movi	r3,37
    dca4:	8025883a 	mov	r18,r16
    dca8:	10c0021e 	bne	r2,r3,dcb4 <___vfiprintf_internal_r+0xf0>
    dcac:	00001606 	br	dd08 <___vfiprintf_internal_r+0x144>
    dcb0:	10c00326 	beq	r2,r3,dcc0 <___vfiprintf_internal_r+0xfc>
    dcb4:	94800044 	addi	r18,r18,1
    dcb8:	90800007 	ldb	r2,0(r18)
    dcbc:	103ffc1e 	bne	r2,zero,dcb0 <__alt_mem_onchip_memory+0xf780dcb0>
    dcc0:	9423c83a 	sub	r17,r18,r16
    dcc4:	88001026 	beq	r17,zero,dd08 <___vfiprintf_internal_r+0x144>
    dcc8:	d8c01c17 	ldw	r3,112(sp)
    dccc:	d8801b17 	ldw	r2,108(sp)
    dcd0:	44000015 	stw	r16,0(r8)
    dcd4:	88c7883a 	add	r3,r17,r3
    dcd8:	10800044 	addi	r2,r2,1
    dcdc:	44400115 	stw	r17,4(r8)
    dce0:	d8c01c15 	stw	r3,112(sp)
    dce4:	d8801b15 	stw	r2,108(sp)
    dce8:	010001c4 	movi	r4,7
    dcec:	2080760e 	bge	r4,r2,dec8 <___vfiprintf_internal_r+0x304>
    dcf0:	1803821e 	bne	r3,zero,eafc <___vfiprintf_internal_r+0xf38>
    dcf4:	da802317 	ldw	r10,140(sp)
    dcf8:	d8001b15 	stw	zero,108(sp)
    dcfc:	d811883a 	mov	r8,sp
    dd00:	5455883a 	add	r10,r10,r17
    dd04:	da802315 	stw	r10,140(sp)
    dd08:	90800007 	ldb	r2,0(r18)
    dd0c:	10044626 	beq	r2,zero,ee28 <___vfiprintf_internal_r+0x1264>
    dd10:	90c00047 	ldb	r3,1(r18)
    dd14:	94000044 	addi	r16,r18,1
    dd18:	d8001d85 	stb	zero,118(sp)
    dd1c:	0009883a 	mov	r4,zero
    dd20:	000f883a 	mov	r7,zero
    dd24:	027fffc4 	movi	r9,-1
    dd28:	0023883a 	mov	r17,zero
    dd2c:	0029883a 	mov	r20,zero
    dd30:	01401604 	movi	r5,88
    dd34:	01800244 	movi	r6,9
    dd38:	03400a84 	movi	r13,42
    dd3c:	03001b04 	movi	r12,108
    dd40:	84000044 	addi	r16,r16,1
    dd44:	18bff804 	addi	r2,r3,-32
    dd48:	28827336 	bltu	r5,r2,e718 <___vfiprintf_internal_r+0xb54>
    dd4c:	100490ba 	slli	r2,r2,2
    dd50:	02800074 	movhi	r10,1
    dd54:	52b75904 	addi	r10,r10,-8860
    dd58:	1285883a 	add	r2,r2,r10
    dd5c:	10800017 	ldw	r2,0(r2)
    dd60:	1000683a 	jmp	r2
    dd64:	0000e44c 	andi	zero,zero,913
    dd68:	0000e718 	cmpnei	zero,zero,924
    dd6c:	0000e718 	cmpnei	zero,zero,924
    dd70:	0000e46c 	andhi	zero,zero,913
    dd74:	0000e718 	cmpnei	zero,zero,924
    dd78:	0000e718 	cmpnei	zero,zero,924
    dd7c:	0000e718 	cmpnei	zero,zero,924
    dd80:	0000e718 	cmpnei	zero,zero,924
    dd84:	0000e718 	cmpnei	zero,zero,924
    dd88:	0000e718 	cmpnei	zero,zero,924
    dd8c:	0000e654 	movui	zero,921
    dd90:	0000e670 	cmpltui	zero,zero,921
    dd94:	0000e718 	cmpnei	zero,zero,924
    dd98:	0000df58 	cmpnei	zero,zero,893
    dd9c:	0000e680 	call	e68 <WeightUpdatesIH1+0x124>
    dda0:	0000e718 	cmpnei	zero,zero,924
    dda4:	0000e478 	rdprs	zero,zero,913
    dda8:	0000e484 	movi	zero,914
    ddac:	0000e484 	movi	zero,914
    ddb0:	0000e484 	movi	zero,914
    ddb4:	0000e484 	movi	zero,914
    ddb8:	0000e484 	movi	zero,914
    ddbc:	0000e484 	movi	zero,914
    ddc0:	0000e484 	movi	zero,914
    ddc4:	0000e484 	movi	zero,914
    ddc8:	0000e484 	movi	zero,914
    ddcc:	0000e718 	cmpnei	zero,zero,924
    ddd0:	0000e718 	cmpnei	zero,zero,924
    ddd4:	0000e718 	cmpnei	zero,zero,924
    ddd8:	0000e718 	cmpnei	zero,zero,924
    dddc:	0000e718 	cmpnei	zero,zero,924
    dde0:	0000e718 	cmpnei	zero,zero,924
    dde4:	0000e718 	cmpnei	zero,zero,924
    dde8:	0000e718 	cmpnei	zero,zero,924
    ddec:	0000e718 	cmpnei	zero,zero,924
    ddf0:	0000e718 	cmpnei	zero,zero,924
    ddf4:	0000e4b0 	cmpltui	zero,zero,914
    ddf8:	0000e718 	cmpnei	zero,zero,924
    ddfc:	0000e718 	cmpnei	zero,zero,924
    de00:	0000e718 	cmpnei	zero,zero,924
    de04:	0000e718 	cmpnei	zero,zero,924
    de08:	0000e718 	cmpnei	zero,zero,924
    de0c:	0000e718 	cmpnei	zero,zero,924
    de10:	0000e718 	cmpnei	zero,zero,924
    de14:	0000e718 	cmpnei	zero,zero,924
    de18:	0000e718 	cmpnei	zero,zero,924
    de1c:	0000e718 	cmpnei	zero,zero,924
    de20:	0000e4e8 	cmpgeui	zero,zero,915
    de24:	0000e718 	cmpnei	zero,zero,924
    de28:	0000e718 	cmpnei	zero,zero,924
    de2c:	0000e718 	cmpnei	zero,zero,924
    de30:	0000e718 	cmpnei	zero,zero,924
    de34:	0000e718 	cmpnei	zero,zero,924
    de38:	0000e540 	call	e54 <WeightUpdatesIH1+0x110>
    de3c:	0000e718 	cmpnei	zero,zero,924
    de40:	0000e718 	cmpnei	zero,zero,924
    de44:	0000e5b0 	cmpltui	zero,zero,918
    de48:	0000e718 	cmpnei	zero,zero,924
    de4c:	0000e718 	cmpnei	zero,zero,924
    de50:	0000e718 	cmpnei	zero,zero,924
    de54:	0000e718 	cmpnei	zero,zero,924
    de58:	0000e718 	cmpnei	zero,zero,924
    de5c:	0000e718 	cmpnei	zero,zero,924
    de60:	0000e718 	cmpnei	zero,zero,924
    de64:	0000e718 	cmpnei	zero,zero,924
    de68:	0000e718 	cmpnei	zero,zero,924
    de6c:	0000e718 	cmpnei	zero,zero,924
    de70:	0000e35c 	xori	zero,zero,909
    de74:	0000e388 	cmpgei	zero,zero,910
    de78:	0000e718 	cmpnei	zero,zero,924
    de7c:	0000e718 	cmpnei	zero,zero,924
    de80:	0000e718 	cmpnei	zero,zero,924
    de84:	0000e6c0 	call	e6c <WeightUpdatesIH1+0x128>
    de88:	0000e388 	cmpgei	zero,zero,910
    de8c:	0000e718 	cmpnei	zero,zero,924
    de90:	0000e718 	cmpnei	zero,zero,924
    de94:	0000e21c 	xori	zero,zero,904
    de98:	0000e718 	cmpnei	zero,zero,924
    de9c:	0000e22c 	andhi	zero,zero,904
    dea0:	0000e268 	cmpgeui	zero,zero,905
    dea4:	0000df64 	muli	zero,zero,893
    dea8:	0000e210 	cmplti	zero,zero,904
    deac:	0000e718 	cmpnei	zero,zero,924
    deb0:	0000e5ec 	andhi	zero,zero,919
    deb4:	0000e718 	cmpnei	zero,zero,924
    deb8:	0000e644 	movi	zero,921
    debc:	0000e718 	cmpnei	zero,zero,924
    dec0:	0000e718 	cmpnei	zero,zero,924
    dec4:	0000e308 	cmpgei	zero,zero,908
    dec8:	42000204 	addi	r8,r8,8
    decc:	da802317 	ldw	r10,140(sp)
    ded0:	5455883a 	add	r10,r10,r17
    ded4:	da802315 	stw	r10,140(sp)
    ded8:	003f8b06 	br	dd08 <__alt_mem_onchip_memory+0xf780dd08>
    dedc:	d9002017 	ldw	r4,128(sp)
    dee0:	a00b883a 	mov	r5,r20
    dee4:	00087300 	call	8730 <__swsetup_r>
    dee8:	1003b11e 	bne	r2,zero,edb0 <___vfiprintf_internal_r+0x11ec>
    deec:	a080030b 	ldhu	r2,12(r20)
    def0:	00c00284 	movi	r3,10
    def4:	1080068c 	andi	r2,r2,26
    def8:	10ff541e 	bne	r2,r3,dc4c <__alt_mem_onchip_memory+0xf780dc4c>
    defc:	a080038f 	ldh	r2,14(r20)
    df00:	103f5216 	blt	r2,zero,dc4c <__alt_mem_onchip_memory+0xf780dc4c>
    df04:	d9c02217 	ldw	r7,136(sp)
    df08:	d9002017 	ldw	r4,128(sp)
    df0c:	e00d883a 	mov	r6,fp
    df10:	a00b883a 	mov	r5,r20
    df14:	000f03c0 	call	f03c <__sbprintf>
    df18:	dfc03617 	ldw	ra,216(sp)
    df1c:	df003517 	ldw	fp,212(sp)
    df20:	ddc03417 	ldw	r23,208(sp)
    df24:	dd803317 	ldw	r22,204(sp)
    df28:	dd403217 	ldw	r21,200(sp)
    df2c:	dd003117 	ldw	r20,196(sp)
    df30:	dcc03017 	ldw	r19,192(sp)
    df34:	dc802f17 	ldw	r18,188(sp)
    df38:	dc402e17 	ldw	r17,184(sp)
    df3c:	dc002d17 	ldw	r16,180(sp)
    df40:	dec03704 	addi	sp,sp,220
    df44:	f800283a 	ret
    df48:	000a7040 	call	a704 <__sinit>
    df4c:	003f2f06 	br	dc0c <__alt_mem_onchip_memory+0xf780dc0c>
    df50:	0463c83a 	sub	r17,zero,r17
    df54:	d8802215 	stw	r2,136(sp)
    df58:	a5000114 	ori	r20,r20,4
    df5c:	80c00007 	ldb	r3,0(r16)
    df60:	003f7706 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    df64:	00800c04 	movi	r2,48
    df68:	da802217 	ldw	r10,136(sp)
    df6c:	d8801d05 	stb	r2,116(sp)
    df70:	00801e04 	movi	r2,120
    df74:	d8801d45 	stb	r2,117(sp)
    df78:	d8001d85 	stb	zero,118(sp)
    df7c:	50c00104 	addi	r3,r10,4
    df80:	54800017 	ldw	r18,0(r10)
    df84:	0027883a 	mov	r19,zero
    df88:	a0800094 	ori	r2,r20,2
    df8c:	48030b16 	blt	r9,zero,ebbc <___vfiprintf_internal_r+0xff8>
    df90:	00bfdfc4 	movi	r2,-129
    df94:	a096703a 	and	r11,r20,r2
    df98:	d8c02215 	stw	r3,136(sp)
    df9c:	5d000094 	ori	r20,r11,2
    dfa0:	90032b1e 	bne	r18,zero,ec50 <___vfiprintf_internal_r+0x108c>
    dfa4:	00800074 	movhi	r2,1
    dfa8:	108da204 	addi	r2,r2,13960
    dfac:	d8802615 	stw	r2,152(sp)
    dfb0:	0039883a 	mov	fp,zero
    dfb4:	48017b1e 	bne	r9,zero,e5a4 <___vfiprintf_internal_r+0x9e0>
    dfb8:	0013883a 	mov	r9,zero
    dfbc:	0027883a 	mov	r19,zero
    dfc0:	dd401a04 	addi	r21,sp,104
    dfc4:	4825883a 	mov	r18,r9
    dfc8:	4cc0010e 	bge	r9,r19,dfd0 <___vfiprintf_internal_r+0x40c>
    dfcc:	9825883a 	mov	r18,r19
    dfd0:	e7003fcc 	andi	fp,fp,255
    dfd4:	e700201c 	xori	fp,fp,128
    dfd8:	e73fe004 	addi	fp,fp,-128
    dfdc:	e0000126 	beq	fp,zero,dfe4 <___vfiprintf_internal_r+0x420>
    dfe0:	94800044 	addi	r18,r18,1
    dfe4:	a380008c 	andi	r14,r20,2
    dfe8:	70000126 	beq	r14,zero,dff0 <___vfiprintf_internal_r+0x42c>
    dfec:	94800084 	addi	r18,r18,2
    dff0:	a700210c 	andi	fp,r20,132
    dff4:	e001df1e 	bne	fp,zero,e774 <___vfiprintf_internal_r+0xbb0>
    dff8:	8c87c83a 	sub	r3,r17,r18
    dffc:	00c1dd0e 	bge	zero,r3,e774 <___vfiprintf_internal_r+0xbb0>
    e000:	01c00404 	movi	r7,16
    e004:	d8801c17 	ldw	r2,112(sp)
    e008:	38c3ad0e 	bge	r7,r3,eec0 <___vfiprintf_internal_r+0x12fc>
    e00c:	02800074 	movhi	r10,1
    e010:	528e0604 	addi	r10,r10,14360
    e014:	dc002915 	stw	r16,164(sp)
    e018:	d9801b17 	ldw	r6,108(sp)
    e01c:	da802415 	stw	r10,144(sp)
    e020:	03c001c4 	movi	r15,7
    e024:	da402515 	stw	r9,148(sp)
    e028:	db802815 	stw	r14,160(sp)
    e02c:	1821883a 	mov	r16,r3
    e030:	00000506 	br	e048 <___vfiprintf_internal_r+0x484>
    e034:	31400084 	addi	r5,r6,2
    e038:	42000204 	addi	r8,r8,8
    e03c:	200d883a 	mov	r6,r4
    e040:	843ffc04 	addi	r16,r16,-16
    e044:	3c000d0e 	bge	r7,r16,e07c <___vfiprintf_internal_r+0x4b8>
    e048:	10800404 	addi	r2,r2,16
    e04c:	31000044 	addi	r4,r6,1
    e050:	45800015 	stw	r22,0(r8)
    e054:	41c00115 	stw	r7,4(r8)
    e058:	d8801c15 	stw	r2,112(sp)
    e05c:	d9001b15 	stw	r4,108(sp)
    e060:	793ff40e 	bge	r15,r4,e034 <__alt_mem_onchip_memory+0xf780e034>
    e064:	1001b51e 	bne	r2,zero,e73c <___vfiprintf_internal_r+0xb78>
    e068:	843ffc04 	addi	r16,r16,-16
    e06c:	000d883a 	mov	r6,zero
    e070:	01400044 	movi	r5,1
    e074:	d811883a 	mov	r8,sp
    e078:	3c3ff316 	blt	r7,r16,e048 <__alt_mem_onchip_memory+0xf780e048>
    e07c:	8007883a 	mov	r3,r16
    e080:	da402517 	ldw	r9,148(sp)
    e084:	db802817 	ldw	r14,160(sp)
    e088:	dc002917 	ldw	r16,164(sp)
    e08c:	da802417 	ldw	r10,144(sp)
    e090:	1885883a 	add	r2,r3,r2
    e094:	40c00115 	stw	r3,4(r8)
    e098:	42800015 	stw	r10,0(r8)
    e09c:	d8801c15 	stw	r2,112(sp)
    e0a0:	d9401b15 	stw	r5,108(sp)
    e0a4:	00c001c4 	movi	r3,7
    e0a8:	19426016 	blt	r3,r5,ea2c <___vfiprintf_internal_r+0xe68>
    e0ac:	d8c01d87 	ldb	r3,118(sp)
    e0b0:	42000204 	addi	r8,r8,8
    e0b4:	29000044 	addi	r4,r5,1
    e0b8:	1801b31e 	bne	r3,zero,e788 <___vfiprintf_internal_r+0xbc4>
    e0bc:	7001c026 	beq	r14,zero,e7c0 <___vfiprintf_internal_r+0xbfc>
    e0c0:	d8c01d04 	addi	r3,sp,116
    e0c4:	10800084 	addi	r2,r2,2
    e0c8:	40c00015 	stw	r3,0(r8)
    e0cc:	00c00084 	movi	r3,2
    e0d0:	40c00115 	stw	r3,4(r8)
    e0d4:	d8801c15 	stw	r2,112(sp)
    e0d8:	d9001b15 	stw	r4,108(sp)
    e0dc:	00c001c4 	movi	r3,7
    e0e0:	1902650e 	bge	r3,r4,ea78 <___vfiprintf_internal_r+0xeb4>
    e0e4:	10029a1e 	bne	r2,zero,eb50 <___vfiprintf_internal_r+0xf8c>
    e0e8:	00c02004 	movi	r3,128
    e0ec:	01000044 	movi	r4,1
    e0f0:	000b883a 	mov	r5,zero
    e0f4:	d811883a 	mov	r8,sp
    e0f8:	e0c1b31e 	bne	fp,r3,e7c8 <___vfiprintf_internal_r+0xc04>
    e0fc:	8cb9c83a 	sub	fp,r17,r18
    e100:	0701b10e 	bge	zero,fp,e7c8 <___vfiprintf_internal_r+0xc04>
    e104:	01c00404 	movi	r7,16
    e108:	3f03890e 	bge	r7,fp,ef30 <___vfiprintf_internal_r+0x136c>
    e10c:	00c00074 	movhi	r3,1
    e110:	18ce0204 	addi	r3,r3,14344
    e114:	d8c02415 	stw	r3,144(sp)
    e118:	8007883a 	mov	r3,r16
    e11c:	034001c4 	movi	r13,7
    e120:	e021883a 	mov	r16,fp
    e124:	da402515 	stw	r9,148(sp)
    e128:	1839883a 	mov	fp,r3
    e12c:	00000506 	br	e144 <___vfiprintf_internal_r+0x580>
    e130:	29800084 	addi	r6,r5,2
    e134:	42000204 	addi	r8,r8,8
    e138:	180b883a 	mov	r5,r3
    e13c:	843ffc04 	addi	r16,r16,-16
    e140:	3c000d0e 	bge	r7,r16,e178 <___vfiprintf_internal_r+0x5b4>
    e144:	10800404 	addi	r2,r2,16
    e148:	28c00044 	addi	r3,r5,1
    e14c:	45c00015 	stw	r23,0(r8)
    e150:	41c00115 	stw	r7,4(r8)
    e154:	d8801c15 	stw	r2,112(sp)
    e158:	d8c01b15 	stw	r3,108(sp)
    e15c:	68fff40e 	bge	r13,r3,e130 <__alt_mem_onchip_memory+0xf780e130>
    e160:	1002241e 	bne	r2,zero,e9f4 <___vfiprintf_internal_r+0xe30>
    e164:	843ffc04 	addi	r16,r16,-16
    e168:	01800044 	movi	r6,1
    e16c:	000b883a 	mov	r5,zero
    e170:	d811883a 	mov	r8,sp
    e174:	3c3ff316 	blt	r7,r16,e144 <__alt_mem_onchip_memory+0xf780e144>
    e178:	da402517 	ldw	r9,148(sp)
    e17c:	e007883a 	mov	r3,fp
    e180:	8039883a 	mov	fp,r16
    e184:	1821883a 	mov	r16,r3
    e188:	d8c02417 	ldw	r3,144(sp)
    e18c:	1705883a 	add	r2,r2,fp
    e190:	47000115 	stw	fp,4(r8)
    e194:	40c00015 	stw	r3,0(r8)
    e198:	d8801c15 	stw	r2,112(sp)
    e19c:	d9801b15 	stw	r6,108(sp)
    e1a0:	00c001c4 	movi	r3,7
    e1a4:	19827616 	blt	r3,r6,eb80 <___vfiprintf_internal_r+0xfbc>
    e1a8:	4cf9c83a 	sub	fp,r9,r19
    e1ac:	42000204 	addi	r8,r8,8
    e1b0:	31000044 	addi	r4,r6,1
    e1b4:	300b883a 	mov	r5,r6
    e1b8:	07018516 	blt	zero,fp,e7d0 <___vfiprintf_internal_r+0xc0c>
    e1bc:	9885883a 	add	r2,r19,r2
    e1c0:	45400015 	stw	r21,0(r8)
    e1c4:	44c00115 	stw	r19,4(r8)
    e1c8:	d8801c15 	stw	r2,112(sp)
    e1cc:	d9001b15 	stw	r4,108(sp)
    e1d0:	00c001c4 	movi	r3,7
    e1d4:	1901dd0e 	bge	r3,r4,e94c <___vfiprintf_internal_r+0xd88>
    e1d8:	1002401e 	bne	r2,zero,eadc <___vfiprintf_internal_r+0xf18>
    e1dc:	d8001b15 	stw	zero,108(sp)
    e1e0:	a2c0010c 	andi	r11,r20,4
    e1e4:	58000226 	beq	r11,zero,e1f0 <___vfiprintf_internal_r+0x62c>
    e1e8:	8ca7c83a 	sub	r19,r17,r18
    e1ec:	04c2f216 	blt	zero,r19,edb8 <___vfiprintf_internal_r+0x11f4>
    e1f0:	8c80010e 	bge	r17,r18,e1f8 <___vfiprintf_internal_r+0x634>
    e1f4:	9023883a 	mov	r17,r18
    e1f8:	da802317 	ldw	r10,140(sp)
    e1fc:	5455883a 	add	r10,r10,r17
    e200:	da802315 	stw	r10,140(sp)
    e204:	d8001b15 	stw	zero,108(sp)
    e208:	d811883a 	mov	r8,sp
    e20c:	003ea206 	br	dc98 <__alt_mem_onchip_memory+0xf780dc98>
    e210:	a5000814 	ori	r20,r20,32
    e214:	80c00007 	ldb	r3,0(r16)
    e218:	003ec906 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e21c:	80c00007 	ldb	r3,0(r16)
    e220:	1b030926 	beq	r3,r12,ee48 <___vfiprintf_internal_r+0x1284>
    e224:	a5000414 	ori	r20,r20,16
    e228:	003ec506 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e22c:	21003fcc 	andi	r4,r4,255
    e230:	20035e1e 	bne	r4,zero,efac <___vfiprintf_internal_r+0x13e8>
    e234:	a080080c 	andi	r2,r20,32
    e238:	1002a526 	beq	r2,zero,ecd0 <___vfiprintf_internal_r+0x110c>
    e23c:	da802217 	ldw	r10,136(sp)
    e240:	50800017 	ldw	r2,0(r10)
    e244:	da802317 	ldw	r10,140(sp)
    e248:	5007d7fa 	srai	r3,r10,31
    e24c:	da802217 	ldw	r10,136(sp)
    e250:	10c00115 	stw	r3,4(r2)
    e254:	52800104 	addi	r10,r10,4
    e258:	da802215 	stw	r10,136(sp)
    e25c:	da802317 	ldw	r10,140(sp)
    e260:	12800015 	stw	r10,0(r2)
    e264:	003e8c06 	br	dc98 <__alt_mem_onchip_memory+0xf780dc98>
    e268:	21003fcc 	andi	r4,r4,255
    e26c:	2003511e 	bne	r4,zero,efb4 <___vfiprintf_internal_r+0x13f0>
    e270:	a080080c 	andi	r2,r20,32
    e274:	1000a126 	beq	r2,zero,e4fc <___vfiprintf_internal_r+0x938>
    e278:	da802217 	ldw	r10,136(sp)
    e27c:	d8001d85 	stb	zero,118(sp)
    e280:	50800204 	addi	r2,r10,8
    e284:	54800017 	ldw	r18,0(r10)
    e288:	54c00117 	ldw	r19,4(r10)
    e28c:	4802b416 	blt	r9,zero,ed60 <___vfiprintf_internal_r+0x119c>
    e290:	013fdfc4 	movi	r4,-129
    e294:	94c6b03a 	or	r3,r18,r19
    e298:	d8802215 	stw	r2,136(sp)
    e29c:	a128703a 	and	r20,r20,r4
    e2a0:	1800a226 	beq	r3,zero,e52c <___vfiprintf_internal_r+0x968>
    e2a4:	0039883a 	mov	fp,zero
    e2a8:	dd401a04 	addi	r21,sp,104
    e2ac:	9006d0fa 	srli	r3,r18,3
    e2b0:	9808977a 	slli	r4,r19,29
    e2b4:	9826d0fa 	srli	r19,r19,3
    e2b8:	948001cc 	andi	r18,r18,7
    e2bc:	90800c04 	addi	r2,r18,48
    e2c0:	ad7fffc4 	addi	r21,r21,-1
    e2c4:	20e4b03a 	or	r18,r4,r3
    e2c8:	a8800005 	stb	r2,0(r21)
    e2cc:	94c6b03a 	or	r3,r18,r19
    e2d0:	183ff61e 	bne	r3,zero,e2ac <__alt_mem_onchip_memory+0xf780e2ac>
    e2d4:	a0c0004c 	andi	r3,r20,1
    e2d8:	18005926 	beq	r3,zero,e440 <___vfiprintf_internal_r+0x87c>
    e2dc:	10803fcc 	andi	r2,r2,255
    e2e0:	1080201c 	xori	r2,r2,128
    e2e4:	10bfe004 	addi	r2,r2,-128
    e2e8:	00c00c04 	movi	r3,48
    e2ec:	10c05426 	beq	r2,r3,e440 <___vfiprintf_internal_r+0x87c>
    e2f0:	da801e17 	ldw	r10,120(sp)
    e2f4:	a8bfffc4 	addi	r2,r21,-1
    e2f8:	a8ffffc5 	stb	r3,-1(r21)
    e2fc:	50a7c83a 	sub	r19,r10,r2
    e300:	102b883a 	mov	r21,r2
    e304:	003f2f06 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    e308:	21003fcc 	andi	r4,r4,255
    e30c:	2003421e 	bne	r4,zero,f018 <___vfiprintf_internal_r+0x1454>
    e310:	00800074 	movhi	r2,1
    e314:	108da204 	addi	r2,r2,13960
    e318:	d8802615 	stw	r2,152(sp)
    e31c:	a080080c 	andi	r2,r20,32
    e320:	1000aa26 	beq	r2,zero,e5cc <___vfiprintf_internal_r+0xa08>
    e324:	da802217 	ldw	r10,136(sp)
    e328:	54800017 	ldw	r18,0(r10)
    e32c:	54c00117 	ldw	r19,4(r10)
    e330:	52800204 	addi	r10,r10,8
    e334:	da802215 	stw	r10,136(sp)
    e338:	a080004c 	andi	r2,r20,1
    e33c:	1001d226 	beq	r2,zero,ea88 <___vfiprintf_internal_r+0xec4>
    e340:	94c4b03a 	or	r2,r18,r19
    e344:	1002351e 	bne	r2,zero,ec1c <___vfiprintf_internal_r+0x1058>
    e348:	d8001d85 	stb	zero,118(sp)
    e34c:	48022216 	blt	r9,zero,ebd8 <___vfiprintf_internal_r+0x1014>
    e350:	00bfdfc4 	movi	r2,-129
    e354:	a0a8703a 	and	r20,r20,r2
    e358:	003f1506 	br	dfb0 <__alt_mem_onchip_memory+0xf780dfb0>
    e35c:	da802217 	ldw	r10,136(sp)
    e360:	04800044 	movi	r18,1
    e364:	d8001d85 	stb	zero,118(sp)
    e368:	50800017 	ldw	r2,0(r10)
    e36c:	52800104 	addi	r10,r10,4
    e370:	da802215 	stw	r10,136(sp)
    e374:	d8801005 	stb	r2,64(sp)
    e378:	9027883a 	mov	r19,r18
    e37c:	dd401004 	addi	r21,sp,64
    e380:	0013883a 	mov	r9,zero
    e384:	003f1706 	br	dfe4 <__alt_mem_onchip_memory+0xf780dfe4>
    e388:	21003fcc 	andi	r4,r4,255
    e38c:	2003201e 	bne	r4,zero,f010 <___vfiprintf_internal_r+0x144c>
    e390:	a080080c 	andi	r2,r20,32
    e394:	10004b26 	beq	r2,zero,e4c4 <___vfiprintf_internal_r+0x900>
    e398:	da802217 	ldw	r10,136(sp)
    e39c:	50800117 	ldw	r2,4(r10)
    e3a0:	54800017 	ldw	r18,0(r10)
    e3a4:	52800204 	addi	r10,r10,8
    e3a8:	da802215 	stw	r10,136(sp)
    e3ac:	1027883a 	mov	r19,r2
    e3b0:	10022c16 	blt	r2,zero,ec64 <___vfiprintf_internal_r+0x10a0>
    e3b4:	df001d83 	ldbu	fp,118(sp)
    e3b8:	48007216 	blt	r9,zero,e584 <___vfiprintf_internal_r+0x9c0>
    e3bc:	00ffdfc4 	movi	r3,-129
    e3c0:	94c4b03a 	or	r2,r18,r19
    e3c4:	a0e8703a 	and	r20,r20,r3
    e3c8:	1000cc26 	beq	r2,zero,e6fc <___vfiprintf_internal_r+0xb38>
    e3cc:	98021026 	beq	r19,zero,ec10 <___vfiprintf_internal_r+0x104c>
    e3d0:	dc402415 	stw	r17,144(sp)
    e3d4:	dc002515 	stw	r16,148(sp)
    e3d8:	9823883a 	mov	r17,r19
    e3dc:	9021883a 	mov	r16,r18
    e3e0:	dd401a04 	addi	r21,sp,104
    e3e4:	4825883a 	mov	r18,r9
    e3e8:	4027883a 	mov	r19,r8
    e3ec:	8009883a 	mov	r4,r16
    e3f0:	880b883a 	mov	r5,r17
    e3f4:	01800284 	movi	r6,10
    e3f8:	000f883a 	mov	r7,zero
    e3fc:	00100040 	call	10004 <__umoddi3>
    e400:	10800c04 	addi	r2,r2,48
    e404:	ad7fffc4 	addi	r21,r21,-1
    e408:	8009883a 	mov	r4,r16
    e40c:	880b883a 	mov	r5,r17
    e410:	a8800005 	stb	r2,0(r21)
    e414:	01800284 	movi	r6,10
    e418:	000f883a 	mov	r7,zero
    e41c:	000fa8c0 	call	fa8c <__udivdi3>
    e420:	1021883a 	mov	r16,r2
    e424:	10c4b03a 	or	r2,r2,r3
    e428:	1823883a 	mov	r17,r3
    e42c:	103fef1e 	bne	r2,zero,e3ec <__alt_mem_onchip_memory+0xf780e3ec>
    e430:	dc402417 	ldw	r17,144(sp)
    e434:	dc002517 	ldw	r16,148(sp)
    e438:	9013883a 	mov	r9,r18
    e43c:	9811883a 	mov	r8,r19
    e440:	da801e17 	ldw	r10,120(sp)
    e444:	5567c83a 	sub	r19,r10,r21
    e448:	003ede06 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    e44c:	38803fcc 	andi	r2,r7,255
    e450:	1080201c 	xori	r2,r2,128
    e454:	10bfe004 	addi	r2,r2,-128
    e458:	1002371e 	bne	r2,zero,ed38 <___vfiprintf_internal_r+0x1174>
    e45c:	01000044 	movi	r4,1
    e460:	01c00804 	movi	r7,32
    e464:	80c00007 	ldb	r3,0(r16)
    e468:	003e3506 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e46c:	a5000054 	ori	r20,r20,1
    e470:	80c00007 	ldb	r3,0(r16)
    e474:	003e3206 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e478:	a5002014 	ori	r20,r20,128
    e47c:	80c00007 	ldb	r3,0(r16)
    e480:	003e2f06 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e484:	8015883a 	mov	r10,r16
    e488:	0023883a 	mov	r17,zero
    e48c:	18bff404 	addi	r2,r3,-48
    e490:	50c00007 	ldb	r3,0(r10)
    e494:	8c4002a4 	muli	r17,r17,10
    e498:	84000044 	addi	r16,r16,1
    e49c:	8015883a 	mov	r10,r16
    e4a0:	1463883a 	add	r17,r2,r17
    e4a4:	18bff404 	addi	r2,r3,-48
    e4a8:	30bff92e 	bgeu	r6,r2,e490 <__alt_mem_onchip_memory+0xf780e490>
    e4ac:	003e2506 	br	dd44 <__alt_mem_onchip_memory+0xf780dd44>
    e4b0:	21003fcc 	andi	r4,r4,255
    e4b4:	2002d41e 	bne	r4,zero,f008 <___vfiprintf_internal_r+0x1444>
    e4b8:	a5000414 	ori	r20,r20,16
    e4bc:	a080080c 	andi	r2,r20,32
    e4c0:	103fb51e 	bne	r2,zero,e398 <__alt_mem_onchip_memory+0xf780e398>
    e4c4:	a080040c 	andi	r2,r20,16
    e4c8:	1001f826 	beq	r2,zero,ecac <___vfiprintf_internal_r+0x10e8>
    e4cc:	da802217 	ldw	r10,136(sp)
    e4d0:	54800017 	ldw	r18,0(r10)
    e4d4:	52800104 	addi	r10,r10,4
    e4d8:	da802215 	stw	r10,136(sp)
    e4dc:	9027d7fa 	srai	r19,r18,31
    e4e0:	9805883a 	mov	r2,r19
    e4e4:	003fb206 	br	e3b0 <__alt_mem_onchip_memory+0xf780e3b0>
    e4e8:	21003fcc 	andi	r4,r4,255
    e4ec:	2002c41e 	bne	r4,zero,f000 <___vfiprintf_internal_r+0x143c>
    e4f0:	a5000414 	ori	r20,r20,16
    e4f4:	a080080c 	andi	r2,r20,32
    e4f8:	103f5f1e 	bne	r2,zero,e278 <__alt_mem_onchip_memory+0xf780e278>
    e4fc:	a080040c 	andi	r2,r20,16
    e500:	10020f26 	beq	r2,zero,ed40 <___vfiprintf_internal_r+0x117c>
    e504:	da802217 	ldw	r10,136(sp)
    e508:	d8001d85 	stb	zero,118(sp)
    e50c:	0027883a 	mov	r19,zero
    e510:	50800104 	addi	r2,r10,4
    e514:	54800017 	ldw	r18,0(r10)
    e518:	48021116 	blt	r9,zero,ed60 <___vfiprintf_internal_r+0x119c>
    e51c:	00ffdfc4 	movi	r3,-129
    e520:	d8802215 	stw	r2,136(sp)
    e524:	a0e8703a 	and	r20,r20,r3
    e528:	903f5e1e 	bne	r18,zero,e2a4 <__alt_mem_onchip_memory+0xf780e2a4>
    e52c:	0039883a 	mov	fp,zero
    e530:	4802a626 	beq	r9,zero,efcc <___vfiprintf_internal_r+0x1408>
    e534:	0025883a 	mov	r18,zero
    e538:	0027883a 	mov	r19,zero
    e53c:	003f5a06 	br	e2a8 <__alt_mem_onchip_memory+0xf780e2a8>
    e540:	21003fcc 	andi	r4,r4,255
    e544:	20029f1e 	bne	r4,zero,efc4 <___vfiprintf_internal_r+0x1400>
    e548:	a5000414 	ori	r20,r20,16
    e54c:	a080080c 	andi	r2,r20,32
    e550:	10005e1e 	bne	r2,zero,e6cc <___vfiprintf_internal_r+0xb08>
    e554:	a080040c 	andi	r2,r20,16
    e558:	1001a21e 	bne	r2,zero,ebe4 <___vfiprintf_internal_r+0x1020>
    e55c:	a080100c 	andi	r2,r20,64
    e560:	d8001d85 	stb	zero,118(sp)
    e564:	da802217 	ldw	r10,136(sp)
    e568:	1002231e 	bne	r2,zero,edf8 <___vfiprintf_internal_r+0x1234>
    e56c:	50800104 	addi	r2,r10,4
    e570:	54800017 	ldw	r18,0(r10)
    e574:	0027883a 	mov	r19,zero
    e578:	4801a00e 	bge	r9,zero,ebfc <___vfiprintf_internal_r+0x1038>
    e57c:	d8802215 	stw	r2,136(sp)
    e580:	0039883a 	mov	fp,zero
    e584:	94c4b03a 	or	r2,r18,r19
    e588:	103f901e 	bne	r2,zero,e3cc <__alt_mem_onchip_memory+0xf780e3cc>
    e58c:	00800044 	movi	r2,1
    e590:	10803fcc 	andi	r2,r2,255
    e594:	00c00044 	movi	r3,1
    e598:	10c05926 	beq	r2,r3,e700 <___vfiprintf_internal_r+0xb3c>
    e59c:	00c00084 	movi	r3,2
    e5a0:	10ffe41e 	bne	r2,r3,e534 <__alt_mem_onchip_memory+0xf780e534>
    e5a4:	0025883a 	mov	r18,zero
    e5a8:	0027883a 	mov	r19,zero
    e5ac:	00013d06 	br	eaa4 <___vfiprintf_internal_r+0xee0>
    e5b0:	21003fcc 	andi	r4,r4,255
    e5b4:	2002811e 	bne	r4,zero,efbc <___vfiprintf_internal_r+0x13f8>
    e5b8:	00800074 	movhi	r2,1
    e5bc:	108d9d04 	addi	r2,r2,13940
    e5c0:	d8802615 	stw	r2,152(sp)
    e5c4:	a080080c 	andi	r2,r20,32
    e5c8:	103f561e 	bne	r2,zero,e324 <__alt_mem_onchip_memory+0xf780e324>
    e5cc:	a080040c 	andi	r2,r20,16
    e5d0:	1001d126 	beq	r2,zero,ed18 <___vfiprintf_internal_r+0x1154>
    e5d4:	da802217 	ldw	r10,136(sp)
    e5d8:	0027883a 	mov	r19,zero
    e5dc:	54800017 	ldw	r18,0(r10)
    e5e0:	52800104 	addi	r10,r10,4
    e5e4:	da802215 	stw	r10,136(sp)
    e5e8:	003f5306 	br	e338 <__alt_mem_onchip_memory+0xf780e338>
    e5ec:	da802217 	ldw	r10,136(sp)
    e5f0:	d8001d85 	stb	zero,118(sp)
    e5f4:	55400017 	ldw	r21,0(r10)
    e5f8:	50c00104 	addi	r3,r10,4
    e5fc:	a8024226 	beq	r21,zero,ef08 <___vfiprintf_internal_r+0x1344>
    e600:	48021816 	blt	r9,zero,ee64 <___vfiprintf_internal_r+0x12a0>
    e604:	480d883a 	mov	r6,r9
    e608:	000b883a 	mov	r5,zero
    e60c:	a809883a 	mov	r4,r21
    e610:	d8c02a15 	stw	r3,168(sp)
    e614:	da002b15 	stw	r8,172(sp)
    e618:	da402c15 	stw	r9,176(sp)
    e61c:	000bccc0 	call	bccc <memchr>
    e620:	d8c02a17 	ldw	r3,168(sp)
    e624:	da002b17 	ldw	r8,172(sp)
    e628:	da402c17 	ldw	r9,176(sp)
    e62c:	10024826 	beq	r2,zero,ef50 <___vfiprintf_internal_r+0x138c>
    e630:	1567c83a 	sub	r19,r2,r21
    e634:	df001d83 	ldbu	fp,118(sp)
    e638:	d8c02215 	stw	r3,136(sp)
    e63c:	0013883a 	mov	r9,zero
    e640:	003e6006 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    e644:	21003fcc 	andi	r4,r4,255
    e648:	203fc026 	beq	r4,zero,e54c <__alt_mem_onchip_memory+0xf780e54c>
    e64c:	d9c01d85 	stb	r7,118(sp)
    e650:	003fbe06 	br	e54c <__alt_mem_onchip_memory+0xf780e54c>
    e654:	da802217 	ldw	r10,136(sp)
    e658:	54400017 	ldw	r17,0(r10)
    e65c:	50800104 	addi	r2,r10,4
    e660:	883e3b16 	blt	r17,zero,df50 <__alt_mem_onchip_memory+0xf780df50>
    e664:	d8802215 	stw	r2,136(sp)
    e668:	80c00007 	ldb	r3,0(r16)
    e66c:	003db406 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e670:	01000044 	movi	r4,1
    e674:	01c00ac4 	movi	r7,43
    e678:	80c00007 	ldb	r3,0(r16)
    e67c:	003db006 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e680:	80c00007 	ldb	r3,0(r16)
    e684:	82800044 	addi	r10,r16,1
    e688:	1b423c26 	beq	r3,r13,ef7c <___vfiprintf_internal_r+0x13b8>
    e68c:	18bff404 	addi	r2,r3,-48
    e690:	0013883a 	mov	r9,zero
    e694:	30822b36 	bltu	r6,r2,ef44 <___vfiprintf_internal_r+0x1380>
    e698:	50c00007 	ldb	r3,0(r10)
    e69c:	4a4002a4 	muli	r9,r9,10
    e6a0:	54000044 	addi	r16,r10,1
    e6a4:	8015883a 	mov	r10,r16
    e6a8:	4893883a 	add	r9,r9,r2
    e6ac:	18bff404 	addi	r2,r3,-48
    e6b0:	30bff92e 	bgeu	r6,r2,e698 <__alt_mem_onchip_memory+0xf780e698>
    e6b4:	483da30e 	bge	r9,zero,dd44 <__alt_mem_onchip_memory+0xf780dd44>
    e6b8:	027fffc4 	movi	r9,-1
    e6bc:	003da106 	br	dd44 <__alt_mem_onchip_memory+0xf780dd44>
    e6c0:	a5001014 	ori	r20,r20,64
    e6c4:	80c00007 	ldb	r3,0(r16)
    e6c8:	003d9d06 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    e6cc:	da802217 	ldw	r10,136(sp)
    e6d0:	d8001d85 	stb	zero,118(sp)
    e6d4:	50c00204 	addi	r3,r10,8
    e6d8:	54800017 	ldw	r18,0(r10)
    e6dc:	54c00117 	ldw	r19,4(r10)
    e6e0:	4801ca16 	blt	r9,zero,ee0c <___vfiprintf_internal_r+0x1248>
    e6e4:	013fdfc4 	movi	r4,-129
    e6e8:	94c4b03a 	or	r2,r18,r19
    e6ec:	d8c02215 	stw	r3,136(sp)
    e6f0:	a128703a 	and	r20,r20,r4
    e6f4:	0039883a 	mov	fp,zero
    e6f8:	103f341e 	bne	r2,zero,e3cc <__alt_mem_onchip_memory+0xf780e3cc>
    e6fc:	483e2e26 	beq	r9,zero,dfb8 <__alt_mem_onchip_memory+0xf780dfb8>
    e700:	0025883a 	mov	r18,zero
    e704:	94800c04 	addi	r18,r18,48
    e708:	dc8019c5 	stb	r18,103(sp)
    e70c:	dcc02717 	ldw	r19,156(sp)
    e710:	dd4019c4 	addi	r21,sp,103
    e714:	003e2b06 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    e718:	21003fcc 	andi	r4,r4,255
    e71c:	2002361e 	bne	r4,zero,eff8 <___vfiprintf_internal_r+0x1434>
    e720:	1801c126 	beq	r3,zero,ee28 <___vfiprintf_internal_r+0x1264>
    e724:	04800044 	movi	r18,1
    e728:	d8c01005 	stb	r3,64(sp)
    e72c:	d8001d85 	stb	zero,118(sp)
    e730:	9027883a 	mov	r19,r18
    e734:	dd401004 	addi	r21,sp,64
    e738:	003f1106 	br	e380 <__alt_mem_onchip_memory+0xf780e380>
    e73c:	d9402117 	ldw	r5,132(sp)
    e740:	d9002017 	ldw	r4,128(sp)
    e744:	d9801a04 	addi	r6,sp,104
    e748:	d9c02b15 	stw	r7,172(sp)
    e74c:	dbc02a15 	stw	r15,168(sp)
    e750:	000dab00 	call	dab0 <__sprint_r.part.0>
    e754:	d9c02b17 	ldw	r7,172(sp)
    e758:	dbc02a17 	ldw	r15,168(sp)
    e75c:	10006d1e 	bne	r2,zero,e914 <___vfiprintf_internal_r+0xd50>
    e760:	d9801b17 	ldw	r6,108(sp)
    e764:	d8801c17 	ldw	r2,112(sp)
    e768:	d811883a 	mov	r8,sp
    e76c:	31400044 	addi	r5,r6,1
    e770:	003e3306 	br	e040 <__alt_mem_onchip_memory+0xf780e040>
    e774:	d9401b17 	ldw	r5,108(sp)
    e778:	d8801c17 	ldw	r2,112(sp)
    e77c:	29000044 	addi	r4,r5,1
    e780:	d8c01d87 	ldb	r3,118(sp)
    e784:	183e4d26 	beq	r3,zero,e0bc <__alt_mem_onchip_memory+0xf780e0bc>
    e788:	00c00044 	movi	r3,1
    e78c:	d9401d84 	addi	r5,sp,118
    e790:	10c5883a 	add	r2,r2,r3
    e794:	41400015 	stw	r5,0(r8)
    e798:	40c00115 	stw	r3,4(r8)
    e79c:	d8801c15 	stw	r2,112(sp)
    e7a0:	d9001b15 	stw	r4,108(sp)
    e7a4:	014001c4 	movi	r5,7
    e7a8:	2900a90e 	bge	r5,r4,ea50 <___vfiprintf_internal_r+0xe8c>
    e7ac:	1000da1e 	bne	r2,zero,eb18 <___vfiprintf_internal_r+0xf54>
    e7b0:	7000ab1e 	bne	r14,zero,ea60 <___vfiprintf_internal_r+0xe9c>
    e7b4:	000b883a 	mov	r5,zero
    e7b8:	1809883a 	mov	r4,r3
    e7bc:	d811883a 	mov	r8,sp
    e7c0:	00c02004 	movi	r3,128
    e7c4:	e0fe4d26 	beq	fp,r3,e0fc <__alt_mem_onchip_memory+0xf780e0fc>
    e7c8:	4cf9c83a 	sub	fp,r9,r19
    e7cc:	073e7b0e 	bge	zero,fp,e1bc <__alt_mem_onchip_memory+0xf780e1bc>
    e7d0:	01c00404 	movi	r7,16
    e7d4:	3f01900e 	bge	r7,fp,ee18 <___vfiprintf_internal_r+0x1254>
    e7d8:	00c00074 	movhi	r3,1
    e7dc:	18ce0204 	addi	r3,r3,14344
    e7e0:	d8c02415 	stw	r3,144(sp)
    e7e4:	034001c4 	movi	r13,7
    e7e8:	00000506 	br	e800 <___vfiprintf_internal_r+0xc3c>
    e7ec:	29000084 	addi	r4,r5,2
    e7f0:	42000204 	addi	r8,r8,8
    e7f4:	180b883a 	mov	r5,r3
    e7f8:	e73ffc04 	addi	fp,fp,-16
    e7fc:	3f000d0e 	bge	r7,fp,e834 <___vfiprintf_internal_r+0xc70>
    e800:	10800404 	addi	r2,r2,16
    e804:	28c00044 	addi	r3,r5,1
    e808:	45c00015 	stw	r23,0(r8)
    e80c:	41c00115 	stw	r7,4(r8)
    e810:	d8801c15 	stw	r2,112(sp)
    e814:	d8c01b15 	stw	r3,108(sp)
    e818:	68fff40e 	bge	r13,r3,e7ec <__alt_mem_onchip_memory+0xf780e7ec>
    e81c:	1000101e 	bne	r2,zero,e860 <___vfiprintf_internal_r+0xc9c>
    e820:	e73ffc04 	addi	fp,fp,-16
    e824:	01000044 	movi	r4,1
    e828:	000b883a 	mov	r5,zero
    e82c:	d811883a 	mov	r8,sp
    e830:	3f3ff316 	blt	r7,fp,e800 <__alt_mem_onchip_memory+0xf780e800>
    e834:	da802417 	ldw	r10,144(sp)
    e838:	1705883a 	add	r2,r2,fp
    e83c:	47000115 	stw	fp,4(r8)
    e840:	42800015 	stw	r10,0(r8)
    e844:	d8801c15 	stw	r2,112(sp)
    e848:	d9001b15 	stw	r4,108(sp)
    e84c:	00c001c4 	movi	r3,7
    e850:	19003616 	blt	r3,r4,e92c <___vfiprintf_internal_r+0xd68>
    e854:	42000204 	addi	r8,r8,8
    e858:	21000044 	addi	r4,r4,1
    e85c:	003e5706 	br	e1bc <__alt_mem_onchip_memory+0xf780e1bc>
    e860:	d9402117 	ldw	r5,132(sp)
    e864:	d9002017 	ldw	r4,128(sp)
    e868:	d9801a04 	addi	r6,sp,104
    e86c:	d9c02b15 	stw	r7,172(sp)
    e870:	db402a15 	stw	r13,168(sp)
    e874:	000dab00 	call	dab0 <__sprint_r.part.0>
    e878:	d9c02b17 	ldw	r7,172(sp)
    e87c:	db402a17 	ldw	r13,168(sp)
    e880:	1000241e 	bne	r2,zero,e914 <___vfiprintf_internal_r+0xd50>
    e884:	d9401b17 	ldw	r5,108(sp)
    e888:	d8801c17 	ldw	r2,112(sp)
    e88c:	d811883a 	mov	r8,sp
    e890:	29000044 	addi	r4,r5,1
    e894:	003fd806 	br	e7f8 <__alt_mem_onchip_memory+0xf780e7f8>
    e898:	d9401b17 	ldw	r5,108(sp)
    e89c:	00c00074 	movhi	r3,1
    e8a0:	18ce0604 	addi	r3,r3,14360
    e8a4:	d8c02415 	stw	r3,144(sp)
    e8a8:	29400044 	addi	r5,r5,1
    e8ac:	d8c02417 	ldw	r3,144(sp)
    e8b0:	14c5883a 	add	r2,r2,r19
    e8b4:	44c00115 	stw	r19,4(r8)
    e8b8:	40c00015 	stw	r3,0(r8)
    e8bc:	d8801c15 	stw	r2,112(sp)
    e8c0:	d9401b15 	stw	r5,108(sp)
    e8c4:	00c001c4 	movi	r3,7
    e8c8:	1940070e 	bge	r3,r5,e8e8 <___vfiprintf_internal_r+0xd24>
    e8cc:	103e4826 	beq	r2,zero,e1f0 <__alt_mem_onchip_memory+0xf780e1f0>
    e8d0:	d9402117 	ldw	r5,132(sp)
    e8d4:	d9002017 	ldw	r4,128(sp)
    e8d8:	d9801a04 	addi	r6,sp,104
    e8dc:	000dab00 	call	dab0 <__sprint_r.part.0>
    e8e0:	10000c1e 	bne	r2,zero,e914 <___vfiprintf_internal_r+0xd50>
    e8e4:	d8801c17 	ldw	r2,112(sp)
    e8e8:	8c80010e 	bge	r17,r18,e8f0 <___vfiprintf_internal_r+0xd2c>
    e8ec:	9023883a 	mov	r17,r18
    e8f0:	da802317 	ldw	r10,140(sp)
    e8f4:	5455883a 	add	r10,r10,r17
    e8f8:	da802315 	stw	r10,140(sp)
    e8fc:	103e4126 	beq	r2,zero,e204 <__alt_mem_onchip_memory+0xf780e204>
    e900:	d9402117 	ldw	r5,132(sp)
    e904:	d9002017 	ldw	r4,128(sp)
    e908:	d9801a04 	addi	r6,sp,104
    e90c:	000dab00 	call	dab0 <__sprint_r.part.0>
    e910:	103e3c26 	beq	r2,zero,e204 <__alt_mem_onchip_memory+0xf780e204>
    e914:	dd002117 	ldw	r20,132(sp)
    e918:	a080030b 	ldhu	r2,12(r20)
    e91c:	1080100c 	andi	r2,r2,64
    e920:	1001231e 	bne	r2,zero,edb0 <___vfiprintf_internal_r+0x11ec>
    e924:	d8802317 	ldw	r2,140(sp)
    e928:	003d7b06 	br	df18 <__alt_mem_onchip_memory+0xf780df18>
    e92c:	1000991e 	bne	r2,zero,eb94 <___vfiprintf_internal_r+0xfd0>
    e930:	00c00044 	movi	r3,1
    e934:	9805883a 	mov	r2,r19
    e938:	dd400015 	stw	r21,0(sp)
    e93c:	dcc00115 	stw	r19,4(sp)
    e940:	dcc01c15 	stw	r19,112(sp)
    e944:	d8c01b15 	stw	r3,108(sp)
    e948:	d811883a 	mov	r8,sp
    e94c:	42000204 	addi	r8,r8,8
    e950:	a2c0010c 	andi	r11,r20,4
    e954:	583fe426 	beq	r11,zero,e8e8 <__alt_mem_onchip_memory+0xf780e8e8>
    e958:	8ca7c83a 	sub	r19,r17,r18
    e95c:	04ffe20e 	bge	zero,r19,e8e8 <__alt_mem_onchip_memory+0xf780e8e8>
    e960:	01c00404 	movi	r7,16
    e964:	3cffcc0e 	bge	r7,r19,e898 <__alt_mem_onchip_memory+0xf780e898>
    e968:	02800074 	movhi	r10,1
    e96c:	528e0604 	addi	r10,r10,14360
    e970:	d9001b17 	ldw	r4,108(sp)
    e974:	da802415 	stw	r10,144(sp)
    e978:	382b883a 	mov	r21,r7
    e97c:	050001c4 	movi	r20,7
    e980:	df002017 	ldw	fp,128(sp)
    e984:	00000506 	br	e99c <___vfiprintf_internal_r+0xdd8>
    e988:	21400084 	addi	r5,r4,2
    e98c:	42000204 	addi	r8,r8,8
    e990:	1809883a 	mov	r4,r3
    e994:	9cfffc04 	addi	r19,r19,-16
    e998:	acffc40e 	bge	r21,r19,e8ac <__alt_mem_onchip_memory+0xf780e8ac>
    e99c:	10800404 	addi	r2,r2,16
    e9a0:	20c00044 	addi	r3,r4,1
    e9a4:	45800015 	stw	r22,0(r8)
    e9a8:	45400115 	stw	r21,4(r8)
    e9ac:	d8801c15 	stw	r2,112(sp)
    e9b0:	d8c01b15 	stw	r3,108(sp)
    e9b4:	a0fff40e 	bge	r20,r3,e988 <__alt_mem_onchip_memory+0xf780e988>
    e9b8:	1000041e 	bne	r2,zero,e9cc <___vfiprintf_internal_r+0xe08>
    e9bc:	01400044 	movi	r5,1
    e9c0:	0009883a 	mov	r4,zero
    e9c4:	d811883a 	mov	r8,sp
    e9c8:	003ff206 	br	e994 <__alt_mem_onchip_memory+0xf780e994>
    e9cc:	d9402117 	ldw	r5,132(sp)
    e9d0:	d9801a04 	addi	r6,sp,104
    e9d4:	e009883a 	mov	r4,fp
    e9d8:	000dab00 	call	dab0 <__sprint_r.part.0>
    e9dc:	103fcd1e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    e9e0:	d9001b17 	ldw	r4,108(sp)
    e9e4:	d8801c17 	ldw	r2,112(sp)
    e9e8:	d811883a 	mov	r8,sp
    e9ec:	21400044 	addi	r5,r4,1
    e9f0:	003fe806 	br	e994 <__alt_mem_onchip_memory+0xf780e994>
    e9f4:	d9402117 	ldw	r5,132(sp)
    e9f8:	d9002017 	ldw	r4,128(sp)
    e9fc:	d9801a04 	addi	r6,sp,104
    ea00:	d9c02b15 	stw	r7,172(sp)
    ea04:	db402a15 	stw	r13,168(sp)
    ea08:	000dab00 	call	dab0 <__sprint_r.part.0>
    ea0c:	d9c02b17 	ldw	r7,172(sp)
    ea10:	db402a17 	ldw	r13,168(sp)
    ea14:	103fbf1e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    ea18:	d9401b17 	ldw	r5,108(sp)
    ea1c:	d8801c17 	ldw	r2,112(sp)
    ea20:	d811883a 	mov	r8,sp
    ea24:	29800044 	addi	r6,r5,1
    ea28:	003dc406 	br	e13c <__alt_mem_onchip_memory+0xf780e13c>
    ea2c:	1000d21e 	bne	r2,zero,ed78 <___vfiprintf_internal_r+0x11b4>
    ea30:	d8c01d87 	ldb	r3,118(sp)
    ea34:	18009526 	beq	r3,zero,ec8c <___vfiprintf_internal_r+0x10c8>
    ea38:	00800044 	movi	r2,1
    ea3c:	d8c01d84 	addi	r3,sp,118
    ea40:	1009883a 	mov	r4,r2
    ea44:	d8c00015 	stw	r3,0(sp)
    ea48:	d8800115 	stw	r2,4(sp)
    ea4c:	d811883a 	mov	r8,sp
    ea50:	200b883a 	mov	r5,r4
    ea54:	42000204 	addi	r8,r8,8
    ea58:	21000044 	addi	r4,r4,1
    ea5c:	003d9706 	br	e0bc <__alt_mem_onchip_memory+0xf780e0bc>
    ea60:	d9001d04 	addi	r4,sp,116
    ea64:	00800084 	movi	r2,2
    ea68:	d9000015 	stw	r4,0(sp)
    ea6c:	d8800115 	stw	r2,4(sp)
    ea70:	1809883a 	mov	r4,r3
    ea74:	d811883a 	mov	r8,sp
    ea78:	200b883a 	mov	r5,r4
    ea7c:	42000204 	addi	r8,r8,8
    ea80:	21000044 	addi	r4,r4,1
    ea84:	003f4e06 	br	e7c0 <__alt_mem_onchip_memory+0xf780e7c0>
    ea88:	d8001d85 	stb	zero,118(sp)
    ea8c:	48005016 	blt	r9,zero,ebd0 <___vfiprintf_internal_r+0x100c>
    ea90:	00ffdfc4 	movi	r3,-129
    ea94:	94c4b03a 	or	r2,r18,r19
    ea98:	a0e8703a 	and	r20,r20,r3
    ea9c:	103d4426 	beq	r2,zero,dfb0 <__alt_mem_onchip_memory+0xf780dfb0>
    eaa0:	0039883a 	mov	fp,zero
    eaa4:	d9002617 	ldw	r4,152(sp)
    eaa8:	dd401a04 	addi	r21,sp,104
    eaac:	908003cc 	andi	r2,r18,15
    eab0:	9806973a 	slli	r3,r19,28
    eab4:	2085883a 	add	r2,r4,r2
    eab8:	9024d13a 	srli	r18,r18,4
    eabc:	10800003 	ldbu	r2,0(r2)
    eac0:	9826d13a 	srli	r19,r19,4
    eac4:	ad7fffc4 	addi	r21,r21,-1
    eac8:	1ca4b03a 	or	r18,r3,r18
    eacc:	a8800005 	stb	r2,0(r21)
    ead0:	94c4b03a 	or	r2,r18,r19
    ead4:	103ff51e 	bne	r2,zero,eaac <__alt_mem_onchip_memory+0xf780eaac>
    ead8:	003e5906 	br	e440 <__alt_mem_onchip_memory+0xf780e440>
    eadc:	d9402117 	ldw	r5,132(sp)
    eae0:	d9002017 	ldw	r4,128(sp)
    eae4:	d9801a04 	addi	r6,sp,104
    eae8:	000dab00 	call	dab0 <__sprint_r.part.0>
    eaec:	103f891e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    eaf0:	d8801c17 	ldw	r2,112(sp)
    eaf4:	d811883a 	mov	r8,sp
    eaf8:	003f9506 	br	e950 <__alt_mem_onchip_memory+0xf780e950>
    eafc:	d9402117 	ldw	r5,132(sp)
    eb00:	d9002017 	ldw	r4,128(sp)
    eb04:	d9801a04 	addi	r6,sp,104
    eb08:	000dab00 	call	dab0 <__sprint_r.part.0>
    eb0c:	103f811e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    eb10:	d811883a 	mov	r8,sp
    eb14:	003ced06 	br	decc <__alt_mem_onchip_memory+0xf780decc>
    eb18:	d9402117 	ldw	r5,132(sp)
    eb1c:	d9002017 	ldw	r4,128(sp)
    eb20:	d9801a04 	addi	r6,sp,104
    eb24:	da402c15 	stw	r9,176(sp)
    eb28:	db802a15 	stw	r14,168(sp)
    eb2c:	000dab00 	call	dab0 <__sprint_r.part.0>
    eb30:	da402c17 	ldw	r9,176(sp)
    eb34:	db802a17 	ldw	r14,168(sp)
    eb38:	103f761e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    eb3c:	d9401b17 	ldw	r5,108(sp)
    eb40:	d8801c17 	ldw	r2,112(sp)
    eb44:	d811883a 	mov	r8,sp
    eb48:	29000044 	addi	r4,r5,1
    eb4c:	003d5b06 	br	e0bc <__alt_mem_onchip_memory+0xf780e0bc>
    eb50:	d9402117 	ldw	r5,132(sp)
    eb54:	d9002017 	ldw	r4,128(sp)
    eb58:	d9801a04 	addi	r6,sp,104
    eb5c:	da402c15 	stw	r9,176(sp)
    eb60:	000dab00 	call	dab0 <__sprint_r.part.0>
    eb64:	da402c17 	ldw	r9,176(sp)
    eb68:	103f6a1e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    eb6c:	d9401b17 	ldw	r5,108(sp)
    eb70:	d8801c17 	ldw	r2,112(sp)
    eb74:	d811883a 	mov	r8,sp
    eb78:	29000044 	addi	r4,r5,1
    eb7c:	003f1006 	br	e7c0 <__alt_mem_onchip_memory+0xf780e7c0>
    eb80:	1000c31e 	bne	r2,zero,ee90 <___vfiprintf_internal_r+0x12cc>
    eb84:	01000044 	movi	r4,1
    eb88:	000b883a 	mov	r5,zero
    eb8c:	d811883a 	mov	r8,sp
    eb90:	003f0d06 	br	e7c8 <__alt_mem_onchip_memory+0xf780e7c8>
    eb94:	d9402117 	ldw	r5,132(sp)
    eb98:	d9002017 	ldw	r4,128(sp)
    eb9c:	d9801a04 	addi	r6,sp,104
    eba0:	000dab00 	call	dab0 <__sprint_r.part.0>
    eba4:	103f5b1e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    eba8:	d9001b17 	ldw	r4,108(sp)
    ebac:	d8801c17 	ldw	r2,112(sp)
    ebb0:	d811883a 	mov	r8,sp
    ebb4:	21000044 	addi	r4,r4,1
    ebb8:	003d8006 	br	e1bc <__alt_mem_onchip_memory+0xf780e1bc>
    ebbc:	01000074 	movhi	r4,1
    ebc0:	210da204 	addi	r4,r4,13960
    ebc4:	d9002615 	stw	r4,152(sp)
    ebc8:	d8c02215 	stw	r3,136(sp)
    ebcc:	1029883a 	mov	r20,r2
    ebd0:	94c4b03a 	or	r2,r18,r19
    ebd4:	103fb21e 	bne	r2,zero,eaa0 <__alt_mem_onchip_memory+0xf780eaa0>
    ebd8:	0039883a 	mov	fp,zero
    ebdc:	00800084 	movi	r2,2
    ebe0:	003e6b06 	br	e590 <__alt_mem_onchip_memory+0xf780e590>
    ebe4:	da802217 	ldw	r10,136(sp)
    ebe8:	d8001d85 	stb	zero,118(sp)
    ebec:	0027883a 	mov	r19,zero
    ebf0:	50800104 	addi	r2,r10,4
    ebf4:	54800017 	ldw	r18,0(r10)
    ebf8:	483e6016 	blt	r9,zero,e57c <__alt_mem_onchip_memory+0xf780e57c>
    ebfc:	00ffdfc4 	movi	r3,-129
    ec00:	d8802215 	stw	r2,136(sp)
    ec04:	a0e8703a 	and	r20,r20,r3
    ec08:	0039883a 	mov	fp,zero
    ec0c:	903ebb26 	beq	r18,zero,e6fc <__alt_mem_onchip_memory+0xf780e6fc>
    ec10:	00800244 	movi	r2,9
    ec14:	14bdee36 	bltu	r2,r18,e3d0 <__alt_mem_onchip_memory+0xf780e3d0>
    ec18:	003eba06 	br	e704 <__alt_mem_onchip_memory+0xf780e704>
    ec1c:	00800c04 	movi	r2,48
    ec20:	d8c01d45 	stb	r3,117(sp)
    ec24:	d8801d05 	stb	r2,116(sp)
    ec28:	d8001d85 	stb	zero,118(sp)
    ec2c:	a0c00094 	ori	r3,r20,2
    ec30:	4800a916 	blt	r9,zero,eed8 <___vfiprintf_internal_r+0x1314>
    ec34:	00bfdfc4 	movi	r2,-129
    ec38:	a096703a 	and	r11,r20,r2
    ec3c:	5d000094 	ori	r20,r11,2
    ec40:	0039883a 	mov	fp,zero
    ec44:	003f9706 	br	eaa4 <__alt_mem_onchip_memory+0xf780eaa4>
    ec48:	8025883a 	mov	r18,r16
    ec4c:	003c2e06 	br	dd08 <__alt_mem_onchip_memory+0xf780dd08>
    ec50:	00800074 	movhi	r2,1
    ec54:	108da204 	addi	r2,r2,13960
    ec58:	0039883a 	mov	fp,zero
    ec5c:	d8802615 	stw	r2,152(sp)
    ec60:	003f9006 	br	eaa4 <__alt_mem_onchip_memory+0xf780eaa4>
    ec64:	04a5c83a 	sub	r18,zero,r18
    ec68:	07000b44 	movi	fp,45
    ec6c:	9004c03a 	cmpne	r2,r18,zero
    ec70:	04e7c83a 	sub	r19,zero,r19
    ec74:	df001d85 	stb	fp,118(sp)
    ec78:	98a7c83a 	sub	r19,r19,r2
    ec7c:	48009f16 	blt	r9,zero,eefc <___vfiprintf_internal_r+0x1338>
    ec80:	00bfdfc4 	movi	r2,-129
    ec84:	a0a8703a 	and	r20,r20,r2
    ec88:	003dd006 	br	e3cc <__alt_mem_onchip_memory+0xf780e3cc>
    ec8c:	70004c26 	beq	r14,zero,edc0 <___vfiprintf_internal_r+0x11fc>
    ec90:	00800084 	movi	r2,2
    ec94:	d8c01d04 	addi	r3,sp,116
    ec98:	d8c00015 	stw	r3,0(sp)
    ec9c:	d8800115 	stw	r2,4(sp)
    eca0:	01000044 	movi	r4,1
    eca4:	d811883a 	mov	r8,sp
    eca8:	003f7306 	br	ea78 <__alt_mem_onchip_memory+0xf780ea78>
    ecac:	a080100c 	andi	r2,r20,64
    ecb0:	da802217 	ldw	r10,136(sp)
    ecb4:	103e0626 	beq	r2,zero,e4d0 <__alt_mem_onchip_memory+0xf780e4d0>
    ecb8:	5480000f 	ldh	r18,0(r10)
    ecbc:	52800104 	addi	r10,r10,4
    ecc0:	da802215 	stw	r10,136(sp)
    ecc4:	9027d7fa 	srai	r19,r18,31
    ecc8:	9805883a 	mov	r2,r19
    eccc:	003db806 	br	e3b0 <__alt_mem_onchip_memory+0xf780e3b0>
    ecd0:	a080040c 	andi	r2,r20,16
    ecd4:	1000091e 	bne	r2,zero,ecfc <___vfiprintf_internal_r+0x1138>
    ecd8:	a2c0100c 	andi	r11,r20,64
    ecdc:	58000726 	beq	r11,zero,ecfc <___vfiprintf_internal_r+0x1138>
    ece0:	da802217 	ldw	r10,136(sp)
    ece4:	50800017 	ldw	r2,0(r10)
    ece8:	52800104 	addi	r10,r10,4
    ecec:	da802215 	stw	r10,136(sp)
    ecf0:	da802317 	ldw	r10,140(sp)
    ecf4:	1280000d 	sth	r10,0(r2)
    ecf8:	003be706 	br	dc98 <__alt_mem_onchip_memory+0xf780dc98>
    ecfc:	da802217 	ldw	r10,136(sp)
    ed00:	50800017 	ldw	r2,0(r10)
    ed04:	52800104 	addi	r10,r10,4
    ed08:	da802215 	stw	r10,136(sp)
    ed0c:	da802317 	ldw	r10,140(sp)
    ed10:	12800015 	stw	r10,0(r2)
    ed14:	003be006 	br	dc98 <__alt_mem_onchip_memory+0xf780dc98>
    ed18:	a080100c 	andi	r2,r20,64
    ed1c:	da802217 	ldw	r10,136(sp)
    ed20:	10003026 	beq	r2,zero,ede4 <___vfiprintf_internal_r+0x1220>
    ed24:	5480000b 	ldhu	r18,0(r10)
    ed28:	52800104 	addi	r10,r10,4
    ed2c:	0027883a 	mov	r19,zero
    ed30:	da802215 	stw	r10,136(sp)
    ed34:	003d8006 	br	e338 <__alt_mem_onchip_memory+0xf780e338>
    ed38:	80c00007 	ldb	r3,0(r16)
    ed3c:	003c0006 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    ed40:	a080100c 	andi	r2,r20,64
    ed44:	d8001d85 	stb	zero,118(sp)
    ed48:	da802217 	ldw	r10,136(sp)
    ed4c:	1000201e 	bne	r2,zero,edd0 <___vfiprintf_internal_r+0x120c>
    ed50:	50800104 	addi	r2,r10,4
    ed54:	54800017 	ldw	r18,0(r10)
    ed58:	0027883a 	mov	r19,zero
    ed5c:	483def0e 	bge	r9,zero,e51c <__alt_mem_onchip_memory+0xf780e51c>
    ed60:	94c6b03a 	or	r3,r18,r19
    ed64:	d8802215 	stw	r2,136(sp)
    ed68:	183d4e1e 	bne	r3,zero,e2a4 <__alt_mem_onchip_memory+0xf780e2a4>
    ed6c:	0039883a 	mov	fp,zero
    ed70:	0005883a 	mov	r2,zero
    ed74:	003e0606 	br	e590 <__alt_mem_onchip_memory+0xf780e590>
    ed78:	d9402117 	ldw	r5,132(sp)
    ed7c:	d9002017 	ldw	r4,128(sp)
    ed80:	d9801a04 	addi	r6,sp,104
    ed84:	da402c15 	stw	r9,176(sp)
    ed88:	db802a15 	stw	r14,168(sp)
    ed8c:	000dab00 	call	dab0 <__sprint_r.part.0>
    ed90:	da402c17 	ldw	r9,176(sp)
    ed94:	db802a17 	ldw	r14,168(sp)
    ed98:	103ede1e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    ed9c:	d9401b17 	ldw	r5,108(sp)
    eda0:	d8801c17 	ldw	r2,112(sp)
    eda4:	d811883a 	mov	r8,sp
    eda8:	29000044 	addi	r4,r5,1
    edac:	003e7406 	br	e780 <__alt_mem_onchip_memory+0xf780e780>
    edb0:	00bfffc4 	movi	r2,-1
    edb4:	003c5806 	br	df18 <__alt_mem_onchip_memory+0xf780df18>
    edb8:	d811883a 	mov	r8,sp
    edbc:	003ee806 	br	e960 <__alt_mem_onchip_memory+0xf780e960>
    edc0:	000b883a 	mov	r5,zero
    edc4:	01000044 	movi	r4,1
    edc8:	d811883a 	mov	r8,sp
    edcc:	003e7c06 	br	e7c0 <__alt_mem_onchip_memory+0xf780e7c0>
    edd0:	50800104 	addi	r2,r10,4
    edd4:	5480000b 	ldhu	r18,0(r10)
    edd8:	0027883a 	mov	r19,zero
    eddc:	483dcf0e 	bge	r9,zero,e51c <__alt_mem_onchip_memory+0xf780e51c>
    ede0:	003fdf06 	br	ed60 <__alt_mem_onchip_memory+0xf780ed60>
    ede4:	54800017 	ldw	r18,0(r10)
    ede8:	52800104 	addi	r10,r10,4
    edec:	0027883a 	mov	r19,zero
    edf0:	da802215 	stw	r10,136(sp)
    edf4:	003d5006 	br	e338 <__alt_mem_onchip_memory+0xf780e338>
    edf8:	50800104 	addi	r2,r10,4
    edfc:	5480000b 	ldhu	r18,0(r10)
    ee00:	0027883a 	mov	r19,zero
    ee04:	483f7d0e 	bge	r9,zero,ebfc <__alt_mem_onchip_memory+0xf780ebfc>
    ee08:	003ddc06 	br	e57c <__alt_mem_onchip_memory+0xf780e57c>
    ee0c:	d8c02215 	stw	r3,136(sp)
    ee10:	0039883a 	mov	fp,zero
    ee14:	003ddb06 	br	e584 <__alt_mem_onchip_memory+0xf780e584>
    ee18:	02800074 	movhi	r10,1
    ee1c:	528e0204 	addi	r10,r10,14344
    ee20:	da802415 	stw	r10,144(sp)
    ee24:	003e8306 	br	e834 <__alt_mem_onchip_memory+0xf780e834>
    ee28:	d8801c17 	ldw	r2,112(sp)
    ee2c:	dd002117 	ldw	r20,132(sp)
    ee30:	103eb926 	beq	r2,zero,e918 <__alt_mem_onchip_memory+0xf780e918>
    ee34:	d9002017 	ldw	r4,128(sp)
    ee38:	d9801a04 	addi	r6,sp,104
    ee3c:	a00b883a 	mov	r5,r20
    ee40:	000dab00 	call	dab0 <__sprint_r.part.0>
    ee44:	003eb406 	br	e918 <__alt_mem_onchip_memory+0xf780e918>
    ee48:	80c00043 	ldbu	r3,1(r16)
    ee4c:	a5000814 	ori	r20,r20,32
    ee50:	84000044 	addi	r16,r16,1
    ee54:	18c03fcc 	andi	r3,r3,255
    ee58:	18c0201c 	xori	r3,r3,128
    ee5c:	18ffe004 	addi	r3,r3,-128
    ee60:	003bb706 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    ee64:	a809883a 	mov	r4,r21
    ee68:	d8c02a15 	stw	r3,168(sp)
    ee6c:	da002b15 	stw	r8,172(sp)
    ee70:	00063180 	call	6318 <strlen>
    ee74:	d8c02a17 	ldw	r3,168(sp)
    ee78:	1027883a 	mov	r19,r2
    ee7c:	df001d83 	ldbu	fp,118(sp)
    ee80:	d8c02215 	stw	r3,136(sp)
    ee84:	0013883a 	mov	r9,zero
    ee88:	da002b17 	ldw	r8,172(sp)
    ee8c:	003c4d06 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    ee90:	d9402117 	ldw	r5,132(sp)
    ee94:	d9002017 	ldw	r4,128(sp)
    ee98:	d9801a04 	addi	r6,sp,104
    ee9c:	da402c15 	stw	r9,176(sp)
    eea0:	000dab00 	call	dab0 <__sprint_r.part.0>
    eea4:	da402c17 	ldw	r9,176(sp)
    eea8:	103e9a1e 	bne	r2,zero,e914 <__alt_mem_onchip_memory+0xf780e914>
    eeac:	d9401b17 	ldw	r5,108(sp)
    eeb0:	d8801c17 	ldw	r2,112(sp)
    eeb4:	d811883a 	mov	r8,sp
    eeb8:	29000044 	addi	r4,r5,1
    eebc:	003e4206 	br	e7c8 <__alt_mem_onchip_memory+0xf780e7c8>
    eec0:	d9401b17 	ldw	r5,108(sp)
    eec4:	01000074 	movhi	r4,1
    eec8:	210e0604 	addi	r4,r4,14360
    eecc:	d9002415 	stw	r4,144(sp)
    eed0:	29400044 	addi	r5,r5,1
    eed4:	003c6d06 	br	e08c <__alt_mem_onchip_memory+0xf780e08c>
    eed8:	0039883a 	mov	fp,zero
    eedc:	00800084 	movi	r2,2
    eee0:	10803fcc 	andi	r2,r2,255
    eee4:	01000044 	movi	r4,1
    eee8:	11001e26 	beq	r2,r4,ef64 <___vfiprintf_internal_r+0x13a0>
    eeec:	01000084 	movi	r4,2
    eef0:	11001e1e 	bne	r2,r4,ef6c <___vfiprintf_internal_r+0x13a8>
    eef4:	1829883a 	mov	r20,r3
    eef8:	003eea06 	br	eaa4 <__alt_mem_onchip_memory+0xf780eaa4>
    eefc:	a007883a 	mov	r3,r20
    ef00:	00800044 	movi	r2,1
    ef04:	003ff606 	br	eee0 <__alt_mem_onchip_memory+0xf780eee0>
    ef08:	00800184 	movi	r2,6
    ef0c:	1240012e 	bgeu	r2,r9,ef14 <___vfiprintf_internal_r+0x1350>
    ef10:	1013883a 	mov	r9,r2
    ef14:	4827883a 	mov	r19,r9
    ef18:	4825883a 	mov	r18,r9
    ef1c:	48001516 	blt	r9,zero,ef74 <___vfiprintf_internal_r+0x13b0>
    ef20:	05400074 	movhi	r21,1
    ef24:	d8c02215 	stw	r3,136(sp)
    ef28:	ad4da704 	addi	r21,r21,13980
    ef2c:	003d1406 	br	e380 <__alt_mem_onchip_memory+0xf780e380>
    ef30:	02800074 	movhi	r10,1
    ef34:	528e0204 	addi	r10,r10,14344
    ef38:	da802415 	stw	r10,144(sp)
    ef3c:	200d883a 	mov	r6,r4
    ef40:	003c9106 	br	e188 <__alt_mem_onchip_memory+0xf780e188>
    ef44:	5021883a 	mov	r16,r10
    ef48:	0013883a 	mov	r9,zero
    ef4c:	003b7d06 	br	dd44 <__alt_mem_onchip_memory+0xf780dd44>
    ef50:	4827883a 	mov	r19,r9
    ef54:	df001d83 	ldbu	fp,118(sp)
    ef58:	d8c02215 	stw	r3,136(sp)
    ef5c:	0013883a 	mov	r9,zero
    ef60:	003c1806 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    ef64:	1829883a 	mov	r20,r3
    ef68:	003d1806 	br	e3cc <__alt_mem_onchip_memory+0xf780e3cc>
    ef6c:	1829883a 	mov	r20,r3
    ef70:	003ccd06 	br	e2a8 <__alt_mem_onchip_memory+0xf780e2a8>
    ef74:	0025883a 	mov	r18,zero
    ef78:	003fe906 	br	ef20 <__alt_mem_onchip_memory+0xf780ef20>
    ef7c:	d8802217 	ldw	r2,136(sp)
    ef80:	80c00043 	ldbu	r3,1(r16)
    ef84:	5021883a 	mov	r16,r10
    ef88:	12400017 	ldw	r9,0(r2)
    ef8c:	10800104 	addi	r2,r2,4
    ef90:	d8802215 	stw	r2,136(sp)
    ef94:	483faf0e 	bge	r9,zero,ee54 <__alt_mem_onchip_memory+0xf780ee54>
    ef98:	18c03fcc 	andi	r3,r3,255
    ef9c:	18c0201c 	xori	r3,r3,128
    efa0:	027fffc4 	movi	r9,-1
    efa4:	18ffe004 	addi	r3,r3,-128
    efa8:	003b6506 	br	dd40 <__alt_mem_onchip_memory+0xf780dd40>
    efac:	d9c01d85 	stb	r7,118(sp)
    efb0:	003ca006 	br	e234 <__alt_mem_onchip_memory+0xf780e234>
    efb4:	d9c01d85 	stb	r7,118(sp)
    efb8:	003cad06 	br	e270 <__alt_mem_onchip_memory+0xf780e270>
    efbc:	d9c01d85 	stb	r7,118(sp)
    efc0:	003d7d06 	br	e5b8 <__alt_mem_onchip_memory+0xf780e5b8>
    efc4:	d9c01d85 	stb	r7,118(sp)
    efc8:	003d5f06 	br	e548 <__alt_mem_onchip_memory+0xf780e548>
    efcc:	a080004c 	andi	r2,r20,1
    efd0:	0039883a 	mov	fp,zero
    efd4:	10000526 	beq	r2,zero,efec <___vfiprintf_internal_r+0x1428>
    efd8:	00800c04 	movi	r2,48
    efdc:	d88019c5 	stb	r2,103(sp)
    efe0:	dcc02717 	ldw	r19,156(sp)
    efe4:	dd4019c4 	addi	r21,sp,103
    efe8:	003bf606 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    efec:	0027883a 	mov	r19,zero
    eff0:	dd401a04 	addi	r21,sp,104
    eff4:	003bf306 	br	dfc4 <__alt_mem_onchip_memory+0xf780dfc4>
    eff8:	d9c01d85 	stb	r7,118(sp)
    effc:	003dc806 	br	e720 <__alt_mem_onchip_memory+0xf780e720>
    f000:	d9c01d85 	stb	r7,118(sp)
    f004:	003d3a06 	br	e4f0 <__alt_mem_onchip_memory+0xf780e4f0>
    f008:	d9c01d85 	stb	r7,118(sp)
    f00c:	003d2a06 	br	e4b8 <__alt_mem_onchip_memory+0xf780e4b8>
    f010:	d9c01d85 	stb	r7,118(sp)
    f014:	003cde06 	br	e390 <__alt_mem_onchip_memory+0xf780e390>
    f018:	d9c01d85 	stb	r7,118(sp)
    f01c:	003cbc06 	br	e310 <__alt_mem_onchip_memory+0xf780e310>

0000f020 <__vfiprintf_internal>:
    f020:	00800074 	movhi	r2,1
    f024:	10950604 	addi	r2,r2,21528
    f028:	300f883a 	mov	r7,r6
    f02c:	280d883a 	mov	r6,r5
    f030:	200b883a 	mov	r5,r4
    f034:	11000017 	ldw	r4,0(r2)
    f038:	000dbc41 	jmpi	dbc4 <___vfiprintf_internal_r>

0000f03c <__sbprintf>:
    f03c:	2880030b 	ldhu	r2,12(r5)
    f040:	2ac01917 	ldw	r11,100(r5)
    f044:	2a80038b 	ldhu	r10,14(r5)
    f048:	2a400717 	ldw	r9,28(r5)
    f04c:	2a000917 	ldw	r8,36(r5)
    f050:	defee204 	addi	sp,sp,-1144
    f054:	00c10004 	movi	r3,1024
    f058:	dc011a15 	stw	r16,1128(sp)
    f05c:	10bfff4c 	andi	r2,r2,65533
    f060:	2821883a 	mov	r16,r5
    f064:	d8cb883a 	add	r5,sp,r3
    f068:	dc811c15 	stw	r18,1136(sp)
    f06c:	dc411b15 	stw	r17,1132(sp)
    f070:	dfc11d15 	stw	ra,1140(sp)
    f074:	2025883a 	mov	r18,r4
    f078:	d881030d 	sth	r2,1036(sp)
    f07c:	dac11915 	stw	r11,1124(sp)
    f080:	da81038d 	sth	r10,1038(sp)
    f084:	da410715 	stw	r9,1052(sp)
    f088:	da010915 	stw	r8,1060(sp)
    f08c:	dec10015 	stw	sp,1024(sp)
    f090:	dec10415 	stw	sp,1040(sp)
    f094:	d8c10215 	stw	r3,1032(sp)
    f098:	d8c10515 	stw	r3,1044(sp)
    f09c:	d8010615 	stw	zero,1048(sp)
    f0a0:	000dbc40 	call	dbc4 <___vfiprintf_internal_r>
    f0a4:	1023883a 	mov	r17,r2
    f0a8:	10000416 	blt	r2,zero,f0bc <__sbprintf+0x80>
    f0ac:	d9410004 	addi	r5,sp,1024
    f0b0:	9009883a 	mov	r4,r18
    f0b4:	000a3280 	call	a328 <_fflush_r>
    f0b8:	10000d1e 	bne	r2,zero,f0f0 <__sbprintf+0xb4>
    f0bc:	d881030b 	ldhu	r2,1036(sp)
    f0c0:	1080100c 	andi	r2,r2,64
    f0c4:	10000326 	beq	r2,zero,f0d4 <__sbprintf+0x98>
    f0c8:	8080030b 	ldhu	r2,12(r16)
    f0cc:	10801014 	ori	r2,r2,64
    f0d0:	8080030d 	sth	r2,12(r16)
    f0d4:	8805883a 	mov	r2,r17
    f0d8:	dfc11d17 	ldw	ra,1140(sp)
    f0dc:	dc811c17 	ldw	r18,1136(sp)
    f0e0:	dc411b17 	ldw	r17,1132(sp)
    f0e4:	dc011a17 	ldw	r16,1128(sp)
    f0e8:	dec11e04 	addi	sp,sp,1144
    f0ec:	f800283a 	ret
    f0f0:	047fffc4 	movi	r17,-1
    f0f4:	003ff106 	br	f0bc <__alt_mem_onchip_memory+0xf780f0bc>

0000f0f8 <__swbuf_r>:
    f0f8:	defffb04 	addi	sp,sp,-20
    f0fc:	dcc00315 	stw	r19,12(sp)
    f100:	dc800215 	stw	r18,8(sp)
    f104:	dc000015 	stw	r16,0(sp)
    f108:	dfc00415 	stw	ra,16(sp)
    f10c:	dc400115 	stw	r17,4(sp)
    f110:	2025883a 	mov	r18,r4
    f114:	2827883a 	mov	r19,r5
    f118:	3021883a 	mov	r16,r6
    f11c:	20000226 	beq	r4,zero,f128 <__swbuf_r+0x30>
    f120:	20800e17 	ldw	r2,56(r4)
    f124:	10004226 	beq	r2,zero,f230 <__swbuf_r+0x138>
    f128:	80800617 	ldw	r2,24(r16)
    f12c:	8100030b 	ldhu	r4,12(r16)
    f130:	80800215 	stw	r2,8(r16)
    f134:	2080020c 	andi	r2,r4,8
    f138:	10003626 	beq	r2,zero,f214 <__swbuf_r+0x11c>
    f13c:	80c00417 	ldw	r3,16(r16)
    f140:	18003426 	beq	r3,zero,f214 <__swbuf_r+0x11c>
    f144:	2088000c 	andi	r2,r4,8192
    f148:	9c403fcc 	andi	r17,r19,255
    f14c:	10001a26 	beq	r2,zero,f1b8 <__swbuf_r+0xc0>
    f150:	80800017 	ldw	r2,0(r16)
    f154:	81000517 	ldw	r4,20(r16)
    f158:	10c7c83a 	sub	r3,r2,r3
    f15c:	1900200e 	bge	r3,r4,f1e0 <__swbuf_r+0xe8>
    f160:	18c00044 	addi	r3,r3,1
    f164:	81000217 	ldw	r4,8(r16)
    f168:	11400044 	addi	r5,r2,1
    f16c:	81400015 	stw	r5,0(r16)
    f170:	213fffc4 	addi	r4,r4,-1
    f174:	81000215 	stw	r4,8(r16)
    f178:	14c00005 	stb	r19,0(r2)
    f17c:	80800517 	ldw	r2,20(r16)
    f180:	10c01e26 	beq	r2,r3,f1fc <__swbuf_r+0x104>
    f184:	8080030b 	ldhu	r2,12(r16)
    f188:	1080004c 	andi	r2,r2,1
    f18c:	10000226 	beq	r2,zero,f198 <__swbuf_r+0xa0>
    f190:	00800284 	movi	r2,10
    f194:	88801926 	beq	r17,r2,f1fc <__swbuf_r+0x104>
    f198:	8805883a 	mov	r2,r17
    f19c:	dfc00417 	ldw	ra,16(sp)
    f1a0:	dcc00317 	ldw	r19,12(sp)
    f1a4:	dc800217 	ldw	r18,8(sp)
    f1a8:	dc400117 	ldw	r17,4(sp)
    f1ac:	dc000017 	ldw	r16,0(sp)
    f1b0:	dec00504 	addi	sp,sp,20
    f1b4:	f800283a 	ret
    f1b8:	81401917 	ldw	r5,100(r16)
    f1bc:	00b7ffc4 	movi	r2,-8193
    f1c0:	21080014 	ori	r4,r4,8192
    f1c4:	2884703a 	and	r2,r5,r2
    f1c8:	80801915 	stw	r2,100(r16)
    f1cc:	80800017 	ldw	r2,0(r16)
    f1d0:	8100030d 	sth	r4,12(r16)
    f1d4:	81000517 	ldw	r4,20(r16)
    f1d8:	10c7c83a 	sub	r3,r2,r3
    f1dc:	193fe016 	blt	r3,r4,f160 <__alt_mem_onchip_memory+0xf780f160>
    f1e0:	800b883a 	mov	r5,r16
    f1e4:	9009883a 	mov	r4,r18
    f1e8:	000a3280 	call	a328 <_fflush_r>
    f1ec:	1000071e 	bne	r2,zero,f20c <__swbuf_r+0x114>
    f1f0:	80800017 	ldw	r2,0(r16)
    f1f4:	00c00044 	movi	r3,1
    f1f8:	003fda06 	br	f164 <__alt_mem_onchip_memory+0xf780f164>
    f1fc:	800b883a 	mov	r5,r16
    f200:	9009883a 	mov	r4,r18
    f204:	000a3280 	call	a328 <_fflush_r>
    f208:	103fe326 	beq	r2,zero,f198 <__alt_mem_onchip_memory+0xf780f198>
    f20c:	00bfffc4 	movi	r2,-1
    f210:	003fe206 	br	f19c <__alt_mem_onchip_memory+0xf780f19c>
    f214:	800b883a 	mov	r5,r16
    f218:	9009883a 	mov	r4,r18
    f21c:	00087300 	call	8730 <__swsetup_r>
    f220:	103ffa1e 	bne	r2,zero,f20c <__alt_mem_onchip_memory+0xf780f20c>
    f224:	8100030b 	ldhu	r4,12(r16)
    f228:	80c00417 	ldw	r3,16(r16)
    f22c:	003fc506 	br	f144 <__alt_mem_onchip_memory+0xf780f144>
    f230:	000a7040 	call	a704 <__sinit>
    f234:	003fbc06 	br	f128 <__alt_mem_onchip_memory+0xf780f128>

0000f238 <__swbuf>:
    f238:	00800074 	movhi	r2,1
    f23c:	10950604 	addi	r2,r2,21528
    f240:	280d883a 	mov	r6,r5
    f244:	200b883a 	mov	r5,r4
    f248:	11000017 	ldw	r4,0(r2)
    f24c:	000f0f81 	jmpi	f0f8 <__swbuf_r>

0000f250 <_write_r>:
    f250:	defffd04 	addi	sp,sp,-12
    f254:	2805883a 	mov	r2,r5
    f258:	dc000015 	stw	r16,0(sp)
    f25c:	04000074 	movhi	r16,1
    f260:	dc400115 	stw	r17,4(sp)
    f264:	300b883a 	mov	r5,r6
    f268:	841bdc04 	addi	r16,r16,28528
    f26c:	2023883a 	mov	r17,r4
    f270:	380d883a 	mov	r6,r7
    f274:	1009883a 	mov	r4,r2
    f278:	dfc00215 	stw	ra,8(sp)
    f27c:	80000015 	stw	zero,0(r16)
    f280:	00112500 	call	11250 <write>
    f284:	00ffffc4 	movi	r3,-1
    f288:	10c00526 	beq	r2,r3,f2a0 <_write_r+0x50>
    f28c:	dfc00217 	ldw	ra,8(sp)
    f290:	dc400117 	ldw	r17,4(sp)
    f294:	dc000017 	ldw	r16,0(sp)
    f298:	dec00304 	addi	sp,sp,12
    f29c:	f800283a 	ret
    f2a0:	80c00017 	ldw	r3,0(r16)
    f2a4:	183ff926 	beq	r3,zero,f28c <__alt_mem_onchip_memory+0xf780f28c>
    f2a8:	88c00015 	stw	r3,0(r17)
    f2ac:	003ff706 	br	f28c <__alt_mem_onchip_memory+0xf780f28c>

0000f2b0 <_close_r>:
    f2b0:	defffd04 	addi	sp,sp,-12
    f2b4:	dc000015 	stw	r16,0(sp)
    f2b8:	04000074 	movhi	r16,1
    f2bc:	dc400115 	stw	r17,4(sp)
    f2c0:	841bdc04 	addi	r16,r16,28528
    f2c4:	2023883a 	mov	r17,r4
    f2c8:	2809883a 	mov	r4,r5
    f2cc:	dfc00215 	stw	ra,8(sp)
    f2d0:	80000015 	stw	zero,0(r16)
    f2d4:	00106a80 	call	106a8 <close>
    f2d8:	00ffffc4 	movi	r3,-1
    f2dc:	10c00526 	beq	r2,r3,f2f4 <_close_r+0x44>
    f2e0:	dfc00217 	ldw	ra,8(sp)
    f2e4:	dc400117 	ldw	r17,4(sp)
    f2e8:	dc000017 	ldw	r16,0(sp)
    f2ec:	dec00304 	addi	sp,sp,12
    f2f0:	f800283a 	ret
    f2f4:	80c00017 	ldw	r3,0(r16)
    f2f8:	183ff926 	beq	r3,zero,f2e0 <__alt_mem_onchip_memory+0xf780f2e0>
    f2fc:	88c00015 	stw	r3,0(r17)
    f300:	003ff706 	br	f2e0 <__alt_mem_onchip_memory+0xf780f2e0>

0000f304 <_calloc_r>:
    f304:	298b383a 	mul	r5,r5,r6
    f308:	defffe04 	addi	sp,sp,-8
    f30c:	dfc00115 	stw	ra,4(sp)
    f310:	dc000015 	stw	r16,0(sp)
    f314:	000b4c00 	call	b4c0 <_malloc_r>
    f318:	10002926 	beq	r2,zero,f3c0 <_calloc_r+0xbc>
    f31c:	11bfff17 	ldw	r6,-4(r2)
    f320:	1021883a 	mov	r16,r2
    f324:	00bfff04 	movi	r2,-4
    f328:	308c703a 	and	r6,r6,r2
    f32c:	00c00904 	movi	r3,36
    f330:	308d883a 	add	r6,r6,r2
    f334:	19801636 	bltu	r3,r6,f390 <_calloc_r+0x8c>
    f338:	008004c4 	movi	r2,19
    f33c:	11800b2e 	bgeu	r2,r6,f36c <_calloc_r+0x68>
    f340:	80000015 	stw	zero,0(r16)
    f344:	80000115 	stw	zero,4(r16)
    f348:	008006c4 	movi	r2,27
    f34c:	11801a2e 	bgeu	r2,r6,f3b8 <_calloc_r+0xb4>
    f350:	80000215 	stw	zero,8(r16)
    f354:	80000315 	stw	zero,12(r16)
    f358:	30c0151e 	bne	r6,r3,f3b0 <_calloc_r+0xac>
    f35c:	80000415 	stw	zero,16(r16)
    f360:	80800604 	addi	r2,r16,24
    f364:	80000515 	stw	zero,20(r16)
    f368:	00000106 	br	f370 <_calloc_r+0x6c>
    f36c:	8005883a 	mov	r2,r16
    f370:	10000015 	stw	zero,0(r2)
    f374:	10000115 	stw	zero,4(r2)
    f378:	10000215 	stw	zero,8(r2)
    f37c:	8005883a 	mov	r2,r16
    f380:	dfc00117 	ldw	ra,4(sp)
    f384:	dc000017 	ldw	r16,0(sp)
    f388:	dec00204 	addi	sp,sp,8
    f38c:	f800283a 	ret
    f390:	000b883a 	mov	r5,zero
    f394:	8009883a 	mov	r4,r16
    f398:	000c0540 	call	c054 <memset>
    f39c:	8005883a 	mov	r2,r16
    f3a0:	dfc00117 	ldw	ra,4(sp)
    f3a4:	dc000017 	ldw	r16,0(sp)
    f3a8:	dec00204 	addi	sp,sp,8
    f3ac:	f800283a 	ret
    f3b0:	80800404 	addi	r2,r16,16
    f3b4:	003fee06 	br	f370 <__alt_mem_onchip_memory+0xf780f370>
    f3b8:	80800204 	addi	r2,r16,8
    f3bc:	003fec06 	br	f370 <__alt_mem_onchip_memory+0xf780f370>
    f3c0:	0005883a 	mov	r2,zero
    f3c4:	003fee06 	br	f380 <__alt_mem_onchip_memory+0xf780f380>

0000f3c8 <_fclose_r>:
    f3c8:	28003926 	beq	r5,zero,f4b0 <_fclose_r+0xe8>
    f3cc:	defffc04 	addi	sp,sp,-16
    f3d0:	dc400115 	stw	r17,4(sp)
    f3d4:	dc000015 	stw	r16,0(sp)
    f3d8:	dfc00315 	stw	ra,12(sp)
    f3dc:	dc800215 	stw	r18,8(sp)
    f3e0:	2023883a 	mov	r17,r4
    f3e4:	2821883a 	mov	r16,r5
    f3e8:	20000226 	beq	r4,zero,f3f4 <_fclose_r+0x2c>
    f3ec:	20800e17 	ldw	r2,56(r4)
    f3f0:	10002726 	beq	r2,zero,f490 <_fclose_r+0xc8>
    f3f4:	8080030f 	ldh	r2,12(r16)
    f3f8:	1000071e 	bne	r2,zero,f418 <_fclose_r+0x50>
    f3fc:	0005883a 	mov	r2,zero
    f400:	dfc00317 	ldw	ra,12(sp)
    f404:	dc800217 	ldw	r18,8(sp)
    f408:	dc400117 	ldw	r17,4(sp)
    f40c:	dc000017 	ldw	r16,0(sp)
    f410:	dec00404 	addi	sp,sp,16
    f414:	f800283a 	ret
    f418:	800b883a 	mov	r5,r16
    f41c:	8809883a 	mov	r4,r17
    f420:	000a10c0 	call	a10c <__sflush_r>
    f424:	1025883a 	mov	r18,r2
    f428:	80800b17 	ldw	r2,44(r16)
    f42c:	10000426 	beq	r2,zero,f440 <_fclose_r+0x78>
    f430:	81400717 	ldw	r5,28(r16)
    f434:	8809883a 	mov	r4,r17
    f438:	103ee83a 	callr	r2
    f43c:	10001616 	blt	r2,zero,f498 <_fclose_r+0xd0>
    f440:	8080030b 	ldhu	r2,12(r16)
    f444:	1080200c 	andi	r2,r2,128
    f448:	1000151e 	bne	r2,zero,f4a0 <_fclose_r+0xd8>
    f44c:	81400c17 	ldw	r5,48(r16)
    f450:	28000526 	beq	r5,zero,f468 <_fclose_r+0xa0>
    f454:	80801004 	addi	r2,r16,64
    f458:	28800226 	beq	r5,r2,f464 <_fclose_r+0x9c>
    f45c:	8809883a 	mov	r4,r17
    f460:	000a8780 	call	a878 <_free_r>
    f464:	80000c15 	stw	zero,48(r16)
    f468:	81401117 	ldw	r5,68(r16)
    f46c:	28000326 	beq	r5,zero,f47c <_fclose_r+0xb4>
    f470:	8809883a 	mov	r4,r17
    f474:	000a8780 	call	a878 <_free_r>
    f478:	80001115 	stw	zero,68(r16)
    f47c:	000a7140 	call	a714 <__sfp_lock_acquire>
    f480:	8000030d 	sth	zero,12(r16)
    f484:	000a7180 	call	a718 <__sfp_lock_release>
    f488:	9005883a 	mov	r2,r18
    f48c:	003fdc06 	br	f400 <__alt_mem_onchip_memory+0xf780f400>
    f490:	000a7040 	call	a704 <__sinit>
    f494:	003fd706 	br	f3f4 <__alt_mem_onchip_memory+0xf780f3f4>
    f498:	04bfffc4 	movi	r18,-1
    f49c:	003fe806 	br	f440 <__alt_mem_onchip_memory+0xf780f440>
    f4a0:	81400417 	ldw	r5,16(r16)
    f4a4:	8809883a 	mov	r4,r17
    f4a8:	000a8780 	call	a878 <_free_r>
    f4ac:	003fe706 	br	f44c <__alt_mem_onchip_memory+0xf780f44c>
    f4b0:	0005883a 	mov	r2,zero
    f4b4:	f800283a 	ret

0000f4b8 <fclose>:
    f4b8:	00800074 	movhi	r2,1
    f4bc:	10950604 	addi	r2,r2,21528
    f4c0:	200b883a 	mov	r5,r4
    f4c4:	11000017 	ldw	r4,0(r2)
    f4c8:	000f3c81 	jmpi	f3c8 <_fclose_r>

0000f4cc <__fputwc>:
    f4cc:	defff804 	addi	sp,sp,-32
    f4d0:	dcc00415 	stw	r19,16(sp)
    f4d4:	dc800315 	stw	r18,12(sp)
    f4d8:	dc000115 	stw	r16,4(sp)
    f4dc:	dfc00715 	stw	ra,28(sp)
    f4e0:	dd400615 	stw	r21,24(sp)
    f4e4:	dd000515 	stw	r20,20(sp)
    f4e8:	dc400215 	stw	r17,8(sp)
    f4ec:	2027883a 	mov	r19,r4
    f4f0:	2825883a 	mov	r18,r5
    f4f4:	3021883a 	mov	r16,r6
    f4f8:	000b2b00 	call	b2b0 <__locale_mb_cur_max>
    f4fc:	00c00044 	movi	r3,1
    f500:	10c03e26 	beq	r2,r3,f5fc <__fputwc+0x130>
    f504:	81c01704 	addi	r7,r16,92
    f508:	900d883a 	mov	r6,r18
    f50c:	d80b883a 	mov	r5,sp
    f510:	9809883a 	mov	r4,r19
    f514:	000f8440 	call	f844 <_wcrtomb_r>
    f518:	1029883a 	mov	r20,r2
    f51c:	00bfffc4 	movi	r2,-1
    f520:	a0802026 	beq	r20,r2,f5a4 <__fputwc+0xd8>
    f524:	d9400003 	ldbu	r5,0(sp)
    f528:	a0001c26 	beq	r20,zero,f59c <__fputwc+0xd0>
    f52c:	0023883a 	mov	r17,zero
    f530:	05400284 	movi	r21,10
    f534:	00000906 	br	f55c <__fputwc+0x90>
    f538:	80800017 	ldw	r2,0(r16)
    f53c:	11400005 	stb	r5,0(r2)
    f540:	80c00017 	ldw	r3,0(r16)
    f544:	18c00044 	addi	r3,r3,1
    f548:	80c00015 	stw	r3,0(r16)
    f54c:	8c400044 	addi	r17,r17,1
    f550:	dc45883a 	add	r2,sp,r17
    f554:	8d00112e 	bgeu	r17,r20,f59c <__fputwc+0xd0>
    f558:	11400003 	ldbu	r5,0(r2)
    f55c:	80c00217 	ldw	r3,8(r16)
    f560:	18ffffc4 	addi	r3,r3,-1
    f564:	80c00215 	stw	r3,8(r16)
    f568:	183ff30e 	bge	r3,zero,f538 <__alt_mem_onchip_memory+0xf780f538>
    f56c:	80800617 	ldw	r2,24(r16)
    f570:	18801916 	blt	r3,r2,f5d8 <__fputwc+0x10c>
    f574:	80800017 	ldw	r2,0(r16)
    f578:	11400005 	stb	r5,0(r2)
    f57c:	80800017 	ldw	r2,0(r16)
    f580:	10c00003 	ldbu	r3,0(r2)
    f584:	10800044 	addi	r2,r2,1
    f588:	1d402326 	beq	r3,r21,f618 <__fputwc+0x14c>
    f58c:	80800015 	stw	r2,0(r16)
    f590:	8c400044 	addi	r17,r17,1
    f594:	dc45883a 	add	r2,sp,r17
    f598:	8d3fef36 	bltu	r17,r20,f558 <__alt_mem_onchip_memory+0xf780f558>
    f59c:	9005883a 	mov	r2,r18
    f5a0:	00000406 	br	f5b4 <__fputwc+0xe8>
    f5a4:	80c0030b 	ldhu	r3,12(r16)
    f5a8:	a005883a 	mov	r2,r20
    f5ac:	18c01014 	ori	r3,r3,64
    f5b0:	80c0030d 	sth	r3,12(r16)
    f5b4:	dfc00717 	ldw	ra,28(sp)
    f5b8:	dd400617 	ldw	r21,24(sp)
    f5bc:	dd000517 	ldw	r20,20(sp)
    f5c0:	dcc00417 	ldw	r19,16(sp)
    f5c4:	dc800317 	ldw	r18,12(sp)
    f5c8:	dc400217 	ldw	r17,8(sp)
    f5cc:	dc000117 	ldw	r16,4(sp)
    f5d0:	dec00804 	addi	sp,sp,32
    f5d4:	f800283a 	ret
    f5d8:	800d883a 	mov	r6,r16
    f5dc:	29403fcc 	andi	r5,r5,255
    f5e0:	9809883a 	mov	r4,r19
    f5e4:	000f0f80 	call	f0f8 <__swbuf_r>
    f5e8:	10bfffe0 	cmpeqi	r2,r2,-1
    f5ec:	10803fcc 	andi	r2,r2,255
    f5f0:	103fd626 	beq	r2,zero,f54c <__alt_mem_onchip_memory+0xf780f54c>
    f5f4:	00bfffc4 	movi	r2,-1
    f5f8:	003fee06 	br	f5b4 <__alt_mem_onchip_memory+0xf780f5b4>
    f5fc:	90ffffc4 	addi	r3,r18,-1
    f600:	01003f84 	movi	r4,254
    f604:	20ffbf36 	bltu	r4,r3,f504 <__alt_mem_onchip_memory+0xf780f504>
    f608:	900b883a 	mov	r5,r18
    f60c:	dc800005 	stb	r18,0(sp)
    f610:	1029883a 	mov	r20,r2
    f614:	003fc506 	br	f52c <__alt_mem_onchip_memory+0xf780f52c>
    f618:	800d883a 	mov	r6,r16
    f61c:	a80b883a 	mov	r5,r21
    f620:	9809883a 	mov	r4,r19
    f624:	000f0f80 	call	f0f8 <__swbuf_r>
    f628:	10bfffe0 	cmpeqi	r2,r2,-1
    f62c:	003fef06 	br	f5ec <__alt_mem_onchip_memory+0xf780f5ec>

0000f630 <_fputwc_r>:
    f630:	3080030b 	ldhu	r2,12(r6)
    f634:	10c8000c 	andi	r3,r2,8192
    f638:	1800051e 	bne	r3,zero,f650 <_fputwc_r+0x20>
    f63c:	30c01917 	ldw	r3,100(r6)
    f640:	10880014 	ori	r2,r2,8192
    f644:	3080030d 	sth	r2,12(r6)
    f648:	18880014 	ori	r2,r3,8192
    f64c:	30801915 	stw	r2,100(r6)
    f650:	000f4cc1 	jmpi	f4cc <__fputwc>

0000f654 <fputwc>:
    f654:	00800074 	movhi	r2,1
    f658:	defffc04 	addi	sp,sp,-16
    f65c:	10950604 	addi	r2,r2,21528
    f660:	dc000115 	stw	r16,4(sp)
    f664:	14000017 	ldw	r16,0(r2)
    f668:	dc400215 	stw	r17,8(sp)
    f66c:	dfc00315 	stw	ra,12(sp)
    f670:	2023883a 	mov	r17,r4
    f674:	80000226 	beq	r16,zero,f680 <fputwc+0x2c>
    f678:	80800e17 	ldw	r2,56(r16)
    f67c:	10001026 	beq	r2,zero,f6c0 <fputwc+0x6c>
    f680:	2880030b 	ldhu	r2,12(r5)
    f684:	10c8000c 	andi	r3,r2,8192
    f688:	1800051e 	bne	r3,zero,f6a0 <fputwc+0x4c>
    f68c:	28c01917 	ldw	r3,100(r5)
    f690:	10880014 	ori	r2,r2,8192
    f694:	2880030d 	sth	r2,12(r5)
    f698:	18880014 	ori	r2,r3,8192
    f69c:	28801915 	stw	r2,100(r5)
    f6a0:	280d883a 	mov	r6,r5
    f6a4:	8009883a 	mov	r4,r16
    f6a8:	880b883a 	mov	r5,r17
    f6ac:	dfc00317 	ldw	ra,12(sp)
    f6b0:	dc400217 	ldw	r17,8(sp)
    f6b4:	dc000117 	ldw	r16,4(sp)
    f6b8:	dec00404 	addi	sp,sp,16
    f6bc:	000f4cc1 	jmpi	f4cc <__fputwc>
    f6c0:	8009883a 	mov	r4,r16
    f6c4:	d9400015 	stw	r5,0(sp)
    f6c8:	000a7040 	call	a704 <__sinit>
    f6cc:	d9400017 	ldw	r5,0(sp)
    f6d0:	003feb06 	br	f680 <__alt_mem_onchip_memory+0xf780f680>

0000f6d4 <_fstat_r>:
    f6d4:	defffd04 	addi	sp,sp,-12
    f6d8:	2805883a 	mov	r2,r5
    f6dc:	dc000015 	stw	r16,0(sp)
    f6e0:	04000074 	movhi	r16,1
    f6e4:	dc400115 	stw	r17,4(sp)
    f6e8:	841bdc04 	addi	r16,r16,28528
    f6ec:	2023883a 	mov	r17,r4
    f6f0:	300b883a 	mov	r5,r6
    f6f4:	1009883a 	mov	r4,r2
    f6f8:	dfc00215 	stw	ra,8(sp)
    f6fc:	80000015 	stw	zero,0(r16)
    f700:	00107e00 	call	107e0 <fstat>
    f704:	00ffffc4 	movi	r3,-1
    f708:	10c00526 	beq	r2,r3,f720 <_fstat_r+0x4c>
    f70c:	dfc00217 	ldw	ra,8(sp)
    f710:	dc400117 	ldw	r17,4(sp)
    f714:	dc000017 	ldw	r16,0(sp)
    f718:	dec00304 	addi	sp,sp,12
    f71c:	f800283a 	ret
    f720:	80c00017 	ldw	r3,0(r16)
    f724:	183ff926 	beq	r3,zero,f70c <__alt_mem_onchip_memory+0xf780f70c>
    f728:	88c00015 	stw	r3,0(r17)
    f72c:	003ff706 	br	f70c <__alt_mem_onchip_memory+0xf780f70c>

0000f730 <_isatty_r>:
    f730:	defffd04 	addi	sp,sp,-12
    f734:	dc000015 	stw	r16,0(sp)
    f738:	04000074 	movhi	r16,1
    f73c:	dc400115 	stw	r17,4(sp)
    f740:	841bdc04 	addi	r16,r16,28528
    f744:	2023883a 	mov	r17,r4
    f748:	2809883a 	mov	r4,r5
    f74c:	dfc00215 	stw	ra,8(sp)
    f750:	80000015 	stw	zero,0(r16)
    f754:	0010ac00 	call	10ac0 <isatty>
    f758:	00ffffc4 	movi	r3,-1
    f75c:	10c00526 	beq	r2,r3,f774 <_isatty_r+0x44>
    f760:	dfc00217 	ldw	ra,8(sp)
    f764:	dc400117 	ldw	r17,4(sp)
    f768:	dc000017 	ldw	r16,0(sp)
    f76c:	dec00304 	addi	sp,sp,12
    f770:	f800283a 	ret
    f774:	80c00017 	ldw	r3,0(r16)
    f778:	183ff926 	beq	r3,zero,f760 <__alt_mem_onchip_memory+0xf780f760>
    f77c:	88c00015 	stw	r3,0(r17)
    f780:	003ff706 	br	f760 <__alt_mem_onchip_memory+0xf780f760>

0000f784 <_lseek_r>:
    f784:	defffd04 	addi	sp,sp,-12
    f788:	2805883a 	mov	r2,r5
    f78c:	dc000015 	stw	r16,0(sp)
    f790:	04000074 	movhi	r16,1
    f794:	dc400115 	stw	r17,4(sp)
    f798:	300b883a 	mov	r5,r6
    f79c:	841bdc04 	addi	r16,r16,28528
    f7a0:	2023883a 	mov	r17,r4
    f7a4:	380d883a 	mov	r6,r7
    f7a8:	1009883a 	mov	r4,r2
    f7ac:	dfc00215 	stw	ra,8(sp)
    f7b0:	80000015 	stw	zero,0(r16)
    f7b4:	0010c8c0 	call	10c8c <lseek>
    f7b8:	00ffffc4 	movi	r3,-1
    f7bc:	10c00526 	beq	r2,r3,f7d4 <_lseek_r+0x50>
    f7c0:	dfc00217 	ldw	ra,8(sp)
    f7c4:	dc400117 	ldw	r17,4(sp)
    f7c8:	dc000017 	ldw	r16,0(sp)
    f7cc:	dec00304 	addi	sp,sp,12
    f7d0:	f800283a 	ret
    f7d4:	80c00017 	ldw	r3,0(r16)
    f7d8:	183ff926 	beq	r3,zero,f7c0 <__alt_mem_onchip_memory+0xf780f7c0>
    f7dc:	88c00015 	stw	r3,0(r17)
    f7e0:	003ff706 	br	f7c0 <__alt_mem_onchip_memory+0xf780f7c0>

0000f7e4 <_read_r>:
    f7e4:	defffd04 	addi	sp,sp,-12
    f7e8:	2805883a 	mov	r2,r5
    f7ec:	dc000015 	stw	r16,0(sp)
    f7f0:	04000074 	movhi	r16,1
    f7f4:	dc400115 	stw	r17,4(sp)
    f7f8:	300b883a 	mov	r5,r6
    f7fc:	841bdc04 	addi	r16,r16,28528
    f800:	2023883a 	mov	r17,r4
    f804:	380d883a 	mov	r6,r7
    f808:	1009883a 	mov	r4,r2
    f80c:	dfc00215 	stw	ra,8(sp)
    f810:	80000015 	stw	zero,0(r16)
    f814:	0010e600 	call	10e60 <read>
    f818:	00ffffc4 	movi	r3,-1
    f81c:	10c00526 	beq	r2,r3,f834 <_read_r+0x50>
    f820:	dfc00217 	ldw	ra,8(sp)
    f824:	dc400117 	ldw	r17,4(sp)
    f828:	dc000017 	ldw	r16,0(sp)
    f82c:	dec00304 	addi	sp,sp,12
    f830:	f800283a 	ret
    f834:	80c00017 	ldw	r3,0(r16)
    f838:	183ff926 	beq	r3,zero,f820 <__alt_mem_onchip_memory+0xf780f820>
    f83c:	88c00015 	stw	r3,0(r17)
    f840:	003ff706 	br	f820 <__alt_mem_onchip_memory+0xf780f820>

0000f844 <_wcrtomb_r>:
    f844:	defff604 	addi	sp,sp,-40
    f848:	00800074 	movhi	r2,1
    f84c:	dc800815 	stw	r18,32(sp)
    f850:	dc400715 	stw	r17,28(sp)
    f854:	dc000615 	stw	r16,24(sp)
    f858:	10950a04 	addi	r2,r2,21544
    f85c:	dfc00915 	stw	ra,36(sp)
    f860:	2021883a 	mov	r16,r4
    f864:	3823883a 	mov	r17,r7
    f868:	14800017 	ldw	r18,0(r2)
    f86c:	28001426 	beq	r5,zero,f8c0 <_wcrtomb_r+0x7c>
    f870:	d9400415 	stw	r5,16(sp)
    f874:	d9800515 	stw	r6,20(sp)
    f878:	000b2a40 	call	b2a4 <__locale_charset>
    f87c:	d9800517 	ldw	r6,20(sp)
    f880:	d9400417 	ldw	r5,16(sp)
    f884:	100f883a 	mov	r7,r2
    f888:	dc400015 	stw	r17,0(sp)
    f88c:	8009883a 	mov	r4,r16
    f890:	903ee83a 	callr	r18
    f894:	00ffffc4 	movi	r3,-1
    f898:	10c0031e 	bne	r2,r3,f8a8 <_wcrtomb_r+0x64>
    f89c:	88000015 	stw	zero,0(r17)
    f8a0:	00c02284 	movi	r3,138
    f8a4:	80c00015 	stw	r3,0(r16)
    f8a8:	dfc00917 	ldw	ra,36(sp)
    f8ac:	dc800817 	ldw	r18,32(sp)
    f8b0:	dc400717 	ldw	r17,28(sp)
    f8b4:	dc000617 	ldw	r16,24(sp)
    f8b8:	dec00a04 	addi	sp,sp,40
    f8bc:	f800283a 	ret
    f8c0:	000b2a40 	call	b2a4 <__locale_charset>
    f8c4:	100f883a 	mov	r7,r2
    f8c8:	dc400015 	stw	r17,0(sp)
    f8cc:	000d883a 	mov	r6,zero
    f8d0:	d9400104 	addi	r5,sp,4
    f8d4:	8009883a 	mov	r4,r16
    f8d8:	903ee83a 	callr	r18
    f8dc:	003fed06 	br	f894 <__alt_mem_onchip_memory+0xf780f894>

0000f8e0 <wcrtomb>:
    f8e0:	defff604 	addi	sp,sp,-40
    f8e4:	00800074 	movhi	r2,1
    f8e8:	dc800615 	stw	r18,24(sp)
    f8ec:	dc400515 	stw	r17,20(sp)
    f8f0:	10950604 	addi	r2,r2,21528
    f8f4:	dfc00915 	stw	ra,36(sp)
    f8f8:	dd000815 	stw	r20,32(sp)
    f8fc:	dcc00715 	stw	r19,28(sp)
    f900:	dc000415 	stw	r16,16(sp)
    f904:	3025883a 	mov	r18,r6
    f908:	14400017 	ldw	r17,0(r2)
    f90c:	20001926 	beq	r4,zero,f974 <wcrtomb+0x94>
    f910:	00800074 	movhi	r2,1
    f914:	10950a04 	addi	r2,r2,21544
    f918:	15000017 	ldw	r20,0(r2)
    f91c:	2021883a 	mov	r16,r4
    f920:	2827883a 	mov	r19,r5
    f924:	000b2a40 	call	b2a4 <__locale_charset>
    f928:	100f883a 	mov	r7,r2
    f92c:	dc800015 	stw	r18,0(sp)
    f930:	980d883a 	mov	r6,r19
    f934:	800b883a 	mov	r5,r16
    f938:	8809883a 	mov	r4,r17
    f93c:	a03ee83a 	callr	r20
    f940:	00ffffc4 	movi	r3,-1
    f944:	10c0031e 	bne	r2,r3,f954 <wcrtomb+0x74>
    f948:	90000015 	stw	zero,0(r18)
    f94c:	00c02284 	movi	r3,138
    f950:	88c00015 	stw	r3,0(r17)
    f954:	dfc00917 	ldw	ra,36(sp)
    f958:	dd000817 	ldw	r20,32(sp)
    f95c:	dcc00717 	ldw	r19,28(sp)
    f960:	dc800617 	ldw	r18,24(sp)
    f964:	dc400517 	ldw	r17,20(sp)
    f968:	dc000417 	ldw	r16,16(sp)
    f96c:	dec00a04 	addi	sp,sp,40
    f970:	f800283a 	ret
    f974:	00800074 	movhi	r2,1
    f978:	10950a04 	addi	r2,r2,21544
    f97c:	14000017 	ldw	r16,0(r2)
    f980:	000b2a40 	call	b2a4 <__locale_charset>
    f984:	100f883a 	mov	r7,r2
    f988:	dc800015 	stw	r18,0(sp)
    f98c:	000d883a 	mov	r6,zero
    f990:	d9400104 	addi	r5,sp,4
    f994:	8809883a 	mov	r4,r17
    f998:	803ee83a 	callr	r16
    f99c:	003fe806 	br	f940 <__alt_mem_onchip_memory+0xf780f940>

0000f9a0 <__ascii_wctomb>:
    f9a0:	28000526 	beq	r5,zero,f9b8 <__ascii_wctomb+0x18>
    f9a4:	00803fc4 	movi	r2,255
    f9a8:	11800536 	bltu	r2,r6,f9c0 <__ascii_wctomb+0x20>
    f9ac:	29800005 	stb	r6,0(r5)
    f9b0:	00800044 	movi	r2,1
    f9b4:	f800283a 	ret
    f9b8:	0005883a 	mov	r2,zero
    f9bc:	f800283a 	ret
    f9c0:	00802284 	movi	r2,138
    f9c4:	20800015 	stw	r2,0(r4)
    f9c8:	00bfffc4 	movi	r2,-1
    f9cc:	f800283a 	ret

0000f9d0 <_wctomb_r>:
    f9d0:	00800074 	movhi	r2,1
    f9d4:	defff904 	addi	sp,sp,-28
    f9d8:	10950a04 	addi	r2,r2,21544
    f9dc:	dfc00615 	stw	ra,24(sp)
    f9e0:	dc400515 	stw	r17,20(sp)
    f9e4:	dc000415 	stw	r16,16(sp)
    f9e8:	3823883a 	mov	r17,r7
    f9ec:	14000017 	ldw	r16,0(r2)
    f9f0:	d9000115 	stw	r4,4(sp)
    f9f4:	d9400215 	stw	r5,8(sp)
    f9f8:	d9800315 	stw	r6,12(sp)
    f9fc:	000b2a40 	call	b2a4 <__locale_charset>
    fa00:	d9800317 	ldw	r6,12(sp)
    fa04:	d9400217 	ldw	r5,8(sp)
    fa08:	d9000117 	ldw	r4,4(sp)
    fa0c:	100f883a 	mov	r7,r2
    fa10:	dc400015 	stw	r17,0(sp)
    fa14:	803ee83a 	callr	r16
    fa18:	dfc00617 	ldw	ra,24(sp)
    fa1c:	dc400517 	ldw	r17,20(sp)
    fa20:	dc000417 	ldw	r16,16(sp)
    fa24:	dec00704 	addi	sp,sp,28
    fa28:	f800283a 	ret

0000fa2c <__muldi3>:
    fa2c:	223fffcc 	andi	r8,r4,65535
    fa30:	2006d43a 	srli	r3,r4,16
    fa34:	32bfffcc 	andi	r10,r6,65535
    fa38:	3012d43a 	srli	r9,r6,16
    fa3c:	4297383a 	mul	r11,r8,r10
    fa40:	1a95383a 	mul	r10,r3,r10
    fa44:	4251383a 	mul	r8,r8,r9
    fa48:	5804d43a 	srli	r2,r11,16
    fa4c:	4291883a 	add	r8,r8,r10
    fa50:	1205883a 	add	r2,r2,r8
    fa54:	1a51383a 	mul	r8,r3,r9
    fa58:	1280022e 	bgeu	r2,r10,fa64 <__muldi3+0x38>
    fa5c:	00c00074 	movhi	r3,1
    fa60:	40d1883a 	add	r8,r8,r3
    fa64:	1006d43a 	srli	r3,r2,16
    fa68:	21cf383a 	mul	r7,r4,r7
    fa6c:	314b383a 	mul	r5,r6,r5
    fa70:	1004943a 	slli	r2,r2,16
    fa74:	1a11883a 	add	r8,r3,r8
    fa78:	5affffcc 	andi	r11,r11,65535
    fa7c:	3947883a 	add	r3,r7,r5
    fa80:	12c5883a 	add	r2,r2,r11
    fa84:	1a07883a 	add	r3,r3,r8
    fa88:	f800283a 	ret

0000fa8c <__udivdi3>:
    fa8c:	defff504 	addi	sp,sp,-44
    fa90:	dcc00415 	stw	r19,16(sp)
    fa94:	dc000115 	stw	r16,4(sp)
    fa98:	dfc00a15 	stw	ra,40(sp)
    fa9c:	df000915 	stw	fp,36(sp)
    faa0:	ddc00815 	stw	r23,32(sp)
    faa4:	dd800715 	stw	r22,28(sp)
    faa8:	dd400615 	stw	r21,24(sp)
    faac:	dd000515 	stw	r20,20(sp)
    fab0:	dc800315 	stw	r18,12(sp)
    fab4:	dc400215 	stw	r17,8(sp)
    fab8:	2027883a 	mov	r19,r4
    fabc:	2821883a 	mov	r16,r5
    fac0:	3800411e 	bne	r7,zero,fbc8 <__udivdi3+0x13c>
    fac4:	3023883a 	mov	r17,r6
    fac8:	2025883a 	mov	r18,r4
    facc:	2980522e 	bgeu	r5,r6,fc18 <__udivdi3+0x18c>
    fad0:	00bfffd4 	movui	r2,65535
    fad4:	282d883a 	mov	r22,r5
    fad8:	1180a836 	bltu	r2,r6,fd7c <__udivdi3+0x2f0>
    fadc:	00803fc4 	movi	r2,255
    fae0:	1185803a 	cmpltu	r2,r2,r6
    fae4:	100490fa 	slli	r2,r2,3
    fae8:	3086d83a 	srl	r3,r6,r2
    faec:	01000074 	movhi	r4,1
    faf0:	210d5644 	addi	r4,r4,13657
    faf4:	20c7883a 	add	r3,r4,r3
    faf8:	18c00003 	ldbu	r3,0(r3)
    fafc:	1885883a 	add	r2,r3,r2
    fb00:	00c00804 	movi	r3,32
    fb04:	1887c83a 	sub	r3,r3,r2
    fb08:	18000526 	beq	r3,zero,fb20 <__udivdi3+0x94>
    fb0c:	80e0983a 	sll	r16,r16,r3
    fb10:	9884d83a 	srl	r2,r19,r2
    fb14:	30e2983a 	sll	r17,r6,r3
    fb18:	98e4983a 	sll	r18,r19,r3
    fb1c:	142cb03a 	or	r22,r2,r16
    fb20:	882ad43a 	srli	r21,r17,16
    fb24:	b009883a 	mov	r4,r22
    fb28:	8d3fffcc 	andi	r20,r17,65535
    fb2c:	a80b883a 	mov	r5,r21
    fb30:	00060d40 	call	60d4 <__umodsi3>
    fb34:	b009883a 	mov	r4,r22
    fb38:	a80b883a 	mov	r5,r21
    fb3c:	1027883a 	mov	r19,r2
    fb40:	00060700 	call	6070 <__udivsi3>
    fb44:	102d883a 	mov	r22,r2
    fb48:	9826943a 	slli	r19,r19,16
    fb4c:	9004d43a 	srli	r2,r18,16
    fb50:	a5a1383a 	mul	r16,r20,r22
    fb54:	14c4b03a 	or	r2,r2,r19
    fb58:	1400052e 	bgeu	r2,r16,fb70 <__udivdi3+0xe4>
    fb5c:	1445883a 	add	r2,r2,r17
    fb60:	b0ffffc4 	addi	r3,r22,-1
    fb64:	14400136 	bltu	r2,r17,fb6c <__udivdi3+0xe0>
    fb68:	14012336 	bltu	r2,r16,fff8 <__udivdi3+0x56c>
    fb6c:	182d883a 	mov	r22,r3
    fb70:	1421c83a 	sub	r16,r2,r16
    fb74:	a80b883a 	mov	r5,r21
    fb78:	8009883a 	mov	r4,r16
    fb7c:	00060d40 	call	60d4 <__umodsi3>
    fb80:	1027883a 	mov	r19,r2
    fb84:	a80b883a 	mov	r5,r21
    fb88:	8009883a 	mov	r4,r16
    fb8c:	00060700 	call	6070 <__udivsi3>
    fb90:	9826943a 	slli	r19,r19,16
    fb94:	a0a9383a 	mul	r20,r20,r2
    fb98:	94bfffcc 	andi	r18,r18,65535
    fb9c:	94e4b03a 	or	r18,r18,r19
    fba0:	9500052e 	bgeu	r18,r20,fbb8 <__udivdi3+0x12c>
    fba4:	8ca5883a 	add	r18,r17,r18
    fba8:	10ffffc4 	addi	r3,r2,-1
    fbac:	9440f136 	bltu	r18,r17,ff74 <__udivdi3+0x4e8>
    fbb0:	9500f02e 	bgeu	r18,r20,ff74 <__udivdi3+0x4e8>
    fbb4:	10bfff84 	addi	r2,r2,-2
    fbb8:	b00c943a 	slli	r6,r22,16
    fbbc:	0007883a 	mov	r3,zero
    fbc0:	3084b03a 	or	r2,r6,r2
    fbc4:	00005906 	br	fd2c <__udivdi3+0x2a0>
    fbc8:	29c05636 	bltu	r5,r7,fd24 <__udivdi3+0x298>
    fbcc:	00bfffd4 	movui	r2,65535
    fbd0:	11c0622e 	bgeu	r2,r7,fd5c <__udivdi3+0x2d0>
    fbd4:	00804034 	movhi	r2,256
    fbd8:	10bfffc4 	addi	r2,r2,-1
    fbdc:	11c0ee36 	bltu	r2,r7,ff98 <__udivdi3+0x50c>
    fbe0:	00800404 	movi	r2,16
    fbe4:	3886d83a 	srl	r3,r7,r2
    fbe8:	01000074 	movhi	r4,1
    fbec:	210d5644 	addi	r4,r4,13657
    fbf0:	20c7883a 	add	r3,r4,r3
    fbf4:	18c00003 	ldbu	r3,0(r3)
    fbf8:	05400804 	movi	r21,32
    fbfc:	1885883a 	add	r2,r3,r2
    fc00:	a8abc83a 	sub	r21,r21,r2
    fc04:	a800621e 	bne	r21,zero,fd90 <__udivdi3+0x304>
    fc08:	3c00e936 	bltu	r7,r16,ffb0 <__udivdi3+0x524>
    fc0c:	9985403a 	cmpgeu	r2,r19,r6
    fc10:	0007883a 	mov	r3,zero
    fc14:	00004506 	br	fd2c <__udivdi3+0x2a0>
    fc18:	3000041e 	bne	r6,zero,fc2c <__udivdi3+0x1a0>
    fc1c:	000b883a 	mov	r5,zero
    fc20:	01000044 	movi	r4,1
    fc24:	00060700 	call	6070 <__udivsi3>
    fc28:	1023883a 	mov	r17,r2
    fc2c:	00bfffd4 	movui	r2,65535
    fc30:	14404e2e 	bgeu	r2,r17,fd6c <__udivdi3+0x2e0>
    fc34:	00804034 	movhi	r2,256
    fc38:	10bfffc4 	addi	r2,r2,-1
    fc3c:	1440d836 	bltu	r2,r17,ffa0 <__udivdi3+0x514>
    fc40:	00800404 	movi	r2,16
    fc44:	8886d83a 	srl	r3,r17,r2
    fc48:	01000074 	movhi	r4,1
    fc4c:	210d5644 	addi	r4,r4,13657
    fc50:	20c7883a 	add	r3,r4,r3
    fc54:	18c00003 	ldbu	r3,0(r3)
    fc58:	1885883a 	add	r2,r3,r2
    fc5c:	00c00804 	movi	r3,32
    fc60:	1887c83a 	sub	r3,r3,r2
    fc64:	18008f1e 	bne	r3,zero,fea4 <__udivdi3+0x418>
    fc68:	882ad43a 	srli	r21,r17,16
    fc6c:	8461c83a 	sub	r16,r16,r17
    fc70:	8d3fffcc 	andi	r20,r17,65535
    fc74:	00c00044 	movi	r3,1
    fc78:	8009883a 	mov	r4,r16
    fc7c:	a80b883a 	mov	r5,r21
    fc80:	d8c00015 	stw	r3,0(sp)
    fc84:	00060d40 	call	60d4 <__umodsi3>
    fc88:	8009883a 	mov	r4,r16
    fc8c:	a80b883a 	mov	r5,r21
    fc90:	1027883a 	mov	r19,r2
    fc94:	00060700 	call	6070 <__udivsi3>
    fc98:	9826943a 	slli	r19,r19,16
    fc9c:	9008d43a 	srli	r4,r18,16
    fca0:	1521383a 	mul	r16,r2,r20
    fca4:	102d883a 	mov	r22,r2
    fca8:	24c8b03a 	or	r4,r4,r19
    fcac:	d8c00017 	ldw	r3,0(sp)
    fcb0:	2400052e 	bgeu	r4,r16,fcc8 <__udivdi3+0x23c>
    fcb4:	2449883a 	add	r4,r4,r17
    fcb8:	b0bfffc4 	addi	r2,r22,-1
    fcbc:	24400136 	bltu	r4,r17,fcc4 <__udivdi3+0x238>
    fcc0:	2400ca36 	bltu	r4,r16,ffec <__udivdi3+0x560>
    fcc4:	102d883a 	mov	r22,r2
    fcc8:	2421c83a 	sub	r16,r4,r16
    fccc:	a80b883a 	mov	r5,r21
    fcd0:	8009883a 	mov	r4,r16
    fcd4:	d8c00015 	stw	r3,0(sp)
    fcd8:	00060d40 	call	60d4 <__umodsi3>
    fcdc:	1027883a 	mov	r19,r2
    fce0:	a80b883a 	mov	r5,r21
    fce4:	8009883a 	mov	r4,r16
    fce8:	00060700 	call	6070 <__udivsi3>
    fcec:	9826943a 	slli	r19,r19,16
    fcf0:	1529383a 	mul	r20,r2,r20
    fcf4:	94bfffcc 	andi	r18,r18,65535
    fcf8:	94e4b03a 	or	r18,r18,r19
    fcfc:	d8c00017 	ldw	r3,0(sp)
    fd00:	9500052e 	bgeu	r18,r20,fd18 <__udivdi3+0x28c>
    fd04:	8ca5883a 	add	r18,r17,r18
    fd08:	113fffc4 	addi	r4,r2,-1
    fd0c:	94409736 	bltu	r18,r17,ff6c <__udivdi3+0x4e0>
    fd10:	9500962e 	bgeu	r18,r20,ff6c <__udivdi3+0x4e0>
    fd14:	10bfff84 	addi	r2,r2,-2
    fd18:	b00c943a 	slli	r6,r22,16
    fd1c:	3084b03a 	or	r2,r6,r2
    fd20:	00000206 	br	fd2c <__udivdi3+0x2a0>
    fd24:	0007883a 	mov	r3,zero
    fd28:	0005883a 	mov	r2,zero
    fd2c:	dfc00a17 	ldw	ra,40(sp)
    fd30:	df000917 	ldw	fp,36(sp)
    fd34:	ddc00817 	ldw	r23,32(sp)
    fd38:	dd800717 	ldw	r22,28(sp)
    fd3c:	dd400617 	ldw	r21,24(sp)
    fd40:	dd000517 	ldw	r20,20(sp)
    fd44:	dcc00417 	ldw	r19,16(sp)
    fd48:	dc800317 	ldw	r18,12(sp)
    fd4c:	dc400217 	ldw	r17,8(sp)
    fd50:	dc000117 	ldw	r16,4(sp)
    fd54:	dec00b04 	addi	sp,sp,44
    fd58:	f800283a 	ret
    fd5c:	00803fc4 	movi	r2,255
    fd60:	11c5803a 	cmpltu	r2,r2,r7
    fd64:	100490fa 	slli	r2,r2,3
    fd68:	003f9e06 	br	fbe4 <__alt_mem_onchip_memory+0xf780fbe4>
    fd6c:	00803fc4 	movi	r2,255
    fd70:	1445803a 	cmpltu	r2,r2,r17
    fd74:	100490fa 	slli	r2,r2,3
    fd78:	003fb206 	br	fc44 <__alt_mem_onchip_memory+0xf780fc44>
    fd7c:	00804034 	movhi	r2,256
    fd80:	10bfffc4 	addi	r2,r2,-1
    fd84:	11808836 	bltu	r2,r6,ffa8 <__udivdi3+0x51c>
    fd88:	00800404 	movi	r2,16
    fd8c:	003f5606 	br	fae8 <__alt_mem_onchip_memory+0xf780fae8>
    fd90:	30aed83a 	srl	r23,r6,r2
    fd94:	3d4e983a 	sll	r7,r7,r21
    fd98:	80acd83a 	srl	r22,r16,r2
    fd9c:	9884d83a 	srl	r2,r19,r2
    fda0:	3deeb03a 	or	r23,r7,r23
    fda4:	b824d43a 	srli	r18,r23,16
    fda8:	8560983a 	sll	r16,r16,r21
    fdac:	b009883a 	mov	r4,r22
    fdb0:	900b883a 	mov	r5,r18
    fdb4:	3568983a 	sll	r20,r6,r21
    fdb8:	1420b03a 	or	r16,r2,r16
    fdbc:	00060d40 	call	60d4 <__umodsi3>
    fdc0:	b009883a 	mov	r4,r22
    fdc4:	900b883a 	mov	r5,r18
    fdc8:	1023883a 	mov	r17,r2
    fdcc:	00060700 	call	6070 <__udivsi3>
    fdd0:	8808943a 	slli	r4,r17,16
    fdd4:	bf3fffcc 	andi	fp,r23,65535
    fdd8:	8006d43a 	srli	r3,r16,16
    fddc:	e0a3383a 	mul	r17,fp,r2
    fde0:	100d883a 	mov	r6,r2
    fde4:	1906b03a 	or	r3,r3,r4
    fde8:	1c40042e 	bgeu	r3,r17,fdfc <__udivdi3+0x370>
    fdec:	1dc7883a 	add	r3,r3,r23
    fdf0:	10bfffc4 	addi	r2,r2,-1
    fdf4:	1dc0752e 	bgeu	r3,r23,ffcc <__udivdi3+0x540>
    fdf8:	100d883a 	mov	r6,r2
    fdfc:	1c63c83a 	sub	r17,r3,r17
    fe00:	900b883a 	mov	r5,r18
    fe04:	8809883a 	mov	r4,r17
    fe08:	d9800015 	stw	r6,0(sp)
    fe0c:	00060d40 	call	60d4 <__umodsi3>
    fe10:	102d883a 	mov	r22,r2
    fe14:	8809883a 	mov	r4,r17
    fe18:	900b883a 	mov	r5,r18
    fe1c:	00060700 	call	6070 <__udivsi3>
    fe20:	b02c943a 	slli	r22,r22,16
    fe24:	e089383a 	mul	r4,fp,r2
    fe28:	843fffcc 	andi	r16,r16,65535
    fe2c:	85a0b03a 	or	r16,r16,r22
    fe30:	d9800017 	ldw	r6,0(sp)
    fe34:	8100042e 	bgeu	r16,r4,fe48 <__udivdi3+0x3bc>
    fe38:	85e1883a 	add	r16,r16,r23
    fe3c:	10ffffc4 	addi	r3,r2,-1
    fe40:	85c05e2e 	bgeu	r16,r23,ffbc <__udivdi3+0x530>
    fe44:	1805883a 	mov	r2,r3
    fe48:	300c943a 	slli	r6,r6,16
    fe4c:	a17fffcc 	andi	r5,r20,65535
    fe50:	a028d43a 	srli	r20,r20,16
    fe54:	3084b03a 	or	r2,r6,r2
    fe58:	10ffffcc 	andi	r3,r2,65535
    fe5c:	100cd43a 	srli	r6,r2,16
    fe60:	194f383a 	mul	r7,r3,r5
    fe64:	1d07383a 	mul	r3,r3,r20
    fe68:	314b383a 	mul	r5,r6,r5
    fe6c:	3810d43a 	srli	r8,r7,16
    fe70:	8121c83a 	sub	r16,r16,r4
    fe74:	1947883a 	add	r3,r3,r5
    fe78:	40c7883a 	add	r3,r8,r3
    fe7c:	350d383a 	mul	r6,r6,r20
    fe80:	1940022e 	bgeu	r3,r5,fe8c <__udivdi3+0x400>
    fe84:	01000074 	movhi	r4,1
    fe88:	310d883a 	add	r6,r6,r4
    fe8c:	1828d43a 	srli	r20,r3,16
    fe90:	a18d883a 	add	r6,r20,r6
    fe94:	81803e36 	bltu	r16,r6,ff90 <__udivdi3+0x504>
    fe98:	81803826 	beq	r16,r6,ff7c <__udivdi3+0x4f0>
    fe9c:	0007883a 	mov	r3,zero
    fea0:	003fa206 	br	fd2c <__alt_mem_onchip_memory+0xf780fd2c>
    fea4:	88e2983a 	sll	r17,r17,r3
    fea8:	80a8d83a 	srl	r20,r16,r2
    feac:	80e0983a 	sll	r16,r16,r3
    feb0:	882ad43a 	srli	r21,r17,16
    feb4:	9884d83a 	srl	r2,r19,r2
    feb8:	a009883a 	mov	r4,r20
    febc:	a80b883a 	mov	r5,r21
    fec0:	142eb03a 	or	r23,r2,r16
    fec4:	98e4983a 	sll	r18,r19,r3
    fec8:	00060d40 	call	60d4 <__umodsi3>
    fecc:	a009883a 	mov	r4,r20
    fed0:	a80b883a 	mov	r5,r21
    fed4:	1021883a 	mov	r16,r2
    fed8:	00060700 	call	6070 <__udivsi3>
    fedc:	1039883a 	mov	fp,r2
    fee0:	8d3fffcc 	andi	r20,r17,65535
    fee4:	8020943a 	slli	r16,r16,16
    fee8:	b804d43a 	srli	r2,r23,16
    feec:	a72d383a 	mul	r22,r20,fp
    fef0:	1404b03a 	or	r2,r2,r16
    fef4:	1580062e 	bgeu	r2,r22,ff10 <__udivdi3+0x484>
    fef8:	1445883a 	add	r2,r2,r17
    fefc:	e0ffffc4 	addi	r3,fp,-1
    ff00:	14403836 	bltu	r2,r17,ffe4 <__udivdi3+0x558>
    ff04:	1580372e 	bgeu	r2,r22,ffe4 <__udivdi3+0x558>
    ff08:	e73fff84 	addi	fp,fp,-2
    ff0c:	1445883a 	add	r2,r2,r17
    ff10:	15adc83a 	sub	r22,r2,r22
    ff14:	a80b883a 	mov	r5,r21
    ff18:	b009883a 	mov	r4,r22
    ff1c:	00060d40 	call	60d4 <__umodsi3>
    ff20:	1027883a 	mov	r19,r2
    ff24:	b009883a 	mov	r4,r22
    ff28:	a80b883a 	mov	r5,r21
    ff2c:	00060700 	call	6070 <__udivsi3>
    ff30:	9826943a 	slli	r19,r19,16
    ff34:	a0a1383a 	mul	r16,r20,r2
    ff38:	b93fffcc 	andi	r4,r23,65535
    ff3c:	24c8b03a 	or	r4,r4,r19
    ff40:	2400062e 	bgeu	r4,r16,ff5c <__udivdi3+0x4d0>
    ff44:	2449883a 	add	r4,r4,r17
    ff48:	10ffffc4 	addi	r3,r2,-1
    ff4c:	24402336 	bltu	r4,r17,ffdc <__udivdi3+0x550>
    ff50:	2400222e 	bgeu	r4,r16,ffdc <__udivdi3+0x550>
    ff54:	10bfff84 	addi	r2,r2,-2
    ff58:	2449883a 	add	r4,r4,r17
    ff5c:	e038943a 	slli	fp,fp,16
    ff60:	2421c83a 	sub	r16,r4,r16
    ff64:	e086b03a 	or	r3,fp,r2
    ff68:	003f4306 	br	fc78 <__alt_mem_onchip_memory+0xf780fc78>
    ff6c:	2005883a 	mov	r2,r4
    ff70:	003f6906 	br	fd18 <__alt_mem_onchip_memory+0xf780fd18>
    ff74:	1805883a 	mov	r2,r3
    ff78:	003f0f06 	br	fbb8 <__alt_mem_onchip_memory+0xf780fbb8>
    ff7c:	1806943a 	slli	r3,r3,16
    ff80:	9d66983a 	sll	r19,r19,r21
    ff84:	39ffffcc 	andi	r7,r7,65535
    ff88:	19c7883a 	add	r3,r3,r7
    ff8c:	98ffc32e 	bgeu	r19,r3,fe9c <__alt_mem_onchip_memory+0xf780fe9c>
    ff90:	10bfffc4 	addi	r2,r2,-1
    ff94:	003fc106 	br	fe9c <__alt_mem_onchip_memory+0xf780fe9c>
    ff98:	00800604 	movi	r2,24
    ff9c:	003f1106 	br	fbe4 <__alt_mem_onchip_memory+0xf780fbe4>
    ffa0:	00800604 	movi	r2,24
    ffa4:	003f2706 	br	fc44 <__alt_mem_onchip_memory+0xf780fc44>
    ffa8:	00800604 	movi	r2,24
    ffac:	003ece06 	br	fae8 <__alt_mem_onchip_memory+0xf780fae8>
    ffb0:	0007883a 	mov	r3,zero
    ffb4:	00800044 	movi	r2,1
    ffb8:	003f5c06 	br	fd2c <__alt_mem_onchip_memory+0xf780fd2c>
    ffbc:	813fa12e 	bgeu	r16,r4,fe44 <__alt_mem_onchip_memory+0xf780fe44>
    ffc0:	10bfff84 	addi	r2,r2,-2
    ffc4:	85e1883a 	add	r16,r16,r23
    ffc8:	003f9f06 	br	fe48 <__alt_mem_onchip_memory+0xf780fe48>
    ffcc:	1c7f8a2e 	bgeu	r3,r17,fdf8 <__alt_mem_onchip_memory+0xf780fdf8>
    ffd0:	31bfff84 	addi	r6,r6,-2
    ffd4:	1dc7883a 	add	r3,r3,r23
    ffd8:	003f8806 	br	fdfc <__alt_mem_onchip_memory+0xf780fdfc>
    ffdc:	1805883a 	mov	r2,r3
    ffe0:	003fde06 	br	ff5c <__alt_mem_onchip_memory+0xf780ff5c>
    ffe4:	1839883a 	mov	fp,r3
    ffe8:	003fc906 	br	ff10 <__alt_mem_onchip_memory+0xf780ff10>
    ffec:	b5bfff84 	addi	r22,r22,-2
    fff0:	2449883a 	add	r4,r4,r17
    fff4:	003f3406 	br	fcc8 <__alt_mem_onchip_memory+0xf780fcc8>
    fff8:	b5bfff84 	addi	r22,r22,-2
    fffc:	1445883a 	add	r2,r2,r17
   10000:	003edb06 	br	fb70 <__alt_mem_onchip_memory+0xf780fb70>

00010004 <__umoddi3>:
   10004:	defff404 	addi	sp,sp,-48
   10008:	df000a15 	stw	fp,40(sp)
   1000c:	dc400315 	stw	r17,12(sp)
   10010:	dc000215 	stw	r16,8(sp)
   10014:	dfc00b15 	stw	ra,44(sp)
   10018:	ddc00915 	stw	r23,36(sp)
   1001c:	dd800815 	stw	r22,32(sp)
   10020:	dd400715 	stw	r21,28(sp)
   10024:	dd000615 	stw	r20,24(sp)
   10028:	dcc00515 	stw	r19,20(sp)
   1002c:	dc800415 	stw	r18,16(sp)
   10030:	2021883a 	mov	r16,r4
   10034:	2823883a 	mov	r17,r5
   10038:	2839883a 	mov	fp,r5
   1003c:	38003c1e 	bne	r7,zero,10130 <__umoddi3+0x12c>
   10040:	3027883a 	mov	r19,r6
   10044:	2029883a 	mov	r20,r4
   10048:	2980512e 	bgeu	r5,r6,10190 <__umoddi3+0x18c>
   1004c:	00bfffd4 	movui	r2,65535
   10050:	11809a36 	bltu	r2,r6,102bc <__umoddi3+0x2b8>
   10054:	01003fc4 	movi	r4,255
   10058:	2189803a 	cmpltu	r4,r4,r6
   1005c:	200890fa 	slli	r4,r4,3
   10060:	3104d83a 	srl	r2,r6,r4
   10064:	00c00074 	movhi	r3,1
   10068:	18cd5644 	addi	r3,r3,13657
   1006c:	1885883a 	add	r2,r3,r2
   10070:	10c00003 	ldbu	r3,0(r2)
   10074:	00800804 	movi	r2,32
   10078:	1909883a 	add	r4,r3,r4
   1007c:	1125c83a 	sub	r18,r2,r4
   10080:	90000526 	beq	r18,zero,10098 <__umoddi3+0x94>
   10084:	8ca2983a 	sll	r17,r17,r18
   10088:	8108d83a 	srl	r4,r16,r4
   1008c:	34a6983a 	sll	r19,r6,r18
   10090:	84a8983a 	sll	r20,r16,r18
   10094:	2478b03a 	or	fp,r4,r17
   10098:	982ed43a 	srli	r23,r19,16
   1009c:	e009883a 	mov	r4,fp
   100a0:	9dbfffcc 	andi	r22,r19,65535
   100a4:	b80b883a 	mov	r5,r23
   100a8:	00060d40 	call	60d4 <__umodsi3>
   100ac:	e009883a 	mov	r4,fp
   100b0:	b80b883a 	mov	r5,r23
   100b4:	102b883a 	mov	r21,r2
   100b8:	00060700 	call	6070 <__udivsi3>
   100bc:	a806943a 	slli	r3,r21,16
   100c0:	a008d43a 	srli	r4,r20,16
   100c4:	b085383a 	mul	r2,r22,r2
   100c8:	20c8b03a 	or	r4,r4,r3
   100cc:	2080032e 	bgeu	r4,r2,100dc <__umoddi3+0xd8>
   100d0:	24c9883a 	add	r4,r4,r19
   100d4:	24c00136 	bltu	r4,r19,100dc <__umoddi3+0xd8>
   100d8:	20811036 	bltu	r4,r2,1051c <__umoddi3+0x518>
   100dc:	20abc83a 	sub	r21,r4,r2
   100e0:	b80b883a 	mov	r5,r23
   100e4:	a809883a 	mov	r4,r21
   100e8:	00060d40 	call	60d4 <__umodsi3>
   100ec:	1023883a 	mov	r17,r2
   100f0:	b80b883a 	mov	r5,r23
   100f4:	a809883a 	mov	r4,r21
   100f8:	00060700 	call	6070 <__udivsi3>
   100fc:	8822943a 	slli	r17,r17,16
   10100:	b085383a 	mul	r2,r22,r2
   10104:	a0ffffcc 	andi	r3,r20,65535
   10108:	1c46b03a 	or	r3,r3,r17
   1010c:	1880042e 	bgeu	r3,r2,10120 <__umoddi3+0x11c>
   10110:	1cc7883a 	add	r3,r3,r19
   10114:	1cc00236 	bltu	r3,r19,10120 <__umoddi3+0x11c>
   10118:	1880012e 	bgeu	r3,r2,10120 <__umoddi3+0x11c>
   1011c:	1cc7883a 	add	r3,r3,r19
   10120:	1885c83a 	sub	r2,r3,r2
   10124:	1484d83a 	srl	r2,r2,r18
   10128:	0007883a 	mov	r3,zero
   1012c:	00004f06 	br	1026c <__umoddi3+0x268>
   10130:	29c04c36 	bltu	r5,r7,10264 <__umoddi3+0x260>
   10134:	00bfffd4 	movui	r2,65535
   10138:	11c0582e 	bgeu	r2,r7,1029c <__umoddi3+0x298>
   1013c:	00804034 	movhi	r2,256
   10140:	10bfffc4 	addi	r2,r2,-1
   10144:	11c0e736 	bltu	r2,r7,104e4 <__umoddi3+0x4e0>
   10148:	01000404 	movi	r4,16
   1014c:	3904d83a 	srl	r2,r7,r4
   10150:	00c00074 	movhi	r3,1
   10154:	18cd5644 	addi	r3,r3,13657
   10158:	1885883a 	add	r2,r3,r2
   1015c:	14c00003 	ldbu	r19,0(r2)
   10160:	00c00804 	movi	r3,32
   10164:	9927883a 	add	r19,r19,r4
   10168:	1ce9c83a 	sub	r20,r3,r19
   1016c:	a000581e 	bne	r20,zero,102d0 <__umoddi3+0x2cc>
   10170:	3c400136 	bltu	r7,r17,10178 <__umoddi3+0x174>
   10174:	8180eb36 	bltu	r16,r6,10524 <__umoddi3+0x520>
   10178:	8185c83a 	sub	r2,r16,r6
   1017c:	89e3c83a 	sub	r17,r17,r7
   10180:	8089803a 	cmpltu	r4,r16,r2
   10184:	8939c83a 	sub	fp,r17,r4
   10188:	e007883a 	mov	r3,fp
   1018c:	00003706 	br	1026c <__umoddi3+0x268>
   10190:	3000041e 	bne	r6,zero,101a4 <__umoddi3+0x1a0>
   10194:	000b883a 	mov	r5,zero
   10198:	01000044 	movi	r4,1
   1019c:	00060700 	call	6070 <__udivsi3>
   101a0:	1027883a 	mov	r19,r2
   101a4:	00bfffd4 	movui	r2,65535
   101a8:	14c0402e 	bgeu	r2,r19,102ac <__umoddi3+0x2a8>
   101ac:	00804034 	movhi	r2,256
   101b0:	10bfffc4 	addi	r2,r2,-1
   101b4:	14c0cd36 	bltu	r2,r19,104ec <__umoddi3+0x4e8>
   101b8:	00800404 	movi	r2,16
   101bc:	9886d83a 	srl	r3,r19,r2
   101c0:	01000074 	movhi	r4,1
   101c4:	210d5644 	addi	r4,r4,13657
   101c8:	20c7883a 	add	r3,r4,r3
   101cc:	18c00003 	ldbu	r3,0(r3)
   101d0:	1887883a 	add	r3,r3,r2
   101d4:	00800804 	movi	r2,32
   101d8:	10e5c83a 	sub	r18,r2,r3
   101dc:	9000901e 	bne	r18,zero,10420 <__umoddi3+0x41c>
   101e0:	982cd43a 	srli	r22,r19,16
   101e4:	8ce3c83a 	sub	r17,r17,r19
   101e8:	9d7fffcc 	andi	r21,r19,65535
   101ec:	b00b883a 	mov	r5,r22
   101f0:	8809883a 	mov	r4,r17
   101f4:	00060d40 	call	60d4 <__umodsi3>
   101f8:	8809883a 	mov	r4,r17
   101fc:	b00b883a 	mov	r5,r22
   10200:	1021883a 	mov	r16,r2
   10204:	00060700 	call	6070 <__udivsi3>
   10208:	8006943a 	slli	r3,r16,16
   1020c:	a008d43a 	srli	r4,r20,16
   10210:	1545383a 	mul	r2,r2,r21
   10214:	20c8b03a 	or	r4,r4,r3
   10218:	2080042e 	bgeu	r4,r2,1022c <__umoddi3+0x228>
   1021c:	24c9883a 	add	r4,r4,r19
   10220:	24c00236 	bltu	r4,r19,1022c <__umoddi3+0x228>
   10224:	2080012e 	bgeu	r4,r2,1022c <__umoddi3+0x228>
   10228:	24c9883a 	add	r4,r4,r19
   1022c:	20a1c83a 	sub	r16,r4,r2
   10230:	b00b883a 	mov	r5,r22
   10234:	8009883a 	mov	r4,r16
   10238:	00060d40 	call	60d4 <__umodsi3>
   1023c:	1023883a 	mov	r17,r2
   10240:	b00b883a 	mov	r5,r22
   10244:	8009883a 	mov	r4,r16
   10248:	00060700 	call	6070 <__udivsi3>
   1024c:	8822943a 	slli	r17,r17,16
   10250:	1545383a 	mul	r2,r2,r21
   10254:	a53fffcc 	andi	r20,r20,65535
   10258:	a446b03a 	or	r3,r20,r17
   1025c:	18bfb02e 	bgeu	r3,r2,10120 <__alt_mem_onchip_memory+0xf7810120>
   10260:	003fab06 	br	10110 <__alt_mem_onchip_memory+0xf7810110>
   10264:	2005883a 	mov	r2,r4
   10268:	2807883a 	mov	r3,r5
   1026c:	dfc00b17 	ldw	ra,44(sp)
   10270:	df000a17 	ldw	fp,40(sp)
   10274:	ddc00917 	ldw	r23,36(sp)
   10278:	dd800817 	ldw	r22,32(sp)
   1027c:	dd400717 	ldw	r21,28(sp)
   10280:	dd000617 	ldw	r20,24(sp)
   10284:	dcc00517 	ldw	r19,20(sp)
   10288:	dc800417 	ldw	r18,16(sp)
   1028c:	dc400317 	ldw	r17,12(sp)
   10290:	dc000217 	ldw	r16,8(sp)
   10294:	dec00c04 	addi	sp,sp,48
   10298:	f800283a 	ret
   1029c:	04c03fc4 	movi	r19,255
   102a0:	99c9803a 	cmpltu	r4,r19,r7
   102a4:	200890fa 	slli	r4,r4,3
   102a8:	003fa806 	br	1014c <__alt_mem_onchip_memory+0xf781014c>
   102ac:	00803fc4 	movi	r2,255
   102b0:	14c5803a 	cmpltu	r2,r2,r19
   102b4:	100490fa 	slli	r2,r2,3
   102b8:	003fc006 	br	101bc <__alt_mem_onchip_memory+0xf78101bc>
   102bc:	00804034 	movhi	r2,256
   102c0:	10bfffc4 	addi	r2,r2,-1
   102c4:	11808b36 	bltu	r2,r6,104f4 <__umoddi3+0x4f0>
   102c8:	01000404 	movi	r4,16
   102cc:	003f6406 	br	10060 <__alt_mem_onchip_memory+0xf7810060>
   102d0:	34c4d83a 	srl	r2,r6,r19
   102d4:	3d0e983a 	sll	r7,r7,r20
   102d8:	8cf8d83a 	srl	fp,r17,r19
   102dc:	8d10983a 	sll	r8,r17,r20
   102e0:	38aab03a 	or	r21,r7,r2
   102e4:	a82cd43a 	srli	r22,r21,16
   102e8:	84e2d83a 	srl	r17,r16,r19
   102ec:	e009883a 	mov	r4,fp
   102f0:	b00b883a 	mov	r5,r22
   102f4:	8a22b03a 	or	r17,r17,r8
   102f8:	3524983a 	sll	r18,r6,r20
   102fc:	00060d40 	call	60d4 <__umodsi3>
   10300:	e009883a 	mov	r4,fp
   10304:	b00b883a 	mov	r5,r22
   10308:	102f883a 	mov	r23,r2
   1030c:	00060700 	call	6070 <__udivsi3>
   10310:	100d883a 	mov	r6,r2
   10314:	b808943a 	slli	r4,r23,16
   10318:	aa3fffcc 	andi	r8,r21,65535
   1031c:	8804d43a 	srli	r2,r17,16
   10320:	41af383a 	mul	r23,r8,r6
   10324:	8520983a 	sll	r16,r16,r20
   10328:	1104b03a 	or	r2,r2,r4
   1032c:	15c0042e 	bgeu	r2,r23,10340 <__umoddi3+0x33c>
   10330:	1545883a 	add	r2,r2,r21
   10334:	30ffffc4 	addi	r3,r6,-1
   10338:	1540742e 	bgeu	r2,r21,1050c <__umoddi3+0x508>
   1033c:	180d883a 	mov	r6,r3
   10340:	15efc83a 	sub	r23,r2,r23
   10344:	b00b883a 	mov	r5,r22
   10348:	b809883a 	mov	r4,r23
   1034c:	d9800115 	stw	r6,4(sp)
   10350:	da000015 	stw	r8,0(sp)
   10354:	00060d40 	call	60d4 <__umodsi3>
   10358:	b00b883a 	mov	r5,r22
   1035c:	b809883a 	mov	r4,r23
   10360:	1039883a 	mov	fp,r2
   10364:	00060700 	call	6070 <__udivsi3>
   10368:	da000017 	ldw	r8,0(sp)
   1036c:	e038943a 	slli	fp,fp,16
   10370:	100b883a 	mov	r5,r2
   10374:	4089383a 	mul	r4,r8,r2
   10378:	8a3fffcc 	andi	r8,r17,65535
   1037c:	4710b03a 	or	r8,r8,fp
   10380:	d9800117 	ldw	r6,4(sp)
   10384:	4100042e 	bgeu	r8,r4,10398 <__umoddi3+0x394>
   10388:	4551883a 	add	r8,r8,r21
   1038c:	10bfffc4 	addi	r2,r2,-1
   10390:	45405a2e 	bgeu	r8,r21,104fc <__umoddi3+0x4f8>
   10394:	100b883a 	mov	r5,r2
   10398:	300c943a 	slli	r6,r6,16
   1039c:	91ffffcc 	andi	r7,r18,65535
   103a0:	9004d43a 	srli	r2,r18,16
   103a4:	314cb03a 	or	r6,r6,r5
   103a8:	317fffcc 	andi	r5,r6,65535
   103ac:	300cd43a 	srli	r6,r6,16
   103b0:	29d3383a 	mul	r9,r5,r7
   103b4:	288b383a 	mul	r5,r5,r2
   103b8:	31cf383a 	mul	r7,r6,r7
   103bc:	4806d43a 	srli	r3,r9,16
   103c0:	4111c83a 	sub	r8,r8,r4
   103c4:	29cb883a 	add	r5,r5,r7
   103c8:	194b883a 	add	r5,r3,r5
   103cc:	3085383a 	mul	r2,r6,r2
   103d0:	29c0022e 	bgeu	r5,r7,103dc <__umoddi3+0x3d8>
   103d4:	00c00074 	movhi	r3,1
   103d8:	10c5883a 	add	r2,r2,r3
   103dc:	2808d43a 	srli	r4,r5,16
   103e0:	280a943a 	slli	r5,r5,16
   103e4:	4a7fffcc 	andi	r9,r9,65535
   103e8:	2085883a 	add	r2,r4,r2
   103ec:	2a4b883a 	add	r5,r5,r9
   103f0:	40803636 	bltu	r8,r2,104cc <__umoddi3+0x4c8>
   103f4:	40804d26 	beq	r8,r2,1052c <__umoddi3+0x528>
   103f8:	4089c83a 	sub	r4,r8,r2
   103fc:	280f883a 	mov	r7,r5
   10400:	81cfc83a 	sub	r7,r16,r7
   10404:	81c7803a 	cmpltu	r3,r16,r7
   10408:	20c7c83a 	sub	r3,r4,r3
   1040c:	1cc4983a 	sll	r2,r3,r19
   10410:	3d0ed83a 	srl	r7,r7,r20
   10414:	1d06d83a 	srl	r3,r3,r20
   10418:	11c4b03a 	or	r2,r2,r7
   1041c:	003f9306 	br	1026c <__alt_mem_onchip_memory+0xf781026c>
   10420:	9ca6983a 	sll	r19,r19,r18
   10424:	88e8d83a 	srl	r20,r17,r3
   10428:	80c4d83a 	srl	r2,r16,r3
   1042c:	982cd43a 	srli	r22,r19,16
   10430:	8ca2983a 	sll	r17,r17,r18
   10434:	a009883a 	mov	r4,r20
   10438:	b00b883a 	mov	r5,r22
   1043c:	1478b03a 	or	fp,r2,r17
   10440:	00060d40 	call	60d4 <__umodsi3>
   10444:	a009883a 	mov	r4,r20
   10448:	b00b883a 	mov	r5,r22
   1044c:	1023883a 	mov	r17,r2
   10450:	00060700 	call	6070 <__udivsi3>
   10454:	9d7fffcc 	andi	r21,r19,65535
   10458:	880a943a 	slli	r5,r17,16
   1045c:	e008d43a 	srli	r4,fp,16
   10460:	a885383a 	mul	r2,r21,r2
   10464:	84a8983a 	sll	r20,r16,r18
   10468:	2148b03a 	or	r4,r4,r5
   1046c:	2080042e 	bgeu	r4,r2,10480 <__umoddi3+0x47c>
   10470:	24c9883a 	add	r4,r4,r19
   10474:	24c00236 	bltu	r4,r19,10480 <__umoddi3+0x47c>
   10478:	2080012e 	bgeu	r4,r2,10480 <__umoddi3+0x47c>
   1047c:	24c9883a 	add	r4,r4,r19
   10480:	20a3c83a 	sub	r17,r4,r2
   10484:	b00b883a 	mov	r5,r22
   10488:	8809883a 	mov	r4,r17
   1048c:	00060d40 	call	60d4 <__umodsi3>
   10490:	102f883a 	mov	r23,r2
   10494:	8809883a 	mov	r4,r17
   10498:	b00b883a 	mov	r5,r22
   1049c:	00060700 	call	6070 <__udivsi3>
   104a0:	b82e943a 	slli	r23,r23,16
   104a4:	a885383a 	mul	r2,r21,r2
   104a8:	e13fffcc 	andi	r4,fp,65535
   104ac:	25c8b03a 	or	r4,r4,r23
   104b0:	2080042e 	bgeu	r4,r2,104c4 <__umoddi3+0x4c0>
   104b4:	24c9883a 	add	r4,r4,r19
   104b8:	24c00236 	bltu	r4,r19,104c4 <__umoddi3+0x4c0>
   104bc:	2080012e 	bgeu	r4,r2,104c4 <__umoddi3+0x4c0>
   104c0:	24c9883a 	add	r4,r4,r19
   104c4:	20a3c83a 	sub	r17,r4,r2
   104c8:	003f4806 	br	101ec <__alt_mem_onchip_memory+0xf78101ec>
   104cc:	2c8fc83a 	sub	r7,r5,r18
   104d0:	1545c83a 	sub	r2,r2,r21
   104d4:	29cb803a 	cmpltu	r5,r5,r7
   104d8:	1145c83a 	sub	r2,r2,r5
   104dc:	4089c83a 	sub	r4,r8,r2
   104e0:	003fc706 	br	10400 <__alt_mem_onchip_memory+0xf7810400>
   104e4:	01000604 	movi	r4,24
   104e8:	003f1806 	br	1014c <__alt_mem_onchip_memory+0xf781014c>
   104ec:	00800604 	movi	r2,24
   104f0:	003f3206 	br	101bc <__alt_mem_onchip_memory+0xf78101bc>
   104f4:	01000604 	movi	r4,24
   104f8:	003ed906 	br	10060 <__alt_mem_onchip_memory+0xf7810060>
   104fc:	413fa52e 	bgeu	r8,r4,10394 <__alt_mem_onchip_memory+0xf7810394>
   10500:	297fff84 	addi	r5,r5,-2
   10504:	4551883a 	add	r8,r8,r21
   10508:	003fa306 	br	10398 <__alt_mem_onchip_memory+0xf7810398>
   1050c:	15ff8b2e 	bgeu	r2,r23,1033c <__alt_mem_onchip_memory+0xf781033c>
   10510:	31bfff84 	addi	r6,r6,-2
   10514:	1545883a 	add	r2,r2,r21
   10518:	003f8906 	br	10340 <__alt_mem_onchip_memory+0xf7810340>
   1051c:	24c9883a 	add	r4,r4,r19
   10520:	003eee06 	br	100dc <__alt_mem_onchip_memory+0xf78100dc>
   10524:	8005883a 	mov	r2,r16
   10528:	003f1706 	br	10188 <__alt_mem_onchip_memory+0xf7810188>
   1052c:	817fe736 	bltu	r16,r5,104cc <__alt_mem_onchip_memory+0xf78104cc>
   10530:	280f883a 	mov	r7,r5
   10534:	0009883a 	mov	r4,zero
   10538:	003fb106 	br	10400 <__alt_mem_onchip_memory+0xf7810400>

0001053c <__eqdf2>:
   1053c:	2804d53a 	srli	r2,r5,20
   10540:	3806d53a 	srli	r3,r7,20
   10544:	02000434 	movhi	r8,16
   10548:	423fffc4 	addi	r8,r8,-1
   1054c:	1081ffcc 	andi	r2,r2,2047
   10550:	0281ffc4 	movi	r10,2047
   10554:	2a12703a 	and	r9,r5,r8
   10558:	18c1ffcc 	andi	r3,r3,2047
   1055c:	3a10703a 	and	r8,r7,r8
   10560:	280ad7fa 	srli	r5,r5,31
   10564:	380ed7fa 	srli	r7,r7,31
   10568:	12801026 	beq	r2,r10,105ac <__eqdf2+0x70>
   1056c:	0281ffc4 	movi	r10,2047
   10570:	1a800a26 	beq	r3,r10,1059c <__eqdf2+0x60>
   10574:	10c00226 	beq	r2,r3,10580 <__eqdf2+0x44>
   10578:	00800044 	movi	r2,1
   1057c:	f800283a 	ret
   10580:	4a3ffd1e 	bne	r9,r8,10578 <__alt_mem_onchip_memory+0xf7810578>
   10584:	21bffc1e 	bne	r4,r6,10578 <__alt_mem_onchip_memory+0xf7810578>
   10588:	29c00c26 	beq	r5,r7,105bc <__eqdf2+0x80>
   1058c:	103ffa1e 	bne	r2,zero,10578 <__alt_mem_onchip_memory+0xf7810578>
   10590:	2244b03a 	or	r2,r4,r9
   10594:	1004c03a 	cmpne	r2,r2,zero
   10598:	f800283a 	ret
   1059c:	3214b03a 	or	r10,r6,r8
   105a0:	503ff426 	beq	r10,zero,10574 <__alt_mem_onchip_memory+0xf7810574>
   105a4:	00800044 	movi	r2,1
   105a8:	f800283a 	ret
   105ac:	2254b03a 	or	r10,r4,r9
   105b0:	503fee26 	beq	r10,zero,1056c <__alt_mem_onchip_memory+0xf781056c>
   105b4:	00800044 	movi	r2,1
   105b8:	f800283a 	ret
   105bc:	0005883a 	mov	r2,zero
   105c0:	f800283a 	ret

000105c4 <__floatunsidf>:
   105c4:	defffe04 	addi	sp,sp,-8
   105c8:	dc000015 	stw	r16,0(sp)
   105cc:	dfc00115 	stw	ra,4(sp)
   105d0:	2021883a 	mov	r16,r4
   105d4:	20002226 	beq	r4,zero,10660 <__floatunsidf+0x9c>
   105d8:	0005f140 	call	5f14 <__clzsi2>
   105dc:	01010784 	movi	r4,1054
   105e0:	2089c83a 	sub	r4,r4,r2
   105e4:	01810cc4 	movi	r6,1075
   105e8:	310dc83a 	sub	r6,r6,r4
   105ec:	00c007c4 	movi	r3,31
   105f0:	1980120e 	bge	r3,r6,1063c <__floatunsidf+0x78>
   105f4:	00c104c4 	movi	r3,1043
   105f8:	1907c83a 	sub	r3,r3,r4
   105fc:	80ca983a 	sll	r5,r16,r3
   10600:	00800434 	movhi	r2,16
   10604:	10bfffc4 	addi	r2,r2,-1
   10608:	2101ffcc 	andi	r4,r4,2047
   1060c:	0021883a 	mov	r16,zero
   10610:	288a703a 	and	r5,r5,r2
   10614:	2008953a 	slli	r4,r4,20
   10618:	00c00434 	movhi	r3,16
   1061c:	18ffffc4 	addi	r3,r3,-1
   10620:	28c6703a 	and	r3,r5,r3
   10624:	8005883a 	mov	r2,r16
   10628:	1906b03a 	or	r3,r3,r4
   1062c:	dfc00117 	ldw	ra,4(sp)
   10630:	dc000017 	ldw	r16,0(sp)
   10634:	dec00204 	addi	sp,sp,8
   10638:	f800283a 	ret
   1063c:	00c002c4 	movi	r3,11
   10640:	188bc83a 	sub	r5,r3,r2
   10644:	814ad83a 	srl	r5,r16,r5
   10648:	00c00434 	movhi	r3,16
   1064c:	18ffffc4 	addi	r3,r3,-1
   10650:	81a0983a 	sll	r16,r16,r6
   10654:	2101ffcc 	andi	r4,r4,2047
   10658:	28ca703a 	and	r5,r5,r3
   1065c:	003fed06 	br	10614 <__alt_mem_onchip_memory+0xf7810614>
   10660:	0009883a 	mov	r4,zero
   10664:	000b883a 	mov	r5,zero
   10668:	003fea06 	br	10614 <__alt_mem_onchip_memory+0xf7810614>

0001066c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1066c:	defffe04 	addi	sp,sp,-8
   10670:	dfc00115 	stw	ra,4(sp)
   10674:	df000015 	stw	fp,0(sp)
   10678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1067c:	d0a01017 	ldw	r2,-32704(gp)
   10680:	10000326 	beq	r2,zero,10690 <alt_get_errno+0x24>
   10684:	d0a01017 	ldw	r2,-32704(gp)
   10688:	103ee83a 	callr	r2
   1068c:	00000106 	br	10694 <alt_get_errno+0x28>
   10690:	d0a6dc04 	addi	r2,gp,-25744
}
   10694:	e037883a 	mov	sp,fp
   10698:	dfc00117 	ldw	ra,4(sp)
   1069c:	df000017 	ldw	fp,0(sp)
   106a0:	dec00204 	addi	sp,sp,8
   106a4:	f800283a 	ret

000106a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   106a8:	defffb04 	addi	sp,sp,-20
   106ac:	dfc00415 	stw	ra,16(sp)
   106b0:	df000315 	stw	fp,12(sp)
   106b4:	df000304 	addi	fp,sp,12
   106b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   106bc:	e0bfff17 	ldw	r2,-4(fp)
   106c0:	10000616 	blt	r2,zero,106dc <close+0x34>
   106c4:	e0bfff17 	ldw	r2,-4(fp)
   106c8:	10c00324 	muli	r3,r2,12
   106cc:	00800074 	movhi	r2,1
   106d0:	10908804 	addi	r2,r2,16928
   106d4:	1885883a 	add	r2,r3,r2
   106d8:	00000106 	br	106e0 <close+0x38>
   106dc:	0005883a 	mov	r2,zero
   106e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   106e4:	e0bffd17 	ldw	r2,-12(fp)
   106e8:	10001926 	beq	r2,zero,10750 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	10800017 	ldw	r2,0(r2)
   106f4:	10800417 	ldw	r2,16(r2)
   106f8:	10000626 	beq	r2,zero,10714 <close+0x6c>
   106fc:	e0bffd17 	ldw	r2,-12(fp)
   10700:	10800017 	ldw	r2,0(r2)
   10704:	10800417 	ldw	r2,16(r2)
   10708:	e13ffd17 	ldw	r4,-12(fp)
   1070c:	103ee83a 	callr	r2
   10710:	00000106 	br	10718 <close+0x70>
   10714:	0005883a 	mov	r2,zero
   10718:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1071c:	e13fff17 	ldw	r4,-4(fp)
   10720:	0010f5c0 	call	10f5c <alt_release_fd>
    if (rval < 0)
   10724:	e0bffe17 	ldw	r2,-8(fp)
   10728:	1000070e 	bge	r2,zero,10748 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1072c:	001066c0 	call	1066c <alt_get_errno>
   10730:	1007883a 	mov	r3,r2
   10734:	e0bffe17 	ldw	r2,-8(fp)
   10738:	0085c83a 	sub	r2,zero,r2
   1073c:	18800015 	stw	r2,0(r3)
      return -1;
   10740:	00bfffc4 	movi	r2,-1
   10744:	00000706 	br	10764 <close+0xbc>
    }
    return 0;
   10748:	0005883a 	mov	r2,zero
   1074c:	00000506 	br	10764 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10750:	001066c0 	call	1066c <alt_get_errno>
   10754:	1007883a 	mov	r3,r2
   10758:	00801444 	movi	r2,81
   1075c:	18800015 	stw	r2,0(r3)
    return -1;
   10760:	00bfffc4 	movi	r2,-1
  }
}
   10764:	e037883a 	mov	sp,fp
   10768:	dfc00117 	ldw	ra,4(sp)
   1076c:	df000017 	ldw	fp,0(sp)
   10770:	dec00204 	addi	sp,sp,8
   10774:	f800283a 	ret

00010778 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10778:	defffc04 	addi	sp,sp,-16
   1077c:	df000315 	stw	fp,12(sp)
   10780:	df000304 	addi	fp,sp,12
   10784:	e13ffd15 	stw	r4,-12(fp)
   10788:	e17ffe15 	stw	r5,-8(fp)
   1078c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10790:	e0bfff17 	ldw	r2,-4(fp)
}
   10794:	e037883a 	mov	sp,fp
   10798:	df000017 	ldw	fp,0(sp)
   1079c:	dec00104 	addi	sp,sp,4
   107a0:	f800283a 	ret

000107a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   107a4:	defffe04 	addi	sp,sp,-8
   107a8:	dfc00115 	stw	ra,4(sp)
   107ac:	df000015 	stw	fp,0(sp)
   107b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   107b4:	d0a01017 	ldw	r2,-32704(gp)
   107b8:	10000326 	beq	r2,zero,107c8 <alt_get_errno+0x24>
   107bc:	d0a01017 	ldw	r2,-32704(gp)
   107c0:	103ee83a 	callr	r2
   107c4:	00000106 	br	107cc <alt_get_errno+0x28>
   107c8:	d0a6dc04 	addi	r2,gp,-25744
}
   107cc:	e037883a 	mov	sp,fp
   107d0:	dfc00117 	ldw	ra,4(sp)
   107d4:	df000017 	ldw	fp,0(sp)
   107d8:	dec00204 	addi	sp,sp,8
   107dc:	f800283a 	ret

000107e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   107e0:	defffb04 	addi	sp,sp,-20
   107e4:	dfc00415 	stw	ra,16(sp)
   107e8:	df000315 	stw	fp,12(sp)
   107ec:	df000304 	addi	fp,sp,12
   107f0:	e13ffe15 	stw	r4,-8(fp)
   107f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   107f8:	e0bffe17 	ldw	r2,-8(fp)
   107fc:	10000616 	blt	r2,zero,10818 <fstat+0x38>
   10800:	e0bffe17 	ldw	r2,-8(fp)
   10804:	10c00324 	muli	r3,r2,12
   10808:	00800074 	movhi	r2,1
   1080c:	10908804 	addi	r2,r2,16928
   10810:	1885883a 	add	r2,r3,r2
   10814:	00000106 	br	1081c <fstat+0x3c>
   10818:	0005883a 	mov	r2,zero
   1081c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10820:	e0bffd17 	ldw	r2,-12(fp)
   10824:	10001026 	beq	r2,zero,10868 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10828:	e0bffd17 	ldw	r2,-12(fp)
   1082c:	10800017 	ldw	r2,0(r2)
   10830:	10800817 	ldw	r2,32(r2)
   10834:	10000726 	beq	r2,zero,10854 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   10838:	e0bffd17 	ldw	r2,-12(fp)
   1083c:	10800017 	ldw	r2,0(r2)
   10840:	10800817 	ldw	r2,32(r2)
   10844:	e17fff17 	ldw	r5,-4(fp)
   10848:	e13ffd17 	ldw	r4,-12(fp)
   1084c:	103ee83a 	callr	r2
   10850:	00000a06 	br	1087c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10854:	e0bfff17 	ldw	r2,-4(fp)
   10858:	00c80004 	movi	r3,8192
   1085c:	10c00115 	stw	r3,4(r2)
      return 0;
   10860:	0005883a 	mov	r2,zero
   10864:	00000506 	br	1087c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10868:	00107a40 	call	107a4 <alt_get_errno>
   1086c:	1007883a 	mov	r3,r2
   10870:	00801444 	movi	r2,81
   10874:	18800015 	stw	r2,0(r3)
    return -1;
   10878:	00bfffc4 	movi	r2,-1
  }
}
   1087c:	e037883a 	mov	sp,fp
   10880:	dfc00117 	ldw	ra,4(sp)
   10884:	df000017 	ldw	fp,0(sp)
   10888:	dec00204 	addi	sp,sp,8
   1088c:	f800283a 	ret

00010890 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   10890:	defff404 	addi	sp,sp,-48
   10894:	dfc00b15 	stw	ra,44(sp)
   10898:	df000a15 	stw	fp,40(sp)
   1089c:	dd000915 	stw	r20,36(sp)
   108a0:	dcc00815 	stw	r19,32(sp)
   108a4:	dc800715 	stw	r18,28(sp)
   108a8:	dc400615 	stw	r17,24(sp)
   108ac:	dc000515 	stw	r16,20(sp)
   108b0:	df000a04 	addi	fp,sp,40
   108b4:	e13ff915 	stw	r4,-28(fp)
   108b8:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   108bc:	e0bffa17 	ldw	r2,-24(fp)
   108c0:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   108c4:	d0a6eb17 	ldw	r2,-25684(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   108c8:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   108cc:	d0a6ea17 	ldw	r2,-25688(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   108d0:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   108d4:	e0bff817 	ldw	r2,-32(fp)
   108d8:	10005f26 	beq	r2,zero,10a58 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   108dc:	d0a6e517 	ldw	r2,-25708(gp)
   108e0:	1029883a 	mov	r20,r2
   108e4:	e17ff817 	ldw	r5,-32(fp)
   108e8:	e13ff717 	ldw	r4,-36(fp)
   108ec:	00060700 	call	6070 <__udivsi3>
   108f0:	a085883a 	add	r2,r20,r2
   108f4:	1007883a 	mov	r3,r2
   108f8:	e0bff917 	ldw	r2,-28(fp)
   108fc:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   10900:	d0a6e617 	ldw	r2,-25704(gp)
   10904:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   10908:	e0bff717 	ldw	r2,-36(fp)
   1090c:	1021883a 	mov	r16,r2
   10910:	0023883a 	mov	r17,zero
   10914:	e17ff817 	ldw	r5,-32(fp)
   10918:	010003f4 	movhi	r4,15
   1091c:	21109004 	addi	r4,r4,16960
   10920:	00060700 	call	6070 <__udivsi3>
   10924:	1025883a 	mov	r18,r2
   10928:	0027883a 	mov	r19,zero
   1092c:	900d883a 	mov	r6,r18
   10930:	980f883a 	mov	r7,r19
   10934:	8009883a 	mov	r4,r16
   10938:	880b883a 	mov	r5,r17
   1093c:	000fa2c0 	call	fa2c <__muldi3>
   10940:	1009883a 	mov	r4,r2
   10944:	180b883a 	mov	r5,r3
   10948:	2005883a 	mov	r2,r4
   1094c:	2807883a 	mov	r3,r5
   10950:	018003f4 	movhi	r6,15
   10954:	31909004 	addi	r6,r6,16960
   10958:	000f883a 	mov	r7,zero
   1095c:	1009883a 	mov	r4,r2
   10960:	180b883a 	mov	r5,r3
   10964:	00100040 	call	10004 <__umoddi3>
   10968:	1009883a 	mov	r4,r2
   1096c:	180b883a 	mov	r5,r3
   10970:	2005883a 	mov	r2,r4
   10974:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   10978:	a085883a 	add	r2,r20,r2
   1097c:	1007883a 	mov	r3,r2
   10980:	e0bff917 	ldw	r2,-28(fp)
   10984:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   10988:	00001406 	br	109dc <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   1098c:	e0bff917 	ldw	r2,-28(fp)
   10990:	10800017 	ldw	r2,0(r2)
   10994:	00800516 	blt	zero,r2,109ac <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   10998:	e0bff917 	ldw	r2,-28(fp)
   1099c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   109a0:	e0bff917 	ldw	r2,-28(fp)
   109a4:	10000115 	stw	zero,4(r2)
          break;
   109a8:	00000f06 	br	109e8 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   109ac:	e0bff917 	ldw	r2,-28(fp)
   109b0:	10800017 	ldw	r2,0(r2)
   109b4:	10ffffc4 	addi	r3,r2,-1
   109b8:	e0bff917 	ldw	r2,-28(fp)
   109bc:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   109c0:	e0bff917 	ldw	r2,-28(fp)
   109c4:	10c00117 	ldw	r3,4(r2)
   109c8:	008003f4 	movhi	r2,15
   109cc:	10909004 	addi	r2,r2,16960
   109d0:	1887883a 	add	r3,r3,r2
   109d4:	e0bff917 	ldw	r2,-28(fp)
   109d8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   109dc:	e0bff917 	ldw	r2,-28(fp)
   109e0:	10800117 	ldw	r2,4(r2)
   109e4:	103fe916 	blt	r2,zero,1098c <__alt_mem_onchip_memory+0xf781098c>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   109e8:	00000c06 	br	10a1c <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   109ec:	e0bff917 	ldw	r2,-28(fp)
   109f0:	10800017 	ldw	r2,0(r2)
   109f4:	10c00044 	addi	r3,r2,1
   109f8:	e0bff917 	ldw	r2,-28(fp)
   109fc:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   10a00:	e0bff917 	ldw	r2,-28(fp)
   10a04:	10c00117 	ldw	r3,4(r2)
   10a08:	00bffc74 	movhi	r2,65521
   10a0c:	10af7004 	addi	r2,r2,-16960
   10a10:	1887883a 	add	r3,r3,r2
   10a14:	e0bff917 	ldw	r2,-28(fp)
   10a18:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   10a1c:	e0bff917 	ldw	r2,-28(fp)
   10a20:	10c00117 	ldw	r3,4(r2)
   10a24:	008003f4 	movhi	r2,15
   10a28:	10908fc4 	addi	r2,r2,16959
   10a2c:	10ffef16 	blt	r2,r3,109ec <__alt_mem_onchip_memory+0xf78109ec>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   10a30:	e0bff617 	ldw	r2,-40(fp)
   10a34:	10000626 	beq	r2,zero,10a50 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   10a38:	d0e6e317 	ldw	r3,-25716(gp)
   10a3c:	e0bff617 	ldw	r2,-40(fp)
   10a40:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   10a44:	d0e6e417 	ldw	r3,-25712(gp)
   10a48:	e0bff617 	ldw	r2,-40(fp)
   10a4c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   10a50:	0005883a 	mov	r2,zero
   10a54:	00000106 	br	10a5c <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   10a58:	00bfde84 	movi	r2,-134
}
   10a5c:	e6fffb04 	addi	sp,fp,-20
   10a60:	dfc00617 	ldw	ra,24(sp)
   10a64:	df000517 	ldw	fp,20(sp)
   10a68:	dd000417 	ldw	r20,16(sp)
   10a6c:	dcc00317 	ldw	r19,12(sp)
   10a70:	dc800217 	ldw	r18,8(sp)
   10a74:	dc400117 	ldw	r17,4(sp)
   10a78:	dc000017 	ldw	r16,0(sp)
   10a7c:	dec00704 	addi	sp,sp,28
   10a80:	f800283a 	ret

00010a84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10a84:	defffe04 	addi	sp,sp,-8
   10a88:	dfc00115 	stw	ra,4(sp)
   10a8c:	df000015 	stw	fp,0(sp)
   10a90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10a94:	d0a01017 	ldw	r2,-32704(gp)
   10a98:	10000326 	beq	r2,zero,10aa8 <alt_get_errno+0x24>
   10a9c:	d0a01017 	ldw	r2,-32704(gp)
   10aa0:	103ee83a 	callr	r2
   10aa4:	00000106 	br	10aac <alt_get_errno+0x28>
   10aa8:	d0a6dc04 	addi	r2,gp,-25744
}
   10aac:	e037883a 	mov	sp,fp
   10ab0:	dfc00117 	ldw	ra,4(sp)
   10ab4:	df000017 	ldw	fp,0(sp)
   10ab8:	dec00204 	addi	sp,sp,8
   10abc:	f800283a 	ret

00010ac0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   10ac0:	deffed04 	addi	sp,sp,-76
   10ac4:	dfc01215 	stw	ra,72(sp)
   10ac8:	df001115 	stw	fp,68(sp)
   10acc:	df001104 	addi	fp,sp,68
   10ad0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10ad4:	e0bfff17 	ldw	r2,-4(fp)
   10ad8:	10000616 	blt	r2,zero,10af4 <isatty+0x34>
   10adc:	e0bfff17 	ldw	r2,-4(fp)
   10ae0:	10c00324 	muli	r3,r2,12
   10ae4:	00800074 	movhi	r2,1
   10ae8:	10908804 	addi	r2,r2,16928
   10aec:	1885883a 	add	r2,r3,r2
   10af0:	00000106 	br	10af8 <isatty+0x38>
   10af4:	0005883a 	mov	r2,zero
   10af8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10afc:	e0bfef17 	ldw	r2,-68(fp)
   10b00:	10000e26 	beq	r2,zero,10b3c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10b04:	e0bfef17 	ldw	r2,-68(fp)
   10b08:	10800017 	ldw	r2,0(r2)
   10b0c:	10800817 	ldw	r2,32(r2)
   10b10:	1000021e 	bne	r2,zero,10b1c <isatty+0x5c>
    {
      return 1;
   10b14:	00800044 	movi	r2,1
   10b18:	00000d06 	br	10b50 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10b1c:	e0bff004 	addi	r2,fp,-64
   10b20:	100b883a 	mov	r5,r2
   10b24:	e13fff17 	ldw	r4,-4(fp)
   10b28:	00107e00 	call	107e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10b2c:	e0bff117 	ldw	r2,-60(fp)
   10b30:	10880020 	cmpeqi	r2,r2,8192
   10b34:	10803fcc 	andi	r2,r2,255
   10b38:	00000506 	br	10b50 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10b3c:	0010a840 	call	10a84 <alt_get_errno>
   10b40:	1007883a 	mov	r3,r2
   10b44:	00801444 	movi	r2,81
   10b48:	18800015 	stw	r2,0(r3)
    return 0;
   10b4c:	0005883a 	mov	r2,zero
  }
}
   10b50:	e037883a 	mov	sp,fp
   10b54:	dfc00117 	ldw	ra,4(sp)
   10b58:	df000017 	ldw	fp,0(sp)
   10b5c:	dec00204 	addi	sp,sp,8
   10b60:	f800283a 	ret

00010b64 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10b64:	defffc04 	addi	sp,sp,-16
   10b68:	df000315 	stw	fp,12(sp)
   10b6c:	df000304 	addi	fp,sp,12
   10b70:	e13ffd15 	stw	r4,-12(fp)
   10b74:	e17ffe15 	stw	r5,-8(fp)
   10b78:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10b7c:	e0fffe17 	ldw	r3,-8(fp)
   10b80:	e0bffd17 	ldw	r2,-12(fp)
   10b84:	18800c26 	beq	r3,r2,10bb8 <alt_load_section+0x54>
  {
    while( to != end )
   10b88:	00000806 	br	10bac <alt_load_section+0x48>
    {
      *to++ = *from++;
   10b8c:	e0bffe17 	ldw	r2,-8(fp)
   10b90:	10c00104 	addi	r3,r2,4
   10b94:	e0fffe15 	stw	r3,-8(fp)
   10b98:	e0fffd17 	ldw	r3,-12(fp)
   10b9c:	19000104 	addi	r4,r3,4
   10ba0:	e13ffd15 	stw	r4,-12(fp)
   10ba4:	18c00017 	ldw	r3,0(r3)
   10ba8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10bac:	e0fffe17 	ldw	r3,-8(fp)
   10bb0:	e0bfff17 	ldw	r2,-4(fp)
   10bb4:	18bff51e 	bne	r3,r2,10b8c <__alt_mem_onchip_memory+0xf7810b8c>
    {
      *to++ = *from++;
    }
  }
}
   10bb8:	0001883a 	nop
   10bbc:	e037883a 	mov	sp,fp
   10bc0:	df000017 	ldw	fp,0(sp)
   10bc4:	dec00104 	addi	sp,sp,4
   10bc8:	f800283a 	ret

00010bcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10bcc:	defffe04 	addi	sp,sp,-8
   10bd0:	dfc00115 	stw	ra,4(sp)
   10bd4:	df000015 	stw	fp,0(sp)
   10bd8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10bdc:	01800074 	movhi	r6,1
   10be0:	31951504 	addi	r6,r6,21588
   10be4:	01400074 	movhi	r5,1
   10be8:	294e5504 	addi	r5,r5,14676
   10bec:	01000074 	movhi	r4,1
   10bf0:	21151504 	addi	r4,r4,21588
   10bf4:	0010b640 	call	10b64 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10bf8:	01800034 	movhi	r6,0
   10bfc:	31809104 	addi	r6,r6,580
   10c00:	01400034 	movhi	r5,0
   10c04:	29400804 	addi	r5,r5,32
   10c08:	01000034 	movhi	r4,0
   10c0c:	21000804 	addi	r4,r4,32
   10c10:	0010b640 	call	10b64 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10c14:	01800074 	movhi	r6,1
   10c18:	318e5504 	addi	r6,r6,14676
   10c1c:	01400074 	movhi	r5,1
   10c20:	294d2704 	addi	r5,r5,13468
   10c24:	01000074 	movhi	r4,1
   10c28:	210d2704 	addi	r4,r4,13468
   10c2c:	0010b640 	call	10b64 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10c30:	00123300 	call	12330 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10c34:	00125180 	call	12518 <alt_icache_flush_all>
}
   10c38:	0001883a 	nop
   10c3c:	e037883a 	mov	sp,fp
   10c40:	dfc00117 	ldw	ra,4(sp)
   10c44:	df000017 	ldw	fp,0(sp)
   10c48:	dec00204 	addi	sp,sp,8
   10c4c:	f800283a 	ret

00010c50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c50:	defffe04 	addi	sp,sp,-8
   10c54:	dfc00115 	stw	ra,4(sp)
   10c58:	df000015 	stw	fp,0(sp)
   10c5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10c60:	d0a01017 	ldw	r2,-32704(gp)
   10c64:	10000326 	beq	r2,zero,10c74 <alt_get_errno+0x24>
   10c68:	d0a01017 	ldw	r2,-32704(gp)
   10c6c:	103ee83a 	callr	r2
   10c70:	00000106 	br	10c78 <alt_get_errno+0x28>
   10c74:	d0a6dc04 	addi	r2,gp,-25744
}
   10c78:	e037883a 	mov	sp,fp
   10c7c:	dfc00117 	ldw	ra,4(sp)
   10c80:	df000017 	ldw	fp,0(sp)
   10c84:	dec00204 	addi	sp,sp,8
   10c88:	f800283a 	ret

00010c8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10c8c:	defff904 	addi	sp,sp,-28
   10c90:	dfc00615 	stw	ra,24(sp)
   10c94:	df000515 	stw	fp,20(sp)
   10c98:	df000504 	addi	fp,sp,20
   10c9c:	e13ffd15 	stw	r4,-12(fp)
   10ca0:	e17ffe15 	stw	r5,-8(fp)
   10ca4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10ca8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10cac:	e0bffd17 	ldw	r2,-12(fp)
   10cb0:	10000616 	blt	r2,zero,10ccc <lseek+0x40>
   10cb4:	e0bffd17 	ldw	r2,-12(fp)
   10cb8:	10c00324 	muli	r3,r2,12
   10cbc:	00800074 	movhi	r2,1
   10cc0:	10908804 	addi	r2,r2,16928
   10cc4:	1885883a 	add	r2,r3,r2
   10cc8:	00000106 	br	10cd0 <lseek+0x44>
   10ccc:	0005883a 	mov	r2,zero
   10cd0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   10cd4:	e0bffc17 	ldw	r2,-16(fp)
   10cd8:	10001026 	beq	r2,zero,10d1c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10cdc:	e0bffc17 	ldw	r2,-16(fp)
   10ce0:	10800017 	ldw	r2,0(r2)
   10ce4:	10800717 	ldw	r2,28(r2)
   10ce8:	10000926 	beq	r2,zero,10d10 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10cec:	e0bffc17 	ldw	r2,-16(fp)
   10cf0:	10800017 	ldw	r2,0(r2)
   10cf4:	10800717 	ldw	r2,28(r2)
   10cf8:	e1bfff17 	ldw	r6,-4(fp)
   10cfc:	e17ffe17 	ldw	r5,-8(fp)
   10d00:	e13ffc17 	ldw	r4,-16(fp)
   10d04:	103ee83a 	callr	r2
   10d08:	e0bffb15 	stw	r2,-20(fp)
   10d0c:	00000506 	br	10d24 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10d10:	00bfde84 	movi	r2,-134
   10d14:	e0bffb15 	stw	r2,-20(fp)
   10d18:	00000206 	br	10d24 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   10d1c:	00bfebc4 	movi	r2,-81
   10d20:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10d24:	e0bffb17 	ldw	r2,-20(fp)
   10d28:	1000070e 	bge	r2,zero,10d48 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   10d2c:	0010c500 	call	10c50 <alt_get_errno>
   10d30:	1007883a 	mov	r3,r2
   10d34:	e0bffb17 	ldw	r2,-20(fp)
   10d38:	0085c83a 	sub	r2,zero,r2
   10d3c:	18800015 	stw	r2,0(r3)
    rc = -1;
   10d40:	00bfffc4 	movi	r2,-1
   10d44:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10d48:	e0bffb17 	ldw	r2,-20(fp)
}
   10d4c:	e037883a 	mov	sp,fp
   10d50:	dfc00117 	ldw	ra,4(sp)
   10d54:	df000017 	ldw	fp,0(sp)
   10d58:	dec00204 	addi	sp,sp,8
   10d5c:	f800283a 	ret

00010d60 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d60:	defffd04 	addi	sp,sp,-12
   10d64:	dfc00215 	stw	ra,8(sp)
   10d68:	df000115 	stw	fp,4(sp)
   10d6c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d70:	0009883a 	mov	r4,zero
   10d74:	001137c0 	call	1137c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10d78:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d7c:	00113b40 	call	113b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10d80:	01800074 	movhi	r6,1
   10d84:	318e0d04 	addi	r6,r6,14388
   10d88:	01400074 	movhi	r5,1
   10d8c:	294e0d04 	addi	r5,r5,14388
   10d90:	01000074 	movhi	r4,1
   10d94:	210e0d04 	addi	r4,r4,14388
   10d98:	00128b00 	call	128b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10d9c:	00124580 	call	12458 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10da0:	01000074 	movhi	r4,1
   10da4:	21092e04 	addi	r4,r4,9400
   10da8:	00130980 	call	13098 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10dac:	d0a6e717 	ldw	r2,-25700(gp)
   10db0:	d0e6e817 	ldw	r3,-25696(gp)
   10db4:	d126e917 	ldw	r4,-25692(gp)
   10db8:	200d883a 	mov	r6,r4
   10dbc:	180b883a 	mov	r5,r3
   10dc0:	1009883a 	mov	r4,r2
   10dc4:	00014b80 	call	14b8 <main>
   10dc8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10dcc:	01000044 	movi	r4,1
   10dd0:	00106a80 	call	106a8 <close>
  exit (result);
   10dd4:	e13fff17 	ldw	r4,-4(fp)
   10dd8:	00130ac0 	call	130ac <exit>

00010ddc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   10ddc:	defffe04 	addi	sp,sp,-8
   10de0:	df000115 	stw	fp,4(sp)
   10de4:	df000104 	addi	fp,sp,4
   10de8:	e13fff15 	stw	r4,-4(fp)
}
   10dec:	0001883a 	nop
   10df0:	e037883a 	mov	sp,fp
   10df4:	df000017 	ldw	fp,0(sp)
   10df8:	dec00104 	addi	sp,sp,4
   10dfc:	f800283a 	ret

00010e00 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10e00:	defffe04 	addi	sp,sp,-8
   10e04:	df000115 	stw	fp,4(sp)
   10e08:	df000104 	addi	fp,sp,4
   10e0c:	e13fff15 	stw	r4,-4(fp)
}
   10e10:	0001883a 	nop
   10e14:	e037883a 	mov	sp,fp
   10e18:	df000017 	ldw	fp,0(sp)
   10e1c:	dec00104 	addi	sp,sp,4
   10e20:	f800283a 	ret

00010e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10e24:	defffe04 	addi	sp,sp,-8
   10e28:	dfc00115 	stw	ra,4(sp)
   10e2c:	df000015 	stw	fp,0(sp)
   10e30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10e34:	d0a01017 	ldw	r2,-32704(gp)
   10e38:	10000326 	beq	r2,zero,10e48 <alt_get_errno+0x24>
   10e3c:	d0a01017 	ldw	r2,-32704(gp)
   10e40:	103ee83a 	callr	r2
   10e44:	00000106 	br	10e4c <alt_get_errno+0x28>
   10e48:	d0a6dc04 	addi	r2,gp,-25744
}
   10e4c:	e037883a 	mov	sp,fp
   10e50:	dfc00117 	ldw	ra,4(sp)
   10e54:	df000017 	ldw	fp,0(sp)
   10e58:	dec00204 	addi	sp,sp,8
   10e5c:	f800283a 	ret

00010e60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10e60:	defff904 	addi	sp,sp,-28
   10e64:	dfc00615 	stw	ra,24(sp)
   10e68:	df000515 	stw	fp,20(sp)
   10e6c:	df000504 	addi	fp,sp,20
   10e70:	e13ffd15 	stw	r4,-12(fp)
   10e74:	e17ffe15 	stw	r5,-8(fp)
   10e78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10e7c:	e0bffd17 	ldw	r2,-12(fp)
   10e80:	10000616 	blt	r2,zero,10e9c <read+0x3c>
   10e84:	e0bffd17 	ldw	r2,-12(fp)
   10e88:	10c00324 	muli	r3,r2,12
   10e8c:	00800074 	movhi	r2,1
   10e90:	10908804 	addi	r2,r2,16928
   10e94:	1885883a 	add	r2,r3,r2
   10e98:	00000106 	br	10ea0 <read+0x40>
   10e9c:	0005883a 	mov	r2,zero
   10ea0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10ea4:	e0bffb17 	ldw	r2,-20(fp)
   10ea8:	10002226 	beq	r2,zero,10f34 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10eac:	e0bffb17 	ldw	r2,-20(fp)
   10eb0:	10800217 	ldw	r2,8(r2)
   10eb4:	108000cc 	andi	r2,r2,3
   10eb8:	10800060 	cmpeqi	r2,r2,1
   10ebc:	1000181e 	bne	r2,zero,10f20 <read+0xc0>
        (fd->dev->read))
   10ec0:	e0bffb17 	ldw	r2,-20(fp)
   10ec4:	10800017 	ldw	r2,0(r2)
   10ec8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10ecc:	10001426 	beq	r2,zero,10f20 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10ed0:	e0bffb17 	ldw	r2,-20(fp)
   10ed4:	10800017 	ldw	r2,0(r2)
   10ed8:	10800517 	ldw	r2,20(r2)
   10edc:	e0ffff17 	ldw	r3,-4(fp)
   10ee0:	180d883a 	mov	r6,r3
   10ee4:	e17ffe17 	ldw	r5,-8(fp)
   10ee8:	e13ffb17 	ldw	r4,-20(fp)
   10eec:	103ee83a 	callr	r2
   10ef0:	e0bffc15 	stw	r2,-16(fp)
   10ef4:	e0bffc17 	ldw	r2,-16(fp)
   10ef8:	1000070e 	bge	r2,zero,10f18 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   10efc:	0010e240 	call	10e24 <alt_get_errno>
   10f00:	1007883a 	mov	r3,r2
   10f04:	e0bffc17 	ldw	r2,-16(fp)
   10f08:	0085c83a 	sub	r2,zero,r2
   10f0c:	18800015 	stw	r2,0(r3)
          return -1;
   10f10:	00bfffc4 	movi	r2,-1
   10f14:	00000c06 	br	10f48 <read+0xe8>
        }
        return rval;
   10f18:	e0bffc17 	ldw	r2,-16(fp)
   10f1c:	00000a06 	br	10f48 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10f20:	0010e240 	call	10e24 <alt_get_errno>
   10f24:	1007883a 	mov	r3,r2
   10f28:	00800344 	movi	r2,13
   10f2c:	18800015 	stw	r2,0(r3)
   10f30:	00000406 	br	10f44 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10f34:	0010e240 	call	10e24 <alt_get_errno>
   10f38:	1007883a 	mov	r3,r2
   10f3c:	00801444 	movi	r2,81
   10f40:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10f44:	00bfffc4 	movi	r2,-1
}
   10f48:	e037883a 	mov	sp,fp
   10f4c:	dfc00117 	ldw	ra,4(sp)
   10f50:	df000017 	ldw	fp,0(sp)
   10f54:	dec00204 	addi	sp,sp,8
   10f58:	f800283a 	ret

00010f5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10f5c:	defffe04 	addi	sp,sp,-8
   10f60:	df000115 	stw	fp,4(sp)
   10f64:	df000104 	addi	fp,sp,4
   10f68:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   10f6c:	e0bfff17 	ldw	r2,-4(fp)
   10f70:	108000d0 	cmplti	r2,r2,3
   10f74:	10000d1e 	bne	r2,zero,10fac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   10f78:	00800074 	movhi	r2,1
   10f7c:	10908804 	addi	r2,r2,16928
   10f80:	e0ffff17 	ldw	r3,-4(fp)
   10f84:	18c00324 	muli	r3,r3,12
   10f88:	10c5883a 	add	r2,r2,r3
   10f8c:	10800204 	addi	r2,r2,8
   10f90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10f94:	00800074 	movhi	r2,1
   10f98:	10908804 	addi	r2,r2,16928
   10f9c:	e0ffff17 	ldw	r3,-4(fp)
   10fa0:	18c00324 	muli	r3,r3,12
   10fa4:	10c5883a 	add	r2,r2,r3
   10fa8:	10000015 	stw	zero,0(r2)
  }
}
   10fac:	0001883a 	nop
   10fb0:	e037883a 	mov	sp,fp
   10fb4:	df000017 	ldw	fp,0(sp)
   10fb8:	dec00104 	addi	sp,sp,4
   10fbc:	f800283a 	ret

00010fc0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10fc0:	defff904 	addi	sp,sp,-28
   10fc4:	df000615 	stw	fp,24(sp)
   10fc8:	df000604 	addi	fp,sp,24
   10fcc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fd0:	0005303a 	rdctl	r2,status
   10fd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fd8:	e0fffe17 	ldw	r3,-8(fp)
   10fdc:	00bfff84 	movi	r2,-2
   10fe0:	1884703a 	and	r2,r3,r2
   10fe4:	1001703a 	wrctl	status,r2
  
  return context;
   10fe8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10fec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10ff0:	d0a01117 	ldw	r2,-32700(gp)
   10ff4:	10c000c4 	addi	r3,r2,3
   10ff8:	00bfff04 	movi	r2,-4
   10ffc:	1884703a 	and	r2,r3,r2
   11000:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11004:	d0e01117 	ldw	r3,-32700(gp)
   11008:	e0bfff17 	ldw	r2,-4(fp)
   1100c:	1887883a 	add	r3,r3,r2
   11010:	00820034 	movhi	r2,2048
   11014:	10800004 	addi	r2,r2,0
   11018:	10c0062e 	bgeu	r2,r3,11034 <sbrk+0x74>
   1101c:	e0bffb17 	ldw	r2,-20(fp)
   11020:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11024:	e0bffa17 	ldw	r2,-24(fp)
   11028:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1102c:	00bfffc4 	movi	r2,-1
   11030:	00000b06 	br	11060 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   11034:	d0a01117 	ldw	r2,-32700(gp)
   11038:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1103c:	d0e01117 	ldw	r3,-32700(gp)
   11040:	e0bfff17 	ldw	r2,-4(fp)
   11044:	1885883a 	add	r2,r3,r2
   11048:	d0a01115 	stw	r2,-32700(gp)
   1104c:	e0bffb17 	ldw	r2,-20(fp)
   11050:	e0bffc15 	stw	r2,-16(fp)
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1105c:	e0bffd17 	ldw	r2,-12(fp)
} 
   11060:	e037883a 	mov	sp,fp
   11064:	df000017 	ldw	fp,0(sp)
   11068:	dec00104 	addi	sp,sp,4
   1106c:	f800283a 	ret

00011070 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11070:	defffa04 	addi	sp,sp,-24
   11074:	df000515 	stw	fp,20(sp)
   11078:	df000504 	addi	fp,sp,20
   1107c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11080:	0005303a 	rdctl	r2,status
   11084:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11088:	e0fffc17 	ldw	r3,-16(fp)
   1108c:	00bfff84 	movi	r2,-2
   11090:	1884703a 	and	r2,r3,r2
   11094:	1001703a 	wrctl	status,r2
  
  return context;
   11098:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1109c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   110a0:	e0bfff17 	ldw	r2,-4(fp)
   110a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   110a8:	e0bffd17 	ldw	r2,-12(fp)
   110ac:	10800017 	ldw	r2,0(r2)
   110b0:	e0fffd17 	ldw	r3,-12(fp)
   110b4:	18c00117 	ldw	r3,4(r3)
   110b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   110bc:	e0bffd17 	ldw	r2,-12(fp)
   110c0:	10800117 	ldw	r2,4(r2)
   110c4:	e0fffd17 	ldw	r3,-12(fp)
   110c8:	18c00017 	ldw	r3,0(r3)
   110cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   110d0:	e0bffd17 	ldw	r2,-12(fp)
   110d4:	e0fffd17 	ldw	r3,-12(fp)
   110d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   110dc:	e0bffd17 	ldw	r2,-12(fp)
   110e0:	e0fffd17 	ldw	r3,-12(fp)
   110e4:	10c00015 	stw	r3,0(r2)
   110e8:	e0bffb17 	ldw	r2,-20(fp)
   110ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110f0:	e0bffe17 	ldw	r2,-8(fp)
   110f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   110f8:	0001883a 	nop
   110fc:	e037883a 	mov	sp,fp
   11100:	df000017 	ldw	fp,0(sp)
   11104:	dec00104 	addi	sp,sp,4
   11108:	f800283a 	ret

0001110c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1110c:	defffb04 	addi	sp,sp,-20
   11110:	dfc00415 	stw	ra,16(sp)
   11114:	df000315 	stw	fp,12(sp)
   11118:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1111c:	d0a01217 	ldw	r2,-32696(gp)
   11120:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11124:	d0a6eb17 	ldw	r2,-25684(gp)
   11128:	10800044 	addi	r2,r2,1
   1112c:	d0a6eb15 	stw	r2,-25684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11130:	00002e06 	br	111ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	10800017 	ldw	r2,0(r2)
   1113c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11140:	e0bffd17 	ldw	r2,-12(fp)
   11144:	10800403 	ldbu	r2,16(r2)
   11148:	10803fcc 	andi	r2,r2,255
   1114c:	10000426 	beq	r2,zero,11160 <alt_tick+0x54>
   11150:	d0a6eb17 	ldw	r2,-25684(gp)
   11154:	1000021e 	bne	r2,zero,11160 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11158:	e0bffd17 	ldw	r2,-12(fp)
   1115c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11160:	e0bffd17 	ldw	r2,-12(fp)
   11164:	10800217 	ldw	r2,8(r2)
   11168:	d0e6eb17 	ldw	r3,-25684(gp)
   1116c:	18801d36 	bltu	r3,r2,111e4 <alt_tick+0xd8>
   11170:	e0bffd17 	ldw	r2,-12(fp)
   11174:	10800403 	ldbu	r2,16(r2)
   11178:	10803fcc 	andi	r2,r2,255
   1117c:	1000191e 	bne	r2,zero,111e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11180:	e0bffd17 	ldw	r2,-12(fp)
   11184:	10800317 	ldw	r2,12(r2)
   11188:	e0fffd17 	ldw	r3,-12(fp)
   1118c:	18c00517 	ldw	r3,20(r3)
   11190:	1809883a 	mov	r4,r3
   11194:	103ee83a 	callr	r2
   11198:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1119c:	e0bfff17 	ldw	r2,-4(fp)
   111a0:	1000031e 	bne	r2,zero,111b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   111a4:	e13ffd17 	ldw	r4,-12(fp)
   111a8:	00110700 	call	11070 <alt_alarm_stop>
   111ac:	00000d06 	br	111e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   111b0:	e0bffd17 	ldw	r2,-12(fp)
   111b4:	10c00217 	ldw	r3,8(r2)
   111b8:	e0bfff17 	ldw	r2,-4(fp)
   111bc:	1887883a 	add	r3,r3,r2
   111c0:	e0bffd17 	ldw	r2,-12(fp)
   111c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   111c8:	e0bffd17 	ldw	r2,-12(fp)
   111cc:	10c00217 	ldw	r3,8(r2)
   111d0:	d0a6eb17 	ldw	r2,-25684(gp)
   111d4:	1880032e 	bgeu	r3,r2,111e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   111d8:	e0bffd17 	ldw	r2,-12(fp)
   111dc:	00c00044 	movi	r3,1
   111e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   111e4:	e0bffe17 	ldw	r2,-8(fp)
   111e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   111ec:	e0fffd17 	ldw	r3,-12(fp)
   111f0:	d0a01204 	addi	r2,gp,-32696
   111f4:	18bfcf1e 	bne	r3,r2,11134 <__alt_mem_onchip_memory+0xf7811134>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   111f8:	0001883a 	nop
}
   111fc:	0001883a 	nop
   11200:	e037883a 	mov	sp,fp
   11204:	dfc00117 	ldw	ra,4(sp)
   11208:	df000017 	ldw	fp,0(sp)
   1120c:	dec00204 	addi	sp,sp,8
   11210:	f800283a 	ret

00011214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11214:	defffe04 	addi	sp,sp,-8
   11218:	dfc00115 	stw	ra,4(sp)
   1121c:	df000015 	stw	fp,0(sp)
   11220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11224:	d0a01017 	ldw	r2,-32704(gp)
   11228:	10000326 	beq	r2,zero,11238 <alt_get_errno+0x24>
   1122c:	d0a01017 	ldw	r2,-32704(gp)
   11230:	103ee83a 	callr	r2
   11234:	00000106 	br	1123c <alt_get_errno+0x28>
   11238:	d0a6dc04 	addi	r2,gp,-25744
}
   1123c:	e037883a 	mov	sp,fp
   11240:	dfc00117 	ldw	ra,4(sp)
   11244:	df000017 	ldw	fp,0(sp)
   11248:	dec00204 	addi	sp,sp,8
   1124c:	f800283a 	ret

00011250 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11250:	defff904 	addi	sp,sp,-28
   11254:	dfc00615 	stw	ra,24(sp)
   11258:	df000515 	stw	fp,20(sp)
   1125c:	df000504 	addi	fp,sp,20
   11260:	e13ffd15 	stw	r4,-12(fp)
   11264:	e17ffe15 	stw	r5,-8(fp)
   11268:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1126c:	e0bffd17 	ldw	r2,-12(fp)
   11270:	10000616 	blt	r2,zero,1128c <write+0x3c>
   11274:	e0bffd17 	ldw	r2,-12(fp)
   11278:	10c00324 	muli	r3,r2,12
   1127c:	00800074 	movhi	r2,1
   11280:	10908804 	addi	r2,r2,16928
   11284:	1885883a 	add	r2,r3,r2
   11288:	00000106 	br	11290 <write+0x40>
   1128c:	0005883a 	mov	r2,zero
   11290:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11294:	e0bffb17 	ldw	r2,-20(fp)
   11298:	10002126 	beq	r2,zero,11320 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1129c:	e0bffb17 	ldw	r2,-20(fp)
   112a0:	10800217 	ldw	r2,8(r2)
   112a4:	108000cc 	andi	r2,r2,3
   112a8:	10001826 	beq	r2,zero,1130c <write+0xbc>
   112ac:	e0bffb17 	ldw	r2,-20(fp)
   112b0:	10800017 	ldw	r2,0(r2)
   112b4:	10800617 	ldw	r2,24(r2)
   112b8:	10001426 	beq	r2,zero,1130c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   112bc:	e0bffb17 	ldw	r2,-20(fp)
   112c0:	10800017 	ldw	r2,0(r2)
   112c4:	10800617 	ldw	r2,24(r2)
   112c8:	e0ffff17 	ldw	r3,-4(fp)
   112cc:	180d883a 	mov	r6,r3
   112d0:	e17ffe17 	ldw	r5,-8(fp)
   112d4:	e13ffb17 	ldw	r4,-20(fp)
   112d8:	103ee83a 	callr	r2
   112dc:	e0bffc15 	stw	r2,-16(fp)
   112e0:	e0bffc17 	ldw	r2,-16(fp)
   112e4:	1000070e 	bge	r2,zero,11304 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   112e8:	00112140 	call	11214 <alt_get_errno>
   112ec:	1007883a 	mov	r3,r2
   112f0:	e0bffc17 	ldw	r2,-16(fp)
   112f4:	0085c83a 	sub	r2,zero,r2
   112f8:	18800015 	stw	r2,0(r3)
        return -1;
   112fc:	00bfffc4 	movi	r2,-1
   11300:	00000c06 	br	11334 <write+0xe4>
      }
      return rval;
   11304:	e0bffc17 	ldw	r2,-16(fp)
   11308:	00000a06 	br	11334 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1130c:	00112140 	call	11214 <alt_get_errno>
   11310:	1007883a 	mov	r3,r2
   11314:	00800344 	movi	r2,13
   11318:	18800015 	stw	r2,0(r3)
   1131c:	00000406 	br	11330 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11320:	00112140 	call	11214 <alt_get_errno>
   11324:	1007883a 	mov	r3,r2
   11328:	00801444 	movi	r2,81
   1132c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11330:	00bfffc4 	movi	r2,-1
}
   11334:	e037883a 	mov	sp,fp
   11338:	dfc00117 	ldw	ra,4(sp)
   1133c:	df000017 	ldw	fp,0(sp)
   11340:	dec00204 	addi	sp,sp,8
   11344:	f800283a 	ret

00011348 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11348:	defffd04 	addi	sp,sp,-12
   1134c:	dfc00215 	stw	ra,8(sp)
   11350:	df000115 	stw	fp,4(sp)
   11354:	df000104 	addi	fp,sp,4
   11358:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1135c:	d1600d04 	addi	r5,gp,-32716
   11360:	e13fff17 	ldw	r4,-4(fp)
   11364:	00123b40 	call	123b4 <alt_dev_llist_insert>
}
   11368:	e037883a 	mov	sp,fp
   1136c:	dfc00117 	ldw	ra,4(sp)
   11370:	df000017 	ldw	fp,0(sp)
   11374:	dec00204 	addi	sp,sp,8
   11378:	f800283a 	ret

0001137c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1137c:	defffd04 	addi	sp,sp,-12
   11380:	dfc00215 	stw	ra,8(sp)
   11384:	df000115 	stw	fp,4(sp)
   11388:	df000104 	addi	fp,sp,4
   1138c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11390:	0012b800 	call	12b80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11394:	00800044 	movi	r2,1
   11398:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1139c:	0001883a 	nop
   113a0:	e037883a 	mov	sp,fp
   113a4:	dfc00117 	ldw	ra,4(sp)
   113a8:	df000017 	ldw	fp,0(sp)
   113ac:	dec00204 	addi	sp,sp,8
   113b0:	f800283a 	ret

000113b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   113b4:	defffe04 	addi	sp,sp,-8
   113b8:	dfc00115 	stw	ra,4(sp)
   113bc:	df000015 	stw	fp,0(sp)
   113c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   113c4:	01c0fa04 	movi	r7,1000
   113c8:	000d883a 	mov	r6,zero
   113cc:	000b883a 	mov	r5,zero
   113d0:	01040034 	movhi	r4,4096
   113d4:	21040804 	addi	r4,r4,4128
   113d8:	0011f080 	call	11f08 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   113dc:	01800204 	movi	r6,8
   113e0:	000b883a 	mov	r5,zero
   113e4:	01000074 	movhi	r4,1
   113e8:	2110f204 	addi	r4,r4,17352
   113ec:	001158c0 	call	1158c <altera_avalon_jtag_uart_init>
   113f0:	01000074 	movhi	r4,1
   113f4:	2110e804 	addi	r4,r4,17312
   113f8:	00113480 	call	11348 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
   113fc:	00c00044 	movi	r3,1
   11400:	00840034 	movhi	r2,4096
   11404:	10842004 	addi	r2,r2,4224
   11408:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1140c:	0001883a 	nop
}
   11410:	0001883a 	nop
   11414:	e037883a 	mov	sp,fp
   11418:	dfc00117 	ldw	ra,4(sp)
   1141c:	df000017 	ldw	fp,0(sp)
   11420:	dec00204 	addi	sp,sp,8
   11424:	f800283a 	ret

00011428 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11428:	defffa04 	addi	sp,sp,-24
   1142c:	dfc00515 	stw	ra,20(sp)
   11430:	df000415 	stw	fp,16(sp)
   11434:	df000404 	addi	fp,sp,16
   11438:	e13ffd15 	stw	r4,-12(fp)
   1143c:	e17ffe15 	stw	r5,-8(fp)
   11440:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11444:	e0bffd17 	ldw	r2,-12(fp)
   11448:	10800017 	ldw	r2,0(r2)
   1144c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11450:	e0bffc17 	ldw	r2,-16(fp)
   11454:	10c00a04 	addi	r3,r2,40
   11458:	e0bffd17 	ldw	r2,-12(fp)
   1145c:	10800217 	ldw	r2,8(r2)
   11460:	100f883a 	mov	r7,r2
   11464:	e1bfff17 	ldw	r6,-4(fp)
   11468:	e17ffe17 	ldw	r5,-8(fp)
   1146c:	1809883a 	mov	r4,r3
   11470:	0011a500 	call	11a50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11474:	e037883a 	mov	sp,fp
   11478:	dfc00117 	ldw	ra,4(sp)
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00204 	addi	sp,sp,8
   11484:	f800283a 	ret

00011488 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11488:	defffa04 	addi	sp,sp,-24
   1148c:	dfc00515 	stw	ra,20(sp)
   11490:	df000415 	stw	fp,16(sp)
   11494:	df000404 	addi	fp,sp,16
   11498:	e13ffd15 	stw	r4,-12(fp)
   1149c:	e17ffe15 	stw	r5,-8(fp)
   114a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   114a4:	e0bffd17 	ldw	r2,-12(fp)
   114a8:	10800017 	ldw	r2,0(r2)
   114ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   114b0:	e0bffc17 	ldw	r2,-16(fp)
   114b4:	10c00a04 	addi	r3,r2,40
   114b8:	e0bffd17 	ldw	r2,-12(fp)
   114bc:	10800217 	ldw	r2,8(r2)
   114c0:	100f883a 	mov	r7,r2
   114c4:	e1bfff17 	ldw	r6,-4(fp)
   114c8:	e17ffe17 	ldw	r5,-8(fp)
   114cc:	1809883a 	mov	r4,r3
   114d0:	0011c6c0 	call	11c6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   114d4:	e037883a 	mov	sp,fp
   114d8:	dfc00117 	ldw	ra,4(sp)
   114dc:	df000017 	ldw	fp,0(sp)
   114e0:	dec00204 	addi	sp,sp,8
   114e4:	f800283a 	ret

000114e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   114e8:	defffc04 	addi	sp,sp,-16
   114ec:	dfc00315 	stw	ra,12(sp)
   114f0:	df000215 	stw	fp,8(sp)
   114f4:	df000204 	addi	fp,sp,8
   114f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   114fc:	e0bfff17 	ldw	r2,-4(fp)
   11500:	10800017 	ldw	r2,0(r2)
   11504:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11508:	e0bffe17 	ldw	r2,-8(fp)
   1150c:	10c00a04 	addi	r3,r2,40
   11510:	e0bfff17 	ldw	r2,-4(fp)
   11514:	10800217 	ldw	r2,8(r2)
   11518:	100b883a 	mov	r5,r2
   1151c:	1809883a 	mov	r4,r3
   11520:	00118f80 	call	118f8 <altera_avalon_jtag_uart_close>
}
   11524:	e037883a 	mov	sp,fp
   11528:	dfc00117 	ldw	ra,4(sp)
   1152c:	df000017 	ldw	fp,0(sp)
   11530:	dec00204 	addi	sp,sp,8
   11534:	f800283a 	ret

00011538 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11538:	defffa04 	addi	sp,sp,-24
   1153c:	dfc00515 	stw	ra,20(sp)
   11540:	df000415 	stw	fp,16(sp)
   11544:	df000404 	addi	fp,sp,16
   11548:	e13ffd15 	stw	r4,-12(fp)
   1154c:	e17ffe15 	stw	r5,-8(fp)
   11550:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11554:	e0bffd17 	ldw	r2,-12(fp)
   11558:	10800017 	ldw	r2,0(r2)
   1155c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	10800a04 	addi	r2,r2,40
   11568:	e1bfff17 	ldw	r6,-4(fp)
   1156c:	e17ffe17 	ldw	r5,-8(fp)
   11570:	1009883a 	mov	r4,r2
   11574:	00119600 	call	11960 <altera_avalon_jtag_uart_ioctl>
}
   11578:	e037883a 	mov	sp,fp
   1157c:	dfc00117 	ldw	ra,4(sp)
   11580:	df000017 	ldw	fp,0(sp)
   11584:	dec00204 	addi	sp,sp,8
   11588:	f800283a 	ret

0001158c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1158c:	defffa04 	addi	sp,sp,-24
   11590:	dfc00515 	stw	ra,20(sp)
   11594:	df000415 	stw	fp,16(sp)
   11598:	df000404 	addi	fp,sp,16
   1159c:	e13ffd15 	stw	r4,-12(fp)
   115a0:	e17ffe15 	stw	r5,-8(fp)
   115a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   115a8:	e0bffd17 	ldw	r2,-12(fp)
   115ac:	00c00044 	movi	r3,1
   115b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   115b4:	e0bffd17 	ldw	r2,-12(fp)
   115b8:	10800017 	ldw	r2,0(r2)
   115bc:	10800104 	addi	r2,r2,4
   115c0:	1007883a 	mov	r3,r2
   115c4:	e0bffd17 	ldw	r2,-12(fp)
   115c8:	10800817 	ldw	r2,32(r2)
   115cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   115d0:	e0bffe17 	ldw	r2,-8(fp)
   115d4:	e0ffff17 	ldw	r3,-4(fp)
   115d8:	d8000015 	stw	zero,0(sp)
   115dc:	e1fffd17 	ldw	r7,-12(fp)
   115e0:	01800074 	movhi	r6,1
   115e4:	31859304 	addi	r6,r6,5708
   115e8:	180b883a 	mov	r5,r3
   115ec:	1009883a 	mov	r4,r2
   115f0:	001254c0 	call	1254c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   115f4:	e0bffd17 	ldw	r2,-12(fp)
   115f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   115fc:	e0bffd17 	ldw	r2,-12(fp)
   11600:	10800204 	addi	r2,r2,8
   11604:	d0e6ea17 	ldw	r3,-25688(gp)
   11608:	e1fffd17 	ldw	r7,-12(fp)
   1160c:	01800074 	movhi	r6,1
   11610:	31861604 	addi	r6,r6,6232
   11614:	180b883a 	mov	r5,r3
   11618:	1009883a 	mov	r4,r2
   1161c:	00122040 	call	12204 <alt_alarm_start>
   11620:	1000040e 	bge	r2,zero,11634 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11624:	e0fffd17 	ldw	r3,-12(fp)
   11628:	00a00034 	movhi	r2,32768
   1162c:	10bfffc4 	addi	r2,r2,-1
   11630:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11634:	0001883a 	nop
   11638:	e037883a 	mov	sp,fp
   1163c:	dfc00117 	ldw	ra,4(sp)
   11640:	df000017 	ldw	fp,0(sp)
   11644:	dec00204 	addi	sp,sp,8
   11648:	f800283a 	ret

0001164c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1164c:	defff804 	addi	sp,sp,-32
   11650:	df000715 	stw	fp,28(sp)
   11654:	df000704 	addi	fp,sp,28
   11658:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1165c:	e0bfff17 	ldw	r2,-4(fp)
   11660:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   11664:	e0bffb17 	ldw	r2,-20(fp)
   11668:	10800017 	ldw	r2,0(r2)
   1166c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11670:	e0bffc17 	ldw	r2,-16(fp)
   11674:	10800104 	addi	r2,r2,4
   11678:	10800037 	ldwio	r2,0(r2)
   1167c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   11680:	e0bffd17 	ldw	r2,-12(fp)
   11684:	1080c00c 	andi	r2,r2,768
   11688:	10006d26 	beq	r2,zero,11840 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1168c:	e0bffd17 	ldw	r2,-12(fp)
   11690:	1080400c 	andi	r2,r2,256
   11694:	10003526 	beq	r2,zero,1176c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11698:	00800074 	movhi	r2,1
   1169c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   116a0:	e0bffb17 	ldw	r2,-20(fp)
   116a4:	10800a17 	ldw	r2,40(r2)
   116a8:	10800044 	addi	r2,r2,1
   116ac:	1081ffcc 	andi	r2,r2,2047
   116b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   116b4:	e0bffb17 	ldw	r2,-20(fp)
   116b8:	10c00b17 	ldw	r3,44(r2)
   116bc:	e0bffe17 	ldw	r2,-8(fp)
   116c0:	18801526 	beq	r3,r2,11718 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   116c4:	e0bffc17 	ldw	r2,-16(fp)
   116c8:	10800037 	ldwio	r2,0(r2)
   116cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   116d0:	e0bff917 	ldw	r2,-28(fp)
   116d4:	10a0000c 	andi	r2,r2,32768
   116d8:	10001126 	beq	r2,zero,11720 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   116dc:	e0bffb17 	ldw	r2,-20(fp)
   116e0:	10800a17 	ldw	r2,40(r2)
   116e4:	e0fff917 	ldw	r3,-28(fp)
   116e8:	1809883a 	mov	r4,r3
   116ec:	e0fffb17 	ldw	r3,-20(fp)
   116f0:	1885883a 	add	r2,r3,r2
   116f4:	10800e04 	addi	r2,r2,56
   116f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   116fc:	e0bffb17 	ldw	r2,-20(fp)
   11700:	10800a17 	ldw	r2,40(r2)
   11704:	10800044 	addi	r2,r2,1
   11708:	10c1ffcc 	andi	r3,r2,2047
   1170c:	e0bffb17 	ldw	r2,-20(fp)
   11710:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11714:	003fe206 	br	116a0 <__alt_mem_onchip_memory+0xf78116a0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   11718:	0001883a 	nop
   1171c:	00000106 	br	11724 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   11720:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11724:	e0bff917 	ldw	r2,-28(fp)
   11728:	10bfffec 	andhi	r2,r2,65535
   1172c:	10000f26 	beq	r2,zero,1176c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11730:	e0bffb17 	ldw	r2,-20(fp)
   11734:	10c00817 	ldw	r3,32(r2)
   11738:	00bfff84 	movi	r2,-2
   1173c:	1886703a 	and	r3,r3,r2
   11740:	e0bffb17 	ldw	r2,-20(fp)
   11744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11748:	e0bffc17 	ldw	r2,-16(fp)
   1174c:	10800104 	addi	r2,r2,4
   11750:	1007883a 	mov	r3,r2
   11754:	e0bffb17 	ldw	r2,-20(fp)
   11758:	10800817 	ldw	r2,32(r2)
   1175c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11760:	e0bffc17 	ldw	r2,-16(fp)
   11764:	10800104 	addi	r2,r2,4
   11768:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1176c:	e0bffd17 	ldw	r2,-12(fp)
   11770:	1080800c 	andi	r2,r2,512
   11774:	103fbe26 	beq	r2,zero,11670 <__alt_mem_onchip_memory+0xf7811670>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11778:	e0bffd17 	ldw	r2,-12(fp)
   1177c:	1004d43a 	srli	r2,r2,16
   11780:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   11784:	00001406 	br	117d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11788:	e0bffc17 	ldw	r2,-16(fp)
   1178c:	e0fffb17 	ldw	r3,-20(fp)
   11790:	18c00d17 	ldw	r3,52(r3)
   11794:	e13ffb17 	ldw	r4,-20(fp)
   11798:	20c7883a 	add	r3,r4,r3
   1179c:	18c20e04 	addi	r3,r3,2104
   117a0:	18c00003 	ldbu	r3,0(r3)
   117a4:	18c03fcc 	andi	r3,r3,255
   117a8:	18c0201c 	xori	r3,r3,128
   117ac:	18ffe004 	addi	r3,r3,-128
   117b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   117b4:	e0bffb17 	ldw	r2,-20(fp)
   117b8:	10800d17 	ldw	r2,52(r2)
   117bc:	10800044 	addi	r2,r2,1
   117c0:	10c1ffcc 	andi	r3,r2,2047
   117c4:	e0bffb17 	ldw	r2,-20(fp)
   117c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   117cc:	e0bffa17 	ldw	r2,-24(fp)
   117d0:	10bfffc4 	addi	r2,r2,-1
   117d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   117d8:	e0bffa17 	ldw	r2,-24(fp)
   117dc:	10000526 	beq	r2,zero,117f4 <altera_avalon_jtag_uart_irq+0x1a8>
   117e0:	e0bffb17 	ldw	r2,-20(fp)
   117e4:	10c00d17 	ldw	r3,52(r2)
   117e8:	e0bffb17 	ldw	r2,-20(fp)
   117ec:	10800c17 	ldw	r2,48(r2)
   117f0:	18bfe51e 	bne	r3,r2,11788 <__alt_mem_onchip_memory+0xf7811788>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   117f4:	e0bffa17 	ldw	r2,-24(fp)
   117f8:	103f9d26 	beq	r2,zero,11670 <__alt_mem_onchip_memory+0xf7811670>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   117fc:	e0bffb17 	ldw	r2,-20(fp)
   11800:	10c00817 	ldw	r3,32(r2)
   11804:	00bfff44 	movi	r2,-3
   11808:	1886703a 	and	r3,r3,r2
   1180c:	e0bffb17 	ldw	r2,-20(fp)
   11810:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11814:	e0bffb17 	ldw	r2,-20(fp)
   11818:	10800017 	ldw	r2,0(r2)
   1181c:	10800104 	addi	r2,r2,4
   11820:	1007883a 	mov	r3,r2
   11824:	e0bffb17 	ldw	r2,-20(fp)
   11828:	10800817 	ldw	r2,32(r2)
   1182c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11830:	e0bffc17 	ldw	r2,-16(fp)
   11834:	10800104 	addi	r2,r2,4
   11838:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1183c:	003f8c06 	br	11670 <__alt_mem_onchip_memory+0xf7811670>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   11840:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   11844:	0001883a 	nop
   11848:	e037883a 	mov	sp,fp
   1184c:	df000017 	ldw	fp,0(sp)
   11850:	dec00104 	addi	sp,sp,4
   11854:	f800283a 	ret

00011858 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11858:	defff804 	addi	sp,sp,-32
   1185c:	df000715 	stw	fp,28(sp)
   11860:	df000704 	addi	fp,sp,28
   11864:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11868:	e0bffb17 	ldw	r2,-20(fp)
   1186c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   11870:	e0bff917 	ldw	r2,-28(fp)
   11874:	10800017 	ldw	r2,0(r2)
   11878:	10800104 	addi	r2,r2,4
   1187c:	10800037 	ldwio	r2,0(r2)
   11880:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11884:	e0bffa17 	ldw	r2,-24(fp)
   11888:	1081000c 	andi	r2,r2,1024
   1188c:	10000b26 	beq	r2,zero,118bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   11890:	e0bff917 	ldw	r2,-28(fp)
   11894:	10800017 	ldw	r2,0(r2)
   11898:	10800104 	addi	r2,r2,4
   1189c:	1007883a 	mov	r3,r2
   118a0:	e0bff917 	ldw	r2,-28(fp)
   118a4:	10800817 	ldw	r2,32(r2)
   118a8:	10810014 	ori	r2,r2,1024
   118ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   118b0:	e0bff917 	ldw	r2,-28(fp)
   118b4:	10000915 	stw	zero,36(r2)
   118b8:	00000a06 	br	118e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   118bc:	e0bff917 	ldw	r2,-28(fp)
   118c0:	10c00917 	ldw	r3,36(r2)
   118c4:	00a00034 	movhi	r2,32768
   118c8:	10bfff04 	addi	r2,r2,-4
   118cc:	10c00536 	bltu	r2,r3,118e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   118d0:	e0bff917 	ldw	r2,-28(fp)
   118d4:	10800917 	ldw	r2,36(r2)
   118d8:	10c00044 	addi	r3,r2,1
   118dc:	e0bff917 	ldw	r2,-28(fp)
   118e0:	10c00915 	stw	r3,36(r2)
   118e4:	d0a6ea17 	ldw	r2,-25688(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   118e8:	e037883a 	mov	sp,fp
   118ec:	df000017 	ldw	fp,0(sp)
   118f0:	dec00104 	addi	sp,sp,4
   118f4:	f800283a 	ret

000118f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   118f8:	defffd04 	addi	sp,sp,-12
   118fc:	df000215 	stw	fp,8(sp)
   11900:	df000204 	addi	fp,sp,8
   11904:	e13ffe15 	stw	r4,-8(fp)
   11908:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1190c:	00000506 	br	11924 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11910:	e0bfff17 	ldw	r2,-4(fp)
   11914:	1090000c 	andi	r2,r2,16384
   11918:	10000226 	beq	r2,zero,11924 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1191c:	00bffd44 	movi	r2,-11
   11920:	00000b06 	br	11950 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11924:	e0bffe17 	ldw	r2,-8(fp)
   11928:	10c00d17 	ldw	r3,52(r2)
   1192c:	e0bffe17 	ldw	r2,-8(fp)
   11930:	10800c17 	ldw	r2,48(r2)
   11934:	18800526 	beq	r3,r2,1194c <altera_avalon_jtag_uart_close+0x54>
   11938:	e0bffe17 	ldw	r2,-8(fp)
   1193c:	10c00917 	ldw	r3,36(r2)
   11940:	e0bffe17 	ldw	r2,-8(fp)
   11944:	10800117 	ldw	r2,4(r2)
   11948:	18bff136 	bltu	r3,r2,11910 <__alt_mem_onchip_memory+0xf7811910>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1194c:	0005883a 	mov	r2,zero
}
   11950:	e037883a 	mov	sp,fp
   11954:	df000017 	ldw	fp,0(sp)
   11958:	dec00104 	addi	sp,sp,4
   1195c:	f800283a 	ret

00011960 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11960:	defffa04 	addi	sp,sp,-24
   11964:	df000515 	stw	fp,20(sp)
   11968:	df000504 	addi	fp,sp,20
   1196c:	e13ffd15 	stw	r4,-12(fp)
   11970:	e17ffe15 	stw	r5,-8(fp)
   11974:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11978:	00bff9c4 	movi	r2,-25
   1197c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   11980:	e0bffe17 	ldw	r2,-8(fp)
   11984:	10da8060 	cmpeqi	r3,r2,27137
   11988:	1800031e 	bne	r3,zero,11998 <altera_avalon_jtag_uart_ioctl+0x38>
   1198c:	109a80a0 	cmpeqi	r2,r2,27138
   11990:	1000181e 	bne	r2,zero,119f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   11994:	00002906 	br	11a3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11998:	e0bffd17 	ldw	r2,-12(fp)
   1199c:	10c00117 	ldw	r3,4(r2)
   119a0:	00a00034 	movhi	r2,32768
   119a4:	10bfffc4 	addi	r2,r2,-1
   119a8:	18802126 	beq	r3,r2,11a30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   119ac:	e0bfff17 	ldw	r2,-4(fp)
   119b0:	10800017 	ldw	r2,0(r2)
   119b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   119b8:	e0bffc17 	ldw	r2,-16(fp)
   119bc:	10800090 	cmplti	r2,r2,2
   119c0:	1000061e 	bne	r2,zero,119dc <altera_avalon_jtag_uart_ioctl+0x7c>
   119c4:	e0fffc17 	ldw	r3,-16(fp)
   119c8:	00a00034 	movhi	r2,32768
   119cc:	10bfffc4 	addi	r2,r2,-1
   119d0:	18800226 	beq	r3,r2,119dc <altera_avalon_jtag_uart_ioctl+0x7c>
   119d4:	e0bffc17 	ldw	r2,-16(fp)
   119d8:	00000206 	br	119e4 <altera_avalon_jtag_uart_ioctl+0x84>
   119dc:	00a00034 	movhi	r2,32768
   119e0:	10bfff84 	addi	r2,r2,-2
   119e4:	e0fffd17 	ldw	r3,-12(fp)
   119e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   119ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   119f0:	00000f06 	br	11a30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   119f4:	e0bffd17 	ldw	r2,-12(fp)
   119f8:	10c00117 	ldw	r3,4(r2)
   119fc:	00a00034 	movhi	r2,32768
   11a00:	10bfffc4 	addi	r2,r2,-1
   11a04:	18800c26 	beq	r3,r2,11a38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11a08:	e0bffd17 	ldw	r2,-12(fp)
   11a0c:	10c00917 	ldw	r3,36(r2)
   11a10:	e0bffd17 	ldw	r2,-12(fp)
   11a14:	10800117 	ldw	r2,4(r2)
   11a18:	1885803a 	cmpltu	r2,r3,r2
   11a1c:	10c03fcc 	andi	r3,r2,255
   11a20:	e0bfff17 	ldw	r2,-4(fp)
   11a24:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11a28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11a2c:	00000206 	br	11a38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   11a30:	0001883a 	nop
   11a34:	00000106 	br	11a3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   11a38:	0001883a 	nop

  default:
    break;
  }

  return rc;
   11a3c:	e0bffb17 	ldw	r2,-20(fp)
}
   11a40:	e037883a 	mov	sp,fp
   11a44:	df000017 	ldw	fp,0(sp)
   11a48:	dec00104 	addi	sp,sp,4
   11a4c:	f800283a 	ret

00011a50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11a50:	defff304 	addi	sp,sp,-52
   11a54:	dfc00c15 	stw	ra,48(sp)
   11a58:	df000b15 	stw	fp,44(sp)
   11a5c:	df000b04 	addi	fp,sp,44
   11a60:	e13ffc15 	stw	r4,-16(fp)
   11a64:	e17ffd15 	stw	r5,-12(fp)
   11a68:	e1bffe15 	stw	r6,-8(fp)
   11a6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   11a70:	e0bffd17 	ldw	r2,-12(fp)
   11a74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11a78:	00004706 	br	11b98 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11a7c:	e0bffc17 	ldw	r2,-16(fp)
   11a80:	10800a17 	ldw	r2,40(r2)
   11a84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11a88:	e0bffc17 	ldw	r2,-16(fp)
   11a8c:	10800b17 	ldw	r2,44(r2)
   11a90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11a94:	e0fff717 	ldw	r3,-36(fp)
   11a98:	e0bff817 	ldw	r2,-32(fp)
   11a9c:	18800536 	bltu	r3,r2,11ab4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   11aa0:	e0fff717 	ldw	r3,-36(fp)
   11aa4:	e0bff817 	ldw	r2,-32(fp)
   11aa8:	1885c83a 	sub	r2,r3,r2
   11aac:	e0bff615 	stw	r2,-40(fp)
   11ab0:	00000406 	br	11ac4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11ab4:	00c20004 	movi	r3,2048
   11ab8:	e0bff817 	ldw	r2,-32(fp)
   11abc:	1885c83a 	sub	r2,r3,r2
   11ac0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11ac4:	e0bff617 	ldw	r2,-40(fp)
   11ac8:	10001e26 	beq	r2,zero,11b44 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   11acc:	e0fffe17 	ldw	r3,-8(fp)
   11ad0:	e0bff617 	ldw	r2,-40(fp)
   11ad4:	1880022e 	bgeu	r3,r2,11ae0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   11ad8:	e0bffe17 	ldw	r2,-8(fp)
   11adc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11ae0:	e0bffc17 	ldw	r2,-16(fp)
   11ae4:	10c00e04 	addi	r3,r2,56
   11ae8:	e0bff817 	ldw	r2,-32(fp)
   11aec:	1885883a 	add	r2,r3,r2
   11af0:	e1bff617 	ldw	r6,-40(fp)
   11af4:	100b883a 	mov	r5,r2
   11af8:	e13ff517 	ldw	r4,-44(fp)
   11afc:	000bdb00 	call	bdb0 <memcpy>
      ptr   += n;
   11b00:	e0fff517 	ldw	r3,-44(fp)
   11b04:	e0bff617 	ldw	r2,-40(fp)
   11b08:	1885883a 	add	r2,r3,r2
   11b0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11b10:	e0fffe17 	ldw	r3,-8(fp)
   11b14:	e0bff617 	ldw	r2,-40(fp)
   11b18:	1885c83a 	sub	r2,r3,r2
   11b1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11b20:	e0fff817 	ldw	r3,-32(fp)
   11b24:	e0bff617 	ldw	r2,-40(fp)
   11b28:	1885883a 	add	r2,r3,r2
   11b2c:	10c1ffcc 	andi	r3,r2,2047
   11b30:	e0bffc17 	ldw	r2,-16(fp)
   11b34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11b38:	e0bffe17 	ldw	r2,-8(fp)
   11b3c:	00bfcf16 	blt	zero,r2,11a7c <__alt_mem_onchip_memory+0xf7811a7c>
   11b40:	00000106 	br	11b48 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   11b44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   11b48:	e0fff517 	ldw	r3,-44(fp)
   11b4c:	e0bffd17 	ldw	r2,-12(fp)
   11b50:	1880141e 	bne	r3,r2,11ba4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11b54:	e0bfff17 	ldw	r2,-4(fp)
   11b58:	1090000c 	andi	r2,r2,16384
   11b5c:	1000131e 	bne	r2,zero,11bac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11b60:	0001883a 	nop
   11b64:	e0bffc17 	ldw	r2,-16(fp)
   11b68:	10c00a17 	ldw	r3,40(r2)
   11b6c:	e0bff717 	ldw	r2,-36(fp)
   11b70:	1880051e 	bne	r3,r2,11b88 <altera_avalon_jtag_uart_read+0x138>
   11b74:	e0bffc17 	ldw	r2,-16(fp)
   11b78:	10c00917 	ldw	r3,36(r2)
   11b7c:	e0bffc17 	ldw	r2,-16(fp)
   11b80:	10800117 	ldw	r2,4(r2)
   11b84:	18bff736 	bltu	r3,r2,11b64 <__alt_mem_onchip_memory+0xf7811b64>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11b88:	e0bffc17 	ldw	r2,-16(fp)
   11b8c:	10c00a17 	ldw	r3,40(r2)
   11b90:	e0bff717 	ldw	r2,-36(fp)
   11b94:	18800726 	beq	r3,r2,11bb4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11b98:	e0bffe17 	ldw	r2,-8(fp)
   11b9c:	00bfb716 	blt	zero,r2,11a7c <__alt_mem_onchip_memory+0xf7811a7c>
   11ba0:	00000506 	br	11bb8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   11ba4:	0001883a 	nop
   11ba8:	00000306 	br	11bb8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   11bac:	0001883a 	nop
   11bb0:	00000106 	br	11bb8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   11bb4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11bb8:	e0fff517 	ldw	r3,-44(fp)
   11bbc:	e0bffd17 	ldw	r2,-12(fp)
   11bc0:	18801826 	beq	r3,r2,11c24 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bc4:	0005303a 	rdctl	r2,status
   11bc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bcc:	e0fffb17 	ldw	r3,-20(fp)
   11bd0:	00bfff84 	movi	r2,-2
   11bd4:	1884703a 	and	r2,r3,r2
   11bd8:	1001703a 	wrctl	status,r2
  
  return context;
   11bdc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11be0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11be4:	e0bffc17 	ldw	r2,-16(fp)
   11be8:	10800817 	ldw	r2,32(r2)
   11bec:	10c00054 	ori	r3,r2,1
   11bf0:	e0bffc17 	ldw	r2,-16(fp)
   11bf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11bf8:	e0bffc17 	ldw	r2,-16(fp)
   11bfc:	10800017 	ldw	r2,0(r2)
   11c00:	10800104 	addi	r2,r2,4
   11c04:	1007883a 	mov	r3,r2
   11c08:	e0bffc17 	ldw	r2,-16(fp)
   11c0c:	10800817 	ldw	r2,32(r2)
   11c10:	18800035 	stwio	r2,0(r3)
   11c14:	e0bffa17 	ldw	r2,-24(fp)
   11c18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c1c:	e0bff917 	ldw	r2,-28(fp)
   11c20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11c24:	e0fff517 	ldw	r3,-44(fp)
   11c28:	e0bffd17 	ldw	r2,-12(fp)
   11c2c:	18800426 	beq	r3,r2,11c40 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11c30:	e0fff517 	ldw	r3,-44(fp)
   11c34:	e0bffd17 	ldw	r2,-12(fp)
   11c38:	1885c83a 	sub	r2,r3,r2
   11c3c:	00000606 	br	11c58 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11c40:	e0bfff17 	ldw	r2,-4(fp)
   11c44:	1090000c 	andi	r2,r2,16384
   11c48:	10000226 	beq	r2,zero,11c54 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   11c4c:	00bffd44 	movi	r2,-11
   11c50:	00000106 	br	11c58 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11c54:	00bffec4 	movi	r2,-5
}
   11c58:	e037883a 	mov	sp,fp
   11c5c:	dfc00117 	ldw	ra,4(sp)
   11c60:	df000017 	ldw	fp,0(sp)
   11c64:	dec00204 	addi	sp,sp,8
   11c68:	f800283a 	ret

00011c6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11c6c:	defff304 	addi	sp,sp,-52
   11c70:	dfc00c15 	stw	ra,48(sp)
   11c74:	df000b15 	stw	fp,44(sp)
   11c78:	df000b04 	addi	fp,sp,44
   11c7c:	e13ffc15 	stw	r4,-16(fp)
   11c80:	e17ffd15 	stw	r5,-12(fp)
   11c84:	e1bffe15 	stw	r6,-8(fp)
   11c88:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11c8c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11c90:	e0bffd17 	ldw	r2,-12(fp)
   11c94:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11c98:	00003706 	br	11d78 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11c9c:	e0bffc17 	ldw	r2,-16(fp)
   11ca0:	10800c17 	ldw	r2,48(r2)
   11ca4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   11ca8:	e0bffc17 	ldw	r2,-16(fp)
   11cac:	10800d17 	ldw	r2,52(r2)
   11cb0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11cb4:	e0fff917 	ldw	r3,-28(fp)
   11cb8:	e0bff517 	ldw	r2,-44(fp)
   11cbc:	1880062e 	bgeu	r3,r2,11cd8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11cc0:	e0fff517 	ldw	r3,-44(fp)
   11cc4:	e0bff917 	ldw	r2,-28(fp)
   11cc8:	1885c83a 	sub	r2,r3,r2
   11ccc:	10bfffc4 	addi	r2,r2,-1
   11cd0:	e0bff615 	stw	r2,-40(fp)
   11cd4:	00000b06 	br	11d04 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11cd8:	e0bff517 	ldw	r2,-44(fp)
   11cdc:	10000526 	beq	r2,zero,11cf4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11ce0:	00c20004 	movi	r3,2048
   11ce4:	e0bff917 	ldw	r2,-28(fp)
   11ce8:	1885c83a 	sub	r2,r3,r2
   11cec:	e0bff615 	stw	r2,-40(fp)
   11cf0:	00000406 	br	11d04 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11cf4:	00c1ffc4 	movi	r3,2047
   11cf8:	e0bff917 	ldw	r2,-28(fp)
   11cfc:	1885c83a 	sub	r2,r3,r2
   11d00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11d04:	e0bff617 	ldw	r2,-40(fp)
   11d08:	10001e26 	beq	r2,zero,11d84 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   11d0c:	e0fffe17 	ldw	r3,-8(fp)
   11d10:	e0bff617 	ldw	r2,-40(fp)
   11d14:	1880022e 	bgeu	r3,r2,11d20 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11d18:	e0bffe17 	ldw	r2,-8(fp)
   11d1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11d20:	e0bffc17 	ldw	r2,-16(fp)
   11d24:	10c20e04 	addi	r3,r2,2104
   11d28:	e0bff917 	ldw	r2,-28(fp)
   11d2c:	1885883a 	add	r2,r3,r2
   11d30:	e1bff617 	ldw	r6,-40(fp)
   11d34:	e17ffd17 	ldw	r5,-12(fp)
   11d38:	1009883a 	mov	r4,r2
   11d3c:	000bdb00 	call	bdb0 <memcpy>
      ptr   += n;
   11d40:	e0fffd17 	ldw	r3,-12(fp)
   11d44:	e0bff617 	ldw	r2,-40(fp)
   11d48:	1885883a 	add	r2,r3,r2
   11d4c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11d50:	e0fffe17 	ldw	r3,-8(fp)
   11d54:	e0bff617 	ldw	r2,-40(fp)
   11d58:	1885c83a 	sub	r2,r3,r2
   11d5c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11d60:	e0fff917 	ldw	r3,-28(fp)
   11d64:	e0bff617 	ldw	r2,-40(fp)
   11d68:	1885883a 	add	r2,r3,r2
   11d6c:	10c1ffcc 	andi	r3,r2,2047
   11d70:	e0bffc17 	ldw	r2,-16(fp)
   11d74:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11d78:	e0bffe17 	ldw	r2,-8(fp)
   11d7c:	00bfc716 	blt	zero,r2,11c9c <__alt_mem_onchip_memory+0xf7811c9c>
   11d80:	00000106 	br	11d88 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11d84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d88:	0005303a 	rdctl	r2,status
   11d8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d90:	e0fffb17 	ldw	r3,-20(fp)
   11d94:	00bfff84 	movi	r2,-2
   11d98:	1884703a 	and	r2,r3,r2
   11d9c:	1001703a 	wrctl	status,r2
  
  return context;
   11da0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11da4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11da8:	e0bffc17 	ldw	r2,-16(fp)
   11dac:	10800817 	ldw	r2,32(r2)
   11db0:	10c00094 	ori	r3,r2,2
   11db4:	e0bffc17 	ldw	r2,-16(fp)
   11db8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11dbc:	e0bffc17 	ldw	r2,-16(fp)
   11dc0:	10800017 	ldw	r2,0(r2)
   11dc4:	10800104 	addi	r2,r2,4
   11dc8:	1007883a 	mov	r3,r2
   11dcc:	e0bffc17 	ldw	r2,-16(fp)
   11dd0:	10800817 	ldw	r2,32(r2)
   11dd4:	18800035 	stwio	r2,0(r3)
   11dd8:	e0bffa17 	ldw	r2,-24(fp)
   11ddc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11de0:	e0bff817 	ldw	r2,-32(fp)
   11de4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11de8:	e0bffe17 	ldw	r2,-8(fp)
   11dec:	0080100e 	bge	zero,r2,11e30 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11df0:	e0bfff17 	ldw	r2,-4(fp)
   11df4:	1090000c 	andi	r2,r2,16384
   11df8:	1000101e 	bne	r2,zero,11e3c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11dfc:	0001883a 	nop
   11e00:	e0bffc17 	ldw	r2,-16(fp)
   11e04:	10c00d17 	ldw	r3,52(r2)
   11e08:	e0bff517 	ldw	r2,-44(fp)
   11e0c:	1880051e 	bne	r3,r2,11e24 <altera_avalon_jtag_uart_write+0x1b8>
   11e10:	e0bffc17 	ldw	r2,-16(fp)
   11e14:	10c00917 	ldw	r3,36(r2)
   11e18:	e0bffc17 	ldw	r2,-16(fp)
   11e1c:	10800117 	ldw	r2,4(r2)
   11e20:	18bff736 	bltu	r3,r2,11e00 <__alt_mem_onchip_memory+0xf7811e00>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11e24:	e0bffc17 	ldw	r2,-16(fp)
   11e28:	10800917 	ldw	r2,36(r2)
   11e2c:	1000051e 	bne	r2,zero,11e44 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11e30:	e0bffe17 	ldw	r2,-8(fp)
   11e34:	00bfd016 	blt	zero,r2,11d78 <__alt_mem_onchip_memory+0xf7811d78>
   11e38:	00000306 	br	11e48 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   11e3c:	0001883a 	nop
   11e40:	00000106 	br	11e48 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11e44:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11e48:	e0fffd17 	ldw	r3,-12(fp)
   11e4c:	e0bff717 	ldw	r2,-36(fp)
   11e50:	18800426 	beq	r3,r2,11e64 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11e54:	e0fffd17 	ldw	r3,-12(fp)
   11e58:	e0bff717 	ldw	r2,-36(fp)
   11e5c:	1885c83a 	sub	r2,r3,r2
   11e60:	00000606 	br	11e7c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11e64:	e0bfff17 	ldw	r2,-4(fp)
   11e68:	1090000c 	andi	r2,r2,16384
   11e6c:	10000226 	beq	r2,zero,11e78 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11e70:	00bffd44 	movi	r2,-11
   11e74:	00000106 	br	11e7c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11e78:	00bffec4 	movi	r2,-5
}
   11e7c:	e037883a 	mov	sp,fp
   11e80:	dfc00117 	ldw	ra,4(sp)
   11e84:	df000017 	ldw	fp,0(sp)
   11e88:	dec00204 	addi	sp,sp,8
   11e8c:	f800283a 	ret

00011e90 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11e90:	defffa04 	addi	sp,sp,-24
   11e94:	dfc00515 	stw	ra,20(sp)
   11e98:	df000415 	stw	fp,16(sp)
   11e9c:	df000404 	addi	fp,sp,16
   11ea0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11ea4:	0007883a 	mov	r3,zero
   11ea8:	e0bfff17 	ldw	r2,-4(fp)
   11eac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11eb0:	e0bfff17 	ldw	r2,-4(fp)
   11eb4:	10800104 	addi	r2,r2,4
   11eb8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ebc:	0005303a 	rdctl	r2,status
   11ec0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ec4:	e0fffd17 	ldw	r3,-12(fp)
   11ec8:	00bfff84 	movi	r2,-2
   11ecc:	1884703a 	and	r2,r3,r2
   11ed0:	1001703a 	wrctl	status,r2
  
  return context;
   11ed4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   11ed8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   11edc:	001110c0 	call	1110c <alt_tick>
   11ee0:	e0bffc17 	ldw	r2,-16(fp)
   11ee4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ee8:	e0bffe17 	ldw	r2,-8(fp)
   11eec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11ef0:	0001883a 	nop
   11ef4:	e037883a 	mov	sp,fp
   11ef8:	dfc00117 	ldw	ra,4(sp)
   11efc:	df000017 	ldw	fp,0(sp)
   11f00:	dec00204 	addi	sp,sp,8
   11f04:	f800283a 	ret

00011f08 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11f08:	defff804 	addi	sp,sp,-32
   11f0c:	dfc00715 	stw	ra,28(sp)
   11f10:	df000615 	stw	fp,24(sp)
   11f14:	df000604 	addi	fp,sp,24
   11f18:	e13ffc15 	stw	r4,-16(fp)
   11f1c:	e17ffd15 	stw	r5,-12(fp)
   11f20:	e1bffe15 	stw	r6,-8(fp)
   11f24:	e1ffff15 	stw	r7,-4(fp)
   11f28:	e0bfff17 	ldw	r2,-4(fp)
   11f2c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11f30:	d0a6ea17 	ldw	r2,-25688(gp)
   11f34:	1000021e 	bne	r2,zero,11f40 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   11f38:	e0bffb17 	ldw	r2,-20(fp)
   11f3c:	d0a6ea15 	stw	r2,-25688(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11f40:	e0bffc17 	ldw	r2,-16(fp)
   11f44:	10800104 	addi	r2,r2,4
   11f48:	00c001c4 	movi	r3,7
   11f4c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11f50:	d8000015 	stw	zero,0(sp)
   11f54:	e1fffc17 	ldw	r7,-16(fp)
   11f58:	01800074 	movhi	r6,1
   11f5c:	3187a404 	addi	r6,r6,7824
   11f60:	e17ffe17 	ldw	r5,-8(fp)
   11f64:	e13ffd17 	ldw	r4,-12(fp)
   11f68:	001254c0 	call	1254c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11f6c:	0001883a 	nop
   11f70:	e037883a 	mov	sp,fp
   11f74:	dfc00117 	ldw	ra,4(sp)
   11f78:	df000017 	ldw	fp,0(sp)
   11f7c:	dec00204 	addi	sp,sp,8
   11f80:	f800283a 	ret

00011f84 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   11f84:	deffe504 	addi	sp,sp,-108
   11f88:	dfc01915 	stw	ra,100(sp)
   11f8c:	df001815 	stw	fp,96(sp)
   11f90:	dcc01715 	stw	r19,92(sp)
   11f94:	dc801615 	stw	r18,88(sp)
   11f98:	dc401515 	stw	r17,84(sp)
   11f9c:	dc001415 	stw	r16,80(sp)
   11fa0:	df001804 	addi	fp,sp,96
   11fa4:	e13ff915 	stw	r4,-28(fp)
   11fa8:	e17ffa15 	stw	r5,-24(fp)
   11fac:	e1bffb15 	stw	r6,-20(fp)
   11fb0:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
   11fb4:	00800044 	movi	r2,1
   11fb8:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
   11fbc:	00800074 	movhi	r2,1
   11fc0:	108e1504 	addi	r2,r2,14420
   11fc4:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
   11fc8:	00800074 	movhi	r2,1
   11fcc:	108e2604 	addi	r2,r2,14488
   11fd0:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
   11fd4:	0007883a 	mov	r3,zero
   11fd8:	e0bff917 	ldw	r2,-28(fp)
   11fdc:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
   11fe0:	e0800204 	addi	r2,fp,8
   11fe4:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
   11fe8:	e13ff917 	ldw	r4,-28(fp)
   11fec:	0012c600 	call	12c60 <perf_get_total_time>
   11ff0:	e0bff215 	stw	r2,-56(fp)
   11ff4:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
   11ff8:	e13ff217 	ldw	r4,-56(fp)
   11ffc:	e17ff317 	ldw	r5,-52(fp)
   12000:	00133f80 	call	133f8 <__floatundidf>
   12004:	1021883a 	mov	r16,r2
   12008:	1823883a 	mov	r17,r3
   1200c:	e13ffa17 	ldw	r4,-24(fp)
   12010:	00105c40 	call	105c4 <__floatunsidf>
   12014:	1009883a 	mov	r4,r2
   12018:	180b883a 	mov	r5,r3
   1201c:	200d883a 	mov	r6,r4
   12020:	280f883a 	mov	r7,r5
   12024:	8009883a 	mov	r4,r16
   12028:	880b883a 	mov	r5,r17
   1202c:	00040340 	call	4034 <__divdf3>
   12030:	1009883a 	mov	r4,r2
   12034:	180b883a 	mov	r5,r3
   12038:	e13ff415 	stw	r4,-48(fp)
   1203c:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
   12040:	e0bff017 	ldw	r2,-64(fp)
   12044:	d8800315 	stw	r2,12(sp)
   12048:	e0bff117 	ldw	r2,-60(fp)
   1204c:	d8800215 	stw	r2,8(sp)
   12050:	e0bff017 	ldw	r2,-64(fp)
   12054:	d8800115 	stw	r2,4(sp)
   12058:	e0bff317 	ldw	r2,-52(fp)
   1205c:	d8800015 	stw	r2,0(sp)
   12060:	e1fff217 	ldw	r7,-56(fp)
   12064:	e17ff417 	ldw	r5,-48(fp)
   12068:	e1bff517 	ldw	r6,-44(fp)
   1206c:	01000074 	movhi	r4,1
   12070:	210e3704 	addi	r4,r4,14556
   12074:	000616c0 	call	616c <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
   12078:	e0bff817 	ldw	r2,-32(fp)
   1207c:	10c00104 	addi	r3,r2,4
   12080:	e0fff815 	stw	r3,-32(fp)
   12084:	10800017 	ldw	r2,0(r2)
   12088:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
   1208c:	00800044 	movi	r2,1
   12090:	e0bfef15 	stw	r2,-68(fp)
   12094:	00004e06 	br	121d0 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
   12098:	e17fef17 	ldw	r5,-68(fp)
   1209c:	e13ff917 	ldw	r4,-28(fp)
   120a0:	0012ba40 	call	12ba4 <perf_get_section_time>
   120a4:	e0bff615 	stw	r2,-40(fp)
   120a8:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
   120ac:	e13ff617 	ldw	r4,-40(fp)
   120b0:	e17ff717 	ldw	r5,-36(fp)
   120b4:	00133f80 	call	133f8 <__floatundidf>
   120b8:	1011883a 	mov	r8,r2
   120bc:	1813883a 	mov	r9,r3
   120c0:	000d883a 	mov	r6,zero
   120c4:	01d01674 	movhi	r7,16473
   120c8:	4009883a 	mov	r4,r8
   120cc:	480b883a 	mov	r5,r9
   120d0:	0004aec0 	call	4aec <__muldf3>
   120d4:	1009883a 	mov	r4,r2
   120d8:	180b883a 	mov	r5,r3
   120dc:	2021883a 	mov	r16,r4
   120e0:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   120e4:	e13ff217 	ldw	r4,-56(fp)
   120e8:	e17ff317 	ldw	r5,-52(fp)
   120ec:	00133f80 	call	133f8 <__floatundidf>
   120f0:	1009883a 	mov	r4,r2
   120f4:	180b883a 	mov	r5,r3
   120f8:	200d883a 	mov	r6,r4
   120fc:	280f883a 	mov	r7,r5
   12100:	8009883a 	mov	r4,r16
   12104:	880b883a 	mov	r5,r17
   12108:	00040340 	call	4034 <__divdf3>
   1210c:	1009883a 	mov	r4,r2
   12110:	180b883a 	mov	r5,r3
   12114:	2025883a 	mov	r18,r4
   12118:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
   1211c:	e13ff617 	ldw	r4,-40(fp)
   12120:	e17ff717 	ldw	r5,-36(fp)
   12124:	00133f80 	call	133f8 <__floatundidf>
   12128:	1021883a 	mov	r16,r2
   1212c:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   12130:	e13ffa17 	ldw	r4,-24(fp)
   12134:	00105c40 	call	105c4 <__floatunsidf>
   12138:	1009883a 	mov	r4,r2
   1213c:	180b883a 	mov	r5,r3
   12140:	200d883a 	mov	r6,r4
   12144:	280f883a 	mov	r7,r5
   12148:	8009883a 	mov	r4,r16
   1214c:	880b883a 	mov	r5,r17
   12150:	00040340 	call	4034 <__divdf3>
   12154:	1009883a 	mov	r4,r2
   12158:	180b883a 	mov	r5,r3
   1215c:	2021883a 	mov	r16,r4
   12160:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
   12164:	e17fef17 	ldw	r5,-68(fp)
   12168:	e13ff917 	ldw	r4,-28(fp)
   1216c:	0012cac0 	call	12cac <perf_get_num_starts>
   12170:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   12174:	e0bff017 	ldw	r2,-64(fp)
   12178:	d8800515 	stw	r2,20(sp)
   1217c:	d8c00415 	stw	r3,16(sp)
   12180:	e0bff617 	ldw	r2,-40(fp)
   12184:	d8800215 	stw	r2,8(sp)
   12188:	e0bff717 	ldw	r2,-36(fp)
   1218c:	d8800315 	stw	r2,12(sp)
   12190:	dc000015 	stw	r16,0(sp)
   12194:	dc400115 	stw	r17,4(sp)
   12198:	900d883a 	mov	r6,r18
   1219c:	980f883a 	mov	r7,r19
   121a0:	e17fee17 	ldw	r5,-72(fp)
   121a4:	01000074 	movhi	r4,1
   121a8:	210e4c04 	addi	r4,r4,14640
   121ac:	000616c0 	call	616c <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
   121b0:	e0bff817 	ldw	r2,-32(fp)
   121b4:	10c00104 	addi	r3,r2,4
   121b8:	e0fff815 	stw	r3,-32(fp)
   121bc:	10800017 	ldw	r2,0(r2)
   121c0:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
   121c4:	e0bfef17 	ldw	r2,-68(fp)
   121c8:	10800044 	addi	r2,r2,1
   121cc:	e0bfef15 	stw	r2,-68(fp)
   121d0:	e0bfef17 	ldw	r2,-68(fp)
   121d4:	e0fffb17 	ldw	r3,-20(fp)
   121d8:	18bfaf0e 	bge	r3,r2,12098 <__alt_mem_onchip_memory+0xf7812098>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
   121dc:	0005883a 	mov	r2,zero
}
   121e0:	e6fffc04 	addi	sp,fp,-16
   121e4:	dfc00517 	ldw	ra,20(sp)
   121e8:	df000417 	ldw	fp,16(sp)
   121ec:	dcc00317 	ldw	r19,12(sp)
   121f0:	dc800217 	ldw	r18,8(sp)
   121f4:	dc400117 	ldw	r17,4(sp)
   121f8:	dc000017 	ldw	r16,0(sp)
   121fc:	dec00704 	addi	sp,sp,28
   12200:	f800283a 	ret

00012204 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   12204:	defff504 	addi	sp,sp,-44
   12208:	df000a15 	stw	fp,40(sp)
   1220c:	df000a04 	addi	fp,sp,40
   12210:	e13ffc15 	stw	r4,-16(fp)
   12214:	e17ffd15 	stw	r5,-12(fp)
   12218:	e1bffe15 	stw	r6,-8(fp)
   1221c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   12220:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12224:	d0a6ea17 	ldw	r2,-25688(gp)
  
  if (alt_ticks_per_second ())
   12228:	10003c26 	beq	r2,zero,1231c <alt_alarm_start+0x118>
  {
    if (alarm)
   1222c:	e0bffc17 	ldw	r2,-16(fp)
   12230:	10003826 	beq	r2,zero,12314 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   12234:	e0bffc17 	ldw	r2,-16(fp)
   12238:	e0fffe17 	ldw	r3,-8(fp)
   1223c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   12240:	e0bffc17 	ldw	r2,-16(fp)
   12244:	e0ffff17 	ldw	r3,-4(fp)
   12248:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1224c:	0005303a 	rdctl	r2,status
   12250:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12254:	e0fff917 	ldw	r3,-28(fp)
   12258:	00bfff84 	movi	r2,-2
   1225c:	1884703a 	and	r2,r3,r2
   12260:	1001703a 	wrctl	status,r2
  
  return context;
   12264:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   12268:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1226c:	d0a6eb17 	ldw	r2,-25684(gp)
      
      current_nticks = alt_nticks();
   12270:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12274:	e0fffd17 	ldw	r3,-12(fp)
   12278:	e0bff617 	ldw	r2,-40(fp)
   1227c:	1885883a 	add	r2,r3,r2
   12280:	10c00044 	addi	r3,r2,1
   12284:	e0bffc17 	ldw	r2,-16(fp)
   12288:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1228c:	e0bffc17 	ldw	r2,-16(fp)
   12290:	10c00217 	ldw	r3,8(r2)
   12294:	e0bff617 	ldw	r2,-40(fp)
   12298:	1880042e 	bgeu	r3,r2,122ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1229c:	e0bffc17 	ldw	r2,-16(fp)
   122a0:	00c00044 	movi	r3,1
   122a4:	10c00405 	stb	r3,16(r2)
   122a8:	00000206 	br	122b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   122ac:	e0bffc17 	ldw	r2,-16(fp)
   122b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   122b4:	e0bffc17 	ldw	r2,-16(fp)
   122b8:	d0e01204 	addi	r3,gp,-32696
   122bc:	e0fffa15 	stw	r3,-24(fp)
   122c0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   122c4:	e0bffb17 	ldw	r2,-20(fp)
   122c8:	e0fffa17 	ldw	r3,-24(fp)
   122cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   122d0:	e0bffa17 	ldw	r2,-24(fp)
   122d4:	10c00017 	ldw	r3,0(r2)
   122d8:	e0bffb17 	ldw	r2,-20(fp)
   122dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   122e0:	e0bffa17 	ldw	r2,-24(fp)
   122e4:	10800017 	ldw	r2,0(r2)
   122e8:	e0fffb17 	ldw	r3,-20(fp)
   122ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   122f0:	e0bffa17 	ldw	r2,-24(fp)
   122f4:	e0fffb17 	ldw	r3,-20(fp)
   122f8:	10c00015 	stw	r3,0(r2)
   122fc:	e0bff817 	ldw	r2,-32(fp)
   12300:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12304:	e0bff717 	ldw	r2,-36(fp)
   12308:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1230c:	0005883a 	mov	r2,zero
   12310:	00000306 	br	12320 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   12314:	00bffa84 	movi	r2,-22
   12318:	00000106 	br	12320 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1231c:	00bfde84 	movi	r2,-134
  }
}
   12320:	e037883a 	mov	sp,fp
   12324:	df000017 	ldw	fp,0(sp)
   12328:	dec00104 	addi	sp,sp,4
   1232c:	f800283a 	ret

00012330 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12330:	defffe04 	addi	sp,sp,-8
   12334:	df000115 	stw	fp,4(sp)
   12338:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1233c:	e03fff15 	stw	zero,-4(fp)
   12340:	00000506 	br	12358 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   12344:	e0bfff17 	ldw	r2,-4(fp)
   12348:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1234c:	e0bfff17 	ldw	r2,-4(fp)
   12350:	10800804 	addi	r2,r2,32
   12354:	e0bfff15 	stw	r2,-4(fp)
   12358:	e0bfff17 	ldw	r2,-4(fp)
   1235c:	10820030 	cmpltui	r2,r2,2048
   12360:	103ff81e 	bne	r2,zero,12344 <__alt_mem_onchip_memory+0xf7812344>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12364:	0001883a 	nop
   12368:	e037883a 	mov	sp,fp
   1236c:	df000017 	ldw	fp,0(sp)
   12370:	dec00104 	addi	sp,sp,4
   12374:	f800283a 	ret

00012378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12378:	defffe04 	addi	sp,sp,-8
   1237c:	dfc00115 	stw	ra,4(sp)
   12380:	df000015 	stw	fp,0(sp)
   12384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12388:	d0a01017 	ldw	r2,-32704(gp)
   1238c:	10000326 	beq	r2,zero,1239c <alt_get_errno+0x24>
   12390:	d0a01017 	ldw	r2,-32704(gp)
   12394:	103ee83a 	callr	r2
   12398:	00000106 	br	123a0 <alt_get_errno+0x28>
   1239c:	d0a6dc04 	addi	r2,gp,-25744
}
   123a0:	e037883a 	mov	sp,fp
   123a4:	dfc00117 	ldw	ra,4(sp)
   123a8:	df000017 	ldw	fp,0(sp)
   123ac:	dec00204 	addi	sp,sp,8
   123b0:	f800283a 	ret

000123b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   123b4:	defffa04 	addi	sp,sp,-24
   123b8:	dfc00515 	stw	ra,20(sp)
   123bc:	df000415 	stw	fp,16(sp)
   123c0:	df000404 	addi	fp,sp,16
   123c4:	e13ffe15 	stw	r4,-8(fp)
   123c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   123cc:	e0bffe17 	ldw	r2,-8(fp)
   123d0:	10000326 	beq	r2,zero,123e0 <alt_dev_llist_insert+0x2c>
   123d4:	e0bffe17 	ldw	r2,-8(fp)
   123d8:	10800217 	ldw	r2,8(r2)
   123dc:	1000061e 	bne	r2,zero,123f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   123e0:	00123780 	call	12378 <alt_get_errno>
   123e4:	1007883a 	mov	r3,r2
   123e8:	00800584 	movi	r2,22
   123ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   123f0:	00bffa84 	movi	r2,-22
   123f4:	00001306 	br	12444 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   123f8:	e0bffe17 	ldw	r2,-8(fp)
   123fc:	e0ffff17 	ldw	r3,-4(fp)
   12400:	e0fffc15 	stw	r3,-16(fp)
   12404:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12408:	e0bffd17 	ldw	r2,-12(fp)
   1240c:	e0fffc17 	ldw	r3,-16(fp)
   12410:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12414:	e0bffc17 	ldw	r2,-16(fp)
   12418:	10c00017 	ldw	r3,0(r2)
   1241c:	e0bffd17 	ldw	r2,-12(fp)
   12420:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12424:	e0bffc17 	ldw	r2,-16(fp)
   12428:	10800017 	ldw	r2,0(r2)
   1242c:	e0fffd17 	ldw	r3,-12(fp)
   12430:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12434:	e0bffc17 	ldw	r2,-16(fp)
   12438:	e0fffd17 	ldw	r3,-12(fp)
   1243c:	10c00015 	stw	r3,0(r2)

  return 0;  
   12440:	0005883a 	mov	r2,zero
}
   12444:	e037883a 	mov	sp,fp
   12448:	dfc00117 	ldw	ra,4(sp)
   1244c:	df000017 	ldw	fp,0(sp)
   12450:	dec00204 	addi	sp,sp,8
   12454:	f800283a 	ret

00012458 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12458:	defffd04 	addi	sp,sp,-12
   1245c:	dfc00215 	stw	ra,8(sp)
   12460:	df000115 	stw	fp,4(sp)
   12464:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12468:	00800074 	movhi	r2,1
   1246c:	108d2604 	addi	r2,r2,13464
   12470:	e0bfff15 	stw	r2,-4(fp)
   12474:	00000606 	br	12490 <_do_ctors+0x38>
        (*ctor) (); 
   12478:	e0bfff17 	ldw	r2,-4(fp)
   1247c:	10800017 	ldw	r2,0(r2)
   12480:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12484:	e0bfff17 	ldw	r2,-4(fp)
   12488:	10bfff04 	addi	r2,r2,-4
   1248c:	e0bfff15 	stw	r2,-4(fp)
   12490:	e0ffff17 	ldw	r3,-4(fp)
   12494:	00800074 	movhi	r2,1
   12498:	108d2704 	addi	r2,r2,13468
   1249c:	18bff62e 	bgeu	r3,r2,12478 <__alt_mem_onchip_memory+0xf7812478>
        (*ctor) (); 
}
   124a0:	0001883a 	nop
   124a4:	e037883a 	mov	sp,fp
   124a8:	dfc00117 	ldw	ra,4(sp)
   124ac:	df000017 	ldw	fp,0(sp)
   124b0:	dec00204 	addi	sp,sp,8
   124b4:	f800283a 	ret

000124b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   124b8:	defffd04 	addi	sp,sp,-12
   124bc:	dfc00215 	stw	ra,8(sp)
   124c0:	df000115 	stw	fp,4(sp)
   124c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   124c8:	00800074 	movhi	r2,1
   124cc:	108d2604 	addi	r2,r2,13464
   124d0:	e0bfff15 	stw	r2,-4(fp)
   124d4:	00000606 	br	124f0 <_do_dtors+0x38>
        (*dtor) (); 
   124d8:	e0bfff17 	ldw	r2,-4(fp)
   124dc:	10800017 	ldw	r2,0(r2)
   124e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   124e4:	e0bfff17 	ldw	r2,-4(fp)
   124e8:	10bfff04 	addi	r2,r2,-4
   124ec:	e0bfff15 	stw	r2,-4(fp)
   124f0:	e0ffff17 	ldw	r3,-4(fp)
   124f4:	00800074 	movhi	r2,1
   124f8:	108d2704 	addi	r2,r2,13468
   124fc:	18bff62e 	bgeu	r3,r2,124d8 <__alt_mem_onchip_memory+0xf78124d8>
        (*dtor) (); 
}
   12500:	0001883a 	nop
   12504:	e037883a 	mov	sp,fp
   12508:	dfc00117 	ldw	ra,4(sp)
   1250c:	df000017 	ldw	fp,0(sp)
   12510:	dec00204 	addi	sp,sp,8
   12514:	f800283a 	ret

00012518 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12518:	defffe04 	addi	sp,sp,-8
   1251c:	dfc00115 	stw	ra,4(sp)
   12520:	df000015 	stw	fp,0(sp)
   12524:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12528:	01440004 	movi	r5,4096
   1252c:	0009883a 	mov	r4,zero
   12530:	0012f6c0 	call	12f6c <alt_icache_flush>
#endif
}
   12534:	0001883a 	nop
   12538:	e037883a 	mov	sp,fp
   1253c:	dfc00117 	ldw	ra,4(sp)
   12540:	df000017 	ldw	fp,0(sp)
   12544:	dec00204 	addi	sp,sp,8
   12548:	f800283a 	ret

0001254c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1254c:	defff904 	addi	sp,sp,-28
   12550:	dfc00615 	stw	ra,24(sp)
   12554:	df000515 	stw	fp,20(sp)
   12558:	df000504 	addi	fp,sp,20
   1255c:	e13ffc15 	stw	r4,-16(fp)
   12560:	e17ffd15 	stw	r5,-12(fp)
   12564:	e1bffe15 	stw	r6,-8(fp)
   12568:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1256c:	e0800217 	ldw	r2,8(fp)
   12570:	d8800015 	stw	r2,0(sp)
   12574:	e1ffff17 	ldw	r7,-4(fp)
   12578:	e1bffe17 	ldw	r6,-8(fp)
   1257c:	e17ffd17 	ldw	r5,-12(fp)
   12580:	e13ffc17 	ldw	r4,-16(fp)
   12584:	00126fc0 	call	126fc <alt_iic_isr_register>
}  
   12588:	e037883a 	mov	sp,fp
   1258c:	dfc00117 	ldw	ra,4(sp)
   12590:	df000017 	ldw	fp,0(sp)
   12594:	dec00204 	addi	sp,sp,8
   12598:	f800283a 	ret

0001259c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1259c:	defff904 	addi	sp,sp,-28
   125a0:	df000615 	stw	fp,24(sp)
   125a4:	df000604 	addi	fp,sp,24
   125a8:	e13ffe15 	stw	r4,-8(fp)
   125ac:	e17fff15 	stw	r5,-4(fp)
   125b0:	e0bfff17 	ldw	r2,-4(fp)
   125b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125b8:	0005303a 	rdctl	r2,status
   125bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125c0:	e0fffb17 	ldw	r3,-20(fp)
   125c4:	00bfff84 	movi	r2,-2
   125c8:	1884703a 	and	r2,r3,r2
   125cc:	1001703a 	wrctl	status,r2
  
  return context;
   125d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   125d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   125d8:	00c00044 	movi	r3,1
   125dc:	e0bffa17 	ldw	r2,-24(fp)
   125e0:	1884983a 	sll	r2,r3,r2
   125e4:	1007883a 	mov	r3,r2
   125e8:	d0a6ec17 	ldw	r2,-25680(gp)
   125ec:	1884b03a 	or	r2,r3,r2
   125f0:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   125f4:	d0a6ec17 	ldw	r2,-25680(gp)
   125f8:	100170fa 	wrctl	ienable,r2
   125fc:	e0bffc17 	ldw	r2,-16(fp)
   12600:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12604:	e0bffd17 	ldw	r2,-12(fp)
   12608:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1260c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   12610:	0001883a 	nop
}
   12614:	e037883a 	mov	sp,fp
   12618:	df000017 	ldw	fp,0(sp)
   1261c:	dec00104 	addi	sp,sp,4
   12620:	f800283a 	ret

00012624 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12624:	defff904 	addi	sp,sp,-28
   12628:	df000615 	stw	fp,24(sp)
   1262c:	df000604 	addi	fp,sp,24
   12630:	e13ffe15 	stw	r4,-8(fp)
   12634:	e17fff15 	stw	r5,-4(fp)
   12638:	e0bfff17 	ldw	r2,-4(fp)
   1263c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12640:	0005303a 	rdctl	r2,status
   12644:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12648:	e0fffb17 	ldw	r3,-20(fp)
   1264c:	00bfff84 	movi	r2,-2
   12650:	1884703a 	and	r2,r3,r2
   12654:	1001703a 	wrctl	status,r2
  
  return context;
   12658:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1265c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   12660:	00c00044 	movi	r3,1
   12664:	e0bffa17 	ldw	r2,-24(fp)
   12668:	1884983a 	sll	r2,r3,r2
   1266c:	0084303a 	nor	r2,zero,r2
   12670:	1007883a 	mov	r3,r2
   12674:	d0a6ec17 	ldw	r2,-25680(gp)
   12678:	1884703a 	and	r2,r3,r2
   1267c:	d0a6ec15 	stw	r2,-25680(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12680:	d0a6ec17 	ldw	r2,-25680(gp)
   12684:	100170fa 	wrctl	ienable,r2
   12688:	e0bffc17 	ldw	r2,-16(fp)
   1268c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12690:	e0bffd17 	ldw	r2,-12(fp)
   12694:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12698:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1269c:	0001883a 	nop
}
   126a0:	e037883a 	mov	sp,fp
   126a4:	df000017 	ldw	fp,0(sp)
   126a8:	dec00104 	addi	sp,sp,4
   126ac:	f800283a 	ret

000126b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   126b0:	defffc04 	addi	sp,sp,-16
   126b4:	df000315 	stw	fp,12(sp)
   126b8:	df000304 	addi	fp,sp,12
   126bc:	e13ffe15 	stw	r4,-8(fp)
   126c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   126c4:	000530fa 	rdctl	r2,ienable
   126c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   126cc:	00c00044 	movi	r3,1
   126d0:	e0bfff17 	ldw	r2,-4(fp)
   126d4:	1884983a 	sll	r2,r3,r2
   126d8:	1007883a 	mov	r3,r2
   126dc:	e0bffd17 	ldw	r2,-12(fp)
   126e0:	1884703a 	and	r2,r3,r2
   126e4:	1004c03a 	cmpne	r2,r2,zero
   126e8:	10803fcc 	andi	r2,r2,255
}
   126ec:	e037883a 	mov	sp,fp
   126f0:	df000017 	ldw	fp,0(sp)
   126f4:	dec00104 	addi	sp,sp,4
   126f8:	f800283a 	ret

000126fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   126fc:	defff504 	addi	sp,sp,-44
   12700:	dfc00a15 	stw	ra,40(sp)
   12704:	df000915 	stw	fp,36(sp)
   12708:	df000904 	addi	fp,sp,36
   1270c:	e13ffc15 	stw	r4,-16(fp)
   12710:	e17ffd15 	stw	r5,-12(fp)
   12714:	e1bffe15 	stw	r6,-8(fp)
   12718:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1271c:	00bffa84 	movi	r2,-22
   12720:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   12724:	e0bffd17 	ldw	r2,-12(fp)
   12728:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1272c:	e0bff817 	ldw	r2,-32(fp)
   12730:	10800808 	cmpgei	r2,r2,32
   12734:	1000271e 	bne	r2,zero,127d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12738:	0005303a 	rdctl	r2,status
   1273c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12740:	e0fffb17 	ldw	r3,-20(fp)
   12744:	00bfff84 	movi	r2,-2
   12748:	1884703a 	and	r2,r3,r2
   1274c:	1001703a 	wrctl	status,r2
  
  return context;
   12750:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   12754:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   12758:	008000b4 	movhi	r2,2
   1275c:	10a5d804 	addi	r2,r2,-26784
   12760:	e0fff817 	ldw	r3,-32(fp)
   12764:	180690fa 	slli	r3,r3,3
   12768:	10c5883a 	add	r2,r2,r3
   1276c:	e0fffe17 	ldw	r3,-8(fp)
   12770:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   12774:	008000b4 	movhi	r2,2
   12778:	10a5d804 	addi	r2,r2,-26784
   1277c:	e0fff817 	ldw	r3,-32(fp)
   12780:	180690fa 	slli	r3,r3,3
   12784:	10c5883a 	add	r2,r2,r3
   12788:	10800104 	addi	r2,r2,4
   1278c:	e0ffff17 	ldw	r3,-4(fp)
   12790:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   12794:	e0bffe17 	ldw	r2,-8(fp)
   12798:	10000526 	beq	r2,zero,127b0 <alt_iic_isr_register+0xb4>
   1279c:	e0bff817 	ldw	r2,-32(fp)
   127a0:	100b883a 	mov	r5,r2
   127a4:	e13ffc17 	ldw	r4,-16(fp)
   127a8:	001259c0 	call	1259c <alt_ic_irq_enable>
   127ac:	00000406 	br	127c0 <alt_iic_isr_register+0xc4>
   127b0:	e0bff817 	ldw	r2,-32(fp)
   127b4:	100b883a 	mov	r5,r2
   127b8:	e13ffc17 	ldw	r4,-16(fp)
   127bc:	00126240 	call	12624 <alt_ic_irq_disable>
   127c0:	e0bff715 	stw	r2,-36(fp)
   127c4:	e0bffa17 	ldw	r2,-24(fp)
   127c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127cc:	e0bff917 	ldw	r2,-28(fp)
   127d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   127d4:	e0bff717 	ldw	r2,-36(fp)
}
   127d8:	e037883a 	mov	sp,fp
   127dc:	dfc00117 	ldw	ra,4(sp)
   127e0:	df000017 	ldw	fp,0(sp)
   127e4:	dec00204 	addi	sp,sp,8
   127e8:	f800283a 	ret

000127ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   127ec:	defff904 	addi	sp,sp,-28
   127f0:	dfc00615 	stw	ra,24(sp)
   127f4:	df000515 	stw	fp,20(sp)
   127f8:	df000504 	addi	fp,sp,20
   127fc:	e13ffc15 	stw	r4,-16(fp)
   12800:	e17ffd15 	stw	r5,-12(fp)
   12804:	e1bffe15 	stw	r6,-8(fp)
   12808:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1280c:	e1bfff17 	ldw	r6,-4(fp)
   12810:	e17ffe17 	ldw	r5,-8(fp)
   12814:	e13ffd17 	ldw	r4,-12(fp)
   12818:	0012a2c0 	call	12a2c <open>
   1281c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   12820:	e0bffb17 	ldw	r2,-20(fp)
   12824:	10001c16 	blt	r2,zero,12898 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   12828:	00800074 	movhi	r2,1
   1282c:	10908804 	addi	r2,r2,16928
   12830:	e0fffb17 	ldw	r3,-20(fp)
   12834:	18c00324 	muli	r3,r3,12
   12838:	10c5883a 	add	r2,r2,r3
   1283c:	10c00017 	ldw	r3,0(r2)
   12840:	e0bffc17 	ldw	r2,-16(fp)
   12844:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12848:	00800074 	movhi	r2,1
   1284c:	10908804 	addi	r2,r2,16928
   12850:	e0fffb17 	ldw	r3,-20(fp)
   12854:	18c00324 	muli	r3,r3,12
   12858:	10c5883a 	add	r2,r2,r3
   1285c:	10800104 	addi	r2,r2,4
   12860:	10c00017 	ldw	r3,0(r2)
   12864:	e0bffc17 	ldw	r2,-16(fp)
   12868:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1286c:	00800074 	movhi	r2,1
   12870:	10908804 	addi	r2,r2,16928
   12874:	e0fffb17 	ldw	r3,-20(fp)
   12878:	18c00324 	muli	r3,r3,12
   1287c:	10c5883a 	add	r2,r2,r3
   12880:	10800204 	addi	r2,r2,8
   12884:	10c00017 	ldw	r3,0(r2)
   12888:	e0bffc17 	ldw	r2,-16(fp)
   1288c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12890:	e13ffb17 	ldw	r4,-20(fp)
   12894:	0010f5c0 	call	10f5c <alt_release_fd>
  }
} 
   12898:	0001883a 	nop
   1289c:	e037883a 	mov	sp,fp
   128a0:	dfc00117 	ldw	ra,4(sp)
   128a4:	df000017 	ldw	fp,0(sp)
   128a8:	dec00204 	addi	sp,sp,8
   128ac:	f800283a 	ret

000128b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   128b0:	defffb04 	addi	sp,sp,-20
   128b4:	dfc00415 	stw	ra,16(sp)
   128b8:	df000315 	stw	fp,12(sp)
   128bc:	df000304 	addi	fp,sp,12
   128c0:	e13ffd15 	stw	r4,-12(fp)
   128c4:	e17ffe15 	stw	r5,-8(fp)
   128c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   128cc:	01c07fc4 	movi	r7,511
   128d0:	01800044 	movi	r6,1
   128d4:	e17ffd17 	ldw	r5,-12(fp)
   128d8:	01000074 	movhi	r4,1
   128dc:	21108b04 	addi	r4,r4,16940
   128e0:	00127ec0 	call	127ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   128e4:	01c07fc4 	movi	r7,511
   128e8:	000d883a 	mov	r6,zero
   128ec:	e17ffe17 	ldw	r5,-8(fp)
   128f0:	01000074 	movhi	r4,1
   128f4:	21108804 	addi	r4,r4,16928
   128f8:	00127ec0 	call	127ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   128fc:	01c07fc4 	movi	r7,511
   12900:	01800044 	movi	r6,1
   12904:	e17fff17 	ldw	r5,-4(fp)
   12908:	01000074 	movhi	r4,1
   1290c:	21108e04 	addi	r4,r4,16952
   12910:	00127ec0 	call	127ec <alt_open_fd>
}  
   12914:	0001883a 	nop
   12918:	e037883a 	mov	sp,fp
   1291c:	dfc00117 	ldw	ra,4(sp)
   12920:	df000017 	ldw	fp,0(sp)
   12924:	dec00204 	addi	sp,sp,8
   12928:	f800283a 	ret

0001292c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1292c:	defffe04 	addi	sp,sp,-8
   12930:	dfc00115 	stw	ra,4(sp)
   12934:	df000015 	stw	fp,0(sp)
   12938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1293c:	d0a01017 	ldw	r2,-32704(gp)
   12940:	10000326 	beq	r2,zero,12950 <alt_get_errno+0x24>
   12944:	d0a01017 	ldw	r2,-32704(gp)
   12948:	103ee83a 	callr	r2
   1294c:	00000106 	br	12954 <alt_get_errno+0x28>
   12950:	d0a6dc04 	addi	r2,gp,-25744
}
   12954:	e037883a 	mov	sp,fp
   12958:	dfc00117 	ldw	ra,4(sp)
   1295c:	df000017 	ldw	fp,0(sp)
   12960:	dec00204 	addi	sp,sp,8
   12964:	f800283a 	ret

00012968 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12968:	defffd04 	addi	sp,sp,-12
   1296c:	df000215 	stw	fp,8(sp)
   12970:	df000204 	addi	fp,sp,8
   12974:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12978:	e0bfff17 	ldw	r2,-4(fp)
   1297c:	10800217 	ldw	r2,8(r2)
   12980:	10d00034 	orhi	r3,r2,16384
   12984:	e0bfff17 	ldw	r2,-4(fp)
   12988:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1298c:	e03ffe15 	stw	zero,-8(fp)
   12990:	00001d06 	br	12a08 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12994:	00800074 	movhi	r2,1
   12998:	10908804 	addi	r2,r2,16928
   1299c:	e0fffe17 	ldw	r3,-8(fp)
   129a0:	18c00324 	muli	r3,r3,12
   129a4:	10c5883a 	add	r2,r2,r3
   129a8:	10c00017 	ldw	r3,0(r2)
   129ac:	e0bfff17 	ldw	r2,-4(fp)
   129b0:	10800017 	ldw	r2,0(r2)
   129b4:	1880111e 	bne	r3,r2,129fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   129b8:	00800074 	movhi	r2,1
   129bc:	10908804 	addi	r2,r2,16928
   129c0:	e0fffe17 	ldw	r3,-8(fp)
   129c4:	18c00324 	muli	r3,r3,12
   129c8:	10c5883a 	add	r2,r2,r3
   129cc:	10800204 	addi	r2,r2,8
   129d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   129d4:	1000090e 	bge	r2,zero,129fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   129d8:	e0bffe17 	ldw	r2,-8(fp)
   129dc:	10c00324 	muli	r3,r2,12
   129e0:	00800074 	movhi	r2,1
   129e4:	10908804 	addi	r2,r2,16928
   129e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   129ec:	e0bfff17 	ldw	r2,-4(fp)
   129f0:	18800226 	beq	r3,r2,129fc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   129f4:	00bffcc4 	movi	r2,-13
   129f8:	00000806 	br	12a1c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   129fc:	e0bffe17 	ldw	r2,-8(fp)
   12a00:	10800044 	addi	r2,r2,1
   12a04:	e0bffe15 	stw	r2,-8(fp)
   12a08:	d0a00f17 	ldw	r2,-32708(gp)
   12a0c:	1007883a 	mov	r3,r2
   12a10:	e0bffe17 	ldw	r2,-8(fp)
   12a14:	18bfdf2e 	bgeu	r3,r2,12994 <__alt_mem_onchip_memory+0xf7812994>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12a18:	0005883a 	mov	r2,zero
}
   12a1c:	e037883a 	mov	sp,fp
   12a20:	df000017 	ldw	fp,0(sp)
   12a24:	dec00104 	addi	sp,sp,4
   12a28:	f800283a 	ret

00012a2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12a2c:	defff604 	addi	sp,sp,-40
   12a30:	dfc00915 	stw	ra,36(sp)
   12a34:	df000815 	stw	fp,32(sp)
   12a38:	df000804 	addi	fp,sp,32
   12a3c:	e13ffd15 	stw	r4,-12(fp)
   12a40:	e17ffe15 	stw	r5,-8(fp)
   12a44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12a48:	00bfffc4 	movi	r2,-1
   12a4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12a50:	00bffb44 	movi	r2,-19
   12a54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12a58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12a5c:	d1600d04 	addi	r5,gp,-32716
   12a60:	e13ffd17 	ldw	r4,-12(fp)
   12a64:	0012d300 	call	12d30 <alt_find_dev>
   12a68:	e0bff815 	stw	r2,-32(fp)
   12a6c:	e0bff817 	ldw	r2,-32(fp)
   12a70:	1000051e 	bne	r2,zero,12a88 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   12a74:	e13ffd17 	ldw	r4,-12(fp)
   12a78:	0012dc00 	call	12dc0 <alt_find_file>
   12a7c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   12a80:	00800044 	movi	r2,1
   12a84:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12a88:	e0bff817 	ldw	r2,-32(fp)
   12a8c:	10002926 	beq	r2,zero,12b34 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12a90:	e13ff817 	ldw	r4,-32(fp)
   12a94:	0012ec80 	call	12ec8 <alt_get_fd>
   12a98:	e0bff915 	stw	r2,-28(fp)
   12a9c:	e0bff917 	ldw	r2,-28(fp)
   12aa0:	1000030e 	bge	r2,zero,12ab0 <open+0x84>
    {
      status = index;
   12aa4:	e0bff917 	ldw	r2,-28(fp)
   12aa8:	e0bffa15 	stw	r2,-24(fp)
   12aac:	00002306 	br	12b3c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   12ab0:	e0bff917 	ldw	r2,-28(fp)
   12ab4:	10c00324 	muli	r3,r2,12
   12ab8:	00800074 	movhi	r2,1
   12abc:	10908804 	addi	r2,r2,16928
   12ac0:	1885883a 	add	r2,r3,r2
   12ac4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12ac8:	e0fffe17 	ldw	r3,-8(fp)
   12acc:	00900034 	movhi	r2,16384
   12ad0:	10bfffc4 	addi	r2,r2,-1
   12ad4:	1886703a 	and	r3,r3,r2
   12ad8:	e0bffc17 	ldw	r2,-16(fp)
   12adc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12ae0:	e0bffb17 	ldw	r2,-20(fp)
   12ae4:	1000051e 	bne	r2,zero,12afc <open+0xd0>
   12ae8:	e13ffc17 	ldw	r4,-16(fp)
   12aec:	00129680 	call	12968 <alt_file_locked>
   12af0:	e0bffa15 	stw	r2,-24(fp)
   12af4:	e0bffa17 	ldw	r2,-24(fp)
   12af8:	10001016 	blt	r2,zero,12b3c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12afc:	e0bff817 	ldw	r2,-32(fp)
   12b00:	10800317 	ldw	r2,12(r2)
   12b04:	10000826 	beq	r2,zero,12b28 <open+0xfc>
   12b08:	e0bff817 	ldw	r2,-32(fp)
   12b0c:	10800317 	ldw	r2,12(r2)
   12b10:	e1ffff17 	ldw	r7,-4(fp)
   12b14:	e1bffe17 	ldw	r6,-8(fp)
   12b18:	e17ffd17 	ldw	r5,-12(fp)
   12b1c:	e13ffc17 	ldw	r4,-16(fp)
   12b20:	103ee83a 	callr	r2
   12b24:	00000106 	br	12b2c <open+0x100>
   12b28:	0005883a 	mov	r2,zero
   12b2c:	e0bffa15 	stw	r2,-24(fp)
   12b30:	00000206 	br	12b3c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12b34:	00bffb44 	movi	r2,-19
   12b38:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12b3c:	e0bffa17 	ldw	r2,-24(fp)
   12b40:	1000090e 	bge	r2,zero,12b68 <open+0x13c>
  {
    alt_release_fd (index);  
   12b44:	e13ff917 	ldw	r4,-28(fp)
   12b48:	0010f5c0 	call	10f5c <alt_release_fd>
    ALT_ERRNO = -status;
   12b4c:	001292c0 	call	1292c <alt_get_errno>
   12b50:	1007883a 	mov	r3,r2
   12b54:	e0bffa17 	ldw	r2,-24(fp)
   12b58:	0085c83a 	sub	r2,zero,r2
   12b5c:	18800015 	stw	r2,0(r3)
    return -1;
   12b60:	00bfffc4 	movi	r2,-1
   12b64:	00000106 	br	12b6c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   12b68:	e0bff917 	ldw	r2,-28(fp)
}
   12b6c:	e037883a 	mov	sp,fp
   12b70:	dfc00117 	ldw	ra,4(sp)
   12b74:	df000017 	ldw	fp,0(sp)
   12b78:	dec00204 	addi	sp,sp,8
   12b7c:	f800283a 	ret

00012b80 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12b80:	deffff04 	addi	sp,sp,-4
   12b84:	df000015 	stw	fp,0(sp)
   12b88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12b8c:	000170fa 	wrctl	ienable,zero
}
   12b90:	0001883a 	nop
   12b94:	e037883a 	mov	sp,fp
   12b98:	df000017 	ldw	fp,0(sp)
   12b9c:	dec00104 	addi	sp,sp,4
   12ba0:	f800283a 	ret

00012ba4 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   12ba4:	defff904 	addi	sp,sp,-28
   12ba8:	df000615 	stw	fp,24(sp)
   12bac:	df000604 	addi	fp,sp,24
   12bb0:	e13ffe15 	stw	r4,-8(fp)
   12bb4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   12bb8:	e03ffa15 	stw	zero,-24(fp)
   12bbc:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   12bc0:	000b883a 	mov	r5,zero
   12bc4:	e13ffe17 	ldw	r4,-8(fp)
   12bc8:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
   12bcc:	e13fff17 	ldw	r4,-4(fp)
   12bd0:	2008913a 	slli	r4,r4,4
   12bd4:	200b883a 	mov	r5,r4
   12bd8:	e13ffe17 	ldw	r4,-8(fp)
   12bdc:	2149883a 	add	r4,r4,r5
   12be0:	21000037 	ldwio	r4,0(r4)
   12be4:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   12be8:	e13fff17 	ldw	r4,-4(fp)
   12bec:	2008913a 	slli	r4,r4,4
   12bf0:	21000104 	addi	r4,r4,4
   12bf4:	200b883a 	mov	r5,r4
   12bf8:	e13ffe17 	ldw	r4,-8(fp)
   12bfc:	2149883a 	add	r4,r4,r5
   12c00:	21000037 	ldwio	r4,0(r4)
   12c04:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   12c08:	e13ffd17 	ldw	r4,-12(fp)
   12c0c:	2011883a 	mov	r8,r4
   12c10:	0013883a 	mov	r9,zero
   12c14:	4006983a 	sll	r3,r8,zero
   12c18:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
   12c1c:	e13ffc17 	ldw	r4,-16(fp)
   12c20:	200d883a 	mov	r6,r4
   12c24:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   12c28:	1188b03a 	or	r4,r2,r6
   12c2c:	e13ffa15 	stw	r4,-24(fp)
   12c30:	19c4b03a 	or	r2,r3,r7
   12c34:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   12c38:	e0bffa17 	ldw	r2,-24(fp)
   12c3c:	e0fffb17 	ldw	r3,-20(fp)
   12c40:	1009883a 	mov	r4,r2
   12c44:	180b883a 	mov	r5,r3
}
   12c48:	2005883a 	mov	r2,r4
   12c4c:	2807883a 	mov	r3,r5
   12c50:	e037883a 	mov	sp,fp
   12c54:	df000017 	ldw	fp,0(sp)
   12c58:	dec00104 	addi	sp,sp,4
   12c5c:	f800283a 	ret

00012c60 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   12c60:	defffd04 	addi	sp,sp,-12
   12c64:	dfc00215 	stw	ra,8(sp)
   12c68:	df000115 	stw	fp,4(sp)
   12c6c:	df000104 	addi	fp,sp,4
   12c70:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   12c74:	000b883a 	mov	r5,zero
   12c78:	e13fff17 	ldw	r4,-4(fp)
   12c7c:	0012ba40 	call	12ba4 <perf_get_section_time>
   12c80:	100b883a 	mov	r5,r2
   12c84:	180d883a 	mov	r6,r3
   12c88:	2807883a 	mov	r3,r5
   12c8c:	3009883a 	mov	r4,r6
}
   12c90:	1805883a 	mov	r2,r3
   12c94:	2007883a 	mov	r3,r4
   12c98:	e037883a 	mov	sp,fp
   12c9c:	dfc00117 	ldw	ra,4(sp)
   12ca0:	df000017 	ldw	fp,0(sp)
   12ca4:	dec00204 	addi	sp,sp,8
   12ca8:	f800283a 	ret

00012cac <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   12cac:	defffd04 	addi	sp,sp,-12
   12cb0:	df000215 	stw	fp,8(sp)
   12cb4:	df000204 	addi	fp,sp,8
   12cb8:	e13ffe15 	stw	r4,-8(fp)
   12cbc:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   12cc0:	e0bfff17 	ldw	r2,-4(fp)
   12cc4:	1004913a 	slli	r2,r2,4
   12cc8:	10800204 	addi	r2,r2,8
   12ccc:	1007883a 	mov	r3,r2
   12cd0:	e0bffe17 	ldw	r2,-8(fp)
   12cd4:	10c5883a 	add	r2,r2,r3
   12cd8:	10800037 	ldwio	r2,0(r2)
}
   12cdc:	e037883a 	mov	sp,fp
   12ce0:	df000017 	ldw	fp,0(sp)
   12ce4:	dec00104 	addi	sp,sp,4
   12ce8:	f800283a 	ret

00012cec <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   12cec:	deffff04 	addi	sp,sp,-4
   12cf0:	df000015 	stw	fp,0(sp)
   12cf4:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
   12cf8:	0005883a 	mov	r2,zero
#endif
}
   12cfc:	e037883a 	mov	sp,fp
   12d00:	df000017 	ldw	fp,0(sp)
   12d04:	dec00104 	addi	sp,sp,4
   12d08:	f800283a 	ret

00012d0c <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   12d0c:	deffff04 	addi	sp,sp,-4
   12d10:	df000015 	stw	fp,0(sp)
   12d14:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   12d18:	0080bef4 	movhi	r2,763
   12d1c:	10bc2004 	addi	r2,r2,-3968
}
   12d20:	e037883a 	mov	sp,fp
   12d24:	df000017 	ldw	fp,0(sp)
   12d28:	dec00104 	addi	sp,sp,4
   12d2c:	f800283a 	ret

00012d30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12d30:	defffa04 	addi	sp,sp,-24
   12d34:	dfc00515 	stw	ra,20(sp)
   12d38:	df000415 	stw	fp,16(sp)
   12d3c:	df000404 	addi	fp,sp,16
   12d40:	e13ffe15 	stw	r4,-8(fp)
   12d44:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12d48:	e0bfff17 	ldw	r2,-4(fp)
   12d4c:	10800017 	ldw	r2,0(r2)
   12d50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12d54:	e13ffe17 	ldw	r4,-8(fp)
   12d58:	00063180 	call	6318 <strlen>
   12d5c:	10800044 	addi	r2,r2,1
   12d60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12d64:	00000d06 	br	12d9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12d68:	e0bffc17 	ldw	r2,-16(fp)
   12d6c:	10800217 	ldw	r2,8(r2)
   12d70:	e0fffd17 	ldw	r3,-12(fp)
   12d74:	180d883a 	mov	r6,r3
   12d78:	e17ffe17 	ldw	r5,-8(fp)
   12d7c:	1009883a 	mov	r4,r2
   12d80:	00130e40 	call	130e4 <memcmp>
   12d84:	1000021e 	bne	r2,zero,12d90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12d88:	e0bffc17 	ldw	r2,-16(fp)
   12d8c:	00000706 	br	12dac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12d90:	e0bffc17 	ldw	r2,-16(fp)
   12d94:	10800017 	ldw	r2,0(r2)
   12d98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12d9c:	e0fffc17 	ldw	r3,-16(fp)
   12da0:	e0bfff17 	ldw	r2,-4(fp)
   12da4:	18bff01e 	bne	r3,r2,12d68 <__alt_mem_onchip_memory+0xf7812d68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12da8:	0005883a 	mov	r2,zero
}
   12dac:	e037883a 	mov	sp,fp
   12db0:	dfc00117 	ldw	ra,4(sp)
   12db4:	df000017 	ldw	fp,0(sp)
   12db8:	dec00204 	addi	sp,sp,8
   12dbc:	f800283a 	ret

00012dc0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12dc0:	defffb04 	addi	sp,sp,-20
   12dc4:	dfc00415 	stw	ra,16(sp)
   12dc8:	df000315 	stw	fp,12(sp)
   12dcc:	df000304 	addi	fp,sp,12
   12dd0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12dd4:	d0a00b17 	ldw	r2,-32724(gp)
   12dd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12ddc:	00003106 	br	12ea4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12de0:	e0bffd17 	ldw	r2,-12(fp)
   12de4:	10800217 	ldw	r2,8(r2)
   12de8:	1009883a 	mov	r4,r2
   12dec:	00063180 	call	6318 <strlen>
   12df0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12df4:	e0bffd17 	ldw	r2,-12(fp)
   12df8:	10c00217 	ldw	r3,8(r2)
   12dfc:	e0bffe17 	ldw	r2,-8(fp)
   12e00:	10bfffc4 	addi	r2,r2,-1
   12e04:	1885883a 	add	r2,r3,r2
   12e08:	10800003 	ldbu	r2,0(r2)
   12e0c:	10803fcc 	andi	r2,r2,255
   12e10:	1080201c 	xori	r2,r2,128
   12e14:	10bfe004 	addi	r2,r2,-128
   12e18:	10800bd8 	cmpnei	r2,r2,47
   12e1c:	1000031e 	bne	r2,zero,12e2c <alt_find_file+0x6c>
    {
      len -= 1;
   12e20:	e0bffe17 	ldw	r2,-8(fp)
   12e24:	10bfffc4 	addi	r2,r2,-1
   12e28:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12e2c:	e0bffe17 	ldw	r2,-8(fp)
   12e30:	e0ffff17 	ldw	r3,-4(fp)
   12e34:	1885883a 	add	r2,r3,r2
   12e38:	10800003 	ldbu	r2,0(r2)
   12e3c:	10803fcc 	andi	r2,r2,255
   12e40:	1080201c 	xori	r2,r2,128
   12e44:	10bfe004 	addi	r2,r2,-128
   12e48:	10800be0 	cmpeqi	r2,r2,47
   12e4c:	1000081e 	bne	r2,zero,12e70 <alt_find_file+0xb0>
   12e50:	e0bffe17 	ldw	r2,-8(fp)
   12e54:	e0ffff17 	ldw	r3,-4(fp)
   12e58:	1885883a 	add	r2,r3,r2
   12e5c:	10800003 	ldbu	r2,0(r2)
   12e60:	10803fcc 	andi	r2,r2,255
   12e64:	1080201c 	xori	r2,r2,128
   12e68:	10bfe004 	addi	r2,r2,-128
   12e6c:	10000a1e 	bne	r2,zero,12e98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12e70:	e0bffd17 	ldw	r2,-12(fp)
   12e74:	10800217 	ldw	r2,8(r2)
   12e78:	e0fffe17 	ldw	r3,-8(fp)
   12e7c:	180d883a 	mov	r6,r3
   12e80:	e17fff17 	ldw	r5,-4(fp)
   12e84:	1009883a 	mov	r4,r2
   12e88:	00130e40 	call	130e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12e8c:	1000021e 	bne	r2,zero,12e98 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12e90:	e0bffd17 	ldw	r2,-12(fp)
   12e94:	00000706 	br	12eb4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12e98:	e0bffd17 	ldw	r2,-12(fp)
   12e9c:	10800017 	ldw	r2,0(r2)
   12ea0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12ea4:	e0fffd17 	ldw	r3,-12(fp)
   12ea8:	d0a00b04 	addi	r2,gp,-32724
   12eac:	18bfcc1e 	bne	r3,r2,12de0 <__alt_mem_onchip_memory+0xf7812de0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12eb0:	0005883a 	mov	r2,zero
}
   12eb4:	e037883a 	mov	sp,fp
   12eb8:	dfc00117 	ldw	ra,4(sp)
   12ebc:	df000017 	ldw	fp,0(sp)
   12ec0:	dec00204 	addi	sp,sp,8
   12ec4:	f800283a 	ret

00012ec8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12ec8:	defffc04 	addi	sp,sp,-16
   12ecc:	df000315 	stw	fp,12(sp)
   12ed0:	df000304 	addi	fp,sp,12
   12ed4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12ed8:	00bffa04 	movi	r2,-24
   12edc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12ee0:	e03ffd15 	stw	zero,-12(fp)
   12ee4:	00001906 	br	12f4c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   12ee8:	00800074 	movhi	r2,1
   12eec:	10908804 	addi	r2,r2,16928
   12ef0:	e0fffd17 	ldw	r3,-12(fp)
   12ef4:	18c00324 	muli	r3,r3,12
   12ef8:	10c5883a 	add	r2,r2,r3
   12efc:	10800017 	ldw	r2,0(r2)
   12f00:	10000f1e 	bne	r2,zero,12f40 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   12f04:	00800074 	movhi	r2,1
   12f08:	10908804 	addi	r2,r2,16928
   12f0c:	e0fffd17 	ldw	r3,-12(fp)
   12f10:	18c00324 	muli	r3,r3,12
   12f14:	10c5883a 	add	r2,r2,r3
   12f18:	e0ffff17 	ldw	r3,-4(fp)
   12f1c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12f20:	d0e00f17 	ldw	r3,-32708(gp)
   12f24:	e0bffd17 	ldw	r2,-12(fp)
   12f28:	1880020e 	bge	r3,r2,12f34 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   12f2c:	e0bffd17 	ldw	r2,-12(fp)
   12f30:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   12f34:	e0bffd17 	ldw	r2,-12(fp)
   12f38:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   12f3c:	00000606 	br	12f58 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12f40:	e0bffd17 	ldw	r2,-12(fp)
   12f44:	10800044 	addi	r2,r2,1
   12f48:	e0bffd15 	stw	r2,-12(fp)
   12f4c:	e0bffd17 	ldw	r2,-12(fp)
   12f50:	10800810 	cmplti	r2,r2,32
   12f54:	103fe41e 	bne	r2,zero,12ee8 <__alt_mem_onchip_memory+0xf7812ee8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12f58:	e0bffe17 	ldw	r2,-8(fp)
}
   12f5c:	e037883a 	mov	sp,fp
   12f60:	df000017 	ldw	fp,0(sp)
   12f64:	dec00104 	addi	sp,sp,4
   12f68:	f800283a 	ret

00012f6c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12f6c:	defffb04 	addi	sp,sp,-20
   12f70:	df000415 	stw	fp,16(sp)
   12f74:	df000404 	addi	fp,sp,16
   12f78:	e13ffe15 	stw	r4,-8(fp)
   12f7c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12f80:	e0bfff17 	ldw	r2,-4(fp)
   12f84:	10840070 	cmpltui	r2,r2,4097
   12f88:	1000021e 	bne	r2,zero,12f94 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12f8c:	00840004 	movi	r2,4096
   12f90:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12f94:	e0fffe17 	ldw	r3,-8(fp)
   12f98:	e0bfff17 	ldw	r2,-4(fp)
   12f9c:	1885883a 	add	r2,r3,r2
   12fa0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12fa4:	e0bffe17 	ldw	r2,-8(fp)
   12fa8:	e0bffc15 	stw	r2,-16(fp)
   12fac:	00000506 	br	12fc4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12fb0:	e0bffc17 	ldw	r2,-16(fp)
   12fb4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12fb8:	e0bffc17 	ldw	r2,-16(fp)
   12fbc:	10800804 	addi	r2,r2,32
   12fc0:	e0bffc15 	stw	r2,-16(fp)
   12fc4:	e0fffc17 	ldw	r3,-16(fp)
   12fc8:	e0bffd17 	ldw	r2,-12(fp)
   12fcc:	18bff836 	bltu	r3,r2,12fb0 <__alt_mem_onchip_memory+0xf7812fb0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12fd0:	e0bffe17 	ldw	r2,-8(fp)
   12fd4:	108007cc 	andi	r2,r2,31
   12fd8:	10000226 	beq	r2,zero,12fe4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12fdc:	e0bffc17 	ldw	r2,-16(fp)
   12fe0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12fe4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   12fe8:	0001883a 	nop
   12fec:	e037883a 	mov	sp,fp
   12ff0:	df000017 	ldw	fp,0(sp)
   12ff4:	dec00104 	addi	sp,sp,4
   12ff8:	f800283a 	ret

00012ffc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12ffc:	defffe04 	addi	sp,sp,-8
   13000:	df000115 	stw	fp,4(sp)
   13004:	df000104 	addi	fp,sp,4
   13008:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1300c:	e0bfff17 	ldw	r2,-4(fp)
   13010:	10bffe84 	addi	r2,r2,-6
   13014:	10c00428 	cmpgeui	r3,r2,16
   13018:	18001a1e 	bne	r3,zero,13084 <alt_exception_cause_generated_bad_addr+0x88>
   1301c:	100690ba 	slli	r3,r2,2
   13020:	00800074 	movhi	r2,1
   13024:	108c0d04 	addi	r2,r2,12340
   13028:	1885883a 	add	r2,r3,r2
   1302c:	10800017 	ldw	r2,0(r2)
   13030:	1000683a 	jmp	r2
   13034:	00013074 	movhi	zero,1217
   13038:	00013074 	movhi	zero,1217
   1303c:	00013084 	movi	zero,1218
   13040:	00013084 	movi	zero,1218
   13044:	00013084 	movi	zero,1218
   13048:	00013074 	movhi	zero,1217
   1304c:	0001307c 	xorhi	zero,zero,1217
   13050:	00013084 	movi	zero,1218
   13054:	00013074 	movhi	zero,1217
   13058:	00013074 	movhi	zero,1217
   1305c:	00013084 	movi	zero,1218
   13060:	00013074 	movhi	zero,1217
   13064:	0001307c 	xorhi	zero,zero,1217
   13068:	00013084 	movi	zero,1218
   1306c:	00013084 	movi	zero,1218
   13070:	00013074 	movhi	zero,1217
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   13074:	00800044 	movi	r2,1
   13078:	00000306 	br	13088 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1307c:	0005883a 	mov	r2,zero
   13080:	00000106 	br	13088 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   13084:	0005883a 	mov	r2,zero
  }
}
   13088:	e037883a 	mov	sp,fp
   1308c:	df000017 	ldw	fp,0(sp)
   13090:	dec00104 	addi	sp,sp,4
   13094:	f800283a 	ret

00013098 <atexit>:
   13098:	200b883a 	mov	r5,r4
   1309c:	000f883a 	mov	r7,zero
   130a0:	000d883a 	mov	r6,zero
   130a4:	0009883a 	mov	r4,zero
   130a8:	00131601 	jmpi	13160 <__register_exitproc>

000130ac <exit>:
   130ac:	defffe04 	addi	sp,sp,-8
   130b0:	000b883a 	mov	r5,zero
   130b4:	dc000015 	stw	r16,0(sp)
   130b8:	dfc00115 	stw	ra,4(sp)
   130bc:	2021883a 	mov	r16,r4
   130c0:	00132780 	call	13278 <__call_exitprocs>
   130c4:	00800074 	movhi	r2,1
   130c8:	10950504 	addi	r2,r2,21524
   130cc:	11000017 	ldw	r4,0(r2)
   130d0:	20800f17 	ldw	r2,60(r4)
   130d4:	10000126 	beq	r2,zero,130dc <exit+0x30>
   130d8:	103ee83a 	callr	r2
   130dc:	8009883a 	mov	r4,r16
   130e0:	00134680 	call	13468 <_exit>

000130e4 <memcmp>:
   130e4:	01c000c4 	movi	r7,3
   130e8:	3980192e 	bgeu	r7,r6,13150 <memcmp+0x6c>
   130ec:	2144b03a 	or	r2,r4,r5
   130f0:	11c4703a 	and	r2,r2,r7
   130f4:	10000f26 	beq	r2,zero,13134 <memcmp+0x50>
   130f8:	20800003 	ldbu	r2,0(r4)
   130fc:	28c00003 	ldbu	r3,0(r5)
   13100:	10c0151e 	bne	r2,r3,13158 <memcmp+0x74>
   13104:	31bfff84 	addi	r6,r6,-2
   13108:	01ffffc4 	movi	r7,-1
   1310c:	00000406 	br	13120 <memcmp+0x3c>
   13110:	20800003 	ldbu	r2,0(r4)
   13114:	28c00003 	ldbu	r3,0(r5)
   13118:	31bfffc4 	addi	r6,r6,-1
   1311c:	10c00e1e 	bne	r2,r3,13158 <memcmp+0x74>
   13120:	21000044 	addi	r4,r4,1
   13124:	29400044 	addi	r5,r5,1
   13128:	31fff91e 	bne	r6,r7,13110 <__alt_mem_onchip_memory+0xf7813110>
   1312c:	0005883a 	mov	r2,zero
   13130:	f800283a 	ret
   13134:	20c00017 	ldw	r3,0(r4)
   13138:	28800017 	ldw	r2,0(r5)
   1313c:	18bfee1e 	bne	r3,r2,130f8 <__alt_mem_onchip_memory+0xf78130f8>
   13140:	31bfff04 	addi	r6,r6,-4
   13144:	21000104 	addi	r4,r4,4
   13148:	29400104 	addi	r5,r5,4
   1314c:	39bff936 	bltu	r7,r6,13134 <__alt_mem_onchip_memory+0xf7813134>
   13150:	303fe91e 	bne	r6,zero,130f8 <__alt_mem_onchip_memory+0xf78130f8>
   13154:	003ff506 	br	1312c <__alt_mem_onchip_memory+0xf781312c>
   13158:	10c5c83a 	sub	r2,r2,r3
   1315c:	f800283a 	ret

00013160 <__register_exitproc>:
   13160:	defffa04 	addi	sp,sp,-24
   13164:	dc000315 	stw	r16,12(sp)
   13168:	04000074 	movhi	r16,1
   1316c:	84150504 	addi	r16,r16,21524
   13170:	80c00017 	ldw	r3,0(r16)
   13174:	dc400415 	stw	r17,16(sp)
   13178:	dfc00515 	stw	ra,20(sp)
   1317c:	18805217 	ldw	r2,328(r3)
   13180:	2023883a 	mov	r17,r4
   13184:	10003726 	beq	r2,zero,13264 <__register_exitproc+0x104>
   13188:	10c00117 	ldw	r3,4(r2)
   1318c:	010007c4 	movi	r4,31
   13190:	20c00e16 	blt	r4,r3,131cc <__register_exitproc+0x6c>
   13194:	1a000044 	addi	r8,r3,1
   13198:	8800221e 	bne	r17,zero,13224 <__register_exitproc+0xc4>
   1319c:	18c00084 	addi	r3,r3,2
   131a0:	18c7883a 	add	r3,r3,r3
   131a4:	18c7883a 	add	r3,r3,r3
   131a8:	12000115 	stw	r8,4(r2)
   131ac:	10c7883a 	add	r3,r2,r3
   131b0:	19400015 	stw	r5,0(r3)
   131b4:	0005883a 	mov	r2,zero
   131b8:	dfc00517 	ldw	ra,20(sp)
   131bc:	dc400417 	ldw	r17,16(sp)
   131c0:	dc000317 	ldw	r16,12(sp)
   131c4:	dec00604 	addi	sp,sp,24
   131c8:	f800283a 	ret
   131cc:	00800034 	movhi	r2,0
   131d0:	10800004 	addi	r2,r2,0
   131d4:	10002626 	beq	r2,zero,13270 <__register_exitproc+0x110>
   131d8:	01006404 	movi	r4,400
   131dc:	d9400015 	stw	r5,0(sp)
   131e0:	d9800115 	stw	r6,4(sp)
   131e4:	d9c00215 	stw	r7,8(sp)
   131e8:	00000000 	call	0 <__alt_mem_sdram>
   131ec:	d9400017 	ldw	r5,0(sp)
   131f0:	d9800117 	ldw	r6,4(sp)
   131f4:	d9c00217 	ldw	r7,8(sp)
   131f8:	10001d26 	beq	r2,zero,13270 <__register_exitproc+0x110>
   131fc:	81000017 	ldw	r4,0(r16)
   13200:	10000115 	stw	zero,4(r2)
   13204:	02000044 	movi	r8,1
   13208:	22405217 	ldw	r9,328(r4)
   1320c:	0007883a 	mov	r3,zero
   13210:	12400015 	stw	r9,0(r2)
   13214:	20805215 	stw	r2,328(r4)
   13218:	10006215 	stw	zero,392(r2)
   1321c:	10006315 	stw	zero,396(r2)
   13220:	883fde26 	beq	r17,zero,1319c <__alt_mem_onchip_memory+0xf781319c>
   13224:	18c9883a 	add	r4,r3,r3
   13228:	2109883a 	add	r4,r4,r4
   1322c:	1109883a 	add	r4,r2,r4
   13230:	21802215 	stw	r6,136(r4)
   13234:	01800044 	movi	r6,1
   13238:	12406217 	ldw	r9,392(r2)
   1323c:	30cc983a 	sll	r6,r6,r3
   13240:	4992b03a 	or	r9,r9,r6
   13244:	12406215 	stw	r9,392(r2)
   13248:	21c04215 	stw	r7,264(r4)
   1324c:	01000084 	movi	r4,2
   13250:	893fd21e 	bne	r17,r4,1319c <__alt_mem_onchip_memory+0xf781319c>
   13254:	11006317 	ldw	r4,396(r2)
   13258:	218cb03a 	or	r6,r4,r6
   1325c:	11806315 	stw	r6,396(r2)
   13260:	003fce06 	br	1319c <__alt_mem_onchip_memory+0xf781319c>
   13264:	18805304 	addi	r2,r3,332
   13268:	18805215 	stw	r2,328(r3)
   1326c:	003fc606 	br	13188 <__alt_mem_onchip_memory+0xf7813188>
   13270:	00bfffc4 	movi	r2,-1
   13274:	003fd006 	br	131b8 <__alt_mem_onchip_memory+0xf78131b8>

00013278 <__call_exitprocs>:
   13278:	defff504 	addi	sp,sp,-44
   1327c:	df000915 	stw	fp,36(sp)
   13280:	dd400615 	stw	r21,24(sp)
   13284:	dc800315 	stw	r18,12(sp)
   13288:	dfc00a15 	stw	ra,40(sp)
   1328c:	ddc00815 	stw	r23,32(sp)
   13290:	dd800715 	stw	r22,28(sp)
   13294:	dd000515 	stw	r20,20(sp)
   13298:	dcc00415 	stw	r19,16(sp)
   1329c:	dc400215 	stw	r17,8(sp)
   132a0:	dc000115 	stw	r16,4(sp)
   132a4:	d9000015 	stw	r4,0(sp)
   132a8:	2839883a 	mov	fp,r5
   132ac:	04800044 	movi	r18,1
   132b0:	057fffc4 	movi	r21,-1
   132b4:	00800074 	movhi	r2,1
   132b8:	10950504 	addi	r2,r2,21524
   132bc:	12000017 	ldw	r8,0(r2)
   132c0:	45005217 	ldw	r20,328(r8)
   132c4:	44c05204 	addi	r19,r8,328
   132c8:	a0001c26 	beq	r20,zero,1333c <__call_exitprocs+0xc4>
   132cc:	a0800117 	ldw	r2,4(r20)
   132d0:	15ffffc4 	addi	r23,r2,-1
   132d4:	b8000d16 	blt	r23,zero,1330c <__call_exitprocs+0x94>
   132d8:	14000044 	addi	r16,r2,1
   132dc:	8421883a 	add	r16,r16,r16
   132e0:	8421883a 	add	r16,r16,r16
   132e4:	84402004 	addi	r17,r16,128
   132e8:	a463883a 	add	r17,r20,r17
   132ec:	a421883a 	add	r16,r20,r16
   132f0:	e0001e26 	beq	fp,zero,1336c <__call_exitprocs+0xf4>
   132f4:	80804017 	ldw	r2,256(r16)
   132f8:	e0801c26 	beq	fp,r2,1336c <__call_exitprocs+0xf4>
   132fc:	bdffffc4 	addi	r23,r23,-1
   13300:	843fff04 	addi	r16,r16,-4
   13304:	8c7fff04 	addi	r17,r17,-4
   13308:	bd7ff91e 	bne	r23,r21,132f0 <__alt_mem_onchip_memory+0xf78132f0>
   1330c:	00800034 	movhi	r2,0
   13310:	10800004 	addi	r2,r2,0
   13314:	10000926 	beq	r2,zero,1333c <__call_exitprocs+0xc4>
   13318:	a0800117 	ldw	r2,4(r20)
   1331c:	1000301e 	bne	r2,zero,133e0 <__call_exitprocs+0x168>
   13320:	a0800017 	ldw	r2,0(r20)
   13324:	10003226 	beq	r2,zero,133f0 <__call_exitprocs+0x178>
   13328:	a009883a 	mov	r4,r20
   1332c:	98800015 	stw	r2,0(r19)
   13330:	00000000 	call	0 <__alt_mem_sdram>
   13334:	9d000017 	ldw	r20,0(r19)
   13338:	a03fe41e 	bne	r20,zero,132cc <__alt_mem_onchip_memory+0xf78132cc>
   1333c:	dfc00a17 	ldw	ra,40(sp)
   13340:	df000917 	ldw	fp,36(sp)
   13344:	ddc00817 	ldw	r23,32(sp)
   13348:	dd800717 	ldw	r22,28(sp)
   1334c:	dd400617 	ldw	r21,24(sp)
   13350:	dd000517 	ldw	r20,20(sp)
   13354:	dcc00417 	ldw	r19,16(sp)
   13358:	dc800317 	ldw	r18,12(sp)
   1335c:	dc400217 	ldw	r17,8(sp)
   13360:	dc000117 	ldw	r16,4(sp)
   13364:	dec00b04 	addi	sp,sp,44
   13368:	f800283a 	ret
   1336c:	a0800117 	ldw	r2,4(r20)
   13370:	80c00017 	ldw	r3,0(r16)
   13374:	10bfffc4 	addi	r2,r2,-1
   13378:	15c01426 	beq	r2,r23,133cc <__call_exitprocs+0x154>
   1337c:	80000015 	stw	zero,0(r16)
   13380:	183fde26 	beq	r3,zero,132fc <__alt_mem_onchip_memory+0xf78132fc>
   13384:	95c8983a 	sll	r4,r18,r23
   13388:	a0806217 	ldw	r2,392(r20)
   1338c:	a5800117 	ldw	r22,4(r20)
   13390:	2084703a 	and	r2,r4,r2
   13394:	10000b26 	beq	r2,zero,133c4 <__call_exitprocs+0x14c>
   13398:	a0806317 	ldw	r2,396(r20)
   1339c:	2088703a 	and	r4,r4,r2
   133a0:	20000c1e 	bne	r4,zero,133d4 <__call_exitprocs+0x15c>
   133a4:	89400017 	ldw	r5,0(r17)
   133a8:	d9000017 	ldw	r4,0(sp)
   133ac:	183ee83a 	callr	r3
   133b0:	a0800117 	ldw	r2,4(r20)
   133b4:	15bfbf1e 	bne	r2,r22,132b4 <__alt_mem_onchip_memory+0xf78132b4>
   133b8:	98800017 	ldw	r2,0(r19)
   133bc:	153fcf26 	beq	r2,r20,132fc <__alt_mem_onchip_memory+0xf78132fc>
   133c0:	003fbc06 	br	132b4 <__alt_mem_onchip_memory+0xf78132b4>
   133c4:	183ee83a 	callr	r3
   133c8:	003ff906 	br	133b0 <__alt_mem_onchip_memory+0xf78133b0>
   133cc:	a5c00115 	stw	r23,4(r20)
   133d0:	003feb06 	br	13380 <__alt_mem_onchip_memory+0xf7813380>
   133d4:	89000017 	ldw	r4,0(r17)
   133d8:	183ee83a 	callr	r3
   133dc:	003ff406 	br	133b0 <__alt_mem_onchip_memory+0xf78133b0>
   133e0:	a0800017 	ldw	r2,0(r20)
   133e4:	a027883a 	mov	r19,r20
   133e8:	1029883a 	mov	r20,r2
   133ec:	003fb606 	br	132c8 <__alt_mem_onchip_memory+0xf78132c8>
   133f0:	0005883a 	mov	r2,zero
   133f4:	003ffb06 	br	133e4 <__alt_mem_onchip_memory+0xf78133e4>

000133f8 <__floatundidf>:
   133f8:	defffc04 	addi	sp,sp,-16
   133fc:	dc800215 	stw	r18,8(sp)
   13400:	2025883a 	mov	r18,r4
   13404:	2809883a 	mov	r4,r5
   13408:	dfc00315 	stw	ra,12(sp)
   1340c:	dc400115 	stw	r17,4(sp)
   13410:	dc000015 	stw	r16,0(sp)
   13414:	00105c40 	call	105c4 <__floatunsidf>
   13418:	000d883a 	mov	r6,zero
   1341c:	01d07c34 	movhi	r7,16880
   13420:	180b883a 	mov	r5,r3
   13424:	1009883a 	mov	r4,r2
   13428:	0004aec0 	call	4aec <__muldf3>
   1342c:	9009883a 	mov	r4,r18
   13430:	1023883a 	mov	r17,r2
   13434:	1821883a 	mov	r16,r3
   13438:	00105c40 	call	105c4 <__floatunsidf>
   1343c:	880d883a 	mov	r6,r17
   13440:	800f883a 	mov	r7,r16
   13444:	1009883a 	mov	r4,r2
   13448:	180b883a 	mov	r5,r3
   1344c:	00037880 	call	3788 <__adddf3>
   13450:	dfc00317 	ldw	ra,12(sp)
   13454:	dc800217 	ldw	r18,8(sp)
   13458:	dc400117 	ldw	r17,4(sp)
   1345c:	dc000017 	ldw	r16,0(sp)
   13460:	dec00404 	addi	sp,sp,16
   13464:	f800283a 	ret

00013468 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13468:	defffd04 	addi	sp,sp,-12
   1346c:	df000215 	stw	fp,8(sp)
   13470:	df000204 	addi	fp,sp,8
   13474:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13478:	0001883a 	nop
   1347c:	e0bfff17 	ldw	r2,-4(fp)
   13480:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13484:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13488:	10000226 	beq	r2,zero,13494 <_exit+0x2c>
    ALT_SIM_FAIL();
   1348c:	002af070 	cmpltui	zero,zero,43969
   13490:	00000106 	br	13498 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   13494:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13498:	003fff06 	br	13498 <__alt_mem_onchip_memory+0xf7813498>
